
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
		k_mutex_unlock(&button_handler_mut);
	}
}

static void buttons_scan_fn(struct k_work *work)
{
   0:	00 69 00 20 a5 4d 01 00 ef 92 02 00 79 4d 01 00     .i. .M......yM..
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  10:	79 4d 01 00 79 4d 01 00 79 4d 01 00 00 00 00 00     yM..yM..yM......
	...

	button_scan = get_buttons();
	atomic_set(&my_buttons, (atomic_val_t)button_scan);

	if (!initial_run) {
		if (button_scan != last_button_scan) {
  2c:	19 48 01 00 79 4d 01 00 00 00 00 00 c5 47 01 00     .H..yM.......G..
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
  3c:	79 4d 01 00                                         yM..

00000040 <_irq_vector_table>:
  40:	c9 48 01 00 15 bb 02 00 c9 48 01 00 c9 48 01 00     .H.......H...H..
			handler->cb(button_state, has_changed);
  50:	c9 48 01 00 c9 48 01 00 c9 48 01 00 c9 48 01 00     .H...H...H...H..
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  60:	dd ba 02 00 c9 48 01 00 c9 48 01 00 fb ba 02 00     .....H...H......
	}

	last_button_scan = button_scan;

	if (button_scan != 0) {
		k_work_reschedule(&buttons_scan,
  70:	c9 48 01 00 c9 48 01 00 c9 48 01 00 c9 48 01 00     .H...H...H...H..
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
  80:	c9 48 01 00 c9 48 01 00 c9 48 01 00 c9 48 01 00     .H...H...H...H..
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
  90:	c9 48 01 00 c9 48 01 00 c9 48 01 00 c9 48 01 00     .H...H...H...H..
  a0:	c9 48 01 00 c9 48 01 00 c9 48 01 00 c9 48 01 00     .H...H...H...H..
		/* If no button is pressed module can switch to callbacks */
		int err = 0;

		k_spinlock_key_t key = k_spin_lock(&lock);

		switch (state) {
  b0:	c9 48 01 00 c9 48 01 00 c9 48 01 00 c9 48 01 00     .H...H...H...H..
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
  c0:	c9 48 01 00 c9 48 01 00 c9 48 01 00 c9 48 01 00     .H...H...H...H..
  d0:	c9 48 01 00 c9 48 01 00 c9 48 01 00 c9 48 01 00     .H...H...H...H..
			break;
		}

		k_spin_unlock(&lock, key);

		if (err) {
  e0:	c9 48 01 00 c9 48 01 00 c9 48 01 00 c9 48 01 00     .H...H...H...H..
			__ASSERT_NO_MSG(false);
  f0:	c9 48 01 00 c9 48 01 00 c9 48 01 00 c9 48 01 00     .H...H...H...H..

Disassembly of section text:

00000100 <__aeabi_drsub>:
		int err = 0;
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
			LOG_ERR("Cannot enable callbacks");
		}
	}
}
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18d>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x179>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xc3>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xab>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1df>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xab>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x10d>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x109>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x123>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x171>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x159>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ed>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1b1>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1cf>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x18>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb0>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_LONG_WQ_STACK_SIZE+0xc8>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_BT_LONG_WQ_STACK_SIZE+0x98>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     89a:	e712      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>

0000089c <__aeabi_d2f>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     8a4:	bf24      	itt	cs
     8a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     8aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     8ae:	d90d      	bls.n	8cc <__aeabi_d2f+0x30>
     8b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     8b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     8b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     8bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8c4:	bf08      	it	eq
     8c6:	f020 0001 	biceq.w	r0, r0, #1
     8ca:	4770      	bx	lr
     8cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8d0:	d121      	bne.n	916 <__aeabi_d2f+0x7a>
     8d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8d6:	bfbc      	itt	lt
     8d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8dc:	4770      	bxlt	lr
     8de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8e6:	f1c2 0218 	rsb	r2, r2, #24
     8ea:	f1c2 0c20 	rsb	ip, r2, #32
     8ee:	fa10 f30c 	lsls.w	r3, r0, ip
     8f2:	fa20 f002 	lsr.w	r0, r0, r2
     8f6:	bf18      	it	ne
     8f8:	f040 0001 	orrne.w	r0, r0, #1
     8fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     904:	fa03 fc0c 	lsl.w	ip, r3, ip
     908:	ea40 000c 	orr.w	r0, r0, ip
     90c:	fa23 f302 	lsr.w	r3, r3, r2
     910:	ea4f 0343 	mov.w	r3, r3, lsl #1
     914:	e7cc      	b.n	8b0 <__aeabi_d2f+0x14>
     916:	ea7f 5362 	mvns.w	r3, r2, asr #21
     91a:	d107      	bne.n	92c <__aeabi_d2f+0x90>
     91c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     920:	bf1e      	ittt	ne
     922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     92a:	4770      	bxne	lr
     92c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     938:	4770      	bx	lr
     93a:	bf00      	nop

0000093c <__aeabi_frsub>:
     93c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     940:	e002      	b.n	948 <__addsf3>
     942:	bf00      	nop

00000944 <__aeabi_fsub>:
     944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000948 <__addsf3>:
     948:	0042      	lsls	r2, r0, #1
     94a:	bf1f      	itttt	ne
     94c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     950:	ea92 0f03 	teqne	r2, r3
     954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     95c:	d06a      	beq.n	a34 <__data_size+0x7b>
     95e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     966:	bfc1      	itttt	gt
     968:	18d2      	addgt	r2, r2, r3
     96a:	4041      	eorgt	r1, r0
     96c:	4048      	eorgt	r0, r1
     96e:	4041      	eorgt	r1, r0
     970:	bfb8      	it	lt
     972:	425b      	neglt	r3, r3
     974:	2b19      	cmp	r3, #25
     976:	bf88      	it	hi
     978:	4770      	bxhi	lr
     97a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     97e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     986:	bf18      	it	ne
     988:	4240      	negne	r0, r0
     98a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     98e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     996:	bf18      	it	ne
     998:	4249      	negne	r1, r1
     99a:	ea92 0f03 	teq	r2, r3
     99e:	d03f      	beq.n	a20 <__data_size+0x67>
     9a0:	f1a2 0201 	sub.w	r2, r2, #1
     9a4:	fa41 fc03 	asr.w	ip, r1, r3
     9a8:	eb10 000c 	adds.w	r0, r0, ip
     9ac:	f1c3 0320 	rsb	r3, r3, #32
     9b0:	fa01 f103 	lsl.w	r1, r1, r3
     9b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     9b8:	d502      	bpl.n	9c0 <__data_size+0x7>
     9ba:	4249      	negs	r1, r1
     9bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     9c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     9c4:	d313      	bcc.n	9ee <__data_size+0x35>
     9c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     9ca:	d306      	bcc.n	9da <__data_size+0x21>
     9cc:	0840      	lsrs	r0, r0, #1
     9ce:	ea4f 0131 	mov.w	r1, r1, rrx
     9d2:	f102 0201 	add.w	r2, r2, #1
     9d6:	2afe      	cmp	r2, #254	; 0xfe
     9d8:	d251      	bcs.n	a7e <__data_size+0xc5>
     9da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     9de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     9e2:	bf08      	it	eq
     9e4:	f020 0001 	biceq.w	r0, r0, #1
     9e8:	ea40 0003 	orr.w	r0, r0, r3
     9ec:	4770      	bx	lr
     9ee:	0049      	lsls	r1, r1, #1
     9f0:	eb40 0000 	adc.w	r0, r0, r0
     9f4:	3a01      	subs	r2, #1
     9f6:	bf28      	it	cs
     9f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     9fc:	d2ed      	bcs.n	9da <__data_size+0x21>
     9fe:	fab0 fc80 	clz	ip, r0
     a02:	f1ac 0c08 	sub.w	ip, ip, #8
     a06:	ebb2 020c 	subs.w	r2, r2, ip
     a0a:	fa00 f00c 	lsl.w	r0, r0, ip
     a0e:	bfaa      	itet	ge
     a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     a14:	4252      	neglt	r2, r2
     a16:	4318      	orrge	r0, r3
     a18:	bfbc      	itt	lt
     a1a:	40d0      	lsrlt	r0, r2
     a1c:	4318      	orrlt	r0, r3
     a1e:	4770      	bx	lr
     a20:	f092 0f00 	teq	r2, #0
     a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     a28:	bf06      	itte	eq
     a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     a2e:	3201      	addeq	r2, #1
     a30:	3b01      	subne	r3, #1
     a32:	e7b5      	b.n	9a0 <__addsf3+0x58>
     a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a3c:	bf18      	it	ne
     a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a42:	d021      	beq.n	a88 <__data_size+0xcf>
     a44:	ea92 0f03 	teq	r2, r3
     a48:	d004      	beq.n	a54 <__data_size+0x9b>
     a4a:	f092 0f00 	teq	r2, #0
     a4e:	bf08      	it	eq
     a50:	4608      	moveq	r0, r1
     a52:	4770      	bx	lr
     a54:	ea90 0f01 	teq	r0, r1
     a58:	bf1c      	itt	ne
     a5a:	2000      	movne	r0, #0
     a5c:	4770      	bxne	lr
     a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     a62:	d104      	bne.n	a6e <__data_size+0xb5>
     a64:	0040      	lsls	r0, r0, #1
     a66:	bf28      	it	cs
     a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     a6c:	4770      	bx	lr
     a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     a72:	bf3c      	itt	cc
     a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     a78:	4770      	bxcc	lr
     a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a86:	4770      	bx	lr
     a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
     a8c:	bf16      	itet	ne
     a8e:	4608      	movne	r0, r1
     a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     a94:	4601      	movne	r1, r0
     a96:	0242      	lsls	r2, r0, #9
     a98:	bf06      	itte	eq
     a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     a9e:	ea90 0f01 	teqeq	r0, r1
     aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     aa6:	4770      	bx	lr

00000aa8 <__aeabi_ui2f>:
     aa8:	f04f 0300 	mov.w	r3, #0
     aac:	e004      	b.n	ab8 <__aeabi_i2f+0x8>
     aae:	bf00      	nop

00000ab0 <__aeabi_i2f>:
     ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     ab4:	bf48      	it	mi
     ab6:	4240      	negmi	r0, r0
     ab8:	ea5f 0c00 	movs.w	ip, r0
     abc:	bf08      	it	eq
     abe:	4770      	bxeq	lr
     ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     ac4:	4601      	mov	r1, r0
     ac6:	f04f 0000 	mov.w	r0, #0
     aca:	e01c      	b.n	b06 <__aeabi_l2f+0x2a>

00000acc <__aeabi_ul2f>:
     acc:	ea50 0201 	orrs.w	r2, r0, r1
     ad0:	bf08      	it	eq
     ad2:	4770      	bxeq	lr
     ad4:	f04f 0300 	mov.w	r3, #0
     ad8:	e00a      	b.n	af0 <__aeabi_l2f+0x14>
     ada:	bf00      	nop

00000adc <__aeabi_l2f>:
     adc:	ea50 0201 	orrs.w	r2, r0, r1
     ae0:	bf08      	it	eq
     ae2:	4770      	bxeq	lr
     ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ae8:	d502      	bpl.n	af0 <__aeabi_l2f+0x14>
     aea:	4240      	negs	r0, r0
     aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     af0:	ea5f 0c01 	movs.w	ip, r1
     af4:	bf02      	ittt	eq
     af6:	4684      	moveq	ip, r0
     af8:	4601      	moveq	r1, r0
     afa:	2000      	moveq	r0, #0
     afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b00:	bf08      	it	eq
     b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b0a:	fabc f28c 	clz	r2, ip
     b0e:	3a08      	subs	r2, #8
     b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     b14:	db10      	blt.n	b38 <__aeabi_l2f+0x5c>
     b16:	fa01 fc02 	lsl.w	ip, r1, r2
     b1a:	4463      	add	r3, ip
     b1c:	fa00 fc02 	lsl.w	ip, r0, r2
     b20:	f1c2 0220 	rsb	r2, r2, #32
     b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     b28:	fa20 f202 	lsr.w	r2, r0, r2
     b2c:	eb43 0002 	adc.w	r0, r3, r2
     b30:	bf08      	it	eq
     b32:	f020 0001 	biceq.w	r0, r0, #1
     b36:	4770      	bx	lr
     b38:	f102 0220 	add.w	r2, r2, #32
     b3c:	fa01 fc02 	lsl.w	ip, r1, r2
     b40:	f1c2 0220 	rsb	r2, r2, #32
     b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     b48:	fa21 f202 	lsr.w	r2, r1, r2
     b4c:	eb43 0002 	adc.w	r0, r3, r2
     b50:	bf08      	it	eq
     b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     b56:	4770      	bx	lr

00000b58 <__aeabi_fmul>:
     b58:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     b60:	bf1e      	ittt	ne
     b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     b66:	ea92 0f0c 	teqne	r2, ip
     b6a:	ea93 0f0c 	teqne	r3, ip
     b6e:	d06f      	beq.n	c50 <__aeabi_fmul+0xf8>
     b70:	441a      	add	r2, r3
     b72:	ea80 0c01 	eor.w	ip, r0, r1
     b76:	0240      	lsls	r0, r0, #9
     b78:	bf18      	it	ne
     b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     b7e:	d01e      	beq.n	bbe <__aeabi_fmul+0x66>
     b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     b8c:	fba0 3101 	umull	r3, r1, r0, r1
     b90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     b94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     b98:	bf3e      	ittt	cc
     b9a:	0049      	lslcc	r1, r1, #1
     b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     ba0:	005b      	lslcc	r3, r3, #1
     ba2:	ea40 0001 	orr.w	r0, r0, r1
     ba6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     baa:	2afd      	cmp	r2, #253	; 0xfd
     bac:	d81d      	bhi.n	bea <__aeabi_fmul+0x92>
     bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     bb6:	bf08      	it	eq
     bb8:	f020 0001 	biceq.w	r0, r0, #1
     bbc:	4770      	bx	lr
     bbe:	f090 0f00 	teq	r0, #0
     bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     bc6:	bf08      	it	eq
     bc8:	0249      	lsleq	r1, r1, #9
     bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     bd2:	3a7f      	subs	r2, #127	; 0x7f
     bd4:	bfc2      	ittt	gt
     bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     bde:	4770      	bxgt	lr
     be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     be4:	f04f 0300 	mov.w	r3, #0
     be8:	3a01      	subs	r2, #1
     bea:	dc5d      	bgt.n	ca8 <__aeabi_fmul+0x150>
     bec:	f112 0f19 	cmn.w	r2, #25
     bf0:	bfdc      	itt	le
     bf2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     bf6:	4770      	bxle	lr
     bf8:	f1c2 0200 	rsb	r2, r2, #0
     bfc:	0041      	lsls	r1, r0, #1
     bfe:	fa21 f102 	lsr.w	r1, r1, r2
     c02:	f1c2 0220 	rsb	r2, r2, #32
     c06:	fa00 fc02 	lsl.w	ip, r0, r2
     c0a:	ea5f 0031 	movs.w	r0, r1, rrx
     c0e:	f140 0000 	adc.w	r0, r0, #0
     c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     c16:	bf08      	it	eq
     c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c1c:	4770      	bx	lr
     c1e:	f092 0f00 	teq	r2, #0
     c22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     c26:	bf02      	ittt	eq
     c28:	0040      	lsleq	r0, r0, #1
     c2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     c2e:	3a01      	subeq	r2, #1
     c30:	d0f9      	beq.n	c26 <__aeabi_fmul+0xce>
     c32:	ea40 000c 	orr.w	r0, r0, ip
     c36:	f093 0f00 	teq	r3, #0
     c3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     c3e:	bf02      	ittt	eq
     c40:	0049      	lsleq	r1, r1, #1
     c42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     c46:	3b01      	subeq	r3, #1
     c48:	d0f9      	beq.n	c3e <__aeabi_fmul+0xe6>
     c4a:	ea41 010c 	orr.w	r1, r1, ip
     c4e:	e78f      	b.n	b70 <__aeabi_fmul+0x18>
     c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     c54:	ea92 0f0c 	teq	r2, ip
     c58:	bf18      	it	ne
     c5a:	ea93 0f0c 	teqne	r3, ip
     c5e:	d00a      	beq.n	c76 <__aeabi_fmul+0x11e>
     c60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     c64:	bf18      	it	ne
     c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     c6a:	d1d8      	bne.n	c1e <__aeabi_fmul+0xc6>
     c6c:	ea80 0001 	eor.w	r0, r0, r1
     c70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     c74:	4770      	bx	lr
     c76:	f090 0f00 	teq	r0, #0
     c7a:	bf17      	itett	ne
     c7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     c80:	4608      	moveq	r0, r1
     c82:	f091 0f00 	teqne	r1, #0
     c86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     c8a:	d014      	beq.n	cb6 <__aeabi_fmul+0x15e>
     c8c:	ea92 0f0c 	teq	r2, ip
     c90:	d101      	bne.n	c96 <__aeabi_fmul+0x13e>
     c92:	0242      	lsls	r2, r0, #9
     c94:	d10f      	bne.n	cb6 <__aeabi_fmul+0x15e>
     c96:	ea93 0f0c 	teq	r3, ip
     c9a:	d103      	bne.n	ca4 <__aeabi_fmul+0x14c>
     c9c:	024b      	lsls	r3, r1, #9
     c9e:	bf18      	it	ne
     ca0:	4608      	movne	r0, r1
     ca2:	d108      	bne.n	cb6 <__aeabi_fmul+0x15e>
     ca4:	ea80 0001 	eor.w	r0, r0, r1
     ca8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cb4:	4770      	bx	lr
     cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     cba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     cbe:	4770      	bx	lr

00000cc0 <__aeabi_fdiv>:
     cc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     cc8:	bf1e      	ittt	ne
     cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     cce:	ea92 0f0c 	teqne	r2, ip
     cd2:	ea93 0f0c 	teqne	r3, ip
     cd6:	d069      	beq.n	dac <__aeabi_fdiv+0xec>
     cd8:	eba2 0203 	sub.w	r2, r2, r3
     cdc:	ea80 0c01 	eor.w	ip, r0, r1
     ce0:	0249      	lsls	r1, r1, #9
     ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     ce6:	d037      	beq.n	d58 <__aeabi_fdiv+0x98>
     ce8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     cf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     cf8:	428b      	cmp	r3, r1
     cfa:	bf38      	it	cc
     cfc:	005b      	lslcc	r3, r3, #1
     cfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     d02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     d06:	428b      	cmp	r3, r1
     d08:	bf24      	itt	cs
     d0a:	1a5b      	subcs	r3, r3, r1
     d0c:	ea40 000c 	orrcs.w	r0, r0, ip
     d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     d14:	bf24      	itt	cs
     d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     d22:	bf24      	itt	cs
     d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     d30:	bf24      	itt	cs
     d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     d3a:	011b      	lsls	r3, r3, #4
     d3c:	bf18      	it	ne
     d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     d42:	d1e0      	bne.n	d06 <__aeabi_fdiv+0x46>
     d44:	2afd      	cmp	r2, #253	; 0xfd
     d46:	f63f af50 	bhi.w	bea <__aeabi_fmul+0x92>
     d4a:	428b      	cmp	r3, r1
     d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d50:	bf08      	it	eq
     d52:	f020 0001 	biceq.w	r0, r0, #1
     d56:	4770      	bx	lr
     d58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d60:	327f      	adds	r2, #127	; 0x7f
     d62:	bfc2      	ittt	gt
     d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d6c:	4770      	bxgt	lr
     d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d72:	f04f 0300 	mov.w	r3, #0
     d76:	3a01      	subs	r2, #1
     d78:	e737      	b.n	bea <__aeabi_fmul+0x92>
     d7a:	f092 0f00 	teq	r2, #0
     d7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     d82:	bf02      	ittt	eq
     d84:	0040      	lsleq	r0, r0, #1
     d86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     d8a:	3a01      	subeq	r2, #1
     d8c:	d0f9      	beq.n	d82 <__aeabi_fdiv+0xc2>
     d8e:	ea40 000c 	orr.w	r0, r0, ip
     d92:	f093 0f00 	teq	r3, #0
     d96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     d9a:	bf02      	ittt	eq
     d9c:	0049      	lsleq	r1, r1, #1
     d9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     da2:	3b01      	subeq	r3, #1
     da4:	d0f9      	beq.n	d9a <__aeabi_fdiv+0xda>
     da6:	ea41 010c 	orr.w	r1, r1, ip
     daa:	e795      	b.n	cd8 <__aeabi_fdiv+0x18>
     dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     db0:	ea92 0f0c 	teq	r2, ip
     db4:	d108      	bne.n	dc8 <__aeabi_fdiv+0x108>
     db6:	0242      	lsls	r2, r0, #9
     db8:	f47f af7d 	bne.w	cb6 <__aeabi_fmul+0x15e>
     dbc:	ea93 0f0c 	teq	r3, ip
     dc0:	f47f af70 	bne.w	ca4 <__aeabi_fmul+0x14c>
     dc4:	4608      	mov	r0, r1
     dc6:	e776      	b.n	cb6 <__aeabi_fmul+0x15e>
     dc8:	ea93 0f0c 	teq	r3, ip
     dcc:	d104      	bne.n	dd8 <__aeabi_fdiv+0x118>
     dce:	024b      	lsls	r3, r1, #9
     dd0:	f43f af4c 	beq.w	c6c <__aeabi_fmul+0x114>
     dd4:	4608      	mov	r0, r1
     dd6:	e76e      	b.n	cb6 <__aeabi_fmul+0x15e>
     dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     ddc:	bf18      	it	ne
     dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     de2:	d1ca      	bne.n	d7a <__aeabi_fdiv+0xba>
     de4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     de8:	f47f af5c 	bne.w	ca4 <__aeabi_fmul+0x14c>
     dec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     df0:	f47f af3c 	bne.w	c6c <__aeabi_fmul+0x114>
     df4:	e75f      	b.n	cb6 <__aeabi_fmul+0x15e>
     df6:	bf00      	nop

00000df8 <__gesf2>:
     df8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     dfc:	e006      	b.n	e0c <__cmpsf2+0x4>
     dfe:	bf00      	nop

00000e00 <__lesf2>:
     e00:	f04f 0c01 	mov.w	ip, #1
     e04:	e002      	b.n	e0c <__cmpsf2+0x4>
     e06:	bf00      	nop

00000e08 <__cmpsf2>:
     e08:	f04f 0c01 	mov.w	ip, #1
     e0c:	f84d cd04 	str.w	ip, [sp, #-4]!
     e10:	ea4f 0240 	mov.w	r2, r0, lsl #1
     e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
     e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     e1c:	bf18      	it	ne
     e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     e22:	d011      	beq.n	e48 <__cmpsf2+0x40>
     e24:	b001      	add	sp, #4
     e26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     e2a:	bf18      	it	ne
     e2c:	ea90 0f01 	teqne	r0, r1
     e30:	bf58      	it	pl
     e32:	ebb2 0003 	subspl.w	r0, r2, r3
     e36:	bf88      	it	hi
     e38:	17c8      	asrhi	r0, r1, #31
     e3a:	bf38      	it	cc
     e3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     e40:	bf18      	it	ne
     e42:	f040 0001 	orrne.w	r0, r0, #1
     e46:	4770      	bx	lr
     e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     e4c:	d102      	bne.n	e54 <__cmpsf2+0x4c>
     e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     e52:	d105      	bne.n	e60 <__cmpsf2+0x58>
     e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     e58:	d1e4      	bne.n	e24 <__cmpsf2+0x1c>
     e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     e5e:	d0e1      	beq.n	e24 <__cmpsf2+0x1c>
     e60:	f85d 0b04 	ldr.w	r0, [sp], #4
     e64:	4770      	bx	lr
     e66:	bf00      	nop

00000e68 <__aeabi_cfrcmple>:
     e68:	4684      	mov	ip, r0
     e6a:	4608      	mov	r0, r1
     e6c:	4661      	mov	r1, ip
     e6e:	e7ff      	b.n	e70 <__aeabi_cfcmpeq>

00000e70 <__aeabi_cfcmpeq>:
     e70:	b50f      	push	{r0, r1, r2, r3, lr}
     e72:	f7ff ffc9 	bl	e08 <__cmpsf2>
     e76:	2800      	cmp	r0, #0
     e78:	bf48      	it	mi
     e7a:	f110 0f00 	cmnmi.w	r0, #0
     e7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000e80 <__aeabi_fcmpeq>:
     e80:	f84d ed08 	str.w	lr, [sp, #-8]!
     e84:	f7ff fff4 	bl	e70 <__aeabi_cfcmpeq>
     e88:	bf0c      	ite	eq
     e8a:	2001      	moveq	r0, #1
     e8c:	2000      	movne	r0, #0
     e8e:	f85d fb08 	ldr.w	pc, [sp], #8
     e92:	bf00      	nop

00000e94 <__aeabi_fcmplt>:
     e94:	f84d ed08 	str.w	lr, [sp, #-8]!
     e98:	f7ff ffea 	bl	e70 <__aeabi_cfcmpeq>
     e9c:	bf34      	ite	cc
     e9e:	2001      	movcc	r0, #1
     ea0:	2000      	movcs	r0, #0
     ea2:	f85d fb08 	ldr.w	pc, [sp], #8
     ea6:	bf00      	nop

00000ea8 <__aeabi_fcmple>:
     ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
     eac:	f7ff ffe0 	bl	e70 <__aeabi_cfcmpeq>
     eb0:	bf94      	ite	ls
     eb2:	2001      	movls	r0, #1
     eb4:	2000      	movhi	r0, #0
     eb6:	f85d fb08 	ldr.w	pc, [sp], #8
     eba:	bf00      	nop

00000ebc <__aeabi_fcmpge>:
     ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
     ec0:	f7ff ffd2 	bl	e68 <__aeabi_cfrcmple>
     ec4:	bf94      	ite	ls
     ec6:	2001      	movls	r0, #1
     ec8:	2000      	movhi	r0, #0
     eca:	f85d fb08 	ldr.w	pc, [sp], #8
     ece:	bf00      	nop

00000ed0 <__aeabi_fcmpgt>:
     ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ed4:	f7ff ffc8 	bl	e68 <__aeabi_cfrcmple>
     ed8:	bf34      	ite	cc
     eda:	2001      	movcc	r0, #1
     edc:	2000      	movcs	r0, #0
     ede:	f85d fb08 	ldr.w	pc, [sp], #8
     ee2:	bf00      	nop

00000ee4 <__aeabi_f2iz>:
     ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
     ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     eec:	d30f      	bcc.n	f0e <__aeabi_f2iz+0x2a>
     eee:	f04f 039e 	mov.w	r3, #158	; 0x9e
     ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     ef6:	d90d      	bls.n	f14 <__aeabi_f2iz+0x30>
     ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
     efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     f00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     f04:	fa23 f002 	lsr.w	r0, r3, r2
     f08:	bf18      	it	ne
     f0a:	4240      	negne	r0, r0
     f0c:	4770      	bx	lr
     f0e:	f04f 0000 	mov.w	r0, #0
     f12:	4770      	bx	lr
     f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
     f18:	d101      	bne.n	f1e <__aeabi_f2iz+0x3a>
     f1a:	0242      	lsls	r2, r0, #9
     f1c:	d105      	bne.n	f2a <__aeabi_f2iz+0x46>
     f1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     f22:	bf08      	it	eq
     f24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     f28:	4770      	bx	lr
     f2a:	f04f 0000 	mov.w	r0, #0
     f2e:	4770      	bx	lr

00000f30 <__aeabi_f2uiz>:
     f30:	0042      	lsls	r2, r0, #1
     f32:	d20e      	bcs.n	f52 <__aeabi_f2uiz+0x22>
     f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     f38:	d30b      	bcc.n	f52 <__aeabi_f2uiz+0x22>
     f3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
     f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     f42:	d409      	bmi.n	f58 <__aeabi_f2uiz+0x28>
     f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
     f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     f4c:	fa23 f002 	lsr.w	r0, r3, r2
     f50:	4770      	bx	lr
     f52:	f04f 0000 	mov.w	r0, #0
     f56:	4770      	bx	lr
     f58:	f112 0f61 	cmn.w	r2, #97	; 0x61
     f5c:	d101      	bne.n	f62 <__aeabi_f2uiz+0x32>
     f5e:	0242      	lsls	r2, r0, #9
     f60:	d102      	bne.n	f68 <__aeabi_f2uiz+0x38>
     f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f66:	4770      	bx	lr
     f68:	f04f 0000 	mov.w	r0, #0
     f6c:	4770      	bx	lr
     f6e:	bf00      	nop

00000f70 <__aeabi_uldivmod>:
     f70:	b953      	cbnz	r3, f88 <__aeabi_uldivmod+0x18>
     f72:	b94a      	cbnz	r2, f88 <__aeabi_uldivmod+0x18>
     f74:	2900      	cmp	r1, #0
     f76:	bf08      	it	eq
     f78:	2800      	cmpeq	r0, #0
     f7a:	bf1c      	itt	ne
     f7c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     f80:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     f84:	f000 b80c 	b.w	fa0 <__aeabi_idiv0>
     f88:	f1ad 0c08 	sub.w	ip, sp, #8
     f8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     f90:	f00b fef2 	bl	cd78 <__udivmoddi4>
     f94:	f8dd e004 	ldr.w	lr, [sp, #4]
     f98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     f9c:	b004      	add	sp, #16
     f9e:	4770      	bx	lr

00000fa0 <__aeabi_idiv0>:
     fa0:	4770      	bx	lr
     fa2:	bf00      	nop

00000fa4 <__gedf2>:
     fa4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     fa8:	e006      	b.n	fb8 <__cmpdf2+0x4>
     faa:	bf00      	nop

00000fac <__ledf2>:
     fac:	f04f 0c01 	mov.w	ip, #1
     fb0:	e002      	b.n	fb8 <__cmpdf2+0x4>
     fb2:	bf00      	nop

00000fb4 <__cmpdf2>:
     fb4:	f04f 0c01 	mov.w	ip, #1
     fb8:	f84d cd04 	str.w	ip, [sp, #-4]!
     fbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fc8:	bf18      	it	ne
     fca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     fce:	d01b      	beq.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     fd0:	b001      	add	sp, #4
     fd2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fd6:	bf0c      	ite	eq
     fd8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fdc:	ea91 0f03 	teqne	r1, r3
     fe0:	bf02      	ittt	eq
     fe2:	ea90 0f02 	teqeq	r0, r2
     fe6:	2000      	moveq	r0, #0
     fe8:	4770      	bxeq	lr
     fea:	f110 0f00 	cmn.w	r0, #0
     fee:	ea91 0f03 	teq	r1, r3
     ff2:	bf58      	it	pl
     ff4:	4299      	cmppl	r1, r3
     ff6:	bf08      	it	eq
     ff8:	4290      	cmpeq	r0, r2
     ffa:	bf2c      	ite	cs
     ffc:	17d8      	asrcs	r0, r3, #31
     ffe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    1002:	f040 0001 	orr.w	r0, r0, #1
    1006:	4770      	bx	lr
    1008:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    100c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1010:	d102      	bne.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    1012:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1016:	d107      	bne.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    1018:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    101c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1020:	d1d6      	bne.n	fd0 <__cmpdf2+0x1c>
    1022:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1026:	d0d3      	beq.n	fd0 <__cmpdf2+0x1c>
    1028:	f85d 0b04 	ldr.w	r0, [sp], #4
    102c:	4770      	bx	lr
    102e:	bf00      	nop

00001030 <__aeabi_cdrcmple>:
    1030:	4684      	mov	ip, r0
    1032:	4610      	mov	r0, r2
    1034:	4662      	mov	r2, ip
    1036:	468c      	mov	ip, r1
    1038:	4619      	mov	r1, r3
    103a:	4663      	mov	r3, ip
    103c:	e000      	b.n	1040 <__aeabi_cdcmpeq>
    103e:	bf00      	nop

00001040 <__aeabi_cdcmpeq>:
    1040:	b501      	push	{r0, lr}
    1042:	f7ff ffb7 	bl	fb4 <__cmpdf2>
    1046:	2800      	cmp	r0, #0
    1048:	bf48      	it	mi
    104a:	f110 0f00 	cmnmi.w	r0, #0
    104e:	bd01      	pop	{r0, pc}

00001050 <__aeabi_dcmpeq>:
    1050:	f84d ed08 	str.w	lr, [sp, #-8]!
    1054:	f7ff fff4 	bl	1040 <__aeabi_cdcmpeq>
    1058:	bf0c      	ite	eq
    105a:	2001      	moveq	r0, #1
    105c:	2000      	movne	r0, #0
    105e:	f85d fb08 	ldr.w	pc, [sp], #8
    1062:	bf00      	nop

00001064 <__aeabi_dcmplt>:
    1064:	f84d ed08 	str.w	lr, [sp, #-8]!
    1068:	f7ff ffea 	bl	1040 <__aeabi_cdcmpeq>
    106c:	bf34      	ite	cc
    106e:	2001      	movcc	r0, #1
    1070:	2000      	movcs	r0, #0
    1072:	f85d fb08 	ldr.w	pc, [sp], #8
    1076:	bf00      	nop

00001078 <__aeabi_dcmple>:
    1078:	f84d ed08 	str.w	lr, [sp, #-8]!
    107c:	f7ff ffe0 	bl	1040 <__aeabi_cdcmpeq>
    1080:	bf94      	ite	ls
    1082:	2001      	movls	r0, #1
    1084:	2000      	movhi	r0, #0
    1086:	f85d fb08 	ldr.w	pc, [sp], #8
    108a:	bf00      	nop

0000108c <__aeabi_dcmpge>:
    108c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1090:	f7ff ffce 	bl	1030 <__aeabi_cdrcmple>
    1094:	bf94      	ite	ls
    1096:	2001      	movls	r0, #1
    1098:	2000      	movhi	r0, #0
    109a:	f85d fb08 	ldr.w	pc, [sp], #8
    109e:	bf00      	nop

000010a0 <__aeabi_dcmpgt>:
    10a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    10a4:	f7ff ffc4 	bl	1030 <__aeabi_cdrcmple>
    10a8:	bf34      	ite	cc
    10aa:	2001      	movcc	r0, #1
    10ac:	2000      	movcs	r0, #0
    10ae:	f85d fb08 	ldr.w	pc, [sp], #8
    10b2:	bf00      	nop

000010b4 <ocrypto_bigint_add256>:
    10b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    10b8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    10bc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10c0:	185b      	adds	r3, r3, r1
    10c2:	eb54 040c 	adcs.w	r4, r4, ip
    10c6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10ca:	414d      	adcs	r5, r1
    10cc:	eb56 060c 	adcs.w	r6, r6, ip
    10d0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10d4:	414f      	adcs	r7, r1
    10d6:	eb58 080c 	adcs.w	r8, r8, ip
    10da:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    10de:	eb59 0901 	adcs.w	r9, r9, r1
    10e2:	eb5a 0a0c 	adcs.w	sl, sl, ip
    10e6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    10ea:	4180      	sbcs	r0, r0
    10ec:	3001      	adds	r0, #1
    10ee:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    10f2:	4770      	bx	lr

000010f4 <ocrypto_bigint_sub256>:
    10f4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    10f8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    10fc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1100:	1a5b      	subs	r3, r3, r1
    1102:	eb74 040c 	sbcs.w	r4, r4, ip
    1106:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    110a:	418d      	sbcs	r5, r1
    110c:	eb76 060c 	sbcs.w	r6, r6, ip
    1110:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1114:	418f      	sbcs	r7, r1
    1116:	eb78 080c 	sbcs.w	r8, r8, ip
    111a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    111e:	eb79 0901 	sbcs.w	r9, r9, r1
    1122:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    1126:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    112a:	4180      	sbcs	r0, r0
    112c:	4240      	negs	r0, r0
    112e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1132:	4770      	bx	lr

00001134 <ocrypto_bigint_cadd256>:
    1134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1138:	4252      	negs	r2, r2
    113a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    113e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    1142:	4017      	ands	r7, r2
    1144:	19db      	adds	r3, r3, r7
    1146:	ea18 0802 	ands.w	r8, r8, r2
    114a:	eb54 0408 	adcs.w	r4, r4, r8
    114e:	ea19 0902 	ands.w	r9, r9, r2
    1152:	eb55 0509 	adcs.w	r5, r5, r9
    1156:	ea1a 0a02 	ands.w	sl, sl, r2
    115a:	eb56 060a 	adcs.w	r6, r6, sl
    115e:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1160:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    1164:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    1168:	4017      	ands	r7, r2
    116a:	417b      	adcs	r3, r7
    116c:	ea18 0802 	ands.w	r8, r8, r2
    1170:	eb54 0408 	adcs.w	r4, r4, r8
    1174:	ea19 0902 	ands.w	r9, r9, r2
    1178:	eb55 0509 	adcs.w	r5, r5, r9
    117c:	ea1a 0a02 	ands.w	sl, sl, r2
    1180:	eb56 060a 	adcs.w	r6, r6, sl
    1184:	c078      	stmia	r0!, {r3, r4, r5, r6}
    1186:	4180      	sbcs	r0, r0
    1188:	3001      	adds	r0, #1
    118a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    118e:	4770      	bx	lr

00001190 <ocrypto_bigint_csub256>:
    1190:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1194:	4252      	negs	r2, r2
    1196:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    119a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    119e:	4017      	ands	r7, r2
    11a0:	1bdb      	subs	r3, r3, r7
    11a2:	ea18 0802 	ands.w	r8, r8, r2
    11a6:	eb74 0408 	sbcs.w	r4, r4, r8
    11aa:	ea19 0902 	ands.w	r9, r9, r2
    11ae:	eb75 0509 	sbcs.w	r5, r5, r9
    11b2:	ea1a 0a02 	ands.w	sl, sl, r2
    11b6:	eb76 060a 	sbcs.w	r6, r6, sl
    11ba:	c078      	stmia	r0!, {r3, r4, r5, r6}
    11bc:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    11c0:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    11c4:	4017      	ands	r7, r2
    11c6:	41bb      	sbcs	r3, r7
    11c8:	ea18 0802 	ands.w	r8, r8, r2
    11cc:	eb74 0408 	sbcs.w	r4, r4, r8
    11d0:	ea19 0902 	ands.w	r9, r9, r2
    11d4:	eb75 0509 	sbcs.w	r5, r5, r9
    11d8:	ea1a 0a02 	ands.w	sl, sl, r2
    11dc:	eb76 060a 	sbcs.w	r6, r6, sl
    11e0:	c078      	stmia	r0!, {r3, r4, r5, r6}
    11e2:	4180      	sbcs	r0, r0
    11e4:	4240      	negs	r0, r0
    11e6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    11ea:	4770      	bx	lr

000011ec <ocrypto_bigint_cswap256>:
    11ec:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    11f0:	4252      	negs	r2, r2
    11f2:	f04f 0804 	mov.w	r8, #4

000011f6 <cswap256_loop>:
    11f6:	e890 0030 	ldmia.w	r0, {r4, r5}
    11fa:	e891 00c0 	ldmia.w	r1, {r6, r7}
    11fe:	1ba3      	subs	r3, r4, r6
    1200:	4013      	ands	r3, r2
    1202:	1ae4      	subs	r4, r4, r3
    1204:	18f6      	adds	r6, r6, r3
    1206:	1beb      	subs	r3, r5, r7
    1208:	4013      	ands	r3, r2
    120a:	1aed      	subs	r5, r5, r3
    120c:	18ff      	adds	r7, r7, r3
    120e:	c030      	stmia	r0!, {r4, r5}
    1210:	c1c0      	stmia	r1!, {r6, r7}
    1212:	f1b8 0801 	subs.w	r8, r8, #1
    1216:	d1ee      	bne.n	11f6 <cswap256_loop>
    1218:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    121c:	4770      	bx	lr
    121e:	bf00      	nop

00001220 <ocrypto_mul256_noframe>:
    1220:	b500      	push	{lr}
    1222:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
    1226:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
    122a:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
    122e:	b402      	push	{r1}
    1230:	fba7 5102 	umull	r5, r1, r7, r2
    1234:	950a      	str	r5, [sp, #40]	; 0x28
    1236:	fba8 0b02 	umull	r0, fp, r8, r2
    123a:	fbe7 1063 	umaal	r1, r0, r7, r3
    123e:	fbe9 b062 	umaal	fp, r0, r9, r2
    1242:	910b      	str	r1, [sp, #44]	; 0x2c
    1244:	fba8 5103 	umull	r5, r1, r8, r3
    1248:	fbea 0162 	umaal	r0, r1, sl, r2
    124c:	fbe7 b564 	umaal	fp, r5, r7, r4
    1250:	fbe7 0566 	umaal	r0, r5, r7, r6
    1254:	fbe8 1566 	umaal	r1, r5, r8, r6
    1258:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    125c:	fba9 b603 	umull	fp, r6, r9, r3
    1260:	fbea 1663 	umaal	r1, r6, sl, r3
    1264:	fbec 5663 	umaal	r5, r6, ip, r3
    1268:	fbe8 0b64 	umaal	r0, fp, r8, r4
    126c:	fbe9 1b64 	umaal	r1, fp, r9, r4
    1270:	fbea 5b64 	umaal	r5, fp, sl, r4
    1274:	fbec 6b64 	umaal	r6, fp, ip, r4
    1278:	900d      	str	r0, [sp, #52]	; 0x34
    127a:	fbac 3002 	umull	r3, r0, ip, r2
    127e:	9c05      	ldr	r4, [sp, #20]
    1280:	fbee 5062 	umaal	r5, r0, lr, r2
    1284:	fbe9 6064 	umaal	r6, r0, r9, r4
    1288:	fbea b064 	umaal	fp, r0, sl, r4
    128c:	fbe7 3164 	umaal	r3, r1, r7, r4
    1290:	fbe8 5164 	umaal	r5, r1, r8, r4
    1294:	9c06      	ldr	r4, [sp, #24]
    1296:	fbe8 6164 	umaal	r6, r1, r8, r4
    129a:	fbe9 b164 	umaal	fp, r1, r9, r4
    129e:	fbea 0164 	umaal	r0, r1, sl, r4
    12a2:	930e      	str	r3, [sp, #56]	; 0x38
    12a4:	fba7 3204 	umull	r3, r2, r7, r4
    12a8:	9c07      	ldr	r4, [sp, #28]
    12aa:	fbe7 6264 	umaal	r6, r2, r7, r4
    12ae:	fbe8 b264 	umaal	fp, r2, r8, r4
    12b2:	fbe9 0264 	umaal	r0, r2, r9, r4
    12b6:	fbea 1264 	umaal	r1, r2, sl, r4
    12ba:	9c04      	ldr	r4, [sp, #16]
    12bc:	fbe9 5364 	umaal	r5, r3, r9, r4
    12c0:	fbea 6364 	umaal	r6, r3, sl, r4
    12c4:	9c08      	ldr	r4, [sp, #32]
    12c6:	fbe7 b364 	umaal	fp, r3, r7, r4
    12ca:	fbe8 0364 	umaal	r0, r3, r8, r4
    12ce:	fbe9 1364 	umaal	r1, r3, r9, r4
    12d2:	fbea 2364 	umaal	r2, r3, sl, r4
    12d6:	950f      	str	r5, [sp, #60]	; 0x3c
    12d8:	f85d 9b04 	ldr.w	r9, [sp], #4
    12dc:	e899 0600 	ldmia.w	r9, {r9, sl}
    12e0:	f8dd 8000 	ldr.w	r8, [sp]
    12e4:	fba9 5408 	umull	r5, r4, r9, r8
    12e8:	fbea b468 	umaal	fp, r4, sl, r8
    12ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
    12f0:	fbec 0468 	umaal	r0, r4, ip, r8
    12f4:	fbee 1468 	umaal	r1, r4, lr, r8
    12f8:	fbe9 2468 	umaal	r2, r4, r9, r8
    12fc:	fbea 3468 	umaal	r3, r4, sl, r8
    1300:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1304:	fbee 6568 	umaal	r6, r5, lr, r8
    1308:	fbe9 b568 	umaal	fp, r5, r9, r8
    130c:	fbea 0568 	umaal	r0, r5, sl, r8
    1310:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1314:	fbec 1568 	umaal	r1, r5, ip, r8
    1318:	fbee 2568 	umaal	r2, r5, lr, r8
    131c:	fbe9 3568 	umaal	r3, r5, r9, r8
    1320:	fbea 4568 	umaal	r4, r5, sl, r8
    1324:	960f      	str	r6, [sp, #60]	; 0x3c
    1326:	f8dd 8008 	ldr.w	r8, [sp, #8]
    132a:	fbae 7608 	umull	r7, r6, lr, r8
    132e:	fbe9 0668 	umaal	r0, r6, r9, r8
    1332:	fbea 1668 	umaal	r1, r6, sl, r8
    1336:	f8dd 8018 	ldr.w	r8, [sp, #24]
    133a:	fbec 2668 	umaal	r2, r6, ip, r8
    133e:	fbee 3668 	umaal	r3, r6, lr, r8
    1342:	fbe9 4668 	umaal	r4, r6, r9, r8
    1346:	fbea 5668 	umaal	r5, r6, sl, r8
    134a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    134e:	fbec b768 	umaal	fp, r7, ip, r8
    1352:	fbee 0768 	umaal	r0, r7, lr, r8
    1356:	fbe9 1768 	umaal	r1, r7, r9, r8
    135a:	fbea 2768 	umaal	r2, r7, sl, r8
    135e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1362:	fbec 3768 	umaal	r3, r7, ip, r8
    1366:	fbee 4768 	umaal	r4, r7, lr, r8
    136a:	fbe9 5768 	umaal	r5, r7, r9, r8
    136e:	fbea 6768 	umaal	r6, r7, sl, r8
    1372:	b008      	add	sp, #32
    1374:	bd00      	pop	{pc}
    1376:	bf00      	nop

00001378 <ocrypto_bigint_mul256>:
    1378:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    137c:	b087      	sub	sp, #28
    137e:	f7ff ff4f 	bl	1220 <ocrypto_mul256_noframe>
    1382:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1386:	f108 0820 	add.w	r8, r8, #32
    138a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    138e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1390:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    1394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001398 <ocrypto_sqr256_noframe>:
    1398:	b500      	push	{lr}
    139a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
    139e:	fba3 5203 	umull	r5, r2, r3, r3
    13a2:	9501      	str	r5, [sp, #4]
    13a4:	fba3 0104 	umull	r0, r1, r3, r4
    13a8:	fbe3 2064 	umaal	r2, r0, r3, r4
    13ac:	fbe3 1067 	umaal	r1, r0, r3, r7
    13b0:	9202      	str	r2, [sp, #8]
    13b2:	fba3 5207 	umull	r5, r2, r3, r7
    13b6:	fbe3 0268 	umaal	r0, r2, r3, r8
    13ba:	fbe4 1564 	umaal	r1, r5, r4, r4
    13be:	fbe3 0568 	umaal	r0, r5, r3, r8
    13c2:	fbe3 2569 	umaal	r2, r5, r3, r9
    13c6:	9103      	str	r1, [sp, #12]
    13c8:	fba4 b607 	umull	fp, r6, r4, r7
    13cc:	fbe3 2669 	umaal	r2, r6, r3, r9
    13d0:	fbe3 566a 	umaal	r5, r6, r3, sl
    13d4:	fbe4 0b67 	umaal	r0, fp, r4, r7
    13d8:	fbe4 2b68 	umaal	r2, fp, r4, r8
    13dc:	fbe3 5b6a 	umaal	r5, fp, r3, sl
    13e0:	fbe3 6b6c 	umaal	r6, fp, r3, ip
    13e4:	9004      	str	r0, [sp, #16]
    13e6:	fba4 1008 	umull	r1, r0, r4, r8
    13ea:	fbe4 5069 	umaal	r5, r0, r4, r9
    13ee:	fbe3 606c 	umaal	r6, r0, r3, ip
    13f2:	fbe3 b06e 	umaal	fp, r0, r3, lr
    13f6:	fbe7 2167 	umaal	r2, r1, r7, r7
    13fa:	fbe4 5169 	umaal	r5, r1, r4, r9
    13fe:	fbe4 616a 	umaal	r6, r1, r4, sl
    1402:	fbe3 b16e 	umaal	fp, r1, r3, lr
    1406:	fbe4 016e 	umaal	r0, r1, r4, lr
    140a:	9205      	str	r2, [sp, #20]
    140c:	fba7 3208 	umull	r3, r2, r7, r8
    1410:	fbe4 626a 	umaal	r6, r2, r4, sl
    1414:	fbe4 b26c 	umaal	fp, r2, r4, ip
    1418:	fbe4 026e 	umaal	r0, r2, r4, lr
    141c:	fbe7 126e 	umaal	r1, r2, r7, lr
    1420:	fbe7 5368 	umaal	r5, r3, r7, r8
    1424:	fbe7 6369 	umaal	r6, r3, r7, r9
    1428:	fbe4 b36c 	umaal	fp, r3, r4, ip
    142c:	fbe7 036c 	umaal	r0, r3, r7, ip
    1430:	fbe7 136e 	umaal	r1, r3, r7, lr
    1434:	fbe8 236e 	umaal	r2, r3, r8, lr
    1438:	9506      	str	r5, [sp, #24]
    143a:	fba7 5409 	umull	r5, r4, r7, r9
    143e:	fbe7 b46a 	umaal	fp, r4, r7, sl
    1442:	fbe7 046c 	umaal	r0, r4, r7, ip
    1446:	fbe8 146c 	umaal	r1, r4, r8, ip
    144a:	fbe8 246e 	umaal	r2, r4, r8, lr
    144e:	fbe9 346e 	umaal	r3, r4, r9, lr
    1452:	fbe8 6568 	umaal	r6, r5, r8, r8
    1456:	fbe7 b56a 	umaal	fp, r5, r7, sl
    145a:	fbe8 056a 	umaal	r0, r5, r8, sl
    145e:	fbe8 156c 	umaal	r1, r5, r8, ip
    1462:	fbe9 256c 	umaal	r2, r5, r9, ip
    1466:	fbe9 356e 	umaal	r3, r5, r9, lr
    146a:	fbea 456e 	umaal	r4, r5, sl, lr
    146e:	9607      	str	r6, [sp, #28]
    1470:	fba8 7609 	umull	r7, r6, r8, r9
    1474:	fbe8 066a 	umaal	r0, r6, r8, sl
    1478:	fbe9 166a 	umaal	r1, r6, r9, sl
    147c:	fbe9 266c 	umaal	r2, r6, r9, ip
    1480:	fbea 366c 	umaal	r3, r6, sl, ip
    1484:	fbea 466e 	umaal	r4, r6, sl, lr
    1488:	fbec 566e 	umaal	r5, r6, ip, lr
    148c:	fbe8 b769 	umaal	fp, r7, r8, r9
    1490:	fbe9 0769 	umaal	r0, r7, r9, r9
    1494:	fbe9 176a 	umaal	r1, r7, r9, sl
    1498:	fbea 276a 	umaal	r2, r7, sl, sl
    149c:	fbea 376c 	umaal	r3, r7, sl, ip
    14a0:	fbec 476c 	umaal	r4, r7, ip, ip
    14a4:	fbec 576e 	umaal	r5, r7, ip, lr
    14a8:	fbee 676e 	umaal	r6, r7, lr, lr
    14ac:	bd00      	pop	{pc}
    14ae:	bf00      	nop

000014b0 <ocrypto_bigint_sqr256>:
    14b0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14b4:	b087      	sub	sp, #28
    14b6:	f7ff ff6f 	bl	1398 <ocrypto_sqr256_noframe>
    14ba:	f8dd 801c 	ldr.w	r8, [sp, #28]
    14be:	f108 0820 	add.w	r8, r8, #32
    14c2:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    14c6:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    14c8:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    14cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000014d0 <ocrypto_constant_time_equal>:
    14d0:	b430      	push	{r4, r5}
    14d2:	f04f 0300 	mov.w	r3, #0

000014d6 <constant_time_equal_loop>:
    14d6:	f810 4b01 	ldrb.w	r4, [r0], #1
    14da:	f811 5b01 	ldrb.w	r5, [r1], #1
    14de:	3a01      	subs	r2, #1
    14e0:	ea84 0405 	eor.w	r4, r4, r5
    14e4:	ea43 0304 	orr.w	r3, r3, r4
    14e8:	d1f5      	bne.n	14d6 <constant_time_equal_loop>
    14ea:	f1a3 0301 	sub.w	r3, r3, #1
    14ee:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    14f2:	bc30      	pop	{r4, r5}
    14f4:	4770      	bx	lr
    14f6:	bf00      	nop

000014f8 <ocrypto_constant_time_is_zero>:
    14f8:	f04f 0300 	mov.w	r3, #0

000014fc <constant_time_is_zero_loop>:
    14fc:	f810 2b01 	ldrb.w	r2, [r0], #1
    1500:	3901      	subs	r1, #1
    1502:	ea43 0302 	orr.w	r3, r3, r2
    1506:	d1f9      	bne.n	14fc <constant_time_is_zero_loop>
    1508:	f1a3 0301 	sub.w	r3, r3, #1
    150c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    1510:	4770      	bx	lr
    1512:	bf00      	nop

00001514 <ocrypto_constant_time_xor>:
    1514:	b430      	push	{r4, r5}

00001516 <constant_time_xor_loop>:
    1516:	f811 4b01 	ldrb.w	r4, [r1], #1
    151a:	f812 5b01 	ldrb.w	r5, [r2], #1
    151e:	406c      	eors	r4, r5
    1520:	f800 4b01 	strb.w	r4, [r0], #1
    1524:	3b01      	subs	r3, #1
    1526:	d1f6      	bne.n	1516 <constant_time_xor_loop>
    1528:	bc30      	pop	{r4, r5}
    152a:	4770      	bx	lr

0000152c <ocrypto_mod_p256_add>:
    152c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1530:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1534:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1538:	185b      	adds	r3, r3, r1
    153a:	eb54 040c 	adcs.w	r4, r4, ip
    153e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1542:	414d      	adcs	r5, r1
    1544:	eb56 060c 	adcs.w	r6, r6, ip
    1548:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    154c:	414f      	adcs	r7, r1
    154e:	eb58 080c 	adcs.w	r8, r8, ip
    1552:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1556:	eb59 0901 	adcs.w	r9, r9, r1
    155a:	eb5a 0a0c 	adcs.w	sl, sl, ip
    155e:	4189      	sbcs	r1, r1
    1560:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
    1564:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
    1568:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
    156c:	f176 0600 	sbcs.w	r6, r6, #0
    1570:	f177 0700 	sbcs.w	r7, r7, #0
    1574:	f178 0800 	sbcs.w	r8, r8, #0
    1578:	f179 0901 	sbcs.w	r9, r9, #1
    157c:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
    1580:	f151 0100 	adcs.w	r1, r1, #0
    1584:	185b      	adds	r3, r3, r1
    1586:	414c      	adcs	r4, r1
    1588:	414d      	adcs	r5, r1
    158a:	f156 0600 	adcs.w	r6, r6, #0
    158e:	f157 0700 	adcs.w	r7, r7, #0
    1592:	f158 0800 	adcs.w	r8, r8, #0
    1596:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    159a:	eb5a 0a01 	adcs.w	sl, sl, r1
    159e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    15a2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    15a6:	4770      	bx	lr

000015a8 <ocrypto_mod_p256_sub>:
    15a8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    15ac:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    15b0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15b4:	1a5b      	subs	r3, r3, r1
    15b6:	eb74 040c 	sbcs.w	r4, r4, ip
    15ba:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15be:	418d      	sbcs	r5, r1
    15c0:	eb76 060c 	sbcs.w	r6, r6, ip
    15c4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15c8:	418f      	sbcs	r7, r1
    15ca:	eb78 080c 	sbcs.w	r8, r8, ip
    15ce:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    15d2:	eb79 0901 	sbcs.w	r9, r9, r1
    15d6:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    15da:	4189      	sbcs	r1, r1
    15dc:	185b      	adds	r3, r3, r1
    15de:	414c      	adcs	r4, r1
    15e0:	414d      	adcs	r5, r1
    15e2:	f156 0600 	adcs.w	r6, r6, #0
    15e6:	f157 0700 	adcs.w	r7, r7, #0
    15ea:	f158 0800 	adcs.w	r8, r8, #0
    15ee:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    15f2:	eb5a 0a01 	adcs.w	sl, sl, r1
    15f6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    15fa:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    15fe:	4770      	bx	lr

00001600 <mul_reduce>:
    1600:	eb18 0804 	adds.w	r8, r8, r4
    1604:	eb59 0905 	adcs.w	r9, r9, r5
    1608:	eb5a 0a06 	adcs.w	sl, sl, r6
    160c:	eb5b 0b07 	adcs.w	fp, fp, r7
    1610:	f05f 0c00 	movs.w	ip, #0
    1614:	f14c 0c00 	adc.w	ip, ip, #0
    1618:	eb18 0805 	adds.w	r8, r8, r5
    161c:	eb59 0906 	adcs.w	r9, r9, r6
    1620:	eb5a 0a07 	adcs.w	sl, sl, r7
    1624:	eb5b 0b07 	adcs.w	fp, fp, r7
    1628:	eb50 000c 	adcs.w	r0, r0, ip
    162c:	f05f 0c00 	movs.w	ip, #0
    1630:	eb51 010c 	adcs.w	r1, r1, ip
    1634:	eb52 020c 	adcs.w	r2, r2, ip
    1638:	4163      	adcs	r3, r4
    163a:	f14c 0c00 	adc.w	ip, ip, #0
    163e:	ebb8 0807 	subs.w	r8, r8, r7
    1642:	f179 0900 	sbcs.w	r9, r9, #0
    1646:	f17a 0a00 	sbcs.w	sl, sl, #0
    164a:	eb7b 0b04 	sbcs.w	fp, fp, r4
    164e:	41a8      	sbcs	r0, r5
    1650:	41b1      	sbcs	r1, r6
    1652:	41a2      	sbcs	r2, r4
    1654:	41b3      	sbcs	r3, r6
    1656:	f16c 0c00 	sbc.w	ip, ip, #0
    165a:	ebbb 0b05 	subs.w	fp, fp, r5
    165e:	41b0      	sbcs	r0, r6
    1660:	41b9      	sbcs	r1, r7
    1662:	41aa      	sbcs	r2, r5
    1664:	41bb      	sbcs	r3, r7
    1666:	f16c 0c00 	sbc.w	ip, ip, #0
    166a:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    166e:	ebb8 0804 	subs.w	r8, r8, r4
    1672:	eb79 0904 	sbcs.w	r9, r9, r4
    1676:	eb7a 0a04 	sbcs.w	sl, sl, r4
    167a:	f17b 0b00 	sbcs.w	fp, fp, #0
    167e:	f170 0000 	sbcs.w	r0, r0, #0
    1682:	f171 0100 	sbcs.w	r1, r1, #0
    1686:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    168a:	41a3      	sbcs	r3, r4
    168c:	f16c 0c00 	sbc.w	ip, ip, #0
    1690:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    1694:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    1698:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    169c:	f15b 0b00 	adcs.w	fp, fp, #0
    16a0:	f150 0400 	adcs.w	r4, r0, #0
    16a4:	f151 0500 	adcs.w	r5, r1, #0
    16a8:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    16ac:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    16b0:	f14c 0c00 	adc.w	ip, ip, #0
    16b4:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    16b8:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    16bc:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    16c0:	f15b 0300 	adcs.w	r3, fp, #0
    16c4:	f154 0400 	adcs.w	r4, r4, #0
    16c8:	f155 0500 	adcs.w	r5, r5, #0
    16cc:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    16d0:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    16d4:	4770      	bx	lr
    16d6:	bf00      	nop

000016d8 <ocrypto_mod_p256_mul>:
    16d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16dc:	b087      	sub	sp, #28
    16de:	f7ff fd9f 	bl	1220 <ocrypto_mul256_noframe>
    16e2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    16e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
    16ea:	f8dd a018 	ldr.w	sl, [sp, #24]
    16ee:	f7ff ff87 	bl	1600 <mul_reduce>
    16f2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    16f6:	f7ff ff83 	bl	1600 <mul_reduce>
    16fa:	b003      	add	sp, #12
    16fc:	f85d 8b04 	ldr.w	r8, [sp], #4
    1700:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001708 <ocrypto_mod_p256_sqr>:
    1708:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    170c:	b087      	sub	sp, #28
    170e:	f7ff fe43 	bl	1398 <ocrypto_sqr256_noframe>
    1712:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1716:	f8dd 9014 	ldr.w	r9, [sp, #20]
    171a:	f8dd a018 	ldr.w	sl, [sp, #24]
    171e:	f7ff ff6f 	bl	1600 <mul_reduce>
    1722:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    1726:	f7ff ff6b 	bl	1600 <mul_reduce>
    172a:	b003      	add	sp, #12
    172c:	f85d 8b04 	ldr.w	r8, [sp], #4
    1730:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001738 <__aeabi_dcmpun>:
    1738:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    173c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1740:	d102      	bne.n	1748 <__aeabi_dcmpun+0x10>
    1742:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1746:	d10a      	bne.n	175e <__aeabi_dcmpun+0x26>
    1748:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    174c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1750:	d102      	bne.n	1758 <__aeabi_dcmpun+0x20>
    1752:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1756:	d102      	bne.n	175e <__aeabi_dcmpun+0x26>
    1758:	f04f 0000 	mov.w	r0, #0
    175c:	4770      	bx	lr
    175e:	f04f 0001 	mov.w	r0, #1
    1762:	4770      	bx	lr

00001764 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    1764:	4801      	ldr	r0, [pc, #4]	; (176c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    1766:	7800      	ldrb	r0, [r0, #0]
    1768:	4770      	bx	lr
    176a:	0000      	.short	0x0000
    176c:	20000028 	.word	0x20000028

00001770 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    1770:	b570      	push	{r4, r5, r6, lr}
    1772:	f00b ffef 	bl	d754 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    1776:	4c13      	ldr	r4, [pc, #76]	; (17c4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>)
    1778:	f06f 0527 	mvn.w	r5, #39	; 0x27
    177c:	b928      	cbnz	r0, 178a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
    177e:	f00c f81f 	bl	d7c0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    1782:	b910      	cbnz	r0, 178a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x1a>
    1784:	f00c f826 	bl	d7d4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    1788:	b120      	cbz	r0, 1794 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    178a:	480f      	ldr	r0, [pc, #60]	; (17c8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
    178c:	6060      	str	r0, [r4, #4]
    178e:	7065      	strb	r5, [r4, #1]
    1790:	2008      	movs	r0, #8
    1792:	e010      	b.n	17b6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    1794:	f00b ffb3 	bl	d6fe <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    1798:	b940      	cbnz	r0, 17ac <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    179a:	f00b ffba 	bl	d712 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    179e:	b928      	cbnz	r0, 17ac <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    17a0:	f00b ffce 	bl	d740 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    17a4:	b910      	cbnz	r0, 17ac <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x3c>
    17a6:	f00b ffdf 	bl	d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    17aa:	b130      	cbz	r0, 17ba <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x4a>
    17ac:	4806      	ldr	r0, [pc, #24]	; (17c8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x58>)
    17ae:	3031      	adds	r0, #49	; 0x31
    17b0:	6060      	str	r0, [r4, #4]
    17b2:	7065      	strb	r5, [r4, #1]
    17b4:	2004      	movs	r0, #4
    17b6:	70a0      	strb	r0, [r4, #2]
    17b8:	bd70      	pop	{r4, r5, r6, pc}
    17ba:	21e8      	movs	r1, #232	; 0xe8
    17bc:	2074      	movs	r0, #116	; 0x74
    17be:	f003 fbbf 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17c2:	0000      	.short	0x0000
    17c4:	20000028 	.word	0x20000028
    17c8:	000115fc 	.word	0x000115fc

000017cc <mpsl_tx_power_radio_supported_power_adjust>:
    17cc:	4907      	ldr	r1, [pc, #28]	; (17ec <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    17ce:	f991 2002 	ldrsb.w	r2, [r1, #2]
    17d2:	4290      	cmp	r0, r2
    17d4:	da03      	bge.n	17de <mpsl_tx_power_radio_supported_power_adjust+0x12>
    17d6:	f991 2001 	ldrsb.w	r2, [r1, #1]
    17da:	4290      	cmp	r0, r2
    17dc:	dc01      	bgt.n	17e2 <mpsl_tx_power_radio_supported_power_adjust+0x16>
    17de:	4610      	mov	r0, r2
    17e0:	4770      	bx	lr
    17e2:	6849      	ldr	r1, [r1, #4]
    17e4:	1a80      	subs	r0, r0, r2
    17e6:	5608      	ldrsb	r0, [r1, r0]
    17e8:	4770      	bx	lr
    17ea:	0000      	.short	0x0000
    17ec:	20000028 	.word	0x20000028

000017f0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    17f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17f4:	461c      	mov	r4, r3
    17f6:	4690      	mov	r8, r2
    17f8:	460d      	mov	r5, r1
    17fa:	4606      	mov	r6, r0
    17fc:	f06f 0715 	mvn.w	r7, #21
    1800:	2804      	cmp	r0, #4
    1802:	d804      	bhi.n	180e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    1804:	b11c      	cbz	r4, 180e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    1806:	f00b fc1c 	bl	d042 <strlen+0x10>
    180a:	42a8      	cmp	r0, r5
    180c:	d802      	bhi.n	1814 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    180e:	4638      	mov	r0, r7
    1810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1814:	4805      	ldr	r0, [pc, #20]	; (182c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    1816:	4642      	mov	r2, r8
    1818:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    181c:	b118      	cbz	r0, 1826 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    181e:	5740      	ldrsb	r0, [r0, r5]
    1820:	4282      	cmp	r2, r0
    1822:	dd00      	ble.n	1826 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    1824:	4602      	mov	r2, r0
    1826:	7022      	strb	r2, [r4, #0]
    1828:	2000      	movs	r0, #0
    182a:	e7f1      	b.n	1810 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    182c:	20000dc0 	.word	0x20000dc0
    1830:	2800      	cmp	r0, #0
    1832:	d019      	beq.n	1868 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x78>
    1834:	7803      	ldrb	r3, [r0, #0]
    1836:	4913      	ldr	r1, [pc, #76]	; (1884 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x94>)
    1838:	4a13      	ldr	r2, [pc, #76]	; (1888 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x98>)
    183a:	b113      	cbz	r3, 1842 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x52>
    183c:	2b01      	cmp	r3, #1
    183e:	d00e      	beq.n	185e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    1840:	e011      	b.n	1866 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    1842:	7903      	ldrb	r3, [r0, #4]
    1844:	2b01      	cmp	r3, #1
    1846:	d000      	beq.n	184a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x5a>
    1848:	b96b      	cbnz	r3, 1866 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    184a:	7943      	ldrb	r3, [r0, #5]
    184c:	b10b      	cbz	r3, 1852 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    184e:	2b01      	cmp	r3, #1
    1850:	d109      	bne.n	1866 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    1852:	6883      	ldr	r3, [r0, #8]
    1854:	3b64      	subs	r3, #100	; 0x64
    1856:	428b      	cmp	r3, r1
    1858:	d205      	bcs.n	1866 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    185a:	68c0      	ldr	r0, [r0, #12]
    185c:	e00e      	b.n	187c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    185e:	7903      	ldrb	r3, [r0, #4]
    1860:	2b01      	cmp	r3, #1
    1862:	d002      	beq.n	186a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
    1864:	b10b      	cbz	r3, 186a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x7a>
    1866:	2000      	movs	r0, #0
    1868:	4770      	bx	lr
    186a:	7943      	ldrb	r3, [r0, #5]
    186c:	b10b      	cbz	r3, 1872 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x82>
    186e:	2b01      	cmp	r3, #1
    1870:	d1f9      	bne.n	1866 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    1872:	68c3      	ldr	r3, [r0, #12]
    1874:	3b64      	subs	r3, #100	; 0x64
    1876:	428b      	cmp	r3, r1
    1878:	d2f5      	bcs.n	1866 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    187a:	6880      	ldr	r0, [r0, #8]
    187c:	4290      	cmp	r0, r2
    187e:	d8f2      	bhi.n	1866 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x76>
    1880:	2001      	movs	r0, #1
    1882:	4770      	bx	lr
    1884:	0001863d 	.word	0x0001863d
    1888:	0f423fff 	.word	0x0f423fff
    188c:	b510      	push	{r4, lr}
    188e:	4c05      	ldr	r4, [pc, #20]	; (18a4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb4>)
    1890:	6820      	ldr	r0, [r4, #0]
    1892:	b110      	cbz	r0, 189a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xaa>
    1894:	4780      	blx	r0
    1896:	2000      	movs	r0, #0
    1898:	6020      	str	r0, [r4, #0]
    189a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    189e:	f002 b8bd 	b.w	3a1c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    18a2:	0000      	.short	0x0000
    18a4:	20000030 	.word	0x20000030

000018a8 <mpsl_timeslot_session_open>:
    18a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18ac:	460e      	mov	r6, r1
    18ae:	0005      	movs	r5, r0
    18b0:	d004      	beq.n	18bc <mpsl_timeslot_session_open+0x14>
    18b2:	f000 f847 	bl	1944 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    18b6:	4607      	mov	r7, r0
    18b8:	2400      	movs	r4, #0
    18ba:	e00b      	b.n	18d4 <mpsl_timeslot_session_open+0x2c>
    18bc:	f06f 0015 	mvn.w	r0, #21
    18c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18c4:	4620      	mov	r0, r4
    18c6:	f000 f843 	bl	1950 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    18ca:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    18ce:	b130      	cbz	r0, 18de <mpsl_timeslot_session_open+0x36>
    18d0:	1c64      	adds	r4, r4, #1
    18d2:	b2e4      	uxtb	r4, r4
    18d4:	42bc      	cmp	r4, r7
    18d6:	d3f5      	bcc.n	18c4 <mpsl_timeslot_session_open+0x1c>
    18d8:	f06f 000b 	mvn.w	r0, #11
    18dc:	e7f0      	b.n	18c0 <mpsl_timeslot_session_open+0x18>
    18de:	4627      	mov	r7, r4
    18e0:	2cff      	cmp	r4, #255	; 0xff
    18e2:	d0f9      	beq.n	18d8 <mpsl_timeslot_session_open+0x30>
    18e4:	4620      	mov	r0, r4
    18e6:	f000 f833 	bl	1950 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    18ea:	4604      	mov	r4, r0
    18ec:	f00b fd75 	bl	d3da <strlen+0x3a8>
    18f0:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    18f4:	4621      	mov	r1, r4
    18f6:	4808      	ldr	r0, [pc, #32]	; (1918 <mpsl_timeslot_session_open+0x70>)
    18f8:	f002 f868 	bl	39cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    18fc:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1900:	2820      	cmp	r0, #32
    1902:	d006      	beq.n	1912 <mpsl_timeslot_session_open+0x6a>
    1904:	2001      	movs	r0, #1
    1906:	6225      	str	r5, [r4, #32]
    1908:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    190c:	7037      	strb	r7, [r6, #0]
    190e:	2000      	movs	r0, #0
    1910:	e7d6      	b.n	18c0 <mpsl_timeslot_session_open+0x18>
    1912:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1916:	e7d3      	b.n	18c0 <mpsl_timeslot_session_open+0x18>
    1918:	0000d105 	.word	0x0000d105

0000191c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    191c:	b510      	push	{r4, lr}
    191e:	0782      	lsls	r2, r0, #30
    1920:	d002      	beq.n	1928 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    1922:	f06f 000d 	mvn.w	r0, #13
    1926:	bd10      	pop	{r4, pc}
    1928:	4a05      	ldr	r2, [pc, #20]	; (1940 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    192a:	7011      	strb	r1, [r2, #0]
    192c:	6050      	str	r0, [r2, #4]
    192e:	b128      	cbz	r0, 193c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    1930:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1934:	010a      	lsls	r2, r1, #4
    1936:	2100      	movs	r1, #0
    1938:	f00b ffd0 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    193c:	2000      	movs	r0, #0
    193e:	bd10      	pop	{r4, pc}
    1940:	20000034 	.word	0x20000034

00001944 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1944:	4801      	ldr	r0, [pc, #4]	; (194c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    1946:	7800      	ldrb	r0, [r0, #0]
    1948:	4770      	bx	lr
    194a:	0000      	.short	0x0000
    194c:	20000034 	.word	0x20000034

00001950 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1950:	4905      	ldr	r1, [pc, #20]	; (1968 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    1952:	780a      	ldrb	r2, [r1, #0]
    1954:	4290      	cmp	r0, r2
    1956:	d301      	bcc.n	195c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    1958:	2000      	movs	r0, #0
    195a:	4770      	bx	lr
    195c:	6849      	ldr	r1, [r1, #4]
    195e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1962:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    1966:	4770      	bx	lr
    1968:	20000034 	.word	0x20000034

0000196c <MPSL_IRQ_RADIO_Handler>:
    196c:	490e      	ldr	r1, [pc, #56]	; (19a8 <MPSL_IRQ_RADIO_Handler+0x3c>)
    196e:	b510      	push	{r4, lr}
    1970:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    1974:	2820      	cmp	r0, #32
    1976:	d012      	beq.n	199e <MPSL_IRQ_RADIO_Handler+0x32>
    1978:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
    197c:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    1980:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1984:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    1988:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    198c:	6840      	ldr	r0, [r0, #4]
    198e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1992:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    1996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    199a:	2104      	movs	r1, #4
    199c:	4710      	bx	r2
    199e:	f640 0187 	movw	r1, #2183	; 0x887
    19a2:	2070      	movs	r0, #112	; 0x70
    19a4:	f003 facc 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19a8:	200011d4 	.word	0x200011d4
    19ac:	b570      	push	{r4, r5, r6, lr}
    19ae:	4605      	mov	r5, r0
    19b0:	2a20      	cmp	r2, #32
    19b2:	d028      	beq.n	1a06 <MPSL_IRQ_RADIO_Handler+0x9a>
    19b4:	4819      	ldr	r0, [pc, #100]	; (1a1c <MPSL_IRQ_RADIO_Handler+0xb0>)
    19b6:	4c1a      	ldr	r4, [pc, #104]	; (1a20 <MPSL_IRQ_RADIO_Handler+0xb4>)
    19b8:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    19bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    19c0:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    19c4:	4423      	add	r3, r4
    19c6:	2920      	cmp	r1, #32
    19c8:	d022      	beq.n	1a10 <MPSL_IRQ_RADIO_Handler+0xa4>
    19ca:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    19ce:	7840      	ldrb	r0, [r0, #1]
    19d0:	784c      	ldrb	r4, [r1, #1]
    19d2:	7048      	strb	r0, [r1, #1]
    19d4:	4620      	mov	r0, r4
    19d6:	4601      	mov	r1, r0
    19d8:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    19dc:	4291      	cmp	r1, r2
    19de:	7005      	strb	r5, [r0, #0]
    19e0:	7840      	ldrb	r0, [r0, #1]
    19e2:	d1f8      	bne.n	19d6 <MPSL_IRQ_RADIO_Handler+0x6a>
    19e4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    19e8:	2a20      	cmp	r2, #32
    19ea:	bf1a      	itte	ne
    19ec:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    19f0:	7054      	strbne	r4, [r2, #1]
    19f2:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    19f6:	2220      	movs	r2, #32
    19f8:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    19fc:	f88c 2001 	strb.w	r2, [ip, #1]
    1a00:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    1a04:	bd70      	pop	{r4, r5, r6, pc}
    1a06:	f240 2192 	movw	r1, #658	; 0x292
    1a0a:	2070      	movs	r0, #112	; 0x70
    1a0c:	f003 fa98 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a10:	f893 4020 	ldrb.w	r4, [r3, #32]
    1a14:	7840      	ldrb	r0, [r0, #1]
    1a16:	f883 0020 	strb.w	r0, [r3, #32]
    1a1a:	e7db      	b.n	19d4 <MPSL_IRQ_RADIO_Handler+0x68>
    1a1c:	20001154 	.word	0x20001154
    1a20:	200011d4 	.word	0x200011d4
    1a24:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a28:	b085      	sub	sp, #20
    1a2a:	4615      	mov	r5, r2
    1a2c:	460c      	mov	r4, r1
    1a2e:	f002 f9e3 	bl	3df8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1a32:	4428      	add	r0, r5
    1a34:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1a38:	9102      	str	r1, [sp, #8]
    1a3a:	6820      	ldr	r0, [r4, #0]
    1a3c:	1a40      	subs	r0, r0, r1
    1a3e:	0200      	lsls	r0, r0, #8
    1a40:	17c1      	asrs	r1, r0, #31
    1a42:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a46:	1200      	asrs	r0, r0, #8
    1a48:	2800      	cmp	r0, #0
    1a4a:	f300 80f0 	bgt.w	1c2e <MPSL_IRQ_RADIO_Handler+0x2c2>
    1a4e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1a52:	48ca      	ldr	r0, [pc, #808]	; (1d7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>)
    1a54:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    1a58:	4408      	add	r0, r1
    1a5a:	9003      	str	r0, [sp, #12]
    1a5c:	f890 5020 	ldrb.w	r5, [r0, #32]
    1a60:	2020      	movs	r0, #32
    1a62:	4ec7      	ldr	r6, [pc, #796]	; (1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>)
    1a64:	46ea      	mov	sl, sp
    1a66:	f10d 0904 	add.w	r9, sp, #4
    1a6a:	f88d 0000 	strb.w	r0, [sp]
    1a6e:	2d20      	cmp	r5, #32
    1a70:	bf1c      	itt	ne
    1a72:	48c4      	ldrne	r0, [pc, #784]	; (1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1a74:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1a78:	d039      	beq.n	1aee <MPSL_IRQ_RADIO_Handler+0x182>
    1a7a:	bf00      	nop
    1a7c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1a80:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1a84:	f100 0108 	add.w	r1, r0, #8
    1a88:	68c0      	ldr	r0, [r0, #12]
    1a8a:	6827      	ldr	r7, [r4, #0]
    1a8c:	1a38      	subs	r0, r7, r0
    1a8e:	0200      	lsls	r0, r0, #8
    1a90:	17c2      	asrs	r2, r0, #31
    1a92:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1a96:	1200      	asrs	r0, r0, #8
    1a98:	d429      	bmi.n	1aee <MPSL_IRQ_RADIO_Handler+0x182>
    1a9a:	89e0      	ldrh	r0, [r4, #14]
    1a9c:	b300      	cbz	r0, 1ae0 <MPSL_IRQ_RADIO_Handler+0x174>
    1a9e:	89c8      	ldrh	r0, [r1, #14]
    1aa0:	b9f0      	cbnz	r0, 1ae0 <MPSL_IRQ_RADIO_Handler+0x174>
    1aa2:	6808      	ldr	r0, [r1, #0]
    1aa4:	9004      	str	r0, [sp, #16]
    1aa6:	f003 f8a1 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1aaa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1aae:	bf08      	it	eq
    1ab0:	200d      	moveq	r0, #13
    1ab2:	d00b      	beq.n	1acc <MPSL_IRQ_RADIO_Handler+0x160>
    1ab4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1ab8:	3856      	subs	r0, #86	; 0x56
    1aba:	bf08      	it	eq
    1abc:	201c      	moveq	r0, #28
    1abe:	d005      	beq.n	1acc <MPSL_IRQ_RADIO_Handler+0x160>
    1ac0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1ac4:	389f      	subs	r0, #159	; 0x9f
    1ac6:	bf14      	ite	ne
    1ac8:	2000      	movne	r0, #0
    1aca:	2032      	moveq	r0, #50	; 0x32
    1acc:	1c41      	adds	r1, r0, #1
    1ace:	9804      	ldr	r0, [sp, #16]
    1ad0:	1a38      	subs	r0, r7, r0
    1ad2:	0200      	lsls	r0, r0, #8
    1ad4:	17c2      	asrs	r2, r0, #31
    1ad6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1ada:	1200      	asrs	r0, r0, #8
    1adc:	4288      	cmp	r0, r1
    1ade:	db06      	blt.n	1aee <MPSL_IRQ_RADIO_Handler+0x182>
    1ae0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1ae4:	f88a 5000 	strb.w	r5, [sl]
    1ae8:	7845      	ldrb	r5, [r0, #1]
    1aea:	2d20      	cmp	r5, #32
    1aec:	d1c6      	bne.n	1a7c <MPSL_IRQ_RADIO_Handler+0x110>
    1aee:	f89a 0000 	ldrb.w	r0, [sl]
    1af2:	f889 0000 	strb.w	r0, [r9]
    1af6:	2d20      	cmp	r5, #32
    1af8:	bf1c      	itt	ne
    1afa:	48a2      	ldrne	r0, [pc, #648]	; (1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1afc:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1b00:	f000 8138 	beq.w	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1b04:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1b08:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1b0c:	6860      	ldr	r0, [r4, #4]
    1b0e:	f8d7 8008 	ldr.w	r8, [r7, #8]
    1b12:	f107 0108 	add.w	r1, r7, #8
    1b16:	eba8 0000 	sub.w	r0, r8, r0
    1b1a:	0200      	lsls	r0, r0, #8
    1b1c:	17c2      	asrs	r2, r0, #31
    1b1e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b22:	1200      	asrs	r0, r0, #8
    1b24:	d427      	bmi.n	1b76 <MPSL_IRQ_RADIO_Handler+0x20a>
    1b26:	89c8      	ldrh	r0, [r1, #14]
    1b28:	2800      	cmp	r0, #0
    1b2a:	f000 8123 	beq.w	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1b2e:	89e0      	ldrh	r0, [r4, #14]
    1b30:	2800      	cmp	r0, #0
    1b32:	f040 811f 	bne.w	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1b36:	f8d4 a000 	ldr.w	sl, [r4]
    1b3a:	f003 f857 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1b3e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1b42:	bf08      	it	eq
    1b44:	200d      	moveq	r0, #13
    1b46:	d00b      	beq.n	1b60 <MPSL_IRQ_RADIO_Handler+0x1f4>
    1b48:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1b4c:	3856      	subs	r0, #86	; 0x56
    1b4e:	bf08      	it	eq
    1b50:	201c      	moveq	r0, #28
    1b52:	d005      	beq.n	1b60 <MPSL_IRQ_RADIO_Handler+0x1f4>
    1b54:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1b58:	389f      	subs	r0, #159	; 0x9f
    1b5a:	bf14      	ite	ne
    1b5c:	2000      	movne	r0, #0
    1b5e:	2032      	moveq	r0, #50	; 0x32
    1b60:	1c41      	adds	r1, r0, #1
    1b62:	eba8 000a 	sub.w	r0, r8, sl
    1b66:	0200      	lsls	r0, r0, #8
    1b68:	17c2      	asrs	r2, r0, #31
    1b6a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b6e:	1200      	asrs	r0, r0, #8
    1b70:	4288      	cmp	r0, r1
    1b72:	f280 80ff 	bge.w	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1b76:	f889 5000 	strb.w	r5, [r9]
    1b7a:	7e39      	ldrb	r1, [r7, #24]
    1b7c:	7c20      	ldrb	r0, [r4, #16]
    1b7e:	4281      	cmp	r1, r0
    1b80:	d906      	bls.n	1b90 <MPSL_IRQ_RADIO_Handler+0x224>
    1b82:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1b86:	7845      	ldrb	r5, [r0, #1]
    1b88:	2d20      	cmp	r5, #32
    1b8a:	d1bb      	bne.n	1b04 <MPSL_IRQ_RADIO_Handler+0x198>
    1b8c:	f000 b8f2 	b.w	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1b90:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1b94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1b98:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1b9c:	8ac1      	ldrh	r1, [r0, #22]
    1b9e:	68c5      	ldr	r5, [r0, #12]
    1ba0:	bbe1      	cbnz	r1, 1c1c <MPSL_IRQ_RADIO_Handler+0x2b0>
    1ba2:	89e1      	ldrh	r1, [r4, #14]
    1ba4:	b3d1      	cbz	r1, 1c1c <MPSL_IRQ_RADIO_Handler+0x2b0>
    1ba6:	6887      	ldr	r7, [r0, #8]
    1ba8:	f003 f820 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1bac:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1bb0:	bf08      	it	eq
    1bb2:	200d      	moveq	r0, #13
    1bb4:	d00b      	beq.n	1bce <MPSL_IRQ_RADIO_Handler+0x262>
    1bb6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1bba:	3856      	subs	r0, #86	; 0x56
    1bbc:	bf08      	it	eq
    1bbe:	201c      	moveq	r0, #28
    1bc0:	d005      	beq.n	1bce <MPSL_IRQ_RADIO_Handler+0x262>
    1bc2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1bc6:	389f      	subs	r0, #159	; 0x9f
    1bc8:	bf14      	ite	ne
    1bca:	2000      	movne	r0, #0
    1bcc:	2032      	moveq	r0, #50	; 0x32
    1bce:	1c41      	adds	r1, r0, #1
    1bd0:	1be8      	subs	r0, r5, r7
    1bd2:	0200      	lsls	r0, r0, #8
    1bd4:	17c2      	asrs	r2, r0, #31
    1bd6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1bda:	1200      	asrs	r0, r0, #8
    1bdc:	4288      	cmp	r0, r1
    1bde:	da1d      	bge.n	1c1c <MPSL_IRQ_RADIO_Handler+0x2b0>
    1be0:	f003 f804 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1be4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1be8:	bf08      	it	eq
    1bea:	200d      	moveq	r0, #13
    1bec:	d00b      	beq.n	1c06 <MPSL_IRQ_RADIO_Handler+0x29a>
    1bee:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1bf2:	3856      	subs	r0, #86	; 0x56
    1bf4:	bf08      	it	eq
    1bf6:	201c      	moveq	r0, #28
    1bf8:	d005      	beq.n	1c06 <MPSL_IRQ_RADIO_Handler+0x29a>
    1bfa:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1bfe:	389f      	subs	r0, #159	; 0x9f
    1c00:	bf14      	ite	ne
    1c02:	2000      	movne	r0, #0
    1c04:	2032      	moveq	r0, #50	; 0x32
    1c06:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1c0a:	1c40      	adds	r0, r0, #1
    1c0c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1c10:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    1c14:	6889      	ldr	r1, [r1, #8]
    1c16:	4408      	add	r0, r1
    1c18:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1c1c:	9802      	ldr	r0, [sp, #8]
    1c1e:	1a28      	subs	r0, r5, r0
    1c20:	0200      	lsls	r0, r0, #8
    1c22:	17c1      	asrs	r1, r0, #31
    1c24:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1c28:	1200      	asrs	r0, r0, #8
    1c2a:	2800      	cmp	r0, #0
    1c2c:	dd03      	ble.n	1c36 <MPSL_IRQ_RADIO_Handler+0x2ca>
    1c2e:	b009      	add	sp, #36	; 0x24
    1c30:	2000      	movs	r0, #0
    1c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c36:	e9d4 1000 	ldrd	r1, r0, [r4]
    1c3a:	1a40      	subs	r0, r0, r1
    1c3c:	4428      	add	r0, r5
    1c3e:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    1c42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c46:	e9c4 1000 	strd	r1, r0, [r4]
    1c4a:	9808      	ldr	r0, [sp, #32]
    1c4c:	9004      	str	r0, [sp, #16]
    1c4e:	9803      	ldr	r0, [sp, #12]
    1c50:	46ea      	mov	sl, sp
    1c52:	f10d 0804 	add.w	r8, sp, #4
    1c56:	f890 5020 	ldrb.w	r5, [r0, #32]
    1c5a:	2020      	movs	r0, #32
    1c5c:	f88d 0000 	strb.w	r0, [sp]
    1c60:	2d20      	cmp	r5, #32
    1c62:	d03c      	beq.n	1cde <MPSL_IRQ_RADIO_Handler+0x372>
    1c64:	4847      	ldr	r0, [pc, #284]	; (1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1c66:	9904      	ldr	r1, [sp, #16]
    1c68:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    1c6c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1c70:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1c74:	f100 0108 	add.w	r1, r0, #8
    1c78:	68c0      	ldr	r0, [r0, #12]
    1c7a:	6827      	ldr	r7, [r4, #0]
    1c7c:	1a38      	subs	r0, r7, r0
    1c7e:	0200      	lsls	r0, r0, #8
    1c80:	17c2      	asrs	r2, r0, #31
    1c82:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1c86:	1200      	asrs	r0, r0, #8
    1c88:	d429      	bmi.n	1cde <MPSL_IRQ_RADIO_Handler+0x372>
    1c8a:	89e0      	ldrh	r0, [r4, #14]
    1c8c:	b300      	cbz	r0, 1cd0 <MPSL_IRQ_RADIO_Handler+0x364>
    1c8e:	89c8      	ldrh	r0, [r1, #14]
    1c90:	b9f0      	cbnz	r0, 1cd0 <MPSL_IRQ_RADIO_Handler+0x364>
    1c92:	f8d1 9000 	ldr.w	r9, [r1]
    1c96:	f002 ffa9 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1c9a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1c9e:	bf08      	it	eq
    1ca0:	200d      	moveq	r0, #13
    1ca2:	d00b      	beq.n	1cbc <MPSL_IRQ_RADIO_Handler+0x350>
    1ca4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1ca8:	3856      	subs	r0, #86	; 0x56
    1caa:	bf08      	it	eq
    1cac:	201c      	moveq	r0, #28
    1cae:	d005      	beq.n	1cbc <MPSL_IRQ_RADIO_Handler+0x350>
    1cb0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1cb4:	389f      	subs	r0, #159	; 0x9f
    1cb6:	bf14      	ite	ne
    1cb8:	2000      	movne	r0, #0
    1cba:	2032      	moveq	r0, #50	; 0x32
    1cbc:	1c41      	adds	r1, r0, #1
    1cbe:	eba7 0009 	sub.w	r0, r7, r9
    1cc2:	0200      	lsls	r0, r0, #8
    1cc4:	17c2      	asrs	r2, r0, #31
    1cc6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1cca:	1200      	asrs	r0, r0, #8
    1ccc:	4288      	cmp	r0, r1
    1cce:	db06      	blt.n	1cde <MPSL_IRQ_RADIO_Handler+0x372>
    1cd0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1cd4:	f88a 5000 	strb.w	r5, [sl]
    1cd8:	7845      	ldrb	r5, [r0, #1]
    1cda:	2d20      	cmp	r5, #32
    1cdc:	d1c6      	bne.n	1c6c <MPSL_IRQ_RADIO_Handler+0x300>
    1cde:	f89a 0000 	ldrb.w	r0, [sl]
    1ce2:	f888 0000 	strb.w	r0, [r8]
    1ce6:	9804      	ldr	r0, [sp, #16]
    1ce8:	2d20      	cmp	r5, #32
    1cea:	bf1c      	itt	ne
    1cec:	4925      	ldrne	r1, [pc, #148]	; (1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1cee:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    1cf2:	d03f      	beq.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1cf4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1cf8:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    1cfc:	6861      	ldr	r1, [r4, #4]
    1cfe:	f8d7 9008 	ldr.w	r9, [r7, #8]
    1d02:	f107 0008 	add.w	r0, r7, #8
    1d06:	eba9 0101 	sub.w	r1, r9, r1
    1d0a:	0209      	lsls	r1, r1, #8
    1d0c:	17ca      	asrs	r2, r1, #31
    1d0e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d12:	1209      	asrs	r1, r1, #8
    1d14:	d422      	bmi.n	1d5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10>
    1d16:	89c0      	ldrh	r0, [r0, #14]
    1d18:	b360      	cbz	r0, 1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d1a:	89e0      	ldrh	r0, [r4, #14]
    1d1c:	bb50      	cbnz	r0, 1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d1e:	f8d4 a000 	ldr.w	sl, [r4]
    1d22:	f002 ff63 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1d26:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1d2a:	bf08      	it	eq
    1d2c:	200d      	moveq	r0, #13
    1d2e:	d00b      	beq.n	1d48 <MPSL_IRQ_RADIO_Handler+0x3dc>
    1d30:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1d34:	3856      	subs	r0, #86	; 0x56
    1d36:	bf08      	it	eq
    1d38:	201c      	moveq	r0, #28
    1d3a:	d005      	beq.n	1d48 <MPSL_IRQ_RADIO_Handler+0x3dc>
    1d3c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1d40:	389f      	subs	r0, #159	; 0x9f
    1d42:	bf14      	ite	ne
    1d44:	2000      	movne	r0, #0
    1d46:	2032      	moveq	r0, #50	; 0x32
    1d48:	1c41      	adds	r1, r0, #1
    1d4a:	eba9 000a 	sub.w	r0, r9, sl
    1d4e:	0200      	lsls	r0, r0, #8
    1d50:	17c2      	asrs	r2, r0, #31
    1d52:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1d56:	1200      	asrs	r0, r0, #8
    1d58:	4288      	cmp	r0, r1
    1d5a:	da0b      	bge.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d5c:	f888 5000 	strb.w	r5, [r8]
    1d60:	7e38      	ldrb	r0, [r7, #24]
    1d62:	7c21      	ldrb	r1, [r4, #16]
    1d64:	4288      	cmp	r0, r1
    1d66:	f67f af13 	bls.w	1b90 <MPSL_IRQ_RADIO_Handler+0x224>
    1d6a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1d6e:	7845      	ldrb	r5, [r0, #1]
    1d70:	2d20      	cmp	r5, #32
    1d72:	d1bf      	bne.n	1cf4 <MPSL_IRQ_RADIO_Handler+0x388>
    1d74:	b009      	add	sp, #36	; 0x24
    1d76:	2001      	movs	r0, #1
    1d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d7c:	200011d4 	.word	0x200011d4
    1d80:	20000dd4 	.word	0x20000dd4
    1d84:	20001154 	.word	0x20001154
    1d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d8c:	460f      	mov	r7, r1
    1d8e:	4606      	mov	r6, r0
    1d90:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    1d94:	494b      	ldr	r1, [pc, #300]	; (1ec4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x178>)
    1d96:	4699      	mov	r9, r3
    1d98:	4408      	add	r0, r1
    1d9a:	4692      	mov	sl, r2
    1d9c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1da0:	2020      	movs	r0, #32
    1da2:	7010      	strb	r0, [r2, #0]
    1da4:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    1da8:	2c20      	cmp	r4, #32
    1daa:	bf1c      	itt	ne
    1dac:	4846      	ldrne	r0, [pc, #280]	; (1ec8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>)
    1dae:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    1db2:	d038      	beq.n	1e26 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1db4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1db8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    1dbc:	f100 0108 	add.w	r1, r0, #8
    1dc0:	68c0      	ldr	r0, [r0, #12]
    1dc2:	6835      	ldr	r5, [r6, #0]
    1dc4:	1a28      	subs	r0, r5, r0
    1dc6:	0200      	lsls	r0, r0, #8
    1dc8:	17c2      	asrs	r2, r0, #31
    1dca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1dce:	1200      	asrs	r0, r0, #8
    1dd0:	d429      	bmi.n	1e26 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1dd2:	89f0      	ldrh	r0, [r6, #14]
    1dd4:	b300      	cbz	r0, 1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1dd6:	89c8      	ldrh	r0, [r1, #14]
    1dd8:	b9f0      	cbnz	r0, 1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1dda:	6808      	ldr	r0, [r1, #0]
    1ddc:	9000      	str	r0, [sp, #0]
    1dde:	f002 ff05 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1de2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1de6:	bf08      	it	eq
    1de8:	200d      	moveq	r0, #13
    1dea:	d00b      	beq.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1dec:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1df0:	3856      	subs	r0, #86	; 0x56
    1df2:	bf08      	it	eq
    1df4:	201c      	moveq	r0, #28
    1df6:	d005      	beq.n	1e04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1df8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1dfc:	389f      	subs	r0, #159	; 0x9f
    1dfe:	bf14      	ite	ne
    1e00:	2000      	movne	r0, #0
    1e02:	2032      	moveq	r0, #50	; 0x32
    1e04:	1c41      	adds	r1, r0, #1
    1e06:	9800      	ldr	r0, [sp, #0]
    1e08:	1a28      	subs	r0, r5, r0
    1e0a:	0200      	lsls	r0, r0, #8
    1e0c:	17c2      	asrs	r2, r0, #31
    1e0e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1e12:	1200      	asrs	r0, r0, #8
    1e14:	4288      	cmp	r0, r1
    1e16:	db06      	blt.n	1e26 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e18:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    1e1c:	f88a 4000 	strb.w	r4, [sl]
    1e20:	7844      	ldrb	r4, [r0, #1]
    1e22:	2c20      	cmp	r4, #32
    1e24:	d1c6      	bne.n	1db4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68>
    1e26:	f89a 0000 	ldrb.w	r0, [sl]
    1e2a:	f889 0000 	strb.w	r0, [r9]
    1e2e:	2c20      	cmp	r4, #32
    1e30:	bf1c      	itt	ne
    1e32:	4825      	ldrne	r0, [pc, #148]	; (1ec8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>)
    1e34:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    1e38:	d040      	beq.n	1ebc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>
    1e3a:	bf00      	nop
    1e3c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1e40:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    1e44:	6870      	ldr	r0, [r6, #4]
    1e46:	68bd      	ldr	r5, [r7, #8]
    1e48:	f107 0108 	add.w	r1, r7, #8
    1e4c:	1a28      	subs	r0, r5, r0
    1e4e:	0200      	lsls	r0, r0, #8
    1e50:	17c2      	asrs	r2, r0, #31
    1e52:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1e56:	1200      	asrs	r0, r0, #8
    1e58:	d422      	bmi.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1e5a:	89c8      	ldrh	r0, [r1, #14]
    1e5c:	b370      	cbz	r0, 1ebc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>
    1e5e:	89f0      	ldrh	r0, [r6, #14]
    1e60:	bb60      	cbnz	r0, 1ebc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>
    1e62:	f8d6 b000 	ldr.w	fp, [r6]
    1e66:	f002 fec1 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1e6a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1e6e:	bf08      	it	eq
    1e70:	200d      	moveq	r0, #13
    1e72:	d00b      	beq.n	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1e74:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1e78:	3856      	subs	r0, #86	; 0x56
    1e7a:	bf08      	it	eq
    1e7c:	201c      	moveq	r0, #28
    1e7e:	d005      	beq.n	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1e80:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1e84:	389f      	subs	r0, #159	; 0x9f
    1e86:	bf14      	ite	ne
    1e88:	2000      	movne	r0, #0
    1e8a:	2032      	moveq	r0, #50	; 0x32
    1e8c:	1c41      	adds	r1, r0, #1
    1e8e:	eba5 000b 	sub.w	r0, r5, fp
    1e92:	0200      	lsls	r0, r0, #8
    1e94:	17c2      	asrs	r2, r0, #31
    1e96:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1e9a:	1200      	asrs	r0, r0, #8
    1e9c:	4288      	cmp	r0, r1
    1e9e:	da0d      	bge.n	1ebc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>
    1ea0:	f889 4000 	strb.w	r4, [r9]
    1ea4:	7e38      	ldrb	r0, [r7, #24]
    1ea6:	7c31      	ldrb	r1, [r6, #16]
    1ea8:	4288      	cmp	r0, r1
    1eaa:	d802      	bhi.n	1eb2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x166>
    1eac:	2000      	movs	r0, #0
    1eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1eb2:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    1eb6:	7844      	ldrb	r4, [r0, #1]
    1eb8:	2c20      	cmp	r4, #32
    1eba:	d1bf      	bne.n	1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1ebc:	2001      	movs	r0, #1
    1ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ec2:	0000      	.short	0x0000
    1ec4:	200011d4 	.word	0x200011d4
    1ec8:	20001154 	.word	0x20001154
    1ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ed0:	b082      	sub	sp, #8
    1ed2:	4605      	mov	r5, r0
    1ed4:	4614      	mov	r4, r2
    1ed6:	4688      	mov	r8, r1
    1ed8:	89d0      	ldrh	r0, [r2, #14]
    1eda:	aa01      	add	r2, sp, #4
    1edc:	4669      	mov	r1, sp
    1ede:	f001 ffa7 	bl	3e30 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1ee2:	f002 fcb5 	bl	4850 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1ee6:	f001 ff87 	bl	3df8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1eea:	4607      	mov	r7, r0
    1eec:	4820      	ldr	r0, [pc, #128]	; (1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>)
    1eee:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1ef2:	2920      	cmp	r1, #32
    1ef4:	d004      	beq.n	1f00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b4>
    1ef6:	68c0      	ldr	r0, [r0, #12]
    1ef8:	1d40      	adds	r0, r0, #5
    1efa:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1efe:	e024      	b.n	1f4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1fe>
    1f00:	89e0      	ldrh	r0, [r4, #14]
    1f02:	f105 0609 	add.w	r6, r5, #9
    1f06:	b1b0      	cbz	r0, 1f36 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ea>
    1f08:	f002 ffa2 	bl	4e50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f0c:	b998      	cbnz	r0, 1f36 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ea>
    1f0e:	f002 fe6d 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1f12:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1f16:	bf08      	it	eq
    1f18:	200d      	moveq	r0, #13
    1f1a:	d00b      	beq.n	1f34 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e8>
    1f1c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1f20:	3856      	subs	r0, #86	; 0x56
    1f22:	bf08      	it	eq
    1f24:	201c      	moveq	r0, #28
    1f26:	d005      	beq.n	1f34 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e8>
    1f28:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1f2c:	389f      	subs	r0, #159	; 0x9f
    1f2e:	bf14      	ite	ne
    1f30:	2000      	movne	r0, #0
    1f32:	2032      	moveq	r0, #50	; 0x32
    1f34:	4406      	add	r6, r0
    1f36:	f1b8 0f00 	cmp.w	r8, #0
    1f3a:	d104      	bne.n	1f46 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1fa>
    1f3c:	9800      	ldr	r0, [sp, #0]
    1f3e:	4287      	cmp	r7, r0
    1f40:	bf84      	itt	hi
    1f42:	1a38      	subhi	r0, r7, r0
    1f44:	4406      	addhi	r6, r0
    1f46:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1f4a:	e9d4 2000 	ldrd	r2, r0, [r4]
    1f4e:	1a80      	subs	r0, r0, r2
    1f50:	4408      	add	r0, r1
    1f52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f56:	e9c4 1000 	strd	r1, r0, [r4]
    1f5a:	42a9      	cmp	r1, r5
    1f5c:	bf24      	itt	cs
    1f5e:	b002      	addcs	sp, #8
    1f60:	e8bd 81f0 	ldmiacs.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f64:	68a0      	ldr	r0, [r4, #8]
    1f66:	1c40      	adds	r0, r0, #1
    1f68:	60a0      	str	r0, [r4, #8]
    1f6a:	b002      	add	sp, #8
    1f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f70:	200011d4 	.word	0x200011d4
    1f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f78:	b097      	sub	sp, #92	; 0x5c
    1f7a:	4617      	mov	r7, r2
    1f7c:	468b      	mov	fp, r1
    1f7e:	4605      	mov	r5, r0
    1f80:	f002 f9e8 	bl	4354 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    1f84:	4604      	mov	r4, r0
    1f86:	f002 fc63 	bl	4850 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1f8a:	4606      	mov	r6, r0
    1f8c:	f1bb 0f01 	cmp.w	fp, #1
    1f90:	bf18      	it	ne
    1f92:	f1bb 0f02 	cmpne.w	fp, #2
    1f96:	d005      	beq.n	1fa4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>
    1f98:	f640 115d 	movw	r1, #2397	; 0x95d
    1f9c:	f04f 0070 	mov.w	r0, #112	; 0x70
    1fa0:	f002 ffce 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fa4:	49f8      	ldr	r1, [pc, #992]	; (2388 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x388>)
    1fa6:	2001      	movs	r0, #1
    1fa8:	6008      	str	r0, [r1, #0]
    1faa:	49f8      	ldr	r1, [pc, #992]	; (238c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x38c>)
    1fac:	6889      	ldr	r1, [r1, #8]
    1fae:	6008      	str	r0, [r1, #0]
    1fb0:	2000      	movs	r0, #0
    1fb2:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    1fb6:	900c      	str	r0, [sp, #48]	; 0x30
    1fb8:	1e40      	subs	r0, r0, #1
    1fba:	900d      	str	r0, [sp, #52]	; 0x34
    1fbc:	49f4      	ldr	r1, [pc, #976]	; (2390 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x390>)
    1fbe:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
    1fc2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1fc6:	f100 0108 	add.w	r1, r0, #8
    1fca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    1fce:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    1fd2:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    1fd6:	6980      	ldr	r0, [r0, #24]
    1fd8:	9012      	str	r0, [sp, #72]	; 0x48
    1fda:	a80e      	add	r0, sp, #56	; 0x38
    1fdc:	f000 fbc4 	bl	2768 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x768>
    1fe0:	9007      	str	r0, [sp, #28]
    1fe2:	48ec      	ldr	r0, [pc, #944]	; (2394 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x394>)
    1fe4:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    1fe8:	8b80      	ldrh	r0, [r0, #28]
    1fea:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1fee:	f1b8 0f00 	cmp.w	r8, #0
    1ff2:	bf04      	itt	eq
    1ff4:	2000      	moveq	r0, #0
    1ff6:	9006      	streq	r0, [sp, #24]
    1ff8:	d00b      	beq.n	2012 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x12>
    1ffa:	2001      	movs	r0, #1
    1ffc:	9006      	str	r0, [sp, #24]
    1ffe:	48e5      	ldr	r0, [pc, #916]	; (2394 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x394>)
    2000:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    2004:	b928      	cbnz	r0, 2012 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x12>
    2006:	f002 ff23 	bl	4e50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    200a:	2800      	cmp	r0, #0
    200c:	bf08      	it	eq
    200e:	2701      	moveq	r7, #1
    2010:	d000      	beq.n	2014 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14>
    2012:	2700      	movs	r7, #0
    2014:	f002 fdea 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2018:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    201c:	bf08      	it	eq
    201e:	200d      	moveq	r0, #13
    2020:	d00b      	beq.n	203a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a>
    2022:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2026:	3856      	subs	r0, #86	; 0x56
    2028:	bf08      	it	eq
    202a:	201c      	moveq	r0, #28
    202c:	d005      	beq.n	203a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a>
    202e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2032:	389f      	subs	r0, #159	; 0x9f
    2034:	bf14      	ite	ne
    2036:	2000      	movne	r0, #0
    2038:	2032      	moveq	r0, #50	; 0x32
    203a:	f04f 0900 	mov.w	r9, #0
    203e:	46ca      	mov	sl, r9
    2040:	900b      	str	r0, [sp, #44]	; 0x2c
    2042:	4546      	cmp	r6, r8
    2044:	d938      	bls.n	20b8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb8>
    2046:	9907      	ldr	r1, [sp, #28]
    2048:	f8df 934c 	ldr.w	r9, [pc, #844]	; 2398 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x398>
    204c:	ea6f 0c06 	mvn.w	ip, r6
    2050:	466b      	mov	r3, sp
    2052:	aa16      	add	r2, sp, #88	; 0x58
    2054:	eb01 000c 	add.w	r0, r1, ip
    2058:	4549      	cmp	r1, r9
    205a:	d904      	bls.n	2066 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x66>
    205c:	f240 516f 	movw	r1, #1391	; 0x56f
    2060:	2070      	movs	r0, #112	; 0x70
    2062:	f002 ff6d 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2066:	49cd      	ldr	r1, [pc, #820]	; (239c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x39c>)
    2068:	458c      	cmp	ip, r1
    206a:	dd04      	ble.n	2076 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x76>
    206c:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2070:	2070      	movs	r0, #112	; 0x70
    2072:	f002 ff65 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2076:	49ca      	ldr	r1, [pc, #808]	; (23a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a0>)
    2078:	458c      	cmp	ip, r1
    207a:	da04      	bge.n	2086 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x86>
    207c:	f240 5171 	movw	r1, #1393	; 0x571
    2080:	2070      	movs	r0, #112	; 0x70
    2082:	f002 ff5d 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2086:	49c7      	ldr	r1, [pc, #796]	; (23a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a4>)
    2088:	4281      	cmp	r1, r0
    208a:	bfdc      	itt	le
    208c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2090:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2094:	dd05      	ble.n	20a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa2>
    2096:	2800      	cmp	r0, #0
    2098:	bfbc      	itt	lt
    209a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    209e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    20a2:	4619      	mov	r1, r3
    20a4:	f001 fec4 	bl	3e30 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    20a8:	9800      	ldr	r0, [sp, #0]
    20aa:	990e      	ldr	r1, [sp, #56]	; 0x38
    20ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    20b0:	9000      	str	r0, [sp, #0]
    20b2:	1a08      	subs	r0, r1, r0
    20b4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    20b8:	2f00      	cmp	r7, #0
    20ba:	bf18      	it	ne
    20bc:	f8dd a02c 	ldrne.w	sl, [sp, #44]	; 0x2c
    20c0:	d105      	bne.n	20ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xce>
    20c2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    20c6:	2800      	cmp	r0, #0
    20c8:	bf18      	it	ne
    20ca:	f04f 0a02 	movne.w	sl, #2
    20ce:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    20d2:	d008      	beq.n	20e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe6>
    20d4:	980e      	ldr	r0, [sp, #56]	; 0x38
    20d6:	1b00      	subs	r0, r0, r4
    20d8:	0200      	lsls	r0, r0, #8
    20da:	17c1      	asrs	r1, r0, #31
    20dc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    20e0:	1200      	asrs	r0, r0, #8
    20e2:	2801      	cmp	r0, #1
    20e4:	da01      	bge.n	20ea <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xea>
    20e6:	2003      	movs	r0, #3
    20e8:	e00d      	b.n	2106 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x106>
    20ea:	b157      	cbz	r7, 2102 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x102>
    20ec:	48a9      	ldr	r0, [pc, #676]	; (2394 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x394>)
    20ee:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    20f2:	b130      	cbz	r0, 2102 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x102>
    20f4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    20f8:	f110 0a00 	adds.w	sl, r0, #0
    20fc:	bf18      	it	ne
    20fe:	f04f 0a02 	movne.w	sl, #2
    2102:	4625      	mov	r5, r4
    2104:	2000      	movs	r0, #0
    2106:	4482      	add	sl, r0
    2108:	980e      	ldr	r0, [sp, #56]	; 0x38
    210a:	eba0 0009 	sub.w	r0, r0, r9
    210e:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2112:	1e50      	subs	r0, r2, #1
    2114:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2118:	1b41      	subs	r1, r0, r5
    211a:	0209      	lsls	r1, r1, #8
    211c:	17cb      	asrs	r3, r1, #31
    211e:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    2122:	1209      	asrs	r1, r1, #8
    2124:	4551      	cmp	r1, sl
    2126:	db04      	blt.n	2132 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x132>
    2128:	f1b9 0f00 	cmp.w	r9, #0
    212c:	bf18      	it	ne
    212e:	920e      	strne	r2, [sp, #56]	; 0x38
    2130:	e02d      	b.n	218e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x18e>
    2132:	f1b9 0f00 	cmp.w	r9, #0
    2136:	d005      	beq.n	2144 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x144>
    2138:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
    213c:	b920      	cbnz	r0, 2148 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x148>
    213e:	f002 fb7d 	bl	483c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    2142:	b108      	cbz	r0, 2148 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x148>
    2144:	b9af      	cbnz	r7, 2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
    2146:	e00c      	b.n	2162 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x162>
    2148:	b92f      	cbnz	r7, 2156 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x156>
    214a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    214e:	2800      	cmp	r0, #0
    2150:	bf18      	it	ne
    2152:	f1aa 0a02 	subne.w	sl, sl, #2
    2156:	f04f 0900 	mov.w	r9, #0
    215a:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
    215e:	464e      	mov	r6, r9
    2160:	e007      	b.n	2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
    2162:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2166:	b120      	cbz	r0, 2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
    2168:	2000      	movs	r0, #0
    216a:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    216e:	f1aa 0a02 	sub.w	sl, sl, #2
    2172:	980e      	ldr	r0, [sp, #56]	; 0x38
    2174:	eba0 0009 	sub.w	r0, r0, r9
    2178:	1e40      	subs	r0, r0, #1
    217a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    217e:	1b41      	subs	r1, r0, r5
    2180:	0209      	lsls	r1, r1, #8
    2182:	17ca      	asrs	r2, r1, #31
    2184:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2188:	1209      	asrs	r1, r1, #8
    218a:	4551      	cmp	r1, sl
    218c:	db7e      	blt.n	228c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x28c>
    218e:	9714      	str	r7, [sp, #80]	; 0x50
    2190:	4605      	mov	r5, r0
    2192:	f04f 0900 	mov.w	r9, #0
    2196:	9f06      	ldr	r7, [sp, #24]
    2198:	f001 ffb4 	bl	4104 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    219c:	1a28      	subs	r0, r5, r0
    219e:	0200      	lsls	r0, r0, #8
    21a0:	17c1      	asrs	r1, r0, #31
    21a2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    21a6:	ea4f 2a20 	mov.w	sl, r0, asr #8
    21aa:	f002 fd1f 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    21ae:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    21b2:	bf08      	it	eq
    21b4:	200d      	moveq	r0, #13
    21b6:	d00b      	beq.n	21d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d0>
    21b8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    21bc:	3856      	subs	r0, #86	; 0x56
    21be:	bf08      	it	eq
    21c0:	201c      	moveq	r0, #28
    21c2:	d005      	beq.n	21d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d0>
    21c4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    21c8:	389f      	subs	r0, #159	; 0x9f
    21ca:	bf14      	ite	ne
    21cc:	2000      	movne	r0, #0
    21ce:	2032      	moveq	r0, #50	; 0x32
    21d0:	300b      	adds	r0, #11
    21d2:	4582      	cmp	sl, r0
    21d4:	da20      	bge.n	2218 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x218>
    21d6:	f1bb 0f01 	cmp.w	fp, #1
    21da:	d002      	beq.n	21e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e2>
    21dc:	9814      	ldr	r0, [sp, #80]	; 0x50
    21de:	b140      	cbz	r0, 21f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f2>
    21e0:	e012      	b.n	2208 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x208>
    21e2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    21e6:	d11c      	bne.n	2222 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x222>
    21e8:	f640 01de 	movw	r1, #2270	; 0x8de
    21ec:	2070      	movs	r0, #112	; 0x70
    21ee:	f002 fea7 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21f2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    21f6:	d007      	beq.n	2208 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x208>
    21f8:	1b60      	subs	r0, r4, r5
    21fa:	0200      	lsls	r0, r0, #8
    21fc:	17c1      	asrs	r1, r0, #31
    21fe:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2202:	1200      	asrs	r0, r0, #8
    2204:	2804      	cmp	r0, #4
    2206:	dd04      	ble.n	2212 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x212>
    2208:	462c      	mov	r4, r5
    220a:	4620      	mov	r0, r4
    220c:	f001 ffa0 	bl	4150 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2210:	e007      	b.n	2222 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x222>
    2212:	2800      	cmp	r0, #0
    2214:	dc63      	bgt.n	22de <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2de>
    2216:	e004      	b.n	2222 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x222>
    2218:	462c      	mov	r4, r5
    221a:	4620      	mov	r0, r4
    221c:	f001 ff98 	bl	4150 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2220:	46b9      	mov	r9, r7
    2222:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    2226:	d055      	beq.n	22d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2d4>
    2228:	980e      	ldr	r0, [sp, #56]	; 0x38
    222a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    222c:	1b00      	subs	r0, r0, r4
    222e:	1b12      	subs	r2, r2, r4
    2230:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2234:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2238:	2801      	cmp	r0, #1
    223a:	d350      	bcc.n	22de <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2de>
    223c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2240:	bf98      	it	ls
    2242:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    2246:	d84a      	bhi.n	22de <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2de>
    2248:	4620      	mov	r0, r4
    224a:	f00b f973 	bl	d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    224e:	9907      	ldr	r1, [sp, #28]
    2250:	4a52      	ldr	r2, [pc, #328]	; (239c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x39c>)
    2252:	1a0d      	subs	r5, r1, r0
    2254:	f04f 0a00 	mov.w	sl, #0
    2258:	1aaa      	subs	r2, r5, r2
    225a:	f17a 0200 	sbcs.w	r2, sl, #0
    225e:	d318      	bcc.n	2292 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x292>
    2260:	4b4e      	ldr	r3, [pc, #312]	; (239c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x39c>)
    2262:	1a42      	subs	r2, r0, r1
    2264:	1ad3      	subs	r3, r2, r3
    2266:	f17a 0300 	sbcs.w	r3, sl, #0
    226a:	d312      	bcc.n	2292 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x292>
    226c:	4b4a      	ldr	r3, [pc, #296]	; (2398 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x398>)
    226e:	42ab      	cmp	r3, r5
    2270:	bf3e      	ittt	cc
    2272:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    2276:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    227a:	1845      	addcc	r5, r0, r1
    227c:	d309      	bcc.n	2292 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x292>
    227e:	4293      	cmp	r3, r2
    2280:	d231      	bcs.n	22e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2e6>
    2282:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    2286:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    228a:	e000      	b.n	228e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x28e>
    228c:	e027      	b.n	22de <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2de>
    228e:	4408      	add	r0, r1
    2290:	4245      	negs	r5, r0
    2292:	4f40      	ldr	r7, [pc, #256]	; (2394 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x394>)
    2294:	7fb8      	ldrb	r0, [r7, #30]
    2296:	b358      	cbz	r0, 22f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2f0>
    2298:	f1bb 0f01 	cmp.w	fp, #1
    229c:	d005      	beq.n	22aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2aa>
    229e:	2002      	movs	r0, #2
    22a0:	f002 f992 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22a4:	2001      	movs	r0, #1
    22a6:	f002 f98f 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22aa:	45b0      	cmp	r8, r6
    22ac:	d22c      	bcs.n	2308 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x308>
    22ae:	eba5 0106 	sub.w	r1, r5, r6
    22b2:	f04f 0002 	mov.w	r0, #2
    22b6:	f002 f8d1 	bl	445c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    22ba:	b390      	cbz	r0, 2322 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x322>
    22bc:	f1b8 0f00 	cmp.w	r8, #0
    22c0:	bf1c      	itt	ne
    22c2:	eba5 0108 	subne.w	r1, r5, r8
    22c6:	2001      	movne	r0, #1
    22c8:	d034      	beq.n	2334 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x334>
    22ca:	bf00      	nop
    22cc:	f002 f8c6 	bl	445c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    22d0:	b338      	cbz	r0, 2322 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x322>
    22d2:	e02f      	b.n	2334 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x334>
    22d4:	f640 11f1 	movw	r1, #2545	; 0x9f1
    22d8:	2070      	movs	r0, #112	; 0x70
    22da:	f002 fe31 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22de:	b017      	add	sp, #92	; 0x5c
    22e0:	2000      	movs	r0, #0
    22e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22e6:	f640 21c2 	movw	r1, #2754	; 0xac2
    22ea:	2070      	movs	r0, #112	; 0x70
    22ec:	f002 fe28 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22f0:	45b0      	cmp	r8, r6
    22f2:	bf34      	ite	cc
    22f4:	4630      	movcc	r0, r6
    22f6:	4640      	movcs	r0, r8
    22f8:	301e      	adds	r0, #30
    22fa:	42a8      	cmp	r0, r5
    22fc:	dbcc      	blt.n	2298 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x298>
    22fe:	f640 2105 	movw	r1, #2565	; 0xa05
    2302:	2070      	movs	r0, #112	; 0x70
    2304:	f002 fe1c 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2308:	d90c      	bls.n	2324 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x324>
    230a:	eba5 0108 	sub.w	r1, r5, r8
    230e:	2001      	movs	r0, #1
    2310:	f002 f8a4 	bl	445c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2314:	b128      	cbz	r0, 2322 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x322>
    2316:	2e00      	cmp	r6, #0
    2318:	bf1c      	itt	ne
    231a:	1ba9      	subne	r1, r5, r6
    231c:	2002      	movne	r0, #2
    231e:	d009      	beq.n	2334 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x334>
    2320:	e7d4      	b.n	22cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2cc>
    2322:	e030      	b.n	2386 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x386>
    2324:	ea56 0008 	orrs.w	r0, r6, r8
    2328:	d004      	beq.n	2334 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x334>
    232a:	f640 1141 	movw	r1, #2369	; 0x941
    232e:	2070      	movs	r0, #112	; 0x70
    2330:	f002 fe06 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2334:	4629      	mov	r1, r5
    2336:	2000      	movs	r0, #0
    2338:	f002 f890 	bl	445c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    233c:	b318      	cbz	r0, 2386 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x386>
    233e:	9806      	ldr	r0, [sp, #24]
    2340:	2601      	movs	r6, #1
    2342:	2800      	cmp	r0, #0
    2344:	bf04      	itt	eq
    2346:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    234a:	2800      	cmpeq	r0, #0
    234c:	d002      	beq.n	2354 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x354>
    234e:	f1b9 0f00 	cmp.w	r9, #0
    2352:	d033      	beq.n	23bc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3bc>
    2354:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    2358:	b118      	cbz	r0, 2362 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x362>
    235a:	f002 fc4d 	bl	4bf8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    235e:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    2362:	f1b9 0f00 	cmp.w	r9, #0
    2366:	d02c      	beq.n	23c2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3c2>
    2368:	980b      	ldr	r0, [sp, #44]	; 0x2c
    236a:	1a20      	subs	r0, r4, r0
    236c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2370:	2005      	movs	r0, #5
    2372:	f002 f873 	bl	445c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2376:	b3e0      	cbz	r0, 23f2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3f2>
    2378:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    237c:	2800      	cmp	r0, #0
    237e:	bf08      	it	eq
    2380:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    2384:	e025      	b.n	23d2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3d2>
    2386:	e00f      	b.n	23a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3a8>
    2388:	40000508 	.word	0x40000508
    238c:	2000003c 	.word	0x2000003c
    2390:	20000dd4 	.word	0x20000dd4
    2394:	200011d4 	.word	0x200011d4
    2398:	1e847fff 	.word	0x1e847fff
    239c:	0f424000 	.word	0x0f424000
    23a0:	f0bdc000 	.word	0xf0bdc000
    23a4:	1e848000 	.word	0x1e848000
    23a8:	2002      	movs	r0, #2
    23aa:	f002 f90d 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    23ae:	2001      	movs	r0, #1
    23b0:	f002 f90a 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    23b4:	b017      	add	sp, #92	; 0x5c
    23b6:	2000      	movs	r0, #0
    23b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23bc:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    23c0:	b190      	cbz	r0, 23e8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e8>
    23c2:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    23c6:	b120      	cbz	r0, 23d2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3d2>
    23c8:	2005      	movs	r0, #5
    23ca:	f002 f8fd 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    23ce:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    23d2:	eba5 0008 	sub.w	r0, r5, r8
    23d6:	f1a0 0119 	sub.w	r1, r0, #25
    23da:	2900      	cmp	r1, #0
    23dc:	dc0f      	bgt.n	23fe <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3fe>
    23de:	f640 212e 	movw	r1, #2606	; 0xa2e
    23e2:	2070      	movs	r0, #112	; 0x70
    23e4:	f002 fdac 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23e8:	f002 fc22 	bl	4c30 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    23ec:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    23f0:	e7b7      	b.n	2362 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x362>
    23f2:	e7ff      	b.n	23f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3f4>
    23f4:	f240 21f2 	movw	r1, #754	; 0x2f2
    23f8:	2070      	movs	r0, #112	; 0x70
    23fa:	f002 fda1 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23fe:	2003      	movs	r0, #3
    2400:	f002 f82c 	bl	445c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2404:	b1c0      	cbz	r0, 2438 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x438>
    2406:	480f      	ldr	r0, [pc, #60]	; (2444 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x444>)
    2408:	6880      	ldr	r0, [r0, #8]
    240a:	f8c0 a000 	str.w	sl, [r0]
    240e:	480e      	ldr	r0, [pc, #56]	; (2448 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x448>)
    2410:	f8c0 a000 	str.w	sl, [r0]
    2414:	ac0c      	add	r4, sp, #48	; 0x30
    2416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    241a:	6038      	str	r0, [r7, #0]
    241c:	6079      	str	r1, [r7, #4]
    241e:	60ba      	str	r2, [r7, #8]
    2420:	60fb      	str	r3, [r7, #12]
    2422:	ac10      	add	r4, sp, #64	; 0x40
    2424:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    2428:	6138      	str	r0, [r7, #16]
    242a:	6179      	str	r1, [r7, #20]
    242c:	61ba      	str	r2, [r7, #24]
    242e:	61fb      	str	r3, [r7, #28]
    2430:	b017      	add	sp, #92	; 0x5c
    2432:	2001      	movs	r0, #1
    2434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2438:	f640 2136 	movw	r1, #2614	; 0xa36
    243c:	2070      	movs	r0, #112	; 0x70
    243e:	f002 fd7f 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2442:	0000      	.short	0x0000
    2444:	2000003c 	.word	0x2000003c
    2448:	40000508 	.word	0x40000508
    244c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2450:	4606      	mov	r6, r0
    2452:	7808      	ldrb	r0, [r1, #0]
    2454:	7490      	strb	r0, [r2, #18]
    2456:	7ac8      	ldrb	r0, [r1, #11]
    2458:	7450      	strb	r0, [r2, #17]
    245a:	7a88      	ldrb	r0, [r1, #10]
    245c:	7410      	strb	r0, [r2, #16]
    245e:	8908      	ldrh	r0, [r1, #8]
    2460:	81d0      	strh	r0, [r2, #14]
    2462:	f8df 8198 	ldr.w	r8, [pc, #408]	; 25fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5fc>
    2466:	6870      	ldr	r0, [r6, #4]
    2468:	469a      	mov	sl, r3
    246a:	fba0 7908 	umull	r7, r9, r0, r8
    246e:	4614      	mov	r4, r2
    2470:	460d      	mov	r5, r1
    2472:	6830      	ldr	r0, [r6, #0]
    2474:	f00b f85e 	bl	d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2478:	19c1      	adds	r1, r0, r7
    247a:	7828      	ldrb	r0, [r5, #0]
    247c:	ea4f 0c68 	mov.w	ip, r8, asr #1
    2480:	f149 0200 	adc.w	r2, r9, #0
    2484:	f1a8 0e01 	sub.w	lr, r8, #1
    2488:	f1cc 0b00 	rsb	fp, ip, #0
    248c:	b168      	cbz	r0, 24aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4aa>
    248e:	89e0      	ldrh	r0, [r4, #14]
    2490:	7c67      	ldrb	r7, [r4, #17]
    2492:	43c0      	mvns	r0, r0
    2494:	f8d5 9004 	ldr.w	r9, [r5, #4]
    2498:	f104 020c 	add.w	r2, r4, #12
    249c:	4560      	cmp	r0, ip
    249e:	dd5f      	ble.n	2560 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x560>
    24a0:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    24a4:	2070      	movs	r0, #112	; 0x70
    24a6:	f002 fd4b 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24aa:	f8df 9154 	ldr.w	r9, [pc, #340]	; 2600 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x600>
    24ae:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    24b2:	eb11 0a09 	adds.w	sl, r1, r9
    24b6:	f142 0900 	adc.w	r9, r2, #0
    24ba:	ebb0 0a0a 	subs.w	sl, r0, sl
    24be:	eb73 0909 	sbcs.w	r9, r3, r9
    24c2:	d245      	bcs.n	2550 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x550>
    24c4:	1a41      	subs	r1, r0, r1
    24c6:	eb73 0102 	sbcs.w	r1, r3, r2
    24ca:	d341      	bcc.n	2550 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x550>
    24cc:	1bc7      	subs	r7, r0, r7
    24ce:	6870      	ldr	r0, [r6, #4]
    24d0:	60a0      	str	r0, [r4, #8]
    24d2:	4547      	cmp	r7, r8
    24d4:	d305      	bcc.n	24e2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4e2>
    24d6:	1c40      	adds	r0, r0, #1
    24d8:	f1a7 57f4 	sub.w	r7, r7, #511705088	; 0x1e800000
    24dc:	f5a7 2790 	sub.w	r7, r7, #294912	; 0x48000
    24e0:	60a0      	str	r0, [r4, #8]
    24e2:	89e0      	ldrh	r0, [r4, #14]
    24e4:	686d      	ldr	r5, [r5, #4]
    24e6:	43c1      	mvns	r1, r0
    24e8:	7c66      	ldrb	r6, [r4, #17]
    24ea:	1878      	adds	r0, r7, r1
    24ec:	f104 020c 	add.w	r2, r4, #12
    24f0:	4577      	cmp	r7, lr
    24f2:	d904      	bls.n	24fe <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4fe>
    24f4:	f240 516f 	movw	r1, #1391	; 0x56f
    24f8:	2070      	movs	r0, #112	; 0x70
    24fa:	f002 fd21 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24fe:	4561      	cmp	r1, ip
    2500:	dcce      	bgt.n	24a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4a0>
    2502:	4559      	cmp	r1, fp
    2504:	db2f      	blt.n	2566 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x566>
    2506:	4580      	cmp	r8, r0
    2508:	bfdc      	itt	le
    250a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    250e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2512:	dd05      	ble.n	2520 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x520>
    2514:	2800      	cmp	r0, #0
    2516:	bfbc      	itt	lt
    2518:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    251c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2520:	4621      	mov	r1, r4
    2522:	f001 fc85 	bl	3e30 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2526:	6820      	ldr	r0, [r4, #0]
    2528:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    252c:	1978      	adds	r0, r7, r5
    252e:	1c40      	adds	r0, r0, #1
    2530:	6021      	str	r1, [r4, #0]
    2532:	2e00      	cmp	r6, #0
    2534:	bf08      	it	eq
    2536:	307a      	addeq	r0, #122	; 0x7a
    2538:	d003      	beq.n	2542 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x542>
    253a:	2e01      	cmp	r6, #1
    253c:	bf08      	it	eq
    253e:	3048      	addeq	r0, #72	; 0x48
    2540:	d134      	bne.n	25ac <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5ac>
    2542:	f001 fc59 	bl	3df8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2546:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    254a:	6060      	str	r0, [r4, #4]
    254c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2550:	6830      	ldr	r0, [r6, #0]
    2552:	1e40      	subs	r0, r0, #1
    2554:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2558:	6020      	str	r0, [r4, #0]
    255a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    255e:	e7f4      	b.n	254a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x54a>
    2560:	4601      	mov	r1, r0
    2562:	4558      	cmp	r0, fp
    2564:	da04      	bge.n	2570 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x570>
    2566:	f240 5171 	movw	r1, #1393	; 0x571
    256a:	2070      	movs	r0, #112	; 0x70
    256c:	f002 fce8 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2570:	4580      	cmp	r8, r0
    2572:	bfdc      	itt	le
    2574:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    2578:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    257c:	dd05      	ble.n	258a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x58a>
    257e:	2800      	cmp	r0, #0
    2580:	bfbc      	itt	lt
    2582:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    2586:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    258a:	4621      	mov	r1, r4
    258c:	f001 fc50 	bl	3e30 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2590:	6820      	ldr	r0, [r4, #0]
    2592:	2f00      	cmp	r7, #0
    2594:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2598:	f109 0001 	add.w	r0, r9, #1
    259c:	6021      	str	r1, [r4, #0]
    259e:	bf08      	it	eq
    25a0:	307a      	addeq	r0, #122	; 0x7a
    25a2:	d008      	beq.n	25b6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5b6>
    25a4:	2f01      	cmp	r7, #1
    25a6:	bf08      	it	eq
    25a8:	3048      	addeq	r0, #72	; 0x48
    25aa:	d004      	beq.n	25b6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5b6>
    25ac:	f240 6124 	movw	r1, #1572	; 0x624
    25b0:	2070      	movs	r0, #112	; 0x70
    25b2:	f002 fcc5 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25b6:	f001 fc1f 	bl	3df8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    25ba:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    25be:	6061      	str	r1, [r4, #4]
    25c0:	6870      	ldr	r0, [r6, #4]
    25c2:	60a0      	str	r0, [r4, #8]
    25c4:	2100      	movs	r1, #0
    25c6:	4622      	mov	r2, r4
    25c8:	6830      	ldr	r0, [r6, #0]
    25ca:	f7ff fc7f 	bl	1ecc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>
    25ce:	6832      	ldr	r2, [r6, #0]
    25d0:	4653      	mov	r3, sl
    25d2:	4621      	mov	r1, r4
    25d4:	6928      	ldr	r0, [r5, #16]
    25d6:	f7ff fa25 	bl	1a24 <MPSL_IRQ_RADIO_Handler+0xb8>
    25da:	2800      	cmp	r0, #0
    25dc:	bf18      	it	ne
    25de:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    25e2:	e9d4 2100 	ldrd	r2, r1, [r4]
    25e6:	6830      	ldr	r0, [r6, #0]
    25e8:	1a89      	subs	r1, r1, r2
    25ea:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    25ee:	4408      	add	r0, r1
    25f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25f4:	e9c4 2000 	strd	r2, r0, [r4]
    25f8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    25fc:	1e848000 	.word	0x1e848000
    2600:	0f424000 	.word	0x0f424000
    2604:	b570      	push	{r4, r5, r6, lr}
    2606:	4d1e      	ldr	r5, [pc, #120]	; (2680 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x680>)
    2608:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    260c:	2820      	cmp	r0, #32
    260e:	bf18      	it	ne
    2610:	bd70      	popne	{r4, r5, r6, pc}
    2612:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    2616:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    261a:	4428      	add	r0, r5
    261c:	f890 4020 	ldrb.w	r4, [r0, #32]
    2620:	2c20      	cmp	r4, #32
    2622:	d027      	beq.n	2674 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x674>
    2624:	4b17      	ldr	r3, [pc, #92]	; (2684 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x684>)
    2626:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    262a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    262e:	7849      	ldrb	r1, [r1, #1]
    2630:	f880 1020 	strb.w	r1, [r0, #32]
    2634:	20ff      	movs	r0, #255	; 0xff
    2636:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    263a:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    263e:	4621      	mov	r1, r4
    2640:	2002      	movs	r0, #2
    2642:	f000 f8cb 	bl	27dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7dc>
    2646:	2000      	movs	r0, #0
    2648:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    264c:	77a8      	strb	r0, [r5, #30]
    264e:	490e      	ldr	r1, [pc, #56]	; (2688 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x688>)
    2650:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    2654:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2658:	7e00      	ldrb	r0, [r0, #24]
    265a:	2800      	cmp	r0, #0
    265c:	bf08      	it	eq
    265e:	f002 fdc9 	bleq	51f4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    2662:	2000      	movs	r0, #0
    2664:	4909      	ldr	r1, [pc, #36]	; (268c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x68c>)
    2666:	6849      	ldr	r1, [r1, #4]
    2668:	2900      	cmp	r1, #0
    266a:	bf08      	it	eq
    266c:	bd70      	popeq	{r4, r5, r6, pc}
    266e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2672:	4708      	bx	r1
    2674:	f44f 714b 	mov.w	r1, #812	; 0x32c
    2678:	2070      	movs	r0, #112	; 0x70
    267a:	f002 fc61 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    267e:	0000      	.short	0x0000
    2680:	200011d4 	.word	0x200011d4
    2684:	20001154 	.word	0x20001154
    2688:	20000dd4 	.word	0x20000dd4
    268c:	2000003c 	.word	0x2000003c
    2690:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2694:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2758 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x758>
    2698:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    269c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    26a0:	4440      	add	r0, r8
    26a2:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    26a6:	2c20      	cmp	r4, #32
    26a8:	bf08      	it	eq
    26aa:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    26ae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 275c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x75c>
    26b2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 2760 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x760>
    26b6:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    26ba:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    26be:	2607      	movs	r6, #7
    26c0:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    26c4:	2801      	cmp	r0, #1
    26c6:	d00e      	beq.n	26e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6e6>
    26c8:	2804      	cmp	r0, #4
    26ca:	bf08      	it	eq
    26cc:	2602      	moveq	r6, #2
    26ce:	d00a      	beq.n	26e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6e6>
    26d0:	2805      	cmp	r0, #5
    26d2:	bf0c      	ite	eq
    26d4:	2603      	moveq	r6, #3
    26d6:	2806      	cmpne	r0, #6
    26d8:	d005      	beq.n	26e6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6e6>
    26da:	f640 01a8 	movw	r1, #2216	; 0x8a8
    26de:	f04f 0070 	mov.w	r0, #112	; 0x70
    26e2:	f002 fc2d 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26e6:	f1bb 0f00 	cmp.w	fp, #0
    26ea:	bf18      	it	ne
    26ec:	f3af 8000 	nopne.w
    26f0:	f3ef 8010 	mrs	r0, PRIMASK
    26f4:	b672      	cpsid	i
    26f6:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    26fa:	784a      	ldrb	r2, [r1, #1]
    26fc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    2700:	4441      	add	r1, r8
    2702:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    2706:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    270a:	42a2      	cmp	r2, r4
    270c:	bf04      	itt	eq
    270e:	2220      	moveq	r2, #32
    2710:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    2714:	b1c0      	cbz	r0, 2748 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x748>
    2716:	462a      	mov	r2, r5
    2718:	4621      	mov	r1, r4
    271a:	2001      	movs	r0, #1
    271c:	f000 f85e 	bl	27dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7dc>
    2720:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2724:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    2728:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    272c:	6840      	ldr	r0, [r0, #4]
    272e:	4631      	mov	r1, r6
    2730:	4790      	blx	r2
    2732:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    2736:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    273a:	4440      	add	r0, r8
    273c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2740:	2c20      	cmp	r4, #32
    2742:	d1ba      	bne.n	26ba <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x6ba>
    2744:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2748:	4806      	ldr	r0, [pc, #24]	; (2764 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x764>)
    274a:	2800      	cmp	r0, #0
    274c:	bf18      	it	ne
    274e:	f3af 8000 	nopne.w
    2752:	b662      	cpsie	i
    2754:	e7df      	b.n	2716 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x716>
    2756:	0000      	.short	0x0000
    2758:	200011d4 	.word	0x200011d4
    275c:	00000000 	.word	0x00000000
    2760:	20001154 	.word	0x20001154
    2764:	00000000 	.word	0x00000000
    2768:	b510      	push	{r4, lr}
    276a:	4604      	mov	r4, r0
    276c:	6800      	ldr	r0, [r0, #0]
    276e:	f00a fee1 	bl	d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2772:	4602      	mov	r2, r0
    2774:	89e0      	ldrh	r0, [r4, #14]
    2776:	7b21      	ldrb	r1, [r4, #12]
    2778:	4b14      	ldr	r3, [pc, #80]	; (27cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7cc>)
    277a:	4408      	add	r0, r1
    277c:	1c41      	adds	r1, r0, #1
    277e:	1850      	adds	r0, r2, r1
    2780:	429a      	cmp	r2, r3
    2782:	d904      	bls.n	278e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x78e>
    2784:	f240 516f 	movw	r1, #1391	; 0x56f
    2788:	2070      	movs	r0, #112	; 0x70
    278a:	f002 fbd9 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    278e:	4a10      	ldr	r2, [pc, #64]	; (27d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7d0>)
    2790:	4291      	cmp	r1, r2
    2792:	dd04      	ble.n	279e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x79e>
    2794:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    2798:	2070      	movs	r0, #112	; 0x70
    279a:	f002 fbd1 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    279e:	4a0d      	ldr	r2, [pc, #52]	; (27d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7d4>)
    27a0:	4291      	cmp	r1, r2
    27a2:	da04      	bge.n	27ae <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7ae>
    27a4:	f240 5171 	movw	r1, #1393	; 0x571
    27a8:	2070      	movs	r0, #112	; 0x70
    27aa:	f002 fbc9 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27ae:	490a      	ldr	r1, [pc, #40]	; (27d8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7d8>)
    27b0:	4281      	cmp	r1, r0
    27b2:	bfde      	ittt	le
    27b4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    27b8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    27bc:	bd10      	pople	{r4, pc}
    27be:	2800      	cmp	r0, #0
    27c0:	bfbc      	itt	lt
    27c2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    27c6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    27ca:	bd10      	pop	{r4, pc}
    27cc:	1e847fff 	.word	0x1e847fff
    27d0:	0f424000 	.word	0x0f424000
    27d4:	f0bdc000 	.word	0xf0bdc000
    27d8:	1e848000 	.word	0x1e848000
    27dc:	f8df c058 	ldr.w	ip, [pc, #88]	; 2838 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x838>
    27e0:	b510      	push	{r4, lr}
    27e2:	2300      	movs	r3, #0
    27e4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    27e8:	2807      	cmp	r0, #7
    27ea:	d21f      	bcs.n	282c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x82c>
    27ec:	e8df f000 	tbb	[pc, r0]
    27f0:	05050505 	.word	0x05050505
    27f4:	00040404 	.word	0x00040404
    27f8:	2301      	movs	r3, #1
    27fa:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    27fe:	2b00      	cmp	r3, #0
    2800:	bf08      	it	eq
    2802:	bd10      	popeq	{r4, pc}
    2804:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2808:	480c      	ldr	r0, [pc, #48]	; (283c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x83c>)
    280a:	4402      	add	r2, r0
    280c:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    2810:	2820      	cmp	r0, #32
    2812:	bf0e      	itee	eq
    2814:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    2818:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    281c:	7041      	strbne	r1, [r0, #1]
    281e:	2020      	movs	r0, #32
    2820:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    2824:	7058      	strb	r0, [r3, #1]
    2826:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    282a:	bd10      	pop	{r4, pc}
    282c:	f44f 711a 	mov.w	r1, #616	; 0x268
    2830:	2070      	movs	r0, #112	; 0x70
    2832:	f002 fb85 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2836:	0000      	.short	0x0000
    2838:	20001154 	.word	0x20001154
    283c:	200011d4 	.word	0x200011d4
    2840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2844:	4617      	mov	r7, r2
    2846:	f8df a158 	ldr.w	sl, [pc, #344]	; 29a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9a0>
    284a:	eb02 0047 	add.w	r0, r2, r7, lsl #1
    284e:	4450      	add	r0, sl
    2850:	4688      	mov	r8, r1
    2852:	f890 4020 	ldrb.w	r4, [r0, #32]
    2856:	2901      	cmp	r1, #1
    2858:	4625      	mov	r5, r4
    285a:	bf18      	it	ne
    285c:	f1b8 0f02 	cmpne.w	r8, #2
    2860:	d005      	beq.n	286e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x86e>
    2862:	f640 216c 	movw	r1, #2668	; 0xa6c
    2866:	f04f 0070 	mov.w	r0, #112	; 0x70
    286a:	f002 fb69 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    286e:	f04f 0b00 	mov.w	fp, #0
    2872:	2d20      	cmp	r5, #32
    2874:	d044      	beq.n	2900 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x900>
    2876:	f89a 001e 	ldrb.w	r0, [sl, #30]
    287a:	2600      	movs	r6, #0
    287c:	2800      	cmp	r0, #0
    287e:	bf08      	it	eq
    2880:	2602      	moveq	r6, #2
    2882:	f001 fc3f 	bl	4104 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2886:	4b47      	ldr	r3, [pc, #284]	; (29a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9a4>)
    2888:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    288c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2890:	688a      	ldr	r2, [r1, #8]
    2892:	68c9      	ldr	r1, [r1, #12]
    2894:	1a12      	subs	r2, r2, r0
    2896:	1a09      	subs	r1, r1, r0
    2898:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    289c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    28a0:	4296      	cmp	r6, r2
    28a2:	bf99      	ittee	ls
    28a4:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    28a8:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    28ac:	4a3e      	ldrhi	r2, [pc, #248]	; (29a8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9a8>)
    28ae:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    28b2:	d923      	bls.n	28fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8fc>
    28b4:	4622      	mov	r2, r4
    28b6:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    28ba:	784c      	ldrb	r4, [r1, #1]
    28bc:	2c20      	cmp	r4, #32
    28be:	d015      	beq.n	28ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8ec>
    28c0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    28c4:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    28c8:	f8dc 1008 	ldr.w	r1, [ip, #8]
    28cc:	f8dc c00c 	ldr.w	ip, [ip, #12]
    28d0:	1a09      	subs	r1, r1, r0
    28d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    28d6:	ebac 0c00 	sub.w	ip, ip, r0
    28da:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    28de:	428e      	cmp	r6, r1
    28e0:	bf9c      	itt	ls
    28e2:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    28e6:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    28ea:	d8e3      	bhi.n	28b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8b4>
    28ec:	2a20      	cmp	r2, #32
    28ee:	d005      	beq.n	28fc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8fc>
    28f0:	463b      	mov	r3, r7
    28f2:	2120      	movs	r1, #32
    28f4:	2004      	movs	r0, #4
    28f6:	f7ff f859 	bl	19ac <MPSL_IRQ_RADIO_Handler+0x40>
    28fa:	4604      	mov	r4, r0
    28fc:	42ac      	cmp	r4, r5
    28fe:	d10f      	bne.n	2920 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x920>
    2900:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    2904:	2820      	cmp	r0, #32
    2906:	d00f      	beq.n	2928 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x928>
    2908:	9900      	ldr	r1, [sp, #0]
    290a:	f8da 0008 	ldr.w	r0, [sl, #8]
    290e:	1c89      	adds	r1, r1, #2
    2910:	1a08      	subs	r0, r1, r0
    2912:	0200      	lsls	r0, r0, #8
    2914:	17c1      	asrs	r1, r0, #31
    2916:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    291a:	1200      	asrs	r0, r0, #8
    291c:	2800      	cmp	r0, #0
    291e:	dd03      	ble.n	2928 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x928>
    2920:	b003      	add	sp, #12
    2922:	2000      	movs	r0, #0
    2924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2928:	2d20      	cmp	r5, #32
    292a:	d016      	beq.n	295a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x95a>
    292c:	462a      	mov	r2, r5
    292e:	4641      	mov	r1, r8
    2930:	9800      	ldr	r0, [sp, #0]
    2932:	f7ff fb1f 	bl	1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>
    2936:	2800      	cmp	r0, #0
    2938:	bf1f      	itttt	ne
    293a:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    293e:	2002      	movne	r0, #2
    2940:	b003      	addne	sp, #12
    2942:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2946:	463b      	mov	r3, r7
    2948:	462a      	mov	r2, r5
    294a:	2120      	movs	r1, #32
    294c:	2004      	movs	r0, #4
    294e:	f7ff f82d 	bl	19ac <MPSL_IRQ_RADIO_Handler+0x40>
    2952:	b003      	add	sp, #12
    2954:	2000      	movs	r0, #0
    2956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    295a:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    295e:	b118      	cbz	r0, 2968 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x968>
    2960:	f002 f94a 	bl	4bf8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    2964:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    2968:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    296c:	b120      	cbz	r0, 2978 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x978>
    296e:	2005      	movs	r0, #5
    2970:	f001 fe2a 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2974:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    2978:	2004      	movs	r0, #4
    297a:	f001 fe25 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    297e:	f001 fe93 	bl	46a8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2982:	2020      	movs	r0, #32
    2984:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    2988:	4808      	ldr	r0, [pc, #32]	; (29ac <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9ac>)
    298a:	6880      	ldr	r0, [r0, #8]
    298c:	f8c0 b000 	str.w	fp, [r0]
    2990:	4807      	ldr	r0, [pc, #28]	; (29b0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x9b0>)
    2992:	f8c0 b000 	str.w	fp, [r0]
    2996:	b003      	add	sp, #12
    2998:	2001      	movs	r0, #1
    299a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    299e:	0000      	.short	0x0000
    29a0:	200011d4 	.word	0x200011d4
    29a4:	20000dd4 	.word	0x20000dd4
    29a8:	20001154 	.word	0x20001154
    29ac:	2000003c 	.word	0x2000003c
    29b0:	40000508 	.word	0x40000508

000029b4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    29b4:	4906      	ldr	r1, [pc, #24]	; (29d0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    29b6:	b510      	push	{r4, lr}
    29b8:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    29bc:	2a20      	cmp	r2, #32
    29be:	bf1c      	itt	ne
    29c0:	7788      	strbne	r0, [r1, #30]
    29c2:	bd10      	popne	{r4, pc}
    29c4:	f240 317a 	movw	r1, #890	; 0x37a
    29c8:	2070      	movs	r0, #112	; 0x70
    29ca:	f002 fab9 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29ce:	0000      	.short	0x0000
    29d0:	200011d4 	.word	0x200011d4

000029d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    29d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29d8:	4e69      	ldr	r6, [pc, #420]	; (2b80 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    29da:	4607      	mov	r7, r0
    29dc:	b08d      	sub	sp, #52	; 0x34
    29de:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    29e2:	4688      	mov	r8, r1
    29e4:	2820      	cmp	r0, #32
    29e6:	d055      	beq.n	2a94 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    29e8:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    29ec:	f106 0408 	add.w	r4, r6, #8
    29f0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    29f4:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    29f8:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    29fc:	2020      	movs	r0, #32
    29fe:	f88d 0020 	strb.w	r0, [sp, #32]
    2a02:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    2a06:	aa0a      	add	r2, sp, #40	; 0x28
    2a08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2a0c:	4430      	add	r0, r6
    2a0e:	a909      	add	r1, sp, #36	; 0x24
    2a10:	f890 5020 	ldrb.w	r5, [r0, #32]
    2a14:	68f0      	ldr	r0, [r6, #12]
    2a16:	9002      	str	r0, [sp, #8]
    2a18:	6830      	ldr	r0, [r6, #0]
    2a1a:	4438      	add	r0, r7
    2a1c:	f001 fa08 	bl	3e30 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2a20:	f8da 000c 	ldr.w	r0, [sl, #12]
    2a24:	9909      	ldr	r1, [sp, #36]	; 0x24
    2a26:	2f65      	cmp	r7, #101	; 0x65
    2a28:	4408      	add	r0, r1
    2a2a:	d338      	bcc.n	2a9e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2a2c:	4a55      	ldr	r2, [pc, #340]	; (2b84 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    2a2e:	2100      	movs	r1, #0
    2a30:	1bd2      	subs	r2, r2, r7
    2a32:	eb71 0201 	sbcs.w	r2, r1, r1
    2a36:	d332      	bcc.n	2a9e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2a38:	6822      	ldr	r2, [r4, #0]
    2a3a:	1a82      	subs	r2, r0, r2
    2a3c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2a40:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    2a44:	d82b      	bhi.n	2a9e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2a46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a4a:	6060      	str	r0, [r4, #4]
    2a4c:	4630      	mov	r0, r6
    2a4e:	f884 8010 	strb.w	r8, [r4, #16]
    2a52:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    2a56:	f10d 0a20 	add.w	sl, sp, #32
    2a5a:	2d20      	cmp	r5, #32
    2a5c:	bf1c      	itt	ne
    2a5e:	494a      	ldrne	r1, [pc, #296]	; (2b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2a60:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    2a64:	d050      	beq.n	2b08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2a66:	bf00      	nop
    2a68:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    2a6c:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    2a70:	6861      	ldr	r1, [r4, #4]
    2a72:	f8d8 6008 	ldr.w	r6, [r8, #8]
    2a76:	f108 0008 	add.w	r0, r8, #8
    2a7a:	1a71      	subs	r1, r6, r1
    2a7c:	0209      	lsls	r1, r1, #8
    2a7e:	17ca      	asrs	r2, r1, #31
    2a80:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2a84:	1209      	asrs	r1, r1, #8
    2a86:	d42d      	bmi.n	2ae4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    2a88:	89c0      	ldrh	r0, [r0, #14]
    2a8a:	2800      	cmp	r0, #0
    2a8c:	d03c      	beq.n	2b08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2a8e:	89e0      	ldrh	r0, [r4, #14]
    2a90:	b148      	cbz	r0, 2aa6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    2a92:	e039      	b.n	2b08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2a94:	f44f 6133 	mov.w	r1, #2864	; 0xb30
    2a98:	2070      	movs	r0, #112	; 0x70
    2a9a:	f002 fa51 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a9e:	b00d      	add	sp, #52	; 0x34
    2aa0:	2001      	movs	r0, #1
    2aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2aa6:	6820      	ldr	r0, [r4, #0]
    2aa8:	900c      	str	r0, [sp, #48]	; 0x30
    2aaa:	f002 f89f 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2aae:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    2ab2:	bf08      	it	eq
    2ab4:	200d      	moveq	r0, #13
    2ab6:	d00b      	beq.n	2ad0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    2ab8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2abc:	3856      	subs	r0, #86	; 0x56
    2abe:	bf08      	it	eq
    2ac0:	201c      	moveq	r0, #28
    2ac2:	d005      	beq.n	2ad0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    2ac4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2ac8:	389f      	subs	r0, #159	; 0x9f
    2aca:	bf14      	ite	ne
    2acc:	2000      	movne	r0, #0
    2ace:	2032      	moveq	r0, #50	; 0x32
    2ad0:	1c41      	adds	r1, r0, #1
    2ad2:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ad4:	1a30      	subs	r0, r6, r0
    2ad6:	0200      	lsls	r0, r0, #8
    2ad8:	17c2      	asrs	r2, r0, #31
    2ada:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2ade:	1200      	asrs	r0, r0, #8
    2ae0:	4288      	cmp	r0, r1
    2ae2:	da11      	bge.n	2b08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    2ae4:	f88a 5000 	strb.w	r5, [sl]
    2ae8:	f898 1018 	ldrb.w	r1, [r8, #24]
    2aec:	7c20      	ldrb	r0, [r4, #16]
    2aee:	4281      	cmp	r1, r0
    2af0:	d805      	bhi.n	2afe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    2af2:	9802      	ldr	r0, [sp, #8]
    2af4:	6060      	str	r0, [r4, #4]
    2af6:	b00d      	add	sp, #52	; 0x34
    2af8:	2002      	movs	r0, #2
    2afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2afe:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    2b02:	7845      	ldrb	r5, [r0, #1]
    2b04:	2d20      	cmp	r5, #32
    2b06:	d1af      	bne.n	2a68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    2b08:	2005      	movs	r0, #5
    2b0a:	f001 fd5d 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2b0e:	4c1c      	ldr	r4, [pc, #112]	; (2b80 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2b14:	6060      	str	r0, [r4, #4]
    2b16:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    2b1a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2b1e:	2120      	movs	r1, #32
    2b20:	2a20      	cmp	r2, #32
    2b22:	d003      	beq.n	2b2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    2b24:	2005      	movs	r0, #5
    2b26:	f7fe ff41 	bl	19ac <MPSL_IRQ_RADIO_Handler+0x40>
    2b2a:	e004      	b.n	2b36 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    2b2c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    2b30:	4420      	add	r0, r4
    2b32:	f890 0020 	ldrb.w	r0, [r0, #32]
    2b36:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    2b3a:	4913      	ldr	r1, [pc, #76]	; (2b88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2b3c:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    2b40:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    2b44:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2b48:	7048      	strb	r0, [r1, #1]
    2b4a:	6820      	ldr	r0, [r4, #0]
    2b4c:	4438      	add	r0, r7
    2b4e:	6020      	str	r0, [r4, #0]
    2b50:	20ff      	movs	r0, #255	; 0xff
    2b52:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2b56:	7e60      	ldrb	r0, [r4, #25]
    2b58:	2801      	cmp	r0, #1
    2b5a:	d105      	bne.n	2b68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    2b5c:	68e0      	ldr	r0, [r4, #12]
    2b5e:	1e40      	subs	r0, r0, #1
    2b60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b64:	f001 fb94 	bl	4290 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2b68:	f89d 0020 	ldrb.w	r0, [sp, #32]
    2b6c:	2820      	cmp	r0, #32
    2b6e:	d003      	beq.n	2b78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    2b70:	4806      	ldr	r0, [pc, #24]	; (2b8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    2b72:	7840      	ldrb	r0, [r0, #1]
    2b74:	f002 fab8 	bl	50e8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2b78:	b00d      	add	sp, #52	; 0x34
    2b7a:	2000      	movs	r0, #0
    2b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b80:	200011d4 	.word	0x200011d4
    2b84:	0f424000 	.word	0x0f424000
    2b88:	20001154 	.word	0x20001154
    2b8c:	2000003c 	.word	0x2000003c

00002b90 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    2b90:	4806      	ldr	r0, [pc, #24]	; (2bac <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    2b92:	b510      	push	{r4, lr}
    2b94:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    2b98:	2920      	cmp	r1, #32
    2b9a:	bf1c      	itt	ne
    2b9c:	7e00      	ldrbne	r0, [r0, #24]
    2b9e:	bd10      	popne	{r4, pc}
    2ba0:	f640 312a 	movw	r1, #2858	; 0xb2a
    2ba4:	2070      	movs	r0, #112	; 0x70
    2ba6:	f002 f9cb 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2baa:	0000      	.short	0x0000
    2bac:	200011d4 	.word	0x200011d4

00002bb0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    2bb0:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    2bb4:	b570      	push	{r4, r5, r6, lr}
    2bb6:	4807      	ldr	r0, [pc, #28]	; (2bd4 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    2bb8:	4a07      	ldr	r2, [pc, #28]	; (2bd8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x28>)
    2bba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2bbe:	6901      	ldr	r1, [r0, #16]
    2bc0:	3008      	adds	r0, #8
    2bc2:	fba1 4502 	umull	r4, r5, r1, r2
    2bc6:	f7ff fdcf 	bl	2768 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x768>
    2bca:	1900      	adds	r0, r0, r4
    2bcc:	f145 0100 	adc.w	r1, r5, #0
    2bd0:	bd70      	pop	{r4, r5, r6, pc}
    2bd2:	0000      	.short	0x0000
    2bd4:	20000dd4 	.word	0x20000dd4
    2bd8:	1e848000 	.word	0x1e848000

00002bdc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bde:	4d6b      	ldr	r5, [pc, #428]	; (2d8c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    2be0:	4a6b      	ldr	r2, [pc, #428]	; (2d90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    2be2:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    2be6:	2601      	movs	r6, #1
    2be8:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    2bec:	2808      	cmp	r0, #8
    2bee:	d27c      	bcs.n	2cea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    2bf0:	e8df f000 	tbb	[pc, r0]
    2bf4:	a9977004 	.word	0xa9977004
    2bf8:	b3ae41c7 	.word	0xb3ae41c7
    2bfc:	b919      	cbnz	r1, 2c06 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2bfe:	f002 f817 	bl	4c30 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2c02:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2c06:	8ae0      	ldrh	r0, [r4, #22]
    2c08:	b110      	cbz	r0, 2c10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2c0a:	f002 f921 	bl	4e50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2c0e:	b180      	cbz	r0, 2c32 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    2c10:	f7ff fcf8 	bl	2604 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x604>
    2c14:	20ff      	movs	r0, #255	; 0xff
    2c16:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2c1a:	6861      	ldr	r1, [r4, #4]
    2c1c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    2c20:	d003      	beq.n	2c2a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    2c22:	2005      	movs	r0, #5
    2c24:	f001 fc1a 	bl	445c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2c28:	b140      	cbz	r0, 2c3c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    2c2a:	7e60      	ldrb	r0, [r4, #25]
    2c2c:	2801      	cmp	r0, #1
    2c2e:	d110      	bne.n	2c52 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    2c30:	e009      	b.n	2c46 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    2c32:	f640 0134 	movw	r1, #2100	; 0x834
    2c36:	2070      	movs	r0, #112	; 0x70
    2c38:	f002 f982 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c3c:	f640 0139 	movw	r1, #2105	; 0x839
    2c40:	2070      	movs	r0, #112	; 0x70
    2c42:	f002 f97d 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c46:	68e0      	ldr	r0, [r4, #12]
    2c48:	1e40      	subs	r0, r0, #1
    2c4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c4e:	f001 fb1f 	bl	4290 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2c52:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2c56:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2c5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c5e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2c62:	6840      	ldr	r0, [r0, #4]
    2c64:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2c68:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2c6c:	b001      	add	sp, #4
    2c6e:	2101      	movs	r1, #1
    2c70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2c74:	4710      	bx	r2
    2c76:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2c7a:	b140      	cbz	r0, 2c8e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    2c7c:	b919      	cbnz	r1, 2c86 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    2c7e:	f001 ffd7 	bl	4c30 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2c82:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2c86:	2000      	movs	r0, #0
    2c88:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c8e:	f7ff fcb9 	bl	2604 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x604>
    2c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c96:	6060      	str	r0, [r4, #4]
    2c98:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2c9c:	f88d 0000 	strb.w	r0, [sp]
    2ca0:	f89d 0000 	ldrb.w	r0, [sp]
    2ca4:	b188      	cbz	r0, 2cca <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    2ca6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2caa:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2cae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2cb2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2cb6:	6840      	ldr	r0, [r0, #4]
    2cb8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2cbc:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2cc0:	b001      	add	sp, #4
    2cc2:	2106      	movs	r1, #6
    2cc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2cc8:	4710      	bx	r2
    2cca:	f44f 6105 	mov.w	r1, #2128	; 0x850
    2cce:	2070      	movs	r0, #112	; 0x70
    2cd0:	f002 f936 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cd4:	f7ff fc96 	bl	2604 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x604>
    2cd8:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    2cdc:	f002 f8b8 	bl	4e50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2ce0:	b120      	cbz	r0, 2cec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    2ce2:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2ce6:	b130      	cbz	r0, 2cf6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    2ce8:	e009      	b.n	2cfe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    2cea:	e04a      	b.n	2d82 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    2cec:	f640 015e 	movw	r1, #2142	; 0x85e
    2cf0:	2070      	movs	r0, #112	; 0x70
    2cf2:	f002 f925 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cf6:	f001 ff9b 	bl	4c30 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2cfa:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2cfe:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2d02:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2d06:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2d0a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2d0e:	6840      	ldr	r0, [r0, #4]
    2d10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2d14:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2d18:	b001      	add	sp, #4
    2d1a:	2100      	movs	r1, #0
    2d1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2d20:	4710      	bx	r2
    2d22:	f001 fd77 	bl	4814 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2d26:	8ae0      	ldrh	r0, [r4, #22]
    2d28:	b110      	cbz	r0, 2d30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    2d2a:	f002 f891 	bl	4e50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2d2e:	b128      	cbz	r0, 2d3c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    2d30:	f001 fd84 	bl	483c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    2d34:	2800      	cmp	r0, #0
    2d36:	bf18      	it	ne
    2d38:	7766      	strbne	r6, [r4, #29]
    2d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d3c:	f640 0168 	movw	r1, #2152	; 0x868
    2d40:	2070      	movs	r0, #112	; 0x70
    2d42:	f002 f8fd 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d46:	4813      	ldr	r0, [pc, #76]	; (2d94 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2d48:	6006      	str	r6, [r0, #0]
    2d4a:	6890      	ldr	r0, [r2, #8]
    2d4c:	6006      	str	r6, [r0, #0]
    2d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d50:	7810      	ldrb	r0, [r2, #0]
    2d52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2d56:	f002 b9c7 	b.w	50e8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2d5a:	f7ff fc53 	bl	2604 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x604>
    2d5e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2d62:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2d66:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2d6a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2d6e:	6840      	ldr	r0, [r0, #4]
    2d70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2d74:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2d78:	b001      	add	sp, #4
    2d7a:	2105      	movs	r1, #5
    2d7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2d80:	4710      	bx	r2
    2d82:	f640 017b 	movw	r1, #2171	; 0x87b
    2d86:	2070      	movs	r0, #112	; 0x70
    2d88:	f002 f8da 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d8c:	20000dd4 	.word	0x20000dd4
    2d90:	2000003c 	.word	0x2000003c
    2d94:	40000508 	.word	0x40000508

00002d98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2d98:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d9c:	4682      	mov	sl, r0
    2d9e:	48f0      	ldr	r0, [pc, #960]	; (3160 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    2da0:	b095      	sub	sp, #84	; 0x54
    2da2:	6800      	ldr	r0, [r0, #0]
    2da4:	4def      	ldr	r5, [pc, #956]	; (3164 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    2da6:	05c0      	lsls	r0, r0, #23
    2da8:	0dc0      	lsrs	r0, r0, #23
    2daa:	d00e      	beq.n	2dca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2dac:	3810      	subs	r0, #16
    2dae:	b240      	sxtb	r0, r0
    2db0:	2800      	cmp	r0, #0
    2db2:	bfb8      	it	lt
    2db4:	f000 000f 	andlt.w	r0, r0, #15
    2db8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2dbc:	bfac      	ite	ge
    2dbe:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2dc2:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2dc6:	0940      	lsrs	r0, r0, #5
    2dc8:	d00d      	beq.n	2de6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    2dca:	9816      	ldr	r0, [sp, #88]	; 0x58
    2dcc:	f04f 0b00 	mov.w	fp, #0
    2dd0:	7800      	ldrb	r0, [r0, #0]
    2dd2:	2800      	cmp	r0, #0
    2dd4:	bf18      	it	ne
    2dd6:	2801      	cmpne	r0, #1
    2dd8:	d018      	beq.n	2e0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2dda:	f240 7104 	movw	r1, #1796	; 0x704
    2dde:	f04f 0070 	mov.w	r0, #112	; 0x70
    2de2:	f002 f8ad 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2de6:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2dea:	f04f 0b01 	mov.w	fp, #1
    2dee:	2820      	cmp	r0, #32
    2df0:	d007      	beq.n	2e02 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    2df2:	9816      	ldr	r0, [sp, #88]	; 0x58
    2df4:	7800      	ldrb	r0, [r0, #0]
    2df6:	b148      	cbz	r0, 2e0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2df8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    2dfc:	2070      	movs	r0, #112	; 0x70
    2dfe:	f002 f89f 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e02:	f240 61fd 	movw	r1, #1789	; 0x6fd
    2e06:	2070      	movs	r0, #112	; 0x70
    2e08:	f002 f89a 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e0c:	4cd6      	ldr	r4, [pc, #856]	; (3168 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    2e0e:	b124      	cbz	r4, 2e1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2e10:	2100      	movs	r1, #0
    2e12:	f240 7007 	movw	r0, #1799	; 0x707
    2e16:	f3af 8000 	nop.w
    2e1a:	2000      	movs	r0, #0
    2e1c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    2e20:	49d2      	ldr	r1, [pc, #840]	; (316c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    2e22:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    2e26:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2e2a:	f04f 0901 	mov.w	r9, #1
    2e2e:	9000      	str	r0, [sp, #0]
    2e30:	b124      	cbz	r4, 2e3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2e32:	2100      	movs	r1, #0
    2e34:	f240 7012 	movw	r0, #1810	; 0x712
    2e38:	f3af 8000 	nop.w
    2e3c:	f1b9 0f00 	cmp.w	r9, #0
    2e40:	d00a      	beq.n	2e58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    2e42:	bf00      	nop
    2e44:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    2e48:	f04f 0800 	mov.w	r8, #0
    2e4c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2e50:	f1bb 0f00 	cmp.w	fp, #0
    2e54:	d007      	beq.n	2e66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    2e56:	e038      	b.n	2eca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    2e58:	48c5      	ldr	r0, [pc, #788]	; (3170 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    2e5a:	2800      	cmp	r0, #0
    2e5c:	bf18      	it	ne
    2e5e:	f3af 8000 	nopne.w
    2e62:	b662      	cpsie	i
    2e64:	e7ee      	b.n	2e44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    2e66:	4637      	mov	r7, r6
    2e68:	2001      	movs	r0, #1
    2e6a:	ea20 0607 	bic.w	r6, r0, r7
    2e6e:	48c1      	ldr	r0, [pc, #772]	; (3174 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    2e70:	2240      	movs	r2, #64	; 0x40
    2e72:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2e76:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2e7a:	f00a fcb5 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2e7e:	b124      	cbz	r4, 2e8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    2e80:	2100      	movs	r1, #0
    2e82:	f240 502f 	movw	r0, #1327	; 0x52f
    2e86:	f3af 8000 	nop.w
    2e8a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    2e8e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2e92:	4429      	add	r1, r5
    2e94:	4428      	add	r0, r5
    2e96:	8c0a      	ldrh	r2, [r1, #32]
    2e98:	8402      	strh	r2, [r0, #32]
    2e9a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2e9e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2ea2:	b124      	cbz	r4, 2eae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    2ea4:	2100      	movs	r1, #0
    2ea6:	f240 5033 	movw	r0, #1331	; 0x533
    2eaa:	f3af 8000 	nop.w
    2eae:	b124      	cbz	r4, 2eba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    2eb0:	2100      	movs	r1, #0
    2eb2:	f240 701c 	movw	r0, #1820	; 0x71c
    2eb6:	f3af 8000 	nop.w
    2eba:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2ebe:	f88d 0008 	strb.w	r0, [sp, #8]
    2ec2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2ec6:	2800      	cmp	r0, #0
    2ec8:	d1b2      	bne.n	2e30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2eca:	b124      	cbz	r4, 2ed6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    2ecc:	2100      	movs	r1, #0
    2ece:	f240 7026 	movw	r0, #1830	; 0x726
    2ed2:	f3af 8000 	nop.w
    2ed6:	a802      	add	r0, sp, #8
    2ed8:	f001 f91a 	bl	4110 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2ee0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    2ee4:	4633      	mov	r3, r6
    2ee6:	aa09      	add	r2, sp, #36	; 0x24
    2ee8:	a80e      	add	r0, sp, #56	; 0x38
    2eea:	9916      	ldr	r1, [sp, #88]	; 0x58
    2eec:	f7ff faae 	bl	244c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44c>
    2ef0:	b124      	cbz	r4, 2efc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    2ef2:	2100      	movs	r1, #0
    2ef4:	f240 702d 	movw	r0, #1837	; 0x72d
    2ef8:	f3af 8000 	nop.w
    2efc:	4a9d      	ldr	r2, [pc, #628]	; (3174 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    2efe:	990e      	ldr	r1, [sp, #56]	; 0x38
    2f00:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    2f04:	a809      	add	r0, sp, #36	; 0x24
    2f06:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    2f0a:	2a01      	cmp	r2, #1
    2f0c:	bf18      	it	ne
    2f0e:	2a02      	cmpne	r2, #2
    2f10:	d138      	bne.n	2f84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    2f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2f16:	eba2 0201 	sub.w	r2, r2, r1
    2f1a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2f1e:	eba3 0101 	sub.w	r1, r3, r1
    2f22:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    2f26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f2a:	2a02      	cmp	r2, #2
    2f2c:	d364      	bcc.n	2ff8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    2f2e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    2f32:	bf98      	it	ls
    2f34:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2f38:	d85e      	bhi.n	2ff8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    2f3a:	f04f 0801 	mov.w	r8, #1
    2f3e:	ab14      	add	r3, sp, #80	; 0x50
    2f40:	aa13      	add	r2, sp, #76	; 0x4c
    2f42:	4631      	mov	r1, r6
    2f44:	f7fe ff20 	bl	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    2f48:	2800      	cmp	r0, #0
    2f4a:	d05d      	beq.n	3008 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    2f4c:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    2f50:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    2f54:	4633      	mov	r3, r6
    2f56:	428a      	cmp	r2, r1
    2f58:	d05a      	beq.n	3010 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    2f5a:	2005      	movs	r0, #5
    2f5c:	f7fe fd26 	bl	19ac <MPSL_IRQ_RADIO_Handler+0x40>
    2f60:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2f64:	7048      	strb	r0, [r1, #1]
    2f66:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2f6a:	2820      	cmp	r0, #32
    2f6c:	bf1c      	itt	ne
    2f6e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2f72:	f880 a001 	strbne.w	sl, [r0, #1]
    2f76:	d057      	beq.n	3028 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    2f78:	4632      	mov	r2, r6
    2f7a:	4651      	mov	r1, sl
    2f7c:	f05f 0003 	movs.w	r0, #3
    2f80:	f7ff fc2c 	bl	27dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7dc>
    2f84:	b124      	cbz	r4, 2f90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    2f86:	2100      	movs	r1, #0
    2f88:	f240 7032 	movw	r0, #1842	; 0x732
    2f8c:	f3af 8000 	nop.w
    2f90:	4879      	ldr	r0, [pc, #484]	; (3178 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    2f92:	2800      	cmp	r0, #0
    2f94:	bf18      	it	ne
    2f96:	f3af 8000 	nopne.w
    2f9a:	f3ef 8910 	mrs	r9, PRIMASK
    2f9e:	b672      	cpsid	i
    2fa0:	b124      	cbz	r4, 2fac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    2fa2:	2100      	movs	r1, #0
    2fa4:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    2fa8:	f3af 8000 	nop.w
    2fac:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2fb0:	f88d 0008 	strb.w	r0, [sp, #8]
    2fb4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2fb8:	2800      	cmp	r0, #0
    2fba:	f47f af39 	bne.w	2e30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    2fbe:	b124      	cbz	r4, 2fca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    2fc0:	2100      	movs	r1, #0
    2fc2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
    2fc6:	f3af 8000 	nop.w
    2fca:	af09      	add	r7, sp, #36	; 0x24
    2fcc:	9800      	ldr	r0, [sp, #0]
    2fce:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    2fd2:	f100 0708 	add.w	r7, r0, #8
    2fd6:	f1b8 0f00 	cmp.w	r8, #0
    2fda:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    2fde:	990d      	ldr	r1, [sp, #52]	; 0x34
    2fe0:	6181      	str	r1, [r0, #24]
    2fe2:	d053      	beq.n	308c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    2fe4:	b124      	cbz	r4, 2ff0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2fe6:	2100      	movs	r1, #0
    2fe8:	f240 704d 	movw	r0, #1869	; 0x74d
    2fec:	f3af 8000 	nop.w
    2ff0:	f1bb 0f00 	cmp.w	fp, #0
    2ff4:	d13a      	bne.n	306c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    2ff6:	e01f      	b.n	3038 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    2ff8:	4632      	mov	r2, r6
    2ffa:	4651      	mov	r1, sl
    2ffc:	2004      	movs	r0, #4
    2ffe:	f7ff fbed 	bl	27dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7dc>
    3002:	f04f 0801 	mov.w	r8, #1
    3006:	e7bd      	b.n	2f84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    3008:	4632      	mov	r2, r6
    300a:	4651      	mov	r1, sl
    300c:	2004      	movs	r0, #4
    300e:	e7b7      	b.n	2f80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    3010:	2920      	cmp	r1, #32
    3012:	bf19      	ittee	ne
    3014:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    3018:	7840      	ldrbne	r0, [r0, #1]
    301a:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    301e:	4428      	addeq	r0, r5
    3020:	bf08      	it	eq
    3022:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    3026:	e79b      	b.n	2f60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    3028:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    302c:	4429      	add	r1, r5
    302e:	f881 a020 	strb.w	sl, [r1, #32]
    3032:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    3036:	e79f      	b.n	2f78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    3038:	9811      	ldr	r0, [sp, #68]	; 0x44
    303a:	f010 0fff 	tst.w	r0, #255	; 0xff
    303e:	d015      	beq.n	306c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    3040:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    3044:	2820      	cmp	r0, #32
    3046:	d111      	bne.n	306c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    3048:	b124      	cbz	r4, 3054 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    304a:	2100      	movs	r1, #0
    304c:	f240 7052 	movw	r0, #1874	; 0x752
    3050:	f3af 8000 	nop.w
    3054:	4632      	mov	r2, r6
    3056:	2102      	movs	r1, #2
    3058:	980e      	ldr	r0, [sp, #56]	; 0x38
    305a:	f7ff fbf1 	bl	2840 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x840>
    305e:	9010      	str	r0, [sp, #64]	; 0x40
    3060:	b920      	cbnz	r0, 306c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    3062:	9816      	ldr	r0, [sp, #88]	; 0x58
    3064:	7800      	ldrb	r0, [r0, #0]
    3066:	b1f0      	cbz	r0, 30a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    3068:	2801      	cmp	r0, #1
    306a:	d02b      	beq.n	30c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    306c:	b124      	cbz	r4, 3078 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e0>
    306e:	2100      	movs	r1, #0
    3070:	f240 706f 	movw	r0, #1903	; 0x76f
    3074:	f3af 8000 	nop.w
    3078:	20ff      	movs	r0, #255	; 0xff
    307a:	f1bb 0f00 	cmp.w	fp, #0
    307e:	bf18      	it	ne
    3080:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    3084:	d027      	beq.n	30d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    3086:	bf00      	nop
    3088:	f04f 0801 	mov.w	r8, #1
    308c:	b124      	cbz	r4, 3098 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x300>
    308e:	2100      	movs	r1, #0
    3090:	f44f 60f0 	mov.w	r0, #1920	; 0x780
    3094:	f3af 8000 	nop.w
    3098:	9810      	ldr	r0, [sp, #64]	; 0x40
    309a:	4e38      	ldr	r6, [pc, #224]	; (317c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    309c:	2802      	cmp	r0, #2
    309e:	d023      	beq.n	30e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>
    30a0:	2801      	cmp	r0, #1
    30a2:	d029      	beq.n	30f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>
    30a4:	e02d      	b.n	3102 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    30a6:	b124      	cbz	r4, 30b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31a>
    30a8:	2100      	movs	r1, #0
    30aa:	f240 705a 	movw	r0, #1882	; 0x75a
    30ae:	f3af 8000 	nop.w
    30b2:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    30b6:	4651      	mov	r1, sl
    30b8:	2004      	movs	r0, #4
    30ba:	f7ff fb8f 	bl	27dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7dc>
    30be:	f04f 0801 	mov.w	r8, #1
    30c2:	e7e3      	b.n	308c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    30c4:	2c00      	cmp	r4, #0
    30c6:	f43f aeb3 	beq.w	2e30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    30ca:	2100      	movs	r1, #0
    30cc:	f240 7065 	movw	r0, #1893	; 0x765
    30d0:	f3af 8000 	nop.w
    30d4:	e6ac      	b.n	2e30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    30d6:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    30da:	2101      	movs	r1, #1
    30dc:	4391      	bics	r1, r2
    30de:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    30e2:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    30e6:	e7cf      	b.n	3088 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    30e8:	68a8      	ldr	r0, [r5, #8]
    30ea:	990e      	ldr	r1, [sp, #56]	; 0x38
    30ec:	1a40      	subs	r0, r0, r1
    30ee:	f00a fa21 	bl	d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    30f2:	6871      	ldr	r1, [r6, #4]
    30f4:	b921      	cbnz	r1, 3100 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    30f6:	e004      	b.n	3102 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    30f8:	6871      	ldr	r1, [r6, #4]
    30fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    30fe:	b101      	cbz	r1, 3102 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    3100:	4788      	blx	r1
    3102:	f1b9 0f00 	cmp.w	r9, #0
    3106:	d024      	beq.n	3152 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    3108:	b124      	cbz	r4, 3114 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>
    310a:	2100      	movs	r1, #0
    310c:	f44f 60f2 	mov.w	r0, #1936	; 0x790
    3110:	f3af 8000 	nop.w
    3114:	f1b8 0f00 	cmp.w	r8, #0
    3118:	d011      	beq.n	313e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    311a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    311e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3122:	4428      	add	r0, r5
    3124:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    3128:	2820      	cmp	r0, #32
    312a:	d008      	beq.n	313e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    312c:	b124      	cbz	r4, 3138 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    312e:	2100      	movs	r1, #0
    3130:	f240 7097 	movw	r0, #1943	; 0x797
    3134:	f3af 8000 	nop.w
    3138:	7870      	ldrb	r0, [r6, #1]
    313a:	f001 ffd5 	bl	50e8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    313e:	b124      	cbz	r4, 314a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    3140:	2100      	movs	r1, #0
    3142:	f240 709c 	movw	r0, #1948	; 0x79c
    3146:	f3af 8000 	nop.w
    314a:	b017      	add	sp, #92	; 0x5c
    314c:	4640      	mov	r0, r8
    314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3152:	4807      	ldr	r0, [pc, #28]	; (3170 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    3154:	2800      	cmp	r0, #0
    3156:	bf18      	it	ne
    3158:	f3af 8000 	nopne.w
    315c:	b662      	cpsie	i
    315e:	e7d3      	b.n	3108 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    3160:	e000ed04 	.word	0xe000ed04
    3164:	200011d4 	.word	0x200011d4
    3168:	00000000 	.word	0x00000000
    316c:	20000dd4 	.word	0x20000dd4
    3170:	00000000 	.word	0x00000000
    3174:	20001154 	.word	0x20001154
    3178:	00000000 	.word	0x00000000
    317c:	2000003c 	.word	0x2000003c

00003180 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    3180:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3184:	48c9      	ldr	r0, [pc, #804]	; (34ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x32c>)
    3186:	b08a      	sub	sp, #40	; 0x28
    3188:	6800      	ldr	r0, [r0, #0]
    318a:	05c0      	lsls	r0, r0, #23
    318c:	0dc0      	lsrs	r0, r0, #23
    318e:	d011      	beq.n	31b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    3190:	3810      	subs	r0, #16
    3192:	b240      	sxtb	r0, r0
    3194:	2800      	cmp	r0, #0
    3196:	bfb8      	it	lt
    3198:	f000 000f 	andlt.w	r0, r0, #15
    319c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    31a0:	bfac      	ite	ge
    31a2:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    31a6:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    31aa:	0940      	lsrs	r0, r0, #5
    31ac:	bf08      	it	eq
    31ae:	f04f 0b01 	moveq.w	fp, #1
    31b2:	d001      	beq.n	31b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    31b4:	f04f 0b00 	mov.w	fp, #0
    31b8:	980a      	ldr	r0, [sp, #40]	; 0x28
    31ba:	7800      	ldrb	r0, [r0, #0]
    31bc:	2800      	cmp	r0, #0
    31be:	bf1e      	ittt	ne
    31c0:	2000      	movne	r0, #0
    31c2:	b00b      	addne	sp, #44	; 0x2c
    31c4:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31c8:	f04f 0a00 	mov.w	sl, #0
    31cc:	4db8      	ldr	r5, [pc, #736]	; (34b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x330>)
    31ce:	4cb9      	ldr	r4, [pc, #740]	; (34b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x334>)
    31d0:	46d1      	mov	r9, sl
    31d2:	b125      	cbz	r5, 31de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    31d4:	2100      	movs	r1, #0
    31d6:	f240 50b9 	movw	r0, #1465	; 0x5b9
    31da:	f3af 8000 	nop.w
    31de:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    31e2:	f884 9029 	strb.w	r9, [r4, #41]	; 0x29
    31e6:	f04f 0800 	mov.w	r8, #0
    31ea:	b125      	cbz	r5, 31f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    31ec:	2100      	movs	r1, #0
    31ee:	f240 50be 	movw	r0, #1470	; 0x5be
    31f2:	f3af 8000 	nop.w
    31f6:	f1bb 0f00 	cmp.w	fp, #0
    31fa:	d123      	bne.n	3244 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    31fc:	4637      	mov	r7, r6
    31fe:	2001      	movs	r0, #1
    3200:	ea20 0607 	bic.w	r6, r0, r7
    3204:	48ac      	ldr	r0, [pc, #688]	; (34b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x338>)
    3206:	2240      	movs	r2, #64	; 0x40
    3208:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    320c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    3210:	f00a faea 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3214:	b125      	cbz	r5, 3220 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    3216:	2100      	movs	r1, #0
    3218:	f240 502f 	movw	r0, #1327	; 0x52f
    321c:	f3af 8000 	nop.w
    3220:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    3224:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    3228:	4421      	add	r1, r4
    322a:	4420      	add	r0, r4
    322c:	8c0a      	ldrh	r2, [r1, #32]
    322e:	8402      	strh	r2, [r0, #32]
    3230:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    3234:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    3238:	b125      	cbz	r5, 3244 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    323a:	2100      	movs	r1, #0
    323c:	f240 5033 	movw	r0, #1331	; 0x533
    3240:	f3af 8000 	nop.w
    3244:	b125      	cbz	r5, 3250 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd0>
    3246:	2100      	movs	r1, #0
    3248:	f240 50c6 	movw	r0, #1478	; 0x5c6
    324c:	f3af 8000 	nop.w
    3250:	a808      	add	r0, sp, #32
    3252:	f000 ff5d 	bl	4110 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3256:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    325a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    325e:	4633      	mov	r3, r6
    3260:	466a      	mov	r2, sp
    3262:	a806      	add	r0, sp, #24
    3264:	990a      	ldr	r1, [sp, #40]	; 0x28
    3266:	f7ff f8f1 	bl	244c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x44c>
    326a:	b125      	cbz	r5, 3276 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xf6>
    326c:	2100      	movs	r1, #0
    326e:	f240 50cc 	movw	r0, #1484	; 0x5cc
    3272:	f3af 8000 	nop.w
    3276:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    327a:	2820      	cmp	r0, #32
    327c:	d019      	beq.n	32b2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    327e:	68e0      	ldr	r0, [r4, #12]
    3280:	9900      	ldr	r1, [sp, #0]
    3282:	1a09      	subs	r1, r1, r0
    3284:	0209      	lsls	r1, r1, #8
    3286:	17ca      	asrs	r2, r1, #31
    3288:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    328c:	1209      	asrs	r1, r1, #8
    328e:	d510      	bpl.n	32b2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x132>
    3290:	e9dd 2100 	ldrd	r2, r1, [sp]
    3294:	1a89      	subs	r1, r1, r2
    3296:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    329a:	4408      	add	r0, r1
    329c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    32a0:	e9cd 3000 	strd	r3, r0, [sp]
    32a4:	4293      	cmp	r3, r2
    32a6:	d202      	bcs.n	32ae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    32a8:	9802      	ldr	r0, [sp, #8]
    32aa:	1c40      	adds	r0, r0, #1
    32ac:	9002      	str	r0, [sp, #8]
    32ae:	f04f 0801 	mov.w	r8, #1
    32b2:	b14d      	cbz	r5, 32c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x148>
    32b4:	2100      	movs	r1, #0
    32b6:	f240 50df 	movw	r0, #1503	; 0x5df
    32ba:	f3af 8000 	nop.w
    32be:	2100      	movs	r1, #0
    32c0:	f240 50e5 	movw	r0, #1509	; 0x5e5
    32c4:	f3af 8000 	nop.w
    32c8:	9900      	ldr	r1, [sp, #0]
    32ca:	9806      	ldr	r0, [sp, #24]
    32cc:	9a01      	ldr	r2, [sp, #4]
    32ce:	1a09      	subs	r1, r1, r0
    32d0:	1a10      	subs	r0, r2, r0
    32d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    32d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    32da:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    32de:	bf98      	it	ls
    32e0:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    32e4:	d803      	bhi.n	32ee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    32e6:	f1bb 0f00 	cmp.w	fp, #0
    32ea:	d10c      	bne.n	3306 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x186>
    32ec:	e003      	b.n	32f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x176>
    32ee:	f1bb 0f00 	cmp.w	fp, #0
    32f2:	d039      	beq.n	3368 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e8>
    32f4:	e0c0      	b.n	3478 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    32f6:	4633      	mov	r3, r6
    32f8:	4669      	mov	r1, sp
    32fa:	4870      	ldr	r0, [pc, #448]	; (34bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    32fc:	9a06      	ldr	r2, [sp, #24]
    32fe:	f7fe fb91 	bl	1a24 <MPSL_IRQ_RADIO_Handler+0xb8>
    3302:	ea48 0800 	orr.w	r8, r8, r0
    3306:	f1b8 0f00 	cmp.w	r8, #0
    330a:	d023      	beq.n	3354 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d4>
    330c:	9800      	ldr	r0, [sp, #0]
    330e:	f00a f911 	bl	d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3312:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    3316:	f89d 200c 	ldrb.w	r2, [sp, #12]
    331a:	4b69      	ldr	r3, [pc, #420]	; (34c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    331c:	4411      	add	r1, r2
    331e:	1c49      	adds	r1, r1, #1
    3320:	1842      	adds	r2, r0, r1
    3322:	4298      	cmp	r0, r3
    3324:	d856      	bhi.n	33d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    3326:	4865      	ldr	r0, [pc, #404]	; (34bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    3328:	4281      	cmp	r1, r0
    332a:	dc7c      	bgt.n	3426 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a6>
    332c:	4240      	negs	r0, r0
    332e:	4281      	cmp	r1, r0
    3330:	db7a      	blt.n	3428 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>
    3332:	1c58      	adds	r0, r3, #1
    3334:	4290      	cmp	r0, r2
    3336:	bfdc      	itt	le
    3338:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    333c:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    3340:	dd05      	ble.n	334e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ce>
    3342:	2a00      	cmp	r2, #0
    3344:	bfbc      	itt	lt
    3346:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    334a:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    334e:	980a      	ldr	r0, [sp, #40]	; 0x28
    3350:	e9c0 2904 	strd	r2, r9, [r0, #16]
    3354:	f04f 0a01 	mov.w	sl, #1
    3358:	2d00      	cmp	r5, #0
    335a:	d07c      	beq.n	3456 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d6>
    335c:	2100      	movs	r1, #0
    335e:	f44f 60bf 	mov.w	r0, #1528	; 0x5f8
    3362:	f3af 8000 	nop.w
    3366:	e087      	b.n	3478 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    3368:	9807      	ldr	r0, [sp, #28]
    336a:	9002      	str	r0, [sp, #8]
    336c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    3370:	aa08      	add	r2, sp, #32
    3372:	a905      	add	r1, sp, #20
    3374:	f8dd 8018 	ldr.w	r8, [sp, #24]
    3378:	f000 fd5a 	bl	3e30 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    337c:	f001 fa68 	bl	4850 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    3380:	f000 fd3a 	bl	3df8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    3384:	4607      	mov	r7, r0
    3386:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    338a:	2820      	cmp	r0, #32
    338c:	d027      	beq.n	33de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    338e:	68e0      	ldr	r0, [r4, #12]
    3390:	1d40      	adds	r0, r0, #5
    3392:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3396:	bf00      	nop
    3398:	e9dd 2100 	ldrd	r2, r1, [sp]
    339c:	1a89      	subs	r1, r1, r2
    339e:	9000      	str	r0, [sp, #0]
    33a0:	4408      	add	r0, r1
    33a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33a6:	9001      	str	r0, [sp, #4]
    33a8:	9800      	ldr	r0, [sp, #0]
    33aa:	4540      	cmp	r0, r8
    33ac:	d202      	bcs.n	33b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    33ae:	9802      	ldr	r0, [sp, #8]
    33b0:	1c40      	adds	r0, r0, #1
    33b2:	9002      	str	r0, [sp, #8]
    33b4:	201f      	movs	r0, #31
    33b6:	f88d 000c 	strb.w	r0, [sp, #12]
    33ba:	9800      	ldr	r0, [sp, #0]
    33bc:	f00a f8ba 	bl	d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    33c0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    33c4:	f89d 200c 	ldrb.w	r2, [sp, #12]
    33c8:	4b3d      	ldr	r3, [pc, #244]	; (34c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x340>)
    33ca:	4411      	add	r1, r2
    33cc:	1c49      	adds	r1, r1, #1
    33ce:	1842      	adds	r2, r0, r1
    33d0:	4298      	cmp	r0, r3
    33d2:	d92a      	bls.n	342a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2aa>
    33d4:	f240 516f 	movw	r1, #1391	; 0x56f
    33d8:	2070      	movs	r0, #112	; 0x70
    33da:	f001 fdb1 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33de:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    33e2:	f108 0609 	add.w	r6, r8, #9
    33e6:	b1b0      	cbz	r0, 3416 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    33e8:	f001 fd32 	bl	4e50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    33ec:	b998      	cbnz	r0, 3416 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x296>
    33ee:	f001 fbfd 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    33f2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    33f6:	bf08      	it	eq
    33f8:	200d      	moveq	r0, #13
    33fa:	d00b      	beq.n	3414 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    33fc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    3400:	3856      	subs	r0, #86	; 0x56
    3402:	bf08      	it	eq
    3404:	201c      	moveq	r0, #28
    3406:	d005      	beq.n	3414 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x294>
    3408:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    340c:	389f      	subs	r0, #159	; 0x9f
    340e:	bf14      	ite	ne
    3410:	4648      	movne	r0, r9
    3412:	2032      	moveq	r0, #50	; 0x32
    3414:	4406      	add	r6, r0
    3416:	9805      	ldr	r0, [sp, #20]
    3418:	4287      	cmp	r7, r0
    341a:	bf84      	itt	hi
    341c:	1a38      	subhi	r0, r7, r0
    341e:	4406      	addhi	r6, r0
    3420:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    3424:	e7b8      	b.n	3398 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x218>
    3426:	e003      	b.n	3430 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>
    3428:	e00a      	b.n	3440 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>
    342a:	4824      	ldr	r0, [pc, #144]	; (34bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>)
    342c:	4281      	cmp	r1, r0
    342e:	dd04      	ble.n	343a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ba>
    3430:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    3434:	2070      	movs	r0, #112	; 0x70
    3436:	f001 fd83 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    343a:	4822      	ldr	r0, [pc, #136]	; (34c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x344>)
    343c:	4281      	cmp	r1, r0
    343e:	da04      	bge.n	344a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ca>
    3440:	f240 5171 	movw	r1, #1393	; 0x571
    3444:	2070      	movs	r0, #112	; 0x70
    3446:	f001 fd7b 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    344a:	481f      	ldr	r0, [pc, #124]	; (34c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    344c:	4290      	cmp	r0, r2
    344e:	bfd8      	it	le
    3450:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    3454:	e000      	b.n	3458 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2d8>
    3456:	e00f      	b.n	3478 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f8>
    3458:	bfd8      	it	le
    345a:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    345e:	dd05      	ble.n	346c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ec>
    3460:	2a00      	cmp	r2, #0
    3462:	bfbc      	itt	lt
    3464:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    3468:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    346c:	980a      	ldr	r0, [sp, #40]	; 0x28
    346e:	f04f 0a01 	mov.w	sl, #1
    3472:	46d0      	mov	r8, sl
    3474:	e9c0 2904 	strd	r2, r9, [r0, #16]
    3478:	ea1a 0f08 	tst.w	sl, r8
    347c:	d009      	beq.n	3492 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x312>
    347e:	980a      	ldr	r0, [sp, #40]	; 0x28
    3480:	4911      	ldr	r1, [pc, #68]	; (34c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x348>)
    3482:	9b02      	ldr	r3, [sp, #8]
    3484:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
    3488:	fbe3 2001 	umlal	r2, r0, r3, r1
    348c:	990a      	ldr	r1, [sp, #40]	; 0x28
    348e:	e9c1 2004 	strd	r2, r0, [r1, #16]
    3492:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3496:	f88d 0014 	strb.w	r0, [sp, #20]
    349a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    349e:	2800      	cmp	r0, #0
    34a0:	f47f ae97 	bne.w	31d2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    34a4:	b00b      	add	sp, #44	; 0x2c
    34a6:	4650      	mov	r0, sl
    34a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34ac:	e000ed04 	.word	0xe000ed04
    34b0:	00000000 	.word	0x00000000
    34b4:	200011d4 	.word	0x200011d4
    34b8:	20001154 	.word	0x20001154
    34bc:	0f424000 	.word	0x0f424000
    34c0:	1e847fff 	.word	0x1e847fff
    34c4:	f0bdc000 	.word	0xf0bdc000
    34c8:	1e848000 	.word	0x1e848000

000034cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    34cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34d0:	4d94      	ldr	r5, [pc, #592]	; (3724 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    34d2:	b08c      	sub	sp, #48	; 0x30
    34d4:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    34d8:	2000      	movs	r0, #0
    34da:	9009      	str	r0, [sp, #36]	; 0x24
    34dc:	9006      	str	r0, [sp, #24]
    34de:	2001      	movs	r0, #1
    34e0:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    34e4:	f04f 0800 	mov.w	r8, #0
    34e8:	4607      	mov	r7, r0
    34ea:	4c8f      	ldr	r4, [pc, #572]	; (3728 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    34ec:	f8cd 001c 	str.w	r0, [sp, #28]
    34f0:	f000 fe08 	bl	4104 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    34f4:	9008      	str	r0, [sp, #32]
    34f6:	b124      	cbz	r4, 3502 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x36>
    34f8:	2100      	movs	r1, #0
    34fa:	f44f 60f6 	mov.w	r0, #1968	; 0x7b0
    34fe:	f3af 8000 	nop.w
    3502:	9807      	ldr	r0, [sp, #28]
    3504:	2800      	cmp	r0, #0
    3506:	d03c      	beq.n	3582 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb6>
    3508:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    350c:	b124      	cbz	r4, 3518 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x4c>
    350e:	2100      	movs	r1, #0
    3510:	f240 70b5 	movw	r0, #1973	; 0x7b5
    3514:	f3af 8000 	nop.w
    3518:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    351c:	2240      	movs	r2, #64	; 0x40
    351e:	ea27 060a 	bic.w	r6, r7, sl
    3522:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    3526:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    352a:	4683      	mov	fp, r0
    352c:	f00a f95c 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3530:	b124      	cbz	r4, 353c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x70>
    3532:	2100      	movs	r1, #0
    3534:	f240 502f 	movw	r0, #1327	; 0x52f
    3538:	f3af 8000 	nop.w
    353c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    3540:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    3544:	4428      	add	r0, r5
    3546:	4429      	add	r1, r5
    3548:	9000      	str	r0, [sp, #0]
    354a:	8c0a      	ldrh	r2, [r1, #32]
    354c:	8402      	strh	r2, [r0, #32]
    354e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    3552:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    3556:	b124      	cbz	r4, 3562 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    3558:	2100      	movs	r1, #0
    355a:	f240 5033 	movw	r0, #1331	; 0x533
    355e:	f3af 8000 	nop.w
    3562:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    3566:	f88d 0008 	strb.w	r0, [sp, #8]
    356a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    356e:	b178      	cbz	r0, 3590 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc4>
    3570:	2c00      	cmp	r4, #0
    3572:	bf1c      	itt	ne
    3574:	2100      	movne	r1, #0
    3576:	f240 70bb 	movwne	r0, #1979	; 0x7bb
    357a:	d0b9      	beq.n	34f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    357c:	f3af 8000 	nop.w
    3580:	e7b6      	b.n	34f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    3582:	486a      	ldr	r0, [pc, #424]	; (372c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    3584:	2800      	cmp	r0, #0
    3586:	bf18      	it	ne
    3588:	f3af 8000 	nopne.w
    358c:	b662      	cpsie	i
    358e:	e7bb      	b.n	3508 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    3590:	b124      	cbz	r4, 359c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xd0>
    3592:	2100      	movs	r1, #0
    3594:	f240 70bf 	movw	r0, #1983	; 0x7bf
    3598:	f3af 8000 	nop.w
    359c:	980c      	ldr	r0, [sp, #48]	; 0x30
    359e:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    35a2:	2803      	cmp	r0, #3
    35a4:	d17d      	bne.n	36a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d6>
    35a6:	9a00      	ldr	r2, [sp, #0]
    35a8:	990c      	ldr	r1, [sp, #48]	; 0x30
    35aa:	f892 0020 	ldrb.w	r0, [r2, #32]
    35ae:	4288      	cmp	r0, r1
    35b0:	bf14      	ite	ne
    35b2:	f04f 0a00 	movne.w	sl, #0
    35b6:	f04f 0a01 	moveq.w	sl, #1
    35ba:	f102 0c20 	add.w	ip, r2, #32
    35be:	4683      	mov	fp, r0
    35c0:	2220      	movs	r2, #32
    35c2:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    35c6:	e003      	b.n	35d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x104>
    35c8:	4602      	mov	r2, r0
    35ca:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    35ce:	7840      	ldrb	r0, [r0, #1]
    35d0:	4288      	cmp	r0, r1
    35d2:	d002      	beq.n	35da <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    35d4:	2820      	cmp	r0, #32
    35d6:	d00a      	beq.n	35ee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    35d8:	e7f6      	b.n	35c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    35da:	2820      	cmp	r0, #32
    35dc:	d007      	beq.n	35ee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x122>
    35de:	4583      	cmp	fp, r0
    35e0:	d107      	bne.n	35f2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    35e2:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    35e6:	7840      	ldrb	r0, [r0, #1]
    35e8:	f88c 0000 	strb.w	r0, [ip]
    35ec:	e007      	b.n	35fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    35ee:	4640      	mov	r0, r8
    35f0:	e00c      	b.n	360c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    35f2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    35f6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    35fa:	7840      	ldrb	r0, [r0, #1]
    35fc:	7048      	strb	r0, [r1, #1]
    35fe:	b124      	cbz	r4, 360a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x13e>
    3600:	2100      	movs	r1, #0
    3602:	f240 409a 	movw	r0, #1178	; 0x49a
    3606:	f3af 8000 	nop.w
    360a:	4638      	mov	r0, r7
    360c:	46c3      	mov	fp, r8
    360e:	ea10 0f0a 	tst.w	r0, sl
    3612:	bf18      	it	ne
    3614:	46bb      	movne	fp, r7
    3616:	2800      	cmp	r0, #0
    3618:	d04f      	beq.n	36ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    361a:	b124      	cbz	r4, 3626 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15a>
    361c:	2100      	movs	r1, #0
    361e:	f240 70c4 	movw	r0, #1988	; 0x7c4
    3622:	f3af 8000 	nop.w
    3626:	4632      	mov	r2, r6
    3628:	2001      	movs	r0, #1
    362a:	990c      	ldr	r1, [sp, #48]	; 0x30
    362c:	f7ff f8d6 	bl	27dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7dc>
    3630:	b124      	cbz	r4, 363c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    3632:	2100      	movs	r1, #0
    3634:	f240 70cd 	movw	r0, #1997	; 0x7cd
    3638:	f3af 8000 	nop.w
    363c:	483c      	ldr	r0, [pc, #240]	; (3730 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x264>)
    363e:	2800      	cmp	r0, #0
    3640:	bf18      	it	ne
    3642:	f3af 8000 	nopne.w
    3646:	f3ef 8010 	mrs	r0, PRIMASK
    364a:	b672      	cpsid	i
    364c:	9007      	str	r0, [sp, #28]
    364e:	b124      	cbz	r4, 365a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    3650:	2100      	movs	r1, #0
    3652:	f240 70d2 	movw	r0, #2002	; 0x7d2
    3656:	f3af 8000 	nop.w
    365a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    365e:	f88d 0008 	strb.w	r0, [sp, #8]
    3662:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3666:	b138      	cbz	r0, 3678 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    3668:	2c00      	cmp	r4, #0
    366a:	bf1c      	itt	ne
    366c:	2100      	movne	r1, #0
    366e:	f240 70d6 	movwne	r0, #2006	; 0x7d6
    3672:	f43f af3d 	beq.w	34f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24>
    3676:	e781      	b.n	357c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    3678:	f1bb 0f00 	cmp.w	fp, #0
    367c:	d00a      	beq.n	3694 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    367e:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    3682:	2820      	cmp	r0, #32
    3684:	d106      	bne.n	3694 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c8>
    3686:	4632      	mov	r2, r6
    3688:	2102      	movs	r1, #2
    368a:	9808      	ldr	r0, [sp, #32]
    368c:	f7ff f8d8 	bl	2840 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x840>
    3690:	9006      	str	r0, [sp, #24]
    3692:	b1f8      	cbz	r0, 36d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>
    3694:	b124      	cbz	r4, 36a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    3696:	2100      	movs	r1, #0
    3698:	f240 70ea 	movw	r0, #2026	; 0x7ea
    369c:	f3af 8000 	nop.w
    36a0:	e000      	b.n	36a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d8>
    36a2:	e00a      	b.n	36ba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ee>
    36a4:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    36a8:	ea27 0000 	bic.w	r0, r7, r0
    36ac:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    36b0:	20ff      	movs	r0, #255	; 0xff
    36b2:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    36b6:	2001      	movs	r0, #1
    36b8:	9009      	str	r0, [sp, #36]	; 0x24
    36ba:	b124      	cbz	r4, 36c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fa>
    36bc:	2100      	movs	r1, #0
    36be:	f240 70f3 	movw	r0, #2035	; 0x7f3
    36c2:	f3af 8000 	nop.w
    36c6:	9806      	ldr	r0, [sp, #24]
    36c8:	4e1a      	ldr	r6, [pc, #104]	; (3734 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x268>)
    36ca:	2802      	cmp	r0, #2
    36cc:	d009      	beq.n	36e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x216>
    36ce:	2801      	cmp	r0, #1
    36d0:	d00f      	beq.n	36f2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    36d2:	e013      	b.n	36fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    36d4:	b194      	cbz	r4, 36fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    36d6:	2100      	movs	r1, #0
    36d8:	f240 70e5 	movw	r0, #2021	; 0x7e5
    36dc:	f3af 8000 	nop.w
    36e0:	e7ec      	b.n	36bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    36e2:	68a9      	ldr	r1, [r5, #8]
    36e4:	9808      	ldr	r0, [sp, #32]
    36e6:	1a08      	subs	r0, r1, r0
    36e8:	f009 ff24 	bl	d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    36ec:	6871      	ldr	r1, [r6, #4]
    36ee:	b921      	cbnz	r1, 36fa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22e>
    36f0:	e004      	b.n	36fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    36f2:	6871      	ldr	r1, [r6, #4]
    36f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36f8:	b101      	cbz	r1, 36fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>
    36fa:	4788      	blx	r1
    36fc:	9807      	ldr	r0, [sp, #28]
    36fe:	b148      	cbz	r0, 3714 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x248>
    3700:	b124      	cbz	r4, 370c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    3702:	2100      	movs	r1, #0
    3704:	f640 0007 	movw	r0, #2055	; 0x807
    3708:	f3af 8000 	nop.w
    370c:	9809      	ldr	r0, [sp, #36]	; 0x24
    370e:	b00d      	add	sp, #52	; 0x34
    3710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3714:	4805      	ldr	r0, [pc, #20]	; (372c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    3716:	2800      	cmp	r0, #0
    3718:	bf18      	it	ne
    371a:	f3af 8000 	nopne.w
    371e:	b662      	cpsie	i
    3720:	e7ee      	b.n	3700 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>
    3722:	0000      	.short	0x0000
    3724:	200011d4 	.word	0x200011d4
	...
    3734:	2000003c 	.word	0x2000003c

00003738 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    3738:	2820      	cmp	r0, #32
    373a:	bf24      	itt	cs
    373c:	2000      	movcs	r0, #0
    373e:	4770      	bxcs	lr
    3740:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3744:	4b03      	ldr	r3, [pc, #12]	; (3754 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    3746:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    374a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    374e:	6042      	str	r2, [r0, #4]
    3750:	2001      	movs	r0, #1
    3752:	4770      	bx	lr
    3754:	20000dd4 	.word	0x20000dd4

00003758 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    3758:	b510      	push	{r4, lr}
    375a:	2820      	cmp	r0, #32
    375c:	d211      	bcs.n	3782 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    375e:	490e      	ldr	r1, [pc, #56]	; (3798 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    3760:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    3764:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    3768:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    376c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    3770:	b13b      	cbz	r3, 3782 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    3772:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    3776:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    377a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    377e:	2a01      	cmp	r2, #1
    3780:	d001      	beq.n	3786 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    3782:	2000      	movs	r0, #0
    3784:	bd10      	pop	{r4, pc}
    3786:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    378a:	4601      	mov	r1, r0
    378c:	2000      	movs	r0, #0
    378e:	f7ff f825 	bl	27dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7dc>
    3792:	2001      	movs	r0, #1
    3794:	bd10      	pop	{r4, pc}
    3796:	0000      	.short	0x0000
    3798:	200011d4 	.word	0x200011d4

0000379c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    379c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37a0:	4e86      	ldr	r6, [pc, #536]	; (39bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    37a2:	4680      	mov	r8, r0
    37a4:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    37a8:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    37ac:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    37b0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    37b4:	2800      	cmp	r0, #0
    37b6:	d071      	beq.n	389c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    37b8:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    37bc:	4d80      	ldr	r5, [pc, #512]	; (39c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    37be:	b125      	cbz	r5, 37ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    37c0:	2100      	movs	r1, #0
    37c2:	f640 3076 	movw	r0, #2934	; 0xb76
    37c6:	f3af 8000 	nop.w
    37ca:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    37ce:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    37d2:	2801      	cmp	r0, #1
    37d4:	d018      	beq.n	3808 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    37d6:	b2c0      	uxtb	r0, r0
    37d8:	2804      	cmp	r0, #4
    37da:	bf1c      	itt	ne
    37dc:	2805      	cmpne	r0, #5
    37de:	2806      	cmpne	r0, #6
    37e0:	d061      	beq.n	38a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    37e2:	b12d      	cbz	r5, 37f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    37e4:	f04f 0100 	mov.w	r1, #0
    37e8:	f640 3082 	movw	r0, #2946	; 0xb82
    37ec:	f3af 8000 	nop.w
    37f0:	f001 fcd0 	bl	5194 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    37f4:	b125      	cbz	r5, 3800 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    37f6:	2100      	movs	r1, #0
    37f8:	f640 3086 	movw	r0, #2950	; 0xb86
    37fc:	f3af 8000 	nop.w
    3800:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    3804:	2801      	cmp	r0, #1
    3806:	d1e6      	bne.n	37d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    3808:	2401      	movs	r4, #1
    380a:	b125      	cbz	r5, 3816 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    380c:	2100      	movs	r1, #0
    380e:	f640 308d 	movw	r0, #2957	; 0xb8d
    3812:	f3af 8000 	nop.w
    3816:	2c00      	cmp	r4, #0
    3818:	d04b      	beq.n	38b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    381a:	2000      	movs	r0, #0
    381c:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    3820:	b125      	cbz	r5, 382c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    3822:	2100      	movs	r1, #0
    3824:	f640 3092 	movw	r0, #2962	; 0xb92
    3828:	f3af 8000 	nop.w
    382c:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    3830:	2001      	movs	r0, #1
    3832:	ea20 090b 	bic.w	r9, r0, fp
    3836:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    383a:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    383e:	2240      	movs	r2, #64	; 0x40
    3840:	f009 ffd2 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3844:	b125      	cbz	r5, 3850 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    3846:	2100      	movs	r1, #0
    3848:	f240 502f 	movw	r0, #1327	; 0x52f
    384c:	f3af 8000 	nop.w
    3850:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    3854:	eb00 0a06 	add.w	sl, r0, r6
    3858:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    385c:	4430      	add	r0, r6
    385e:	8c01      	ldrh	r1, [r0, #32]
    3860:	f8aa 1020 	strh.w	r1, [sl, #32]
    3864:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    3868:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    386c:	b125      	cbz	r5, 3878 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    386e:	2100      	movs	r1, #0
    3870:	f240 5033 	movw	r0, #1331	; 0x533
    3874:	f3af 8000 	nop.w
    3878:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    387c:	f88d 0000 	strb.w	r0, [sp]
    3880:	f89d 0000 	ldrb.w	r0, [sp]
    3884:	b1e0      	cbz	r0, 38c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    3886:	2d00      	cmp	r5, #0
    3888:	bf1c      	itt	ne
    388a:	2100      	movne	r1, #0
    388c:	f640 3098 	movwne	r0, #2968	; 0xb98
    3890:	d0bb      	beq.n	380a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3892:	bf00      	nop
    3894:	f3af 8000 	nop.w
    3898:	e7b7      	b.n	380a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    389a:	e7ff      	b.n	389c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    389c:	f640 316d 	movw	r1, #2925	; 0xb6d
    38a0:	2070      	movs	r0, #112	; 0x70
    38a2:	f001 fb4d 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38a6:	464a      	mov	r2, r9
    38a8:	4641      	mov	r1, r8
    38aa:	2001      	movs	r0, #1
    38ac:	f7fe ff96 	bl	27dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7dc>
    38b0:	e7a0      	b.n	37f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    38b2:	4844      	ldr	r0, [pc, #272]	; (39c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    38b4:	2800      	cmp	r0, #0
    38b6:	bf18      	it	ne
    38b8:	f3af 8000 	nopne.w
    38bc:	b662      	cpsie	i
    38be:	e7ac      	b.n	381a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    38c0:	b125      	cbz	r5, 38cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    38c2:	2100      	movs	r1, #0
    38c4:	f640 309c 	movw	r0, #2972	; 0xb9c
    38c8:	f3af 8000 	nop.w
    38cc:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    38d0:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    38d4:	4640      	mov	r0, r8
    38d6:	461c      	mov	r4, r3
    38d8:	f04f 0b20 	mov.w	fp, #32
    38dc:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    38e0:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    38e4:	e004      	b.n	38f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    38e6:	46a3      	mov	fp, r4
    38e8:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    38ec:	f89c 4001 	ldrb.w	r4, [ip, #1]
    38f0:	4284      	cmp	r4, r0
    38f2:	d002      	beq.n	38fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    38f4:	2c20      	cmp	r4, #32
    38f6:	d02b      	beq.n	3950 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    38f8:	e7f5      	b.n	38e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    38fa:	2c20      	cmp	r4, #32
    38fc:	d028      	beq.n	3950 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    38fe:	42a3      	cmp	r3, r4
    3900:	d104      	bne.n	390c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    3902:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    3906:	7840      	ldrb	r0, [r0, #1]
    3908:	7008      	strb	r0, [r1, #0]
    390a:	e005      	b.n	3918 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    390c:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    3910:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    3914:	7840      	ldrb	r0, [r0, #1]
    3916:	7048      	strb	r0, [r1, #1]
    3918:	f1ba 0f00 	cmp.w	sl, #0
    391c:	d011      	beq.n	3942 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    391e:	b125      	cbz	r5, 392a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    3920:	2100      	movs	r1, #0
    3922:	f240 4092 	movw	r0, #1170	; 0x492
    3926:	f3af 8000 	nop.w
    392a:	f89a 0000 	ldrb.w	r0, [sl]
    392e:	42a0      	cmp	r0, r4
    3930:	d107      	bne.n	3942 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    3932:	b125      	cbz	r5, 393e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    3934:	2100      	movs	r1, #0
    3936:	f240 4095 	movw	r0, #1173	; 0x495
    393a:	f3af 8000 	nop.w
    393e:	f88a b000 	strb.w	fp, [sl]
    3942:	b15d      	cbz	r5, 395c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    3944:	2100      	movs	r1, #0
    3946:	f240 409a 	movw	r0, #1178	; 0x49a
    394a:	f3af 8000 	nop.w
    394e:	e000      	b.n	3952 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    3950:	b125      	cbz	r5, 395c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    3952:	2100      	movs	r1, #0
    3954:	f44f 603a 	mov.w	r0, #2976	; 0xba0
    3958:	f3af 8000 	nop.w
    395c:	481a      	ldr	r0, [pc, #104]	; (39c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    395e:	2800      	cmp	r0, #0
    3960:	bf18      	it	ne
    3962:	f3af 8000 	nopne.w
    3966:	f3ef 8410 	mrs	r4, PRIMASK
    396a:	b672      	cpsid	i
    396c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    3970:	f88d 0000 	strb.w	r0, [sp]
    3974:	f89d 0000 	ldrb.w	r0, [sp]
    3978:	b138      	cbz	r0, 398a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    397a:	2d00      	cmp	r5, #0
    397c:	bf1c      	itt	ne
    397e:	2100      	movne	r1, #0
    3980:	f640 30a6 	movwne	r0, #2982	; 0xba6
    3984:	f43f af41 	beq.w	380a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3988:	e784      	b.n	3894 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    398a:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    398e:	20ff      	movs	r0, #255	; 0xff
    3990:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    3994:	b154      	cbz	r4, 39ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    3996:	2d00      	cmp	r5, #0
    3998:	bf08      	it	eq
    399a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    399e:	2100      	movs	r1, #0
    39a0:	f640 30b3 	movw	r0, #2995	; 0xbb3
    39a4:	f3af 8000 	nop.w
    39a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39ac:	4805      	ldr	r0, [pc, #20]	; (39c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    39ae:	2800      	cmp	r0, #0
    39b0:	bf18      	it	ne
    39b2:	f3af 8000 	nopne.w
    39b6:	b662      	cpsie	i
    39b8:	e7ed      	b.n	3996 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    39ba:	0000      	.short	0x0000
    39bc:	200011d4 	.word	0x200011d4
	...

000039cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    39cc:	b570      	push	{r4, r5, r6, lr}
    39ce:	460d      	mov	r5, r1
    39d0:	4606      	mov	r6, r0
    39d2:	f001 fa2b 	bl	4e2c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    39d6:	480f      	ldr	r0, [pc, #60]	; (3a14 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    39d8:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    39dc:	2400      	movs	r4, #0
    39de:	3880      	subs	r0, #128	; 0x80
    39e0:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    39e4:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    39e8:	b129      	cbz	r1, 39f6 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    39ea:	1c61      	adds	r1, r4, #1
    39ec:	b2cc      	uxtb	r4, r1
    39ee:	2c20      	cmp	r4, #32
    39f0:	d3f8      	bcc.n	39e4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    39f2:	2020      	movs	r0, #32
    39f4:	bd70      	pop	{r4, r5, r6, pc}
    39f6:	4808      	ldr	r0, [pc, #32]	; (3a18 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    39f8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    39fc:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    3a00:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    3a04:	4621      	mov	r1, r4
    3a06:	6045      	str	r5, [r0, #4]
    3a08:	2001      	movs	r0, #1
    3a0a:	f7fe fee7 	bl	27dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7dc>
    3a0e:	4620      	mov	r0, r4
    3a10:	bd70      	pop	{r4, r5, r6, pc}
    3a12:	0000      	.short	0x0000
    3a14:	200011d4 	.word	0x200011d4
    3a18:	20000dd4 	.word	0x20000dd4

00003a1c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    3a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a20:	f000 fb70 	bl	4104 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3a24:	4605      	mov	r5, r0
    3a26:	f000 fe3f 	bl	46a8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    3a2a:	4c60      	ldr	r4, [pc, #384]	; (3bac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x114>)
    3a2c:	6860      	ldr	r0, [r4, #4]
    3a2e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3a32:	bf1c      	itt	ne
    3a34:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    3a38:	6060      	strne	r0, [r4, #4]
    3a3a:	7fa0      	ldrb	r0, [r4, #30]
    3a3c:	4f5c      	ldr	r7, [pc, #368]	; (3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>)
    3a3e:	b990      	cbnz	r0, 3a66 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4a>
    3a40:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    3a44:	1a40      	subs	r0, r0, r1
    3a46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3a4a:	f44f 710c 	mov.w	r1, #560	; 0x230
    3a4e:	f009 fd9c 	bl	d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    3a52:	68e1      	ldr	r1, [r4, #12]
    3a54:	4408      	add	r0, r1
    3a56:	1a28      	subs	r0, r5, r0
    3a58:	0200      	lsls	r0, r0, #8
    3a5a:	17c1      	asrs	r1, r0, #31
    3a5c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3a60:	1200      	asrs	r0, r0, #8
    3a62:	0fc0      	lsrs	r0, r0, #31
    3a64:	d012      	beq.n	3a8c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x70>
    3a66:	7e60      	ldrb	r0, [r4, #25]
    3a68:	b320      	cbz	r0, 3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3a6a:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    3a6e:	f88d 0000 	strb.w	r0, [sp]
    3a72:	f89d 0000 	ldrb.w	r0, [sp]
    3a76:	b1e8      	cbz	r0, 3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3a78:	f000 fc72 	bl	4360 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    3a7c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    3a80:	b1f0      	cbz	r0, 3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3a82:	f240 31d5 	movw	r1, #981	; 0x3d5
    3a86:	2070      	movs	r0, #112	; 0x70
    3a88:	f001 fa5a 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a8c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3a90:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    3a94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3a98:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3a9c:	6840      	ldr	r0, [r0, #4]
    3a9e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3aa2:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
    3aa6:	2108      	movs	r1, #8
    3aa8:	4790      	blx	r2
    3aaa:	f240 31bd 	movw	r1, #957	; 0x3bd
    3aae:	2070      	movs	r0, #112	; 0x70
    3ab0:	f001 fa46 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ab4:	1ce8      	adds	r0, r5, #3
    3ab6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3aba:	f000 fb49 	bl	4150 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3abe:	e7dd      	b.n	3a7c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x60>
    3ac0:	2001      	movs	r0, #1
    3ac2:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3ac6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3aca:	2820      	cmp	r0, #32
    3acc:	d021      	beq.n	3b12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7a>
    3ace:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
    3ad2:	2020      	movs	r0, #32
    3ad4:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3ad8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3adc:	2600      	movs	r6, #0
    3ade:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    3ae2:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
    3ae6:	6026      	str	r6, [r4, #0]
    3ae8:	f000 feb8 	bl	485c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    3aec:	7720      	strb	r0, [r4, #28]
    3aee:	f894 802c 	ldrb.w	r8, [r4, #44]	; 0x2c
    3af2:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    3af6:	eb00 0a04 	add.w	sl, r0, r4
    3afa:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3afe:	2820      	cmp	r0, #32
    3b00:	d012      	beq.n	3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
    3b02:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3b06:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    3b0a:	7e81      	ldrb	r1, [r0, #26]
    3b0c:	2901      	cmp	r1, #1
    3b0e:	d005      	beq.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
    3b10:	e00a      	b.n	3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
    3b12:	f44f 7176 	mov.w	r1, #984	; 0x3d8
    3b16:	2070      	movs	r0, #112	; 0x70
    3b18:	f001 fa12 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b1c:	f100 0208 	add.w	r2, r0, #8
    3b20:	2101      	movs	r1, #1
    3b22:	4628      	mov	r0, r5
    3b24:	f7fe f9d2 	bl	1ecc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>
    3b28:	4642      	mov	r2, r8
    3b2a:	2101      	movs	r1, #1
    3b2c:	4628      	mov	r0, r5
    3b2e:	f7fe fe87 	bl	2840 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x840>
    3b32:	0007      	movs	r7, r0
    3b34:	d0f8      	beq.n	3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
    3b36:	481f      	ldr	r0, [pc, #124]	; (3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>)
    3b38:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    3b3c:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    3b40:	2802      	cmp	r0, #2
    3b42:	d104      	bne.n	3b4e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb6>
    3b44:	4642      	mov	r2, r8
    3b46:	4649      	mov	r1, r9
    3b48:	2006      	movs	r0, #6
    3b4a:	f7fe fe47 	bl	27dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7dc>
    3b4e:	20ff      	movs	r0, #255	; 0xff
    3b50:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3b54:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    3b58:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>
    3b5c:	2820      	cmp	r0, #32
    3b5e:	bf1c      	itt	ne
    3b60:	f898 0001 	ldrbne.w	r0, [r8, #1]
    3b64:	f001 fac0 	blne	50e8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3b68:	7f20      	ldrb	r0, [r4, #28]
    3b6a:	b118      	cbz	r0, 3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
    3b6c:	f000 fe52 	bl	4814 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    3b70:	7726      	strb	r6, [r4, #28]
    3b72:	7766      	strb	r6, [r4, #29]
    3b74:	2f02      	cmp	r7, #2
    3b76:	d00f      	beq.n	3b98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x100>
    3b78:	2f01      	cmp	r7, #1
    3b7a:	bf18      	it	ne
    3b7c:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b84:	f8d8 1004 	ldr.w	r1, [r8, #4]
    3b88:	2900      	cmp	r1, #0
    3b8a:	bf08      	it	eq
    3b8c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b90:	b001      	add	sp, #4
    3b92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b96:	4708      	bx	r1
    3b98:	68a0      	ldr	r0, [r4, #8]
    3b9a:	1b40      	subs	r0, r0, r5
    3b9c:	f009 fcca 	bl	d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3ba0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    3ba4:	2900      	cmp	r1, #0
    3ba6:	d1f3      	bne.n	3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>
    3ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bac:	200011d4 	.word	0x200011d4
    3bb0:	20000dd4 	.word	0x20000dd4
    3bb4:	20001154 	.word	0x20001154
    3bb8:	2000003c 	.word	0x2000003c

00003bbc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3bbc:	b530      	push	{r4, r5, lr}
    3bbe:	4c36      	ldr	r4, [pc, #216]	; (3c98 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    3bc0:	4605      	mov	r5, r0
    3bc2:	b083      	sub	sp, #12
    3bc4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3bc8:	2820      	cmp	r0, #32
    3bca:	d008      	beq.n	3bde <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    3bcc:	6860      	ldr	r0, [r4, #4]
    3bce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3bd2:	d009      	beq.n	3be8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    3bd4:	f640 21a1 	movw	r1, #2721	; 0xaa1
    3bd8:	2070      	movs	r0, #112	; 0x70
    3bda:	f001 f9b1 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bde:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
    3be2:	2070      	movs	r0, #112	; 0x70
    3be4:	f001 f9ac 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3be8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3bec:	492b      	ldr	r1, [pc, #172]	; (3c9c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe0>)
    3bee:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3bf2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3bf6:	3008      	adds	r0, #8
    3bf8:	f7fe fdb6 	bl	2768 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x768>
    3bfc:	4601      	mov	r1, r0
    3bfe:	4a28      	ldr	r2, [pc, #160]	; (3ca0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe4>)
    3c00:	4428      	add	r0, r5
    3c02:	4291      	cmp	r1, r2
    3c04:	d904      	bls.n	3c10 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x54>
    3c06:	f240 516f 	movw	r1, #1391	; 0x56f
    3c0a:	2070      	movs	r0, #112	; 0x70
    3c0c:	f001 f998 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c10:	4924      	ldr	r1, [pc, #144]	; (3ca4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xe8>)
    3c12:	428d      	cmp	r5, r1
    3c14:	dd04      	ble.n	3c20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x64>
    3c16:	f44f 61ae 	mov.w	r1, #1392	; 0x570
    3c1a:	2070      	movs	r0, #112	; 0x70
    3c1c:	f001 f990 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c20:	4921      	ldr	r1, [pc, #132]	; (3ca8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xec>)
    3c22:	428d      	cmp	r5, r1
    3c24:	da04      	bge.n	3c30 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x74>
    3c26:	f240 5171 	movw	r1, #1393	; 0x571
    3c2a:	2070      	movs	r0, #112	; 0x70
    3c2c:	f001 f988 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c30:	491e      	ldr	r1, [pc, #120]	; (3cac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xf0>)
    3c32:	4281      	cmp	r1, r0
    3c34:	bfdc      	itt	le
    3c36:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    3c3a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    3c3e:	dd05      	ble.n	3c4c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    3c40:	2800      	cmp	r0, #0
    3c42:	bfbc      	itt	lt
    3c44:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    3c48:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    3c4c:	aa01      	add	r2, sp, #4
    3c4e:	4669      	mov	r1, sp
    3c50:	f000 f8ee 	bl	3e30 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3c54:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3c58:	280f      	cmp	r0, #15
    3c5a:	bf8c      	ite	hi
    3c5c:	2001      	movhi	r0, #1
    3c5e:	2000      	movls	r0, #0
    3c60:	9900      	ldr	r1, [sp, #0]
    3c62:	4408      	add	r0, r1
    3c64:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3c68:	6061      	str	r1, [r4, #4]
    3c6a:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    3c6e:	f88d 0000 	strb.w	r0, [sp]
    3c72:	f89d 0000 	ldrb.w	r0, [sp]
    3c76:	2800      	cmp	r0, #0
    3c78:	bf04      	itt	eq
    3c7a:	b003      	addeq	sp, #12
    3c7c:	bd30      	popeq	{r4, r5, pc}
    3c7e:	2005      	movs	r0, #5
    3c80:	f000 fbec 	bl	445c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3c84:	2800      	cmp	r0, #0
    3c86:	bf1c      	itt	ne
    3c88:	b003      	addne	sp, #12
    3c8a:	bd30      	popne	{r4, r5, pc}
    3c8c:	f640 21a8 	movw	r1, #2728	; 0xaa8
    3c90:	2070      	movs	r0, #112	; 0x70
    3c92:	f001 f955 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c96:	0000      	.short	0x0000
    3c98:	200011d4 	.word	0x200011d4
    3c9c:	20000dd4 	.word	0x20000dd4
    3ca0:	1e847fff 	.word	0x1e847fff
    3ca4:	0f424000 	.word	0x0f424000
    3ca8:	f0bdc000 	.word	0xf0bdc000
    3cac:	1e848000 	.word	0x1e848000

00003cb0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3cb0:	b570      	push	{r4, r5, r6, lr}
    3cb2:	4c1c      	ldr	r4, [pc, #112]	; (3d24 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    3cb4:	2120      	movs	r1, #32
    3cb6:	f884 1020 	strb.w	r1, [r4, #32]
    3cba:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3cbe:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3cc2:	2000      	movs	r0, #0
    3cc4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3cc8:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    3ccc:	1e42      	subs	r2, r0, #1
    3cce:	e9c4 0200 	strd	r0, r2, [r4]
    3cd2:	77a0      	strb	r0, [r4, #30]
    3cd4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    3cd8:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    3cdc:	7720      	strb	r0, [r4, #28]
    3cde:	7760      	strb	r0, [r4, #29]
    3ce0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    3ce4:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    3ce8:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    3cec:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3cf0:	2210      	movs	r2, #16
    3cf2:	7088      	strb	r0, [r1, #2]
    3cf4:	f801 0f04 	strb.w	r0, [r1, #4]!
    3cf8:	1e52      	subs	r2, r2, #1
    3cfa:	d1fa      	bne.n	3cf2 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    3cfc:	f000 fdb8 	bl	4870 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    3d00:	4d09      	ldr	r5, [pc, #36]	; (3d28 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    3d02:	2601      	movs	r6, #1
    3d04:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3d08:	20ff      	movs	r0, #255	; 0xff
    3d0a:	7028      	strb	r0, [r5, #0]
    3d0c:	4807      	ldr	r0, [pc, #28]	; (3d2c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3d0e:	f001 f9cd 	bl	50ac <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3d12:	7068      	strb	r0, [r5, #1]
    3d14:	f001 fa28 	bl	5168 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    3d18:	60a8      	str	r0, [r5, #8]
    3d1a:	f000 fd33 	bl	4784 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    3d1e:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    3d22:	bd70      	pop	{r4, r5, r6, pc}
    3d24:	200011d4 	.word	0x200011d4
    3d28:	2000003c 	.word	0x2000003c
    3d2c:	00002691 	.word	0x00002691

00003d30 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    3d30:	b500      	push	{lr}
    3d32:	b083      	sub	sp, #12
    3d34:	4668      	mov	r0, sp
    3d36:	f000 f9eb 	bl	4110 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3d3a:	9800      	ldr	r0, [sp, #0]
    3d3c:	f009 fbfa 	bl	d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3d40:	9a01      	ldr	r2, [sp, #4]
    3d42:	4b03      	ldr	r3, [pc, #12]	; (3d50 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    3d44:	2100      	movs	r1, #0
    3d46:	fbe2 0103 	umlal	r0, r1, r2, r3
    3d4a:	b003      	add	sp, #12
    3d4c:	bd00      	pop	{pc}
    3d4e:	0000      	.short	0x0000
    3d50:	1e848000 	.word	0x1e848000

00003d54 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    3d54:	b570      	push	{r4, r5, r6, lr}
    3d56:	4606      	mov	r6, r0
    3d58:	b082      	sub	sp, #8
    3d5a:	461d      	mov	r5, r3
    3d5c:	4610      	mov	r0, r2
    3d5e:	f009 fbe9 	bl	d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3d62:	4604      	mov	r4, r0
    3d64:	4668      	mov	r0, sp
    3d66:	f000 f9d3 	bl	4110 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    3d6a:	4920      	ldr	r1, [pc, #128]	; (3dec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    3d6c:	9801      	ldr	r0, [sp, #4]
    3d6e:	fba0 0201 	umull	r0, r2, r0, r1
    3d72:	1a30      	subs	r0, r6, r0
    3d74:	bf44      	itt	mi
    3d76:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    3d7a:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    3d7e:	d504      	bpl.n	3d8a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    3d80:	f640 31c8 	movw	r1, #3016	; 0xbc8
    3d84:	2070      	movs	r0, #112	; 0x70
    3d86:	f001 f8db 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d8a:	4288      	cmp	r0, r1
    3d8c:	db04      	blt.n	3d98 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    3d8e:	f640 31c9 	movw	r1, #3017	; 0xbc9
    3d92:	2070      	movs	r0, #112	; 0x70
    3d94:	f001 f8d4 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d98:	4a15      	ldr	r2, [pc, #84]	; (3df0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    3d9a:	1a21      	subs	r1, r4, r0
    3d9c:	2300      	movs	r3, #0
    3d9e:	1a8a      	subs	r2, r1, r2
    3da0:	f173 0200 	sbcs.w	r2, r3, #0
    3da4:	d318      	bcc.n	3dd8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3da6:	f8df c048 	ldr.w	ip, [pc, #72]	; 3df0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    3daa:	1b02      	subs	r2, r0, r4
    3dac:	ebb2 0c0c 	subs.w	ip, r2, ip
    3db0:	f173 0300 	sbcs.w	r3, r3, #0
    3db4:	d310      	bcc.n	3dd8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3db6:	4b0f      	ldr	r3, [pc, #60]	; (3df4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    3db8:	428b      	cmp	r3, r1
    3dba:	bf3e      	ittt	cc
    3dbc:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    3dc0:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    3dc4:	1901      	addcc	r1, r0, r4
    3dc6:	d307      	bcc.n	3dd8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3dc8:	4293      	cmp	r3, r2
    3dca:	d20a      	bcs.n	3de2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    3dcc:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    3dd0:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    3dd4:	4408      	add	r0, r1
    3dd6:	4241      	negs	r1, r0
    3dd8:	f101 000f 	add.w	r0, r1, #15
    3ddc:	b002      	add	sp, #8
    3dde:	1a28      	subs	r0, r5, r0
    3de0:	bd70      	pop	{r4, r5, r6, pc}
    3de2:	f640 21c2 	movw	r1, #2754	; 0xac2
    3de6:	2070      	movs	r0, #112	; 0x70
    3de8:	f001 f8aa 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dec:	1e848000 	.word	0x1e848000
    3df0:	0f424000 	.word	0x0f424000
    3df4:	1e847fff 	.word	0x1e847fff

00003df8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3df8:	0b41      	lsrs	r1, r0, #13
    3dfa:	f248 6237 	movw	r2, #34359	; 0x8637
    3dfe:	4351      	muls	r1, r2
    3e00:	0c0a      	lsrs	r2, r1, #16
    3e02:	4b09      	ldr	r3, [pc, #36]	; (3e28 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3e04:	0251      	lsls	r1, r2, #9
    3e06:	fb02 0203 	mla	r2, r2, r3, r0
    3e0a:	4808      	ldr	r0, [pc, #32]	; (3e2c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3e0c:	4350      	muls	r0, r2
    3e0e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    3e12:	306e      	adds	r0, #110	; 0x6e
    3e14:	0d40      	lsrs	r0, r0, #21
    3e16:	425b      	negs	r3, r3
    3e18:	fb10 f303 	smulbb	r3, r0, r3
    3e1c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3e20:	bf88      	it	hi
    3e22:	1c49      	addhi	r1, r1, #1
    3e24:	4408      	add	r0, r1
    3e26:	4770      	bx	lr
    3e28:	ffffc2f7 	.word	0xffffc2f7
    3e2c:	00010c6f 	.word	0x00010c6f

00003e30 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3e30:	0b43      	lsrs	r3, r0, #13
    3e32:	f248 6c37 	movw	ip, #34359	; 0x8637
    3e36:	fb03 f30c 	mul.w	r3, r3, ip
    3e3a:	b430      	push	{r4, r5}
    3e3c:	0c1b      	lsrs	r3, r3, #16
    3e3e:	f8df c044 	ldr.w	ip, [pc, #68]	; 3e84 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    3e42:	025c      	lsls	r4, r3, #9
    3e44:	fb03 030c 	mla	r3, r3, ip, r0
    3e48:	480f      	ldr	r0, [pc, #60]	; (3e88 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3e4a:	4358      	muls	r0, r3
    3e4c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3e50:	eb04 000c 	add.w	r0, r4, ip
    3e54:	f643 5409 	movw	r4, #15625	; 0x3d09
    3e58:	fb1c f404 	smulbb	r4, ip, r4
    3e5c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3e60:	f643 5508 	movw	r5, #15624	; 0x3d08
    3e64:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3e68:	442c      	add	r4, r5
    3e6a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3e6e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3e72:	bf84      	itt	hi
    3e74:	f04f 0c00 	movhi.w	ip, #0
    3e78:	1c40      	addhi	r0, r0, #1
    3e7a:	6008      	str	r0, [r1, #0]
    3e7c:	f882 c000 	strb.w	ip, [r2]
    3e80:	bc30      	pop	{r4, r5}
    3e82:	4770      	bx	lr
    3e84:	ffffc2f7 	.word	0xffffc2f7
    3e88:	00010c6f 	.word	0x00010c6f

00003e8c <MPSL_IRQ_RTC0_Handler>:
    3e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e90:	4d3b      	ldr	r5, [pc, #236]	; (3f80 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3e92:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3e96:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3f84 <MPSL_IRQ_RTC0_Handler+0xf8>
    3e9a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3e9e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    3ea2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3ea6:	f04f 0400 	mov.w	r4, #0
    3eaa:	d019      	beq.n	3ee0 <MPSL_IRQ_RTC0_Handler+0x54>
    3eac:	4836      	ldr	r0, [pc, #216]	; (3f88 <MPSL_IRQ_RTC0_Handler+0xfc>)
    3eae:	6800      	ldr	r0, [r0, #0]
    3eb0:	b1b0      	cbz	r0, 3ee0 <MPSL_IRQ_RTC0_Handler+0x54>
    3eb2:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    3eb6:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3eba:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    3ebe:	f8d8 1000 	ldr.w	r1, [r8]
    3ec2:	1a40      	subs	r0, r0, r1
    3ec4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3ec8:	2802      	cmp	r0, #2
    3eca:	d302      	bcc.n	3ed2 <MPSL_IRQ_RTC0_Handler+0x46>
    3ecc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3ed0:	d906      	bls.n	3ee0 <MPSL_IRQ_RTC0_Handler+0x54>
    3ed2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3ed6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3eda:	2004      	movs	r0, #4
    3edc:	f7fe fe7e 	bl	2bdc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3ee0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3ee4:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3ee8:	d01a      	beq.n	3f20 <MPSL_IRQ_RTC0_Handler+0x94>
    3eea:	4828      	ldr	r0, [pc, #160]	; (3f8c <MPSL_IRQ_RTC0_Handler+0x100>)
    3eec:	6800      	ldr	r0, [r0, #0]
    3eee:	b1b8      	cbz	r0, 3f20 <MPSL_IRQ_RTC0_Handler+0x94>
    3ef0:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    3ef4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3ef8:	4825      	ldr	r0, [pc, #148]	; (3f90 <MPSL_IRQ_RTC0_Handler+0x104>)
    3efa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3efe:	f8d8 1000 	ldr.w	r1, [r8]
    3f02:	1a40      	subs	r0, r0, r1
    3f04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3f08:	2802      	cmp	r0, #2
    3f0a:	d302      	bcc.n	3f12 <MPSL_IRQ_RTC0_Handler+0x86>
    3f0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f10:	d906      	bls.n	3f20 <MPSL_IRQ_RTC0_Handler+0x94>
    3f12:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3f16:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3f1a:	2005      	movs	r0, #5
    3f1c:	f7fe fe5e 	bl	2bdc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3f20:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3f24:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3f28:	d01a      	beq.n	3f60 <MPSL_IRQ_RTC0_Handler+0xd4>
    3f2a:	481a      	ldr	r0, [pc, #104]	; (3f94 <MPSL_IRQ_RTC0_Handler+0x108>)
    3f2c:	6800      	ldr	r0, [r0, #0]
    3f2e:	b1b8      	cbz	r0, 3f60 <MPSL_IRQ_RTC0_Handler+0xd4>
    3f30:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3f34:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3f38:	4817      	ldr	r0, [pc, #92]	; (3f98 <MPSL_IRQ_RTC0_Handler+0x10c>)
    3f3a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3f3e:	f8d8 1000 	ldr.w	r1, [r8]
    3f42:	1a40      	subs	r0, r0, r1
    3f44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3f48:	2802      	cmp	r0, #2
    3f4a:	d302      	bcc.n	3f52 <MPSL_IRQ_RTC0_Handler+0xc6>
    3f4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f50:	d906      	bls.n	3f60 <MPSL_IRQ_RTC0_Handler+0xd4>
    3f52:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3f56:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3f5a:	2006      	movs	r0, #6
    3f5c:	f7fe fe3e 	bl	2bdc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3f60:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    3f64:	2800      	cmp	r0, #0
    3f66:	bf08      	it	eq
    3f68:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f6c:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    3f70:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3f74:	4809      	ldr	r0, [pc, #36]	; (3f9c <MPSL_IRQ_RTC0_Handler+0x110>)
    3f76:	68c1      	ldr	r1, [r0, #12]
    3f78:	1c49      	adds	r1, r1, #1
    3f7a:	60c1      	str	r1, [r0, #12]
    3f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f80:	4000b000 	.word	0x4000b000
    3f84:	4000b504 	.word	0x4000b504
    3f88:	4000b140 	.word	0x4000b140
    3f8c:	4000b144 	.word	0x4000b144
    3f90:	4000b004 	.word	0x4000b004
    3f94:	4000b148 	.word	0x4000b148
    3f98:	4000b008 	.word	0x4000b008
    3f9c:	20000048 	.word	0x20000048

00003fa0 <MPSL_IRQ_TIMER0_Handler>:
    3fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fa4:	4d38      	ldr	r5, [pc, #224]	; (4088 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3fa6:	7828      	ldrb	r0, [r5, #0]
    3fa8:	2804      	cmp	r0, #4
    3faa:	d068      	beq.n	407e <MPSL_IRQ_TIMER0_Handler+0xde>
    3fac:	1ca8      	adds	r0, r5, #2
    3fae:	2201      	movs	r2, #1
    3fb0:	7801      	ldrb	r1, [r0, #0]
    3fb2:	b159      	cbz	r1, 3fcc <MPSL_IRQ_TIMER0_Handler+0x2c>
    3fb4:	2901      	cmp	r1, #1
    3fb6:	bf08      	it	eq
    3fb8:	706a      	strbeq	r2, [r5, #1]
    3fba:	d002      	beq.n	3fc2 <MPSL_IRQ_TIMER0_Handler+0x22>
    3fbc:	7869      	ldrb	r1, [r5, #1]
    3fbe:	2900      	cmp	r1, #0
    3fc0:	d058      	beq.n	4074 <MPSL_IRQ_TIMER0_Handler+0xd4>
    3fc2:	2102      	movs	r1, #2
    3fc4:	7001      	strb	r1, [r0, #0]
    3fc6:	7840      	ldrb	r0, [r0, #1]
    3fc8:	f000 fafe 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3fcc:	4c2f      	ldr	r4, [pc, #188]	; (408c <MPSL_IRQ_TIMER0_Handler+0xec>)
    3fce:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3fd2:	f04f 0800 	mov.w	r8, #0
    3fd6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3fda:	f44f 7780 	mov.w	r7, #256	; 0x100
    3fde:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    3fe2:	d00a      	beq.n	3ffa <MPSL_IRQ_TIMER0_Handler+0x5a>
    3fe4:	482a      	ldr	r0, [pc, #168]	; (4090 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3fe6:	6800      	ldr	r0, [r0, #0]
    3fe8:	b138      	cbz	r0, 3ffa <MPSL_IRQ_TIMER0_Handler+0x5a>
    3fea:	2003      	movs	r0, #3
    3fec:	f000 faec 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3ff0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3ff4:	2003      	movs	r0, #3
    3ff6:	f7fe fdf1 	bl	2bdc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3ffa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3ffe:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    4002:	d00a      	beq.n	401a <MPSL_IRQ_TIMER0_Handler+0x7a>
    4004:	4823      	ldr	r0, [pc, #140]	; (4094 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    4006:	6800      	ldr	r0, [r0, #0]
    4008:	b138      	cbz	r0, 401a <MPSL_IRQ_TIMER0_Handler+0x7a>
    400a:	2002      	movs	r0, #2
    400c:	f000 fadc 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4010:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4014:	2002      	movs	r0, #2
    4016:	f7fe fde1 	bl	2bdc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    401a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    401e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    4022:	d00a      	beq.n	403a <MPSL_IRQ_TIMER0_Handler+0x9a>
    4024:	481c      	ldr	r0, [pc, #112]	; (4098 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    4026:	6800      	ldr	r0, [r0, #0]
    4028:	b138      	cbz	r0, 403a <MPSL_IRQ_TIMER0_Handler+0x9a>
    402a:	2001      	movs	r0, #1
    402c:	f000 facc 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4030:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4034:	2001      	movs	r0, #1
    4036:	f7fe fdd1 	bl	2bdc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    403a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    403e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    4042:	bf08      	it	eq
    4044:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    4048:	4814      	ldr	r0, [pc, #80]	; (409c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    404a:	6800      	ldr	r0, [r0, #0]
    404c:	2800      	cmp	r0, #0
    404e:	bf08      	it	eq
    4050:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    4054:	2000      	movs	r0, #0
    4056:	f000 fab7 	bl	45c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    405a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    405e:	2004      	movs	r0, #4
    4060:	7028      	strb	r0, [r5, #0]
    4062:	f8c5 8004 	str.w	r8, [r5, #4]
    4066:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    406a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    406e:	2000      	movs	r0, #0
    4070:	f7fe bdb4 	b.w	2bdc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    4074:	f240 419f 	movw	r1, #1183	; 0x49f
    4078:	206c      	movs	r0, #108	; 0x6c
    407a:	f000 ff61 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    407e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4082:	2007      	movs	r0, #7
    4084:	f7fe bdaa 	b.w	2bdc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    4088:	20000048 	.word	0x20000048
    408c:	40008000 	.word	0x40008000
    4090:	4000814c 	.word	0x4000814c
    4094:	40008148 	.word	0x40008148
    4098:	40008144 	.word	0x40008144
    409c:	40008140 	.word	0x40008140
    40a0:	2201      	movs	r2, #1
    40a2:	0211      	lsls	r1, r2, #8
    40a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    40a8:	2000      	movs	r0, #0
    40aa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    40ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    40b2:	f3bf 8f4f 	dsb	sy
    40b6:	f3bf 8f6f 	isb	sy
    40ba:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    40be:	490e      	ldr	r1, [pc, #56]	; (40f8 <MPSL_IRQ_TIMER0_Handler+0x158>)
    40c0:	f841 2f04 	str.w	r2, [r1, #4]!
    40c4:	1e43      	subs	r3, r0, #1
    40c6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    40ca:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    40ce:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    40d2:	4b0a      	ldr	r3, [pc, #40]	; (40fc <MPSL_IRQ_TIMER0_Handler+0x15c>)
    40d4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    40d8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    40dc:	1d1b      	adds	r3, r3, #4
    40de:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    40e2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    40e6:	1d1b      	adds	r3, r3, #4
    40e8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    40ec:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    40f0:	60ca      	str	r2, [r1, #12]
    40f2:	4903      	ldr	r1, [pc, #12]	; (4100 <MPSL_IRQ_TIMER0_Handler+0x160>)
    40f4:	7048      	strb	r0, [r1, #1]
    40f6:	4770      	bx	lr
    40f8:	40008000 	.word	0x40008000
    40fc:	40008004 	.word	0x40008004
    4100:	20000048 	.word	0x20000048

00004104 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    4104:	4801      	ldr	r0, [pc, #4]	; (410c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    4106:	6800      	ldr	r0, [r0, #0]
    4108:	4770      	bx	lr
    410a:	0000      	.short	0x0000
    410c:	4000b504 	.word	0x4000b504

00004110 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    4110:	b430      	push	{r4, r5}
    4112:	f3ef 8c10 	mrs	ip, PRIMASK
    4116:	b672      	cpsid	i
    4118:	2500      	movs	r5, #0
    411a:	4b0b      	ldr	r3, [pc, #44]	; (4148 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    411c:	4a0b      	ldr	r2, [pc, #44]	; (414c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    411e:	bf00      	nop
    4120:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    4124:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    4128:	b12c      	cbz	r4, 4136 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    412a:	68d1      	ldr	r1, [r2, #12]
    412c:	1c49      	adds	r1, r1, #1
    412e:	60d1      	str	r1, [r2, #12]
    4130:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    4134:	e7f4      	b.n	4120 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    4136:	68d2      	ldr	r2, [r2, #12]
    4138:	f1bc 0f00 	cmp.w	ip, #0
    413c:	d100      	bne.n	4140 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    413e:	b662      	cpsie	i
    4140:	e9c0 1200 	strd	r1, r2, [r0]
    4144:	bc30      	pop	{r4, r5}
    4146:	4770      	bx	lr
    4148:	4000b000 	.word	0x4000b000
    414c:	20000048 	.word	0x20000048

00004150 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    4150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4154:	4e46      	ldr	r6, [pc, #280]	; (4270 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    4156:	4605      	mov	r5, r0
    4158:	1eb7      	subs	r7, r6, #2
    415a:	7833      	ldrb	r3, [r6, #0]
    415c:	68b9      	ldr	r1, [r7, #8]
    415e:	2b01      	cmp	r3, #1
    4160:	bf04      	itt	eq
    4162:	42a9      	cmpeq	r1, r5
    4164:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4168:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    416c:	4a41      	ldr	r2, [pc, #260]	; (4274 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    416e:	6010      	str	r0, [r2, #0]
    4170:	4a42      	ldr	r2, [pc, #264]	; (427c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    4172:	4841      	ldr	r0, [pc, #260]	; (4278 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    4174:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    4178:	f102 0c04 	add.w	ip, r2, #4
    417c:	f04f 0400 	mov.w	r4, #0
    4180:	2b00      	cmp	r3, #0
    4182:	d062      	beq.n	424a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    4184:	483e      	ldr	r0, [pc, #248]	; (4280 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    4186:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    418a:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    418e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    4192:	bf00      	nop
    4194:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    4198:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    419c:	f04f 0801 	mov.w	r8, #1
    41a0:	2800      	cmp	r0, #0
    41a2:	bf01      	itttt	eq
    41a4:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    41a8:	2800      	cmpeq	r0, #0
    41aa:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    41ae:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    41b2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    41b6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    41ba:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    41be:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    41c2:	4830      	ldr	r0, [pc, #192]	; (4284 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    41c4:	f8d0 c000 	ldr.w	ip, [r0]
    41c8:	eba5 0c0c 	sub.w	ip, r5, ip
    41cc:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    41d0:	f1bc 0f02 	cmp.w	ip, #2
    41d4:	d344      	bcc.n	4260 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    41d6:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    41da:	d841      	bhi.n	4260 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    41dc:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    41e0:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    41e4:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    41e8:	b12b      	cbz	r3, 41f6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    41ea:	6802      	ldr	r2, [r0, #0]
    41ec:	1a8a      	subs	r2, r1, r2
    41ee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    41f2:	2a02      	cmp	r2, #2
    41f4:	d3f9      	bcc.n	41ea <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    41f6:	f8c7 8004 	str.w	r8, [r7, #4]
    41fa:	703c      	strb	r4, [r7, #0]
    41fc:	f7ff ff50 	bl	40a0 <MPSL_IRQ_TIMER0_Handler+0x100>
    4200:	4821      	ldr	r0, [pc, #132]	; (4288 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    4202:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    4206:	f364 0101 	bfi	r1, r4, #0, #2
    420a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    420e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    4212:	2102      	movs	r1, #2
    4214:	f361 0201 	bfi	r2, r1, #0, #2
    4218:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    421c:	2104      	movs	r1, #4
    421e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    4222:	f8c0 800c 	str.w	r8, [r0, #12]
    4226:	6879      	ldr	r1, [r7, #4]
    4228:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    422c:	1580      	asrs	r0, r0, #22
    422e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    4232:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    4236:	4915      	ldr	r1, [pc, #84]	; (428c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    4238:	05c0      	lsls	r0, r0, #23
    423a:	6008      	str	r0, [r1, #0]
    423c:	2004      	movs	r0, #4
    423e:	60bd      	str	r5, [r7, #8]
    4240:	7070      	strb	r0, [r6, #1]
    4242:	f886 8000 	strb.w	r8, [r6]
    4246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    424a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    424e:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    4252:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    4256:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    425a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    425e:	e799      	b.n	4194 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    4260:	2000      	movs	r0, #0
    4262:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4266:	f240 2193 	movw	r1, #659	; 0x293
    426a:	206c      	movs	r0, #108	; 0x6c
    426c:	f000 fe68 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4270:	2000004a 	.word	0x2000004a
    4274:	4001f508 	.word	0x4001f508
    4278:	fffbfffd 	.word	0xfffbfffd
    427c:	4000b000 	.word	0x4000b000
    4280:	fffafffd 	.word	0xfffafffd
    4284:	4000b504 	.word	0x4000b504
    4288:	40008000 	.word	0x40008000
    428c:	4001f504 	.word	0x4001f504

00004290 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    4290:	b570      	push	{r4, r5, r6, lr}
    4292:	4c2a      	ldr	r4, [pc, #168]	; (433c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    4294:	68a1      	ldr	r1, [r4, #8]
    4296:	4281      	cmp	r1, r0
    4298:	bf14      	ite	ne
    429a:	2201      	movne	r2, #1
    429c:	2200      	moveq	r2, #0
    429e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 4340 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    42a2:	f89c 5000 	ldrb.w	r5, [ip]
    42a6:	2d02      	cmp	r5, #2
    42a8:	d002      	beq.n	42b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    42aa:	2a00      	cmp	r2, #0
    42ac:	d034      	beq.n	4318 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    42ae:	e002      	b.n	42b6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    42b0:	2a00      	cmp	r2, #0
    42b2:	bf08      	it	eq
    42b4:	bd70      	popeq	{r4, r5, r6, pc}
    42b6:	7862      	ldrb	r2, [r4, #1]
    42b8:	b39a      	cbz	r2, 4322 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    42ba:	4b22      	ldr	r3, [pc, #136]	; (4344 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    42bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    42c0:	601a      	str	r2, [r3, #0]
    42c2:	4b21      	ldr	r3, [pc, #132]	; (4348 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    42c4:	1392      	asrs	r2, r2, #14
    42c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    42ca:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    42ce:	2200      	movs	r2, #0
    42d0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    42d4:	4a1d      	ldr	r2, [pc, #116]	; (434c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    42d6:	6816      	ldr	r6, [r2, #0]
    42d8:	1b86      	subs	r6, r0, r6
    42da:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    42de:	2e02      	cmp	r6, #2
    42e0:	d324      	bcc.n	432c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    42e2:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    42e6:	d821      	bhi.n	432c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    42e8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    42ec:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    42f0:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    42f4:	b12d      	cbz	r5, 4302 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    42f6:	6813      	ldr	r3, [r2, #0]
    42f8:	1acb      	subs	r3, r1, r3
    42fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    42fe:	2b02      	cmp	r3, #2
    4300:	d3f9      	bcc.n	42f6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    4302:	4b13      	ldr	r3, [pc, #76]	; (4350 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    4304:	2102      	movs	r1, #2
    4306:	074a      	lsls	r2, r1, #29
    4308:	601a      	str	r2, [r3, #0]
    430a:	60a0      	str	r0, [r4, #8]
    430c:	2004      	movs	r0, #4
    430e:	f88c 0001 	strb.w	r0, [ip, #1]
    4312:	f88c 1000 	strb.w	r1, [ip]
    4316:	bd70      	pop	{r4, r5, r6, pc}
    4318:	f240 21a1 	movw	r1, #673	; 0x2a1
    431c:	206c      	movs	r0, #108	; 0x6c
    431e:	f000 fe0f 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4322:	f240 21a5 	movw	r1, #677	; 0x2a5
    4326:	206c      	movs	r0, #108	; 0x6c
    4328:	f000 fe0a 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    432c:	2000      	movs	r0, #0
    432e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    4332:	f240 21b1 	movw	r1, #689	; 0x2b1
    4336:	206c      	movs	r0, #108	; 0x6c
    4338:	f000 fe02 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    433c:	20000048 	.word	0x20000048
    4340:	2000004a 	.word	0x2000004a
    4344:	4001f508 	.word	0x4001f508
    4348:	4000b000 	.word	0x4000b000
    434c:	4000b504 	.word	0x4000b504
    4350:	4001f504 	.word	0x4001f504

00004354 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    4354:	4801      	ldr	r0, [pc, #4]	; (435c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    4356:	6880      	ldr	r0, [r0, #8]
    4358:	4770      	bx	lr
    435a:	0000      	.short	0x0000
    435c:	20000048 	.word	0x20000048

00004360 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    4360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4364:	4836      	ldr	r0, [pc, #216]	; (4440 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    4366:	4a35      	ldr	r2, [pc, #212]	; (443c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    4368:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    436c:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 4444 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    4370:	1d03      	adds	r3, r0, #4
    4372:	2100      	movs	r1, #0
    4374:	f89c 4000 	ldrb.w	r4, [ip]
    4378:	b184      	cbz	r4, 439c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    437a:	4a33      	ldr	r2, [pc, #204]	; (4448 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    437c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    4380:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    4384:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4388:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    438c:	2301      	movs	r3, #1
    438e:	2a00      	cmp	r2, #0
    4390:	bf04      	itt	eq
    4392:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    4396:	2800      	cmpeq	r0, #0
    4398:	d111      	bne.n	43be <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    439a:	e00a      	b.n	43b2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    439c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    43a0:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    43a4:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    43a8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    43ac:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    43b0:	e7ea      	b.n	4388 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    43b2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    43b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    43ba:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    43be:	2c02      	cmp	r4, #2
    43c0:	d004      	beq.n	43cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    43c2:	f240 21bd 	movw	r1, #701	; 0x2bd
    43c6:	206c      	movs	r0, #108	; 0x6c
    43c8:	f000 fdba 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43cc:	4e1f      	ldr	r6, [pc, #124]	; (444c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    43ce:	6830      	ldr	r0, [r6, #0]
    43d0:	4c1f      	ldr	r4, [pc, #124]	; (4450 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    43d2:	1cc0      	adds	r0, r0, #3
    43d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    43d8:	68a2      	ldr	r2, [r4, #8]
    43da:	4d1e      	ldr	r5, [pc, #120]	; (4454 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    43dc:	4290      	cmp	r0, r2
    43de:	d00b      	beq.n	43f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    43e0:	6837      	ldr	r7, [r6, #0]
    43e2:	1bd7      	subs	r7, r2, r7
    43e4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    43e8:	2f04      	cmp	r7, #4
    43ea:	d305      	bcc.n	43f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    43ec:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    43f0:	d802      	bhi.n	43f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    43f2:	f7ff fead 	bl	4150 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    43f6:	e01b      	b.n	4430 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    43f8:	6830      	ldr	r0, [r6, #0]
    43fa:	1a10      	subs	r0, r2, r0
    43fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4400:	2802      	cmp	r0, #2
    4402:	d313      	bcc.n	442c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    4404:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4408:	d810      	bhi.n	442c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    440a:	4a13      	ldr	r2, [pc, #76]	; (4458 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    440c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4410:	6010      	str	r0, [r2, #0]
    4412:	6063      	str	r3, [r4, #4]
    4414:	7021      	strb	r1, [r4, #0]
    4416:	606b      	str	r3, [r5, #4]
    4418:	60eb      	str	r3, [r5, #12]
    441a:	0040      	lsls	r0, r0, #1
    441c:	1f11      	subs	r1, r2, #4
    441e:	6008      	str	r0, [r1, #0]
    4420:	2004      	movs	r0, #4
    4422:	f88c 0001 	strb.w	r0, [ip, #1]
    4426:	f88c 3000 	strb.w	r3, [ip]
    442a:	e001      	b.n	4430 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    442c:	6063      	str	r3, [r4, #4]
    442e:	7021      	strb	r1, [r4, #0]
    4430:	6860      	ldr	r0, [r4, #4]
    4432:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    4436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    443a:	0000      	.short	0x0000
    443c:	fffbfffd 	.word	0xfffbfffd
    4440:	4000b000 	.word	0x4000b000
    4444:	2000004a 	.word	0x2000004a
    4448:	fffafffd 	.word	0xfffafffd
    444c:	4000b504 	.word	0x4000b504
    4450:	20000048 	.word	0x20000048
    4454:	40008000 	.word	0x40008000
    4458:	4001f508 	.word	0x4001f508

0000445c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    445c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4460:	4a54      	ldr	r2, [pc, #336]	; (45b4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    4462:	2500      	movs	r5, #0
    4464:	2401      	movs	r4, #1
    4466:	f892 c000 	ldrb.w	ip, [r2]
    446a:	7853      	ldrb	r3, [r2, #1]
    446c:	f44f 76a0 	mov.w	r6, #320	; 0x140
    4470:	2807      	cmp	r0, #7
    4472:	d27d      	bcs.n	4570 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    4474:	e8df f000 	tbb	[pc, r0]
    4478:	04040404 	.word	0x04040404
    447c:	00585858 	.word	0x00585858
    4480:	4a4d      	ldr	r2, [pc, #308]	; (45b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    4482:	6897      	ldr	r7, [r2, #8]
    4484:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    4488:	bf04      	itt	eq
    448a:	7852      	ldrbeq	r2, [r2, #1]
    448c:	2a00      	cmpeq	r2, #0
    448e:	d003      	beq.n	4498 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    4490:	f1bc 0f02 	cmp.w	ip, #2
    4494:	d005      	beq.n	44a2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    4496:	e026      	b.n	44e6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    4498:	f240 314d 	movw	r1, #845	; 0x34d
    449c:	206c      	movs	r0, #108	; 0x6c
    449e:	f000 fd4f 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    44a2:	1f1a      	subs	r2, r3, #4
    44a4:	b2d2      	uxtb	r2, r2
    44a6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    44aa:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    44ae:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    44b2:	2200      	movs	r2, #0
    44b4:	f1bc 0f01 	cmp.w	ip, #1
    44b8:	d003      	beq.n	44c2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    44ba:	f1bc 0f02 	cmp.w	ip, #2
    44be:	d008      	beq.n	44d2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    44c0:	e00e      	b.n	44e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    44c2:	2b04      	cmp	r3, #4
    44c4:	bf24      	itt	cs
    44c6:	6837      	ldrcs	r7, [r6, #0]
    44c8:	2f00      	cmpcs	r7, #0
    44ca:	bf08      	it	eq
    44cc:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    44d0:	e006      	b.n	44e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    44d2:	2b04      	cmp	r3, #4
    44d4:	bf24      	itt	cs
    44d6:	6837      	ldrcs	r7, [r6, #0]
    44d8:	2f00      	cmpcs	r7, #0
    44da:	bf08      	it	eq
    44dc:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    44e0:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    44e4:	d1e5      	bne.n	44b2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    44e6:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 45bc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    44ea:	f100 0210 	add.w	r2, r0, #16
    44ee:	fa04 f202 	lsl.w	r2, r4, r2
    44f2:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    44f6:	f04f 0340 	mov.w	r3, #64	; 0x40
    44fa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    44fe:	b2db      	uxtb	r3, r3
    4500:	4463      	add	r3, ip
    4502:	601c      	str	r4, [r3, #0]
    4504:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    4508:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    450c:	eba1 0303 	sub.w	r3, r1, r3
    4510:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4514:	2b03      	cmp	r3, #3
    4516:	bf26      	itte	cs
    4518:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    451c:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    4520:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    4524:	d237      	bcs.n	4596 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    4526:	e03c      	b.n	45a2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    4528:	f1bc 0f00 	cmp.w	ip, #0
    452c:	d006      	beq.n	453c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    452e:	4283      	cmp	r3, r0
    4530:	d104      	bne.n	453c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    4532:	f240 316d 	movw	r1, #877	; 0x36d
    4536:	206c      	movs	r0, #108	; 0x6c
    4538:	f000 fd02 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    453c:	1f02      	subs	r2, r0, #4
    453e:	b2d3      	uxtb	r3, r2
    4540:	2b03      	cmp	r3, #3
    4542:	d304      	bcc.n	454e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    4544:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    4548:	206c      	movs	r0, #108	; 0x6c
    454a:	f000 fcf9 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    454e:	f8df c070 	ldr.w	ip, [pc, #112]	; 45c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    4552:	f103 0210 	add.w	r2, r3, #16
    4556:	fa04 f202 	lsl.w	r2, r4, r2
    455a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    455e:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    4562:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4566:	f84c 5003 	str.w	r5, [ip, r3]
    456a:	4b16      	ldr	r3, [pc, #88]	; (45c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    456c:	681b      	ldr	r3, [r3, #0]
    456e:	e000      	b.n	4572 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    4570:	e01a      	b.n	45a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    4572:	1f00      	subs	r0, r0, #4
    4574:	1acb      	subs	r3, r1, r3
    4576:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    457a:	b2c0      	uxtb	r0, r0
    457c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    4580:	2b02      	cmp	r3, #2
    4582:	d30b      	bcc.n	459c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    4584:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4588:	d808      	bhi.n	459c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    458a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    458e:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    4592:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    4596:	2001      	movs	r0, #1
    4598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    459c:	2100      	movs	r1, #0
    459e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    45a2:	2000      	movs	r0, #0
    45a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45a8:	f240 3171 	movw	r1, #881	; 0x371
    45ac:	206c      	movs	r0, #108	; 0x6c
    45ae:	f000 fcc7 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    45b2:	0000      	.short	0x0000
    45b4:	2000004a 	.word	0x2000004a
    45b8:	20000048 	.word	0x20000048
    45bc:	40008000 	.word	0x40008000
    45c0:	4000b000 	.word	0x4000b000
    45c4:	4000b504 	.word	0x4000b504

000045c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    45c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    45cc:	2601      	movs	r6, #1
    45ce:	2700      	movs	r7, #0
    45d0:	f44f 78a0 	mov.w	r8, #320	; 0x140
    45d4:	2807      	cmp	r0, #7
    45d6:	d251      	bcs.n	467c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    45d8:	e8df f000 	tbb	[pc, r0]
    45dc:	04040404 	.word	0x04040404
    45e0:	00191919 	.word	0x00191919
    45e4:	f100 0110 	add.w	r1, r0, #16
    45e8:	fa06 f201 	lsl.w	r2, r6, r1
    45ec:	4926      	ldr	r1, [pc, #152]	; (4688 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    45ee:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    45f2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    45f6:	2200      	movs	r2, #0
    45f8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    45fc:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    4600:	508f      	str	r7, [r1, r2]
    4602:	4922      	ldr	r1, [pc, #136]	; (468c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    4604:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4608:	9000      	str	r0, [sp, #0]
    460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    460e:	4d20      	ldr	r5, [pc, #128]	; (4690 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    4610:	1f01      	subs	r1, r0, #4
    4612:	b2cc      	uxtb	r4, r1
    4614:	7829      	ldrb	r1, [r5, #0]
    4616:	b179      	cbz	r1, 4638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    4618:	786a      	ldrb	r2, [r5, #1]
    461a:	4282      	cmp	r2, r0
    461c:	d10c      	bne.n	4638 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    461e:	4a1d      	ldr	r2, [pc, #116]	; (4694 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    4620:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    4624:	6010      	str	r0, [r2, #0]
    4626:	2901      	cmp	r1, #1
    4628:	bf08      	it	eq
    462a:	f7ff fd39 	bleq	40a0 <MPSL_IRQ_TIMER0_Handler+0x100>
    462e:	702f      	strb	r7, [r5, #0]
    4630:	4919      	ldr	r1, [pc, #100]	; (4698 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    4632:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4636:	6088      	str	r0, [r1, #8]
    4638:	4918      	ldr	r1, [pc, #96]	; (469c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    463a:	f104 0010 	add.w	r0, r4, #16
    463e:	fa06 f000 	lsl.w	r0, r6, r0
    4642:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    4646:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    464a:	00a0      	lsls	r0, r4, #2
    464c:	4408      	add	r0, r1
    464e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    4652:	4a13      	ldr	r2, [pc, #76]	; (46a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    4654:	6812      	ldr	r2, [r2, #0]
    4656:	1a80      	subs	r0, r0, r2
    4658:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    465c:	2802      	cmp	r0, #2
    465e:	d307      	bcc.n	4670 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    4660:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    4664:	2000      	movs	r0, #0
    4666:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    466a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    466e:	500f      	str	r7, [r1, r0]
    4670:	480c      	ldr	r0, [pc, #48]	; (46a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    4672:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    4676:	9000      	str	r0, [sp, #0]
    4678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    467c:	f240 31f5 	movw	r1, #1013	; 0x3f5
    4680:	206c      	movs	r0, #108	; 0x6c
    4682:	f000 fc5d 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4686:	0000      	.short	0x0000
    4688:	40008000 	.word	0x40008000
    468c:	40008140 	.word	0x40008140
    4690:	2000004a 	.word	0x2000004a
    4694:	4001f508 	.word	0x4001f508
    4698:	20000048 	.word	0x20000048
    469c:	4000b000 	.word	0x4000b000
    46a0:	4000b504 	.word	0x4000b504
    46a4:	4000b140 	.word	0x4000b140

000046a8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    46a8:	4825      	ldr	r0, [pc, #148]	; (4740 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    46aa:	4a24      	ldr	r2, [pc, #144]	; (473c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    46ac:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    46b0:	4924      	ldr	r1, [pc, #144]	; (4744 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    46b2:	1d03      	adds	r3, r0, #4
    46b4:	f891 c000 	ldrb.w	ip, [r1]
    46b8:	2100      	movs	r1, #0
    46ba:	f1bc 0f00 	cmp.w	ip, #0
    46be:	d010      	beq.n	46e2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    46c0:	4a21      	ldr	r2, [pc, #132]	; (4748 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    46c2:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    46c6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    46ca:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    46ce:	bf00      	nop
    46d0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    46d4:	2a00      	cmp	r2, #0
    46d6:	bf04      	itt	eq
    46d8:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    46dc:	2800      	cmpeq	r0, #0
    46de:	d111      	bne.n	4704 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    46e0:	e00a      	b.n	46f8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    46e2:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    46e6:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    46ea:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    46ee:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    46f2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    46f6:	e7eb      	b.n	46d0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    46f8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    46fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4700:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    4704:	4811      	ldr	r0, [pc, #68]	; (474c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    4706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    470a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    470e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    4712:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    4716:	f100 0204 	add.w	r2, r0, #4
    471a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    471e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    4722:	f102 0204 	add.w	r2, r2, #4
    4726:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    472a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    472e:	f102 0204 	add.w	r2, r2, #4
    4732:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    4736:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    473a:	4770      	bx	lr
    473c:	fffbfffd 	.word	0xfffbfffd
    4740:	4000b000 	.word	0x4000b000
    4744:	2000004a 	.word	0x2000004a
    4748:	fffafffd 	.word	0xfffafffd
    474c:	40008000 	.word	0x40008000

00004750 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    4750:	b510      	push	{r4, lr}
    4752:	2807      	cmp	r0, #7
    4754:	d20d      	bcs.n	4772 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    4756:	e8df f000 	tbb	[pc, r0]
    475a:	0404      	.short	0x0404
    475c:	06060404 	.word	0x06060404
    4760:	0006      	.short	0x0006
    4762:	4906      	ldr	r1, [pc, #24]	; (477c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    4764:	e002      	b.n	476c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    4766:	1f00      	subs	r0, r0, #4
    4768:	4905      	ldr	r1, [pc, #20]	; (4780 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    476a:	b2c0      	uxtb	r0, r0
    476c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    4770:	bd10      	pop	{r4, pc}
    4772:	f240 3195 	movw	r1, #917	; 0x395
    4776:	206c      	movs	r0, #108	; 0x6c
    4778:	f000 fbe2 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    477c:	40008140 	.word	0x40008140
    4780:	4000b140 	.word	0x4000b140

00004784 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    4784:	b570      	push	{r4, r5, r6, lr}
    4786:	481f      	ldr	r0, [pc, #124]	; (4804 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    4788:	2400      	movs	r4, #0
    478a:	2104      	movs	r1, #4
    478c:	7004      	strb	r4, [r0, #0]
    478e:	1e80      	subs	r0, r0, #2
    4790:	7001      	strb	r1, [r0, #0]
    4792:	0589      	lsls	r1, r1, #22
    4794:	60c4      	str	r4, [r0, #12]
    4796:	6081      	str	r1, [r0, #8]
    4798:	f7ff fc82 	bl	40a0 <MPSL_IRQ_TIMER0_Handler+0x100>
    479c:	2501      	movs	r5, #1
    479e:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    47a2:	02eb      	lsls	r3, r5, #11
    47a4:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    47a8:	f3bf 8f4f 	dsb	sy
    47ac:	f3bf 8f6f 	isb	sy
    47b0:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    47b4:	4814      	ldr	r0, [pc, #80]	; (4808 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    47b6:	6045      	str	r5, [r0, #4]
    47b8:	6085      	str	r5, [r0, #8]
    47ba:	4914      	ldr	r1, [pc, #80]	; (480c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    47bc:	680a      	ldr	r2, [r1, #0]
    47be:	2a00      	cmp	r2, #0
    47c0:	d1fc      	bne.n	47bc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    47c2:	1e51      	subs	r1, r2, #1
    47c4:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    47c8:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    47cc:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    47d0:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    47d4:	490e      	ldr	r1, [pc, #56]	; (4810 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    47d6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    47da:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    47de:	1d09      	adds	r1, r1, #4
    47e0:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    47e4:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    47e8:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    47ec:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    47f0:	6005      	str	r5, [r0, #0]
    47f2:	f44f 7182 	mov.w	r1, #260	; 0x104
    47f6:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    47fa:	2102      	movs	r1, #2
    47fc:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    4800:	bd70      	pop	{r4, r5, r6, pc}
    4802:	0000      	.short	0x0000
    4804:	2000004a 	.word	0x2000004a
    4808:	4000b000 	.word	0x4000b000
    480c:	4000b504 	.word	0x4000b504
    4810:	4000b004 	.word	0x4000b004

00004814 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    4814:	4808      	ldr	r0, [pc, #32]	; (4838 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    4816:	f990 0000 	ldrsb.w	r0, [r0]
    481a:	2800      	cmp	r0, #0
    481c:	bfb8      	it	lt
    481e:	4770      	bxlt	lr
    4820:	f000 011f 	and.w	r1, r0, #31
    4824:	2201      	movs	r2, #1
    4826:	fa02 f101 	lsl.w	r1, r2, r1
    482a:	0940      	lsrs	r0, r0, #5
    482c:	0080      	lsls	r0, r0, #2
    482e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4832:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4836:	4770      	bx	lr
    4838:	20000328 	.word	0x20000328

0000483c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    483c:	4803      	ldr	r0, [pc, #12]	; (484c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    483e:	7800      	ldrb	r0, [r0, #0]
    4840:	2803      	cmp	r0, #3
    4842:	bf0c      	ite	eq
    4844:	2001      	moveq	r0, #1
    4846:	2000      	movne	r0, #0
    4848:	4770      	bx	lr
    484a:	0000      	.short	0x0000
    484c:	20000314 	.word	0x20000314

00004850 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    4850:	4801      	ldr	r0, [pc, #4]	; (4858 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    4852:	8840      	ldrh	r0, [r0, #2]
    4854:	4770      	bx	lr
    4856:	0000      	.short	0x0000
    4858:	20000314 	.word	0x20000314

0000485c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    485c:	4803      	ldr	r0, [pc, #12]	; (486c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    485e:	7800      	ldrb	r0, [r0, #0]
    4860:	2802      	cmp	r0, #2
    4862:	bf16      	itet	ne
    4864:	2803      	cmpne	r0, #3
    4866:	2001      	moveq	r0, #1
    4868:	2000      	movne	r0, #0
    486a:	4770      	bx	lr
    486c:	20000314 	.word	0x20000314

00004870 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    4870:	4802      	ldr	r0, [pc, #8]	; (487c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    4872:	2100      	movs	r1, #0
    4874:	7001      	strb	r1, [r0, #0]
    4876:	8041      	strh	r1, [r0, #2]
    4878:	4770      	bx	lr
    487a:	0000      	.short	0x0000
    487c:	20000314 	.word	0x20000314

00004880 <MPSL_IRQ_CLOCK_Handler>:
    4880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4884:	4c16      	ldr	r4, [pc, #88]	; (48e0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    4886:	7a60      	ldrb	r0, [r4, #9]
    4888:	2800      	cmp	r0, #0
    488a:	d027      	beq.n	48dc <MPSL_IRQ_CLOCK_Handler+0x5c>
    488c:	f44f 7180 	mov.w	r1, #256	; 0x100
    4890:	058d      	lsls	r5, r1, #22
    4892:	4628      	mov	r0, r5
    4894:	f008 fe9d 	bl	d5d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4898:	4680      	mov	r8, r0
    489a:	f44f 7182 	mov.w	r1, #260	; 0x104
    489e:	4628      	mov	r0, r5
    48a0:	f008 fe97 	bl	d5d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    48a4:	2600      	movs	r6, #0
    48a6:	4607      	mov	r7, r0
    48a8:	f1b8 0f00 	cmp.w	r8, #0
    48ac:	d009      	beq.n	48c2 <MPSL_IRQ_CLOCK_Handler+0x42>
    48ae:	2001      	movs	r0, #1
    48b0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    48b4:	7920      	ldrb	r0, [r4, #4]
    48b6:	b120      	cbz	r0, 48c2 <MPSL_IRQ_CLOCK_Handler+0x42>
    48b8:	7126      	strb	r6, [r4, #4]
    48ba:	69e0      	ldr	r0, [r4, #28]
    48bc:	b108      	cbz	r0, 48c2 <MPSL_IRQ_CLOCK_Handler+0x42>
    48be:	4780      	blx	r0
    48c0:	61e6      	str	r6, [r4, #28]
    48c2:	b137      	cbz	r7, 48d2 <MPSL_IRQ_CLOCK_Handler+0x52>
    48c4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    48c8:	2002      	movs	r0, #2
    48ca:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    48ce:	f000 fa6b 	bl	4da8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    48d2:	4640      	mov	r0, r8
    48d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    48d8:	f000 b858 	b.w	498c <MPSL_IRQ_CLOCK_Handler+0x10c>
    48dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48e0:	20000058 	.word	0x20000058
    48e4:	b510      	push	{r4, lr}
    48e6:	f008 ff1e 	bl	d726 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    48ea:	b930      	cbnz	r0, 48fa <MPSL_IRQ_CLOCK_Handler+0x7a>
    48ec:	f008 ff3c 	bl	d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    48f0:	b918      	cbnz	r0, 48fa <MPSL_IRQ_CLOCK_Handler+0x7a>
    48f2:	f008 ff6f 	bl	d7d4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    48f6:	2800      	cmp	r0, #0
    48f8:	d002      	beq.n	4900 <MPSL_IRQ_CLOCK_Handler+0x80>
    48fa:	4902      	ldr	r1, [pc, #8]	; (4904 <MPSL_IRQ_CLOCK_Handler+0x84>)
    48fc:	2002      	movs	r0, #2
    48fe:	6008      	str	r0, [r1, #0]
    4900:	bd10      	pop	{r4, pc}
    4902:	0000      	.short	0x0000
    4904:	40000c34 	.word	0x40000c34
    4908:	b570      	push	{r4, r5, r6, lr}
    490a:	f000 f991 	bl	4c30 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    490e:	f000 fa9f 	bl	4e50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4912:	4c09      	ldr	r4, [pc, #36]	; (4938 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    4914:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4918:	b130      	cbz	r0, 4928 <MPSL_IRQ_CLOCK_Handler+0xa8>
    491a:	f7ff ffe3 	bl	48e4 <MPSL_IRQ_CLOCK_Handler+0x64>
    491e:	2001      	movs	r0, #1
    4920:	6128      	str	r0, [r5, #16]
    4922:	2004      	movs	r0, #4
    4924:	72a0      	strb	r0, [r4, #10]
    4926:	e004      	b.n	4932 <MPSL_IRQ_CLOCK_Handler+0xb2>
    4928:	2003      	movs	r0, #3
    492a:	72a0      	strb	r0, [r4, #10]
    492c:	2001      	movs	r0, #1
    492e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4932:	2000      	movs	r0, #0
    4934:	71e0      	strb	r0, [r4, #7]
    4936:	bd70      	pop	{r4, r5, r6, pc}
    4938:	20000058 	.word	0x20000058
    493c:	b570      	push	{r4, r5, r6, lr}
    493e:	4c12      	ldr	r4, [pc, #72]	; (4988 <MPSL_IRQ_CLOCK_Handler+0x108>)
    4940:	79a0      	ldrb	r0, [r4, #6]
    4942:	b1e0      	cbz	r0, 497e <MPSL_IRQ_CLOCK_Handler+0xfe>
    4944:	79e1      	ldrb	r1, [r4, #7]
    4946:	1e40      	subs	r0, r0, #1
    4948:	4281      	cmp	r1, r0
    494a:	da18      	bge.n	497e <MPSL_IRQ_CLOCK_Handler+0xfe>
    494c:	f000 fa80 	bl	4e50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4950:	4605      	mov	r5, r0
    4952:	f000 fb69 	bl	5028 <mpsl_temperature_get>
    4956:	79a1      	ldrb	r1, [r4, #6]
    4958:	2901      	cmp	r1, #1
    495a:	d902      	bls.n	4962 <MPSL_IRQ_CLOCK_Handler+0xe2>
    495c:	79e1      	ldrb	r1, [r4, #7]
    495e:	1c49      	adds	r1, r1, #1
    4960:	71e1      	strb	r1, [r4, #7]
    4962:	b10d      	cbz	r5, 4968 <MPSL_IRQ_CLOCK_Handler+0xe8>
    4964:	6961      	ldr	r1, [r4, #20]
    4966:	e000      	b.n	496a <MPSL_IRQ_CLOCK_Handler+0xea>
    4968:	6921      	ldr	r1, [r4, #16]
    496a:	1a41      	subs	r1, r0, r1
    496c:	2902      	cmp	r1, #2
    496e:	da02      	bge.n	4976 <MPSL_IRQ_CLOCK_Handler+0xf6>
    4970:	f111 0f02 	cmn.w	r1, #2
    4974:	dc07      	bgt.n	4986 <MPSL_IRQ_CLOCK_Handler+0x106>
    4976:	b10d      	cbz	r5, 497c <MPSL_IRQ_CLOCK_Handler+0xfc>
    4978:	6160      	str	r0, [r4, #20]
    497a:	e000      	b.n	497e <MPSL_IRQ_CLOCK_Handler+0xfe>
    497c:	6120      	str	r0, [r4, #16]
    497e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4982:	f7ff bfc1 	b.w	4908 <MPSL_IRQ_CLOCK_Handler+0x88>
    4986:	bd70      	pop	{r4, r5, r6, pc}
    4988:	20000058 	.word	0x20000058
    498c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4990:	4606      	mov	r6, r0
    4992:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4996:	f44f 7186 	mov.w	r1, #268	; 0x10c
    499a:	4628      	mov	r0, r5
    499c:	f008 fe19 	bl	d5d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    49a0:	4680      	mov	r8, r0
    49a2:	f44f 7188 	mov.w	r1, #272	; 0x110
    49a6:	4628      	mov	r0, r5
    49a8:	f008 fe13 	bl	d5d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    49ac:	4c27      	ldr	r4, [pc, #156]	; (4a4c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    49ae:	4682      	mov	sl, r0
    49b0:	7827      	ldrb	r7, [r4, #0]
    49b2:	f104 0008 	add.w	r0, r4, #8
    49b6:	f008 fe80 	bl	d6ba <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    49ba:	b110      	cbz	r0, 49c2 <MPSL_IRQ_CLOCK_Handler+0x142>
    49bc:	f240 11b9 	movw	r1, #441	; 0x1b9
    49c0:	e016      	b.n	49f0 <MPSL_IRQ_CLOCK_Handler+0x170>
    49c2:	f04f 0901 	mov.w	r9, #1
    49c6:	b146      	cbz	r6, 49da <MPSL_IRQ_CLOCK_Handler+0x15a>
    49c8:	7aa0      	ldrb	r0, [r4, #10]
    49ca:	2803      	cmp	r0, #3
    49cc:	d105      	bne.n	49da <MPSL_IRQ_CLOCK_Handler+0x15a>
    49ce:	2004      	movs	r0, #4
    49d0:	72a0      	strb	r0, [r4, #10]
    49d2:	f7ff ff87 	bl	48e4 <MPSL_IRQ_CLOCK_Handler+0x64>
    49d6:	f8c5 9010 	str.w	r9, [r5, #16]
    49da:	2600      	movs	r6, #0
    49dc:	f1b8 0f00 	cmp.w	r8, #0
    49e0:	d018      	beq.n	4a14 <MPSL_IRQ_CLOCK_Handler+0x194>
    49e2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    49e6:	7aa0      	ldrb	r0, [r4, #10]
    49e8:	2804      	cmp	r0, #4
    49ea:	d004      	beq.n	49f6 <MPSL_IRQ_CLOCK_Handler+0x176>
    49ec:	f240 11cb 	movw	r1, #459	; 0x1cb
    49f0:	206d      	movs	r0, #109	; 0x6d
    49f2:	f000 faa5 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    49f6:	f008 fe96 	bl	d726 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    49fa:	b928      	cbnz	r0, 4a08 <MPSL_IRQ_CLOCK_Handler+0x188>
    49fc:	f008 feb4 	bl	d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4a00:	b910      	cbnz	r0, 4a08 <MPSL_IRQ_CLOCK_Handler+0x188>
    4a02:	f008 fee7 	bl	d7d4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4a06:	b108      	cbz	r0, 4a0c <MPSL_IRQ_CLOCK_Handler+0x18c>
    4a08:	4811      	ldr	r0, [pc, #68]	; (4a50 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4a0a:	6006      	str	r6, [r0, #0]
    4a0c:	2002      	movs	r0, #2
    4a0e:	72a0      	strb	r0, [r4, #10]
    4a10:	f000 f8f2 	bl	4bf8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4a14:	f1ba 0f00 	cmp.w	sl, #0
    4a18:	d008      	beq.n	4a2c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    4a1a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    4a1e:	7aa0      	ldrb	r0, [r4, #10]
    4a20:	2802      	cmp	r0, #2
    4a22:	d101      	bne.n	4a28 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    4a24:	f7ff ff8a 	bl	493c <MPSL_IRQ_CLOCK_Handler+0xbc>
    4a28:	f8c5 9014 	str.w	r9, [r5, #20]
    4a2c:	b13f      	cbz	r7, 4a3e <MPSL_IRQ_CLOCK_Handler+0x1be>
    4a2e:	7026      	strb	r6, [r4, #0]
    4a30:	7aa0      	ldrb	r0, [r4, #10]
    4a32:	2802      	cmp	r0, #2
    4a34:	d101      	bne.n	4a3a <MPSL_IRQ_CLOCK_Handler+0x1ba>
    4a36:	f7ff ff67 	bl	4908 <MPSL_IRQ_CLOCK_Handler+0x88>
    4a3a:	f000 f8dd 	bl	4bf8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4a3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a42:	4802      	ldr	r0, [pc, #8]	; (4a4c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4a44:	3008      	adds	r0, #8
    4a46:	f008 be4f 	b.w	d6e8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4a4a:	0000      	.short	0x0000
    4a4c:	20000058 	.word	0x20000058
    4a50:	40000c34 	.word	0x40000c34
    4a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a58:	4c5f      	ldr	r4, [pc, #380]	; (4bd8 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4a5a:	2700      	movs	r7, #0
    4a5c:	4606      	mov	r6, r0
    4a5e:	61a7      	str	r7, [r4, #24]
    4a60:	7842      	ldrb	r2, [r0, #1]
    4a62:	7881      	ldrb	r1, [r0, #2]
    4a64:	7800      	ldrb	r0, [r0, #0]
    4a66:	72e0      	strb	r0, [r4, #11]
    4a68:	7162      	strb	r2, [r4, #5]
    4a6a:	71a1      	strb	r1, [r4, #6]
    4a6c:	71e7      	strb	r7, [r4, #7]
    4a6e:	f04f 0801 	mov.w	r8, #1
    4a72:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4a76:	2805      	cmp	r0, #5
    4a78:	d225      	bcs.n	4ac6 <MPSL_IRQ_CLOCK_Handler+0x246>
    4a7a:	e8df f000 	tbb	[pc, r0]
    4a7e:	0310      	.short	0x0310
    4a80:	00222006 	.word	0x00222006
    4a84:	f8c4 8018 	str.w	r8, [r4, #24]
    4a88:	e009      	b.n	4a9e <MPSL_IRQ_CLOCK_Handler+0x21e>
    4a8a:	f000 f8d1 	bl	4c30 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4a8e:	2101      	movs	r1, #1
    4a90:	4628      	mov	r0, r5
    4a92:	f008 fda3 	bl	d5dc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4a96:	2800      	cmp	r0, #0
    4a98:	d0f9      	beq.n	4a8e <MPSL_IRQ_CLOCK_Handler+0x20e>
    4a9a:	2002      	movs	r0, #2
    4a9c:	61a0      	str	r0, [r4, #24]
    4a9e:	f008 fdc9 	bl	d634 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    4aa2:	b1b0      	cbz	r0, 4ad2 <MPSL_IRQ_CLOCK_Handler+0x252>
    4aa4:	f000 f9ee 	bl	4e84 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4aa8:	7e21      	ldrb	r1, [r4, #24]
    4aaa:	f001 0103 	and.w	r1, r1, #3
    4aae:	4288      	cmp	r0, r1
    4ab0:	d10f      	bne.n	4ad2 <MPSL_IRQ_CLOCK_Handler+0x252>
    4ab2:	79b0      	ldrb	r0, [r6, #6]
    4ab4:	b150      	cbz	r0, 4acc <MPSL_IRQ_CLOCK_Handler+0x24c>
    4ab6:	2002      	movs	r0, #2
    4ab8:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4abc:	e070      	b.n	4ba0 <MPSL_IRQ_CLOCK_Handler+0x320>
    4abe:	4847      	ldr	r0, [pc, #284]	; (4bdc <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4ac0:	e7ec      	b.n	4a9c <MPSL_IRQ_CLOCK_Handler+0x21c>
    4ac2:	4847      	ldr	r0, [pc, #284]	; (4be0 <MPSL_IRQ_CLOCK_Handler+0x360>)
    4ac4:	e7ea      	b.n	4a9c <MPSL_IRQ_CLOCK_Handler+0x21c>
    4ac6:	f240 313a 	movw	r1, #826	; 0x33a
    4aca:	e04d      	b.n	4b68 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    4acc:	f000 f9ae 	bl	4e2c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4ad0:	e066      	b.n	4ba0 <MPSL_IRQ_CLOCK_Handler+0x320>
    4ad2:	f8c5 800c 	str.w	r8, [r5, #12]
    4ad6:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4ada:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4ade:	69a0      	ldr	r0, [r4, #24]
    4ae0:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    4ae4:	f008 fe0b 	bl	d6fe <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4ae8:	b940      	cbnz	r0, 4afc <MPSL_IRQ_CLOCK_Handler+0x27c>
    4aea:	f008 fe12 	bl	d712 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4aee:	b928      	cbnz	r0, 4afc <MPSL_IRQ_CLOCK_Handler+0x27c>
    4af0:	f008 fe26 	bl	d740 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4af4:	b910      	cbnz	r0, 4afc <MPSL_IRQ_CLOCK_Handler+0x27c>
    4af6:	f008 fe37 	bl	d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4afa:	b138      	cbz	r0, 4b0c <MPSL_IRQ_CLOCK_Handler+0x28c>
    4afc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    4b00:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    4b04:	4937      	ldr	r1, [pc, #220]	; (4be4 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4b06:	f3c0 3042 	ubfx	r0, r0, #13, #3
    4b0a:	6008      	str	r0, [r1, #0]
    4b0c:	f008 fdf7 	bl	d6fe <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4b10:	b940      	cbnz	r0, 4b24 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4b12:	f008 fdfe 	bl	d712 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4b16:	b928      	cbnz	r0, 4b24 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4b18:	f008 fe12 	bl	d740 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4b1c:	b910      	cbnz	r0, 4b24 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4b1e:	f008 fe23 	bl	d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4b22:	b118      	cbz	r0, 4b2c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    4b24:	492f      	ldr	r1, [pc, #188]	; (4be4 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4b26:	3110      	adds	r1, #16
    4b28:	f8c1 8000 	str.w	r8, [r1]
    4b2c:	f8c5 8008 	str.w	r8, [r5, #8]
    4b30:	2002      	movs	r0, #2
    4b32:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4b36:	79b0      	ldrb	r0, [r6, #6]
    4b38:	bb90      	cbnz	r0, 4ba0 <MPSL_IRQ_CLOCK_Handler+0x320>
    4b3a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4b3e:	f010 0f02 	tst.w	r0, #2
    4b42:	d00f      	beq.n	4b64 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4b44:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4be8 <MPSL_IRQ_CLOCK_Handler+0x368>
    4b48:	f8d9 1000 	ldr.w	r1, [r9]
    4b4c:	43c9      	mvns	r1, r1
    4b4e:	f341 1100 	sbfx	r1, r1, #4, #1
    4b52:	f101 0801 	add.w	r8, r1, #1
    4b56:	f8d9 1000 	ldr.w	r1, [r9]
    4b5a:	f041 0110 	orr.w	r1, r1, #16
    4b5e:	f8c9 1000 	str.w	r1, [r9]
    4b62:	e007      	b.n	4b74 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    4b64:	f240 21fb 	movw	r1, #763	; 0x2fb
    4b68:	206d      	movs	r0, #109	; 0x6d
    4b6a:	f000 f9e9 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4b6e:	bf00      	nop
    4b70:	f000 fb10 	bl	5194 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4b74:	4651      	mov	r1, sl
    4b76:	4628      	mov	r0, r5
    4b78:	f008 fd2b 	bl	d5d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4b7c:	2800      	cmp	r0, #0
    4b7e:	d0f7      	beq.n	4b70 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4b80:	f000 f954 	bl	4e2c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4b84:	f1b8 0f00 	cmp.w	r8, #0
    4b88:	d105      	bne.n	4b96 <MPSL_IRQ_CLOCK_Handler+0x316>
    4b8a:	f8d9 1000 	ldr.w	r1, [r9]
    4b8e:	f021 0110 	bic.w	r1, r1, #16
    4b92:	f8c9 1000 	str.w	r1, [r9]
    4b96:	2002      	movs	r0, #2
    4b98:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4b9c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4ba0:	79a0      	ldrb	r0, [r4, #6]
    4ba2:	b170      	cbz	r0, 4bc2 <MPSL_IRQ_CLOCK_Handler+0x342>
    4ba4:	7830      	ldrb	r0, [r6, #0]
    4ba6:	b960      	cbnz	r0, 4bc2 <MPSL_IRQ_CLOCK_Handler+0x342>
    4ba8:	f000 f952 	bl	4e50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4bac:	4606      	mov	r6, r0
    4bae:	f000 fa3b 	bl	5028 <mpsl_temperature_get>
    4bb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4bb6:	b116      	cbz	r6, 4bbe <MPSL_IRQ_CLOCK_Handler+0x33e>
    4bb8:	e9c4 1004 	strd	r1, r0, [r4, #16]
    4bbc:	e001      	b.n	4bc2 <MPSL_IRQ_CLOCK_Handler+0x342>
    4bbe:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4bc2:	2101      	movs	r1, #1
    4bc4:	4628      	mov	r0, r5
    4bc6:	f008 fd09 	bl	d5dc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4bca:	b108      	cbz	r0, 4bd0 <MPSL_IRQ_CLOCK_Handler+0x350>
    4bcc:	f000 f93a 	bl	4e44 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4bd0:	72a7      	strb	r7, [r4, #10]
    4bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bd6:	0000      	.short	0x0000
    4bd8:	20000058 	.word	0x20000058
    4bdc:	00020001 	.word	0x00020001
    4be0:	00030001 	.word	0x00030001
    4be4:	4000053c 	.word	0x4000053c
    4be8:	e000ed10 	.word	0xe000ed10

00004bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    4bec:	4801      	ldr	r0, [pc, #4]	; (4bf4 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    4bee:	89c0      	ldrh	r0, [r0, #14]
    4bf0:	4770      	bx	lr
    4bf2:	0000      	.short	0x0000
    4bf4:	20000058 	.word	0x20000058

00004bf8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4bf8:	b510      	push	{r4, lr}
    4bfa:	f3ef 8410 	mrs	r4, PRIMASK
    4bfe:	b672      	cpsid	i
    4c00:	480a      	ldr	r0, [pc, #40]	; (4c2c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    4c02:	7841      	ldrb	r1, [r0, #1]
    4c04:	b129      	cbz	r1, 4c12 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4c06:	7841      	ldrb	r1, [r0, #1]
    4c08:	1e49      	subs	r1, r1, #1
    4c0a:	7041      	strb	r1, [r0, #1]
    4c0c:	7841      	ldrb	r1, [r0, #1]
    4c0e:	b129      	cbz	r1, 4c1c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4c10:	e008      	b.n	4c24 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4c12:	f44f 718e 	mov.w	r1, #284	; 0x11c
    4c16:	206d      	movs	r0, #109	; 0x6d
    4c18:	f000 f992 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4c1c:	7880      	ldrb	r0, [r0, #2]
    4c1e:	b908      	cbnz	r0, 4c24 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4c20:	f000 f924 	bl	4e6c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4c24:	2c00      	cmp	r4, #0
    4c26:	d100      	bne.n	4c2a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4c28:	b662      	cpsie	i
    4c2a:	bd10      	pop	{r4, pc}
    4c2c:	20000058 	.word	0x20000058

00004c30 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4c30:	b510      	push	{r4, lr}
    4c32:	f3ef 8410 	mrs	r4, PRIMASK
    4c36:	b672      	cpsid	i
    4c38:	4806      	ldr	r0, [pc, #24]	; (4c54 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    4c3a:	7841      	ldrb	r1, [r0, #1]
    4c3c:	1c49      	adds	r1, r1, #1
    4c3e:	7041      	strb	r1, [r0, #1]
    4c40:	7840      	ldrb	r0, [r0, #1]
    4c42:	2801      	cmp	r0, #1
    4c44:	d101      	bne.n	4c4a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4c46:	f008 fce0 	bl	d60a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    4c4a:	2c00      	cmp	r4, #0
    4c4c:	d100      	bne.n	4c50 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    4c4e:	b662      	cpsie	i
    4c50:	bd10      	pop	{r4, pc}
    4c52:	0000      	.short	0x0000
    4c54:	20000058 	.word	0x20000058

00004c58 <mpsl_clock_hfclk_release>:
    4c58:	4805      	ldr	r0, [pc, #20]	; (4c70 <mpsl_clock_hfclk_release+0x18>)
    4c5a:	b510      	push	{r4, lr}
    4c5c:	78c1      	ldrb	r1, [r0, #3]
    4c5e:	b121      	cbz	r1, 4c6a <mpsl_clock_hfclk_release+0x12>
    4c60:	2100      	movs	r1, #0
    4c62:	7101      	strb	r1, [r0, #4]
    4c64:	70c1      	strb	r1, [r0, #3]
    4c66:	f7ff ffc7 	bl	4bf8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4c6a:	2000      	movs	r0, #0
    4c6c:	bd10      	pop	{r4, pc}
    4c6e:	0000      	.short	0x0000
    4c70:	20000058 	.word	0x20000058

00004c74 <mpsl_clock_hfclk_request>:
    4c74:	b570      	push	{r4, r5, r6, lr}
    4c76:	4c0c      	ldr	r4, [pc, #48]	; (4ca8 <mpsl_clock_hfclk_request+0x34>)
    4c78:	78e1      	ldrb	r1, [r4, #3]
    4c7a:	b961      	cbnz	r1, 4c96 <mpsl_clock_hfclk_request+0x22>
    4c7c:	2501      	movs	r5, #1
    4c7e:	70e5      	strb	r5, [r4, #3]
    4c80:	61e0      	str	r0, [r4, #28]
    4c82:	f7ff ffd5 	bl	4c30 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4c86:	f000 f8e3 	bl	4e50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4c8a:	b130      	cbz	r0, 4c9a <mpsl_clock_hfclk_request+0x26>
    4c8c:	69e0      	ldr	r0, [r4, #28]
    4c8e:	b110      	cbz	r0, 4c96 <mpsl_clock_hfclk_request+0x22>
    4c90:	4780      	blx	r0
    4c92:	2000      	movs	r0, #0
    4c94:	61e0      	str	r0, [r4, #28]
    4c96:	2000      	movs	r0, #0
    4c98:	bd70      	pop	{r4, r5, r6, pc}
    4c9a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4c9e:	7125      	strb	r5, [r4, #4]
    4ca0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4ca4:	e7f7      	b.n	4c96 <mpsl_clock_hfclk_request+0x22>
    4ca6:	0000      	.short	0x0000
    4ca8:	20000058 	.word	0x20000058

00004cac <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cb0:	0005      	movs	r5, r0
    4cb2:	f06f 0015 	mvn.w	r0, #21
    4cb6:	d03f      	beq.n	4d38 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4cb8:	7829      	ldrb	r1, [r5, #0]
    4cba:	2904      	cmp	r1, #4
    4cbc:	d83c      	bhi.n	4d38 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4cbe:	2900      	cmp	r1, #0
    4cc0:	7869      	ldrb	r1, [r5, #1]
    4cc2:	d03b      	beq.n	4d3c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    4cc4:	2900      	cmp	r1, #0
    4cc6:	d137      	bne.n	4d38 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4cc8:	78a9      	ldrb	r1, [r5, #2]
    4cca:	2900      	cmp	r1, #0
    4ccc:	d134      	bne.n	4d38 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4cce:	2000      	movs	r0, #0
    4cd0:	f008 fc4a 	bl	d568 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    4cd4:	2000      	movs	r0, #0
    4cd6:	f008 fc3a 	bl	d54e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4cda:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4cde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4ce2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    4ce6:	2600      	movs	r6, #0
    4ce8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4cec:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4cf0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4cf4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    4cf8:	4c14      	ldr	r4, [pc, #80]	; (4d4c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    4cfa:	7066      	strb	r6, [r4, #1]
    4cfc:	88a8      	ldrh	r0, [r5, #4]
    4cfe:	81a0      	strh	r0, [r4, #12]
    4d00:	f008 fc7a 	bl	d5f8 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4d04:	2701      	movs	r7, #1
    4d06:	b108      	cbz	r0, 4d0c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4d08:	70e7      	strb	r7, [r4, #3]
    4d0a:	7067      	strb	r7, [r4, #1]
    4d0c:	2101      	movs	r1, #1
    4d0e:	4640      	mov	r0, r8
    4d10:	f008 fc64 	bl	d5dc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4d14:	b108      	cbz	r0, 4d1a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    4d16:	f000 f895 	bl	4e44 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4d1a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    4d1e:	81e0      	strh	r0, [r4, #14]
    4d20:	4628      	mov	r0, r5
    4d22:	f7ff fe97 	bl	4a54 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    4d26:	7267      	strb	r7, [r4, #9]
    4d28:	2000      	movs	r0, #0
    4d2a:	f008 fc10 	bl	d54e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    4d2e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4d32:	4630      	mov	r0, r6
    4d34:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    4d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d3c:	2900      	cmp	r1, #0
    4d3e:	d0fb      	beq.n	4d38 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d40:	2920      	cmp	r1, #32
    4d42:	d8f9      	bhi.n	4d38 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d44:	78a9      	ldrb	r1, [r5, #2]
    4d46:	2921      	cmp	r1, #33	; 0x21
    4d48:	d9c1      	bls.n	4cce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4d4a:	e7f5      	b.n	4d38 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4d4c:	20000058 	.word	0x20000058

00004d50 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4d50:	4801      	ldr	r0, [pc, #4]	; (4d58 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    4d52:	8980      	ldrh	r0, [r0, #12]
    4d54:	4770      	bx	lr
    4d56:	0000      	.short	0x0000
    4d58:	20000058 	.word	0x20000058

00004d5c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    4d5c:	b510      	push	{r4, lr}
    4d5e:	480d      	ldr	r0, [pc, #52]	; (4d94 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4d60:	f008 fcab 	bl	d6ba <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4d64:	490b      	ldr	r1, [pc, #44]	; (4d94 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4d66:	3908      	subs	r1, #8
    4d68:	b148      	cbz	r0, 4d7e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    4d6a:	2001      	movs	r0, #1
    4d6c:	7008      	strb	r0, [r1, #0]
    4d6e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4d72:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d7a:	f7ff bf59 	b.w	4c30 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4d7e:	7a88      	ldrb	r0, [r1, #10]
    4d80:	2802      	cmp	r0, #2
    4d82:	d101      	bne.n	4d88 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4d84:	f7ff fdc0 	bl	4908 <MPSL_IRQ_CLOCK_Handler+0x88>
    4d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d8c:	4801      	ldr	r0, [pc, #4]	; (4d94 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4d8e:	f008 bcab 	b.w	d6e8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4d92:	0000      	.short	0x0000
    4d94:	20000060 	.word	0x20000060

00004d98 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4d98:	4802      	ldr	r0, [pc, #8]	; (4da4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    4d9a:	7a80      	ldrb	r0, [r0, #10]
    4d9c:	2800      	cmp	r0, #0
    4d9e:	d000      	beq.n	4da2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4da0:	2001      	movs	r0, #1
    4da2:	4770      	bx	lr
    4da4:	20000058 	.word	0x20000058

00004da8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4daa:	4d1f      	ldr	r5, [pc, #124]	; (4e28 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4dac:	7ae8      	ldrb	r0, [r5, #11]
    4dae:	2800      	cmp	r0, #0
    4db0:	d10f      	bne.n	4dd2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4db2:	7e28      	ldrb	r0, [r5, #24]
    4db4:	f000 0003 	and.w	r0, r0, #3
    4db8:	f008 fc2c 	bl	d614 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4dbc:	2800      	cmp	r0, #0
    4dbe:	d008      	beq.n	4dd2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4dc0:	f3ef 8110 	mrs	r1, PRIMASK
    4dc4:	b672      	cpsid	i
    4dc6:	f7ff ffe7 	bl	4d98 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4dca:	b118      	cbz	r0, 4dd4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4dcc:	2900      	cmp	r1, #0
    4dce:	d100      	bne.n	4dd2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4dd0:	b662      	cpsie	i
    4dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4dd4:	2601      	movs	r6, #1
    4dd6:	72ae      	strb	r6, [r5, #10]
    4dd8:	b901      	cbnz	r1, 4ddc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4dda:	b662      	cpsie	i
    4ddc:	2018      	movs	r0, #24
    4dde:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4de2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4de6:	61a6      	str	r6, [r4, #24]
    4de8:	f44f 7020 	mov.w	r0, #640	; 0x280
    4dec:	f8ad 0000 	strh.w	r0, [sp]
    4df0:	f8bd 0000 	ldrh.w	r0, [sp]
    4df4:	1e41      	subs	r1, r0, #1
    4df6:	f8ad 1000 	strh.w	r1, [sp]
    4dfa:	d2f9      	bcs.n	4df0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4dfc:	2700      	movs	r7, #0
    4dfe:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    4e02:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    4e06:	4808      	ldr	r0, [pc, #32]	; (4e28 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4e08:	3008      	adds	r0, #8
    4e0a:	f008 fc69 	bl	d6e0 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4e0e:	702f      	strb	r7, [r5, #0]
    4e10:	f7ff fd7a 	bl	4908 <MPSL_IRQ_CLOCK_Handler+0x88>
    4e14:	6166      	str	r6, [r4, #20]
    4e16:	7968      	ldrb	r0, [r5, #5]
    4e18:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4e1c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4e20:	2018      	movs	r0, #24
    4e22:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    4e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e28:	20000058 	.word	0x20000058

00004e2c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4e2c:	b510      	push	{r4, lr}
    4e2e:	4c04      	ldr	r4, [pc, #16]	; (4e40 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4e30:	7e20      	ldrb	r0, [r4, #24]
    4e32:	f000 0003 	and.w	r0, r0, #3
    4e36:	f008 fbed 	bl	d614 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4e3a:	2800      	cmp	r0, #0
    4e3c:	d0f8      	beq.n	4e30 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    4e3e:	bd10      	pop	{r4, pc}
    4e40:	20000058 	.word	0x20000058

00004e44 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    4e44:	4901      	ldr	r1, [pc, #4]	; (4e4c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    4e46:	2001      	movs	r0, #1
    4e48:	7008      	strb	r0, [r1, #0]
    4e4a:	4770      	bx	lr
    4e4c:	20000329 	.word	0x20000329

00004e50 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4e50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4e54:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4e58:	b918      	cbnz	r0, 4e62 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    4e5a:	4803      	ldr	r0, [pc, #12]	; (4e68 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    4e5c:	7800      	ldrb	r0, [r0, #0]
    4e5e:	2800      	cmp	r0, #0
    4e60:	d000      	beq.n	4e64 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4e62:	2001      	movs	r0, #1
    4e64:	4770      	bx	lr
    4e66:	0000      	.short	0x0000
    4e68:	20000329 	.word	0x20000329

00004e6c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    4e6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4e70:	2101      	movs	r1, #1
    4e72:	6041      	str	r1, [r0, #4]
    4e74:	2100      	movs	r1, #0
    4e76:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4e7a:	4801      	ldr	r0, [pc, #4]	; (4e80 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    4e7c:	7001      	strb	r1, [r0, #0]
    4e7e:	4770      	bx	lr
    4e80:	20000329 	.word	0x20000329

00004e84 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4e84:	4802      	ldr	r0, [pc, #8]	; (4e90 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4e86:	6800      	ldr	r0, [r0, #0]
    4e88:	f000 0003 	and.w	r0, r0, #3
    4e8c:	4770      	bx	lr
    4e8e:	0000      	.short	0x0000
    4e90:	4000041c 	.word	0x4000041c
    4e94:	b510      	push	{r4, lr}
    4e96:	b131      	cbz	r1, 4ea6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4e98:	2901      	cmp	r1, #1
    4e9a:	d007      	beq.n	4eac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    4e9c:	f240 3102 	movw	r1, #770	; 0x302
    4ea0:	a005      	add	r0, pc, #20	; (adr r0, 4eb8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    4ea2:	f000 f821 	bl	4ee8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4ea6:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    4eaa:	e001      	b.n	4eb0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4eac:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4eb0:	f000 0001 	and.w	r0, r0, #1
    4eb4:	bd10      	pop	{r4, pc}
    4eb6:	0000      	.short	0x0000
    4eb8:	5f66726e 	.word	0x5f66726e
    4ebc:	636f6c63 	.word	0x636f6c63
    4ec0:	00682e6b 	.word	0x00682e6b
    4ec4:	f3bf 8f4f 	dsb	sy
    4ec8:	4805      	ldr	r0, [pc, #20]	; (4ee0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    4eca:	6801      	ldr	r1, [r0, #0]
    4ecc:	4a05      	ldr	r2, [pc, #20]	; (4ee4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    4ece:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4ed2:	4311      	orrs	r1, r2
    4ed4:	6001      	str	r1, [r0, #0]
    4ed6:	f3bf 8f4f 	dsb	sy
    4eda:	bf00      	nop
    4edc:	e7fd      	b.n	4eda <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    4ede:	0000      	.short	0x0000
    4ee0:	e000ed0c 	.word	0xe000ed0c
    4ee4:	05fa0004 	.word	0x05fa0004

00004ee8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4ee8:	b672      	cpsid	i
    4eea:	4a03      	ldr	r2, [pc, #12]	; (4ef8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    4eec:	6852      	ldr	r2, [r2, #4]
    4eee:	b102      	cbz	r2, 4ef2 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    4ef0:	4790      	blx	r2
    4ef2:	f7ff ffe7 	bl	4ec4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4ef6:	0000      	.short	0x0000
    4ef8:	20000078 	.word	0x20000078
    4efc:	4806      	ldr	r0, [pc, #24]	; (4f18 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    4efe:	b510      	push	{r4, lr}
    4f00:	2100      	movs	r1, #0
    4f02:	6001      	str	r1, [r0, #0]
    4f04:	2101      	movs	r1, #1
    4f06:	6001      	str	r1, [r0, #0]
    4f08:	4608      	mov	r0, r1
    4f0a:	f008 fbaa 	bl	d662 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f12:	2001      	movs	r0, #1
    4f14:	f008 bb98 	b.w	d648 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4f18:	40001ffc 	.word	0x40001ffc
    4f1c:	4807      	ldr	r0, [pc, #28]	; (4f3c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    4f1e:	b510      	push	{r4, lr}
    4f20:	2101      	movs	r1, #1
    4f22:	6041      	str	r1, [r0, #4]
    4f24:	1e89      	subs	r1, r1, #2
    4f26:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4f2a:	200c      	movs	r0, #12
    4f2c:	f008 fb99 	bl	d662 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f34:	200c      	movs	r0, #12
    4f36:	f008 bb87 	b.w	d648 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4f3a:	0000      	.short	0x0000
    4f3c:	4000c000 	.word	0x4000c000

00004f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4f40:	b50e      	push	{r1, r2, r3, lr}
    4f42:	b672      	cpsid	i
    4f44:	4a0f      	ldr	r2, [pc, #60]	; (4f84 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4f46:	6855      	ldr	r5, [r2, #4]
    4f48:	b1d5      	cbz	r5, 4f80 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    4f4a:	2200      	movs	r2, #0
    4f4c:	4603      	mov	r3, r0
    4f4e:	466e      	mov	r6, sp
    4f50:	240a      	movs	r4, #10
    4f52:	e003      	b.n	4f5c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4f54:	fbb0 f0f4 	udiv	r0, r0, r4
    4f58:	1c52      	adds	r2, r2, #1
    4f5a:	b2d2      	uxtb	r2, r2
    4f5c:	2800      	cmp	r0, #0
    4f5e:	d1f9      	bne.n	4f54 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4f60:	54b0      	strb	r0, [r6, r2]
    4f62:	e009      	b.n	4f78 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4f64:	fbb3 f0f4 	udiv	r0, r3, r4
    4f68:	fb04 3010 	mls	r0, r4, r0, r3
    4f6c:	fbb3 f3f4 	udiv	r3, r3, r4
    4f70:	1e52      	subs	r2, r2, #1
    4f72:	b2d2      	uxtb	r2, r2
    4f74:	3030      	adds	r0, #48	; 0x30
    4f76:	54b0      	strb	r0, [r6, r2]
    4f78:	2a00      	cmp	r2, #0
    4f7a:	d1f3      	bne.n	4f64 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    4f7c:	4630      	mov	r0, r6
    4f7e:	47a8      	blx	r5
    4f80:	f7ff ffa0 	bl	4ec4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4f84:	20000078 	.word	0x20000078

00004f88 <mpsl_init>:
    4f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f8c:	4c18      	ldr	r4, [pc, #96]	; (4ff0 <mpsl_init+0x68>)
    4f8e:	4606      	mov	r6, r0
    4f90:	4617      	mov	r7, r2
    4f92:	7860      	ldrb	r0, [r4, #1]
    4f94:	460d      	mov	r5, r1
    4f96:	b118      	cbz	r0, 4fa0 <mpsl_init+0x18>
    4f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fa0:	f7fc fbe6 	bl	1770 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    4fa4:	b906      	cbnz	r6, 4fa8 <mpsl_init+0x20>
    4fa6:	4e13      	ldr	r6, [pc, #76]	; (4ff4 <mpsl_init+0x6c>)
    4fa8:	6067      	str	r7, [r4, #4]
    4faa:	7025      	strb	r5, [r4, #0]
    4fac:	f7ff ffa6 	bl	4efc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4fb0:	f7ff ffb4 	bl	4f1c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    4fb4:	4630      	mov	r0, r6
    4fb6:	f7ff fe79 	bl	4cac <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4fba:	0006      	movs	r6, r0
    4fbc:	d1ee      	bne.n	4f9c <mpsl_init+0x14>
    4fbe:	f7fe fe77 	bl	3cb0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4fc2:	f7ff fef1 	bl	4da8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4fc6:	f008 fa0f 	bl	d3e8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4fca:	4628      	mov	r0, r5
    4fcc:	f008 fb3c 	bl	d648 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4fd0:	2001      	movs	r0, #1
    4fd2:	2d00      	cmp	r5, #0
    4fd4:	db09      	blt.n	4fea <mpsl_init+0x62>
    4fd6:	f005 011f 	and.w	r1, r5, #31
    4fda:	fa00 f101 	lsl.w	r1, r0, r1
    4fde:	096a      	lsrs	r2, r5, #5
    4fe0:	0092      	lsls	r2, r2, #2
    4fe2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4fe6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4fea:	7060      	strb	r0, [r4, #1]
    4fec:	4630      	mov	r0, r6
    4fee:	e7d5      	b.n	4f9c <mpsl_init+0x14>
    4ff0:	20000078 	.word	0x20000078
    4ff4:	0000d684 	.word	0x0000d684

00004ff8 <mpsl_is_initialized>:
    4ff8:	4801      	ldr	r0, [pc, #4]	; (5000 <mpsl_is_initialized+0x8>)
    4ffa:	7840      	ldrb	r0, [r0, #1]
    4ffc:	4770      	bx	lr
    4ffe:	0000      	.short	0x0000
    5000:	20000078 	.word	0x20000078

00005004 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    5004:	4807      	ldr	r0, [pc, #28]	; (5024 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    5006:	f990 0000 	ldrsb.w	r0, [r0]
    500a:	2800      	cmp	r0, #0
    500c:	db09      	blt.n	5022 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    500e:	f000 021f 	and.w	r2, r0, #31
    5012:	2101      	movs	r1, #1
    5014:	4091      	lsls	r1, r2
    5016:	0940      	lsrs	r0, r0, #5
    5018:	0080      	lsls	r0, r0, #2
    501a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    501e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    5022:	4770      	bx	lr
    5024:	20000078 	.word	0x20000078

00005028 <mpsl_temperature_get>:
    5028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    502c:	2601      	movs	r6, #1
    502e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    5032:	0331      	lsls	r1, r6, #12
    5034:	f04f 0800 	mov.w	r8, #0
    5038:	4640      	mov	r0, r8
    503a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    503e:	f3bf 8f4f 	dsb	sy
    5042:	f3bf 8f6f 	isb	sy
    5046:	4c16      	ldr	r4, [pc, #88]	; (50a0 <mpsl_temperature_get+0x78>)
    5048:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    504c:	200c      	movs	r0, #12
    504e:	f008 fb27 	bl	d6a0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    5052:	4d14      	ldr	r5, [pc, #80]	; (50a4 <mpsl_temperature_get+0x7c>)
    5054:	6828      	ldr	r0, [r5, #0]
    5056:	43c0      	mvns	r0, r0
    5058:	f340 1700 	sbfx	r7, r0, #4, #1
    505c:	6828      	ldr	r0, [r5, #0]
    505e:	f040 0010 	orr.w	r0, r0, #16
    5062:	6028      	str	r0, [r5, #0]
    5064:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    5068:	6026      	str	r6, [r4, #0]
    506a:	1c7f      	adds	r7, r7, #1
    506c:	e002      	b.n	5074 <mpsl_temperature_get+0x4c>
    506e:	bf00      	nop
    5070:	f000 f890 	bl	5194 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5074:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    5078:	2800      	cmp	r0, #0
    507a:	d0f9      	beq.n	5070 <mpsl_temperature_get+0x48>
    507c:	b91f      	cbnz	r7, 5086 <mpsl_temperature_get+0x5e>
    507e:	6828      	ldr	r0, [r5, #0]
    5080:	f020 0010 	bic.w	r0, r0, #16
    5084:	6028      	str	r0, [r5, #0]
    5086:	4808      	ldr	r0, [pc, #32]	; (50a8 <mpsl_temperature_get+0x80>)
    5088:	6805      	ldr	r5, [r0, #0]
    508a:	6066      	str	r6, [r4, #4]
    508c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    5090:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5094:	200c      	movs	r0, #12
    5096:	f008 fb03 	bl	d6a0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    509a:	4628      	mov	r0, r5
    509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50a0:	4000c000 	.word	0x4000c000
    50a4:	e000ed10 	.word	0xe000ed10
    50a8:	4000c508 	.word	0x4000c508

000050ac <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    50ac:	b510      	push	{r4, lr}
    50ae:	4602      	mov	r2, r0
    50b0:	2005      	movs	r0, #5
    50b2:	490c      	ldr	r1, [pc, #48]	; (50e4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    50b4:	e004      	b.n	50c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    50b6:	bf00      	nop
    50b8:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    50bc:	791b      	ldrb	r3, [r3, #4]
    50be:	b133      	cbz	r3, 50ce <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    50c0:	1e40      	subs	r0, r0, #1
    50c2:	b2c0      	uxtb	r0, r0
    50c4:	d2f8      	bcs.n	50b8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    50c6:	2148      	movs	r1, #72	; 0x48
    50c8:	2069      	movs	r0, #105	; 0x69
    50ca:	f7ff ff39 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    50ce:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    50d2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    50d6:	2200      	movs	r2, #0
    50d8:	714a      	strb	r2, [r1, #5]
    50da:	718a      	strb	r2, [r1, #6]
    50dc:	2201      	movs	r2, #1
    50de:	710a      	strb	r2, [r1, #4]
    50e0:	bd10      	pop	{r4, pc}
    50e2:	0000      	.short	0x0000
    50e4:	20001204 	.word	0x20001204

000050e8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    50e8:	b510      	push	{r4, lr}
    50ea:	2805      	cmp	r0, #5
    50ec:	d301      	bcc.n	50f2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    50ee:	2158      	movs	r1, #88	; 0x58
    50f0:	e006      	b.n	5100 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    50f2:	490a      	ldr	r1, [pc, #40]	; (511c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    50f4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    50f8:	7901      	ldrb	r1, [r0, #4]
    50fa:	2901      	cmp	r1, #1
    50fc:	d003      	beq.n	5106 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    50fe:	2159      	movs	r1, #89	; 0x59
    5100:	2069      	movs	r0, #105	; 0x69
    5102:	f7ff ff1d 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5106:	7941      	ldrb	r1, [r0, #5]
    5108:	7982      	ldrb	r2, [r0, #6]
    510a:	1c49      	adds	r1, r1, #1
    510c:	b2c9      	uxtb	r1, r1
    510e:	428a      	cmp	r2, r1
    5110:	d000      	beq.n	5114 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    5112:	7141      	strb	r1, [r0, #5]
    5114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5118:	f7ff bf74 	b.w	5004 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    511c:	20001204 	.word	0x20001204

00005120 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    5120:	b570      	push	{r4, r5, r6, lr}
    5122:	2505      	movs	r5, #5
    5124:	4e0e      	ldr	r6, [pc, #56]	; (5160 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    5126:	4c0f      	ldr	r4, [pc, #60]	; (5164 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    5128:	e016      	b.n	5158 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    512a:	7821      	ldrb	r1, [r4, #0]
    512c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    5130:	7902      	ldrb	r2, [r0, #4]
    5132:	2a01      	cmp	r2, #1
    5134:	d108      	bne.n	5148 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    5136:	7942      	ldrb	r2, [r0, #5]
    5138:	7983      	ldrb	r3, [r0, #6]
    513a:	429a      	cmp	r2, r3
    513c:	d004      	beq.n	5148 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    513e:	7942      	ldrb	r2, [r0, #5]
    5140:	7182      	strb	r2, [r0, #6]
    5142:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    5146:	4780      	blx	r0
    5148:	7820      	ldrb	r0, [r4, #0]
    514a:	1c40      	adds	r0, r0, #1
    514c:	b2c0      	uxtb	r0, r0
    514e:	7020      	strb	r0, [r4, #0]
    5150:	2805      	cmp	r0, #5
    5152:	d301      	bcc.n	5158 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    5154:	2000      	movs	r0, #0
    5156:	7020      	strb	r0, [r4, #0]
    5158:	1e6d      	subs	r5, r5, #1
    515a:	b2ed      	uxtb	r5, r5
    515c:	d2e5      	bcs.n	512a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    515e:	bd70      	pop	{r4, r5, r6, pc}
    5160:	20001204 	.word	0x20001204
    5164:	2000032a 	.word	0x2000032a

00005168 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    5168:	b500      	push	{lr}
    516a:	f008 fac8 	bl	d6fe <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    516e:	b940      	cbnz	r0, 5182 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    5170:	f008 facf 	bl	d712 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    5174:	b928      	cbnz	r0, 5182 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    5176:	f008 fae3 	bl	d740 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    517a:	b910      	cbnz	r0, 5182 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    517c:	f008 faf4 	bl	d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    5180:	b108      	cbz	r0, 5186 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    5182:	4802      	ldr	r0, [pc, #8]	; (518c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    5184:	bd00      	pop	{pc}
    5186:	4802      	ldr	r0, [pc, #8]	; (5190 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    5188:	bd00      	pop	{pc}
    518a:	0000      	.short	0x0000
    518c:	4000050c 	.word	0x4000050c
    5190:	4001e700 	.word	0x4001e700

00005194 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    5194:	b510      	push	{r4, lr}
    5196:	f008 fae7 	bl	d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    519a:	b330      	cbz	r0, 51ea <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    519c:	f3ef 8010 	mrs	r0, PRIMASK
    51a0:	b1c8      	cbz	r0, 51d6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    51a2:	2100      	movs	r1, #0
    51a4:	b672      	cpsid	i
    51a6:	4812      	ldr	r0, [pc, #72]	; (51f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    51a8:	6802      	ldr	r2, [r0, #0]
    51aa:	6803      	ldr	r3, [r0, #0]
    51ac:	f3c2 1200 	ubfx	r2, r2, #4, #1
    51b0:	f043 0310 	orr.w	r3, r3, #16
    51b4:	6003      	str	r3, [r0, #0]
    51b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    51ba:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    51be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    51c2:	431c      	orrs	r4, r3
    51c4:	d000      	beq.n	51c8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    51c6:	bf40      	sev
    51c8:	bf20      	wfe
    51ca:	bf00      	nop
    51cc:	bf00      	nop
    51ce:	bf00      	nop
    51d0:	bf00      	nop
    51d2:	b112      	cbz	r2, 51da <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    51d4:	e005      	b.n	51e2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    51d6:	2101      	movs	r1, #1
    51d8:	e7e4      	b.n	51a4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    51da:	6802      	ldr	r2, [r0, #0]
    51dc:	f022 0210 	bic.w	r2, r2, #16
    51e0:	6002      	str	r2, [r0, #0]
    51e2:	2900      	cmp	r1, #0
    51e4:	d000      	beq.n	51e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    51e6:	b662      	cpsie	i
    51e8:	bd10      	pop	{r4, pc}
    51ea:	bf20      	wfe
    51ec:	bd10      	pop	{r4, pc}
    51ee:	0000      	.short	0x0000
    51f0:	e000ed10 	.word	0xe000ed10

000051f4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    51f4:	4901      	ldr	r1, [pc, #4]	; (51fc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    51f6:	2001      	movs	r0, #1
    51f8:	7088      	strb	r0, [r1, #2]
    51fa:	4770      	bx	lr
    51fc:	20000080 	.word	0x20000080

00005200 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    5200:	0000d9b5 0000d9ed 0000d9d7 0000d9c5     ................
    5210:	0000d9d1 0000d9bf 0000d9b3 0000d9b1     ................
    5220:	0000d9e9 0000d9dd 0000d9cb 0000d9b9     ................
    5230:	0000d9ab 0000d9a3 0000d9a7 0000d99d     ................

00005240 <mpsl_fem_disable>:
    5240:	4801      	ldr	r0, [pc, #4]	; (5248 <mpsl_fem_disable+0x8>)
    5242:	6800      	ldr	r0, [r0, #0]
    5244:	6800      	ldr	r0, [r0, #0]
    5246:	4700      	bx	r0
    5248:	20000094 	.word	0x20000094

0000524c <mpsl_fem_lna_configuration_clear>:
    524c:	4801      	ldr	r0, [pc, #4]	; (5254 <mpsl_fem_lna_configuration_clear+0x8>)
    524e:	6800      	ldr	r0, [r0, #0]
    5250:	6940      	ldr	r0, [r0, #20]
    5252:	4700      	bx	r0
    5254:	20000094 	.word	0x20000094

00005258 <mpsl_fem_lna_configuration_set>:
    5258:	4a01      	ldr	r2, [pc, #4]	; (5260 <mpsl_fem_lna_configuration_set+0x8>)
    525a:	6812      	ldr	r2, [r2, #0]
    525c:	68d2      	ldr	r2, [r2, #12]
    525e:	4710      	bx	r2
    5260:	20000094 	.word	0x20000094

00005264 <mpsl_fem_lna_is_configured>:
    5264:	4901      	ldr	r1, [pc, #4]	; (526c <mpsl_fem_lna_is_configured+0x8>)
    5266:	6809      	ldr	r1, [r1, #0]
    5268:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    526a:	4708      	bx	r1
    526c:	20000094 	.word	0x20000094

00005270 <mpsl_fem_pa_configuration_clear>:
    5270:	4801      	ldr	r0, [pc, #4]	; (5278 <mpsl_fem_pa_configuration_clear+0x8>)
    5272:	6800      	ldr	r0, [r0, #0]
    5274:	6900      	ldr	r0, [r0, #16]
    5276:	4700      	bx	r0
    5278:	20000094 	.word	0x20000094

0000527c <mpsl_fem_pa_configuration_set>:
    527c:	4a01      	ldr	r2, [pc, #4]	; (5284 <mpsl_fem_pa_configuration_set+0x8>)
    527e:	6812      	ldr	r2, [r2, #0]
    5280:	6892      	ldr	r2, [r2, #8]
    5282:	4710      	bx	r2
    5284:	20000094 	.word	0x20000094

00005288 <mpsl_fem_pa_gain_set>:
    5288:	4901      	ldr	r1, [pc, #4]	; (5290 <mpsl_fem_pa_gain_set+0x8>)
    528a:	6809      	ldr	r1, [r1, #0]
    528c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    528e:	4708      	bx	r1
    5290:	20000094 	.word	0x20000094

00005294 <mpsl_fem_pa_is_configured>:
    5294:	4901      	ldr	r1, [pc, #4]	; (529c <mpsl_fem_pa_is_configured+0x8>)
    5296:	6809      	ldr	r1, [r1, #0]
    5298:	6a89      	ldr	r1, [r1, #40]	; 0x28
    529a:	4708      	bx	r1
    529c:	20000094 	.word	0x20000094

000052a0 <mpsl_fem_tx_power_split>:
    52a0:	4b01      	ldr	r3, [pc, #4]	; (52a8 <mpsl_fem_tx_power_split+0x8>)
    52a2:	681b      	ldr	r3, [r3, #0]
    52a4:	685b      	ldr	r3, [r3, #4]
    52a6:	4718      	bx	r3
    52a8:	20000094 	.word	0x20000094

000052ac <mpsl_fem_device_config_254_apply_get>:
    52ac:	4801      	ldr	r0, [pc, #4]	; (52b4 <mpsl_fem_device_config_254_apply_get+0x8>)
    52ae:	7800      	ldrb	r0, [r0, #0]
    52b0:	4770      	bx	lr
    52b2:	0000      	.short	0x0000
    52b4:	2000032b 	.word	0x2000032b
    52b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    52ba:	4c14      	ldr	r4, [pc, #80]	; (530c <mpsl_fem_device_config_254_apply_get+0x60>)
    52bc:	7a20      	ldrb	r0, [r4, #8]
    52be:	f88d 0001 	strb.w	r0, [sp, #1]
    52c2:	79e0      	ldrb	r0, [r4, #7]
    52c4:	f88d 0000 	strb.w	r0, [sp]
    52c8:	79a0      	ldrb	r0, [r4, #6]
    52ca:	f8ad 0004 	strh.w	r0, [sp, #4]
    52ce:	7960      	ldrb	r0, [r4, #5]
    52d0:	f8ad 0002 	strh.w	r0, [sp, #2]
    52d4:	4668      	mov	r0, sp
    52d6:	f006 f895 	bl	b404 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    52da:	b108      	cbz	r0, 52e0 <mpsl_fem_device_config_254_apply_get+0x34>
    52dc:	2183      	movs	r1, #131	; 0x83
    52de:	e010      	b.n	5302 <mpsl_fem_device_config_254_apply_get+0x56>
    52e0:	68e0      	ldr	r0, [r4, #12]
    52e2:	9002      	str	r0, [sp, #8]
    52e4:	a802      	add	r0, sp, #8
    52e6:	f006 f8a3 	bl	b430 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    52ea:	b108      	cbz	r0, 52f0 <mpsl_fem_device_config_254_apply_get+0x44>
    52ec:	2187      	movs	r1, #135	; 0x87
    52ee:	e008      	b.n	5302 <mpsl_fem_device_config_254_apply_get+0x56>
    52f0:	4807      	ldr	r0, [pc, #28]	; (5310 <mpsl_fem_device_config_254_apply_get+0x64>)
    52f2:	6800      	ldr	r0, [r0, #0]
    52f4:	9003      	str	r0, [sp, #12]
    52f6:	a803      	add	r0, sp, #12
    52f8:	f00b fcd9 	bl	10cae <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    52fc:	2800      	cmp	r0, #0
    52fe:	d003      	beq.n	5308 <mpsl_fem_device_config_254_apply_get+0x5c>
    5300:	218b      	movs	r1, #139	; 0x8b
    5302:	2003      	movs	r0, #3
    5304:	f000 f8ec 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5308:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    530a:	0000      	.short	0x0000
    530c:	2000122c 	.word	0x2000122c
    5310:	000055ec 	.word	0x000055ec

00005314 <sdc_build_revision_get>:
    5314:	b510      	push	{r4, lr}
    5316:	b128      	cbz	r0, 5324 <sdc_build_revision_get+0x10>
    5318:	2214      	movs	r2, #20
    531a:	4904      	ldr	r1, [pc, #16]	; (532c <sdc_build_revision_get+0x18>)
    531c:	f008 fa64 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5320:	2000      	movs	r0, #0
    5322:	bd10      	pop	{r4, pc}
    5324:	f06f 0015 	mvn.w	r0, #21
    5328:	bd10      	pop	{r4, pc}
    532a:	0000      	.short	0x0000
    532c:	00005608 	.word	0x00005608

00005330 <sdc_cfg_set>:
    5330:	b570      	push	{r4, r5, r6, lr}
    5332:	0003      	movs	r3, r0
    5334:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    5338:	d103      	bne.n	5342 <sdc_cfg_set+0x12>
    533a:	4c2e      	ldr	r4, [pc, #184]	; (53f4 <sdc_cfg_set+0xc4>)
    533c:	7863      	ldrb	r3, [r4, #1]
    533e:	b10b      	cbz	r3, 5344 <sdc_cfg_set+0x14>
    5340:	1180      	asrs	r0, r0, #6
    5342:	bd70      	pop	{r4, r5, r6, pc}
    5344:	b301      	cbz	r1, 5388 <sdc_cfg_set+0x58>
    5346:	f06f 0515 	mvn.w	r5, #21
    534a:	b38a      	cbz	r2, 53b0 <sdc_cfg_set+0x80>
    534c:	4b2a      	ldr	r3, [pc, #168]	; (53f8 <sdc_cfg_set+0xc8>)
    534e:	290c      	cmp	r1, #12
    5350:	d24b      	bcs.n	53ea <sdc_cfg_set+0xba>
    5352:	e8df f001 	tbb	[pc, r1]
    5356:	064a      	.short	0x064a
    5358:	1d1a0c09 	.word	0x1d1a0c09
    535c:	31202e25 	.word	0x31202e25
    5360:	3b36      	.short	0x3b36
    5362:	7810      	ldrb	r0, [r2, #0]
    5364:	7018      	strb	r0, [r3, #0]
    5366:	e035      	b.n	53d4 <sdc_cfg_set+0xa4>
    5368:	7810      	ldrb	r0, [r2, #0]
    536a:	7058      	strb	r0, [r3, #1]
    536c:	e032      	b.n	53d4 <sdc_cfg_set+0xa4>
    536e:	7890      	ldrb	r0, [r2, #2]
    5370:	b1f0      	cbz	r0, 53b0 <sdc_cfg_set+0x80>
    5372:	78d0      	ldrb	r0, [r2, #3]
    5374:	b1e0      	cbz	r0, 53b0 <sdc_cfg_set+0x80>
    5376:	7810      	ldrb	r0, [r2, #0]
    5378:	281b      	cmp	r0, #27
    537a:	d336      	bcc.n	53ea <sdc_cfg_set+0xba>
    537c:	7850      	ldrb	r0, [r2, #1]
    537e:	281b      	cmp	r0, #27
    5380:	d333      	bcc.n	53ea <sdc_cfg_set+0xba>
    5382:	6810      	ldr	r0, [r2, #0]
    5384:	f8c3 0005 	str.w	r0, [r3, #5]
    5388:	e024      	b.n	53d4 <sdc_cfg_set+0xa4>
    538a:	6810      	ldr	r0, [r2, #0]
    538c:	60d8      	str	r0, [r3, #12]
    538e:	e021      	b.n	53d4 <sdc_cfg_set+0xa4>
    5390:	7810      	ldrb	r0, [r2, #0]
    5392:	7098      	strb	r0, [r3, #2]
    5394:	e01e      	b.n	53d4 <sdc_cfg_set+0xa4>
    5396:	7811      	ldrb	r1, [r2, #0]
    5398:	2900      	cmp	r1, #0
    539a:	d1d2      	bne.n	5342 <sdc_cfg_set+0x12>
    539c:	70d9      	strb	r1, [r3, #3]
    539e:	e019      	b.n	53d4 <sdc_cfg_set+0xa4>
    53a0:	78e0      	ldrb	r0, [r4, #3]
    53a2:	b110      	cbz	r0, 53aa <sdc_cfg_set+0x7a>
    53a4:	7810      	ldrb	r0, [r2, #0]
    53a6:	2802      	cmp	r0, #2
    53a8:	d31f      	bcc.n	53ea <sdc_cfg_set+0xba>
    53aa:	7810      	ldrb	r0, [r2, #0]
    53ac:	7418      	strb	r0, [r3, #16]
    53ae:	e011      	b.n	53d4 <sdc_cfg_set+0xa4>
    53b0:	e01b      	b.n	53ea <sdc_cfg_set+0xba>
    53b2:	8810      	ldrh	r0, [r2, #0]
    53b4:	8258      	strh	r0, [r3, #18]
    53b6:	e00d      	b.n	53d4 <sdc_cfg_set+0xa4>
    53b8:	7811      	ldrb	r1, [r2, #0]
    53ba:	2900      	cmp	r1, #0
    53bc:	d1c1      	bne.n	5342 <sdc_cfg_set+0x12>
    53be:	7119      	strb	r1, [r3, #4]
    53c0:	e008      	b.n	53d4 <sdc_cfg_set+0xa4>
    53c2:	7810      	ldrb	r0, [r2, #0]
    53c4:	2802      	cmp	r0, #2
    53c6:	d310      	bcc.n	53ea <sdc_cfg_set+0xba>
    53c8:	7518      	strb	r0, [r3, #20]
    53ca:	e003      	b.n	53d4 <sdc_cfg_set+0xa4>
    53cc:	7811      	ldrb	r1, [r2, #0]
    53ce:	2900      	cmp	r1, #0
    53d0:	d1b7      	bne.n	5342 <sdc_cfg_set+0x12>
    53d2:	7559      	strb	r1, [r3, #21]
    53d4:	2201      	movs	r2, #1
    53d6:	4908      	ldr	r1, [pc, #32]	; (53f8 <sdc_cfg_set+0xc8>)
    53d8:	2000      	movs	r0, #0
    53da:	f008 fb21 	bl	da20 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    53de:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    53e2:	db04      	blt.n	53ee <sdc_cfg_set+0xbe>
    53e4:	f06f 000b 	mvn.w	r0, #11
    53e8:	bd70      	pop	{r4, r5, r6, pc}
    53ea:	4628      	mov	r0, r5
    53ec:	bd70      	pop	{r4, r5, r6, pc}
    53ee:	2101      	movs	r1, #1
    53f0:	70a1      	strb	r1, [r4, #2]
    53f2:	bd70      	pop	{r4, r5, r6, pc}
    53f4:	20000098 	.word	0x20000098
    53f8:	2000122c 	.word	0x2000122c

000053fc <sdc_enable>:
    53fc:	b570      	push	{r4, r5, r6, lr}
    53fe:	460c      	mov	r4, r1
    5400:	0005      	movs	r5, r0
    5402:	d019      	beq.n	5438 <sdc_enable+0x3c>
    5404:	b1c4      	cbz	r4, 5438 <sdc_enable+0x3c>
    5406:	f000 f925 	bl	5654 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    540a:	b1c0      	cbz	r0, 543e <sdc_enable+0x42>
    540c:	4628      	mov	r0, r5
    540e:	f7ff fe4d 	bl	50ac <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5412:	4d0c      	ldr	r5, [pc, #48]	; (5444 <sdc_enable+0x48>)
    5414:	2200      	movs	r2, #0
    5416:	490c      	ldr	r1, [pc, #48]	; (5448 <sdc_enable+0x4c>)
    5418:	7028      	strb	r0, [r5, #0]
    541a:	4620      	mov	r0, r4
    541c:	f008 fb00 	bl	da20 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    5420:	f00c f87d 	bl	1151e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    5424:	2100      	movs	r1, #0
    5426:	7828      	ldrb	r0, [r5, #0]
    5428:	f006 fa4a 	bl	b8c0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    542c:	f7ff ff44 	bl	52b8 <mpsl_fem_device_config_254_apply_get+0xc>
    5430:	2001      	movs	r0, #1
    5432:	7068      	strb	r0, [r5, #1]
    5434:	2000      	movs	r0, #0
    5436:	bd70      	pop	{r4, r5, r6, pc}
    5438:	f06f 0015 	mvn.w	r0, #21
    543c:	bd70      	pop	{r4, r5, r6, pc}
    543e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5442:	bd70      	pop	{r4, r5, r6, pc}
    5444:	20000098 	.word	0x20000098
    5448:	2000122c 	.word	0x2000122c

0000544c <sdc_init>:
    544c:	b530      	push	{r4, r5, lr}
    544e:	b087      	sub	sp, #28
    5450:	0005      	movs	r5, r0
    5452:	d00c      	beq.n	546e <sdc_init+0x22>
    5454:	f7ff fdd0 	bl	4ff8 <mpsl_is_initialized>
    5458:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    545c:	b120      	cbz	r0, 5468 <sdc_init+0x1c>
    545e:	f7ff fc77 	bl	4d50 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    5462:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    5466:	d905      	bls.n	5474 <sdc_init+0x28>
    5468:	4620      	mov	r0, r4
    546a:	b007      	add	sp, #28
    546c:	bd30      	pop	{r4, r5, pc}
    546e:	f06f 0015 	mvn.w	r0, #21
    5472:	e7fa      	b.n	546a <sdc_init+0x1e>
    5474:	4c15      	ldr	r4, [pc, #84]	; (54cc <sdc_init+0x80>)
    5476:	4816      	ldr	r0, [pc, #88]	; (54d0 <sdc_init+0x84>)
    5478:	6065      	str	r5, [r4, #4]
    547a:	f000 f9f5 	bl	5868 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    547e:	2000      	movs	r0, #0
    5480:	7060      	strb	r0, [r4, #1]
    5482:	70a0      	strb	r0, [r4, #2]
    5484:	70e0      	strb	r0, [r4, #3]
    5486:	4601      	mov	r1, r0
    5488:	2218      	movs	r2, #24
    548a:	4668      	mov	r0, sp
    548c:	f008 fa26 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5490:	2218      	movs	r2, #24
    5492:	4910      	ldr	r1, [pc, #64]	; (54d4 <sdc_init+0x88>)
    5494:	4668      	mov	r0, sp
    5496:	f008 f9a7 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    549a:	2218      	movs	r2, #24
    549c:	4669      	mov	r1, sp
    549e:	480e      	ldr	r0, [pc, #56]	; (54d8 <sdc_init+0x8c>)
    54a0:	f008 f9a2 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    54a4:	f3ef 8410 	mrs	r4, PRIMASK
    54a8:	b672      	cpsid	i
    54aa:	f06f 000c 	mvn.w	r0, #12
    54ae:	f000 fd57 	bl	5f60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    54b2:	480a      	ldr	r0, [pc, #40]	; (54dc <sdc_init+0x90>)
    54b4:	f000 fe22 	bl	60fc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    54b8:	b118      	cbz	r0, 54c2 <sdc_init+0x76>
    54ba:	219e      	movs	r1, #158	; 0x9e
    54bc:	2003      	movs	r0, #3
    54be:	f000 f80f 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54c2:	b904      	cbnz	r4, 54c6 <sdc_init+0x7a>
    54c4:	b662      	cpsie	i
    54c6:	2000      	movs	r0, #0
    54c8:	e7cf      	b.n	546a <sdc_init+0x1e>
    54ca:	0000      	.short	0x0000
    54cc:	20000098 	.word	0x20000098
    54d0:	000052b9 	.word	0x000052b9
    54d4:	000055f0 	.word	0x000055f0
    54d8:	2000122c 	.word	0x2000122c
    54dc:	00005681 	.word	0x00005681

000054e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    54e0:	b50e      	push	{r1, r2, r3, lr}
    54e2:	b672      	cpsid	i
    54e4:	4a15      	ldr	r2, [pc, #84]	; (553c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    54e6:	6855      	ldr	r5, [r2, #4]
    54e8:	b1dd      	cbz	r5, 5522 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    54ea:	2200      	movs	r2, #0
    54ec:	4603      	mov	r3, r0
    54ee:	466e      	mov	r6, sp
    54f0:	240a      	movs	r4, #10
    54f2:	e003      	b.n	54fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    54f4:	fbb0 f0f4 	udiv	r0, r0, r4
    54f8:	1c52      	adds	r2, r2, #1
    54fa:	b2d2      	uxtb	r2, r2
    54fc:	2800      	cmp	r0, #0
    54fe:	d1f9      	bne.n	54f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    5500:	54b0      	strb	r0, [r6, r2]
    5502:	e00a      	b.n	551a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    5504:	b2d8      	uxtb	r0, r3
    5506:	fbb0 f7f4 	udiv	r7, r0, r4
    550a:	fbb3 f3f4 	udiv	r3, r3, r4
    550e:	fb04 0017 	mls	r0, r4, r7, r0
    5512:	1e52      	subs	r2, r2, #1
    5514:	b2d2      	uxtb	r2, r2
    5516:	3030      	adds	r0, #48	; 0x30
    5518:	54b0      	strb	r0, [r6, r2]
    551a:	2a00      	cmp	r2, #0
    551c:	d1f2      	bne.n	5504 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    551e:	4630      	mov	r0, r6
    5520:	47a8      	blx	r5
    5522:	f3bf 8f4f 	dsb	sy
    5526:	4806      	ldr	r0, [pc, #24]	; (5540 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    5528:	6801      	ldr	r1, [r0, #0]
    552a:	4a06      	ldr	r2, [pc, #24]	; (5544 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    552c:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    5530:	4311      	orrs	r1, r2
    5532:	6001      	str	r1, [r0, #0]
    5534:	f3bf 8f4f 	dsb	sy
    5538:	bf00      	nop
    553a:	e7fd      	b.n	5538 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    553c:	20000098 	.word	0x20000098
    5540:	e000ed0c 	.word	0xe000ed0c
    5544:	05fa0004 	.word	0x05fa0004

00005548 <sdc_support_adv>:
    5548:	4806      	ldr	r0, [pc, #24]	; (5564 <sdc_support_adv+0x1c>)
    554a:	b510      	push	{r4, lr}
    554c:	7881      	ldrb	r1, [r0, #2]
    554e:	7840      	ldrb	r0, [r0, #1]
    5550:	4301      	orrs	r1, r0
    5552:	d002      	beq.n	555a <sdc_support_adv+0x12>
    5554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5558:	bd10      	pop	{r4, pc}
    555a:	f006 f9cf 	bl	b8fc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    555e:	2000      	movs	r0, #0
    5560:	bd10      	pop	{r4, pc}
    5562:	0000      	.short	0x0000
    5564:	20000098 	.word	0x20000098

00005568 <sdc_support_dle_peripheral>:
    5568:	4806      	ldr	r0, [pc, #24]	; (5584 <sdc_support_dle_peripheral+0x1c>)
    556a:	b510      	push	{r4, lr}
    556c:	7881      	ldrb	r1, [r0, #2]
    556e:	7840      	ldrb	r0, [r0, #1]
    5570:	4301      	orrs	r1, r0
    5572:	d002      	beq.n	557a <sdc_support_dle_peripheral+0x12>
    5574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5578:	bd10      	pop	{r4, pc}
    557a:	f005 ff71 	bl	b460 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    557e:	2000      	movs	r0, #0
    5580:	bd10      	pop	{r4, pc}
    5582:	0000      	.short	0x0000
    5584:	20000098 	.word	0x20000098

00005588 <sdc_support_le_2m_phy>:
    5588:	4807      	ldr	r0, [pc, #28]	; (55a8 <sdc_support_le_2m_phy+0x20>)
    558a:	b510      	push	{r4, lr}
    558c:	7881      	ldrb	r1, [r0, #2]
    558e:	7840      	ldrb	r0, [r0, #1]
    5590:	4301      	orrs	r1, r0
    5592:	d002      	beq.n	559a <sdc_support_le_2m_phy+0x12>
    5594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5598:	bd10      	pop	{r4, pc}
    559a:	f00b fd55 	bl	11048 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    559e:	f00b fd63 	bl	11068 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    55a2:	2000      	movs	r0, #0
    55a4:	bd10      	pop	{r4, pc}
    55a6:	0000      	.short	0x0000
    55a8:	20000098 	.word	0x20000098

000055ac <sdc_support_peripheral>:
    55ac:	4806      	ldr	r0, [pc, #24]	; (55c8 <sdc_support_peripheral+0x1c>)
    55ae:	b510      	push	{r4, lr}
    55b0:	7881      	ldrb	r1, [r0, #2]
    55b2:	7840      	ldrb	r0, [r0, #1]
    55b4:	4301      	orrs	r1, r0
    55b6:	d002      	beq.n	55be <sdc_support_peripheral+0x12>
    55b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    55bc:	bd10      	pop	{r4, pc}
    55be:	f006 f9af 	bl	b920 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    55c2:	2000      	movs	r0, #0
    55c4:	bd10      	pop	{r4, pc}
    55c6:	0000      	.short	0x0000
    55c8:	20000098 	.word	0x20000098

000055cc <sdc_support_phy_update_peripheral>:
    55cc:	4806      	ldr	r0, [pc, #24]	; (55e8 <sdc_support_phy_update_peripheral+0x1c>)
    55ce:	b510      	push	{r4, lr}
    55d0:	7881      	ldrb	r1, [r0, #2]
    55d2:	7840      	ldrb	r0, [r0, #1]
    55d4:	4301      	orrs	r1, r0
    55d6:	d002      	beq.n	55de <sdc_support_phy_update_peripheral+0x12>
    55d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    55dc:	bd10      	pop	{r4, pc}
    55de:	f00b fd43 	bl	11068 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    55e2:	2000      	movs	r0, #0
    55e4:	bd10      	pop	{r4, pc}
    55e6:	0000      	.short	0x0000
    55e8:	20000098 	.word	0x20000098
    55ec:	00000001 	.word	0x00000001
    55f0:	00010101 	.word	0x00010101
    55f4:	031b1b00 	.word	0x031b1b00
    55f8:	00000002 	.word	0x00000002
    55fc:	00001d4c 	.word	0x00001d4c
    5600:	001f0003 	.word	0x001f0003
    5604:	00000000 	.word	0x00000000
    5608:	6f5fe7f2 	.word	0x6f5fe7f2
    560c:	e8f3a223 	.word	0xe8f3a223
    5610:	35c32f10 	.word	0x35c32f10
    5614:	fe1dd79e 	.word	0xfe1dd79e
    5618:	f942808f 	.word	0xf942808f

0000561c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    561c:	4a05      	ldr	r2, [pc, #20]	; (5634 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    561e:	b510      	push	{r4, lr}
    5620:	6852      	ldr	r2, [r2, #4]
    5622:	b112      	cbz	r2, 562a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    5624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5628:	4710      	bx	r2
    562a:	2192      	movs	r1, #146	; 0x92
    562c:	2004      	movs	r0, #4
    562e:	f7ff ff57 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5632:	0000      	.short	0x0000
    5634:	20001244 	.word	0x20001244

00005638 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    5638:	4a05      	ldr	r2, [pc, #20]	; (5650 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    563a:	b510      	push	{r4, lr}
    563c:	6892      	ldr	r2, [r2, #8]
    563e:	b112      	cbz	r2, 5646 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    5640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5644:	4710      	bx	r2
    5646:	2198      	movs	r1, #152	; 0x98
    5648:	2004      	movs	r0, #4
    564a:	f7ff ff49 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    564e:	0000      	.short	0x0000
    5650:	20001244 	.word	0x20001244

00005654 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    5654:	4805      	ldr	r0, [pc, #20]	; (566c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    5656:	6801      	ldr	r1, [r0, #0]
    5658:	b129      	cbz	r1, 5666 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    565a:	6841      	ldr	r1, [r0, #4]
    565c:	b119      	cbz	r1, 5666 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    565e:	6880      	ldr	r0, [r0, #8]
    5660:	b108      	cbz	r0, 5666 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    5662:	2001      	movs	r0, #1
    5664:	4770      	bx	lr
    5666:	2000      	movs	r0, #0
    5668:	4770      	bx	lr
    566a:	0000      	.short	0x0000
    566c:	20001244 	.word	0x20001244

00005670 <sdc_rand_source_register>:
    5670:	4902      	ldr	r1, [pc, #8]	; (567c <sdc_rand_source_register+0xc>)
    5672:	c80d      	ldmia	r0, {r0, r2, r3}
    5674:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    5678:	2000      	movs	r0, #0
    567a:	4770      	bx	lr
    567c:	20001244 	.word	0x20001244

00005680 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    5680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5682:	4c12      	ldr	r4, [pc, #72]	; (56cc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    5684:	2600      	movs	r6, #0
    5686:	6825      	ldr	r5, [r4, #0]
    5688:	e011      	b.n	56ae <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    568a:	9800      	ldr	r0, [sp, #0]
    568c:	2802      	cmp	r0, #2
    568e:	d002      	beq.n	5696 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    5690:	2803      	cmp	r0, #3
    5692:	d10c      	bne.n	56ae <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    5694:	e006      	b.n	56a4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    5696:	6820      	ldr	r0, [r4, #0]
    5698:	b110      	cbz	r0, 56a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    569a:	2000      	movs	r0, #0
    569c:	6026      	str	r6, [r4, #0]
    569e:	e005      	b.n	56ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    56a0:	2128      	movs	r1, #40	; 0x28
    56a2:	e00c      	b.n	56be <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    56a4:	6820      	ldr	r0, [r4, #0]
    56a6:	b168      	cbz	r0, 56c4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    56a8:	2001      	movs	r0, #1
    56aa:	6026      	str	r6, [r4, #0]
    56ac:	47a8      	blx	r5
    56ae:	4668      	mov	r0, sp
    56b0:	f000 fcf6 	bl	60a0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    56b4:	2800      	cmp	r0, #0
    56b6:	d0e8      	beq.n	568a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    56b8:	2805      	cmp	r0, #5
    56ba:	d005      	beq.n	56c8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    56bc:	2135      	movs	r1, #53	; 0x35
    56be:	2004      	movs	r0, #4
    56c0:	f7ff ff0e 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56c4:	212d      	movs	r1, #45	; 0x2d
    56c6:	e7fa      	b.n	56be <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    56c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56ca:	0000      	.short	0x0000
    56cc:	200000a0 	.word	0x200000a0
    56d0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    56d2:	4c1f      	ldr	r4, [pc, #124]	; (5750 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    56d4:	4605      	mov	r5, r0
    56d6:	7820      	ldrb	r0, [r4, #0]
    56d8:	b140      	cbz	r0, 56ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    56da:	78a2      	ldrb	r2, [r4, #2]
    56dc:	1c61      	adds	r1, r4, #1
    56de:	4628      	mov	r0, r5
    56e0:	1c92      	adds	r2, r2, #2
    56e2:	f008 f881 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    56e6:	2000      	movs	r0, #0
    56e8:	7020      	strb	r0, [r4, #0]
    56ea:	e021      	b.n	5730 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    56ec:	4819      	ldr	r0, [pc, #100]	; (5754 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    56ee:	f001 ff43 	bl	7578 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    56f2:	2800      	cmp	r0, #0
    56f4:	d01d      	beq.n	5732 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    56f6:	4c17      	ldr	r4, [pc, #92]	; (5754 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    56f8:	7820      	ldrb	r0, [r4, #0]
    56fa:	2811      	cmp	r0, #17
    56fc:	d104      	bne.n	5708 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    56fe:	210a      	movs	r1, #10
    5700:	203e      	movs	r0, #62	; 0x3e
    5702:	f008 fa18 	bl	db36 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    5706:	b118      	cbz	r0, 5710 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    5708:	7820      	ldrb	r0, [r4, #0]
    570a:	2808      	cmp	r0, #8
    570c:	d005      	beq.n	571a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    570e:	e009      	b.n	5724 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    5710:	4910      	ldr	r1, [pc, #64]	; (5754 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5712:	4628      	mov	r0, r5
    5714:	f008 fc18 	bl	df48 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    5718:	e00a      	b.n	5730 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    571a:	2105      	movs	r1, #5
    571c:	203e      	movs	r0, #62	; 0x3e
    571e:	f008 fa0a 	bl	db36 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    5722:	b138      	cbz	r0, 5734 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    5724:	490b      	ldr	r1, [pc, #44]	; (5754 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    5726:	4628      	mov	r0, r5
    5728:	f008 fa61 	bl	dbee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    572c:	2800      	cmp	r0, #0
    572e:	d000      	beq.n	5732 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    5730:	2001      	movs	r0, #1
    5732:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5734:	88a0      	ldrh	r0, [r4, #4]
    5736:	f8ad 0000 	strh.w	r0, [sp]
    573a:	a901      	add	r1, sp, #4
    573c:	4668      	mov	r0, sp
    573e:	f008 fd32 	bl	e1a6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    5742:	2800      	cmp	r0, #0
    5744:	d0f5      	beq.n	5732 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    5746:	219c      	movs	r1, #156	; 0x9c
    5748:	2008      	movs	r0, #8
    574a:	f7ff fec9 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    574e:	0000      	.short	0x0000
    5750:	200013e2 	.word	0x200013e2
    5754:	200012e0 	.word	0x200012e0
    5758:	b570      	push	{r4, r5, r6, lr}
    575a:	780a      	ldrb	r2, [r1, #0]
    575c:	7082      	strb	r2, [r0, #2]
    575e:	b33a      	cbz	r2, 57b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    5760:	2a01      	cmp	r2, #1
    5762:	d825      	bhi.n	57b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    5764:	2313      	movs	r3, #19
    5766:	7003      	strb	r3, [r0, #0]
    5768:	2300      	movs	r3, #0
    576a:	e00a      	b.n	5782 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    576c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    5770:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    5774:	78a6      	ldrb	r6, [r4, #2]
    5776:	70ee      	strb	r6, [r5, #3]
    5778:	8864      	ldrh	r4, [r4, #2]
    577a:	0a24      	lsrs	r4, r4, #8
    577c:	1c5b      	adds	r3, r3, #1
    577e:	712c      	strb	r4, [r5, #4]
    5780:	b2db      	uxtb	r3, r3
    5782:	4293      	cmp	r3, r2
    5784:	d3f2      	bcc.n	576c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    5786:	2300      	movs	r3, #0
    5788:	e00b      	b.n	57a2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    578a:	bf00      	nop
    578c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    5790:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    5794:	792e      	ldrb	r6, [r5, #4]
    5796:	7166      	strb	r6, [r4, #5]
    5798:	88ad      	ldrh	r5, [r5, #4]
    579a:	0a2d      	lsrs	r5, r5, #8
    579c:	1c5b      	adds	r3, r3, #1
    579e:	71a5      	strb	r5, [r4, #6]
    57a0:	b2db      	uxtb	r3, r3
    57a2:	4293      	cmp	r3, r2
    57a4:	d3f2      	bcc.n	578c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    57a6:	2101      	movs	r1, #1
    57a8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    57ac:	b2c0      	uxtb	r0, r0
    57ae:	bd70      	pop	{r4, r5, r6, pc}
    57b0:	2000      	movs	r0, #0
    57b2:	bd70      	pop	{r4, r5, r6, pc}

000057b4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    57b4:	2840      	cmp	r0, #64	; 0x40
    57b6:	d203      	bcs.n	57c0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    57b8:	1e40      	subs	r0, r0, #1
    57ba:	b2c1      	uxtb	r1, r0
    57bc:	4805      	ldr	r0, [pc, #20]	; (57d4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    57be:	e005      	b.n	57cc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    57c0:	28ff      	cmp	r0, #255	; 0xff
    57c2:	d005      	beq.n	57d0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    57c4:	3840      	subs	r0, #64	; 0x40
    57c6:	b2c1      	uxtb	r1, r0
    57c8:	4802      	ldr	r0, [pc, #8]	; (57d4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    57ca:	3008      	adds	r0, #8
    57cc:	f008 bbe6 	b.w	df9c <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    57d0:	2001      	movs	r0, #1
    57d2:	4770      	bx	lr
    57d4:	200000a4 	.word	0x200000a4

000057d8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    57d8:	1e40      	subs	r0, r0, #1
    57da:	b2c1      	uxtb	r1, r0
    57dc:	4801      	ldr	r0, [pc, #4]	; (57e4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    57de:	f008 bbdd 	b.w	df9c <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    57e2:	0000      	.short	0x0000
    57e4:	200000b4 	.word	0x200000b4

000057e8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    57e8:	4902      	ldr	r1, [pc, #8]	; (57f4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    57ea:	6802      	ldr	r2, [r0, #0]
    57ec:	610a      	str	r2, [r1, #16]
    57ee:	6840      	ldr	r0, [r0, #4]
    57f0:	6148      	str	r0, [r1, #20]
    57f2:	4770      	bx	lr
    57f4:	200000a4 	.word	0x200000a4

000057f8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    57f8:	4905      	ldr	r1, [pc, #20]	; (5810 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    57fa:	6802      	ldr	r2, [r0, #0]
    57fc:	600a      	str	r2, [r1, #0]
    57fe:	6840      	ldr	r0, [r0, #4]
    5800:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    5804:	600a      	str	r2, [r1, #0]
    5806:	4a03      	ldr	r2, [pc, #12]	; (5814 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    5808:	4310      	orrs	r0, r2
    580a:	6048      	str	r0, [r1, #4]
    580c:	4770      	bx	lr
    580e:	0000      	.short	0x0000
    5810:	200000a4 	.word	0x200000a4
    5814:	024007f8 	.word	0x024007f8

00005818 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    5818:	4902      	ldr	r1, [pc, #8]	; (5824 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    581a:	6802      	ldr	r2, [r0, #0]
    581c:	608a      	str	r2, [r1, #8]
    581e:	6840      	ldr	r0, [r0, #4]
    5820:	60c8      	str	r0, [r1, #12]
    5822:	4770      	bx	lr
    5824:	200000a4 	.word	0x200000a4

00005828 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    5828:	4807      	ldr	r0, [pc, #28]	; (5848 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    582a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    582e:	2200      	movs	r2, #0
    5830:	6001      	str	r1, [r0, #0]
    5832:	0cc9      	lsrs	r1, r1, #19
    5834:	6041      	str	r1, [r0, #4]
    5836:	f100 0108 	add.w	r1, r0, #8
    583a:	201f      	movs	r0, #31
    583c:	600a      	str	r2, [r1, #0]
    583e:	604a      	str	r2, [r1, #4]
    5840:	3108      	adds	r1, #8
    5842:	e9c1 0200 	strd	r0, r2, [r1]
    5846:	4770      	bx	lr
    5848:	200000a4 	.word	0x200000a4

0000584c <sdc_hci_cmd_cb_reset>:
    584c:	b510      	push	{r4, lr}
    584e:	f7ff ffeb 	bl	5828 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    5852:	f00b fb72 	bl	10f3a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    5856:	4604      	mov	r4, r0
    5858:	4802      	ldr	r0, [pc, #8]	; (5864 <sdc_hci_cmd_cb_reset+0x18>)
    585a:	6800      	ldr	r0, [r0, #0]
    585c:	b100      	cbz	r0, 5860 <sdc_hci_cmd_cb_reset+0x14>
    585e:	4780      	blx	r0
    5860:	4620      	mov	r0, r4
    5862:	bd10      	pop	{r4, pc}
    5864:	200000bc 	.word	0x200000bc

00005868 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    5868:	4901      	ldr	r1, [pc, #4]	; (5870 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    586a:	6008      	str	r0, [r1, #0]
    586c:	4770      	bx	lr
    586e:	0000      	.short	0x0000
    5870:	200000bc 	.word	0x200000bc

00005874 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    5874:	2102      	movs	r1, #2
    5876:	8001      	strh	r1, [r0, #0]
    5878:	8041      	strh	r1, [r0, #2]
    587a:	2100      	movs	r1, #0
    587c:	7101      	strb	r1, [r0, #4]
    587e:	21f2      	movs	r1, #242	; 0xf2
    5880:	7141      	strb	r1, [r0, #5]
    5882:	f645 71e7 	movw	r1, #24551	; 0x5fe7
    5886:	80c1      	strh	r1, [r0, #6]
    5888:	4901      	ldr	r1, [pc, #4]	; (5890 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    588a:	6081      	str	r1, [r0, #8]
    588c:	2000      	movs	r0, #0
    588e:	4770      	bx	lr
    5890:	f3a2236f 	.word	0xf3a2236f

00005894 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    5894:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    5896:	4604      	mov	r4, r0
    5898:	4669      	mov	r1, sp
    589a:	f008 ffd3 	bl	e844 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    589e:	b170      	cbz	r0, 58be <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    58a0:	f240 215a 	movw	r1, #602	; 0x25a
    58a4:	e008      	b.n	58b8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    58a6:	bf00      	nop
    58a8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    58ac:	4621      	mov	r1, r4
    58ae:	f000 f8ab 	bl	5a08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    58b2:	b120      	cbz	r0, 58be <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    58b4:	f240 215f 	movw	r1, #607	; 0x25f
    58b8:	2017      	movs	r0, #23
    58ba:	f7ff fe11 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58be:	4668      	mov	r0, sp
    58c0:	f000 f852 	bl	5968 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    58c4:	2800      	cmp	r0, #0
    58c6:	d0ef      	beq.n	58a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    58c8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000058cc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    58cc:	b510      	push	{r4, lr}
    58ce:	2802      	cmp	r0, #2
    58d0:	d304      	bcc.n	58dc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    58d2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    58d6:	2017      	movs	r0, #23
    58d8:	f7ff fe02 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58dc:	4901      	ldr	r1, [pc, #4]	; (58e4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    58de:	5c08      	ldrb	r0, [r1, r0]
    58e0:	bd10      	pop	{r4, pc}
    58e2:	0000      	.short	0x0000
    58e4:	20001250 	.word	0x20001250

000058e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    58e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58ea:	0005      	movs	r5, r0
    58ec:	9500      	str	r5, [sp, #0]
    58ee:	d010      	beq.n	5912 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    58f0:	2600      	movs	r6, #0
    58f2:	7808      	ldrb	r0, [r1, #0]
    58f4:	7849      	ldrb	r1, [r1, #1]
    58f6:	4604      	mov	r4, r0
    58f8:	42a1      	cmp	r1, r4
    58fa:	d900      	bls.n	58fe <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    58fc:	460c      	mov	r4, r1
    58fe:	1cea      	adds	r2, r5, #3
    5900:	f022 0203 	bic.w	r2, r2, #3
    5904:	42aa      	cmp	r2, r5
    5906:	d006      	beq.n	5916 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    5908:	f240 1179 	movw	r1, #377	; 0x179
    590c:	2017      	movs	r0, #23
    590e:	f7ff fde7 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5912:	2601      	movs	r6, #1
    5914:	e7ed      	b.n	58f2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    5916:	4f13      	ldr	r7, [pc, #76]	; (5964 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    5918:	7038      	strb	r0, [r7, #0]
    591a:	7079      	strb	r1, [r7, #1]
    591c:	4631      	mov	r1, r6
    591e:	4668      	mov	r0, sp
    5920:	f000 f8ee 	bl	5b00 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    5924:	2100      	movs	r1, #0
    5926:	460b      	mov	r3, r1
    5928:	9800      	ldr	r0, [sp, #0]
    592a:	1cc0      	adds	r0, r0, #3
    592c:	f020 0003 	bic.w	r0, r0, #3
    5930:	9000      	str	r0, [sp, #0]
    5932:	b96e      	cbnz	r6, 5950 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    5934:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    5938:	60d0      	str	r0, [r2, #12]
    593a:	2000      	movs	r0, #0
    593c:	e006      	b.n	594c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    593e:	bf00      	nop
    5940:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    5944:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    5948:	1c40      	adds	r0, r0, #1
    594a:	b2c0      	uxtb	r0, r0
    594c:	42a0      	cmp	r0, r4
    594e:	d3f7      	bcc.n	5940 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    5950:	9800      	ldr	r0, [sp, #0]
    5952:	1c49      	adds	r1, r1, #1
    5954:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5958:	b2c9      	uxtb	r1, r1
    595a:	9000      	str	r0, [sp, #0]
    595c:	2902      	cmp	r1, #2
    595e:	d3e3      	bcc.n	5928 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    5960:	1b40      	subs	r0, r0, r5
    5962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5964:	20001250 	.word	0x20001250

00005968 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    5968:	b570      	push	{r4, r5, r6, lr}
    596a:	4604      	mov	r4, r0
    596c:	f009 f919 	bl	eba2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    5970:	b108      	cbz	r0, 5976 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    5972:	2010      	movs	r0, #16
    5974:	bd70      	pop	{r4, r5, r6, pc}
    5976:	7825      	ldrb	r5, [r4, #0]
    5978:	f000 f8fe 	bl	5b78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    597c:	4602      	mov	r2, r0
    597e:	480c      	ldr	r0, [pc, #48]	; (59b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    5980:	8861      	ldrh	r1, [r4, #2]
    5982:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5986:	e00e      	b.n	59a6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5988:	68c3      	ldr	r3, [r0, #12]
    598a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    598e:	b143      	cbz	r3, 59a2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    5990:	1c4a      	adds	r2, r1, #1
    5992:	8062      	strh	r2, [r4, #2]
    5994:	80a1      	strh	r1, [r4, #4]
    5996:	68c0      	ldr	r0, [r0, #12]
    5998:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    599c:	60a0      	str	r0, [r4, #8]
    599e:	2000      	movs	r0, #0
    59a0:	bd70      	pop	{r4, r5, r6, pc}
    59a2:	1c49      	adds	r1, r1, #1
    59a4:	b289      	uxth	r1, r1
    59a6:	4291      	cmp	r1, r2
    59a8:	d3ee      	bcc.n	5988 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    59aa:	8061      	strh	r1, [r4, #2]
    59ac:	2005      	movs	r0, #5
    59ae:	bd70      	pop	{r4, r5, r6, pc}
    59b0:	20001250 	.word	0x20001250

000059b4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    59b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59b8:	b121      	cbz	r1, 59c4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    59ba:	2901      	cmp	r1, #1
    59bc:	d002      	beq.n	59c4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    59be:	2000      	movs	r0, #0
    59c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59c4:	4c0f      	ldr	r4, [pc, #60]	; (5a04 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    59c6:	2700      	movs	r7, #0
    59c8:	463b      	mov	r3, r7
    59ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
    59ce:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    59d2:	f814 c001 	ldrb.w	ip, [r4, r1]
    59d6:	e00a      	b.n	59ee <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    59d8:	19dc      	adds	r4, r3, r7
    59da:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    59de:	b2a4      	uxth	r4, r4
    59e0:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    59e4:	f1be 0f00 	cmp.w	lr, #0
    59e8:	d004      	beq.n	59f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    59ea:	1c5b      	adds	r3, r3, #1
    59ec:	b29b      	uxth	r3, r3
    59ee:	459c      	cmp	ip, r3
    59f0:	d8f2      	bhi.n	59d8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    59f2:	4634      	mov	r4, r6
    59f4:	8004      	strh	r4, [r0, #0]
    59f6:	4620      	mov	r0, r4
    59f8:	42b4      	cmp	r4, r6
    59fa:	d0e0      	beq.n	59be <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    59fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5a00:	f000 b834 	b.w	5a6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    5a04:	20001250 	.word	0x20001250

00005a08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a0c:	4606      	mov	r6, r0
    5a0e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    5a12:	460c      	mov	r4, r1
    5a14:	f243 0702 	movw	r7, #12290	; 0x3002
    5a18:	38ff      	subs	r0, #255	; 0xff
    5a1a:	d020      	beq.n	5a5e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5a1c:	2c02      	cmp	r4, #2
    5a1e:	d302      	bcc.n	5a26 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    5a20:	2007      	movs	r0, #7
    5a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a26:	4630      	mov	r0, r6
    5a28:	f000 f85a 	bl	5ae0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    5a2c:	0005      	movs	r5, r0
    5a2e:	d016      	beq.n	5a5e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5a30:	480c      	ldr	r0, [pc, #48]	; (5a64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    5a32:	4629      	mov	r1, r5
    5a34:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5a38:	4630      	mov	r0, r6
    5a3a:	4790      	blx	r2
    5a3c:	480a      	ldr	r0, [pc, #40]	; (5a68 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    5a3e:	2100      	movs	r1, #0
    5a40:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    5a44:	68f8      	ldr	r0, [r7, #12]
    5a46:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    5a4a:	4620      	mov	r0, r4
    5a4c:	f000 f88a 	bl	5b64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5a50:	4602      	mov	r2, r0
    5a52:	4629      	mov	r1, r5
    5a54:	6878      	ldr	r0, [r7, #4]
    5a56:	f008 fed4 	bl	e802 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5a5a:	2000      	movs	r0, #0
    5a5c:	e7e1      	b.n	5a22 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5a5e:	4638      	mov	r0, r7
    5a60:	e7df      	b.n	5a22 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5a62:	0000      	.short	0x0000
    5a64:	00005b98 	.word	0x00005b98
    5a68:	20001250 	.word	0x20001250
    5a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a70:	4690      	mov	r8, r2
    5a72:	460d      	mov	r5, r1
    5a74:	4607      	mov	r7, r0
    5a76:	f008 fef6 	bl	e866 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5a7a:	b148      	cbz	r0, 5a90 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    5a7c:	4816      	ldr	r0, [pc, #88]	; (5ad8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    5a7e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5a82:	68f0      	ldr	r0, [r6, #12]
    5a84:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5a88:	b128      	cbz	r0, 5a96 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    5a8a:	f44f 719d 	mov.w	r1, #314	; 0x13a
    5a8e:	e015      	b.n	5abc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5a90:	f240 1139 	movw	r1, #313	; 0x139
    5a94:	e012      	b.n	5abc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5a96:	6870      	ldr	r0, [r6, #4]
    5a98:	2800      	cmp	r0, #0
    5a9a:	d01a      	beq.n	5ad2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    5a9c:	4628      	mov	r0, r5
    5a9e:	f000 f861 	bl	5b64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5aa2:	4601      	mov	r1, r0
    5aa4:	6870      	ldr	r0, [r6, #4]
    5aa6:	f008 fe54 	bl	e752 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5aaa:	0004      	movs	r4, r0
    5aac:	d010      	beq.n	5ad0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    5aae:	68f0      	ldr	r0, [r6, #12]
    5ab0:	2d02      	cmp	r5, #2
    5ab2:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    5ab6:	d304      	bcc.n	5ac2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5ab8:	f240 1145 	movw	r1, #325	; 0x145
    5abc:	2017      	movs	r0, #23
    5abe:	f7ff fd0f 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ac2:	4806      	ldr	r0, [pc, #24]	; (5adc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    5ac4:	4642      	mov	r2, r8
    5ac6:	4621      	mov	r1, r4
    5ac8:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5acc:	4638      	mov	r0, r7
    5ace:	4798      	blx	r3
    5ad0:	4620      	mov	r0, r4
    5ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ad6:	0000      	.short	0x0000
    5ad8:	20001250 	.word	0x20001250
    5adc:	00005b90 	.word	0x00005b90
    5ae0:	b570      	push	{r4, r5, r6, lr}
    5ae2:	460c      	mov	r4, r1
    5ae4:	4605      	mov	r5, r0
    5ae6:	f008 febe 	bl	e866 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5aea:	2800      	cmp	r0, #0
    5aec:	d005      	beq.n	5afa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    5aee:	4803      	ldr	r0, [pc, #12]	; (5afc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5af0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5af4:	68c0      	ldr	r0, [r0, #12]
    5af6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5afa:	bd70      	pop	{r4, r5, r6, pc}
    5afc:	20001250 	.word	0x20001250
    5b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b04:	4e16      	ldr	r6, [pc, #88]	; (5b60 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    5b06:	4688      	mov	r8, r1
    5b08:	4605      	mov	r5, r0
    5b0a:	2400      	movs	r4, #0
    5b0c:	6828      	ldr	r0, [r5, #0]
    5b0e:	1cc0      	adds	r0, r0, #3
    5b10:	f020 0003 	bic.w	r0, r0, #3
    5b14:	6028      	str	r0, [r5, #0]
    5b16:	4620      	mov	r0, r4
    5b18:	f000 f824 	bl	5b64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5b1c:	5d31      	ldrb	r1, [r6, r4]
    5b1e:	4348      	muls	r0, r1
    5b20:	f1b8 0f00 	cmp.w	r8, #0
    5b24:	d001      	beq.n	5b2a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    5b26:	2200      	movs	r2, #0
    5b28:	e000      	b.n	5b2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    5b2a:	682a      	ldr	r2, [r5, #0]
    5b2c:	4601      	mov	r1, r0
    5b2e:	9200      	str	r2, [sp, #0]
    5b30:	b132      	cbz	r2, 5b40 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    5b32:	2700      	movs	r7, #0
    5b34:	ea4f 000d 	mov.w	r0, sp
    5b38:	f008 fe3c 	bl	e7b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5b3c:	b11f      	cbz	r7, 5b46 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    5b3e:	e006      	b.n	5b4e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    5b40:	2701      	movs	r7, #1
    5b42:	2000      	movs	r0, #0
    5b44:	e7f8      	b.n	5b38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    5b46:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    5b4a:	9a00      	ldr	r2, [sp, #0]
    5b4c:	604a      	str	r2, [r1, #4]
    5b4e:	6829      	ldr	r1, [r5, #0]
    5b50:	1c64      	adds	r4, r4, #1
    5b52:	4408      	add	r0, r1
    5b54:	b2e4      	uxtb	r4, r4
    5b56:	6028      	str	r0, [r5, #0]
    5b58:	2c02      	cmp	r4, #2
    5b5a:	d3d7      	bcc.n	5b0c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    5b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5b60:	20001250 	.word	0x20001250
    5b64:	4903      	ldr	r1, [pc, #12]	; (5b74 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    5b66:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5b6a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    5b6e:	1cc0      	adds	r0, r0, #3
    5b70:	4008      	ands	r0, r1
    5b72:	4770      	bx	lr
    5b74:	00005b8c 	.word	0x00005b8c
    5b78:	4903      	ldr	r1, [pc, #12]	; (5b88 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    5b7a:	7808      	ldrb	r0, [r1, #0]
    5b7c:	7849      	ldrb	r1, [r1, #1]
    5b7e:	4288      	cmp	r0, r1
    5b80:	d200      	bcs.n	5b84 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    5b82:	4608      	mov	r0, r1
    5b84:	4770      	bx	lr
    5b86:	0000      	.short	0x0000
    5b88:	20001250 	.word	0x20001250
    5b8c:	011002a0 	.word	0x011002a0
    5b90:	0000e87b 	.word	0x0000e87b
    5b94:	0000e87b 	.word	0x0000e87b
    5b98:	000106cb 	.word	0x000106cb
    5b9c:	0000f9eb 	.word	0x0000f9eb

00005ba0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5ba0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ba4:	4c27      	ldr	r4, [pc, #156]	; (5c44 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa4>)
    5ba6:	4606      	mov	r6, r0
    5ba8:	b081      	sub	sp, #4
    5baa:	6820      	ldr	r0, [r4, #0]
    5bac:	469a      	mov	sl, r3
    5bae:	4693      	mov	fp, r2
    5bb0:	b158      	cbz	r0, 5bca <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    5bb2:	7a01      	ldrb	r1, [r0, #8]
    5bb4:	42b1      	cmp	r1, r6
    5bb6:	d903      	bls.n	5bc0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5bb8:	6840      	ldr	r0, [r0, #4]
    5bba:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    5bbe:	b140      	cbz	r0, 5bd2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    5bc0:	f243 0002 	movw	r0, #12290	; 0x3002
    5bc4:	b005      	add	sp, #20
    5bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5bca:	21a5      	movs	r1, #165	; 0xa5
    5bcc:	2018      	movs	r0, #24
    5bce:	f7ff fc87 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bd2:	4619      	mov	r1, r3
    5bd4:	9802      	ldr	r0, [sp, #8]
    5bd6:	f008 fe6a 	bl	e8ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    5bda:	4680      	mov	r8, r0
    5bdc:	4658      	mov	r0, fp
    5bde:	990e      	ldr	r1, [sp, #56]	; 0x38
    5be0:	f008 fe5b 	bl	e89a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    5be4:	4605      	mov	r5, r0
    5be6:	eb08 0005 	add.w	r0, r8, r5
    5bea:	1d00      	adds	r0, r0, #4
    5bec:	b287      	uxth	r7, r0
    5bee:	6820      	ldr	r0, [r4, #0]
    5bf0:	46a1      	mov	r9, r4
    5bf2:	4639      	mov	r1, r7
    5bf4:	6800      	ldr	r0, [r0, #0]
    5bf6:	f008 fdac 	bl	e752 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5bfa:	0004      	movs	r4, r0
    5bfc:	d01f      	beq.n	5c3e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9e>
    5bfe:	8067      	strh	r7, [r4, #2]
    5c00:	8025      	strh	r5, [r4, #0]
    5c02:	4629      	mov	r1, r5
    5c04:	1d20      	adds	r0, r4, #4
    5c06:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5c08:	4607      	mov	r7, r0
    5c0a:	465a      	mov	r2, fp
    5c0c:	2301      	movs	r3, #1
    5c0e:	9500      	str	r5, [sp, #0]
    5c10:	f008 fcfe 	bl	e610 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5c14:	8820      	ldrh	r0, [r4, #0]
    5c16:	4641      	mov	r1, r8
    5c18:	4438      	add	r0, r7
    5c1a:	230a      	movs	r3, #10
    5c1c:	9a02      	ldr	r2, [sp, #8]
    5c1e:	f8cd a000 	str.w	sl, [sp]
    5c22:	f008 fcf5 	bl	e610 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5c26:	8820      	ldrh	r0, [r4, #0]
    5c28:	19c1      	adds	r1, r0, r7
    5c2a:	4638      	mov	r0, r7
    5c2c:	f008 fd21 	bl	e672 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    5c30:	f8d9 0000 	ldr.w	r0, [r9]
    5c34:	6840      	ldr	r0, [r0, #4]
    5c36:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    5c3a:	2000      	movs	r0, #0
    5c3c:	e7c2      	b.n	5bc4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5c3e:	2004      	movs	r0, #4
    5c40:	e7c0      	b.n	5bc4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5c42:	0000      	.short	0x0000
    5c44:	200000c0 	.word	0x200000c0

00005c48 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5c48:	b570      	push	{r4, r5, r6, lr}
    5c4a:	4c14      	ldr	r4, [pc, #80]	; (5c9c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5c4c:	6823      	ldr	r3, [r4, #0]
    5c4e:	b18b      	cbz	r3, 5c74 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5c50:	7a19      	ldrb	r1, [r3, #8]
    5c52:	4281      	cmp	r1, r0
    5c54:	d912      	bls.n	5c7c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5c56:	685a      	ldr	r2, [r3, #4]
    5c58:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5c5c:	b171      	cbz	r1, 5c7c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5c5e:	2500      	movs	r5, #0
    5c60:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    5c64:	884a      	ldrh	r2, [r1, #2]
    5c66:	6818      	ldr	r0, [r3, #0]
    5c68:	f008 fdcb 	bl	e802 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5c6c:	6821      	ldr	r1, [r4, #0]
    5c6e:	2000      	movs	r0, #0
    5c70:	7a0a      	ldrb	r2, [r1, #8]
    5c72:	e00c      	b.n	5c8e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    5c74:	21c8      	movs	r1, #200	; 0xc8
    5c76:	2018      	movs	r0, #24
    5c78:	f7ff fc32 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c7c:	f243 0002 	movw	r0, #12290	; 0x3002
    5c80:	bd70      	pop	{r4, r5, r6, pc}
    5c82:	684b      	ldr	r3, [r1, #4]
    5c84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5c88:	b933      	cbnz	r3, 5c98 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    5c8a:	1c40      	adds	r0, r0, #1
    5c8c:	b2c0      	uxtb	r0, r0
    5c8e:	4282      	cmp	r2, r0
    5c90:	d8f7      	bhi.n	5c82 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    5c92:	6808      	ldr	r0, [r1, #0]
    5c94:	f008 fdaa 	bl	e7ec <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    5c98:	2000      	movs	r0, #0
    5c9a:	bd70      	pop	{r4, r5, r6, pc}
    5c9c:	200000c0 	.word	0x200000c0

00005ca0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ca4:	460d      	mov	r5, r1
    5ca6:	0004      	movs	r4, r0
    5ca8:	4690      	mov	r8, r2
    5caa:	f04f 0600 	mov.w	r6, #0
    5cae:	d009      	beq.n	5cc4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5cb0:	2700      	movs	r7, #0
    5cb2:	1ce0      	adds	r0, r4, #3
    5cb4:	f020 0003 	bic.w	r0, r0, #3
    5cb8:	42a0      	cmp	r0, r4
    5cba:	d005      	beq.n	5cc8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5cbc:	2186      	movs	r1, #134	; 0x86
    5cbe:	2018      	movs	r0, #24
    5cc0:	f7ff fc0e 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cc4:	2701      	movs	r7, #1
    5cc6:	e7f4      	b.n	5cb2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5cc8:	b1cd      	cbz	r5, 5cfe <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5cca:	4611      	mov	r1, r2
    5ccc:	2000      	movs	r0, #0
    5cce:	f008 fd71 	bl	e7b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5cd2:	300c      	adds	r0, #12
    5cd4:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5cd8:	b98f      	cbnz	r7, 5cfe <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5cda:	4f0a      	ldr	r7, [pc, #40]	; (5d04 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5cdc:	f104 000c 	add.w	r0, r4, #12
    5ce0:	00aa      	lsls	r2, r5, #2
    5ce2:	603c      	str	r4, [r7, #0]
    5ce4:	7225      	strb	r5, [r4, #8]
    5ce6:	6060      	str	r0, [r4, #4]
    5ce8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5cec:	6020      	str	r0, [r4, #0]
    5cee:	2100      	movs	r1, #0
    5cf0:	6860      	ldr	r0, [r4, #4]
    5cf2:	f007 fdf3 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5cf6:	4641      	mov	r1, r8
    5cf8:	6838      	ldr	r0, [r7, #0]
    5cfa:	f008 fd5b 	bl	e7b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5cfe:	4630      	mov	r0, r6
    5d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d04:	200000c0 	.word	0x200000c0

00005d08 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5d08:	b570      	push	{r4, r5, r6, lr}
    5d0a:	4d08      	ldr	r5, [pc, #32]	; (5d2c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5d0c:	6828      	ldr	r0, [r5, #0]
    5d0e:	2800      	cmp	r0, #0
    5d10:	d00a      	beq.n	5d28 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    5d12:	2400      	movs	r4, #0
    5d14:	e004      	b.n	5d20 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    5d16:	4620      	mov	r0, r4
    5d18:	f7ff ff96 	bl	5c48 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5d1c:	1c64      	adds	r4, r4, #1
    5d1e:	b2e4      	uxtb	r4, r4
    5d20:	6828      	ldr	r0, [r5, #0]
    5d22:	7a00      	ldrb	r0, [r0, #8]
    5d24:	42a0      	cmp	r0, r4
    5d26:	d8f6      	bhi.n	5d16 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5d28:	bd70      	pop	{r4, r5, r6, pc}
    5d2a:	0000      	.short	0x0000
    5d2c:	200000c0 	.word	0x200000c0

00005d30 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5d30:	4909      	ldr	r1, [pc, #36]	; (5d58 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    5d32:	b510      	push	{r4, lr}
    5d34:	4602      	mov	r2, r0
    5d36:	6809      	ldr	r1, [r1, #0]
    5d38:	2000      	movs	r0, #0
    5d3a:	b149      	cbz	r1, 5d50 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5d3c:	7a0b      	ldrb	r3, [r1, #8]
    5d3e:	4293      	cmp	r3, r2
    5d40:	d905      	bls.n	5d4e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5d42:	6849      	ldr	r1, [r1, #4]
    5d44:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5d48:	2900      	cmp	r1, #0
    5d4a:	d000      	beq.n	5d4e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5d4c:	1d08      	adds	r0, r1, #4
    5d4e:	bd10      	pop	{r4, pc}
    5d50:	21ee      	movs	r1, #238	; 0xee
    5d52:	2018      	movs	r0, #24
    5d54:	f7ff fbc4 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d58:	200000c0 	.word	0x200000c0

00005d5c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5d5c:	490a      	ldr	r1, [pc, #40]	; (5d88 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5d5e:	b510      	push	{r4, lr}
    5d60:	4602      	mov	r2, r0
    5d62:	6809      	ldr	r1, [r1, #0]
    5d64:	2000      	movs	r0, #0
    5d66:	b159      	cbz	r1, 5d80 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5d68:	7a0b      	ldrb	r3, [r1, #8]
    5d6a:	4293      	cmp	r3, r2
    5d6c:	d907      	bls.n	5d7e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5d6e:	6849      	ldr	r1, [r1, #4]
    5d70:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5d74:	2900      	cmp	r1, #0
    5d76:	d002      	beq.n	5d7e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5d78:	f831 0b04 	ldrh.w	r0, [r1], #4
    5d7c:	4408      	add	r0, r1
    5d7e:	bd10      	pop	{r4, pc}
    5d80:	21fc      	movs	r1, #252	; 0xfc
    5d82:	2018      	movs	r0, #24
    5d84:	f7ff fbac 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d88:	200000c0 	.word	0x200000c0
    5d8c:	b570      	push	{r4, r5, r6, lr}
    5d8e:	4b1e      	ldr	r3, [pc, #120]	; (5e08 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    5d90:	6845      	ldr	r5, [r0, #4]
    5d92:	4604      	mov	r4, r0
    5d94:	2200      	movs	r2, #0
    5d96:	b1a1      	cbz	r1, 5dc2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    5d98:	2001      	movs	r0, #1
    5d9a:	7060      	strb	r0, [r4, #1]
    5d9c:	8858      	ldrh	r0, [r3, #2]
    5d9e:	0881      	lsrs	r1, r0, #2
    5da0:	f05f 0000 	movs.w	r0, #0
    5da4:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5da8:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5dac:	831a      	strh	r2, [r3, #24]
    5dae:	8419      	strh	r1, [r3, #32]
    5db0:	fb00 5301 	mla	r3, r0, r1, r5
    5db4:	6073      	str	r3, [r6, #4]
    5db6:	1823      	adds	r3, r4, r0
    5db8:	1c40      	adds	r0, r0, #1
    5dba:	751a      	strb	r2, [r3, #20]
    5dbc:	2804      	cmp	r0, #4
    5dbe:	d3f1      	bcc.n	5da4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5dc0:	bd70      	pop	{r4, r5, r6, pc}
    5dc2:	7062      	strb	r2, [r4, #1]
    5dc4:	f05f 0000 	movs.w	r0, #0
    5dc8:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5dcc:	830a      	strh	r2, [r1, #24]
    5dce:	840a      	strh	r2, [r1, #32]
    5dd0:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5dd4:	604a      	str	r2, [r1, #4]
    5dd6:	1821      	adds	r1, r4, r0
    5dd8:	1c40      	adds	r0, r0, #1
    5dda:	750a      	strb	r2, [r1, #20]
    5ddc:	2804      	cmp	r0, #4
    5dde:	d3f3      	bcc.n	5dc8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5de0:	8858      	ldrh	r0, [r3, #2]
    5de2:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5de6:	d201      	bcs.n	5dec <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5de8:	0846      	lsrs	r6, r0, #1
    5dea:	e000      	b.n	5dee <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5dec:	26ff      	movs	r6, #255	; 0xff
    5dee:	f008 fdd2 	bl	e996 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5df2:	6065      	str	r5, [r4, #4]
    5df4:	8420      	strh	r0, [r4, #32]
    5df6:	1829      	adds	r1, r5, r0
    5df8:	60a1      	str	r1, [r4, #8]
    5dfa:	8466      	strh	r6, [r4, #34]	; 0x22
    5dfc:	60e5      	str	r5, [r4, #12]
    5dfe:	84a0      	strh	r0, [r4, #36]	; 0x24
    5e00:	6121      	str	r1, [r4, #16]
    5e02:	84e6      	strh	r6, [r4, #38]	; 0x26
    5e04:	bd70      	pop	{r4, r5, r6, pc}
    5e06:	0000      	.short	0x0000
    5e08:	200000c4 	.word	0x200000c4

00005e0c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e10:	b170      	cbz	r0, 5e30 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    5e12:	2500      	movs	r5, #0
    5e14:	4411      	add	r1, r2
    5e16:	b2cc      	uxtb	r4, r1
    5e18:	4e25      	ldr	r6, [pc, #148]	; (5eb0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa4>)
    5e1a:	1cc1      	adds	r1, r0, #3
    5e1c:	2700      	movs	r7, #0
    5e1e:	f021 0103 	bic.w	r1, r1, #3
    5e22:	7034      	strb	r4, [r6, #0]
    5e24:	4281      	cmp	r1, r0
    5e26:	d005      	beq.n	5e34 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    5e28:	214e      	movs	r1, #78	; 0x4e
    5e2a:	2009      	movs	r0, #9
    5e2c:	f7ff fb58 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e30:	2501      	movs	r5, #1
    5e32:	e7ef      	b.n	5e14 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    5e34:	2b1f      	cmp	r3, #31
    5e36:	d804      	bhi.n	5e42 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    5e38:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5e3c:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    5e40:	e009      	b.n	5e56 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    5e42:	0059      	lsls	r1, r3, #1
    5e44:	2bff      	cmp	r3, #255	; 0xff
    5e46:	d90c      	bls.n	5e62 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x56>
    5e48:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    5e4c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5e50:	d200      	bcs.n	5e54 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5e52:	4611      	mov	r1, r2
    5e54:	b289      	uxth	r1, r1
    5e56:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    5e5a:	1cc9      	adds	r1, r1, #3
    5e5c:	4011      	ands	r1, r2
    5e5e:	b135      	cbz	r5, 5e6e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x62>
    5e60:	e007      	b.n	5e72 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x66>
    5e62:	227c      	movs	r2, #124	; 0x7c
    5e64:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5e68:	d3f4      	bcc.n	5e54 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5e6a:	217c      	movs	r1, #124	; 0x7c
    5e6c:	e7f2      	b.n	5e54 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5e6e:	6070      	str	r0, [r6, #4]
    5e70:	8071      	strh	r1, [r6, #2]
    5e72:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    5e76:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    5e7a:	2200      	movs	r2, #0
    5e7c:	6876      	ldr	r6, [r6, #4]
    5e7e:	f04f 0c01 	mov.w	ip, #1
    5e82:	e00d      	b.n	5ea0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x94>
    5e84:	b94d      	cbnz	r5, 5e9a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    5e86:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    5e8a:	eb00 0e03 	add.w	lr, r0, r3
    5e8e:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    5e92:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    5e96:	f8c7 e004 	str.w	lr, [r7, #4]
    5e9a:	1c52      	adds	r2, r2, #1
    5e9c:	440b      	add	r3, r1
    5e9e:	b2d2      	uxtb	r2, r2
    5ea0:	42a2      	cmp	r2, r4
    5ea2:	d3ef      	bcc.n	5e84 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x78>
    5ea4:	1ddb      	adds	r3, r3, #7
    5ea6:	f023 0007 	bic.w	r0, r3, #7
    5eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5eae:	0000      	.short	0x0000
    5eb0:	200000c4 	.word	0x200000c4

00005eb4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5eb4:	b570      	push	{r4, r5, r6, lr}
    5eb6:	4a10      	ldr	r2, [pc, #64]	; (5ef8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    5eb8:	2000      	movs	r0, #0
    5eba:	6851      	ldr	r1, [r2, #4]
    5ebc:	7812      	ldrb	r2, [r2, #0]
    5ebe:	e014      	b.n	5eea <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5ec0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5ec4:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    5ec8:	b16b      	cbz	r3, 5ee6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    5eca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5ece:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    5ed2:	d00c      	beq.n	5eee <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    5ed4:	2500      	movs	r5, #0
    5ed6:	70a5      	strb	r5, [r4, #2]
    5ed8:	2101      	movs	r1, #1
    5eda:	4620      	mov	r0, r4
    5edc:	f7ff ff56 	bl	5d8c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5ee0:	7025      	strb	r5, [r4, #0]
    5ee2:	4620      	mov	r0, r4
    5ee4:	bd70      	pop	{r4, r5, r6, pc}
    5ee6:	1c40      	adds	r0, r0, #1
    5ee8:	b2c0      	uxtb	r0, r0
    5eea:	4290      	cmp	r0, r2
    5eec:	d3e8      	bcc.n	5ec0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5eee:	21a9      	movs	r1, #169	; 0xa9
    5ef0:	2009      	movs	r0, #9
    5ef2:	f7ff faf5 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ef6:	0000      	.short	0x0000
    5ef8:	200000c4 	.word	0x200000c4

00005efc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5efc:	4804      	ldr	r0, [pc, #16]	; (5f10 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5efe:	b510      	push	{r4, lr}
    5f00:	8840      	ldrh	r0, [r0, #2]
    5f02:	0884      	lsrs	r4, r0, #2
    5f04:	f008 fd47 	bl	e996 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    5f08:	4284      	cmp	r4, r0
    5f0a:	d300      	bcc.n	5f0e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5f0c:	4620      	mov	r0, r4
    5f0e:	bd10      	pop	{r4, pc}
    5f10:	200000c4 	.word	0x200000c4
    5f14:	b530      	push	{r4, r5, lr}
    5f16:	490d      	ldr	r1, [pc, #52]	; (5f4c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    5f18:	2001      	movs	r0, #1
    5f1a:	6048      	str	r0, [r1, #4]
    5f1c:	1e82      	subs	r2, r0, #2
    5f1e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5f22:	490b      	ldr	r1, [pc, #44]	; (5f50 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    5f24:	6088      	str	r0, [r1, #8]
    5f26:	2300      	movs	r3, #0
    5f28:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    5f2c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5f30:	4c08      	ldr	r4, [pc, #32]	; (5f54 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    5f32:	6023      	str	r3, [r4, #0]
    5f34:	1d25      	adds	r5, r4, #4
    5f36:	6028      	str	r0, [r5, #0]
    5f38:	6088      	str	r0, [r1, #8]
    5f3a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5f3e:	6023      	str	r3, [r4, #0]
    5f40:	6028      	str	r0, [r5, #0]
    5f42:	4906      	ldr	r1, [pc, #24]	; (5f5c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    5f44:	4804      	ldr	r0, [pc, #16]	; (5f58 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    5f46:	6008      	str	r0, [r1, #0]
    5f48:	bd30      	pop	{r4, r5, pc}
    5f4a:	0000      	.short	0x0000
    5f4c:	4000e000 	.word	0x4000e000
    5f50:	4000f000 	.word	0x4000f000
    5f54:	4000f500 	.word	0x4000f500
    5f58:	3ff60000 	.word	0x3ff60000
    5f5c:	4001f508 	.word	0x4001f508

00005f60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5f60:	b510      	push	{r4, lr}
    5f62:	4604      	mov	r4, r0
    5f64:	f7ff ffd6 	bl	5f14 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    5f68:	f008 fde8 	bl	eb3c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    5f6c:	f000 f888 	bl	6080 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    5f70:	4905      	ldr	r1, [pc, #20]	; (5f88 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    5f72:	4804      	ldr	r0, [pc, #16]	; (5f84 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    5f74:	6008      	str	r0, [r1, #0]
    5f76:	4620      	mov	r0, r4
    5f78:	f000 f8b8 	bl	60ec <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    5f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f80:	f000 b8d0 	b.w	6124 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    5f84:	3ff60000 	.word	0x3ff60000
    5f88:	4001f508 	.word	0x4001f508
    5f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f90:	4682      	mov	sl, r0
    5f92:	4838      	ldr	r0, [pc, #224]	; (6074 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    5f94:	f007 fb91 	bl	d6ba <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5f98:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 6074 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    5f9c:	b128      	cbz	r0, 5faa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    5f9e:	2601      	movs	r6, #1
    5fa0:	f10b 0001 	add.w	r0, fp, #1
    5fa4:	21ff      	movs	r1, #255	; 0xff
    5fa6:	7001      	strb	r1, [r0, #0]
    5fa8:	e000      	b.n	5fac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    5faa:	2600      	movs	r6, #0
    5fac:	f44f 7580 	mov.w	r5, #256	; 0x100
    5fb0:	4c31      	ldr	r4, [pc, #196]	; (6078 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    5fb2:	f04f 0800 	mov.w	r8, #0
    5fb6:	1d2f      	adds	r7, r5, #4
    5fb8:	2101      	movs	r1, #1
    5fba:	6061      	str	r1, [r4, #4]
    5fbc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5fc0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5fc4:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    5fc8:	6021      	str	r1, [r4, #0]
    5fca:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 607c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    5fce:	e01c      	b.n	600a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5fd0:	f8d9 0000 	ldr.w	r0, [r9]
    5fd4:	06c0      	lsls	r0, r0, #27
    5fd6:	d518      	bpl.n	600a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5fd8:	200e      	movs	r0, #14
    5fda:	f008 fdbe 	bl	eb5a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5fde:	f3ef 8010 	mrs	r0, PRIMASK
    5fe2:	9000      	str	r0, [sp, #0]
    5fe4:	b672      	cpsid	i
    5fe6:	2103      	movs	r1, #3
    5fe8:	4620      	mov	r0, r4
    5fea:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    5fee:	4629      	mov	r1, r5
    5ff0:	f008 fdc0 	bl	eb74 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5ff4:	b930      	cbnz	r0, 6004 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5ff6:	4639      	mov	r1, r7
    5ff8:	4620      	mov	r0, r4
    5ffa:	f008 fdbb 	bl	eb74 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5ffe:	b908      	cbnz	r0, 6004 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    6000:	f7ff f8c8 	bl	5194 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    6004:	9800      	ldr	r0, [sp, #0]
    6006:	b900      	cbnz	r0, 600a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    6008:	b662      	cpsie	i
    600a:	4629      	mov	r1, r5
    600c:	4620      	mov	r0, r4
    600e:	f008 fdb1 	bl	eb74 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    6012:	b928      	cbnz	r0, 6020 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    6014:	4639      	mov	r1, r7
    6016:	4620      	mov	r0, r4
    6018:	f008 fdac 	bl	eb74 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    601c:	2800      	cmp	r0, #0
    601e:	d0d7      	beq.n	5fd0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    6020:	4639      	mov	r1, r7
    6022:	4620      	mov	r0, r4
    6024:	f008 fda6 	bl	eb74 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    6028:	2800      	cmp	r0, #0
    602a:	d1c5      	bne.n	5fb8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    602c:	bb06      	cbnz	r6, 6070 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    602e:	f89b 1001 	ldrb.w	r1, [fp, #1]
    6032:	f88d 1000 	strb.w	r1, [sp]
    6036:	9900      	ldr	r1, [sp, #0]
    6038:	9100      	str	r1, [sp, #0]
    603a:	f89d 1000 	ldrb.w	r1, [sp]
    603e:	b109      	cbz	r1, 6044 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    6040:	2501      	movs	r5, #1
    6042:	e000      	b.n	6046 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    6044:	2500      	movs	r5, #0
    6046:	f10b 0001 	add.w	r0, fp, #1
    604a:	f880 8000 	strb.w	r8, [r0]
    604e:	2003      	movs	r0, #3
    6050:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    6054:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    6058:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    605c:	200e      	movs	r0, #14
    605e:	f008 fd7c 	bl	eb5a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    6062:	4804      	ldr	r0, [pc, #16]	; (6074 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    6064:	f007 fb40 	bl	d6e8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    6068:	b115      	cbz	r5, 6070 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    606a:	2011      	movs	r0, #17
    606c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6070:	2000      	movs	r0, #0
    6072:	e7fb      	b.n	606c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    6074:	2000032c 	.word	0x2000032c
    6078:	4000e000 	.word	0x4000e000
    607c:	e000ed10 	.word	0xe000ed10

00006080 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    6080:	b510      	push	{r4, lr}
    6082:	4806      	ldr	r0, [pc, #24]	; (609c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    6084:	f007 fb2c 	bl	d6e0 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    6088:	b118      	cbz	r0, 6092 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    608a:	2127      	movs	r1, #39	; 0x27
    608c:	201d      	movs	r0, #29
    608e:	f7ff fa27 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6092:	4802      	ldr	r0, [pc, #8]	; (609c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    6094:	2100      	movs	r1, #0
    6096:	7041      	strb	r1, [r0, #1]
    6098:	bd10      	pop	{r4, pc}
    609a:	0000      	.short	0x0000
    609c:	2000032c 	.word	0x2000032c

000060a0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    60a0:	b570      	push	{r4, r5, r6, lr}
    60a2:	4911      	ldr	r1, [pc, #68]	; (60e8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    60a4:	680a      	ldr	r2, [r1, #0]
    60a6:	b1ea      	cbz	r2, 60e4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    60a8:	2300      	movs	r3, #0
    60aa:	461d      	mov	r5, r3
    60ac:	2401      	movs	r4, #1
    60ae:	684a      	ldr	r2, [r1, #4]
    60b0:	1c52      	adds	r2, r2, #1
    60b2:	604a      	str	r2, [r1, #4]
    60b4:	2a09      	cmp	r2, #9
    60b6:	d300      	bcc.n	60ba <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    60b8:	604d      	str	r5, [r1, #4]
    60ba:	790e      	ldrb	r6, [r1, #4]
    60bc:	fa04 f206 	lsl.w	r2, r4, r6
    60c0:	680e      	ldr	r6, [r1, #0]
    60c2:	4216      	tst	r6, r2
    60c4:	d00b      	beq.n	60de <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    60c6:	f3ef 8310 	mrs	r3, PRIMASK
    60ca:	b672      	cpsid	i
    60cc:	680c      	ldr	r4, [r1, #0]
    60ce:	4394      	bics	r4, r2
    60d0:	600c      	str	r4, [r1, #0]
    60d2:	b903      	cbnz	r3, 60d6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    60d4:	b662      	cpsie	i
    60d6:	6849      	ldr	r1, [r1, #4]
    60d8:	6001      	str	r1, [r0, #0]
    60da:	2000      	movs	r0, #0
    60dc:	bd70      	pop	{r4, r5, r6, pc}
    60de:	1c5b      	adds	r3, r3, #1
    60e0:	2b09      	cmp	r3, #9
    60e2:	d3e4      	bcc.n	60ae <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    60e4:	2005      	movs	r0, #5
    60e6:	bd70      	pop	{r4, r5, r6, pc}
    60e8:	200000cc 	.word	0x200000cc

000060ec <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    60ec:	4802      	ldr	r0, [pc, #8]	; (60f8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    60ee:	2100      	movs	r1, #0
    60f0:	6001      	str	r1, [r0, #0]
    60f2:	6041      	str	r1, [r0, #4]
    60f4:	4770      	bx	lr
    60f6:	0000      	.short	0x0000
    60f8:	200000cc 	.word	0x200000cc

000060fc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    60fc:	b510      	push	{r4, lr}
    60fe:	4c08      	ldr	r4, [pc, #32]	; (6120 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    6100:	7861      	ldrb	r1, [r4, #1]
    6102:	b109      	cbz	r1, 6108 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    6104:	200f      	movs	r0, #15
    6106:	bd10      	pop	{r4, pc}
    6108:	f7fe ffd0 	bl	50ac <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    610c:	7020      	strb	r0, [r4, #0]
    610e:	28ff      	cmp	r0, #255	; 0xff
    6110:	d001      	beq.n	6116 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    6112:	2000      	movs	r0, #0
    6114:	bd10      	pop	{r4, pc}
    6116:	2178      	movs	r1, #120	; 0x78
    6118:	201f      	movs	r0, #31
    611a:	f7ff f9e1 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    611e:	0000      	.short	0x0000
    6120:	20000000 	.word	0x20000000

00006124 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    6124:	4901      	ldr	r1, [pc, #4]	; (612c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    6126:	2000      	movs	r0, #0
    6128:	7048      	strb	r0, [r1, #1]
    612a:	4770      	bx	lr
    612c:	20000000 	.word	0x20000000

00006130 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    6130:	4806      	ldr	r0, [pc, #24]	; (614c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    6132:	4a07      	ldr	r2, [pc, #28]	; (6150 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    6134:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    6136:	8852      	ldrh	r2, [r2, #2]
    6138:	4291      	cmp	r1, r2
    613a:	d104      	bne.n	6146 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    613c:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    6140:	b108      	cbz	r0, 6146 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    6142:	2000      	movs	r0, #0
    6144:	4770      	bx	lr
    6146:	2001      	movs	r0, #1
    6148:	4770      	bx	lr
    614a:	0000      	.short	0x0000
    614c:	200014e4 	.word	0x200014e4
    6150:	20000318 	.word	0x20000318

00006154 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    6154:	4901      	ldr	r1, [pc, #4]	; (615c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    6156:	8048      	strh	r0, [r1, #2]
    6158:	4770      	bx	lr
    615a:	0000      	.short	0x0000
    615c:	20000318 	.word	0x20000318

00006160 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    6160:	4808      	ldr	r0, [pc, #32]	; (6184 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    6162:	4a09      	ldr	r2, [pc, #36]	; (6188 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    6164:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    6166:	8852      	ldrh	r2, [r2, #2]
    6168:	4291      	cmp	r1, r2
    616a:	d109      	bne.n	6180 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    616c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6170:	8481      	strh	r1, [r0, #36]	; 0x24
    6172:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    6176:	b119      	cbz	r1, 6180 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    6178:	2100      	movs	r1, #0
    617a:	7001      	strb	r1, [r0, #0]
    617c:	2001      	movs	r0, #1
    617e:	4770      	bx	lr
    6180:	2000      	movs	r0, #0
    6182:	4770      	bx	lr
    6184:	200014e4 	.word	0x200014e4
    6188:	20000318 	.word	0x20000318

0000618c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    618c:	4807      	ldr	r0, [pc, #28]	; (61ac <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    618e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    6192:	2901      	cmp	r1, #1
    6194:	d007      	beq.n	61a6 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    6196:	2101      	movs	r1, #1
    6198:	7001      	strb	r1, [r0, #0]
    619a:	4805      	ldr	r0, [pc, #20]	; (61b0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    619c:	4903      	ldr	r1, [pc, #12]	; (61ac <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    619e:	8800      	ldrh	r0, [r0, #0]
    61a0:	8488      	strh	r0, [r1, #36]	; 0x24
    61a2:	2001      	movs	r0, #1
    61a4:	4770      	bx	lr
    61a6:	2000      	movs	r0, #0
    61a8:	4770      	bx	lr
    61aa:	0000      	.short	0x0000
    61ac:	200014e4 	.word	0x200014e4
    61b0:	20000318 	.word	0x20000318

000061b4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    61b4:	4906      	ldr	r1, [pc, #24]	; (61d0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    61b6:	4b07      	ldr	r3, [pc, #28]	; (61d4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    61b8:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    61ba:	885b      	ldrh	r3, [r3, #2]
    61bc:	429a      	cmp	r2, r3
    61be:	d105      	bne.n	61cc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    61c0:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    61c4:	b112      	cbz	r2, 61cc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    61c6:	6001      	str	r1, [r0, #0]
    61c8:	2001      	movs	r0, #1
    61ca:	4770      	bx	lr
    61cc:	2000      	movs	r0, #0
    61ce:	4770      	bx	lr
    61d0:	200014e4 	.word	0x200014e4
    61d4:	20000318 	.word	0x20000318

000061d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    61d8:	4909      	ldr	r1, [pc, #36]	; (6200 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    61da:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    61dc:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    61e0:	3bff      	subs	r3, #255	; 0xff
    61e2:	d002      	beq.n	61ea <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    61e4:	2100      	movs	r1, #0
    61e6:	6001      	str	r1, [r0, #0]
    61e8:	e007      	b.n	61fa <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    61ea:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    61ee:	4904      	ldr	r1, [pc, #16]	; (6200 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    61f0:	2a01      	cmp	r2, #1
    61f2:	d002      	beq.n	61fa <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    61f4:	6001      	str	r1, [r0, #0]
    61f6:	2001      	movs	r0, #1
    61f8:	4770      	bx	lr
    61fa:	2000      	movs	r0, #0
    61fc:	4770      	bx	lr
    61fe:	0000      	.short	0x0000
    6200:	200014e4 	.word	0x200014e4

00006204 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    6204:	4901      	ldr	r1, [pc, #4]	; (620c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    6206:	8008      	strh	r0, [r1, #0]
    6208:	4770      	bx	lr
    620a:	0000      	.short	0x0000
    620c:	20000318 	.word	0x20000318

00006210 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    6210:	4905      	ldr	r1, [pc, #20]	; (6228 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    6212:	2000      	movs	r0, #0
    6214:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    6218:	f64f 70ff 	movw	r0, #65535	; 0xffff
    621c:	8488      	strh	r0, [r1, #36]	; 0x24
    621e:	4903      	ldr	r1, [pc, #12]	; (622c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    6220:	8008      	strh	r0, [r1, #0]
    6222:	8048      	strh	r0, [r1, #2]
    6224:	4770      	bx	lr
    6226:	0000      	.short	0x0000
    6228:	200014e4 	.word	0x200014e4
    622c:	20000318 	.word	0x20000318
    6230:	4905      	ldr	r1, [pc, #20]	; (6248 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    6232:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    6234:	4282      	cmp	r2, r0
    6236:	d105      	bne.n	6244 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    6238:	2000      	movs	r0, #0
    623a:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    623e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6242:	8488      	strh	r0, [r1, #36]	; 0x24
    6244:	4770      	bx	lr
    6246:	0000      	.short	0x0000
    6248:	200014e4 	.word	0x200014e4

0000624c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    624c:	4a0a      	ldr	r2, [pc, #40]	; (6278 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    624e:	b110      	cbz	r0, 6256 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    6250:	2801      	cmp	r0, #1
    6252:	d007      	beq.n	6264 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    6254:	e00e      	b.n	6274 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    6256:	7850      	ldrb	r0, [r2, #1]
    6258:	b160      	cbz	r0, 6274 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    625a:	f8d2 0002 	ldr.w	r0, [r2, #2]
    625e:	6008      	str	r0, [r1, #0]
    6260:	88d0      	ldrh	r0, [r2, #6]
    6262:	e004      	b.n	626e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    6264:	7810      	ldrb	r0, [r2, #0]
    6266:	b128      	cbz	r0, 6274 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    6268:	6890      	ldr	r0, [r2, #8]
    626a:	6008      	str	r0, [r1, #0]
    626c:	8990      	ldrh	r0, [r2, #12]
    626e:	8088      	strh	r0, [r1, #4]
    6270:	2001      	movs	r0, #1
    6272:	4770      	bx	lr
    6274:	2000      	movs	r0, #0
    6276:	4770      	bx	lr
    6278:	2000032e 	.word	0x2000032e

0000627c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    627c:	4a08      	ldr	r2, [pc, #32]	; (62a0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    627e:	2301      	movs	r3, #1
    6280:	b138      	cbz	r0, 6292 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    6282:	2801      	cmp	r0, #1
    6284:	d104      	bne.n	6290 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    6286:	7013      	strb	r3, [r2, #0]
    6288:	6808      	ldr	r0, [r1, #0]
    628a:	6090      	str	r0, [r2, #8]
    628c:	8888      	ldrh	r0, [r1, #4]
    628e:	8190      	strh	r0, [r2, #12]
    6290:	4770      	bx	lr
    6292:	7053      	strb	r3, [r2, #1]
    6294:	6808      	ldr	r0, [r1, #0]
    6296:	f8c2 0002 	str.w	r0, [r2, #2]
    629a:	8888      	ldrh	r0, [r1, #4]
    629c:	80d0      	strh	r0, [r2, #6]
    629e:	4770      	bx	lr
    62a0:	2000032e 	.word	0x2000032e

000062a4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    62a4:	4906      	ldr	r1, [pc, #24]	; (62c0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    62a6:	b110      	cbz	r0, 62ae <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    62a8:	2801      	cmp	r0, #1
    62aa:	d002      	beq.n	62b2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    62ac:	e005      	b.n	62ba <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    62ae:	7848      	ldrb	r0, [r1, #1]
    62b0:	e000      	b.n	62b4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    62b2:	7808      	ldrb	r0, [r1, #0]
    62b4:	b108      	cbz	r0, 62ba <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    62b6:	2001      	movs	r0, #1
    62b8:	4770      	bx	lr
    62ba:	2000      	movs	r0, #0
    62bc:	4770      	bx	lr
    62be:	0000      	.short	0x0000
    62c0:	2000032e 	.word	0x2000032e

000062c4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    62c4:	4901      	ldr	r1, [pc, #4]	; (62cc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    62c6:	7708      	strb	r0, [r1, #28]
    62c8:	4770      	bx	lr
    62ca:	0000      	.short	0x0000
    62cc:	20000d9a 	.word	0x20000d9a

000062d0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    62d0:	4801      	ldr	r0, [pc, #4]	; (62d8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    62d2:	78c0      	ldrb	r0, [r0, #3]
    62d4:	4770      	bx	lr
    62d6:	0000      	.short	0x0000
    62d8:	200000d4 	.word	0x200000d4

000062dc <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    62dc:	4801      	ldr	r0, [pc, #4]	; (62e4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    62de:	7900      	ldrb	r0, [r0, #4]
    62e0:	4770      	bx	lr
    62e2:	0000      	.short	0x0000
    62e4:	200000d4 	.word	0x200000d4

000062e8 <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI>:
    62e8:	4608      	mov	r0, r1
    62ea:	2100      	movs	r1, #0
    62ec:	7041      	strb	r1, [r0, #1]
    62ee:	211a      	movs	r1, #26
    62f0:	f800 1b04 	strb.w	r1, [r0], #4
    62f4:	220e      	movs	r2, #14
    62f6:	4901      	ldr	r1, [pc, #4]	; (62fc <sym_TMJZXA73A2C5DMM5JAVJMETINB7KCHBEWVPWZQI+0x14>)
    62f8:	f007 ba76 	b.w	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    62fc:	20000da8 	.word	0x20000da8

00006300 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    6300:	b510      	push	{r4, lr}
    6302:	4604      	mov	r4, r0
    6304:	f000 f952 	bl	65ac <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    6308:	b118      	cbz	r0, 6312 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    630a:	21c2      	movs	r1, #194	; 0xc2
    630c:	2027      	movs	r0, #39	; 0x27
    630e:	f7ff f8e7 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6312:	4803      	ldr	r0, [pc, #12]	; (6320 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    6314:	2101      	movs	r1, #1
    6316:	f009 f838 	bl	f38a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    631a:	4802      	ldr	r0, [pc, #8]	; (6324 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    631c:	62c4      	str	r4, [r0, #44]	; 0x2c
    631e:	bd10      	pop	{r4, pc}
    6320:	20000d78 	.word	0x20000d78
    6324:	200000d4 	.word	0x200000d4

00006328 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    6328:	4901      	ldr	r1, [pc, #4]	; (6330 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    632a:	2001      	movs	r0, #1
    632c:	7188      	strb	r0, [r1, #6]
    632e:	4770      	bx	lr
    6330:	200000d4 	.word	0x200000d4

00006334 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    6334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6338:	4c5e      	ldr	r4, [pc, #376]	; (64b4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    633a:	9d06      	ldr	r5, [sp, #24]
    633c:	7826      	ldrb	r6, [r4, #0]
    633e:	2e00      	cmp	r6, #0
    6340:	d16b      	bne.n	641a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    6342:	2a00      	cmp	r2, #0
    6344:	d069      	beq.n	641a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    6346:	2b00      	cmp	r3, #0
    6348:	d067      	beq.n	641a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    634a:	2d00      	cmp	r5, #0
    634c:	d065      	beq.n	641a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    634e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    6352:	f104 0614 	add.w	r6, r4, #20
    6356:	2000      	movs	r0, #0
    6358:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    635c:	71a0      	strb	r0, [r4, #6]
    635e:	7160      	strb	r0, [r4, #5]
    6360:	70e0      	strb	r0, [r4, #3]
    6362:	70a0      	strb	r0, [r4, #2]
    6364:	7120      	strb	r0, [r4, #4]
    6366:	81a0      	strh	r0, [r4, #12]
    6368:	81e0      	strh	r0, [r4, #14]
    636a:	f000 f957 	bl	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    636e:	4606      	mov	r6, r0
    6370:	f000 f94e 	bl	6610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6374:	4605      	mov	r5, r0
    6376:	f005 ff35 	bl	c1e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    637a:	f005 fc8d 	bl	bc98 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    637e:	f995 0072 	ldrsb.w	r0, [r5, #114]	; 0x72
    6382:	f005 ffb3 	bl	c2ec <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6386:	f105 001c 	add.w	r0, r5, #28
    638a:	f006 f885 	bl	c498 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    638e:	6968      	ldr	r0, [r5, #20]
    6390:	f006 f878 	bl	c484 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6394:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
    6398:	f006 f8b2 	bl	c500 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    639c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    63a0:	6840      	ldr	r0, [r0, #4]
    63a2:	f890 01c6 	ldrb.w	r0, [r0, #454]	; 0x1c6
    63a6:	b108      	cbz	r0, 63ac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    63a8:	f005 fe9c 	bl	c0e4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    63ac:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    63b0:	2001      	movs	r0, #1
    63b2:	f005 fddb 	bl	bf6c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    63b6:	2800      	cmp	r0, #0
    63b8:	d075      	beq.n	64a6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    63ba:	483f      	ldr	r0, [pc, #252]	; (64b8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    63bc:	f005 fe42 	bl	c044 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    63c0:	8828      	ldrh	r0, [r5, #0]
    63c2:	f7ff fccb 	bl	5d5c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    63c6:	6320      	str	r0, [r4, #48]	; 0x30
    63c8:	8828      	ldrh	r0, [r5, #0]
    63ca:	f7ff fcb1 	bl	5d30 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    63ce:	6360      	str	r0, [r4, #52]	; 0x34
    63d0:	3678      	adds	r6, #120	; 0x78
    63d2:	483a      	ldr	r0, [pc, #232]	; (64bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    63d4:	ce8e      	ldmia	r6!, {r1, r2, r3, r7}
    63d6:	f100 0808 	add.w	r8, r0, #8
    63da:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    63de:	f856 1b04 	ldr.w	r1, [r6], #4
    63e2:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    63e6:	f856 198c 	ldr.w	r1, [r6], #-140
    63ea:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    63ee:	f000 f999 	bl	6724 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x15c>
    63f2:	4601      	mov	r1, r0
    63f4:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    63f6:	f008 fd39 	bl	ee6c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    63fa:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    63fc:	4281      	cmp	r1, r0
    63fe:	d200      	bcs.n	6402 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xce>
    6400:	4608      	mov	r0, r1
    6402:	7220      	strb	r0, [r4, #8]
    6404:	46a0      	mov	r8, r4
    6406:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    640a:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
    640e:	7d37      	ldrb	r7, [r6, #20]
    6410:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
    6414:	2908      	cmp	r1, #8
    6416:	d104      	bne.n	6422 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    6418:	e002      	b.n	6420 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    641a:	f44f 718d 	mov.w	r1, #282	; 0x11a
    641e:	e046      	b.n	64ae <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17a>
    6420:	2104      	movs	r1, #4
    6422:	f008 fd23 	bl	ee6c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    6426:	b90f      	cbnz	r7, 642c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    6428:	1d00      	adds	r0, r0, #4
    642a:	b280      	uxth	r0, r0
    642c:	4284      	cmp	r4, r0
    642e:	d200      	bcs.n	6432 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    6430:	4620      	mov	r0, r4
    6432:	b2c4      	uxtb	r4, r0
    6434:	f888 4009 	strb.w	r4, [r8, #9]
    6438:	7d31      	ldrb	r1, [r6, #20]
    643a:	2900      	cmp	r1, #0
    643c:	d002      	beq.n	6444 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    643e:	bf00      	nop
    6440:	f04f 0104 	mov.w	r1, #4
    6444:	4421      	add	r1, r4
    6446:	f888 1007 	strb.w	r1, [r8, #7]
    644a:	d014      	beq.n	6476 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x142>
    644c:	481b      	ldr	r0, [pc, #108]	; (64bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    644e:	f04f 0701 	mov.w	r7, #1
    6452:	f100 0008 	add.w	r0, r0, #8
    6456:	7607      	strb	r7, [r0, #24]
    6458:	e9d6 121c 	ldrd	r1, r2, [r6, #112]	; 0x70
    645c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6460:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    6464:	f008 fc17 	bl	ec96 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6468:	4914      	ldr	r1, [pc, #80]	; (64bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    646a:	4603      	mov	r3, r0
    646c:	4622      	mov	r2, r4
    646e:	3108      	adds	r1, #8
    6470:	4638      	mov	r0, r7
    6472:	f005 fb7d 	bl	bb70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6476:	2001      	movs	r0, #1
    6478:	f000 fb9a 	bl	6bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    647c:	4810      	ldr	r0, [pc, #64]	; (64c0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    647e:	6800      	ldr	r0, [r0, #0]
    6480:	2803      	cmp	r0, #3
    6482:	d012      	beq.n	64aa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    6484:	280b      	cmp	r0, #11
    6486:	d010      	beq.n	64aa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    6488:	480c      	ldr	r0, [pc, #48]	; (64bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    648a:	220e      	movs	r2, #14
    648c:	2100      	movs	r1, #0
    648e:	3052      	adds	r0, #82	; 0x52
    6490:	f007 fa24 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6494:	4809      	ldr	r0, [pc, #36]	; (64bc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    6496:	88b1      	ldrh	r1, [r6, #4]
    6498:	3052      	adds	r0, #82	; 0x52
    649a:	8041      	strh	r1, [r0, #2]
    649c:	8829      	ldrh	r1, [r5, #0]
    649e:	8001      	strh	r1, [r0, #0]
    64a0:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    64a4:	7101      	strb	r1, [r0, #4]
    64a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64aa:	f240 11d5 	movw	r1, #469	; 0x1d5
    64ae:	2027      	movs	r0, #39	; 0x27
    64b0:	f7ff f816 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64b4:	200000d4 	.word	0x200000d4
    64b8:	00006db0 	.word	0x00006db0
    64bc:	20000d48 	.word	0x20000d48
    64c0:	40001550 	.word	0x40001550

000064c4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    64c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64c8:	4605      	mov	r5, r0
    64ca:	f000 f8a7 	bl	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    64ce:	4e32      	ldr	r6, [pc, #200]	; (6598 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    64d0:	4604      	mov	r4, r0
    64d2:	f04f 0800 	mov.w	r8, #0
    64d6:	6a70      	ldr	r0, [r6, #36]	; 0x24
    64d8:	7847      	ldrb	r7, [r0, #1]
    64da:	b10d      	cbz	r5, 64e0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    64dc:	2d01      	cmp	r5, #1
    64de:	d101      	bne.n	64e4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    64e0:	f886 8001 	strb.w	r8, [r6, #1]
    64e4:	7870      	ldrb	r0, [r6, #1]
    64e6:	f04f 0901 	mov.w	r9, #1
    64ea:	b150      	cbz	r0, 6502 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    64ec:	2801      	cmp	r0, #1
    64ee:	d01a      	beq.n	6526 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    64f0:	2802      	cmp	r0, #2
    64f2:	d034      	beq.n	655e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    64f4:	2803      	cmp	r0, #3
    64f6:	d048      	beq.n	658a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    64f8:	f240 411d 	movw	r1, #1053	; 0x41d
    64fc:	2027      	movs	r0, #39	; 0x27
    64fe:	f7fe ffef 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6502:	2d01      	cmp	r5, #1
    6504:	d032      	beq.n	656c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    6506:	f000 f8f9 	bl	66fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    650a:	4639      	mov	r1, r7
    650c:	2201      	movs	r2, #1
    650e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6510:	f007 ff1b 	bl	e34a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    6514:	e028      	b.n	6568 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    6516:	bf00      	nop
    6518:	f884 8008 	strb.w	r8, [r4, #8]
    651c:	e031      	b.n	6582 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    651e:	bf00      	nop
    6520:	f884 9008 	strb.w	r9, [r4, #8]
    6524:	e02d      	b.n	6582 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    6526:	2d01      	cmp	r5, #1
    6528:	d008      	beq.n	653c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    652a:	f000 f8e7 	bl	66fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    652e:	4639      	mov	r1, r7
    6530:	2200      	movs	r2, #0
    6532:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6534:	f007 ff09 	bl	e34a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    6538:	2d02      	cmp	r5, #2
    653a:	d00b      	beq.n	6554 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    653c:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    6540:	1c40      	adds	r0, r0, #1
    6542:	f141 0100 	adc.w	r1, r1, #0
    6546:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    654a:	7a20      	ldrb	r0, [r4, #8]
    654c:	2801      	cmp	r0, #1
    654e:	d003      	beq.n	6558 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    6550:	f884 9008 	strb.w	r9, [r4, #8]
    6554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6558:	f884 8008 	strb.w	r8, [r4, #8]
    655c:	e7fa      	b.n	6554 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    655e:	2d01      	cmp	r5, #1
    6560:	d004      	beq.n	656c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    6562:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6564:	f008 f8f0 	bl	e748 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    6568:	2d02      	cmp	r5, #2
    656a:	d0f3      	beq.n	6554 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    656c:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    6570:	1c40      	adds	r0, r0, #1
    6572:	f141 0100 	adc.w	r1, r1, #0
    6576:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    657a:	7a20      	ldrb	r0, [r4, #8]
    657c:	2801      	cmp	r0, #1
    657e:	d1cf      	bne.n	6520 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    6580:	e7ca      	b.n	6518 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    6582:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6586:	f001 b8a5 	b.w	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    658a:	2d01      	cmp	r5, #1
    658c:	d0e2      	beq.n	6554 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    658e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6590:	f008 f8da 	bl	e748 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    6594:	e7f5      	b.n	6582 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    6596:	0000      	.short	0x0000
    6598:	200000d4 	.word	0x200000d4

0000659c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    659c:	4802      	ldr	r0, [pc, #8]	; (65a8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    659e:	89c0      	ldrh	r0, [r0, #14]
    65a0:	f3c0 2080 	ubfx	r0, r0, #10, #1
    65a4:	4770      	bx	lr
    65a6:	0000      	.short	0x0000
    65a8:	200000d4 	.word	0x200000d4

000065ac <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    65ac:	4804      	ldr	r0, [pc, #16]	; (65c0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    65ae:	7800      	ldrb	r0, [r0, #0]
    65b0:	b108      	cbz	r0, 65b6 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    65b2:	200c      	movs	r0, #12
    65b4:	4770      	bx	lr
    65b6:	4903      	ldr	r1, [pc, #12]	; (65c4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    65b8:	2000      	movs	r0, #0
    65ba:	7708      	strb	r0, [r1, #28]
    65bc:	4770      	bx	lr
    65be:	0000      	.short	0x0000
    65c0:	200000d4 	.word	0x200000d4
    65c4:	20000d9a 	.word	0x20000d9a

000065c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    65c8:	480c      	ldr	r0, [pc, #48]	; (65fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    65ca:	b510      	push	{r4, lr}
    65cc:	7801      	ldrb	r1, [r0, #0]
    65ce:	b149      	cbz	r1, 65e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    65d0:	f100 0138 	add.w	r1, r0, #56	; 0x38
    65d4:	7800      	ldrb	r0, [r0, #0]
    65d6:	2802      	cmp	r0, #2
    65d8:	d008      	beq.n	65ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    65da:	f240 11f1 	movw	r1, #497	; 0x1f1
    65de:	2027      	movs	r0, #39	; 0x27
    65e0:	f7fe ff7e 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    65e8:	f000 b9fe 	b.w	69e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    65ec:	6848      	ldr	r0, [r1, #4]
    65ee:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
    65f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    65f6:	f005 bd2d 	b.w	c054 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    65fa:	0000      	.short	0x0000
    65fc:	200000d4 	.word	0x200000d4
    6600:	4a02      	ldr	r2, [pc, #8]	; (660c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    6602:	8993      	ldrh	r3, [r2, #12]
    6604:	4303      	orrs	r3, r0
    6606:	8193      	strh	r3, [r2, #12]
    6608:	6952      	ldr	r2, [r2, #20]
    660a:	4710      	bx	r2
    660c:	200000d4 	.word	0x200000d4
    6610:	4801      	ldr	r0, [pc, #4]	; (6618 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    6612:	6840      	ldr	r0, [r0, #4]
    6614:	4770      	bx	lr
    6616:	0000      	.short	0x0000
    6618:	2000010c 	.word	0x2000010c
    661c:	4801      	ldr	r0, [pc, #4]	; (6624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    661e:	6840      	ldr	r0, [r0, #4]
    6620:	3078      	adds	r0, #120	; 0x78
    6622:	4770      	bx	lr
    6624:	2000010c 	.word	0x2000010c
    6628:	4a01      	ldr	r2, [pc, #4]	; (6630 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    662a:	2100      	movs	r1, #0
    662c:	6952      	ldr	r2, [r2, #20]
    662e:	4710      	bx	r2
    6630:	200000d4 	.word	0x200000d4
    6634:	b570      	push	{r4, r5, r6, lr}
    6636:	f7ff fff1 	bl	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    663a:	4604      	mov	r4, r0
    663c:	f7ff ffe8 	bl	6610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6640:	4605      	mov	r5, r0
    6642:	4621      	mov	r1, r4
    6644:	f008 fca3 	bl	ef8e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    6648:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    664c:	2901      	cmp	r1, #1
    664e:	d112      	bne.n	6676 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    6650:	2800      	cmp	r0, #0
    6652:	d010      	beq.n	6676 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xae>
    6654:	4808      	ldr	r0, [pc, #32]	; (6678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>)
    6656:	882a      	ldrh	r2, [r5, #0]
    6658:	6841      	ldr	r1, [r0, #4]
    665a:	f501 7096 	add.w	r0, r1, #300	; 0x12c
    665e:	8142      	strh	r2, [r0, #10]
    6660:	7a62      	ldrb	r2, [r4, #9]
    6662:	7302      	strb	r2, [r0, #12]
    6664:	7aa2      	ldrb	r2, [r4, #10]
    6666:	7342      	strb	r2, [r0, #13]
    6668:	2218      	movs	r2, #24
    666a:	f000 ff61 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    666e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6672:	f001 b82f 	b.w	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6676:	bd70      	pop	{r4, r5, r6, pc}
    6678:	2000010c 	.word	0x2000010c
    667c:	b570      	push	{r4, r5, r6, lr}
    667e:	4605      	mov	r5, r0
    6680:	2901      	cmp	r1, #1
    6682:	d818      	bhi.n	66b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    6684:	4c12      	ldr	r4, [pc, #72]	; (66d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>)
    6686:	69a1      	ldr	r1, [r4, #24]
    6688:	4788      	blx	r1
    668a:	b1a0      	cbz	r0, 66b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    668c:	7960      	ldrb	r0, [r4, #5]
    668e:	b990      	cbnz	r0, 66b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    6690:	b9e5      	cbnz	r5, 66cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    6692:	f104 0010 	add.w	r0, r4, #16
    6696:	7801      	ldrb	r1, [r0, #0]
    6698:	06c8      	lsls	r0, r1, #27
    669a:	d405      	bmi.n	66a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    669c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    669e:	7800      	ldrb	r0, [r0, #0]
    66a0:	06c0      	lsls	r0, r0, #27
    66a2:	d401      	bmi.n	66a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe0>
    66a4:	2001      	movs	r0, #1
    66a6:	e000      	b.n	66aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe2>
    66a8:	2000      	movs	r0, #0
    66aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    66ac:	b92a      	cbnz	r2, 66ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    66ae:	8962      	ldrh	r2, [r4, #10]
    66b0:	b11a      	cbz	r2, 66ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    66b2:	06c9      	lsls	r1, r1, #27
    66b4:	d401      	bmi.n	66ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    66b6:	2001      	movs	r0, #1
    66b8:	bd70      	pop	{r4, r5, r6, pc}
    66ba:	89a1      	ldrh	r1, [r4, #12]
    66bc:	078a      	lsls	r2, r1, #30
    66be:	d503      	bpl.n	66c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    66c0:	6a22      	ldr	r2, [r4, #32]
    66c2:	78d2      	ldrb	r2, [r2, #3]
    66c4:	2a02      	cmp	r2, #2
    66c6:	d001      	beq.n	66cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    66c8:	4308      	orrs	r0, r1
    66ca:	d1f4      	bne.n	66b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xee>
    66cc:	2000      	movs	r0, #0
    66ce:	bd70      	pop	{r4, r5, r6, pc}
    66d0:	200000d4 	.word	0x200000d4
    66d4:	b530      	push	{r4, r5, lr}
    66d6:	4b08      	ldr	r3, [pc, #32]	; (66f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>)
    66d8:	88dd      	ldrh	r5, [r3, #6]
    66da:	891c      	ldrh	r4, [r3, #8]
    66dc:	b12a      	cbz	r2, 66ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    66de:	b908      	cbnz	r0, 66e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    66e0:	b905      	cbnz	r5, 66e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    66e2:	b114      	cbz	r4, 66ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    66e4:	8958      	ldrh	r0, [r3, #10]
    66e6:	1c40      	adds	r0, r0, #1
    66e8:	8158      	strh	r0, [r3, #10]
    66ea:	b111      	cbz	r1, 66f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12a>
    66ec:	1c6d      	adds	r5, r5, #1
    66ee:	80dd      	strh	r5, [r3, #6]
    66f0:	bd30      	pop	{r4, r5, pc}
    66f2:	1c64      	adds	r4, r4, #1
    66f4:	811c      	strh	r4, [r3, #8]
    66f6:	bd30      	pop	{r4, r5, pc}
    66f8:	20000d9a 	.word	0x20000d9a
    66fc:	b510      	push	{r4, lr}
    66fe:	4c08      	ldr	r4, [pc, #32]	; (6720 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x158>)
    6700:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6702:	b138      	cbz	r0, 6714 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x14c>
    6704:	8962      	ldrh	r2, [r4, #10]
    6706:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6708:	1cd2      	adds	r2, r2, #3
    670a:	f007 f86d 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    670e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6710:	6260      	str	r0, [r4, #36]	; 0x24
    6712:	bd10      	pop	{r4, pc}
    6714:	f240 4163 	movw	r1, #1123	; 0x463
    6718:	2027      	movs	r0, #39	; 0x27
    671a:	f7fe fee1 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    671e:	0000      	.short	0x0000
    6720:	200000d4 	.word	0x200000d4
    6724:	b510      	push	{r4, lr}
    6726:	f7ff ff73 	bl	6610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    672a:	4604      	mov	r4, r0
    672c:	f7ff ff76 	bl	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6730:	4601      	mov	r1, r0
    6732:	7b42      	ldrb	r2, [r0, #13]
    6734:	4815      	ldr	r0, [pc, #84]	; (678c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c4>)
    6736:	2a24      	cmp	r2, #36	; 0x24
    6738:	d00e      	beq.n	6758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    673a:	7b89      	ldrb	r1, [r1, #14]
    673c:	2924      	cmp	r1, #36	; 0x24
    673e:	d00b      	beq.n	6758 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x190>
    6740:	2a1f      	cmp	r2, #31
    6742:	d00d      	beq.n	6760 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    6744:	2a20      	cmp	r2, #32
    6746:	d00b      	beq.n	6760 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>
    6748:	2922      	cmp	r1, #34	; 0x22
    674a:	d00f      	beq.n	676c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    674c:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    6750:	2804      	cmp	r0, #4
    6752:	d100      	bne.n	6756 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18e>
    6754:	2008      	movs	r0, #8
    6756:	bd10      	pop	{r4, pc}
    6758:	6840      	ldr	r0, [r0, #4]
    675a:	f890 1276 	ldrb.w	r1, [r0, #630]	; 0x276
    675e:	e00e      	b.n	677e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b6>
    6760:	2922      	cmp	r1, #34	; 0x22
    6762:	d003      	beq.n	676c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a4>
    6764:	6840      	ldr	r0, [r0, #4]
    6766:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    676a:	e005      	b.n	6778 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b0>
    676c:	6841      	ldr	r1, [r0, #4]
    676e:	f891 0126 	ldrb.w	r0, [r1, #294]	; 0x126
    6772:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    6776:	4008      	ands	r0, r1
    6778:	f008 fa83 	bl	ec82 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    677c:	4601      	mov	r1, r0
    677e:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    6782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6786:	f008 ba94 	b.w	ecb2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    678a:	0000      	.short	0x0000
    678c:	2000010c 	.word	0x2000010c
    6790:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6794:	468b      	mov	fp, r1
    6796:	4607      	mov	r7, r0
    6798:	f7ff ff40 	bl	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    679c:	f04f 0900 	mov.w	r9, #0
    67a0:	4c61      	ldr	r4, [pc, #388]	; (6928 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>)
    67a2:	4605      	mov	r5, r0
    67a4:	f88d 9000 	strb.w	r9, [sp]
    67a8:	f8cd 9004 	str.w	r9, [sp, #4]
    67ac:	7820      	ldrb	r0, [r4, #0]
    67ae:	464e      	mov	r6, r9
    67b0:	2802      	cmp	r0, #2
    67b2:	d004      	beq.n	67be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    67b4:	f240 41ea 	movw	r1, #1258	; 0x4ea
    67b8:	2027      	movs	r0, #39	; 0x27
    67ba:	f7fe fe91 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67be:	7ba0      	ldrb	r0, [r4, #14]
    67c0:	0640      	lsls	r0, r0, #25
    67c2:	d406      	bmi.n	67d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    67c4:	2040      	movs	r0, #64	; 0x40
    67c6:	f7ff ff2f 	bl	6628 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    67ca:	89e0      	ldrh	r0, [r4, #14]
    67cc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    67d0:	81e0      	strh	r0, [r4, #14]
    67d2:	7d28      	ldrb	r0, [r5, #20]
    67d4:	b3df      	cbz	r7, 684e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    67d6:	b180      	cbz	r0, 67fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    67d8:	f005 fa98 	bl	bd0c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    67dc:	f005 fa72 	bl	bcc4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    67e0:	b958      	cbnz	r0, 67fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    67e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    67e4:	7841      	ldrb	r1, [r0, #1]
    67e6:	b141      	cbz	r1, 67fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    67e8:	7800      	ldrb	r0, [r0, #0]
    67ea:	7a29      	ldrb	r1, [r5, #8]
    67ec:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    67f0:	4288      	cmp	r0, r1
    67f2:	d102      	bne.n	67fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    67f4:	2001      	movs	r0, #1
    67f6:	70a0      	strb	r0, [r4, #2]
    67f8:	e092      	b.n	6920 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    67fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    67fc:	7841      	ldrb	r1, [r0, #1]
    67fe:	8161      	strh	r1, [r4, #10]
    6800:	b121      	cbz	r1, 680c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    6802:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6804:	f007 ff6d 	bl	e6e2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    6808:	62a0      	str	r0, [r4, #40]	; 0x28
    680a:	e000      	b.n	680e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x246>
    680c:	62a6      	str	r6, [r4, #40]	; 0x28
    680e:	89e0      	ldrh	r0, [r4, #14]
    6810:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6814:	81e0      	strh	r0, [r4, #14]
    6816:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6818:	79e9      	ldrb	r1, [r5, #7]
    681a:	7800      	ldrb	r0, [r0, #0]
    681c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    6820:	4288      	cmp	r0, r1
    6822:	d007      	beq.n	6834 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26c>
    6824:	a801      	add	r0, sp, #4
    6826:	f000 f975 	bl	6b14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54c>
    682a:	89e0      	ldrh	r0, [r4, #14]
    682c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6830:	81e0      	strh	r0, [r4, #14]
    6832:	e001      	b.n	6838 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    6834:	f04f 0901 	mov.w	r9, #1
    6838:	6a60      	ldr	r0, [r4, #36]	; 0x24
    683a:	7a29      	ldrb	r1, [r5, #8]
    683c:	7800      	ldrb	r0, [r0, #0]
    683e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6842:	4288      	cmp	r0, r1
    6844:	d10e      	bne.n	6864 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    6846:	4668      	mov	r0, sp
    6848:	f000 f926 	bl	6a98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d0>
    684c:	e00a      	b.n	6864 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29c>
    684e:	e7ff      	b.n	6850 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    6850:	b108      	cbz	r0, 6856 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    6852:	f005 fa55 	bl	bd00 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    6856:	78e0      	ldrb	r0, [r4, #3]
    6858:	1c40      	adds	r0, r0, #1
    685a:	70e0      	strb	r0, [r4, #3]
    685c:	89e0      	ldrh	r0, [r4, #14]
    685e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    6862:	81e0      	strh	r0, [r4, #14]
    6864:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6928 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    6868:	7ce8      	ldrb	r0, [r5, #19]
    686a:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    686e:	b188      	cbz	r0, 6894 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    6870:	f7ff fece 	bl	6610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6874:	492d      	ldr	r1, [pc, #180]	; (692c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    6876:	760e      	strb	r6, [r1, #24]
    6878:	e9d5 231a 	ldrd	r2, r3, [r5, #104]	; 0x68
    687c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    6880:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    6884:	f008 fa07 	bl	ec96 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6888:	4603      	mov	r3, r0
    688a:	22fb      	movs	r2, #251	; 0xfb
    688c:	4927      	ldr	r1, [pc, #156]	; (692c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x364>)
    688e:	4630      	mov	r0, r6
    6890:	f005 f96e 	bl	bb70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6894:	f04f 0800 	mov.w	r8, #0
    6898:	f1bb 0f00 	cmp.w	fp, #0
    689c:	d104      	bne.n	68a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    689e:	78e1      	ldrb	r1, [r4, #3]
    68a0:	2001      	movs	r0, #1
    68a2:	f7ff feeb 	bl	667c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    68a6:	b198      	cbz	r0, 68d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    68a8:	f005 fdd8 	bl	c45c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    68ac:	f89d 0000 	ldrb.w	r0, [sp]
    68b0:	b110      	cbz	r0, 68b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>
    68b2:	2000      	movs	r0, #0
    68b4:	f7ff fe06 	bl	64c4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    68b8:	88a8      	ldrh	r0, [r5, #4]
    68ba:	464a      	mov	r2, r9
    68bc:	4639      	mov	r1, r7
    68be:	f7ff ff09 	bl	66d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    68c2:	b117      	cbz	r7, 68ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x302>
    68c4:	70e6      	strb	r6, [r4, #3]
    68c6:	f7ff feb5 	bl	6634 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    68ca:	f04f 0801 	mov.w	r8, #1
    68ce:	e017      	b.n	6900 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    68d0:	f89d 0000 	ldrb.w	r0, [sp]
    68d4:	b110      	cbz	r0, 68dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    68d6:	2001      	movs	r0, #1
    68d8:	f7ff fdf4 	bl	64c4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    68dc:	2000      	movs	r0, #0
    68de:	f000 f9a3 	bl	6c28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x660>
    68e2:	f89d 0000 	ldrb.w	r0, [sp]
    68e6:	b110      	cbz	r0, 68ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    68e8:	2002      	movs	r0, #2
    68ea:	f7ff fdeb 	bl	64c4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    68ee:	88a8      	ldrh	r0, [r5, #4]
    68f0:	464a      	mov	r2, r9
    68f2:	4639      	mov	r1, r7
    68f4:	f7ff feee 	bl	66d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    68f8:	b117      	cbz	r7, 6900 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    68fa:	70e6      	strb	r6, [r4, #3]
    68fc:	f7ff fe9a 	bl	6634 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6900:	9801      	ldr	r0, [sp, #4]
    6902:	b150      	cbz	r0, 691a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    6904:	f007 fd79 	bl	e3fa <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    6908:	f8da 1004 	ldr.w	r1, [sl, #4]
    690c:	1c40      	adds	r0, r0, #1
    690e:	7206      	strb	r6, [r0, #8]
    6910:	220b      	movs	r2, #11
    6912:	f000 fe0d 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6916:	f000 fedd 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    691a:	f1b8 0f00 	cmp.w	r8, #0
    691e:	d001      	beq.n	6924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    6920:	f000 f862 	bl	69e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6924:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6928:	200000d4 	.word	0x200000d4
    692c:	20000d50 	.word	0x20000d50
    6930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6934:	460f      	mov	r7, r1
    6936:	4680      	mov	r8, r0
    6938:	f7ff fe70 	bl	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    693c:	4d28      	ldr	r5, [pc, #160]	; (69e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    693e:	4604      	mov	r4, r0
    6940:	7828      	ldrb	r0, [r5, #0]
    6942:	2801      	cmp	r0, #1
    6944:	d004      	beq.n	6950 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    6946:	f240 4172 	movw	r1, #1138	; 0x472
    694a:	2027      	movs	r0, #39	; 0x27
    694c:	f7fe fdc8 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6950:	7821      	ldrb	r1, [r4, #0]
    6952:	2000      	movs	r0, #0
    6954:	2601      	movs	r6, #1
    6956:	b129      	cbz	r1, 6964 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    6958:	7020      	strb	r0, [r4, #0]
    695a:	2100      	movs	r1, #0
    695c:	2004      	movs	r0, #4
    695e:	f7ff fe4f 	bl	6600 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6962:	70a6      	strb	r6, [r4, #2]
    6964:	6a29      	ldr	r1, [r5, #32]
    6966:	7808      	ldrb	r0, [r1, #0]
    6968:	43c0      	mvns	r0, r0
    696a:	0780      	lsls	r0, r0, #30
    696c:	d109      	bne.n	6982 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ba>
    696e:	79a0      	ldrb	r0, [r4, #6]
    6970:	bb78      	cbnz	r0, 69d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    6972:	2002      	movs	r0, #2
    6974:	f7ff fe44 	bl	6600 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6978:	6a28      	ldr	r0, [r5, #32]
    697a:	7800      	ldrb	r0, [r0, #0]
    697c:	43c0      	mvns	r0, r0
    697e:	0780      	lsls	r0, r0, #30
    6980:	d027      	beq.n	69d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40a>
    6982:	6a28      	ldr	r0, [r5, #32]
    6984:	7840      	ldrb	r0, [r0, #1]
    6986:	b110      	cbz	r0, 698e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c6>
    6988:	2002      	movs	r0, #2
    698a:	71a0      	strb	r0, [r4, #6]
    698c:	e000      	b.n	6990 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c8>
    698e:	71a6      	strb	r6, [r4, #6]
    6990:	7d20      	ldrb	r0, [r4, #20]
    6992:	b190      	cbz	r0, 69ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f2>
    6994:	f7ff fe3c 	bl	6610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6998:	4912      	ldr	r1, [pc, #72]	; (69e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    699a:	7a6d      	ldrb	r5, [r5, #9]
    699c:	760e      	strb	r6, [r1, #24]
    699e:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    69a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    69a6:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    69aa:	f008 f974 	bl	ec96 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    69ae:	4603      	mov	r3, r0
    69b0:	462a      	mov	r2, r5
    69b2:	490c      	ldr	r1, [pc, #48]	; (69e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    69b4:	4630      	mov	r0, r6
    69b6:	f005 f8db 	bl	bb70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    69ba:	ea37 0708 	bics.w	r7, r7, r8
    69be:	d004      	beq.n	69ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    69c0:	2100      	movs	r1, #0
    69c2:	4608      	mov	r0, r1
    69c4:	f7ff fe5a 	bl	667c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>
    69c8:	b128      	cbz	r0, 69d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40e>
    69ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    69ce:	f000 b80b 	b.w	69e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    69d2:	2003      	movs	r0, #3
    69d4:	e7d9      	b.n	698a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    69d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    69da:	2000      	movs	r0, #0
    69dc:	f000 b8e8 	b.w	6bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    69e0:	200000d4 	.word	0x200000d4
    69e4:	20000d50 	.word	0x20000d50
    69e8:	b510      	push	{r4, lr}
    69ea:	f005 fa35 	bl	be58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    69ee:	f005 f953 	bl	bc98 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    69f2:	4c0e      	ldr	r4, [pc, #56]	; (6a2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>)
    69f4:	89e0      	ldrh	r0, [r4, #14]
    69f6:	f7ff fe17 	bl	6628 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    69fa:	69e2      	ldr	r2, [r4, #28]
    69fc:	7961      	ldrb	r1, [r4, #5]
    69fe:	78a0      	ldrb	r0, [r4, #2]
    6a00:	4790      	blx	r2
    6a02:	480b      	ldr	r0, [pc, #44]	; (6a30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6a04:	7f00      	ldrb	r0, [r0, #28]
    6a06:	b168      	cbz	r0, 6a24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    6a08:	4909      	ldr	r1, [pc, #36]	; (6a30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6a0a:	220e      	movs	r2, #14
    6a0c:	f101 000e 	add.w	r0, r1, #14
    6a10:	f006 feea 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a14:	4806      	ldr	r0, [pc, #24]	; (6a30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>)
    6a16:	221d      	movs	r2, #29
    6a18:	2100      	movs	r1, #0
    6a1a:	301d      	adds	r0, #29
    6a1c:	f000 fd88 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6a20:	f000 fe58 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6a24:	2000      	movs	r0, #0
    6a26:	7020      	strb	r0, [r4, #0]
    6a28:	bd10      	pop	{r4, pc}
    6a2a:	0000      	.short	0x0000
    6a2c:	200000d4 	.word	0x200000d4
    6a30:	20000d9a 	.word	0x20000d9a
    6a34:	4808      	ldr	r0, [pc, #32]	; (6a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x490>)
    6a36:	b510      	push	{r4, lr}
    6a38:	7800      	ldrb	r0, [r0, #0]
    6a3a:	2802      	cmp	r0, #2
    6a3c:	d004      	beq.n	6a48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    6a3e:	f240 212a 	movw	r1, #554	; 0x22a
    6a42:	2027      	movs	r0, #39	; 0x27
    6a44:	f7fe fd4c 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a48:	4904      	ldr	r1, [pc, #16]	; (6a5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>)
    6a4a:	2001      	movs	r0, #1
    6a4c:	7308      	strb	r0, [r1, #12]
    6a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6a52:	f7ff bfc9 	b.w	69e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6a56:	0000      	.short	0x0000
    6a58:	200000d4 	.word	0x200000d4
    6a5c:	20000d9a 	.word	0x20000d9a
    6a60:	4b0c      	ldr	r3, [pc, #48]	; (6a94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>)
    6a62:	b430      	push	{r4, r5}
    6a64:	79db      	ldrb	r3, [r3, #7]
    6a66:	b93a      	cbnz	r2, 6a78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    6a68:	2bff      	cmp	r3, #255	; 0xff
    6a6a:	d105      	bne.n	6a78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b0>
    6a6c:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    6a70:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    6a74:	42a2      	cmp	r2, r4
    6a76:	d00a      	beq.n	6a8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c6>
    6a78:	b129      	cbz	r1, 6a86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    6a7a:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    6a7e:	bc30      	pop	{r4, r5}
    6a80:	4618      	mov	r0, r3
    6a82:	f005 bd13 	b.w	c4ac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    6a86:	23ff      	movs	r3, #255	; 0xff
    6a88:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    6a8c:	e7f7      	b.n	6a7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b6>
    6a8e:	bc30      	pop	{r4, r5}
    6a90:	4770      	bx	lr
    6a92:	0000      	.short	0x0000
    6a94:	200000d4 	.word	0x200000d4
    6a98:	b570      	push	{r4, r5, r6, lr}
    6a9a:	4606      	mov	r6, r0
    6a9c:	f7ff fdbe 	bl	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6aa0:	4a1b      	ldr	r2, [pc, #108]	; (6b10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>)
    6aa2:	4604      	mov	r4, r0
    6aa4:	2501      	movs	r5, #1
    6aa6:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6aa8:	7808      	ldrb	r0, [r1, #0]
    6aaa:	f000 0003 	and.w	r0, r0, #3
    6aae:	2801      	cmp	r0, #1
    6ab0:	d00c      	beq.n	6acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    6ab2:	2802      	cmp	r0, #2
    6ab4:	d00a      	beq.n	6acc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x504>
    6ab6:	2803      	cmp	r0, #3
    6ab8:	d121      	bne.n	6afe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6aba:	7025      	strb	r5, [r4, #0]
    6abc:	89d0      	ldrh	r0, [r2, #14]
    6abe:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    6ac2:	81d0      	strh	r0, [r2, #14]
    6ac4:	2001      	movs	r0, #1
    6ac6:	f7ff fd9b 	bl	6600 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6aca:	e018      	b.n	6afe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6acc:	7848      	ldrb	r0, [r1, #1]
    6ace:	b1b0      	cbz	r0, 6afe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6ad0:	89d1      	ldrh	r1, [r2, #14]
    6ad2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    6ad6:	81d1      	strh	r1, [r2, #14]
    6ad8:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6ada:	2900      	cmp	r1, #0
    6adc:	d009      	beq.n	6af2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6ade:	28fb      	cmp	r0, #251	; 0xfb
    6ae0:	d808      	bhi.n	6af4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52c>
    6ae2:	7990      	ldrb	r0, [r2, #6]
    6ae4:	b120      	cbz	r0, 6af0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>
    6ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6aea:	2020      	movs	r0, #32
    6aec:	f7ff bd9c 	b.w	6628 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6af0:	7035      	strb	r5, [r6, #0]
    6af2:	bd70      	pop	{r4, r5, r6, pc}
    6af4:	7950      	ldrb	r0, [r2, #5]
    6af6:	f040 0010 	orr.w	r0, r0, #16
    6afa:	7150      	strb	r0, [r2, #5]
    6afc:	bd70      	pop	{r4, r5, r6, pc}
    6afe:	7a20      	ldrb	r0, [r4, #8]
    6b00:	2801      	cmp	r0, #1
    6b02:	d001      	beq.n	6b08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    6b04:	7225      	strb	r5, [r4, #8]
    6b06:	bd70      	pop	{r4, r5, r6, pc}
    6b08:	2000      	movs	r0, #0
    6b0a:	7220      	strb	r0, [r4, #8]
    6b0c:	bd70      	pop	{r4, r5, r6, pc}
    6b0e:	0000      	.short	0x0000
    6b10:	200000d4 	.word	0x200000d4
    6b14:	b570      	push	{r4, r5, r6, lr}
    6b16:	4605      	mov	r5, r0
    6b18:	f7ff fd80 	bl	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6b1c:	4604      	mov	r4, r0
    6b1e:	7980      	ldrb	r0, [r0, #6]
    6b20:	2800      	cmp	r0, #0
    6b22:	d02d      	beq.n	6b80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    6b24:	2802      	cmp	r0, #2
    6b26:	d10c      	bne.n	6b42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    6b28:	481b      	ldr	r0, [pc, #108]	; (6b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    6b2a:	4629      	mov	r1, r5
    6b2c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6b2e:	f007 fbe0 	bl	e2f2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6b32:	b330      	cbz	r0, 6b82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ba>
    6b34:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    6b38:	1c40      	adds	r0, r0, #1
    6b3a:	f141 0100 	adc.w	r1, r1, #0
    6b3e:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    6b42:	2500      	movs	r5, #0
    6b44:	71a5      	strb	r5, [r4, #6]
    6b46:	78a0      	ldrb	r0, [r4, #2]
    6b48:	b120      	cbz	r0, 6b54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58c>
    6b4a:	70a5      	strb	r5, [r4, #2]
    6b4c:	2100      	movs	r1, #0
    6b4e:	2010      	movs	r0, #16
    6b50:	f7ff fd56 	bl	6600 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6b54:	7860      	ldrb	r0, [r4, #1]
    6b56:	b170      	cbz	r0, 6b76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ae>
    6b58:	7065      	strb	r5, [r4, #1]
    6b5a:	f7ff fb01 	bl	6160 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6b5e:	b198      	cbz	r0, 6b88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c0>
    6b60:	2100      	movs	r1, #0
    6b62:	2008      	movs	r0, #8
    6b64:	f7ff fd4c 	bl	6600 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6b68:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
    6b6c:	1c40      	adds	r0, r0, #1
    6b6e:	f141 0100 	adc.w	r1, r1, #0
    6b72:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    6b76:	79e0      	ldrb	r0, [r4, #7]
    6b78:	2801      	cmp	r0, #1
    6b7a:	d00a      	beq.n	6b92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ca>
    6b7c:	2001      	movs	r0, #1
    6b7e:	71e0      	strb	r0, [r4, #7]
    6b80:	bd70      	pop	{r4, r5, r6, pc}
    6b82:	f240 31b9 	movw	r1, #953	; 0x3b9
    6b86:	e001      	b.n	6b8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c4>
    6b88:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6b8c:	2027      	movs	r0, #39	; 0x27
    6b8e:	f7fe fca7 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b92:	71e5      	strb	r5, [r4, #7]
    6b94:	bd70      	pop	{r4, r5, r6, pc}
    6b96:	0000      	.short	0x0000
    6b98:	200000d4 	.word	0x200000d4
    6b9c:	4803      	ldr	r0, [pc, #12]	; (6bac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    6b9e:	7800      	ldrb	r0, [r0, #0]
    6ba0:	2800      	cmp	r0, #0
    6ba2:	d001      	beq.n	6ba8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>
    6ba4:	f7ff bf20 	b.w	69e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    6ba8:	4770      	bx	lr
    6baa:	0000      	.short	0x0000
    6bac:	200000d4 	.word	0x200000d4
    6bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bb4:	4606      	mov	r6, r0
    6bb6:	f7ff fd2b 	bl	6610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6bba:	4680      	mov	r8, r0
    6bbc:	f7ff fd2e 	bl	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6bc0:	4c16      	ldr	r4, [pc, #88]	; (6c1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>)
    6bc2:	4605      	mov	r5, r0
    6bc4:	4632      	mov	r2, r6
    6bc6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6bc8:	6260      	str	r0, [r4, #36]	; 0x24
    6bca:	2101      	movs	r1, #1
    6bcc:	4640      	mov	r0, r8
    6bce:	f7ff ff47 	bl	6a60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    6bd2:	7d28      	ldrb	r0, [r5, #20]
    6bd4:	2700      	movs	r7, #0
    6bd6:	b170      	cbz	r0, 6bf6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62e>
    6bd8:	4811      	ldr	r0, [pc, #68]	; (6c20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6bda:	f005 fba9 	bl	c330 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6bde:	4811      	ldr	r0, [pc, #68]	; (6c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65c>)
    6be0:	2101      	movs	r1, #1
    6be2:	7601      	strb	r1, [r0, #24]
    6be4:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    6be8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6bec:	490c      	ldr	r1, [pc, #48]	; (6c20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>)
    6bee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6bf0:	f005 f810 	bl	bc14 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6bf4:	e004      	b.n	6c00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x638>
    6bf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6bf8:	f005 fb9a 	bl	c330 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6bfc:	f005 f84c 	bl	bc98 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6c00:	b916      	cbnz	r6, 6c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x640>
    6c02:	4638      	mov	r0, r7
    6c04:	f005 fa4a 	bl	c09c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6c08:	2100      	movs	r1, #0
    6c0a:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    6c0e:	4608      	mov	r0, r1
    6c10:	f005 fc06 	bl	c420 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6c14:	2002      	movs	r0, #2
    6c16:	7020      	strb	r0, [r4, #0]
    6c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c1c:	200000d4 	.word	0x200000d4
    6c20:	20000c48 	.word	0x20000c48
    6c24:	20000d50 	.word	0x20000d50
    6c28:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6c2c:	4604      	mov	r4, r0
    6c2e:	f7ff fcf5 	bl	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6c32:	4605      	mov	r5, r0
    6c34:	f7ff fcec 	bl	6610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6c38:	2700      	movs	r7, #0
    6c3a:	4606      	mov	r6, r0
    6c3c:	f8df 9164 	ldr.w	r9, [pc, #356]	; 6da4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7dc>
    6c40:	f88d 7000 	strb.w	r7, [sp]
    6c44:	4622      	mov	r2, r4
    6c46:	4639      	mov	r1, r7
    6c48:	f7ff ff0a 	bl	6a60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    6c4c:	79a8      	ldrb	r0, [r5, #6]
    6c4e:	f04f 0801 	mov.w	r8, #1
    6c52:	f1a9 0420 	sub.w	r4, r9, #32
    6c56:	b140      	cbz	r0, 6c6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    6c58:	2801      	cmp	r0, #1
    6c5a:	d020      	beq.n	6c9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    6c5c:	2802      	cmp	r0, #2
    6c5e:	d02f      	beq.n	6cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f8>
    6c60:	2803      	cmp	r0, #3
    6c62:	d03b      	beq.n	6cdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x714>
    6c64:	f240 21d5 	movw	r1, #725	; 0x2d5
    6c68:	e057      	b.n	6d1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6c6a:	7a20      	ldrb	r0, [r4, #8]
    6c6c:	2154      	movs	r1, #84	; 0x54
    6c6e:	f8ad 0004 	strh.w	r0, [sp, #4]
    6c72:	5388      	strh	r0, [r1, r6]
    6c74:	4648      	mov	r0, r9
    6c76:	f7ff fa9d 	bl	61b4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6c7a:	b130      	cbz	r0, 6c8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c2>
    6c7c:	2080      	movs	r0, #128	; 0x80
    6c7e:	6a21      	ldr	r1, [r4, #32]
    6c80:	f7ff fcbe 	bl	6600 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6c84:	f885 8001 	strb.w	r8, [r5, #1]
    6c88:	e02c      	b.n	6ce4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6c8a:	466a      	mov	r2, sp
    6c8c:	a901      	add	r1, sp, #4
    6c8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6c90:	f008 f819 	bl	ecc6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6c94:	6220      	str	r0, [r4, #32]
    6c96:	b110      	cbz	r0, 6c9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d6>
    6c98:	f895 104b 	ldrb.w	r1, [r5, #75]	; 0x4b
    6c9c:	b111      	cbz	r1, 6ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    6c9e:	4842      	ldr	r0, [pc, #264]	; (6da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    6ca0:	6220      	str	r0, [r4, #32]
    6ca2:	e01f      	b.n	6ce4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6ca4:	f89d 1000 	ldrb.w	r1, [sp]
    6ca8:	b921      	cbnz	r1, 6cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    6caa:	8007      	strh	r7, [r0, #0]
    6cac:	7087      	strb	r7, [r0, #2]
    6cae:	2101      	movs	r1, #1
    6cb0:	f008 fb6b 	bl	f38a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6cb4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6cb8:	6a20      	ldr	r0, [r4, #32]
    6cba:	f008 fb1a 	bl	f2f2 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    6cbe:	e011      	b.n	6ce4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6cc0:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    6cc4:	f8ad 0004 	strh.w	r0, [sp, #4]
    6cc8:	466a      	mov	r2, sp
    6cca:	a901      	add	r1, sp, #4
    6ccc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6cce:	f007 fffa 	bl	ecc6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6cd2:	6220      	str	r0, [r4, #32]
    6cd4:	b930      	cbnz	r0, 6ce4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6cd6:	f240 21c6 	movw	r1, #710	; 0x2c6
    6cda:	e01e      	b.n	6d1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    6cdc:	4648      	mov	r0, r9
    6cde:	f7ff fa69 	bl	61b4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6ce2:	b1c0      	cbz	r0, 6d16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74e>
    6ce4:	6a20      	ldr	r0, [r4, #32]
    6ce6:	2308      	movs	r3, #8
    6ce8:	7801      	ldrb	r1, [r0, #0]
    6cea:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    6cee:	7001      	strb	r1, [r0, #0]
    6cf0:	79ea      	ldrb	r2, [r5, #7]
    6cf2:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    6cf6:	4311      	orrs	r1, r2
    6cf8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    6cfc:	7001      	strb	r1, [r0, #0]
    6cfe:	7a2a      	ldrb	r2, [r5, #8]
    6d00:	2304      	movs	r3, #4
    6d02:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    6d06:	4311      	orrs	r1, r2
    6d08:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    6d0c:	7001      	strb	r1, [r0, #0]
    6d0e:	43c9      	mvns	r1, r1
    6d10:	0789      	lsls	r1, r1, #30
    6d12:	d005      	beq.n	6d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    6d14:	e007      	b.n	6d26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    6d16:	f240 21cf 	movw	r1, #719	; 0x2cf
    6d1a:	2027      	movs	r0, #39	; 0x27
    6d1c:	f7fe fbe0 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d20:	78c0      	ldrb	r0, [r0, #3]
    6d22:	2802      	cmp	r0, #2
    6d24:	d00f      	beq.n	6d46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    6d26:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6d28:	f007 fbfd 	bl	e526 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6d2c:	b108      	cbz	r0, 6d32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x76a>
    6d2e:	2101      	movs	r1, #1
    6d30:	e00a      	b.n	6d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    6d32:	6a20      	ldr	r0, [r4, #32]
    6d34:	7800      	ldrb	r0, [r0, #0]
    6d36:	43c0      	mvns	r0, r0
    6d38:	0780      	lsls	r0, r0, #30
    6d3a:	d004      	beq.n	6d46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x77e>
    6d3c:	f7ff f9f8 	bl	6130 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6d40:	f080 0101 	eor.w	r1, r0, #1
    6d44:	e000      	b.n	6d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    6d46:	2100      	movs	r1, #0
    6d48:	6a20      	ldr	r0, [r4, #32]
    6d4a:	7802      	ldrb	r2, [r0, #0]
    6d4c:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    6d50:	7001      	strb	r1, [r0, #0]
    6d52:	7ce9      	ldrb	r1, [r5, #19]
    6d54:	b181      	cbz	r1, 6d78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    6d56:	7841      	ldrb	r1, [r0, #1]
    6d58:	b171      	cbz	r1, 6d78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b0>
    6d5a:	4814      	ldr	r0, [pc, #80]	; (6dac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    6d5c:	f005 fae8 	bl	c330 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6d60:	4811      	ldr	r0, [pc, #68]	; (6da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e0>)
    6d62:	3828      	subs	r0, #40	; 0x28
    6d64:	7607      	strb	r7, [r0, #24]
    6d66:	e9d5 121a 	ldrd	r1, r2, [r5, #104]	; 0x68
    6d6a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6d6e:	480f      	ldr	r0, [pc, #60]	; (6dac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7e4>)
    6d70:	6a21      	ldr	r1, [r4, #32]
    6d72:	f004 ff4f 	bl	bc14 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6d76:	e003      	b.n	6d80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>
    6d78:	f005 fada 	bl	c330 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6d7c:	f004 ff8c 	bl	bc98 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6d80:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    6d84:	2101      	movs	r1, #1
    6d86:	2000      	movs	r0, #0
    6d88:	f005 fb4a 	bl	c420 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6d8c:	f884 8004 	strb.w	r8, [r4, #4]
    6d90:	6a21      	ldr	r1, [r4, #32]
    6d92:	880a      	ldrh	r2, [r1, #0]
    6d94:	8222      	strh	r2, [r4, #16]
    6d96:	7889      	ldrb	r1, [r1, #2]
    6d98:	74a1      	strb	r1, [r4, #18]
    6d9a:	f884 8000 	strb.w	r8, [r4]
    6d9e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    6da2:	0000      	.short	0x0000
    6da4:	200000f4 	.word	0x200000f4
    6da8:	20000d78 	.word	0x20000d78
    6dac:	20000c48 	.word	0x20000c48
    6db0:	00006a35 	.word	0x00006a35
    6db4:	00006791 	.word	0x00006791
    6db8:	00006931 	.word	0x00006931
    6dbc:	00006b9d 	.word	0x00006b9d

00006dc0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6dc0:	4800      	ldr	r0, [pc, #0]	; (6dc4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    6dc2:	4770      	bx	lr
    6dc4:	200016dd 	.word	0x200016dd

00006dc8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6dc8:	4904      	ldr	r1, [pc, #16]	; (6ddc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    6dca:	788a      	ldrb	r2, [r1, #2]
    6dcc:	4282      	cmp	r2, r0
    6dce:	d903      	bls.n	6dd8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6dd0:	4408      	add	r0, r1
    6dd2:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    6dd6:	4770      	bx	lr
    6dd8:	2000      	movs	r0, #0
    6dda:	4770      	bx	lr
    6ddc:	2000150a 	.word	0x2000150a

00006de0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6de0:	4904      	ldr	r1, [pc, #16]	; (6df4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6de2:	788a      	ldrb	r2, [r1, #2]
    6de4:	4282      	cmp	r2, r0
    6de6:	d903      	bls.n	6df0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6de8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6dec:	3083      	adds	r0, #131	; 0x83
    6dee:	4770      	bx	lr
    6df0:	2000      	movs	r0, #0
    6df2:	4770      	bx	lr
    6df4:	2000150a 	.word	0x2000150a

00006df8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6df8:	4a05      	ldr	r2, [pc, #20]	; (6e10 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6dfa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6dfe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6e02:	6802      	ldr	r2, [r0, #0]
    6e04:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6e08:	8880      	ldrh	r0, [r0, #4]
    6e0a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6e0e:	4770      	bx	lr
    6e10:	2000150a 	.word	0x2000150a

00006e14 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6e14:	4904      	ldr	r1, [pc, #16]	; (6e28 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6e16:	788a      	ldrb	r2, [r1, #2]
    6e18:	4282      	cmp	r2, r0
    6e1a:	d903      	bls.n	6e24 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6e1c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6e20:	1cc0      	adds	r0, r0, #3
    6e22:	4770      	bx	lr
    6e24:	2000      	movs	r0, #0
    6e26:	4770      	bx	lr
    6e28:	2000150a 	.word	0x2000150a

00006e2c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6e2c:	b510      	push	{r4, lr}
    6e2e:	f240 12d3 	movw	r2, #467	; 0x1d3
    6e32:	2100      	movs	r1, #0
    6e34:	4808      	ldr	r0, [pc, #32]	; (6e58 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6e36:	f006 fd51 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6e3a:	2208      	movs	r2, #8
    6e3c:	21ff      	movs	r1, #255	; 0xff
    6e3e:	4807      	ldr	r0, [pc, #28]	; (6e5c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6e40:	f006 fd4c 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6e44:	4805      	ldr	r0, [pc, #20]	; (6e5c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6e46:	2100      	movs	r1, #0
    6e48:	1f00      	subs	r0, r0, #4
    6e4a:	7001      	strb	r1, [r0, #0]
    6e4c:	7041      	strb	r1, [r0, #1]
    6e4e:	f44f 7161 	mov.w	r1, #900	; 0x384
    6e52:	8041      	strh	r1, [r0, #2]
    6e54:	bd10      	pop	{r4, pc}
    6e56:	0000      	.short	0x0000
    6e58:	2000150a 	.word	0x2000150a
    6e5c:	20000320 	.word	0x20000320

00006e60 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    6e60:	4b0b      	ldr	r3, [pc, #44]	; (6e90 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    6e62:	b510      	push	{r4, lr}
    6e64:	789c      	ldrb	r4, [r3, #2]
    6e66:	4284      	cmp	r4, r0
    6e68:	d90f      	bls.n	6e8a <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    6e6a:	4418      	add	r0, r3
    6e6c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6e70:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6e74:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6e78:	700b      	strb	r3, [r1, #0]
    6e7a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    6e7e:	6011      	str	r1, [r2, #0]
    6e80:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6e84:	8090      	strh	r0, [r2, #4]
    6e86:	2001      	movs	r0, #1
    6e88:	bd10      	pop	{r4, pc}
    6e8a:	2000      	movs	r0, #0
    6e8c:	bd10      	pop	{r4, pc}
    6e8e:	0000      	.short	0x0000
    6e90:	2000150a 	.word	0x2000150a

00006e94 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6e94:	4907      	ldr	r1, [pc, #28]	; (6eb4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6e96:	788a      	ldrb	r2, [r1, #2]
    6e98:	4282      	cmp	r2, r0
    6e9a:	d909      	bls.n	6eb0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6e9c:	4408      	add	r0, r1
    6e9e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6ea2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6ea6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6eaa:	f000 0001 	and.w	r0, r0, #1
    6eae:	4770      	bx	lr
    6eb0:	2000      	movs	r0, #0
    6eb2:	4770      	bx	lr
    6eb4:	2000150a 	.word	0x2000150a

00006eb8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6eb8:	4801      	ldr	r0, [pc, #4]	; (6ec0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6eba:	8840      	ldrh	r0, [r0, #2]
    6ebc:	4770      	bx	lr
    6ebe:	0000      	.short	0x0000
    6ec0:	2000031c 	.word	0x2000031c

00006ec4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6ec4:	4905      	ldr	r1, [pc, #20]	; (6edc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    6ec6:	788a      	ldrb	r2, [r1, #2]
    6ec8:	4282      	cmp	r2, r0
    6eca:	d903      	bls.n	6ed4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6ecc:	4408      	add	r0, r1
    6ece:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6ed2:	b108      	cbz	r0, 6ed8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    6ed4:	2000      	movs	r0, #0
    6ed6:	4770      	bx	lr
    6ed8:	2001      	movs	r0, #1
    6eda:	4770      	bx	lr
    6edc:	2000150a 	.word	0x2000150a

00006ee0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6ee0:	b570      	push	{r4, r5, r6, lr}
    6ee2:	460d      	mov	r5, r1
    6ee4:	4606      	mov	r6, r0
    6ee6:	f000 f8c1 	bl	706c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6eea:	4c10      	ldr	r4, [pc, #64]	; (6f2c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6eec:	2810      	cmp	r0, #16
    6eee:	d007      	beq.n	6f00 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6ef0:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6ef4:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6ef8:	07c9      	lsls	r1, r1, #31
    6efa:	d001      	beq.n	6f00 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6efc:	2001      	movs	r0, #1
    6efe:	bd70      	pop	{r4, r5, r6, pc}
    6f00:	7861      	ldrb	r1, [r4, #1]
    6f02:	2908      	cmp	r1, #8
    6f04:	d210      	bcs.n	6f28 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6f06:	2810      	cmp	r0, #16
    6f08:	d008      	beq.n	6f1c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6f0a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6f0e:	2101      	movs	r1, #1
    6f10:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6f14:	7860      	ldrb	r0, [r4, #1]
    6f16:	1c40      	adds	r0, r0, #1
    6f18:	7060      	strb	r0, [r4, #1]
    6f1a:	e7ef      	b.n	6efc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6f1c:	2201      	movs	r2, #1
    6f1e:	4629      	mov	r1, r5
    6f20:	4630      	mov	r0, r6
    6f22:	f000 f887 	bl	7034 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6f26:	e7f5      	b.n	6f14 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6f28:	2000      	movs	r0, #0
    6f2a:	bd70      	pop	{r4, r5, r6, pc}
    6f2c:	2000150a 	.word	0x2000150a

00006f30 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6f30:	b570      	push	{r4, r5, r6, lr}
    6f32:	4d0b      	ldr	r5, [pc, #44]	; (6f60 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6f34:	7828      	ldrb	r0, [r5, #0]
    6f36:	1e40      	subs	r0, r0, #1
    6f38:	b244      	sxtb	r4, r0
    6f3a:	e00a      	b.n	6f52 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6f3c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6f40:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6f44:	07c0      	lsls	r0, r0, #31
    6f46:	d002      	beq.n	6f4e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6f48:	b2e0      	uxtb	r0, r4
    6f4a:	f000 f8ed 	bl	7128 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    6f4e:	1e64      	subs	r4, r4, #1
    6f50:	b264      	sxtb	r4, r4
    6f52:	2c00      	cmp	r4, #0
    6f54:	daf2      	bge.n	6f3c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    6f56:	4903      	ldr	r1, [pc, #12]	; (6f64 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6f58:	2000      	movs	r0, #0
    6f5a:	7048      	strb	r0, [r1, #1]
    6f5c:	bd70      	pop	{r4, r5, r6, pc}
    6f5e:	0000      	.short	0x0000
    6f60:	2000150a 	.word	0x2000150a
    6f64:	2000031c 	.word	0x2000031c

00006f68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f6c:	2400      	movs	r4, #0
    6f6e:	4625      	mov	r5, r4
    6f70:	4e18      	ldr	r6, [pc, #96]	; (6fd4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    6f72:	e029      	b.n	6fc8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6f74:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6f78:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6f7c:	07c0      	lsls	r0, r0, #31
    6f7e:	d021      	beq.n	6fc4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6f80:	4628      	mov	r0, r5
    6f82:	f000 f843 	bl	700c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6f86:	4603      	mov	r3, r0
    6f88:	f7ff ff44 	bl	6e14 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6f8c:	4601      	mov	r1, r0
    6f8e:	2000      	movs	r0, #0
    6f90:	2b10      	cmp	r3, #16
    6f92:	d009      	beq.n	6fa8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6f94:	18f2      	adds	r2, r6, r3
    6f96:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    6f9a:	f1bc 0f01 	cmp.w	ip, #1
    6f9e:	d002      	beq.n	6fa6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6fa0:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6fa4:	b102      	cbz	r2, 6fa8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6fa6:	2001      	movs	r0, #1
    6fa8:	1e40      	subs	r0, r0, #1
    6faa:	4201      	tst	r1, r0
    6fac:	d10a      	bne.n	6fc4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6fae:	480a      	ldr	r0, [pc, #40]	; (6fd8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6fb0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6fb4:	5503      	strb	r3, [r0, r4]
    6fb6:	4620      	mov	r0, r4
    6fb8:	1c64      	adds	r4, r4, #1
    6fba:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    6fbe:	b2e4      	uxtb	r4, r4
    6fc0:	f005 fb56 	bl	c670 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6fc4:	1c6d      	adds	r5, r5, #1
    6fc6:	b2ed      	uxtb	r5, r5
    6fc8:	7830      	ldrb	r0, [r6, #0]
    6fca:	42a8      	cmp	r0, r5
    6fcc:	d8d2      	bhi.n	6f74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    6fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fd2:	0000      	.short	0x0000
    6fd4:	2000150a 	.word	0x2000150a
    6fd8:	20000320 	.word	0x20000320
    6fdc:	4602      	mov	r2, r0
    6fde:	4809      	ldr	r0, [pc, #36]	; (7004 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6fe0:	b510      	push	{r4, lr}
    6fe2:	7800      	ldrb	r0, [r0, #0]
    6fe4:	460b      	mov	r3, r1
    6fe6:	b158      	cbz	r0, 7000 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6fe8:	4807      	ldr	r0, [pc, #28]	; (7008 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6fea:	7881      	ldrb	r1, [r0, #2]
    6fec:	b141      	cbz	r1, 7000 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6fee:	b10b      	cbz	r3, 6ff4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6ff0:	1cc0      	adds	r0, r0, #3
    6ff2:	e001      	b.n	6ff8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6ff4:	4804      	ldr	r0, [pc, #16]	; (7008 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6ff6:	3083      	adds	r0, #131	; 0x83
    6ff8:	f004 fd14 	bl	ba24 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6ffc:	2001      	movs	r0, #1
    6ffe:	bd10      	pop	{r4, pc}
    7000:	2000      	movs	r0, #0
    7002:	bd10      	pop	{r4, pc}
    7004:	2000031c 	.word	0x2000031c
    7008:	2000150a 	.word	0x2000150a
    700c:	4908      	ldr	r1, [pc, #32]	; (7030 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    700e:	b510      	push	{r4, lr}
    7010:	4603      	mov	r3, r0
    7012:	2000      	movs	r0, #0
    7014:	788a      	ldrb	r2, [r1, #2]
    7016:	e006      	b.n	7026 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    7018:	180c      	adds	r4, r1, r0
    701a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    701e:	429c      	cmp	r4, r3
    7020:	d004      	beq.n	702c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    7022:	1c40      	adds	r0, r0, #1
    7024:	b2c0      	uxtb	r0, r0
    7026:	4282      	cmp	r2, r0
    7028:	d8f6      	bhi.n	7018 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    702a:	2010      	movs	r0, #16
    702c:	bd10      	pop	{r4, pc}
    702e:	0000      	.short	0x0000
    7030:	2000150a 	.word	0x2000150a
    7034:	b570      	push	{r4, r5, r6, lr}
    7036:	4b0c      	ldr	r3, [pc, #48]	; (7068 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    7038:	4604      	mov	r4, r0
    703a:	7818      	ldrb	r0, [r3, #0]
    703c:	1c45      	adds	r5, r0, #1
    703e:	701d      	strb	r5, [r3, #0]
    7040:	2810      	cmp	r0, #16
    7042:	d303      	bcc.n	704c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    7044:	2146      	movs	r1, #70	; 0x46
    7046:	2028      	movs	r0, #40	; 0x28
    7048:	f7fe fa4a 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    704c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    7050:	680d      	ldr	r5, [r1, #0]
    7052:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    7056:	8889      	ldrh	r1, [r1, #4]
    7058:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    705c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    7060:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    7064:	bd70      	pop	{r4, r5, r6, pc}
    7066:	0000      	.short	0x0000
    7068:	2000150a 	.word	0x2000150a
    706c:	b5f0      	push	{r4, r5, r6, r7, lr}
    706e:	4c1a      	ldr	r4, [pc, #104]	; (70d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    7070:	4603      	mov	r3, r0
    7072:	2000      	movs	r0, #0
    7074:	7825      	ldrb	r5, [r4, #0]
    7076:	e02a      	b.n	70ce <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    7078:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    707c:	780f      	ldrb	r7, [r1, #0]
    707e:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    7082:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    7086:	ea87 070c 	eor.w	r7, r7, ip
    708a:	405e      	eors	r6, r3
    708c:	443e      	add	r6, r7
    708e:	784f      	ldrb	r7, [r1, #1]
    7090:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    7094:	ea87 070c 	eor.w	r7, r7, ip
    7098:	443e      	add	r6, r7
    709a:	788f      	ldrb	r7, [r1, #2]
    709c:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    70a0:	ea87 070c 	eor.w	r7, r7, ip
    70a4:	443e      	add	r6, r7
    70a6:	78cf      	ldrb	r7, [r1, #3]
    70a8:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    70ac:	ea87 070c 	eor.w	r7, r7, ip
    70b0:	443e      	add	r6, r7
    70b2:	790f      	ldrb	r7, [r1, #4]
    70b4:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    70b8:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    70bc:	ea87 070c 	eor.w	r7, r7, ip
    70c0:	443e      	add	r6, r7
    70c2:	794f      	ldrb	r7, [r1, #5]
    70c4:	4057      	eors	r7, r2
    70c6:	42f7      	cmn	r7, r6
    70c8:	d004      	beq.n	70d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    70ca:	1c40      	adds	r0, r0, #1
    70cc:	b2c0      	uxtb	r0, r0
    70ce:	4285      	cmp	r5, r0
    70d0:	d8d2      	bhi.n	7078 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    70d2:	2010      	movs	r0, #16
    70d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70d6:	0000      	.short	0x0000
    70d8:	2000150a 	.word	0x2000150a
    70dc:	b570      	push	{r4, r5, r6, lr}
    70de:	4605      	mov	r5, r0
    70e0:	f7ff ff94 	bl	700c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    70e4:	2810      	cmp	r0, #16
    70e6:	d11c      	bne.n	7122 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    70e8:	4c0e      	ldr	r4, [pc, #56]	; (7124 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    70ea:	7820      	ldrb	r0, [r4, #0]
    70ec:	1e40      	subs	r0, r0, #1
    70ee:	b2c0      	uxtb	r0, r0
    70f0:	7020      	strb	r0, [r4, #0]
    70f2:	42a8      	cmp	r0, r5
    70f4:	d015      	beq.n	7122 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    70f6:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    70fa:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    70fe:	f502 7080 	add.w	r0, r2, #256	; 0x100
    7102:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    7106:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    710a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    710e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    7112:	7820      	ldrb	r0, [r4, #0]
    7114:	f7ff ff7a 	bl	700c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    7118:	2810      	cmp	r0, #16
    711a:	d002      	beq.n	7122 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    711c:	4420      	add	r0, r4
    711e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    7122:	bd70      	pop	{r4, r5, r6, pc}
    7124:	2000150a 	.word	0x2000150a
    7128:	4905      	ldr	r1, [pc, #20]	; (7140 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    712a:	784a      	ldrb	r2, [r1, #1]
    712c:	1e52      	subs	r2, r2, #1
    712e:	704a      	strb	r2, [r1, #1]
    7130:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7134:	2200      	movs	r2, #0
    7136:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    713a:	f7ff bfcf 	b.w	70dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    713e:	0000      	.short	0x0000
    7140:	2000150a 	.word	0x2000150a

00007144 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    7144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7148:	4604      	mov	r4, r0
    714a:	f04f 0801 	mov.w	r8, #1
    714e:	b181      	cbz	r1, 7172 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    7150:	f104 068f 	add.w	r6, r4, #143	; 0x8f
    7154:	1e75      	subs	r5, r6, #1
    7156:	f104 0078 	add.w	r0, r4, #120	; 0x78
    715a:	2901      	cmp	r1, #1
    715c:	d022      	beq.n	71a4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x60>
    715e:	2902      	cmp	r1, #2
    7160:	d045      	beq.n	71ee <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    7162:	2903      	cmp	r1, #3
    7164:	d11c      	bne.n	71a0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    7166:	4631      	mov	r1, r6
    7168:	4628      	mov	r0, r5
    716a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    716e:	f007 bfcc 	b.w	f10a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    7172:	f44f 7228 	mov.w	r2, #672	; 0x2a0
    7176:	2100      	movs	r1, #0
    7178:	f006 fbb0 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    717c:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
    7180:	3484      	adds	r4, #132	; 0x84
    7182:	f004 fc1f 	bl	b9c4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7186:	f644 122b 	movw	r2, #18731	; 0x492b
    718a:	4010      	ands	r0, r2
    718c:	6520      	str	r0, [r4, #80]	; 0x50
    718e:	f001 0106 	and.w	r1, r1, #6
    7192:	6561      	str	r1, [r4, #84]	; 0x54
    7194:	20fe      	movs	r0, #254	; 0xfe
    7196:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
    719a:	207f      	movs	r0, #127	; 0x7f
    719c:	f804 0c03 	strb.w	r0, [r4, #-3]
    71a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71a4:	2700      	movs	r7, #0
    71a6:	f8a4 71de 	strh.w	r7, [r4, #478]	; 0x1de
    71aa:	f884 71d3 	strb.w	r7, [r4, #467]	; 0x1d3
    71ae:	4a14      	ldr	r2, [pc, #80]	; (7200 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>)
    71b0:	6921      	ldr	r1, [r4, #16]
    71b2:	440a      	add	r2, r1
    71b4:	fbb2 f2f1 	udiv	r2, r2, r1
    71b8:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    71bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
    71c0:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
    71c4:	8b63      	ldrh	r3, [r4, #26]
    71c6:	460a      	mov	r2, r1
    71c8:	f000 f81c 	bl	7204 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    71cc:	4631      	mov	r1, r6
    71ce:	4628      	mov	r0, r5
    71d0:	f007 ff9b 	bl	f10a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    71d4:	f006 fae4 	bl	d7a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    71d8:	b118      	cbz	r0, 71e2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    71da:	6960      	ldr	r0, [r4, #20]
    71dc:	f000 fbae 	bl	793c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    71e0:	b110      	cbz	r0, 71e8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    71e2:	f884 71c6 	strb.w	r7, [r4, #454]	; 0x1c6
    71e6:	e7db      	b.n	71a0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    71e8:	f884 81c6 	strb.w	r8, [r4, #454]	; 0x1c6
    71ec:	e7d8      	b.n	71a0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    71ee:	f8b4 3282 	ldrh.w	r3, [r4, #642]	; 0x282
    71f2:	f8d4 227c 	ldr.w	r2, [r4, #636]	; 0x27c
    71f6:	6921      	ldr	r1, [r4, #16]
    71f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    71fc:	f000 b802 	b.w	7204 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>
    7200:	01c9c37f 	.word	0x01c9c37f
    7204:	b530      	push	{r4, r5, lr}
    7206:	2400      	movs	r4, #0
    7208:	8784      	strh	r4, [r0, #60]	; 0x3c
    720a:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
    720e:	4d15      	ldr	r5, [pc, #84]	; (7264 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    7210:	434c      	muls	r4, r1
    7212:	fbb4 f4f2 	udiv	r4, r4, r2
    7216:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
    721a:	f242 7410 	movw	r4, #10000	; 0x2710
    721e:	4363      	muls	r3, r4
    7220:	fbb3 f3f2 	udiv	r3, r3, r2
    7224:	1c5b      	adds	r3, r3, #1
    7226:	b29b      	uxth	r3, r3
    7228:	fb03 f402 	mul.w	r4, r3, r2
    722c:	87c3      	strh	r3, [r0, #62]	; 0x3e
    722e:	42ac      	cmp	r4, r5
    7230:	d901      	bls.n	7236 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    7232:	1e5b      	subs	r3, r3, #1
    7234:	87c3      	strh	r3, [r0, #62]	; 0x3e
    7236:	4b0c      	ldr	r3, [pc, #48]	; (7268 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    7238:	f240 2471 	movw	r4, #625	; 0x271
    723c:	fbb3 f3f2 	udiv	r3, r3, r2
    7240:	1c5b      	adds	r3, r3, #1
    7242:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    7246:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    7248:	4363      	muls	r3, r4
    724a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    724e:	1e5b      	subs	r3, r3, #1
    7250:	fbb3 f3f2 	udiv	r3, r3, r2
    7254:	6343      	str	r3, [r0, #52]	; 0x34
    7256:	6b03      	ldr	r3, [r0, #48]	; 0x30
    7258:	434b      	muls	r3, r1
    725a:	fbb3 f1f2 	udiv	r1, r3, r2
    725e:	6301      	str	r1, [r0, #48]	; 0x30
    7260:	bd30      	pop	{r4, r5, pc}
    7262:	0000      	.short	0x0000
    7264:	01e84800 	.word	0x01e84800
    7268:	02625a00 	.word	0x02625a00

0000726c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    726c:	b570      	push	{r4, r5, r6, lr}
    726e:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    7272:	b28b      	uxth	r3, r1
    7274:	7ac5      	ldrb	r5, [r0, #11]
    7276:	ea83 0102 	eor.w	r1, r3, r2
    727a:	2200      	movs	r2, #0
    727c:	b2cc      	uxtb	r4, r1
    727e:	0a09      	lsrs	r1, r1, #8
    7280:	fa94 f4a4 	rbit	r4, r4
    7284:	fa91 f1a1 	rbit	r1, r1
    7288:	0e24      	lsrs	r4, r4, #24
    728a:	0e09      	lsrs	r1, r1, #24
    728c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    7290:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    7294:	1c52      	adds	r2, r2, #1
    7296:	4419      	add	r1, r3
    7298:	b2d2      	uxtb	r2, r2
    729a:	b289      	uxth	r1, r1
    729c:	2a03      	cmp	r2, #3
    729e:	d3ed      	bcc.n	727c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    72a0:	4059      	eors	r1, r3
    72a2:	2225      	movs	r2, #37	; 0x25
    72a4:	fbb1 f3f2 	udiv	r3, r1, r2
    72a8:	fb02 1213 	mls	r2, r2, r3, r1
    72ac:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    72b0:	f002 0607 	and.w	r6, r2, #7
    72b4:	785b      	ldrb	r3, [r3, #1]
    72b6:	2401      	movs	r4, #1
    72b8:	fa04 f606 	lsl.w	r6, r4, r6
    72bc:	4233      	tst	r3, r6
    72be:	d001      	beq.n	72c4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    72c0:	4610      	mov	r0, r2
    72c2:	bd70      	pop	{r4, r5, r6, pc}
    72c4:	434d      	muls	r5, r1
    72c6:	0c29      	lsrs	r1, r5, #16
    72c8:	1c49      	adds	r1, r1, #1
    72ca:	b2c9      	uxtb	r1, r1
    72cc:	2200      	movs	r2, #0
    72ce:	1885      	adds	r5, r0, r2
    72d0:	79ab      	ldrb	r3, [r5, #6]
    72d2:	428b      	cmp	r3, r1
    72d4:	d312      	bcc.n	72fc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    72d6:	f895 5001 	ldrb.w	r5, [r5, #1]
    72da:	2300      	movs	r3, #0
    72dc:	fa04 f603 	lsl.w	r6, r4, r3
    72e0:	4235      	tst	r5, r6
    72e2:	d001      	beq.n	72e8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    72e4:	1e49      	subs	r1, r1, #1
    72e6:	b2c9      	uxtb	r1, r1
    72e8:	b121      	cbz	r1, 72f4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    72ea:	1c5b      	adds	r3, r3, #1
    72ec:	b2db      	uxtb	r3, r3
    72ee:	2b08      	cmp	r3, #8
    72f0:	d3f4      	bcc.n	72dc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    72f2:	e005      	b.n	7300 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    72f4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    72f8:	b2c0      	uxtb	r0, r0
    72fa:	bd70      	pop	{r4, r5, r6, pc}
    72fc:	1ac9      	subs	r1, r1, r3
    72fe:	b2c9      	uxtb	r1, r1
    7300:	1c52      	adds	r2, r2, #1
    7302:	b2d2      	uxtb	r2, r2
    7304:	2a05      	cmp	r2, #5
    7306:	d3e2      	bcc.n	72ce <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    7308:	f240 110d 	movw	r1, #269	; 0x10d
    730c:	2046      	movs	r0, #70	; 0x46
    730e:	f7fe f8e7 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7312:	0000      	movs	r0, r0
    7314:	b570      	push	{r4, r5, r6, lr}
    7316:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
    731a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    731e:	2401      	movs	r4, #1
    7320:	fb03 2101 	mla	r1, r3, r1, r2
    7324:	2225      	movs	r2, #37	; 0x25
    7326:	fbb1 f3f2 	udiv	r3, r1, r2
    732a:	fb02 1113 	mls	r1, r2, r3, r1
    732e:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    7332:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    7336:	f001 0307 	and.w	r3, r1, #7
    733a:	7dd2      	ldrb	r2, [r2, #23]
    733c:	fa04 f303 	lsl.w	r3, r4, r3
    7340:	421a      	tst	r2, r3
    7342:	d003      	beq.n	734c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    7344:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    7348:	2000      	movs	r0, #0
    734a:	bd70      	pop	{r4, r5, r6, pc}
    734c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
    7350:	fbb1 f3f2 	udiv	r3, r1, r2
    7354:	fb02 1113 	mls	r1, r2, r3, r1
    7358:	1c49      	adds	r1, r1, #1
    735a:	b2c9      	uxtb	r1, r1
    735c:	2300      	movs	r3, #0
    735e:	18c5      	adds	r5, r0, r3
    7360:	7f2a      	ldrb	r2, [r5, #28]
    7362:	428a      	cmp	r2, r1
    7364:	d311      	bcc.n	738a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    7366:	f895 5017 	ldrb.w	r5, [r5, #23]
    736a:	2200      	movs	r2, #0
    736c:	fa04 f602 	lsl.w	r6, r4, r2
    7370:	4235      	tst	r5, r6
    7372:	d001      	beq.n	7378 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    7374:	1e49      	subs	r1, r1, #1
    7376:	b2c9      	uxtb	r1, r1
    7378:	b121      	cbz	r1, 7384 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    737a:	1c52      	adds	r2, r2, #1
    737c:	b2d2      	uxtb	r2, r2
    737e:	2a08      	cmp	r2, #8
    7380:	d3f4      	bcc.n	736c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    7382:	e004      	b.n	738e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    7384:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    7388:	e7dc      	b.n	7344 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    738a:	1a89      	subs	r1, r1, r2
    738c:	b2c9      	uxtb	r1, r1
    738e:	1c5b      	adds	r3, r3, #1
    7390:	b2db      	uxtb	r3, r3
    7392:	2b05      	cmp	r3, #5
    7394:	d3e3      	bcc.n	735e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    7396:	201f      	movs	r0, #31
    7398:	bd70      	pop	{r4, r5, r6, pc}
	...

0000739c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    739c:	7841      	ldrb	r1, [r0, #1]
    739e:	b141      	cbz	r1, 73b2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    73a0:	78c0      	ldrb	r0, [r0, #3]
    73a2:	2826      	cmp	r0, #38	; 0x26
    73a4:	d203      	bcs.n	73ae <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    73a6:	4a04      	ldr	r2, [pc, #16]	; (73b8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    73a8:	5c10      	ldrb	r0, [r2, r0]
    73aa:	4288      	cmp	r0, r1
    73ac:	d101      	bne.n	73b2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    73ae:	2001      	movs	r0, #1
    73b0:	4770      	bx	lr
    73b2:	2000      	movs	r0, #0
    73b4:	4770      	bx	lr
    73b6:	0000      	.short	0x0000
    73b8:	0001165a 	.word	0x0001165a

000073bc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    73bc:	b510      	push	{r4, lr}
    73be:	2201      	movs	r2, #1
    73c0:	70c1      	strb	r1, [r0, #3]
    73c2:	2926      	cmp	r1, #38	; 0x26
    73c4:	d202      	bcs.n	73cc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    73c6:	4a06      	ldr	r2, [pc, #24]	; (73e0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    73c8:	5c52      	ldrb	r2, [r2, r1]
    73ca:	e006      	b.n	73da <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    73cc:	29ff      	cmp	r1, #255	; 0xff
    73ce:	d004      	beq.n	73da <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    73d0:	f240 411d 	movw	r1, #1053	; 0x41d
    73d4:	202a      	movs	r0, #42	; 0x2a
    73d6:	f7fe f883 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73da:	7042      	strb	r2, [r0, #1]
    73dc:	bd10      	pop	{r4, pc}
    73de:	0000      	.short	0x0000
    73e0:	0001165a 	.word	0x0001165a

000073e4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    73e4:	4904      	ldr	r1, [pc, #16]	; (73f8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    73e6:	7c89      	ldrb	r1, [r1, #18]
    73e8:	0749      	lsls	r1, r1, #29
    73ea:	d400      	bmi.n	73ee <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    73ec:	b108      	cbz	r0, 73f2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    73ee:	2000      	movs	r0, #0
    73f0:	4770      	bx	lr
    73f2:	2001      	movs	r0, #1
    73f4:	4770      	bx	lr
    73f6:	0000      	.short	0x0000
    73f8:	20001264 	.word	0x20001264

000073fc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    73fc:	4803      	ldr	r0, [pc, #12]	; (740c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    73fe:	7c80      	ldrb	r0, [r0, #18]
    7400:	0780      	lsls	r0, r0, #30
    7402:	d401      	bmi.n	7408 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    7404:	2001      	movs	r0, #1
    7406:	4770      	bx	lr
    7408:	2000      	movs	r0, #0
    740a:	4770      	bx	lr
    740c:	20001264 	.word	0x20001264

00007410 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    7410:	4803      	ldr	r0, [pc, #12]	; (7420 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    7412:	7c80      	ldrb	r0, [r0, #18]
    7414:	07c0      	lsls	r0, r0, #31
    7416:	d001      	beq.n	741c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    7418:	2000      	movs	r0, #0
    741a:	4770      	bx	lr
    741c:	2001      	movs	r0, #1
    741e:	4770      	bx	lr
    7420:	20001264 	.word	0x20001264

00007424 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    7424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7428:	4c12      	ldr	r4, [pc, #72]	; (7474 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    742a:	4607      	mov	r7, r0
    742c:	460e      	mov	r6, r1
    742e:	7da0      	ldrb	r0, [r4, #22]
    7430:	b110      	cbz	r0, 7438 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    7432:	8b20      	ldrh	r0, [r4, #24]
    7434:	2800      	cmp	r0, #0
    7436:	d012      	beq.n	745e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7438:	480e      	ldr	r0, [pc, #56]	; (7474 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    743a:	3014      	adds	r0, #20
    743c:	4680      	mov	r8, r0
    743e:	f008 f823 	bl	f488 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7442:	b9a8      	cbnz	r0, 7470 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    7444:	8aa5      	ldrh	r5, [r4, #20]
    7446:	8aa0      	ldrh	r0, [r4, #20]
    7448:	4632      	mov	r2, r6
    744a:	4639      	mov	r1, r7
    744c:	f008 f860 	bl	f510 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    7450:	b138      	cbz	r0, 7462 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    7452:	7da0      	ldrb	r0, [r4, #22]
    7454:	b110      	cbz	r0, 745c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    7456:	8b20      	ldrh	r0, [r4, #24]
    7458:	1e40      	subs	r0, r0, #1
    745a:	8320      	strh	r0, [r4, #24]
    745c:	2001      	movs	r0, #1
    745e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7462:	4640      	mov	r0, r8
    7464:	f008 f810 	bl	f488 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7468:	b910      	cbnz	r0, 7470 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    746a:	8aa0      	ldrh	r0, [r4, #20]
    746c:	42a8      	cmp	r0, r5
    746e:	d1ea      	bne.n	7446 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    7470:	2000      	movs	r0, #0
    7472:	e7f4      	b.n	745e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7474:	20001264 	.word	0x20001264
    7478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    747c:	468a      	mov	sl, r1
    747e:	4699      	mov	r9, r3
    7480:	4615      	mov	r5, r2
    7482:	4604      	mov	r4, r0
    7484:	a901      	add	r1, sp, #4
    7486:	f007 fc61 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    748a:	bbe0      	cbnz	r0, 7506 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    748c:	9f02      	ldr	r7, [sp, #8]
    748e:	f04f 0800 	mov.w	r8, #0
    7492:	3778      	adds	r7, #120	; 0x78
    7494:	b18d      	cbz	r5, 74ba <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    7496:	4620      	mov	r0, r4
    7498:	f7fe fc60 	bl	5d5c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    749c:	0004      	movs	r4, r0
    749e:	d00f      	beq.n	74c0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    74a0:	4629      	mov	r1, r5
    74a2:	f007 f812 	bl	e4ca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    74a6:	0006      	movs	r6, r0
    74a8:	d003      	beq.n	74b2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    74aa:	481d      	ldr	r0, [pc, #116]	; (7520 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    74ac:	8840      	ldrh	r0, [r0, #2]
    74ae:	42a8      	cmp	r0, r5
    74b0:	d208      	bcs.n	74c4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    74b2:	2000      	movs	r0, #0
    74b4:	b004      	add	sp, #16
    74b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    74ba:	2001      	movs	r0, #1
    74bc:	7578      	strb	r0, [r7, #21]
    74be:	e029      	b.n	7514 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    74c0:	216e      	movs	r1, #110	; 0x6e
    74c2:	e02a      	b.n	751a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    74c4:	4620      	mov	r0, r4
    74c6:	4631      	mov	r1, r6
    74c8:	aa03      	add	r2, sp, #12
    74ca:	f006 fff7 	bl	e4bc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    74ce:	9803      	ldr	r0, [sp, #12]
    74d0:	f8a0 8000 	strh.w	r8, [r0]
    74d4:	f880 8002 	strb.w	r8, [r0, #2]
    74d8:	7d79      	ldrb	r1, [r7, #21]
    74da:	b109      	cbz	r1, 74e0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    74dc:	f04f 0a02 	mov.w	sl, #2
    74e0:	4651      	mov	r1, sl
    74e2:	f007 ff52 	bl	f38a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    74e6:	4631      	mov	r1, r6
    74e8:	2603      	movs	r6, #3
    74ea:	4620      	mov	r0, r4
    74ec:	464a      	mov	r2, r9
    74ee:	462b      	mov	r3, r5
    74f0:	9600      	str	r6, [sp, #0]
    74f2:	f006 fed7 	bl	e2a4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    74f6:	4620      	mov	r0, r4
    74f8:	4629      	mov	r1, r5
    74fa:	f006 ff98 	bl	e42e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    74fe:	b158      	cbz	r0, 7518 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    7500:	4644      	mov	r4, r8
    7502:	a801      	add	r0, sp, #4
    7504:	e000      	b.n	7508 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    7506:	e005      	b.n	7514 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    7508:	f007 ffdf 	bl	f4ca <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    750c:	9802      	ldr	r0, [sp, #8]
    750e:	f8a0 41ca 	strh.w	r4, [r0, #458]	; 0x1ca
    7512:	757c      	strb	r4, [r7, #21]
    7514:	2001      	movs	r0, #1
    7516:	e7cd      	b.n	74b4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    7518:	2184      	movs	r1, #132	; 0x84
    751a:	202b      	movs	r0, #43	; 0x2b
    751c:	f7fd ffe0 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7520:	20001264 	.word	0x20001264

00007524 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    7524:	4901      	ldr	r1, [pc, #4]	; (752c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    7526:	2001      	movs	r0, #1
    7528:	7008      	strb	r0, [r1, #0]
    752a:	4770      	bx	lr
    752c:	200016ed 	.word	0x200016ed

00007530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    7530:	b538      	push	{r3, r4, r5, lr}
    7532:	b198      	cbz	r0, 755c <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x2c>
    7534:	7a03      	ldrb	r3, [r0, #8]
    7536:	f88d 3000 	strb.w	r3, [sp]
    753a:	9b00      	ldr	r3, [sp, #0]
    753c:	9300      	str	r3, [sp, #0]
    753e:	f89d 3000 	ldrb.w	r3, [sp]
    7542:	2b00      	cmp	r3, #0
    7544:	d114      	bne.n	7570 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    7546:	6003      	str	r3, [r0, #0]
    7548:	6041      	str	r1, [r0, #4]
    754a:	f3ef 8310 	mrs	r3, PRIMASK
    754e:	b672      	cpsid	i
    7550:	4908      	ldr	r1, [pc, #32]	; (7574 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x44>)
    7552:	680c      	ldr	r4, [r1, #0]
    7554:	b13c      	cbz	r4, 7566 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x36>
    7556:	684c      	ldr	r4, [r1, #4]
    7558:	6020      	str	r0, [r4, #0]
    755a:	e005      	b.n	7568 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x38>
    755c:	f240 4141 	movw	r1, #1089	; 0x441
    7560:	2010      	movs	r0, #16
    7562:	f7fd ffbd 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7566:	6008      	str	r0, [r1, #0]
    7568:	6048      	str	r0, [r1, #4]
    756a:	b903      	cbnz	r3, 756e <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x3e>
    756c:	b662      	cpsie	i
    756e:	7202      	strb	r2, [r0, #8]
    7570:	bd38      	pop	{r3, r4, r5, pc}
    7572:	0000      	.short	0x0000
    7574:	20000118 	.word	0x20000118

00007578 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    7578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    757c:	0004      	movs	r4, r0
    757e:	d00a      	beq.n	7596 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    7580:	484d      	ldr	r0, [pc, #308]	; (76b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x140>)
    7582:	2600      	movs	r6, #0
    7584:	7801      	ldrb	r1, [r0, #0]
    7586:	b149      	cbz	r1, 759c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    7588:	7066      	strb	r6, [r4, #1]
    758a:	2103      	movs	r1, #3
    758c:	7021      	strb	r1, [r4, #0]
    758e:	2101      	movs	r1, #1
    7590:	7121      	strb	r1, [r4, #4]
    7592:	7006      	strb	r6, [r0, #0]
    7594:	e08d      	b.n	76b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    7596:	f240 315d 	movw	r1, #861	; 0x35d
    759a:	e050      	b.n	763e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    759c:	f8df 811c 	ldr.w	r8, [pc, #284]	; 76bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>
    75a0:	f88d 6000 	strb.w	r6, [sp]
    75a4:	4668      	mov	r0, sp
    75a6:	f000 f8b9 	bl	771c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    75aa:	f89d 1000 	ldrb.w	r1, [sp]
    75ae:	2900      	cmp	r1, #0
    75b0:	d1f8      	bne.n	75a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2c>
    75b2:	2800      	cmp	r0, #0
    75b4:	d07e      	beq.n	76b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    75b6:	4605      	mov	r5, r0
    75b8:	7a00      	ldrb	r0, [r0, #8]
    75ba:	f88d 0000 	strb.w	r0, [sp]
    75be:	9800      	ldr	r0, [sp, #0]
    75c0:	9000      	str	r0, [sp, #0]
    75c2:	f89d 7000 	ldrb.w	r7, [sp]
    75c6:	2f1f      	cmp	r7, #31
    75c8:	d26e      	bcs.n	76a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    75ca:	e8df f007 	tbb	[pc, r7]
    75ce:	3d6d      	.short	0x3d6d
    75d0:	3d6d106d 	.word	0x3d6d106d
    75d4:	3d3d4d3d 	.word	0x3d3d4d3d
    75d8:	6d3d3d3d 	.word	0x6d3d3d3d
    75dc:	3d3d6d10 	.word	0x3d3d6d10
    75e0:	6d6d6d10 	.word	0x6d6d6d10
    75e4:	103d3d6d 	.word	0x103d3d6d
    75e8:	626d3d3d 	.word	0x626d3d3d
    75ec:	0010      	.short	0x0010
    75ee:	4834      	ldr	r0, [pc, #208]	; (76c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>)
    75f0:	6803      	ldr	r3, [r0, #0]
    75f2:	2b00      	cmp	r3, #0
    75f4:	d05c      	beq.n	76b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    75f6:	6868      	ldr	r0, [r5, #4]
    75f8:	463a      	mov	r2, r7
    75fa:	4621      	mov	r1, r4
    75fc:	4798      	blx	r3
    75fe:	7820      	ldrb	r0, [r4, #0]
    7600:	6869      	ldr	r1, [r5, #4]
    7602:	2811      	cmp	r0, #17
    7604:	d002      	beq.n	760c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    7606:	2814      	cmp	r0, #20
    7608:	d003      	beq.n	7612 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    760a:	e01b      	b.n	7644 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    760c:	7920      	ldrb	r0, [r4, #4]
    760e:	b930      	cbnz	r0, 761e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    7610:	e018      	b.n	7644 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7612:	7920      	ldrb	r0, [r4, #4]
    7614:	b1b0      	cbz	r0, 7644 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7616:	4608      	mov	r0, r1
    7618:	f008 fa8e 	bl	fb38 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    761c:	b990      	cbnz	r0, 7644 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    761e:	88e4      	ldrh	r4, [r4, #6]
    7620:	2100      	movs	r1, #0
    7622:	4620      	mov	r0, r4
    7624:	f007 f904 	bl	e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7628:	b160      	cbz	r0, 7644 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    762a:	8800      	ldrh	r0, [r0, #0]
    762c:	f007 fabe 	bl	ebac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7630:	2100      	movs	r1, #0
    7632:	4620      	mov	r0, r4
    7634:	f7fe f9e8 	bl	5a08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7638:	b120      	cbz	r0, 7644 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    763a:	f44f 71af 	mov.w	r1, #350	; 0x15e
    763e:	2010      	movs	r0, #16
    7640:	f7fd ff4e 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7644:	722e      	strb	r6, [r5, #8]
    7646:	e034      	b.n	76b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    7648:	f8d8 0000 	ldr.w	r0, [r8]
    764c:	b358      	cbz	r0, 76a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    764e:	463a      	mov	r2, r7
    7650:	4629      	mov	r1, r5
    7652:	4620      	mov	r0, r4
    7654:	f000 f892 	bl	777c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8c>
    7658:	b110      	cbz	r0, 7660 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    765a:	2f0b      	cmp	r7, #11
    765c:	d029      	beq.n	76b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    765e:	e7f1      	b.n	7644 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7660:	2f0b      	cmp	r7, #11
    7662:	d026      	beq.n	76b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13a>
    7664:	722e      	strb	r6, [r5, #8]
    7666:	e79b      	b.n	75a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x28>
    7668:	f8d8 0000 	ldr.w	r0, [r8]
    766c:	b180      	cbz	r0, 7690 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    766e:	6868      	ldr	r0, [r5, #4]
    7670:	7066      	strb	r6, [r4, #1]
    7672:	2108      	movs	r1, #8
    7674:	7021      	strb	r1, [r4, #0]
    7676:	8801      	ldrh	r1, [r0, #0]
    7678:	80a1      	strh	r1, [r4, #4]
    767a:	f8d0 1290 	ldr.w	r1, [r0, #656]	; 0x290
    767e:	f8c4 1006 	str.w	r1, [r4, #6]
    7682:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
    7686:	f8c4 100a 	str.w	r1, [r4, #10]
    768a:	f8b0 0298 	ldrh.w	r0, [r0, #664]	; 0x298
    768e:	81e0      	strh	r0, [r4, #14]
    7690:	e7d8      	b.n	7644 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    7692:	480c      	ldr	r0, [pc, #48]	; (76c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14c>)
    7694:	6803      	ldr	r3, [r0, #0]
    7696:	b11b      	cbz	r3, 76a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    7698:	2200      	movs	r2, #0
    769a:	4621      	mov	r1, r4
    769c:	4610      	mov	r0, r2
    769e:	4798      	blx	r3
    76a0:	e7d0      	b.n	7644 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    76a2:	e007      	b.n	76b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    76a4:	e000      	b.n	76a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    76a6:	e002      	b.n	76ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    76a8:	f240 412d 	movw	r1, #1069	; 0x42d
    76ac:	e7c7      	b.n	763e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc6>
    76ae:	e7c9      	b.n	7644 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    76b0:	e7c8      	b.n	7644 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    76b2:	2001      	movs	r0, #1
    76b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    76b8:	200016ed 	.word	0x200016ed
    76bc:	20000124 	.word	0x20000124
    76c0:	20000120 	.word	0x20000120
    76c4:	20000128 	.word	0x20000128

000076c8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    76c8:	4901      	ldr	r1, [pc, #4]	; (76d0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    76ca:	7008      	strb	r0, [r1, #0]
    76cc:	f000 b928 	b.w	7920 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    76d0:	20000114 	.word	0x20000114

000076d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    76d4:	4801      	ldr	r0, [pc, #4]	; (76dc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    76d6:	7800      	ldrb	r0, [r0, #0]
    76d8:	f7fd bd06 	b.w	50e8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    76dc:	20000114 	.word	0x20000114

000076e0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    76e0:	4902      	ldr	r1, [pc, #8]	; (76ec <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    76e2:	4801      	ldr	r0, [pc, #4]	; (76e8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    76e4:	6008      	str	r0, [r1, #0]
    76e6:	4770      	bx	lr
    76e8:	0000fa63 	.word	0x0000fa63
    76ec:	20000120 	.word	0x20000120

000076f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    76f0:	4905      	ldr	r1, [pc, #20]	; (7708 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    76f2:	4804      	ldr	r0, [pc, #16]	; (7704 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    76f4:	6008      	str	r0, [r1, #0]
    76f6:	4906      	ldr	r1, [pc, #24]	; (7710 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    76f8:	4804      	ldr	r0, [pc, #16]	; (770c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    76fa:	6008      	str	r0, [r1, #0]
    76fc:	4906      	ldr	r1, [pc, #24]	; (7718 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    76fe:	4805      	ldr	r0, [pc, #20]	; (7714 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    7700:	6008      	str	r0, [r1, #0]
    7702:	4770      	bx	lr
    7704:	0000fa63 	.word	0x0000fa63
    7708:	20000120 	.word	0x20000120
    770c:	0000f5a3 	.word	0x0000f5a3
    7710:	20000124 	.word	0x20000124
    7714:	000062e9 	.word	0x000062e9
    7718:	20000128 	.word	0x20000128
    771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    771e:	4605      	mov	r5, r0
    7720:	4c15      	ldr	r4, [pc, #84]	; (7778 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x88>)
    7722:	2000      	movs	r0, #0
    7724:	7028      	strb	r0, [r5, #0]
    7726:	6820      	ldr	r0, [r4, #0]
    7728:	2800      	cmp	r0, #0
    772a:	d023      	beq.n	7774 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    772c:	7a01      	ldrb	r1, [r0, #8]
    772e:	2601      	movs	r6, #1
    7730:	f88d 1000 	strb.w	r1, [sp]
    7734:	9900      	ldr	r1, [sp, #0]
    7736:	9100      	str	r1, [sp, #0]
    7738:	f89d 1000 	ldrb.w	r1, [sp]
    773c:	2908      	cmp	r1, #8
    773e:	d107      	bne.n	7750 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    7740:	6840      	ldr	r0, [r0, #4]
    7742:	8800      	ldrh	r0, [r0, #0]
    7744:	f7fe faf4 	bl	5d30 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7748:	f006 fdc3 	bl	e2d2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    774c:	2800      	cmp	r0, #0
    774e:	d011      	beq.n	7774 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    7750:	f3ef 8110 	mrs	r1, PRIMASK
    7754:	6820      	ldr	r0, [r4, #0]
    7756:	b672      	cpsid	i
    7758:	6802      	ldr	r2, [r0, #0]
    775a:	6022      	str	r2, [r4, #0]
    775c:	b901      	cbnz	r1, 7760 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x70>
    775e:	b662      	cpsie	i
    7760:	7a01      	ldrb	r1, [r0, #8]
    7762:	f88d 1000 	strb.w	r1, [sp]
    7766:	9900      	ldr	r1, [sp, #0]
    7768:	9100      	str	r1, [sp, #0]
    776a:	f89d 1000 	ldrb.w	r1, [sp]
    776e:	2900      	cmp	r1, #0
    7770:	d100      	bne.n	7774 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x84>
    7772:	702e      	strb	r6, [r5, #0]
    7774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7776:	0000      	.short	0x0000
    7778:	20000118 	.word	0x20000118
    777c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7780:	b086      	sub	sp, #24
    7782:	000f      	movs	r7, r1
    7784:	4604      	mov	r4, r0
    7786:	4691      	mov	r9, r2
    7788:	d013      	beq.n	77b2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    778a:	6878      	ldr	r0, [r7, #4]
    778c:	b188      	cbz	r0, 77b2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc2>
    778e:	f100 0578 	add.w	r5, r0, #120	; 0x78
    7792:	f500 7196 	add.w	r1, r0, #300	; 0x12c
    7796:	8806      	ldrh	r6, [r0, #0]
    7798:	4610      	mov	r0, r2
    779a:	f04f 0800 	mov.w	r8, #0
    779e:	2a10      	cmp	r2, #16
    77a0:	d079      	beq.n	7896 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a6>
    77a2:	dc09      	bgt.n	77b8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc8>
    77a4:	f04f 0a01 	mov.w	sl, #1
    77a8:	2801      	cmp	r0, #1
    77aa:	d00a      	beq.n	77c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd2>
    77ac:	2a0b      	cmp	r2, #11
    77ae:	d171      	bne.n	7894 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    77b0:	e01a      	b.n	77e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    77b2:	f240 2182 	movw	r1, #642	; 0x282
    77b6:	e0ad      	b.n	7914 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    77b8:	281a      	cmp	r0, #26
    77ba:	d04d      	beq.n	7858 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x168>
    77bc:	2a1b      	cmp	r2, #27
    77be:	d169      	bne.n	7894 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    77c0:	e027      	b.n	7812 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x122>
    77c2:	2d00      	cmp	r5, #0
    77c4:	d00f      	beq.n	77e6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    77c6:	f884 8001 	strb.w	r8, [r4, #1]
    77ca:	f884 a000 	strb.w	sl, [r4]
    77ce:	f884 8004 	strb.w	r8, [r4, #4]
    77d2:	f8a4 6005 	strh.w	r6, [r4, #5]
    77d6:	f895 0057 	ldrb.w	r0, [r5, #87]	; 0x57
    77da:	71e0      	strb	r0, [r4, #7]
    77dc:	f835 0f58 	ldrh.w	r0, [r5, #88]!
    77e0:	8120      	strh	r0, [r4, #8]
    77e2:	8868      	ldrh	r0, [r5, #2]
    77e4:	8160      	strh	r0, [r4, #10]
    77e6:	e076      	b.n	78d6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    77e8:	4630      	mov	r0, r6
    77ea:	f7fe fab7 	bl	5d5c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    77ee:	b168      	cbz	r0, 780c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    77f0:	f884 8001 	strb.w	r8, [r4, #1]
    77f4:	220d      	movs	r2, #13
    77f6:	7022      	strb	r2, [r4, #0]
    77f8:	80e6      	strh	r6, [r4, #6]
    77fa:	4641      	mov	r1, r8
    77fc:	f8a4 a008 	strh.w	sl, [r4, #8]
    7800:	f884 a004 	strb.w	sl, [r4, #4]
    7804:	460a      	mov	r2, r1
    7806:	f006 ff37 	bl	e678 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    780a:	e064      	b.n	78d6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    780c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    7810:	e080      	b.n	7914 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7812:	f7ff fdfd 	bl	7410 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    7816:	b3e8      	cbz	r0, 7894 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7818:	f887 8008 	strb.w	r8, [r7, #8]
    781c:	4630      	mov	r0, r6
    781e:	f8ad 6000 	strh.w	r6, [sp]
    7822:	a902      	add	r1, sp, #8
    7824:	f007 fa92 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7828:	b110      	cbz	r0, 7830 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x140>
    782a:	f44f 71b7 	mov.w	r1, #366	; 0x16e
    782e:	e071      	b.n	7914 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7830:	9803      	ldr	r0, [sp, #12]
    7832:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    7836:	f88d 1002 	strb.w	r1, [sp, #2]
    783a:	7841      	ldrb	r1, [r0, #1]
    783c:	f88d 1003 	strb.w	r1, [sp, #3]
    7840:	8840      	ldrh	r0, [r0, #2]
    7842:	f8ad 0004 	strh.w	r0, [sp, #4]
    7846:	2102      	movs	r1, #2
    7848:	4668      	mov	r0, sp
    784a:	f009 fb9d 	bl	10f88 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    784e:	2800      	cmp	r0, #0
    7850:	d034      	beq.n	78bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    7852:	f44f 71c2 	mov.w	r1, #388	; 0x184
    7856:	e05d      	b.n	7914 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7858:	f7ff fdd0 	bl	73fc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    785c:	b1d0      	cbz	r0, 7894 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    785e:	f887 8008 	strb.w	r8, [r7, #8]
    7862:	a903      	add	r1, sp, #12
    7864:	4630      	mov	r0, r6
    7866:	f009 fa06 	bl	10c76 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    786a:	b110      	cbz	r0, 7872 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x182>
    786c:	f240 118b 	movw	r1, #395	; 0x18b
    7870:	e050      	b.n	7914 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    7872:	f8ad 6000 	strh.w	r6, [sp]
    7876:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    787a:	f8ad 0002 	strh.w	r0, [sp, #2]
    787e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7882:	f8ad 0004 	strh.w	r0, [sp, #4]
    7886:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    788a:	f8ad 0006 	strh.w	r0, [sp, #6]
    788e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7892:	e001      	b.n	7898 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a8>
    7894:	e015      	b.n	78c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    7896:	e009      	b.n	78ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1bc>
    7898:	f8ad 0008 	strh.w	r0, [sp, #8]
    789c:	4668      	mov	r0, sp
    789e:	f009 fa0e 	bl	10cbe <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    78a2:	2800      	cmp	r0, #0
    78a4:	d00a      	beq.n	78bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    78a6:	f44f 71ca 	mov.w	r1, #404	; 0x194
    78aa:	e033      	b.n	7914 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x224>
    78ac:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    78b0:	f000 0001 	and.w	r0, r0, #1
    78b4:	f7ff fd96 	bl	73e4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    78b8:	b130      	cbz	r0, 78c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d8>
    78ba:	2000      	movs	r0, #0
    78bc:	b006      	add	sp, #24
    78be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78c2:	f1b9 0f08 	cmp.w	r9, #8
    78c6:	d008      	beq.n	78da <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ea>
    78c8:	4814      	ldr	r0, [pc, #80]	; (791c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>)
    78ca:	6803      	ldr	r3, [r0, #0]
    78cc:	b11b      	cbz	r3, 78d6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    78ce:	6878      	ldr	r0, [r7, #4]
    78d0:	464a      	mov	r2, r9
    78d2:	4621      	mov	r1, r4
    78d4:	4798      	blx	r3
    78d6:	2001      	movs	r0, #1
    78d8:	e7f0      	b.n	78bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1cc>
    78da:	4630      	mov	r0, r6
    78dc:	f7fe fa28 	bl	5d30 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    78e0:	f006 fcf7 	bl	e2d2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    78e4:	b1a0      	cbz	r0, 7910 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x220>
    78e6:	4630      	mov	r0, r6
    78e8:	f007 f960 	bl	ebac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    78ec:	2100      	movs	r1, #0
    78ee:	4630      	mov	r0, r6
    78f0:	f7fe f88a 	bl	5a08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    78f4:	2d00      	cmp	r5, #0
    78f6:	d0ee      	beq.n	78d6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    78f8:	f884 8001 	strb.w	r8, [r4, #1]
    78fc:	210a      	movs	r1, #10
    78fe:	7021      	strb	r1, [r4, #0]
    7900:	f884 8004 	strb.w	r8, [r4, #4]
    7904:	f8a4 6005 	strh.w	r6, [r4, #5]
    7908:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    790c:	71e0      	strb	r0, [r4, #7]
    790e:	e7e2      	b.n	78d6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1e6>
    7910:	f240 21c3 	movw	r1, #707	; 0x2c3
    7914:	2010      	movs	r0, #16
    7916:	f7fd fde3 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    791a:	0000      	.short	0x0000
    791c:	20000124 	.word	0x20000124
    7920:	4904      	ldr	r1, [pc, #16]	; (7934 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x244>)
    7922:	2000      	movs	r0, #0
    7924:	6048      	str	r0, [r1, #4]
    7926:	6088      	str	r0, [r1, #8]
    7928:	4903      	ldr	r1, [pc, #12]	; (7938 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x248>)
    792a:	6008      	str	r0, [r1, #0]
    792c:	6048      	str	r0, [r1, #4]
    792e:	8108      	strh	r0, [r1, #8]
    7930:	4770      	bx	lr
    7932:	0000      	.short	0x0000
    7934:	20000114 	.word	0x20000114
    7938:	200016ed 	.word	0x200016ed

0000793c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    793c:	b5f0      	push	{r4, r5, r6, r7, lr}
    793e:	f06f 021f 	mvn.w	r2, #31
    7942:	0c01      	lsrs	r1, r0, #16
    7944:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    7948:	251f      	movs	r5, #31
    794a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    794e:	3854      	subs	r0, #84	; 0x54
    7950:	d00d      	beq.n	796e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7952:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7956:	3855      	subs	r0, #85	; 0x55
    7958:	d009      	beq.n	796e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    795a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    795e:	38aa      	subs	r0, #170	; 0xaa
    7960:	d005      	beq.n	796e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7962:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    7966:	38aa      	subs	r0, #170	; 0xaa
    7968:	d001      	beq.n	796e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    796a:	2001      	movs	r0, #1
    796c:	e000      	b.n	7970 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    796e:	2000      	movs	r0, #0
    7970:	2200      	movs	r2, #0
    7972:	4613      	mov	r3, r2
    7974:	ea4f 0402 	mov.w	r4, r2
    7978:	ea82 0701 	eor.w	r7, r2, r1
    797c:	43ff      	mvns	r7, r7
    797e:	431f      	orrs	r7, r3
    7980:	1c7f      	adds	r7, r7, #1
    7982:	d00f      	beq.n	79a4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    7984:	f006 0701 	and.w	r7, r6, #1
    7988:	0852      	lsrs	r2, r2, #1
    798a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    798e:	f005 0701 	and.w	r7, r5, #1
    7992:	085b      	lsrs	r3, r3, #1
    7994:	0876      	lsrs	r6, r6, #1
    7996:	086d      	lsrs	r5, r5, #1
    7998:	1c64      	adds	r4, r4, #1
    799a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    799e:	2c16      	cmp	r4, #22
    79a0:	d3ea      	bcc.n	7978 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    79a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79a4:	2000      	movs	r0, #0
    79a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000079a8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    79a8:	b510      	push	{r4, lr}
    79aa:	4804      	ldr	r0, [pc, #16]	; (79bc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    79ac:	f007 ffc3 	bl	f936 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    79b0:	4802      	ldr	r0, [pc, #8]	; (79bc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    79b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79b6:	3008      	adds	r0, #8
    79b8:	f007 bfbd 	b.w	f936 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb4>
    79bc:	2000012c 	.word	0x2000012c

000079c0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    79c0:	4801      	ldr	r0, [pc, #4]	; (79c8 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    79c2:	f000 b809 	b.w	79d8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    79c6:	0000      	.short	0x0000
    79c8:	2000012c 	.word	0x2000012c

000079cc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    79cc:	4801      	ldr	r0, [pc, #4]	; (79d4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    79ce:	f000 b803 	b.w	79d8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    79d2:	0000      	.short	0x0000
    79d4:	20000134 	.word	0x20000134
    79d8:	b510      	push	{r4, lr}
    79da:	e9d0 2100 	ldrd	r2, r1, [r0]
    79de:	4b09      	ldr	r3, [pc, #36]	; (7a04 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    79e0:	4c09      	ldr	r4, [pc, #36]	; (7a08 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    79e2:	4353      	muls	r3, r2
    79e4:	4354      	muls	r4, r2
    79e6:	4051      	eors	r1, r2
    79e8:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    79ec:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    79f0:	ea4f 41f1 	mov.w	r1, r1, ror #19
    79f4:	e9c0 2100 	strd	r2, r1, [r0]
    79f8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    79fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7a00:	4618      	mov	r0, r3
    7a02:	bd10      	pop	{r4, pc}
    7a04:	c6ef3760 	.word	0xc6ef3760
    7a08:	9e3779bb 	.word	0x9e3779bb

00007a0c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7a0c:	b570      	push	{r4, r5, r6, lr}
    7a0e:	4604      	mov	r4, r0
    7a10:	7c00      	ldrb	r0, [r0, #16]
    7a12:	b300      	cbz	r0, 7a56 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7a14:	2802      	cmp	r0, #2
    7a16:	d01e      	beq.n	7a56 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7a18:	f05f 0001 	movs.w	r0, #1
    7a1c:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7a20:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    7a24:	460d      	mov	r5, r1
    7a26:	b1c0      	cbz	r0, 7a5a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    7a28:	7de0      	ldrb	r0, [r4, #23]
    7a2a:	b1f0      	cbz	r0, 7a6a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    7a2c:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7a30:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    7a34:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    7a38:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7a3c:	7c20      	ldrb	r0, [r4, #16]
    7a3e:	f007 ff9b 	bl	f978 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    7a42:	7620      	strb	r0, [r4, #24]
    7a44:	2008      	movs	r0, #8
    7a46:	7660      	strb	r0, [r4, #25]
    7a48:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7a4c:	4629      	mov	r1, r5
    7a4e:	f007 ff7f 	bl	f950 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    7a52:	b9a8      	cbnz	r0, 7a80 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    7a54:	e00e      	b.n	7a74 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    7a56:	2000      	movs	r0, #0
    7a58:	e7e0      	b.n	7a1c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    7a5a:	2000      	movs	r0, #0
    7a5c:	f7fe fbf6 	bl	624c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7a60:	2800      	cmp	r0, #0
    7a62:	d1eb      	bne.n	7a3c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    7a64:	f240 418a 	movw	r1, #1162	; 0x48a
    7a68:	e001      	b.n	7a6e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    7a6a:	f240 418e 	movw	r1, #1166	; 0x48e
    7a6e:	202d      	movs	r0, #45	; 0x2d
    7a70:	f7fd fd36 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a74:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7a78:	4629      	mov	r1, r5
    7a7a:	f007 ff72 	bl	f962 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    7a7e:	b100      	cbz	r0, 7a82 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7a80:	2001      	movs	r0, #1
    7a82:	76a0      	strb	r0, [r4, #26]
    7a84:	7e20      	ldrb	r0, [r4, #24]
    7a86:	b130      	cbz	r0, 7a96 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    7a88:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    7a8c:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7a90:	f007 f928 	bl	ece4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7a94:	7660      	strb	r0, [r4, #25]
    7a96:	f7ff fa0f 	bl	6eb8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7a9a:	490c      	ldr	r1, [pc, #48]	; (7acc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    7a9c:	fba0 2301 	umull	r2, r3, r0, r1
    7aa0:	f104 0040 	add.w	r0, r4, #64	; 0x40
    7aa4:	f008 f901 	bl	fcaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    7aa8:	2100      	movs	r1, #0
    7aaa:	4620      	mov	r0, r4
    7aac:	f008 f8ab 	bl	fc06 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    7ab0:	2000      	movs	r0, #0
    7ab2:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7ab6:	78a0      	ldrb	r0, [r4, #2]
    7ab8:	0740      	lsls	r0, r0, #29
    7aba:	d505      	bpl.n	7ac8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    7abc:	4620      	mov	r0, r4
    7abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ac2:	2100      	movs	r1, #0
    7ac4:	f000 bdac 	b.w	8620 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x620>
    7ac8:	bd70      	pop	{r4, r5, r6, pc}
    7aca:	0000      	.short	0x0000
    7acc:	000f4240 	.word	0x000f4240

00007ad0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7ad0:	b530      	push	{r4, r5, lr}
    7ad2:	460c      	mov	r4, r1
    7ad4:	b08d      	sub	sp, #52	; 0x34
    7ad6:	4605      	mov	r5, r0
    7ad8:	4601      	mov	r1, r0
    7ada:	2220      	movs	r2, #32
    7adc:	a802      	add	r0, sp, #8
    7ade:	f005 fe83 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7ae2:	a80a      	add	r0, sp, #40	; 0x28
    7ae4:	f008 f947 	bl	fd76 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7ae8:	7aa0      	ldrb	r0, [r4, #10]
    7aea:	f88d 0018 	strb.w	r0, [sp, #24]
    7aee:	7820      	ldrb	r0, [r4, #0]
    7af0:	f88d 0008 	strb.w	r0, [sp, #8]
    7af4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7af8:	f8ad 0000 	strh.w	r0, [sp]
    7afc:	f89d 0000 	ldrb.w	r0, [sp]
    7b00:	f000 0101 	and.w	r1, r0, #1
    7b04:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7b08:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7b0c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7b10:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7b14:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7b18:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7b1c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7b20:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7b24:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7b28:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7b2c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7b30:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7b34:	f8ad 000a 	strh.w	r0, [sp, #10]
    7b38:	7d20      	ldrb	r0, [r4, #20]
    7b3a:	2801      	cmp	r0, #1
    7b3c:	d006      	beq.n	7b4c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7b3e:	2802      	cmp	r0, #2
    7b40:	d004      	beq.n	7b4c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7b42:	f240 21bb 	movw	r1, #699	; 0x2bb
    7b46:	2006      	movs	r0, #6
    7b48:	f7fd fcca 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b4c:	f88d 000c 	strb.w	r0, [sp, #12]
    7b50:	7a61      	ldrb	r1, [r4, #9]
    7b52:	a80a      	add	r0, sp, #40	; 0x28
    7b54:	f008 f8f6 	bl	fd44 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7b58:	7d20      	ldrb	r0, [r4, #20]
    7b5a:	2101      	movs	r1, #1
    7b5c:	2802      	cmp	r0, #2
    7b5e:	d102      	bne.n	7b66 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7b60:	7d60      	ldrb	r0, [r4, #21]
    7b62:	1c40      	adds	r0, r0, #1
    7b64:	b2c1      	uxtb	r1, r0
    7b66:	7ea0      	ldrb	r0, [r4, #26]
    7b68:	1c40      	adds	r0, r0, #1
    7b6a:	b2c2      	uxtb	r2, r0
    7b6c:	a80a      	add	r0, sp, #40	; 0x28
    7b6e:	f008 f8b0 	bl	fcd2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    7b72:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7b76:	0700      	lsls	r0, r0, #28
    7b78:	d501      	bpl.n	7b7e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    7b7a:	2000      	movs	r0, #0
    7b7c:	e020      	b.n	7bc0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    7b7e:	a80a      	add	r0, sp, #40	; 0x28
    7b80:	f008 f8b9 	bl	fcf6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7b84:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    7b88:	2228      	movs	r2, #40	; 0x28
    7b8a:	f000 fdef 	bl	876c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7b8e:	f240 2171 	movw	r1, #625	; 0x271
    7b92:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    7b96:	fbb0 f0f1 	udiv	r0, r0, r1
    7b9a:	4348      	muls	r0, r1
    7b9c:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7ba0:	f240 2371 	movw	r3, #625	; 0x271
    7ba4:	0a0a      	lsrs	r2, r1, #8
    7ba6:	f240 2171 	movw	r1, #625	; 0x271
    7baa:	434a      	muls	r2, r1
    7bac:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7bb0:	0a09      	lsrs	r1, r1, #8
    7bb2:	4359      	muls	r1, r3
    7bb4:	4290      	cmp	r0, r2
    7bb6:	d801      	bhi.n	7bbc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    7bb8:	9204      	str	r2, [sp, #16]
    7bba:	e004      	b.n	7bc6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7bbc:	4288      	cmp	r0, r1
    7bbe:	d801      	bhi.n	7bc4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    7bc0:	9004      	str	r0, [sp, #16]
    7bc2:	e000      	b.n	7bc6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7bc4:	9104      	str	r1, [sp, #16]
    7bc6:	7ca0      	ldrb	r0, [r4, #18]
    7bc8:	f88d 0017 	strb.w	r0, [sp, #23]
    7bcc:	7e20      	ldrb	r0, [r4, #24]
    7bce:	2801      	cmp	r0, #1
    7bd0:	d000      	beq.n	7bd4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    7bd2:	2000      	movs	r0, #0
    7bd4:	f88d 0014 	strb.w	r0, [sp, #20]
    7bd8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7bda:	f006 feea 	bl	e9b2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    7bde:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7be0:	f006 ff8b 	bl	eafa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7be4:	2220      	movs	r2, #32
    7be6:	a902      	add	r1, sp, #8
    7be8:	4628      	mov	r0, r5
    7bea:	f005 fdfd 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7bee:	980a      	ldr	r0, [sp, #40]	; 0x28
    7bf0:	6228      	str	r0, [r5, #32]
    7bf2:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    7bf6:	84a8      	strh	r0, [r5, #36]	; 0x24
    7bf8:	7ae0      	ldrb	r0, [r4, #11]
    7bfa:	b168      	cbz	r0, 7c18 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7bfc:	2802      	cmp	r0, #2
    7bfe:	d00b      	beq.n	7c18 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7c00:	f05f 0001 	movs.w	r0, #1
    7c04:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    7c08:	68e0      	ldr	r0, [r4, #12]
    7c0a:	6528      	str	r0, [r5, #80]	; 0x50
    7c0c:	8a20      	ldrh	r0, [r4, #16]
    7c0e:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    7c12:	b00d      	add	sp, #52	; 0x34
    7c14:	2000      	movs	r0, #0
    7c16:	bd30      	pop	{r4, r5, pc}
    7c18:	2000      	movs	r0, #0
    7c1a:	e7f3      	b.n	7c04 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00007c1c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7c1c:	4a0a      	ldr	r2, [pc, #40]	; (7c48 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7c1e:	b510      	push	{r4, lr}
    7c20:	2100      	movs	r1, #0
    7c22:	7011      	strb	r1, [r2, #0]
    7c24:	4c09      	ldr	r4, [pc, #36]	; (7c4c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    7c26:	6060      	str	r0, [r4, #4]
    7c28:	f000 f822 	bl	7c70 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7c2c:	b110      	cbz	r0, 7c34 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7c2e:	f240 310a 	movw	r1, #778	; 0x30a
    7c32:	e004      	b.n	7c3e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7c34:	68a0      	ldr	r0, [r4, #8]
    7c36:	2800      	cmp	r0, #0
    7c38:	d104      	bne.n	7c44 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    7c3a:	f240 310d 	movw	r1, #781	; 0x30d
    7c3e:	202d      	movs	r0, #45	; 0x2d
    7c40:	f7fd fc4e 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c44:	bd10      	pop	{r4, pc}
    7c46:	0000      	.short	0x0000
    7c48:	20001280 	.word	0x20001280
    7c4c:	2000013c 	.word	0x2000013c

00007c50 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7c50:	4902      	ldr	r1, [pc, #8]	; (7c5c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7c52:	4801      	ldr	r0, [pc, #4]	; (7c58 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7c54:	6088      	str	r0, [r1, #8]
    7c56:	4770      	bx	lr
    7c58:	00008754 	.word	0x00008754
    7c5c:	2000013c 	.word	0x2000013c

00007c60 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7c60:	4902      	ldr	r1, [pc, #8]	; (7c6c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    7c62:	6008      	str	r0, [r1, #0]
    7c64:	6889      	ldr	r1, [r1, #8]
    7c66:	6809      	ldr	r1, [r1, #0]
    7c68:	4708      	bx	r1
    7c6a:	0000      	.short	0x0000
    7c6c:	2000013c 	.word	0x2000013c

00007c70 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7c70:	4808      	ldr	r0, [pc, #32]	; (7c94 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7c72:	b510      	push	{r4, lr}
    7c74:	7800      	ldrb	r0, [r0, #0]
    7c76:	b110      	cbz	r0, 7c7e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7c78:	240c      	movs	r4, #12
    7c7a:	4620      	mov	r0, r4
    7c7c:	bd10      	pop	{r4, pc}
    7c7e:	2400      	movs	r4, #0
    7c80:	2218      	movs	r2, #24
    7c82:	4621      	mov	r1, r4
    7c84:	4803      	ldr	r0, [pc, #12]	; (7c94 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7c86:	f005 fe29 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c8a:	f004 f8bd 	bl	be08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7c8e:	f003 fee1 	bl	ba54 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7c92:	e7f2      	b.n	7c7a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    7c94:	20001280 	.word	0x20001280

00007c98 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7c98:	4904      	ldr	r1, [pc, #16]	; (7cac <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    7c9a:	b510      	push	{r4, lr}
    7c9c:	7809      	ldrb	r1, [r1, #0]
    7c9e:	2901      	cmp	r1, #1
    7ca0:	d101      	bne.n	7ca6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    7ca2:	f000 fb7b 	bl	839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>
    7ca6:	2000      	movs	r0, #0
    7ca8:	bd10      	pop	{r4, pc}
    7caa:	0000      	.short	0x0000
    7cac:	20001280 	.word	0x20001280

00007cb0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7cb0:	4902      	ldr	r1, [pc, #8]	; (7cbc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    7cb2:	4801      	ldr	r0, [pc, #4]	; (7cb8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    7cb4:	6008      	str	r0, [r1, #0]
    7cb6:	4770      	bx	lr
    7cb8:	000084d9 	.word	0x000084d9
    7cbc:	20000148 	.word	0x20000148
    7cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7cc4:	000f      	movs	r7, r1
    7cc6:	4604      	mov	r4, r0
    7cc8:	d023      	beq.n	7d12 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    7cca:	f104 0020 	add.w	r0, r4, #32
    7cce:	4605      	mov	r5, r0
    7cd0:	f008 f83a 	bl	fd48 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7cd4:	b9b0      	cbnz	r0, 7d04 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    7cd6:	78a0      	ldrb	r0, [r4, #2]
    7cd8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7cdc:	b350      	cbz	r0, 7d34 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    7cde:	4628      	mov	r0, r5
    7ce0:	f008 f809 	bl	fcf6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7ce4:	4606      	mov	r6, r0
    7ce6:	4628      	mov	r0, r5
    7ce8:	f008 f82e 	bl	fd48 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7cec:	1a30      	subs	r0, r6, r0
    7cee:	b2c0      	uxtb	r0, r0
    7cf0:	f008 f87f 	bl	fdf2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7cf4:	4601      	mov	r1, r0
    7cf6:	4835      	ldr	r0, [pc, #212]	; (7dcc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    7cf8:	6842      	ldr	r2, [r0, #4]
    7cfa:	4411      	add	r1, r2
    7cfc:	6041      	str	r1, [r0, #4]
    7cfe:	4628      	mov	r0, r5
    7d00:	f008 f840 	bl	fd84 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7d04:	4628      	mov	r0, r5
    7d06:	f008 f802 	bl	fd0e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7d0a:	4601      	mov	r1, r0
    7d0c:	4620      	mov	r0, r4
    7d0e:	f007 ffb6 	bl	fc7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    7d12:	4d2f      	ldr	r5, [pc, #188]	; (7dd0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    7d14:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    7d18:	2100      	movs	r1, #0
    7d1a:	6868      	ldr	r0, [r5, #4]
    7d1c:	8001      	strh	r1, [r0, #0]
    7d1e:	f007 ffcf 	bl	fcc0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7d22:	8860      	ldrh	r0, [r4, #2]
    7d24:	2813      	cmp	r0, #19
    7d26:	d013      	beq.n	7d50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7d28:	dc09      	bgt.n	7d3e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    7d2a:	2810      	cmp	r0, #16
    7d2c:	d036      	beq.n	7d9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7d2e:	2812      	cmp	r0, #18
    7d30:	d109      	bne.n	7d46 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7d32:	e031      	b.n	7d98 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    7d34:	4620      	mov	r0, r4
    7d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7d3a:	f000 bb2f 	b.w	839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>
    7d3e:	2815      	cmp	r0, #21
    7d40:	d00f      	beq.n	7d62 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7d42:	281d      	cmp	r0, #29
    7d44:	d00d      	beq.n	7d62 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7d46:	f240 614a 	movw	r1, #1610	; 0x64a
    7d4a:	202d      	movs	r0, #45	; 0x2d
    7d4c:	f7fd fbc8 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d50:	2100      	movs	r1, #0
    7d52:	6868      	ldr	r0, [r5, #4]
    7d54:	f007 fb51 	bl	f3fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7d58:	2101      	movs	r1, #1
    7d5a:	6868      	ldr	r0, [r5, #4]
    7d5c:	f007 ffb0 	bl	fcc0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7d60:	e020      	b.n	7da4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7d62:	2101      	movs	r1, #1
    7d64:	6868      	ldr	r0, [r5, #4]
    7d66:	f007 fb48 	bl	f3fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7d6a:	2101      	movs	r1, #1
    7d6c:	6868      	ldr	r0, [r5, #4]
    7d6e:	f007 ffa7 	bl	fcc0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    7d72:	b136      	cbz	r6, 7d82 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    7d74:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7d78:	6868      	ldr	r0, [r5, #4]
    7d7a:	f007 fb59 	bl	f430 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7d7e:	2101      	movs	r1, #1
    7d80:	e006      	b.n	7d90 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    7d82:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7d86:	6868      	ldr	r0, [r5, #4]
    7d88:	f007 fb52 	bl	f430 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7d8c:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    7d90:	6868      	ldr	r0, [r5, #4]
    7d92:	f007 fb53 	bl	f43c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7d96:	e005      	b.n	7da4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7d98:	2106      	movs	r1, #6
    7d9a:	e000      	b.n	7d9e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    7d9c:	2102      	movs	r1, #2
    7d9e:	6868      	ldr	r0, [r5, #4]
    7da0:	f007 fb2b 	bl	f3fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7da4:	4620      	mov	r0, r4
    7da6:	f000 fcb1 	bl	870c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70c>
    7daa:	8860      	ldrh	r0, [r4, #2]
    7dac:	281d      	cmp	r0, #29
    7dae:	d007      	beq.n	7dc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    7db0:	2815      	cmp	r0, #21
    7db2:	d005      	beq.n	7dc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    7db4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    7db8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7dba:	6868      	ldr	r0, [r5, #4]
    7dbc:	f007 fb0d 	bl	f3da <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7dc0:	4639      	mov	r1, r7
    7dc2:	4620      	mov	r0, r4
    7dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7dc8:	f000 b9e4 	b.w	8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>
    7dcc:	20001280 	.word	0x20001280
    7dd0:	2000013c 	.word	0x2000013c
    7dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dd8:	4d2e      	ldr	r5, [pc, #184]	; (7e94 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    7dda:	4607      	mov	r7, r0
    7ddc:	7828      	ldrb	r0, [r5, #0]
    7dde:	2802      	cmp	r0, #2
    7de0:	d005      	beq.n	7dee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7de2:	7828      	ldrb	r0, [r5, #0]
    7de4:	2803      	cmp	r0, #3
    7de6:	d002      	beq.n	7dee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7de8:	f640 41b9 	movw	r1, #3257	; 0xcb9
    7dec:	e028      	b.n	7e40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    7dee:	4c2a      	ldr	r4, [pc, #168]	; (7e98 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7df0:	6820      	ldr	r0, [r4, #0]
    7df2:	7b01      	ldrb	r1, [r0, #12]
    7df4:	b109      	cbz	r1, 7dfa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    7df6:	f007 ff4d 	bl	fc94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    7dfa:	f8d4 c004 	ldr.w	ip, [r4, #4]
    7dfe:	f04f 0800 	mov.w	r8, #0
    7e02:	f89c 0000 	ldrb.w	r0, [ip]
    7e06:	f000 060f 	and.w	r6, r0, #15
    7e0a:	b33f      	cbz	r7, 7e5c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7e0c:	6821      	ldr	r1, [r4, #0]
    7e0e:	09c0      	lsrs	r0, r0, #7
    7e10:	f101 0349 	add.w	r3, r1, #73	; 0x49
    7e14:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    7e18:	f10c 0109 	add.w	r1, ip, #9
    7e1c:	f006 feca 	bl	ebb4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7e20:	b1e0      	cbz	r0, 7e5c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7e22:	4641      	mov	r1, r8
    7e24:	6860      	ldr	r0, [r4, #4]
    7e26:	f007 fac8 	bl	f3ba <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7e2a:	b1b8      	cbz	r0, 7e5c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7e2c:	782a      	ldrb	r2, [r5, #0]
    7e2e:	6820      	ldr	r0, [r4, #0]
    7e30:	4631      	mov	r1, r6
    7e32:	2a02      	cmp	r2, #2
    7e34:	d007      	beq.n	7e46 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7e36:	782a      	ldrb	r2, [r5, #0]
    7e38:	2a03      	cmp	r2, #3
    7e3a:	d004      	beq.n	7e46 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7e3c:	f640 4192 	movw	r1, #3218	; 0xc92
    7e40:	202d      	movs	r0, #45	; 0x2d
    7e42:	f7fd fb4d 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e46:	68a2      	ldr	r2, [r4, #8]
    7e48:	782b      	ldrb	r3, [r5, #0]
    7e4a:	6952      	ldr	r2, [r2, #20]
    7e4c:	f06f 0607 	mvn.w	r6, #7
    7e50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7e54:	58d2      	ldr	r2, [r2, r3]
    7e56:	4790      	blx	r2
    7e58:	4606      	mov	r6, r0
    7e5a:	e000      	b.n	7e5e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7e5c:	2601      	movs	r6, #1
    7e5e:	7ba8      	ldrb	r0, [r5, #14]
    7e60:	b118      	cbz	r0, 7e6a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    7e62:	f003 ffd1 	bl	be08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7e66:	f003 fdf5 	bl	ba54 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7e6a:	2e00      	cmp	r6, #0
    7e6c:	d00f      	beq.n	7e8e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    7e6e:	6820      	ldr	r0, [r4, #0]
    7e70:	f007 ffd5 	bl	fe1e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7e74:	b130      	cbz	r0, 7e84 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    7e76:	f003 ffef 	bl	be58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7e7a:	68a0      	ldr	r0, [r4, #8]
    7e7c:	6880      	ldr	r0, [r0, #8]
    7e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7e82:	4700      	bx	r0
    7e84:	6820      	ldr	r0, [r4, #0]
    7e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7e8a:	f000 ba87 	b.w	839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>
    7e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e92:	0000      	.short	0x0000
    7e94:	20001280 	.word	0x20001280
    7e98:	2000013c 	.word	0x2000013c
    7e9c:	b510      	push	{r4, lr}
    7e9e:	2903      	cmp	r1, #3
    7ea0:	d002      	beq.n	7ea8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    7ea2:	2905      	cmp	r1, #5
    7ea4:	d10a      	bne.n	7ebc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7ea6:	e002      	b.n	7eae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    7ea8:	f000 fb7e 	bl	85a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a8>
    7eac:	e003      	b.n	7eb6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    7eae:	4904      	ldr	r1, [pc, #16]	; (7ec0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    7eb0:	6809      	ldr	r1, [r1, #0]
    7eb2:	b109      	cbz	r1, 7eb8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    7eb4:	4788      	blx	r1
    7eb6:	b108      	cbz	r0, 7ebc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7eb8:	2000      	movs	r0, #0
    7eba:	bd10      	pop	{r4, pc}
    7ebc:	2001      	movs	r0, #1
    7ebe:	bd10      	pop	{r4, pc}
    7ec0:	20000148 	.word	0x20000148
    7ec4:	4a09      	ldr	r2, [pc, #36]	; (7eec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    7ec6:	0003      	movs	r3, r0
    7ec8:	6810      	ldr	r0, [r2, #0]
    7eca:	d001      	beq.n	7ed0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    7ecc:	f000 ba66 	b.w	839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>
    7ed0:	2900      	cmp	r1, #0
    7ed2:	d009      	beq.n	7ee8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    7ed4:	6891      	ldr	r1, [r2, #8]
    7ed6:	4a06      	ldr	r2, [pc, #24]	; (7ef0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    7ed8:	6909      	ldr	r1, [r1, #16]
    7eda:	7812      	ldrb	r2, [r2, #0]
    7edc:	f06f 030f 	mvn.w	r3, #15
    7ee0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7ee4:	5889      	ldr	r1, [r1, r2]
    7ee6:	4708      	bx	r1
    7ee8:	4770      	bx	lr
    7eea:	0000      	.short	0x0000
    7eec:	2000013c 	.word	0x2000013c
    7ef0:	20001280 	.word	0x20001280
    7ef4:	b570      	push	{r4, r5, r6, lr}
    7ef6:	4604      	mov	r4, r0
    7ef8:	8840      	ldrh	r0, [r0, #2]
    7efa:	2810      	cmp	r0, #16
    7efc:	d019      	beq.n	7f32 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    7efe:	4d10      	ldr	r5, [pc, #64]	; (7f40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7f00:	7ba8      	ldrb	r0, [r5, #14]
    7f02:	b120      	cbz	r0, 7f0e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    7f04:	f003 fdc6 	bl	ba94 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7f08:	2040      	movs	r0, #64	; 0x40
    7f0a:	f003 ff8b 	bl	be24 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7f0e:	480d      	ldr	r0, [pc, #52]	; (7f44 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7f10:	6840      	ldr	r0, [r0, #4]
    7f12:	f004 fa0d 	bl	c330 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7f16:	78a0      	ldrb	r0, [r4, #2]
    7f18:	0740      	lsls	r0, r0, #29
    7f1a:	d404      	bmi.n	7f26 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    7f1c:	2100      	movs	r1, #0
    7f1e:	7922      	ldrb	r2, [r4, #4]
    7f20:	4608      	mov	r0, r1
    7f22:	f004 fa7d 	bl	c420 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7f26:	2000      	movs	r0, #0
    7f28:	f004 f8b8 	bl	c09c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7f2c:	2002      	movs	r0, #2
    7f2e:	7028      	strb	r0, [r5, #0]
    7f30:	bd70      	pop	{r4, r5, r6, pc}
    7f32:	4620      	mov	r0, r4
    7f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f38:	2101      	movs	r1, #1
    7f3a:	f7ff bec1 	b.w	7cc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7f3e:	0000      	.short	0x0000
    7f40:	20001280 	.word	0x20001280
    7f44:	2000013c 	.word	0x2000013c
    7f48:	b510      	push	{r4, lr}
    7f4a:	4c12      	ldr	r4, [pc, #72]	; (7f94 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    7f4c:	6820      	ldr	r0, [r4, #0]
    7f4e:	f000 f825 	bl	7f9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7f52:	6820      	ldr	r0, [r4, #0]
    7f54:	f007 ff63 	bl	fe1e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7f58:	2800      	cmp	r0, #0
    7f5a:	6820      	ldr	r0, [r4, #0]
    7f5c:	d00b      	beq.n	7f76 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    7f5e:	490e      	ldr	r1, [pc, #56]	; (7f98 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7f60:	780a      	ldrb	r2, [r1, #0]
    7f62:	2a02      	cmp	r2, #2
    7f64:	d00b      	beq.n	7f7e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7f66:	780a      	ldrb	r2, [r1, #0]
    7f68:	2a03      	cmp	r2, #3
    7f6a:	d008      	beq.n	7f7e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7f6c:	f640 31c6 	movw	r1, #3014	; 0xbc6
    7f70:	202d      	movs	r0, #45	; 0x2d
    7f72:	f7fd fab5 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7f7a:	f000 ba0f 	b.w	839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>
    7f7e:	68a2      	ldr	r2, [r4, #8]
    7f80:	7809      	ldrb	r1, [r1, #0]
    7f82:	68d2      	ldr	r2, [r2, #12]
    7f84:	f06f 0307 	mvn.w	r3, #7
    7f88:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7f8c:	5851      	ldr	r1, [r2, r1]
    7f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7f92:	4708      	bx	r1
    7f94:	2000013c 	.word	0x2000013c
    7f98:	20001280 	.word	0x20001280
    7f9c:	b510      	push	{r4, lr}
    7f9e:	7b01      	ldrb	r1, [r0, #12]
    7fa0:	b109      	cbz	r1, 7fa6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    7fa2:	f007 fe77 	bl	fc94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    7fa6:	4805      	ldr	r0, [pc, #20]	; (7fbc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    7fa8:	7b80      	ldrb	r0, [r0, #14]
    7faa:	2800      	cmp	r0, #0
    7fac:	d005      	beq.n	7fba <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    7fae:	f003 ff2b 	bl	be08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fb6:	f003 bd4d 	b.w	ba54 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7fba:	bd10      	pop	{r4, pc}
    7fbc:	20001280 	.word	0x20001280

00007fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fc2:	4d59      	ldr	r5, [pc, #356]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    7fc4:	4604      	mov	r4, r0
    7fc6:	b08b      	sub	sp, #44	; 0x2c
    7fc8:	7828      	ldrb	r0, [r5, #0]
    7fca:	bbe8      	cbnz	r0, 8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    7fcc:	7820      	ldrb	r0, [r4, #0]
    7fce:	28ff      	cmp	r0, #255	; 0xff
    7fd0:	d03d      	beq.n	804e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
    7fd2:	2000      	movs	r0, #0
    7fd4:	81a8      	strh	r0, [r5, #12]
    7fd6:	6068      	str	r0, [r5, #4]
    7fd8:	7068      	strb	r0, [r5, #1]
    7fda:	70a8      	strb	r0, [r5, #2]
    7fdc:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    7fe0:	4b52      	ldr	r3, [pc, #328]	; (812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>)
    7fe2:	af06      	add	r7, sp, #24
    7fe4:	4e52      	ldr	r6, [pc, #328]	; (8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>)
    7fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7fe8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    7fec:	68b0      	ldr	r0, [r6, #8]
    7fee:	6840      	ldr	r0, [r0, #4]
    7ff0:	9009      	str	r0, [sp, #36]	; 0x24
    7ff2:	a806      	add	r0, sp, #24
    7ff4:	f004 f826 	bl	c044 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7ff8:	f004 f8f4 	bl	c1e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7ffc:	f004 fb68 	bl	c6d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    8000:	f003 ff02 	bl	be08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8004:	f003 fd26 	bl	ba54 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8008:	484a      	ldr	r0, [pc, #296]	; (8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
    800a:	f004 fa3b 	bl	c484 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    800e:	4847      	ldr	r0, [pc, #284]	; (812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>)
    8010:	1f00      	subs	r0, r0, #4
    8012:	f004 fa41 	bl	c498 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    8016:	f104 0020 	add.w	r0, r4, #32
    801a:	4607      	mov	r7, r0
    801c:	f007 feb2 	bl	fd84 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    8020:	4638      	mov	r0, r7
    8022:	f007 fe74 	bl	fd0e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    8026:	4601      	mov	r1, r0
    8028:	4620      	mov	r0, r4
    802a:	f007 fe28 	bl	fc7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb4>
    802e:	f994 000e 	ldrsb.w	r0, [r4, #14]
    8032:	f004 f95b 	bl	c2ec <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    8036:	7921      	ldrb	r1, [r4, #4]
    8038:	2000      	movs	r0, #0
    803a:	f003 ff97 	bl	bf6c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    803e:	2101      	movs	r1, #1
    8040:	60a8      	str	r0, [r5, #8]
    8042:	b138      	cbz	r0, 8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    8044:	7ea0      	ldrb	r0, [r4, #26]
    8046:	e000      	b.n	804a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a>
    8048:	e001      	b.n	804e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
    804a:	b950      	cbnz	r0, 8062 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62>
    804c:	e004      	b.n	8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    804e:	200c      	movs	r0, #12
    8050:	b00b      	add	sp, #44	; 0x2c
    8052:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8054:	7029      	strb	r1, [r5, #0]
    8056:	e064      	b.n	8122 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x122>
    8058:	7e20      	ldrb	r0, [r4, #24]
    805a:	b910      	cbnz	r0, 8062 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62>
    805c:	78a0      	ldrb	r0, [r4, #2]
    805e:	0740      	lsls	r0, r0, #29
    8060:	d522      	bpl.n	80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>
    8062:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
    8066:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    806a:	4050      	eors	r0, r2
    806c:	ea70 0101 	orns	r1, r0, r1
    8070:	d01a      	beq.n	80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>
    8072:	f7fb fe5d 	bl	3d30 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8076:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    807a:	1a80      	subs	r0, r0, r2
    807c:	4199      	sbcs	r1, r3
    807e:	d313      	bcc.n	80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>
    8080:	f7fe ff1a 	bl	6eb8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    8084:	492c      	ldr	r1, [pc, #176]	; (8138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>)
    8086:	fba0 2301 	umull	r2, r3, r0, r1
    808a:	f104 0040 	add.w	r0, r4, #64	; 0x40
    808e:	f007 fe0c 	bl	fcaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe0>
    8092:	2101      	movs	r1, #1
    8094:	4620      	mov	r0, r4
    8096:	f007 fdb6 	bl	fc06 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    809a:	78a0      	ldrb	r0, [r4, #2]
    809c:	0740      	lsls	r0, r0, #29
    809e:	d503      	bpl.n	80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>
    80a0:	2101      	movs	r1, #1
    80a2:	4620      	mov	r0, r4
    80a4:	f000 fabc 	bl	8620 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x620>
    80a8:	f104 0130 	add.w	r1, r4, #48	; 0x30
    80ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    80ae:	f006 fcf3 	bl	ea98 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    80b2:	f104 0138 	add.w	r1, r4, #56	; 0x38
    80b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    80b8:	f006 fcf1 	bl	ea9e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    80bc:	f7fe ff54 	bl	6f68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    80c0:	6870      	ldr	r0, [r6, #4]
    80c2:	1cc0      	adds	r0, r0, #3
    80c4:	f006 fe01 	bl	ecca <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    80c8:	73a8      	strb	r0, [r5, #14]
    80ca:	78a0      	ldrb	r0, [r4, #2]
    80cc:	07c0      	lsls	r0, r0, #31
    80ce:	d028      	beq.n	8122 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x122>
    80d0:	a903      	add	r1, sp, #12
    80d2:	2000      	movs	r0, #0
    80d4:	f006 fbb6 	bl	e844 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    80d8:	b120      	cbz	r0, 80e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>
    80da:	f640 118c 	movw	r1, #2444	; 0x98c
    80de:	202d      	movs	r0, #45	; 0x2d
    80e0:	f7fd f9fe 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80e4:	20ff      	movs	r0, #255	; 0xff
    80e6:	73e8      	strb	r0, [r5, #15]
    80e8:	69e6      	ldr	r6, [r4, #28]
    80ea:	f106 070a 	add.w	r7, r6, #10
    80ee:	e013      	b.n	8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>
    80f0:	9c05      	ldr	r4, [sp, #20]
    80f2:	42b4      	cmp	r4, r6
    80f4:	d010      	beq.n	8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>
    80f6:	7a72      	ldrb	r2, [r6, #9]
    80f8:	7a60      	ldrb	r0, [r4, #9]
    80fa:	463b      	mov	r3, r7
    80fc:	f104 010a 	add.w	r1, r4, #10
    8100:	f006 fd58 	bl	ebb4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    8104:	b140      	cbz	r0, 8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>
    8106:	78a0      	ldrb	r0, [r4, #2]
    8108:	73e8      	strb	r0, [r5, #15]
    810a:	f8d4 0003 	ldr.w	r0, [r4, #3]
    810e:	6128      	str	r0, [r5, #16]
    8110:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    8114:	82a8      	strh	r0, [r5, #20]
    8116:	e004      	b.n	8122 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x122>
    8118:	a803      	add	r0, sp, #12
    811a:	f7fd fc25 	bl	5968 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    811e:	2800      	cmp	r0, #0
    8120:	d0e6      	beq.n	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    8122:	2000      	movs	r0, #0
    8124:	e794      	b.n	8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    8126:	0000      	.short	0x0000
    8128:	20001280 	.word	0x20001280
    812c:	00008734 	.word	0x00008734
    8130:	2000013c 	.word	0x2000013c
    8134:	8e89bed6 	.word	0x8e89bed6
    8138:	000f4240 	.word	0x000f4240
    813c:	b510      	push	{r4, lr}
    813e:	4604      	mov	r4, r0
    8140:	f7ff ff3e 	bl	7fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    8144:	2800      	cmp	r0, #0
    8146:	d108      	bne.n	815a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a>
    8148:	4804      	ldr	r0, [pc, #16]	; (815c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>)
    814a:	7800      	ldrb	r0, [r0, #0]
    814c:	2801      	cmp	r0, #1
    814e:	d003      	beq.n	8158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>
    8150:	2100      	movs	r1, #0
    8152:	4620      	mov	r0, r4
    8154:	f7ff fdb4 	bl	7cc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    8158:	2000      	movs	r0, #0
    815a:	bd10      	pop	{r4, pc}
    815c:	20001280 	.word	0x20001280
    8160:	480a      	ldr	r0, [pc, #40]	; (818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>)
    8162:	b510      	push	{r4, lr}
    8164:	490a      	ldr	r1, [pc, #40]	; (8190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>)
    8166:	6804      	ldr	r4, [r0, #0]
    8168:	7808      	ldrb	r0, [r1, #0]
    816a:	2800      	cmp	r0, #0
    816c:	d00d      	beq.n	818a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a>
    816e:	7808      	ldrb	r0, [r1, #0]
    8170:	2802      	cmp	r0, #2
    8172:	d002      	beq.n	817a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17a>
    8174:	7808      	ldrb	r0, [r1, #0]
    8176:	2803      	cmp	r0, #3
    8178:	d102      	bne.n	8180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>
    817a:	4620      	mov	r0, r4
    817c:	f7ff ff0e 	bl	7f9c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    8180:	4620      	mov	r0, r4
    8182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8186:	f000 b909 	b.w	839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>
    818a:	bd10      	pop	{r4, pc}
    818c:	2000013c 	.word	0x2000013c
    8190:	20001280 	.word	0x20001280
    8194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8198:	4604      	mov	r4, r0
    819a:	4827      	ldr	r0, [pc, #156]	; (8238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>)
    819c:	460d      	mov	r5, r1
    819e:	6840      	ldr	r0, [r0, #4]
    81a0:	f004 f8c6 	bl	c330 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    81a4:	4e25      	ldr	r6, [pc, #148]	; (823c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x23c>)
    81a6:	2004      	movs	r0, #4
    81a8:	7030      	strb	r0, [r6, #0]
    81aa:	b325      	cbz	r5, 81f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f6>
    81ac:	8860      	ldrh	r0, [r4, #2]
    81ae:	2810      	cmp	r0, #16
    81b0:	d02a      	beq.n	8208 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x208>
    81b2:	f104 0020 	add.w	r0, r4, #32
    81b6:	4680      	mov	r8, r0
    81b8:	68b5      	ldr	r5, [r6, #8]
    81ba:	f007 fd9c 	bl	fcf6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    81be:	4607      	mov	r7, r0
    81c0:	4640      	mov	r0, r8
    81c2:	f007 fdc1 	bl	fd48 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    81c6:	1a38      	subs	r0, r7, r0
    81c8:	1e40      	subs	r0, r0, #1
    81ca:	b2c0      	uxtb	r0, r0
    81cc:	8861      	ldrh	r1, [r4, #2]
    81ce:	2228      	movs	r2, #40	; 0x28
    81d0:	f000 faec 	bl	87ac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    81d4:	4405      	add	r5, r0
    81d6:	78a0      	ldrb	r0, [r4, #2]
    81d8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    81dc:	b130      	cbz	r0, 81ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    81de:	6870      	ldr	r0, [r6, #4]
    81e0:	4405      	add	r5, r0
    81e2:	f007 fe0a 	bl	fdfa <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    81e6:	4428      	add	r0, r5
    81e8:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    81ec:	7922      	ldrb	r2, [r4, #4]
    81ee:	4629      	mov	r1, r5
    81f0:	2000      	movs	r0, #0
    81f2:	f004 f8b3 	bl	c35c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    81f6:	8860      	ldrh	r0, [r4, #2]
    81f8:	2813      	cmp	r0, #19
    81fa:	d013      	beq.n	8224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>
    81fc:	dc09      	bgt.n	8212 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x212>
    81fe:	2810      	cmp	r0, #16
    8200:	d017      	beq.n	8232 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x232>
    8202:	2812      	cmp	r0, #18
    8204:	d109      	bne.n	821a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21a>
    8206:	e00d      	b.n	8224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>
    8208:	7921      	ldrb	r1, [r4, #4]
    820a:	2000      	movs	r0, #0
    820c:	f003 fe74 	bl	bef8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    8210:	e7f1      	b.n	81f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f6>
    8212:	2815      	cmp	r0, #21
    8214:	d006      	beq.n	8224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>
    8216:	281d      	cmp	r0, #29
    8218:	d004      	beq.n	8224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>
    821a:	f640 5148 	movw	r1, #3400	; 0xd48
    821e:	202d      	movs	r0, #45	; 0x2d
    8220:	f7fd f95e 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8224:	7922      	ldrb	r2, [r4, #4]
    8226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    822a:	2101      	movs	r1, #1
    822c:	2000      	movs	r0, #0
    822e:	f004 b8f7 	b.w	c420 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8236:	0000      	.short	0x0000
    8238:	2000013c 	.word	0x2000013c
    823c:	20001280 	.word	0x20001280
    8240:	b510      	push	{r4, lr}
    8242:	4604      	mov	r4, r0
    8244:	7800      	ldrb	r0, [r0, #0]
    8246:	460b      	mov	r3, r1
    8248:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    824c:	29ff      	cmp	r1, #255	; 0xff
    824e:	d010      	beq.n	8272 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x272>
    8250:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
    8254:	1e51      	subs	r1, r2, #1
    8256:	4618      	mov	r0, r3
    8258:	f7fe fe02 	bl	6e60 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    825c:	b130      	cbz	r0, 826c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>
    825e:	f894 00b6 	ldrb.w	r0, [r4, #182]	; 0xb6
    8262:	f040 0002 	orr.w	r0, r0, #2
    8266:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    826a:	e011      	b.n	8290 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x290>
    826c:	f640 7193 	movw	r1, #3987	; 0xf93
    8270:	e023      	b.n	82ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ba>
    8272:	4813      	ldr	r0, [pc, #76]	; (82c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c0>)
    8274:	6840      	ldr	r0, [r0, #4]
    8276:	7801      	ldrb	r1, [r0, #0]
    8278:	f3c1 1180 	ubfx	r1, r1, #6, #1
    827c:	f884 10b6 	strb.w	r1, [r4, #182]	; 0xb6
    8280:	f8d0 1003 	ldr.w	r1, [r0, #3]
    8284:	f8c4 10b7 	str.w	r1, [r4, #183]	; 0xb7
    8288:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    828c:	f8a4 00bb 	strh.w	r0, [r4, #187]	; 0xbb
    8290:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    8294:	287f      	cmp	r0, #127	; 0x7f
    8296:	d00e      	beq.n	82b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b6>
    8298:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    829c:	207f      	movs	r0, #127	; 0x7f
    829e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    82a2:	2219      	movs	r2, #25
    82a4:	4621      	mov	r1, r4
    82a6:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    82aa:	f7ff f941 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    82ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82b2:	f7ff ba0f 	b.w	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    82b6:	f640 51fb 	movw	r1, #3579	; 0xdfb
    82ba:	202d      	movs	r0, #45	; 0x2d
    82bc:	f7fd f910 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82c0:	2000013c 	.word	0x2000013c
    82c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82c8:	4690      	mov	r8, r2
    82ca:	460e      	mov	r6, r1
    82cc:	4604      	mov	r4, r0
    82ce:	2903      	cmp	r1, #3
    82d0:	d004      	beq.n	82dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2dc>
    82d2:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    82d6:	b108      	cbz	r0, 82dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2dc>
    82d8:	2001      	movs	r0, #1
    82da:	e000      	b.n	82de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2de>
    82dc:	2000      	movs	r0, #0
    82de:	4681      	mov	r9, r0
    82e0:	f003 fdac 	bl	be3c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    82e4:	4605      	mov	r5, r0
    82e6:	2e03      	cmp	r6, #3
    82e8:	d003      	beq.n	82f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2f2>
    82ea:	2701      	movs	r7, #1
    82ec:	2e05      	cmp	r6, #5
    82ee:	d005      	beq.n	82fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fc>
    82f0:	e008      	b.n	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    82f2:	78a0      	ldrb	r0, [r4, #2]
    82f4:	2702      	movs	r7, #2
    82f6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    82fa:	e001      	b.n	8300 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x300>
    82fc:	78a0      	ldrb	r0, [r4, #2]
    82fe:	07c0      	lsls	r0, r0, #31
    8300:	2800      	cmp	r0, #0
    8302:	d042      	beq.n	838a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38a>
    8304:	f1b9 0f00 	cmp.w	r9, #0
    8308:	d13e      	bne.n	8388 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x388>
    830a:	4822      	ldr	r0, [pc, #136]	; (8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>)
    830c:	7b80      	ldrb	r0, [r0, #14]
    830e:	b140      	cbz	r0, 8322 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x322>
    8310:	f006 fcde 	bl	ecd0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    8314:	f888 0000 	strb.w	r0, [r8]
    8318:	28ff      	cmp	r0, #255	; 0xff
    831a:	d002      	beq.n	8322 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x322>
    831c:	f7fe fdba 	bl	6e94 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    8320:	4305      	orrs	r5, r0
    8322:	4e1d      	ldr	r6, [pc, #116]	; (8398 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x398>)
    8324:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    8328:	f104 0350 	add.w	r3, r4, #80	; 0x50
    832c:	6871      	ldr	r1, [r6, #4]
    832e:	f811 0b03 	ldrb.w	r0, [r1], #3
    8332:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8336:	f006 fc3d 	bl	ebb4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    833a:	f898 1000 	ldrb.w	r1, [r8]
    833e:	29ff      	cmp	r1, #255	; 0xff
    8340:	d004      	beq.n	834c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34c>
    8342:	b990      	cbnz	r0, 836a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36a>
    8344:	7e60      	ldrb	r0, [r4, #25]
    8346:	4288      	cmp	r0, r1
    8348:	d00f      	beq.n	836a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36a>
    834a:	e008      	b.n	835e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35e>
    834c:	b138      	cbz	r0, 835e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35e>
    834e:	6871      	ldr	r1, [r6, #4]
    8350:	f811 0b03 	ldrb.w	r0, [r1], #3
    8354:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8358:	f007 fc3c 	bl	fbd4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    835c:	b128      	cbz	r0, 836a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36a>
    835e:	2000      	movs	r0, #0
    8360:	78a1      	ldrb	r1, [r4, #2]
    8362:	0749      	lsls	r1, r1, #29
    8364:	d503      	bpl.n	836e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36e>
    8366:	b990      	cbnz	r0, 838e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38e>
    8368:	e00e      	b.n	8388 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x388>
    836a:	2001      	movs	r0, #1
    836c:	e7f8      	b.n	8360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>
    836e:	b975      	cbnz	r5, 838e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38e>
    8370:	7be0      	ldrb	r0, [r4, #15]
    8372:	b108      	cbz	r0, 8378 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x378>
    8374:	42b8      	cmp	r0, r7
    8376:	d107      	bne.n	8388 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x388>
    8378:	6871      	ldr	r1, [r6, #4]
    837a:	f811 0b03 	ldrb.w	r0, [r1], #3
    837e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8382:	f007 fc27 	bl	fbd4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    8386:	b110      	cbz	r0, 838e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38e>
    8388:	2000      	movs	r0, #0
    838a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    838e:	2001      	movs	r0, #1
    8390:	e7fb      	b.n	838a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38a>
    8392:	0000      	.short	0x0000
    8394:	20001280 	.word	0x20001280
    8398:	2000013c 	.word	0x2000013c
    839c:	b570      	push	{r4, r5, r6, lr}
    839e:	4604      	mov	r4, r0
    83a0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    83a2:	4d13      	ldr	r5, [pc, #76]	; (83f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f0>)
    83a4:	1c40      	adds	r0, r0, #1
    83a6:	8520      	strh	r0, [r4, #40]	; 0x28
    83a8:	7ba8      	ldrb	r0, [r5, #14]
    83aa:	2600      	movs	r6, #0
    83ac:	b120      	cbz	r0, 83b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b8>
    83ae:	f003 fd2b 	bl	be08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    83b2:	f003 fb4f 	bl	ba54 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    83b6:	73ae      	strb	r6, [r5, #14]
    83b8:	702e      	strb	r6, [r5, #0]
    83ba:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    83be:	b108      	cbz	r0, 83c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c4>
    83c0:	2101      	movs	r1, #1
    83c2:	e00f      	b.n	83e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    83c4:	7b60      	ldrb	r0, [r4, #13]
    83c6:	b160      	cbz	r0, 83e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e2>
    83c8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    83ca:	4288      	cmp	r0, r1
    83cc:	d809      	bhi.n	83e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e2>
    83ce:	2101      	movs	r1, #1
    83d0:	4620      	mov	r0, r4
    83d2:	f007 fd36 	bl	fe42 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    83d6:	78a0      	ldrb	r0, [r4, #2]
    83d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    83dc:	07c0      	lsls	r0, r0, #31
    83de:	f7ff b979 	b.w	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    83e2:	2100      	movs	r1, #0
    83e4:	4620      	mov	r0, r4
    83e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    83ea:	f007 bd2a 	b.w	fe42 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    83ee:	0000      	.short	0x0000
    83f0:	20001280 	.word	0x20001280
    83f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83f6:	4604      	mov	r4, r0
    83f8:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    83fc:	4616      	mov	r6, r2
    83fe:	460d      	mov	r5, r1
    8400:	f88d 0000 	strb.w	r0, [sp]
    8404:	9800      	ldr	r0, [sp, #0]
    8406:	9000      	str	r0, [sp, #0]
    8408:	f89d 0000 	ldrb.w	r0, [sp]
    840c:	b110      	cbz	r0, 8414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x414>
    840e:	f640 31fa 	movw	r1, #3066	; 0xbfa
    8412:	e055      	b.n	84c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c0>
    8414:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
    8418:	2700      	movs	r7, #0
    841a:	8828      	ldrh	r0, [r5, #0]
    841c:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
    8420:	2b00      	cmp	r3, #0
    8422:	d14a      	bne.n	84ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ba>
    8424:	6928      	ldr	r0, [r5, #16]
    8426:	f006 fca2 	bl	ed6e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    842a:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    842e:	8b28      	ldrh	r0, [r5, #24]
    8430:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    8434:	8b68      	ldrh	r0, [r5, #26]
    8436:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    843a:	f895 01c7 	ldrb.w	r0, [r5, #455]	; 0x1c7
    843e:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    8442:	7e20      	ldrb	r0, [r4, #24]
    8444:	f104 0149 	add.w	r1, r4, #73	; 0x49
    8448:	460d      	mov	r5, r1
    844a:	b120      	cbz	r0, 8456 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x456>
    844c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    8450:	f007 fa87 	bl	f962 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    8454:	b940      	cbnz	r0, 8468 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x468>
    8456:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    845a:	b170      	cbz	r0, 847a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x47a>
    845c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    8460:	4629      	mov	r1, r5
    8462:	f007 fa75 	bl	f950 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xce>
    8466:	b140      	cbz	r0, 847a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x47a>
    8468:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    846c:	f8c4 007a 	str.w	r0, [r4, #122]	; 0x7a
    8470:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    8474:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    8478:	e003      	b.n	8482 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x482>
    847a:	f8c4 707a 	str.w	r7, [r4, #122]	; 0x7a
    847e:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    8482:	4814      	ldr	r0, [pc, #80]	; (84d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d4>)
    8484:	2eff      	cmp	r6, #255	; 0xff
    8486:	6840      	ldr	r0, [r0, #4]
    8488:	7801      	ldrb	r1, [r0, #0]
    848a:	f3c1 1180 	ubfx	r1, r1, #6, #1
    848e:	f884 1073 	strb.w	r1, [r4, #115]	; 0x73
    8492:	f850 1f03 	ldr.w	r1, [r0, #3]!
    8496:	d016      	beq.n	84c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c6>
    8498:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    849c:	8880      	ldrh	r0, [r0, #4]
    849e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    84a2:	f104 0274 	add.w	r2, r4, #116	; 0x74
    84a6:	1e51      	subs	r1, r2, #1
    84a8:	4630      	mov	r0, r6
    84aa:	f7fe fcd9 	bl	6e60 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    84ae:	b128      	cbz	r0, 84bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4bc>
    84b0:	f814 0f73 	ldrb.w	r0, [r4, #115]!
    84b4:	f040 0002 	orr.w	r0, r0, #2
    84b8:	7020      	strb	r0, [r4, #0]
    84ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84bc:	f640 411b 	movw	r1, #3099	; 0xc1b
    84c0:	202d      	movs	r0, #45	; 0x2d
    84c2:	f7fd f80d 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84c6:	f844 1f74 	str.w	r1, [r4, #116]!
    84ca:	8880      	ldrh	r0, [r0, #4]
    84cc:	80a0      	strh	r0, [r4, #4]
    84ce:	60e7      	str	r7, [r4, #12]
    84d0:	8227      	strh	r7, [r4, #16]
    84d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84d4:	2000013c 	.word	0x2000013c
    84d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    84da:	4604      	mov	r4, r0
    84dc:	20ff      	movs	r0, #255	; 0xff
    84de:	f88d 0000 	strb.w	r0, [sp]
    84e2:	2601      	movs	r6, #1
    84e4:	466a      	mov	r2, sp
    84e6:	2105      	movs	r1, #5
    84e8:	4620      	mov	r0, r4
    84ea:	f7ff feeb 	bl	82c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c4>
    84ee:	b160      	cbz	r0, 850a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50a>
    84f0:	4d2c      	ldr	r5, [pc, #176]	; (85a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a4>)
    84f2:	4f2b      	ldr	r7, [pc, #172]	; (85a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a0>)
    84f4:	6869      	ldr	r1, [r5, #4]
    84f6:	7bfa      	ldrb	r2, [r7, #15]
    84f8:	f107 0310 	add.w	r3, r7, #16
    84fc:	f811 0b03 	ldrb.w	r0, [r1], #3
    8500:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8504:	f006 fb56 	bl	ebb4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    8508:	b110      	cbz	r0, 8510 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x510>
    850a:	2600      	movs	r6, #0
    850c:	4630      	mov	r0, r6
    850e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8510:	686a      	ldr	r2, [r5, #4]
    8512:	69e0      	ldr	r0, [r4, #28]
    8514:	7812      	ldrb	r2, [r2, #0]
    8516:	f810 1f8e 	ldrb.w	r1, [r0, #142]!
    851a:	f3c2 1240 	ubfx	r2, r2, #5, #1
    851e:	4011      	ands	r1, r2
    8520:	7001      	strb	r1, [r0, #0]
    8522:	2201      	movs	r2, #1
    8524:	4620      	mov	r0, r4
    8526:	69e1      	ldr	r1, [r4, #28]
    8528:	f000 f8a8 	bl	867c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x67c>
    852c:	2300      	movs	r3, #0
    852e:	f89d 2000 	ldrb.w	r2, [sp]
    8532:	4620      	mov	r0, r4
    8534:	69e1      	ldr	r1, [r4, #28]
    8536:	f7ff ff5d 	bl	83f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f4>
    853a:	220e      	movs	r2, #14
    853c:	4621      	mov	r1, r4
    853e:	f104 0064 	add.w	r0, r4, #100	; 0x64
    8542:	f7fe fff5 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8546:	69e0      	ldr	r0, [r4, #28]
    8548:	2203      	movs	r2, #3
    854a:	8801      	ldrh	r1, [r0, #0]
    854c:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
    8550:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    8554:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    8558:	4621      	mov	r1, r4
    855a:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    855e:	f7fe ffe7 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8562:	f7ff f8b7 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8566:	2000      	movs	r0, #0
    8568:	7038      	strb	r0, [r7, #0]
    856a:	2200      	movs	r2, #0
    856c:	4621      	mov	r1, r4
    856e:	69e0      	ldr	r0, [r4, #28]
    8570:	f000 fa74 	bl	8a5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    8574:	69e0      	ldr	r0, [r4, #28]
    8576:	8800      	ldrh	r0, [r0, #0]
    8578:	f7fd fbda 	bl	5d30 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    857c:	f006 f834 	bl	e5e8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    8580:	6868      	ldr	r0, [r5, #4]
    8582:	69e1      	ldr	r1, [r4, #28]
    8584:	f8d0 2003 	ldr.w	r2, [r0, #3]
    8588:	f841 2f03 	str.w	r2, [r1, #3]!
    858c:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    8590:	808a      	strh	r2, [r1, #4]
    8592:	7800      	ldrb	r0, [r0, #0]
    8594:	69e1      	ldr	r1, [r4, #28]
    8596:	f3c0 1080 	ubfx	r0, r0, #6, #1
    859a:	7088      	strb	r0, [r1, #2]
    859c:	e7b6      	b.n	850c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50c>
    859e:	0000      	.short	0x0000
    85a0:	20001280 	.word	0x20001280
    85a4:	2000013c 	.word	0x2000013c
    85a8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    85ac:	4604      	mov	r4, r0
    85ae:	20ff      	movs	r0, #255	; 0xff
    85b0:	f88d 0000 	strb.w	r0, [sp]
    85b4:	2501      	movs	r5, #1
    85b6:	466a      	mov	r2, sp
    85b8:	2103      	movs	r1, #3
    85ba:	4620      	mov	r0, r4
    85bc:	f7ff fe82 	bl	82c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c4>
    85c0:	b330      	cbz	r0, 8610 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x610>
    85c2:	7b20      	ldrb	r0, [r4, #12]
    85c4:	2700      	movs	r7, #0
    85c6:	b168      	cbz	r0, 85e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e4>
    85c8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    85cc:	f88d 0004 	strb.w	r0, [sp, #4]
    85d0:	9801      	ldr	r0, [sp, #4]
    85d2:	9001      	str	r0, [sp, #4]
    85d4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    85d8:	b920      	cbnz	r0, 85e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e4>
    85da:	f89d 1000 	ldrb.w	r1, [sp]
    85de:	4620      	mov	r0, r4
    85e0:	f7ff fe2e 	bl	8240 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x240>
    85e4:	4e0c      	ldr	r6, [pc, #48]	; (8618 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x618>)
    85e6:	2104      	movs	r1, #4
    85e8:	6870      	ldr	r0, [r6, #4]
    85ea:	8007      	strh	r7, [r0, #0]
    85ec:	f006 ff05 	bl	f3fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    85f0:	4620      	mov	r0, r4
    85f2:	f000 f88b 	bl	870c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70c>
    85f6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    85fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    85fc:	6870      	ldr	r0, [r6, #4]
    85fe:	f006 ff33 	bl	f468 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    8602:	4906      	ldr	r1, [pc, #24]	; (861c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>)
    8604:	2005      	movs	r0, #5
    8606:	7008      	strb	r0, [r1, #0]
    8608:	6870      	ldr	r0, [r6, #4]
    860a:	f003 fe91 	bl	c330 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    860e:	e000      	b.n	8612 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x612>
    8610:	2500      	movs	r5, #0
    8612:	4628      	mov	r0, r5
    8614:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    8618:	2000013c 	.word	0x2000013c
    861c:	20001280 	.word	0x20001280
    8620:	b570      	push	{r4, r5, r6, lr}
    8622:	4604      	mov	r4, r0
    8624:	460e      	mov	r6, r1
    8626:	7e40      	ldrb	r0, [r0, #25]
    8628:	f7fe fbf4 	bl	6e14 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    862c:	0005      	movs	r5, r0
    862e:	d019      	beq.n	8664 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x664>
    8630:	2110      	movs	r1, #16
    8632:	f006 fd3a 	bl	f0aa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8636:	2800      	cmp	r0, #0
    8638:	d114      	bne.n	8664 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x664>
    863a:	2001      	movs	r0, #1
    863c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    8640:	f104 0157 	add.w	r1, r4, #87	; 0x57
    8644:	4632      	mov	r2, r6
    8646:	460c      	mov	r4, r1
    8648:	4628      	mov	r0, r5
    864a:	f006 fae3 	bl	ec14 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    864e:	4621      	mov	r1, r4
    8650:	4c05      	ldr	r4, [pc, #20]	; (8668 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x668>)
    8652:	6860      	ldr	r0, [r4, #4]
    8654:	f006 feec 	bl	f430 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    8658:	6860      	ldr	r0, [r4, #4]
    865a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    865e:	2101      	movs	r1, #1
    8660:	f006 beec 	b.w	f43c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8664:	bd70      	pop	{r4, r5, r6, pc}
    8666:	0000      	.short	0x0000
    8668:	2000013c 	.word	0x2000013c
    866c:	4802      	ldr	r0, [pc, #8]	; (8678 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x678>)
    866e:	2101      	movs	r1, #1
    8670:	6800      	ldr	r0, [r0, #0]
    8672:	f7ff bb25 	b.w	7cc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    8676:	0000      	.short	0x0000
    8678:	2000013c 	.word	0x2000013c
    867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8680:	4e21      	ldr	r6, [pc, #132]	; (8708 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x708>)
    8682:	4680      	mov	r8, r0
    8684:	460c      	mov	r4, r1
    8686:	6870      	ldr	r0, [r6, #4]
    8688:	4615      	mov	r5, r2
    868a:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    868e:	6161      	str	r1, [r4, #20]
    8690:	8881      	ldrh	r1, [r0, #4]
    8692:	83a1      	strh	r1, [r4, #28]
    8694:	7981      	ldrb	r1, [r0, #6]
    8696:	77a1      	strb	r1, [r4, #30]
    8698:	8940      	ldrh	r0, [r0, #10]
    869a:	f006 fb64 	bl	ed66 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    869e:	4607      	mov	r7, r0
    86a0:	6120      	str	r0, [r4, #16]
    86a2:	6870      	ldr	r0, [r6, #4]
    86a4:	4639      	mov	r1, r7
    86a6:	7d80      	ldrb	r0, [r0, #22]
    86a8:	f006 fcf6 	bl	f098 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    86ac:	8420      	strh	r0, [r4, #32]
    86ae:	6870      	ldr	r0, [r6, #4]
    86b0:	4639      	mov	r1, r7
    86b2:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    86b6:	f006 fceb 	bl	f090 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    86ba:	6260      	str	r0, [r4, #36]	; 0x24
    86bc:	6870      	ldr	r0, [r6, #4]
    86be:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    86c2:	8321      	strh	r1, [r4, #24]
    86c4:	8841      	ldrh	r1, [r0, #2]
    86c6:	8361      	strh	r1, [r4, #26]
    86c8:	6841      	ldr	r1, [r0, #4]
    86ca:	f8c4 108f 	str.w	r1, [r4, #143]	; 0x8f
    86ce:	7a01      	ldrb	r1, [r0, #8]
    86d0:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
    86d4:	7a41      	ldrb	r1, [r0, #9]
    86d6:	f001 011f 	and.w	r1, r1, #31
    86da:	f884 109a 	strb.w	r1, [r4, #154]	; 0x9a
    86de:	7a40      	ldrb	r0, [r0, #9]
    86e0:	0940      	lsrs	r0, r0, #5
    86e2:	f884 01c7 	strb.w	r0, [r4, #455]	; 0x1c7
    86e6:	f104 0066 	add.w	r0, r4, #102	; 0x66
    86ea:	7205      	strb	r5, [r0, #8]
    86ec:	7245      	strb	r5, [r0, #9]
    86ee:	21ff      	movs	r1, #255	; 0xff
    86f0:	7281      	strb	r1, [r0, #10]
    86f2:	2100      	movs	r1, #0
    86f4:	3836      	subs	r0, #54	; 0x36
    86f6:	f007 f899 	bl	f82c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    86fa:	f898 000e 	ldrb.w	r0, [r8, #14]
    86fe:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
    8702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8706:	0000      	.short	0x0000
    8708:	2000013c 	.word	0x2000013c
    870c:	b570      	push	{r4, r5, r6, lr}
    870e:	4d07      	ldr	r5, [pc, #28]	; (872c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72c>)
    8710:	4604      	mov	r4, r0
    8712:	f100 0149 	add.w	r1, r0, #73	; 0x49
    8716:	6868      	ldr	r0, [r5, #4]
    8718:	f006 fe97 	bl	f44a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    871c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    8720:	6868      	ldr	r0, [r5, #4]
    8722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8726:	f006 be96 	b.w	f456 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    872a:	0000      	.short	0x0000
    872c:	2000013c 	.word	0x2000013c
    8730:	00555555 	.word	0x00555555
    8734:	00007f49 	.word	0x00007f49
    8738:	00007dd5 	.word	0x00007dd5
    873c:	00007ec5 	.word	0x00007ec5
    8740:	00000000 	.word	0x00000000
    8744:	00007e9d 	.word	0x00007e9d
    8748:	00007ef5 	.word	0x00007ef5
    874c:	0000fbfb 	.word	0x0000fbfb
    8750:	0000fc01 	.word	0x0000fc01
    8754:	0000813d 	.word	0x0000813d
    8758:	00008161 	.word	0x00008161
    875c:	0000866d 	.word	0x0000866d
    8760:	00008750 	.word	0x00008750
    8764:	00008748 	.word	0x00008748
    8768:	00008744 	.word	0x00008744

0000876c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    876c:	b510      	push	{r4, lr}
    876e:	1e42      	subs	r2, r0, #1
    8770:	2a02      	cmp	r2, #2
    8772:	d901      	bls.n	8778 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    8774:	21ca      	movs	r1, #202	; 0xca
    8776:	e009      	b.n	878c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    8778:	1e40      	subs	r0, r0, #1
    877a:	2910      	cmp	r1, #16
    877c:	d009      	beq.n	8792 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    877e:	2912      	cmp	r1, #18
    8780:	d00c      	beq.n	879c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8782:	2913      	cmp	r1, #19
    8784:	d00a      	beq.n	879c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8786:	2915      	cmp	r1, #21
    8788:	d005      	beq.n	8796 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    878a:	21d8      	movs	r1, #216	; 0xd8
    878c:	202f      	movs	r0, #47	; 0x2f
    878e:	f7fc fea7 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8792:	4905      	ldr	r1, [pc, #20]	; (87a8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8794:	e004      	b.n	87a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8796:	4904      	ldr	r1, [pc, #16]	; (87a8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8798:	1d89      	adds	r1, r1, #6
    879a:	e001      	b.n	87a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    879c:	4902      	ldr	r1, [pc, #8]	; (87a8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    879e:	1f89      	subs	r1, r1, #6
    87a0:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    87a4:	bd10      	pop	{r4, pc}
    87a6:	0000      	.short	0x0000
    87a8:	0000fe12 	.word	0x0000fe12

000087ac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    87ac:	1e42      	subs	r2, r0, #1
    87ae:	b510      	push	{r4, lr}
    87b0:	b2d2      	uxtb	r2, r2
    87b2:	2a01      	cmp	r2, #1
    87b4:	d903      	bls.n	87be <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    87b6:	291d      	cmp	r1, #29
    87b8:	d001      	beq.n	87be <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    87ba:	21ee      	movs	r1, #238	; 0xee
    87bc:	e00d      	b.n	87da <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    87be:	2913      	cmp	r1, #19
    87c0:	d013      	beq.n	87ea <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    87c2:	dc04      	bgt.n	87ce <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    87c4:	2910      	cmp	r1, #16
    87c6:	d00b      	beq.n	87e0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    87c8:	2912      	cmp	r1, #18
    87ca:	d104      	bne.n	87d6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    87cc:	e00d      	b.n	87ea <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    87ce:	2915      	cmp	r1, #21
    87d0:	d008      	beq.n	87e4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    87d2:	291d      	cmp	r1, #29
    87d4:	d00e      	beq.n	87f4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    87d6:	f44f 7181 	mov.w	r1, #258	; 0x102
    87da:	202f      	movs	r0, #47	; 0x2f
    87dc:	f7fc fe80 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87e0:	4807      	ldr	r0, [pc, #28]	; (8800 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    87e2:	e004      	b.n	87ee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    87e4:	4806      	ldr	r0, [pc, #24]	; (8800 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    87e6:	3008      	adds	r0, #8
    87e8:	e001      	b.n	87ee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    87ea:	4805      	ldr	r0, [pc, #20]	; (8800 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    87ec:	1d00      	adds	r0, r0, #4
    87ee:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    87f2:	bd10      	pop	{r4, pc}
    87f4:	f240 315a 	movw	r1, #858	; 0x35a
    87f8:	fb10 f001 	smulbb	r0, r0, r1
    87fc:	bd10      	pop	{r4, pc}
    87fe:	0000      	.short	0x0000
    8800:	0000fe00 	.word	0x0000fe00

00008804 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    8804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8808:	4604      	mov	r4, r0
    880a:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    880e:	4616      	mov	r6, r2
    8810:	460f      	mov	r7, r1
    8812:	2800      	cmp	r0, #0
    8814:	d15e      	bne.n	88d4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    8816:	4621      	mov	r1, r4
    8818:	484d      	ldr	r0, [pc, #308]	; (8950 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    881a:	f7fb f8d7 	bl	39cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    881e:	4605      	mov	r5, r0
    8820:	2820      	cmp	r0, #32
    8822:	d057      	beq.n	88d4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    8824:	2250      	movs	r2, #80	; 0x50
    8826:	2100      	movs	r1, #0
    8828:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    882c:	f005 f856 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8830:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
    8834:	2501      	movs	r5, #1
    8836:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
    883a:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
    883e:	b137      	cbz	r7, 884e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    8840:	f7ff f8c4 	bl	79cc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    8844:	f000 0007 	and.w	r0, r0, #7
    8848:	1c40      	adds	r0, r0, #1
    884a:	f887 01f4 	strb.w	r0, [r7, #500]	; 0x1f4
    884e:	4620      	mov	r0, r4
    8850:	f007 fcc9 	bl	101e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    8854:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    8858:	2002      	movs	r0, #2
    885a:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
    885e:	46a8      	mov	r8, r5
    8860:	f884 50eb 	strb.w	r5, [r4, #235]	; 0xeb
    8864:	2500      	movs	r5, #0
    8866:	f804 5fe0 	strb.w	r5, [r4, #224]!
    886a:	f7fc f9bf 	bl	4bec <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    886e:	4607      	mov	r7, r0
    8870:	f004 fe57 	bl	d522 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8874:	8921      	ldrh	r1, [r4, #8]
    8876:	3ce0      	subs	r4, #224	; 0xe0
    8878:	4288      	cmp	r0, r1
    887a:	d800      	bhi.n	887e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    887c:	4608      	mov	r0, r1
    887e:	4438      	add	r0, r7
    8880:	30cc      	adds	r0, #204	; 0xcc
    8882:	b287      	uxth	r7, r0
    8884:	4620      	mov	r0, r4
    8886:	f007 f957 	bl	fb38 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    888a:	b330      	cbz	r0, 88da <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    888c:	f008 fe2d 	bl	114ea <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8890:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    8894:	b281      	uxth	r1, r0
    8896:	4630      	mov	r0, r6
    8898:	f004 fe77 	bl	d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    889c:	4430      	add	r0, r6
    889e:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    88a2:	34c4      	adds	r4, #196	; 0xc4
    88a4:	f7fb fa44 	bl	3d30 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    88a8:	19c0      	adds	r0, r0, r7
    88aa:	4169      	adcs	r1, r5
    88ac:	e9c4 010b 	strd	r0, r1, [r4, #44]	; 0x2c
    88b0:	f804 5c03 	strb.w	r5, [r4, #-3]
    88b4:	f884 8004 	strb.w	r8, [r4, #4]
    88b8:	2001      	movs	r0, #1
    88ba:	f007 fa9a 	bl	fdf2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    88be:	f500 7088 	add.w	r0, r0, #272	; 0x110
    88c2:	1a30      	subs	r0, r6, r0
    88c4:	60a0      	str	r0, [r4, #8]
    88c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    88ca:	0841      	lsrs	r1, r0, #1
    88cc:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
    88d0:	3cc4      	subs	r4, #196	; 0xc4
    88d2:	e022      	b.n	891a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    88d4:	200c      	movs	r0, #12
    88d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    88da:	4620      	mov	r0, r4
    88dc:	f007 fbd6 	bl	1008c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    88e0:	f844 0fe4 	str.w	r0, [r4, #228]!
    88e4:	f804 8c23 	strb.w	r8, [r4, #-35]
    88e8:	f7fb fa22 	bl	3d30 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    88ec:	4680      	mov	r8, r0
    88ee:	4689      	mov	r9, r1
    88f0:	f7ff f86c 	bl	79cc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    88f4:	f242 7110 	movw	r1, #10000	; 0x2710
    88f8:	fbb0 f2f1 	udiv	r2, r0, r1
    88fc:	fb01 0012 	mls	r0, r1, r2, r0
    8900:	1839      	adds	r1, r7, r0
    8902:	eb11 0108 	adds.w	r1, r1, r8
    8906:	eb45 0009 	adc.w	r0, r5, r9
    890a:	e9c4 1003 	strd	r1, r0, [r4, #12]
    890e:	3ce4      	subs	r4, #228	; 0xe4
    8910:	b196      	cbz	r6, 8938 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x134>
    8912:	1989      	adds	r1, r1, r6
    8914:	4168      	adcs	r0, r5
    8916:	e9c4 1040 	strd	r1, r0, [r4, #256]	; 0x100
    891a:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    891e:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
    8922:	f007 fc5e 	bl	101e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    8926:	b168      	cbz	r0, 8944 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x140>
    8928:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
    892c:	2100      	movs	r1, #0
    892e:	4620      	mov	r0, r4
    8930:	f007 f92e 	bl	fb90 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8934:	2000      	movs	r0, #0
    8936:	e7ce      	b.n	88d6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    8938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    893c:	0841      	lsrs	r1, r0, #1
    893e:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
    8942:	e7ea      	b.n	891a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x116>
    8944:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    8948:	2030      	movs	r0, #48	; 0x30
    894a:	f7fc fdc9 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    894e:	0000      	.short	0x0000
    8950:	00010363 	.word	0x00010363

00008954 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    8954:	4803      	ldr	r0, [pc, #12]	; (8964 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x10>)
    8956:	2100      	movs	r1, #0
    8958:	7001      	strb	r1, [r0, #0]
    895a:	2201      	movs	r2, #1
    895c:	7082      	strb	r2, [r0, #2]
    895e:	7041      	strb	r1, [r0, #1]
    8960:	f007 baaf 	b.w	fec2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    8964:	2000014c 	.word	0x2000014c

00008968 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    8968:	4901      	ldr	r1, [pc, #4]	; (8970 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    896a:	7008      	strb	r0, [r1, #0]
    896c:	4770      	bx	lr
    896e:	0000      	.short	0x0000
    8970:	2000014c 	.word	0x2000014c

00008974 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    8974:	4908      	ldr	r1, [pc, #32]	; (8998 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    8976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    897a:	fbb1 f1f2 	udiv	r1, r1, r2
    897e:	b510      	push	{r4, lr}
    8980:	f501 7125 	add.w	r1, r1, #660	; 0x294
    8984:	f006 ff6b 	bl	f85e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8988:	f640 0148 	movw	r1, #2120	; 0x848
    898c:	4288      	cmp	r0, r1
    898e:	d300      	bcc.n	8992 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    8990:	4608      	mov	r0, r1
    8992:	b280      	uxth	r0, r0
    8994:	bd10      	pop	{r4, pc}
    8996:	0000      	.short	0x0000
    8998:	0001527d 	.word	0x0001527d

0000899c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    899c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89a0:	4c10      	ldr	r4, [pc, #64]	; (89e4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    89a2:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    89a6:	f003 fbdd 	bl	c164 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    89aa:	4606      	mov	r6, r0
    89ac:	7820      	ldrb	r0, [r4, #0]
    89ae:	b128      	cbz	r0, 89bc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    89b0:	4632      	mov	r2, r6
    89b2:	4639      	mov	r1, r7
    89b4:	4628      	mov	r0, r5
    89b6:	f006 f9e0 	bl	ed7a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    89ba:	4605      	mov	r5, r0
    89bc:	6860      	ldr	r0, [r4, #4]
    89be:	4285      	cmp	r5, r0
    89c0:	d005      	beq.n	89ce <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    89c2:	68e1      	ldr	r1, [r4, #12]
    89c4:	1a28      	subs	r0, r5, r0
    89c6:	4408      	add	r0, r1
    89c8:	60e0      	str	r0, [r4, #12]
    89ca:	f7fb f8f7 	bl	3bbc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    89ce:	6065      	str	r5, [r4, #4]
    89d0:	42ae      	cmp	r6, r5
    89d2:	d801      	bhi.n	89d8 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    89d4:	7860      	ldrb	r0, [r4, #1]
    89d6:	b110      	cbz	r0, 89de <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    89d8:	2000      	movs	r0, #0
    89da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89de:	2001      	movs	r0, #1
    89e0:	e7fb      	b.n	89da <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    89e2:	0000      	.short	0x0000
    89e4:	2000014c 	.word	0x2000014c

000089e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    89e8:	b510      	push	{r4, lr}
    89ea:	4604      	mov	r4, r0
    89ec:	2906      	cmp	r1, #6
    89ee:	d22e      	bcs.n	8a4e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    89f0:	e8df f001 	tbb	[pc, r1]
    89f4:	14031105 	.word	0x14031105
    89f8:	2815      	.short	0x2815
    89fa:	2100      	movs	r1, #0
    89fc:	e006      	b.n	8a0c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    89fe:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    8a02:	b110      	cbz	r0, 8a0a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    8a04:	4620      	mov	r0, r4
    8a06:	f007 fb7f 	bl	10108 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x218>
    8a0a:	2101      	movs	r1, #1
    8a0c:	4620      	mov	r0, r4
    8a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8a12:	f000 b8fb 	b.w	8c0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b0>
    8a16:	2003      	movs	r0, #3
    8a18:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8a1c:	bd10      	pop	{r4, pc}
    8a1e:	f003 fba7 	bl	c170 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8a22:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    8a26:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8a2a:	f003 fc65 	bl	c2f8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a2e:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8a32:	1a09      	subs	r1, r1, r0
    8a34:	4808      	ldr	r0, [pc, #32]	; (8a58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    8a36:	6842      	ldr	r2, [r0, #4]
    8a38:	440a      	add	r2, r1
    8a3a:	6042      	str	r2, [r0, #4]
    8a3c:	6882      	ldr	r2, [r0, #8]
    8a3e:	4411      	add	r1, r2
    8a40:	6081      	str	r1, [r0, #8]
    8a42:	bd10      	pop	{r4, pc}
    8a44:	4620      	mov	r0, r4
    8a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8a4a:	f007 bb48 	b.w	100de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8a4e:	f240 715b 	movw	r1, #1883	; 0x75b
    8a52:	2030      	movs	r0, #48	; 0x30
    8a54:	f7fc fd44 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a58:	2000014c 	.word	0x2000014c

00008a5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    8a5c:	b570      	push	{r4, r5, r6, lr}
    8a5e:	460c      	mov	r4, r1
    8a60:	4605      	mov	r5, r0
    8a62:	b112      	cbz	r2, 8a6a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    8a64:	f240 7185 	movw	r1, #1925	; 0x785
    8a68:	e010      	b.n	8a8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    8a6a:	f003 fb7b 	bl	c164 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8a6e:	4601      	mov	r1, r0
    8a70:	2200      	movs	r2, #0
    8a72:	4620      	mov	r0, r4
    8a74:	f007 fc29 	bl	102ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3da>
    8a78:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
    8a7c:	462a      	mov	r2, r5
    8a7e:	4905      	ldr	r1, [pc, #20]	; (8a94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    8a80:	f7fa fe5a 	bl	3738 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    8a84:	2800      	cmp	r0, #0
    8a86:	d104      	bne.n	8a92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    8a88:	f240 716e 	movw	r1, #1902	; 0x76e
    8a8c:	2030      	movs	r0, #48	; 0x30
    8a8e:	f7fc fd27 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a92:	bd70      	pop	{r4, r5, r6, pc}
    8a94:	00010403 	.word	0x00010403
    8a98:	b510      	push	{r4, lr}
    8a9a:	280c      	cmp	r0, #12
    8a9c:	d304      	bcc.n	8aa8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    8a9e:	f44f 7157 	mov.w	r1, #860	; 0x35c
    8aa2:	2006      	movs	r0, #6
    8aa4:	f7fc fd1c 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8aa8:	4901      	ldr	r1, [pc, #4]	; (8ab0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    8aaa:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8aae:	bd10      	pop	{r4, pc}
    8ab0:	00010626 	.word	0x00010626
    8ab4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8ab6:	4c18      	ldr	r4, [pc, #96]	; (8b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    8ab8:	2001      	movs	r0, #1
    8aba:	7060      	strb	r0, [r4, #1]
    8abc:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8ac0:	e00b      	b.n	8ada <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    8ac2:	2100      	movs	r1, #0
    8ac4:	f005 feb4 	bl	e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8ac8:	0006      	movs	r6, r0
    8aca:	d010      	beq.n	8aee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    8acc:	f896 024c 	ldrb.w	r0, [r6, #588]	; 0x24c
    8ad0:	f7fa fe64 	bl	379c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8ad4:	4630      	mov	r0, r6
    8ad6:	f007 fbeb 	bl	102b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
    8ada:	4669      	mov	r1, sp
    8adc:	2000      	movs	r0, #0
    8ade:	f005 feb1 	bl	e844 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8ae2:	b180      	cbz	r0, 8b06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8ae4:	f240 1103 	movw	r1, #259	; 0x103
    8ae8:	2030      	movs	r0, #48	; 0x30
    8aea:	f7fc fcf9 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8aee:	f240 1123 	movw	r1, #291	; 0x123
    8af2:	e7f9      	b.n	8ae8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    8af4:	9802      	ldr	r0, [sp, #8]
    8af6:	b130      	cbz	r0, 8b06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8af8:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
    8afc:	b119      	cbz	r1, 8b06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8afe:	8800      	ldrh	r0, [r0, #0]
    8b00:	42a8      	cmp	r0, r5
    8b02:	d1de      	bne.n	8ac2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    8b04:	e004      	b.n	8b10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    8b06:	4668      	mov	r0, sp
    8b08:	f7fc ff2e 	bl	5968 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8b0c:	2800      	cmp	r0, #0
    8b0e:	d0f1      	beq.n	8af4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    8b10:	2000      	movs	r0, #0
    8b12:	7060      	strb	r0, [r4, #1]
    8b14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8b16:	0000      	.short	0x0000
    8b18:	2000014c 	.word	0x2000014c
    8b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b20:	4604      	mov	r4, r0
    8b22:	4839      	ldr	r0, [pc, #228]	; (8c08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>)
    8b24:	461e      	mov	r6, r3
    8b26:	4690      	mov	r8, r2
    8b28:	7880      	ldrb	r0, [r0, #2]
    8b2a:	4689      	mov	r9, r1
    8b2c:	2500      	movs	r5, #0
    8b2e:	2800      	cmp	r0, #0
    8b30:	d063      	beq.n	8bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8b32:	f7fc f931 	bl	4d98 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8b36:	b3e0      	cbz	r0, 8bb2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8b38:	f8b4 01f0 	ldrh.w	r0, [r4, #496]	; 0x1f0
    8b3c:	2802      	cmp	r0, #2
    8b3e:	d35c      	bcc.n	8bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8b40:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8b44:	2802      	cmp	r0, #2
    8b46:	d058      	beq.n	8bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8b48:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
    8b4c:	bb88      	cbnz	r0, 8bb2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x156>
    8b4e:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    8b52:	f7ff ffa1 	bl	8a98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8b56:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    8b5a:	b281      	uxth	r1, r0
    8b5c:	8031      	strh	r1, [r6, #0]
    8b5e:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8b62:	2700      	movs	r7, #0
    8b64:	2801      	cmp	r0, #1
    8b66:	d00d      	beq.n	8b84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x128>
    8b68:	6920      	ldr	r0, [r4, #16]
    8b6a:	f004 fd0e 	bl	d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8b6e:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    8b72:	4442      	add	r2, r8
    8b74:	eba2 0109 	sub.w	r1, r2, r9
    8b78:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8b7c:	1a82      	subs	r2, r0, r2
    8b7e:	fb01 7502 	mla	r5, r1, r2, r7
    8b82:	e035      	b.n	8bf0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x194>
    8b84:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    8b88:	2803      	cmp	r0, #3
    8b8a:	d039      	beq.n	8c00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    8b8c:	2101      	movs	r1, #1
    8b8e:	2000      	movs	r0, #0
    8b90:	f006 f9ae 	bl	eef0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8b94:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8b96:	1847      	adds	r7, r0, r1
    8b98:	8831      	ldrh	r1, [r6, #0]
    8b9a:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8b9e:	f004 fcf4 	bl	d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8ba2:	f8d4 21f8 	ldr.w	r2, [r4, #504]	; 0x1f8
    8ba6:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    8baa:	1a82      	subs	r2, r0, r2
    8bac:	fb01 5502 	mla	r5, r1, r2, r5
    8bb0:	e000      	b.n	8bb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x158>
    8bb2:	e022      	b.n	8bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19e>
    8bb4:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    8bb8:	8831      	ldrh	r1, [r6, #0]
    8bba:	4638      	mov	r0, r7
    8bbc:	f004 fce5 	bl	d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8bc0:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8bc4:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8bc8:	1a41      	subs	r1, r0, r1
    8bca:	440d      	add	r5, r1
    8bcc:	8831      	ldrh	r1, [r6, #0]
    8bce:	6920      	ldr	r0, [r4, #16]
    8bd0:	f004 fcdb 	bl	d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8bd4:	f8b4 21de 	ldrh.w	r2, [r4, #478]	; 0x1de
    8bd8:	4442      	add	r2, r8
    8bda:	eba2 0109 	sub.w	r1, r2, r9
    8bde:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    8be2:	1a89      	subs	r1, r1, r2
    8be4:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8be8:	1a82      	subs	r2, r0, r2
    8bea:	1e49      	subs	r1, r1, #1
    8bec:	fb01 5502 	mla	r5, r1, r2, r5
    8bf0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8bf4:	2001      	movs	r0, #1
    8bf6:	f884 021a 	strb.w	r0, [r4, #538]	; 0x21a
    8bfa:	4628      	mov	r0, r5
    8bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c00:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8c04:	e7c6      	b.n	8b94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x138>
    8c06:	0000      	.short	0x0000
    8c08:	2000014c 	.word	0x2000014c
    8c0c:	b538      	push	{r3, r4, r5, lr}
    8c0e:	2500      	movs	r5, #0
    8c10:	4604      	mov	r4, r0
    8c12:	2901      	cmp	r1, #1
    8c14:	d102      	bne.n	8c1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    8c16:	4810      	ldr	r0, [pc, #64]	; (8c58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    8c18:	7840      	ldrb	r0, [r0, #1]
    8c1a:	b170      	cbz	r0, 8c3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1de>
    8c1c:	2004      	movs	r0, #4
    8c1e:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8c22:	bf00      	nop
    8c24:	f007 fa69 	bl	100fa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
    8c28:	f8a4 524a 	strh.w	r5, [r4, #586]	; 0x24a
    8c2c:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8c30:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
    8c34:	f884 5219 	strb.w	r5, [r4, #537]	; 0x219
    8c38:	bd38      	pop	{r3, r4, r5, pc}
    8c3a:	9500      	str	r5, [sp, #0]
    8c3c:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    8c40:	2301      	movs	r3, #1
    8c42:	2200      	movs	r2, #0
    8c44:	4620      	mov	r0, r4
    8c46:	f000 f809 	bl	8c5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    8c4a:	2800      	cmp	r0, #0
    8c4c:	d0ea      	beq.n	8c24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c8>
    8c4e:	f240 61cf 	movw	r1, #1743	; 0x6cf
    8c52:	2030      	movs	r0, #48	; 0x30
    8c54:	f7fc fc44 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c58:	2000014c 	.word	0x2000014c
    8c5c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c60:	b08b      	sub	sp, #44	; 0x2c
    8c62:	4604      	mov	r4, r0
    8c64:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    8c68:	4699      	mov	r9, r3
    8c6a:	460f      	mov	r7, r1
    8c6c:	9307      	str	r3, [sp, #28]
    8c6e:	9005      	str	r0, [sp, #20]
    8c70:	f008 fc3b 	bl	114ea <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8c74:	4605      	mov	r5, r0
    8c76:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
    8c7a:	f7ff ff0d 	bl	8a98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8c7e:	4428      	add	r0, r5
    8c80:	f8ad 0004 	strh.w	r0, [sp, #4]
    8c84:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8c88:	280d      	cmp	r0, #13
    8c8a:	d004      	beq.n	8c96 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23a>
    8c8c:	2000      	movs	r0, #0
    8c8e:	9008      	str	r0, [sp, #32]
    8c90:	980d      	ldr	r0, [sp, #52]	; 0x34
    8c92:	b110      	cbz	r0, 8c9a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x23e>
    8c94:	e02e      	b.n	8cf4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8c96:	2001      	movs	r0, #1
    8c98:	e7f9      	b.n	8c8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    8c9a:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8c9e:	2803      	cmp	r0, #3
    8ca0:	d128      	bne.n	8cf4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8ca2:	9808      	ldr	r0, [sp, #32]
    8ca4:	b330      	cbz	r0, 8cf4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8ca6:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    8caa:	42b8      	cmp	r0, r7
    8cac:	d122      	bne.n	8cf4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x298>
    8cae:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8cb2:	f8c4 01f8 	str.w	r0, [r4, #504]	; 0x1f8
    8cb6:	6920      	ldr	r0, [r4, #16]
    8cb8:	f8c4 01fc 	str.w	r0, [r4, #508]	; 0x1fc
    8cbc:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    8cc0:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8cc4:	4408      	add	r0, r1
    8cc6:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8cca:	4620      	mov	r0, r4
    8ccc:	f007 fccb 	bl	10666 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8cd0:	f8d4 0278 	ldr.w	r0, [r4, #632]	; 0x278
    8cd4:	6260      	str	r0, [r4, #36]	; 0x24
    8cd6:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    8cda:	8420      	strh	r0, [r4, #32]
    8cdc:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    8ce0:	6120      	str	r0, [r4, #16]
    8ce2:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
    8ce6:	8320      	strh	r0, [r4, #24]
    8ce8:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
    8cec:	8360      	strh	r0, [r4, #26]
    8cee:	2002      	movs	r0, #2
    8cf0:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8cf4:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8cf8:	f504 7508 	add.w	r5, r4, #544	; 0x220
    8cfc:	1a38      	subs	r0, r7, r0
    8cfe:	fa0f fa80 	sxth.w	sl, r0
    8d02:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    8d06:	1a38      	subs	r0, r7, r0
    8d08:	fa0f f880 	sxth.w	r8, r0
    8d0c:	f1b8 0f00 	cmp.w	r8, #0
    8d10:	da08      	bge.n	8d24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c8>
    8d12:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
    8d16:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
    8d1a:	46d0      	mov	r8, sl
    8d1c:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    8d20:	2001      	movs	r0, #1
    8d22:	9007      	str	r0, [sp, #28]
    8d24:	ab01      	add	r3, sp, #4
    8d26:	4652      	mov	r2, sl
    8d28:	4641      	mov	r1, r8
    8d2a:	4620      	mov	r0, r4
    8d2c:	f7ff fef6 	bl	8b1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8d30:	9004      	str	r0, [sp, #16]
    8d32:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8d36:	f8df b334 	ldr.w	fp, [pc, #820]	; 906c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    8d3a:	b140      	cbz	r0, 8d4e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f2>
    8d3c:	2801      	cmp	r0, #1
    8d3e:	d07d      	beq.n	8e3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e0>
    8d40:	2802      	cmp	r0, #2
    8d42:	d051      	beq.n	8de8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38c>
    8d44:	2803      	cmp	r0, #3
    8d46:	d07a      	beq.n	8e3e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e2>
    8d48:	f240 514b 	movw	r1, #1355	; 0x54b
    8d4c:	e18a      	b.n	9064 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8d4e:	2101      	movs	r1, #1
    8d50:	2000      	movs	r0, #0
    8d52:	f006 f8cd 	bl	eef0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8d56:	4606      	mov	r6, r0
    8d58:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8d5a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8d5e:	4430      	add	r0, r6
    8d60:	f004 fc13 	bl	d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8d64:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8d68:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8d6c:	6920      	ldr	r0, [r4, #16]
    8d6e:	f004 fc0c 	bl	d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8d72:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8d76:	a907      	add	r1, sp, #28
    8d78:	a806      	add	r0, sp, #24
    8d7a:	f003 f95b 	bl	c034 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    8d7e:	e9d4 0190 	ldrd	r0, r1, [r4, #576]	; 0x240
    8d82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    8d86:	f7fa ffe5 	bl	3d54 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    8d8a:	4682      	mov	sl, r0
    8d8c:	4620      	mov	r0, r4
    8d8e:	f007 f9a6 	bl	100de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8d92:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8d96:	f8d4 8250 	ldr.w	r8, [r4, #592]	; 0x250
    8d9a:	f003 fad9 	bl	c350 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8d9e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8da2:	4401      	add	r1, r0
    8da4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8da8:	fbb1 f0f0 	udiv	r0, r1, r0
    8dac:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8dae:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
    8db2:	4431      	add	r1, r6
    8db4:	1a08      	subs	r0, r1, r0
    8db6:	1a81      	subs	r1, r0, r2
    8db8:	4441      	add	r1, r8
    8dba:	3920      	subs	r1, #32
    8dbc:	eba1 060a 	sub.w	r6, r1, sl
    8dc0:	0050      	lsls	r0, r2, #1
    8dc2:	8c21      	ldrh	r1, [r4, #32]
    8dc4:	3060      	adds	r0, #96	; 0x60
    8dc6:	4401      	add	r1, r0
    8dc8:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8dcc:	f007 f9f7 	bl	101be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    8dd0:	3022      	adds	r0, #34	; 0x22
    8dd2:	f8cb 0010 	str.w	r0, [fp, #16]
    8dd6:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    8dda:	1a30      	subs	r0, r6, r0
    8ddc:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    8de0:	d258      	bcs.n	8e94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x438>
    8de2:	f240 41e4 	movw	r1, #1252	; 0x4e4
    8de6:	e13d      	b.n	9064 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8de8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8dea:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8dee:	4408      	add	r0, r1
    8df0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8df4:	f004 fbc9 	bl	d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8df8:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
    8dfc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8e00:	6920      	ldr	r0, [r4, #16]
    8e02:	f004 fbc2 	bl	d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8e06:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
    8e0a:	4620      	mov	r0, r4
    8e0c:	f007 f967 	bl	100de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    8e10:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    8e14:	bb10      	cbnz	r0, 8e5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    8e16:	f1b9 0f00 	cmp.w	r9, #0
    8e1a:	d01f      	beq.n	8e5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x400>
    8e1c:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
    8e20:	4640      	mov	r0, r8
    8e22:	f003 fa95 	bl	c350 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8e26:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8e2a:	4401      	add	r1, r0
    8e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8e30:	fbb1 f0f0 	udiv	r0, r1, r0
    8e34:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8e38:	4408      	add	r0, r1
    8e3a:	e001      	b.n	8e40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3e4>
    8e3c:	e02b      	b.n	8e96 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x43a>
    8e3e:	e047      	b.n	8ed0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x474>
    8e40:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8e42:	f8d4 11fc 	ldr.w	r1, [r4, #508]	; 0x1fc
    8e46:	4411      	add	r1, r2
    8e48:	1a0e      	subs	r6, r1, r0
    8e4a:	4640      	mov	r0, r8
    8e4c:	f003 fa54 	bl	c2f8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8e50:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8e54:	1a08      	subs	r0, r1, r0
    8e56:	4406      	add	r6, r0
    8e58:	3e20      	subs	r6, #32
    8e5a:	e006      	b.n	8e6a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x40e>
    8e5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8e5e:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    8e62:	4408      	add	r0, r1
    8e64:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
    8e68:	1a46      	subs	r6, r0, r1
    8e6a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    8e6e:	f8d4 11f8 	ldr.w	r1, [r4, #504]	; 0x1f8
    8e72:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    8e76:	fb01 0002 	mla	r0, r1, r2, r0
    8e7a:	0040      	lsls	r0, r0, #1
    8e7c:	8c21      	ldrh	r1, [r4, #32]
    8e7e:	3060      	adds	r0, #96	; 0x60
    8e80:	4401      	add	r1, r0
    8e82:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8e86:	f007 f99a 	bl	101be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    8e8a:	f8cb 0010 	str.w	r0, [fp, #16]
    8e8e:	2001      	movs	r0, #1
    8e90:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
    8e94:	e061      	b.n	8f5a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4fe>
    8e96:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
    8e9a:	6920      	ldr	r0, [r4, #16]
    8e9c:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8ea0:	1a86      	subs	r6, r0, r2
    8ea2:	eb01 000a 	add.w	r0, r1, sl
    8ea6:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    8eaa:	f8d4 c1f8 	ldr.w	ip, [r4, #504]	; 0x1f8
    8eae:	1a40      	subs	r0, r0, r1
    8eb0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
    8eb4:	1e40      	subs	r0, r0, #1
    8eb6:	fb0c 3101 	mla	r1, ip, r1, r3
    8eba:	fb00 1002 	mla	r0, r0, r2, r1
    8ebe:	0040      	lsls	r0, r0, #1
    8ec0:	8c21      	ldrh	r1, [r4, #32]
    8ec2:	3060      	adds	r0, #96	; 0x60
    8ec4:	4401      	add	r1, r0
    8ec6:	fb06 f608 	mul.w	r6, r6, r8
    8eca:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8ece:	e040      	b.n	8f52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    8ed0:	6920      	ldr	r0, [r4, #16]
    8ed2:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    8ed6:	fb00 f008 	mul.w	r0, r0, r8
    8eda:	fb08 0611 	mls	r6, r8, r1, r0
    8ede:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    8ee2:	2824      	cmp	r0, #36	; 0x24
    8ee4:	d003      	beq.n	8eee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x492>
    8ee6:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8eea:	2824      	cmp	r0, #36	; 0x24
    8eec:	d109      	bne.n	8f02 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8eee:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    8ef2:	1a38      	subs	r0, r7, r0
    8ef4:	b200      	sxth	r0, r0
    8ef6:	2800      	cmp	r0, #0
    8ef8:	db03      	blt.n	8f02 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8efa:	f894 0277 	ldrb.w	r0, [r4, #631]	; 0x277
    8efe:	b100      	cbz	r0, 8f02 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4a6>
    8f00:	9005      	str	r0, [sp, #20]
    8f02:	9807      	ldr	r0, [sp, #28]
    8f04:	b1d8      	cbz	r0, 8f3e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    8f06:	f8b4 01de 	ldrh.w	r0, [r4, #478]	; 0x1de
    8f0a:	b9c0      	cbnz	r0, 8f3e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4e2>
    8f0c:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    8f10:	2800      	cmp	r0, #0
    8f12:	d07d      	beq.n	9010 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b4>
    8f14:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8f18:	f003 fa1a 	bl	c350 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8f1c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8f20:	4401      	add	r1, r0
    8f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8f26:	fbb1 f0f0 	udiv	r0, r1, r0
    8f2a:	1a36      	subs	r6, r6, r0
    8f2c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8f30:	f003 f9e2 	bl	c2f8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8f34:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8f38:	1a08      	subs	r0, r1, r0
    8f3a:	4406      	add	r6, r0
    8f3c:	3e20      	subs	r6, #32
    8f3e:	f8b4 11de 	ldrh.w	r1, [r4, #478]	; 0x1de
    8f42:	eb01 000a 	add.w	r0, r1, sl
    8f46:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    8f4a:	4348      	muls	r0, r1
    8f4c:	0041      	lsls	r1, r0, #1
    8f4e:	3160      	adds	r1, #96	; 0x60
    8f50:	9805      	ldr	r0, [sp, #20]
    8f52:	f007 f934 	bl	101be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ce>
    8f56:	f8cb 0010 	str.w	r0, [fp, #16]
    8f5a:	9804      	ldr	r0, [sp, #16]
    8f5c:	f8db 2010 	ldr.w	r2, [fp, #16]
    8f60:	1a31      	subs	r1, r6, r0
    8f62:	f8d4 620c 	ldr.w	r6, [r4, #524]	; 0x20c
    8f66:	6920      	ldr	r0, [r4, #16]
    8f68:	1b80      	subs	r0, r0, r6
    8f6a:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    8f6e:	f8cb 0014 	str.w	r0, [fp, #20]
    8f72:	4282      	cmp	r2, r0
    8f74:	d800      	bhi.n	8f78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x51c>
    8f76:	4610      	mov	r0, r2
    8f78:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    8f7c:	2600      	movs	r6, #0
    8f7e:	702e      	strb	r6, [r5, #0]
    8f80:	2064      	movs	r0, #100	; 0x64
    8f82:	8128      	strh	r0, [r5, #8]
    8f84:	e9d4 2090 	ldrd	r2, r0, [r4, #576]	; 0x240
    8f88:	1851      	adds	r1, r2, r1
    8f8a:	4170      	adcs	r0, r6
    8f8c:	e9c5 1004 	strd	r1, r0, [r5, #16]
    8f90:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8f94:	f006 fc34 	bl	f800 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8f98:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
    8f9c:	4408      	add	r0, r1
    8f9e:	6068      	str	r0, [r5, #4]
    8fa0:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    8fa4:	e9c4 0190 	strd	r0, r1, [r4, #576]	; 0x240
    8fa8:	f8a4 7248 	strh.w	r7, [r4, #584]	; 0x248
    8fac:	72ae      	strb	r6, [r5, #10]
    8fae:	f8b4 01c8 	ldrh.w	r0, [r4, #456]	; 0x1c8
    8fb2:	1bc0      	subs	r0, r0, r7
    8fb4:	b200      	sxth	r0, r0
    8fb6:	2800      	cmp	r0, #0
    8fb8:	dd01      	ble.n	8fbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x562>
    8fba:	2002      	movs	r0, #2
    8fbc:	72a8      	strb	r0, [r5, #10]
    8fbe:	9808      	ldr	r0, [sp, #32]
    8fc0:	b338      	cbz	r0, 9012 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b6>
    8fc2:	f1b9 0f00 	cmp.w	r9, #0
    8fc6:	d01c      	beq.n	9002 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    8fc8:	f8b4 11f0 	ldrh.w	r1, [r4, #496]	; 0x1f0
    8fcc:	b3f1      	cbz	r1, 904c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f0>
    8fce:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    8fd2:	bf00      	nop
    8fd4:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    8fd8:	f894 21f4 	ldrb.w	r2, [r4, #500]	; 0x1f4
    8fdc:	1c40      	adds	r0, r0, #1
    8fde:	4342      	muls	r2, r0
    8fe0:	428a      	cmp	r2, r1
    8fe2:	d20e      	bcs.n	9002 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    8fe4:	7aa8      	ldrb	r0, [r5, #10]
    8fe6:	b160      	cbz	r0, 9002 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    8fe8:	72ae      	strb	r6, [r5, #10]
    8fea:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    8fee:	1c40      	adds	r0, r0, #1
    8ff0:	f8a4 01f2 	strh.w	r0, [r4, #498]	; 0x1f2
    8ff4:	f7fe fce4 	bl	79c0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    8ff8:	f000 0007 	and.w	r0, r0, #7
    8ffc:	1c40      	adds	r0, r0, #1
    8ffe:	f884 01f4 	strb.w	r0, [r4, #500]	; 0x1f4
    9002:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    9006:	4629      	mov	r1, r5
    9008:	f007 f8eb 	bl	101e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
    900c:	b340      	cbz	r0, 9060 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    900e:	e001      	b.n	9014 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b8>
    9010:	e009      	b.n	9026 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ca>
    9012:	e00b      	b.n	902c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    9014:	980d      	ldr	r0, [sp, #52]	; 0x34
    9016:	f080 0001 	eor.w	r0, r0, #1
    901a:	f884 0218 	strb.w	r0, [r4, #536]	; 0x218
    901e:	2000      	movs	r0, #0
    9020:	b00f      	add	sp, #60	; 0x3c
    9022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9026:	f240 5136 	movw	r1, #1334	; 0x536
    902a:	e01b      	b.n	9064 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    902c:	f1b9 0f00 	cmp.w	r9, #0
    9030:	d1ca      	bne.n	8fc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    9032:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    9036:	2800      	cmp	r0, #0
    9038:	d0e3      	beq.n	9002 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    903a:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    903e:	6920      	ldr	r0, [r4, #16]
    9040:	1a41      	subs	r1, r0, r1
    9042:	4628      	mov	r0, r5
    9044:	f005 ff66 	bl	ef14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9048:	0400      	lsls	r0, r0, #16
    904a:	e000      	b.n	904e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    904c:	e006      	b.n	905c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    904e:	0c00      	lsrs	r0, r0, #16
    9050:	d0d7      	beq.n	9002 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a6>
    9052:	9918      	ldr	r1, [sp, #96]	; 0x60
    9054:	b101      	cbz	r1, 9058 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    9056:	8008      	strh	r0, [r1, #0]
    9058:	2001      	movs	r0, #1
    905a:	e7e1      	b.n	9020 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    905c:	2000      	movs	r0, #0
    905e:	e7b9      	b.n	8fd4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x578>
    9060:	f240 5194 	movw	r1, #1428	; 0x594
    9064:	2030      	movs	r0, #48	; 0x30
    9066:	f7fc fa3b 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    906a:	0000      	.short	0x0000
    906c:	2000014c 	.word	0x2000014c
    9070:	b570      	push	{r4, r5, r6, lr}
    9072:	4604      	mov	r4, r0
    9074:	f004 fa55 	bl	d522 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    9078:	2864      	cmp	r0, #100	; 0x64
    907a:	d901      	bls.n	9080 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    907c:	4605      	mov	r5, r0
    907e:	e000      	b.n	9082 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x626>
    9080:	2564      	movs	r5, #100	; 0x64
    9082:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    9086:	2128      	movs	r1, #40	; 0x28
    9088:	f006 ff99 	bl	ffbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    908c:	4428      	add	r0, r5
    908e:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    9092:	f500 7010 	add.w	r0, r0, #576	; 0x240
    9096:	180e      	adds	r6, r1, r0
    9098:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    909c:	2128      	movs	r1, #40	; 0x28
    909e:	f006 ff8e 	bl	ffbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    90a2:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    90a6:	4620      	mov	r0, r4
    90a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    90aa:	f006 fb46 	bl	f73a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    90ae:	4605      	mov	r5, r0
    90b0:	4632      	mov	r2, r6
    90b2:	4620      	mov	r0, r4
    90b4:	6921      	ldr	r1, [r4, #16]
    90b6:	f006 fb40 	bl	f73a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    90ba:	4907      	ldr	r1, [pc, #28]	; (90d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    90bc:	4285      	cmp	r5, r0
    90be:	6088      	str	r0, [r1, #8]
    90c0:	d200      	bcs.n	90c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    90c2:	4628      	mov	r0, r5
    90c4:	6048      	str	r0, [r1, #4]
    90c6:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    90ca:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    90ce:	60c8      	str	r0, [r1, #12]
    90d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90d4:	f7fa bd72 	b.w	3bbc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    90d8:	2000014c 	.word	0x2000014c

000090dc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    90dc:	4806      	ldr	r0, [pc, #24]	; (90f8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    90de:	4905      	ldr	r1, [pc, #20]	; (90f4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    90e0:	6501      	str	r1, [r0, #80]	; 0x50
    90e2:	4906      	ldr	r1, [pc, #24]	; (90fc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    90e4:	6541      	str	r1, [r0, #84]	; 0x54
    90e6:	4807      	ldr	r0, [pc, #28]	; (9104 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    90e8:	4905      	ldr	r1, [pc, #20]	; (9100 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    90ea:	6501      	str	r1, [r0, #80]	; 0x50
    90ec:	4906      	ldr	r1, [pc, #24]	; (9108 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    90ee:	6541      	str	r1, [r0, #84]	; 0x54
    90f0:	4770      	bx	lr
    90f2:	0000      	.short	0x0000
    90f4:	0000a4fd 	.word	0x0000a4fd
    90f8:	2000017c 	.word	0x2000017c
    90fc:	0000a5e1 	.word	0x0000a5e1
    9100:	0000ac9d 	.word	0x0000ac9d
    9104:	20000214 	.word	0x20000214
    9108:	0000accd 	.word	0x0000accd

0000910c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    910c:	481e      	ldr	r0, [pc, #120]	; (9188 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    910e:	491d      	ldr	r1, [pc, #116]	; (9184 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    9110:	6081      	str	r1, [r0, #8]
    9112:	491e      	ldr	r1, [pc, #120]	; (918c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    9114:	6041      	str	r1, [r0, #4]
    9116:	491e      	ldr	r1, [pc, #120]	; (9190 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    9118:	6001      	str	r1, [r0, #0]
    911a:	491e      	ldr	r1, [pc, #120]	; (9194 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    911c:	6281      	str	r1, [r0, #40]	; 0x28
    911e:	491e      	ldr	r1, [pc, #120]	; (9198 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    9120:	62c1      	str	r1, [r0, #44]	; 0x2c
    9122:	491e      	ldr	r1, [pc, #120]	; (919c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    9124:	60c1      	str	r1, [r0, #12]
    9126:	491e      	ldr	r1, [pc, #120]	; (91a0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    9128:	6181      	str	r1, [r0, #24]
    912a:	491e      	ldr	r1, [pc, #120]	; (91a4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    912c:	6301      	str	r1, [r0, #48]	; 0x30
    912e:	491e      	ldr	r1, [pc, #120]	; (91a8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    9130:	6201      	str	r1, [r0, #32]
    9132:	491e      	ldr	r1, [pc, #120]	; (91ac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    9134:	64c1      	str	r1, [r0, #76]	; 0x4c
    9136:	491e      	ldr	r1, [pc, #120]	; (91b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    9138:	6481      	str	r1, [r0, #72]	; 0x48
    913a:	491e      	ldr	r1, [pc, #120]	; (91b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    913c:	6441      	str	r1, [r0, #68]	; 0x44
    913e:	491e      	ldr	r1, [pc, #120]	; (91b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    9140:	6341      	str	r1, [r0, #52]	; 0x34
    9142:	491e      	ldr	r1, [pc, #120]	; (91bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    9144:	61c1      	str	r1, [r0, #28]
    9146:	491e      	ldr	r1, [pc, #120]	; (91c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    9148:	6241      	str	r1, [r0, #36]	; 0x24
    914a:	481f      	ldr	r0, [pc, #124]	; (91c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    914c:	491d      	ldr	r1, [pc, #116]	; (91c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    914e:	6081      	str	r1, [r0, #8]
    9150:	491e      	ldr	r1, [pc, #120]	; (91cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    9152:	61c1      	str	r1, [r0, #28]
    9154:	491e      	ldr	r1, [pc, #120]	; (91d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    9156:	6241      	str	r1, [r0, #36]	; 0x24
    9158:	491e      	ldr	r1, [pc, #120]	; (91d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    915a:	62c1      	str	r1, [r0, #44]	; 0x2c
    915c:	491e      	ldr	r1, [pc, #120]	; (91d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    915e:	6101      	str	r1, [r0, #16]
    9160:	491e      	ldr	r1, [pc, #120]	; (91dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    9162:	6141      	str	r1, [r0, #20]
    9164:	491e      	ldr	r1, [pc, #120]	; (91e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    9166:	6441      	str	r1, [r0, #68]	; 0x44
    9168:	491e      	ldr	r1, [pc, #120]	; (91e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    916a:	6341      	str	r1, [r0, #52]	; 0x34
    916c:	491e      	ldr	r1, [pc, #120]	; (91e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    916e:	6181      	str	r1, [r0, #24]
    9170:	491e      	ldr	r1, [pc, #120]	; (91ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    9172:	6301      	str	r1, [r0, #48]	; 0x30
    9174:	491e      	ldr	r1, [pc, #120]	; (91f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    9176:	6481      	str	r1, [r0, #72]	; 0x48
    9178:	491e      	ldr	r1, [pc, #120]	; (91f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    917a:	64c1      	str	r1, [r0, #76]	; 0x4c
    917c:	491e      	ldr	r1, [pc, #120]	; (91f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    917e:	6381      	str	r1, [r0, #56]	; 0x38
    9180:	4770      	bx	lr
    9182:	0000      	.short	0x0000
    9184:	0000a9c9 	.word	0x0000a9c9
    9188:	2000017c 	.word	0x2000017c
    918c:	0000a221 	.word	0x0000a221
    9190:	0000a285 	.word	0x0000a285
    9194:	0000a6b5 	.word	0x0000a6b5
    9198:	0000a6f9 	.word	0x0000a6f9
    919c:	0000a339 	.word	0x0000a339
    91a0:	0000a9a1 	.word	0x0000a9a1
    91a4:	0000aad9 	.word	0x0000aad9
    91a8:	0000a3f1 	.word	0x0000a3f1
    91ac:	0000a685 	.word	0x0000a685
    91b0:	0000a659 	.word	0x0000a659
    91b4:	0000a949 	.word	0x0000a949
    91b8:	0000a979 	.word	0x0000a979
    91bc:	0000aa01 	.word	0x0000aa01
    91c0:	0000a445 	.word	0x0000a445
    91c4:	0000aef5 	.word	0x0000aef5
    91c8:	20000214 	.word	0x20000214
    91cc:	0000af1d 	.word	0x0000af1d
    91d0:	0000ac6d 	.word	0x0000ac6d
    91d4:	0000ad45 	.word	0x0000ad45
    91d8:	0000ac41 	.word	0x0000ac41
    91dc:	0000ae49 	.word	0x0000ae49
    91e0:	0000adc9 	.word	0x0000adc9
    91e4:	0000adf5 	.word	0x0000adf5
    91e8:	0000ae6d 	.word	0x0000ae6d
    91ec:	0000af79 	.word	0x0000af79
    91f0:	0000acfd 	.word	0x0000acfd
    91f4:	0000ad2d 	.word	0x0000ad2d
    91f8:	0000ae19 	.word	0x0000ae19

000091fc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    91fc:	4806      	ldr	r0, [pc, #24]	; (9218 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    91fe:	4905      	ldr	r1, [pc, #20]	; (9214 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    9200:	6581      	str	r1, [r0, #88]	; 0x58
    9202:	4906      	ldr	r1, [pc, #24]	; (921c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    9204:	6601      	str	r1, [r0, #96]	; 0x60
    9206:	4807      	ldr	r0, [pc, #28]	; (9224 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    9208:	4905      	ldr	r1, [pc, #20]	; (9220 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    920a:	6581      	str	r1, [r0, #88]	; 0x58
    920c:	4906      	ldr	r1, [pc, #24]	; (9228 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    920e:	65c1      	str	r1, [r0, #92]	; 0x5c
    9210:	4770      	bx	lr
    9212:	0000      	.short	0x0000
    9214:	0000a719 	.word	0x0000a719
    9218:	2000017c 	.word	0x2000017c
    921c:	0000a7f9 	.word	0x0000a7f9
    9220:	0000ad71 	.word	0x0000ad71
    9224:	20000214 	.word	0x20000214
    9228:	0000ada1 	.word	0x0000ada1

0000922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    922e:	4c7c      	ldr	r4, [pc, #496]	; (9420 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    9230:	2101      	movs	r1, #1
    9232:	f1a4 0610 	sub.w	r6, r4, #16
    9236:	7021      	strb	r1, [r4, #0]
    9238:	2500      	movs	r5, #0
    923a:	6060      	str	r0, [r4, #4]
    923c:	8075      	strh	r5, [r6, #2]
    923e:	7075      	strb	r5, [r6, #1]
    9240:	7035      	strb	r5, [r6, #0]
    9242:	f880 11d3 	strb.w	r1, [r0, #467]	; 0x1d3
    9246:	8800      	ldrh	r0, [r0, #0]
    9248:	f7fc fd88 	bl	5d5c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    924c:	b180      	cbz	r0, 9270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    924e:	6860      	ldr	r0, [r4, #4]
    9250:	8800      	ldrh	r0, [r0, #0]
    9252:	f7fc ffd7 	bl	6204 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    9256:	6860      	ldr	r0, [r4, #4]
    9258:	8800      	ldrh	r0, [r0, #0]
    925a:	f7fc ff7b 	bl	6154 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    925e:	6860      	ldr	r0, [r4, #4]
    9260:	f8b0 11ca 	ldrh.w	r1, [r0, #458]	; 0x1ca
    9264:	b1c9      	cbz	r1, 929a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    9266:	3078      	adds	r0, #120	; 0x78
    9268:	f007 fa44 	bl	106f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    926c:	b118      	cbz	r0, 9276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    926e:	e014      	b.n	929a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    9270:	f640 3166 	movw	r1, #2918	; 0xb66
    9274:	e06c      	b.n	9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    9276:	6860      	ldr	r0, [r4, #4]
    9278:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    927c:	f88d 1000 	strb.w	r1, [sp]
    9280:	9900      	ldr	r1, [sp, #0]
    9282:	9100      	str	r1, [sp, #0]
    9284:	f89d 1000 	ldrb.w	r1, [sp]
    9288:	b139      	cbz	r1, 929a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    928a:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    928e:	2301      	movs	r3, #1
    9290:	4619      	mov	r1, r3
    9292:	3078      	adds	r0, #120	; 0x78
    9294:	f005 fd84 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9298:	b180      	cbz	r0, 92bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    929a:	6860      	ldr	r0, [r4, #4]
    929c:	3078      	adds	r0, #120	; 0x78
    929e:	f007 fa29 	bl	106f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    92a2:	b128      	cbz	r0, 92b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    92a4:	6860      	ldr	r0, [r4, #4]
    92a6:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    92aa:	bf00      	nop
    92ac:	f000 fbb2 	bl	9a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    92b0:	6860      	ldr	r0, [r4, #4]
    92b2:	f890 11d5 	ldrb.w	r1, [r0, #469]	; 0x1d5
    92b6:	b189      	cbz	r1, 92dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    92b8:	80b5      	strh	r5, [r6, #4]
    92ba:	e01e      	b.n	92fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    92bc:	6860      	ldr	r0, [r4, #4]
    92be:	f8a0 50b8 	strh.w	r5, [r0, #184]	; 0xb8
    92c2:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    92c6:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    92ca:	2100      	movs	r1, #0
    92cc:	2002      	movs	r0, #2
    92ce:	f000 fe53 	bl	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    92d2:	6860      	ldr	r0, [r4, #4]
    92d4:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    92d8:	2002      	movs	r0, #2
    92da:	e7e7      	b.n	92ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    92dc:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    92e0:	f88d 1000 	strb.w	r1, [sp]
    92e4:	9900      	ldr	r1, [sp, #0]
    92e6:	9100      	str	r1, [sp, #0]
    92e8:	f89d 1000 	ldrb.w	r1, [sp]
    92ec:	b919      	cbnz	r1, 92f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    92ee:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    92f0:	8b02      	ldrh	r2, [r0, #24]
    92f2:	4291      	cmp	r1, r2
    92f4:	d800      	bhi.n	92f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    92f6:	8b01      	ldrh	r1, [r0, #24]
    92f8:	80b1      	strh	r1, [r6, #4]
    92fa:	f8b0 11ce 	ldrh.w	r1, [r0, #462]	; 0x1ce
    92fe:	1e49      	subs	r1, r1, #1
    9300:	b28f      	uxth	r7, r1
    9302:	f8b0 11d0 	ldrh.w	r1, [r0, #464]	; 0x1d0
    9306:	4439      	add	r1, r7
    9308:	f8a0 11d0 	strh.w	r1, [r0, #464]	; 0x1d0
    930c:	f830 1fb4 	ldrh.w	r1, [r0, #180]!
    9310:	4439      	add	r1, r7
    9312:	8001      	strh	r1, [r0, #0]
    9314:	f001 fe5e 	bl	afd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    9318:	b120      	cbz	r0, 9324 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    931a:	6860      	ldr	r0, [r4, #4]
    931c:	f850 1fa8 	ldr.w	r1, [r0, #168]!
    9320:	4439      	add	r1, r7
    9322:	6001      	str	r1, [r0, #0]
    9324:	6861      	ldr	r1, [r4, #4]
    9326:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    932a:	2801      	cmp	r0, #1
    932c:	d802      	bhi.n	9334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    932e:	1c40      	adds	r0, r0, #1
    9330:	f8a1 01ca 	strh.w	r0, [r1, #458]	; 0x1ca
    9334:	b10f      	cbz	r7, 933a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    9336:	f881 51dc 	strb.w	r5, [r1, #476]	; 0x1dc
    933a:	f881 51d2 	strb.w	r5, [r1, #466]	; 0x1d2
    933e:	f8b1 21ce 	ldrh.w	r2, [r1, #462]	; 0x1ce
    9342:	f101 0078 	add.w	r0, r1, #120	; 0x78
    9346:	f005 febf 	bl	f0c8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    934a:	b120      	cbz	r0, 9356 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    934c:	f640 31ad 	movw	r1, #2989	; 0xbad
    9350:	2031      	movs	r0, #49	; 0x31
    9352:	f7fc f8c5 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9356:	6860      	ldr	r0, [r4, #4]
    9358:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    935c:	290b      	cmp	r1, #11
    935e:	d001      	beq.n	9364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    9360:	290c      	cmp	r1, #12
    9362:	d119      	bne.n	9398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    9364:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    9368:	f8b0 3274 	ldrh.w	r3, [r0, #628]	; 0x274
    936c:	1ad2      	subs	r2, r2, r3
    936e:	b212      	sxth	r2, r2
    9370:	2a00      	cmp	r2, #0
    9372:	db11      	blt.n	9398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    9374:	f8d0 1276 	ldr.w	r1, [r0, #630]	; 0x276
    9378:	f8c0 108f 	str.w	r1, [r0, #143]	; 0x8f
    937c:	f890 127a 	ldrb.w	r1, [r0, #634]	; 0x27a
    9380:	f880 1093 	strb.w	r1, [r0, #147]	; 0x93
    9384:	2103      	movs	r1, #3
    9386:	f7fd fedd 	bl	7144 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    938a:	6860      	ldr	r0, [r4, #4]
    938c:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9390:	21ff      	movs	r1, #255	; 0xff
    9392:	f880 10dc 	strb.w	r1, [r0, #220]	; 0xdc
    9396:	e026      	b.n	93e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    9398:	2924      	cmp	r1, #36	; 0x24
    939a:	d111      	bne.n	93c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    939c:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    93a0:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    93a4:	1a89      	subs	r1, r1, r2
    93a6:	b209      	sxth	r1, r1
    93a8:	2900      	cmp	r1, #0
    93aa:	db09      	blt.n	93c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    93ac:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    93b0:	f000 fe9c 	bl	a0ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    93b4:	2800      	cmp	r0, #0
    93b6:	6860      	ldr	r0, [r4, #4]
    93b8:	f880 5124 	strb.w	r5, [r0, #292]	; 0x124
    93bc:	d029      	beq.n	9412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    93be:	e012      	b.n	93e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    93c0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    93c4:	2924      	cmp	r1, #36	; 0x24
    93c6:	d001      	beq.n	93cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    93c8:	2925      	cmp	r1, #37	; 0x25
    93ca:	d10c      	bne.n	93e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    93cc:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    93d0:	f8b0 2274 	ldrh.w	r2, [r0, #628]	; 0x274
    93d4:	1a89      	subs	r1, r1, r2
    93d6:	b209      	sxth	r1, r1
    93d8:	2900      	cmp	r1, #0
    93da:	db04      	blt.n	93e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    93dc:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    93e0:	f000 fe84 	bl	a0ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec0>
    93e4:	b1a8      	cbz	r0, 9412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    93e6:	480f      	ldr	r0, [pc, #60]	; (9424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    93e8:	9000      	str	r0, [sp, #0]
    93ea:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    93ee:	4b0e      	ldr	r3, [pc, #56]	; (9428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    93f0:	4a0e      	ldr	r2, [pc, #56]	; (942c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    93f2:	f7fc ff9f 	bl	6334 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    93f6:	6860      	ldr	r0, [r4, #4]
    93f8:	2301      	movs	r3, #1
    93fa:	2105      	movs	r1, #5
    93fc:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9400:	3078      	adds	r0, #120	; 0x78
    9402:	f005 fccd 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9406:	2800      	cmp	r0, #0
    9408:	d009      	beq.n	941e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    940a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    940e:	f7fc bf8b 	b.w	6328 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9412:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9416:	2100      	movs	r1, #0
    9418:	4608      	mov	r0, r1
    941a:	f000 bbd9 	b.w	9bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a4>
    941e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9420:	20000174 	.word	0x20000174
    9424:	00009bd1 	.word	0x00009bd1
    9428:	000096f1 	.word	0x000096f1
    942c:	0000a039 	.word	0x0000a039
    9430:	4804      	ldr	r0, [pc, #16]	; (9444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    9432:	2100      	movs	r1, #0
    9434:	6840      	ldr	r0, [r0, #4]
    9436:	f820 1fc0 	strh.w	r1, [r0, #192]!
    943a:	7881      	ldrb	r1, [r0, #2]
    943c:	1c49      	adds	r1, r1, #1
    943e:	7081      	strb	r1, [r0, #2]
    9440:	4770      	bx	lr
    9442:	0000      	.short	0x0000
    9444:	20000174 	.word	0x20000174
    9448:	4807      	ldr	r0, [pc, #28]	; (9468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    944a:	b510      	push	{r4, lr}
    944c:	6841      	ldr	r1, [r0, #4]
    944e:	f811 0fc2 	ldrb.w	r0, [r1, #194]!
    9452:	1e40      	subs	r0, r0, #1
    9454:	b240      	sxtb	r0, r0
    9456:	7008      	strb	r0, [r1, #0]
    9458:	2800      	cmp	r0, #0
    945a:	da04      	bge.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    945c:	f240 118d 	movw	r1, #397	; 0x18d
    9460:	2031      	movs	r0, #49	; 0x31
    9462:	f7fc f83d 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9466:	bd10      	pop	{r4, pc}
    9468:	20000174 	.word	0x20000174
    946c:	491d      	ldr	r1, [pc, #116]	; (94e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    946e:	b508      	push	{r3, lr}
    9470:	6849      	ldr	r1, [r1, #4]
    9472:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    9476:	b1b8      	cbz	r0, 94a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>
    9478:	2a10      	cmp	r2, #16
    947a:	d006      	beq.n	948a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    947c:	2a14      	cmp	r2, #20
    947e:	d007      	beq.n	9490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    9480:	2a15      	cmp	r2, #21
    9482:	d008      	beq.n	9496 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26a>
    9484:	2a1b      	cmp	r2, #27
    9486:	d127      	bne.n	94d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    9488:	e008      	b.n	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x270>
    948a:	2101      	movs	r1, #1
    948c:	200b      	movs	r0, #11
    948e:	e007      	b.n	94a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    9490:	f001 fb88 	bl	aba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    9494:	e006      	b.n	94a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    9496:	f000 fd8d 	bl	9fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    949a:	e003      	b.n	94a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x278>
    949c:	2101      	movs	r1, #1
    949e:	2006      	movs	r0, #6
    94a0:	f000 fd6a 	bl	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    94a4:	2001      	movs	r0, #1
    94a6:	bd08      	pop	{r3, pc}
    94a8:	2a21      	cmp	r2, #33	; 0x21
    94aa:	d004      	beq.n	94b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28a>
    94ac:	2a28      	cmp	r2, #40	; 0x28
    94ae:	d113      	bne.n	94d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    94b0:	2101      	movs	r1, #1
    94b2:	2011      	movs	r0, #17
    94b4:	e7f4      	b.n	94a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    94b6:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    94ba:	2802      	cmp	r0, #2
    94bc:	d00e      	beq.n	94dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    94be:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    94c2:	2801      	cmp	r0, #1
    94c4:	d108      	bne.n	94d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    94c6:	f891 0125 	ldrb.w	r0, [r1, #293]	; 0x125
    94ca:	f88d 0000 	strb.w	r0, [sp]
    94ce:	9800      	ldr	r0, [sp, #0]
    94d0:	9000      	str	r0, [sp, #0]
    94d2:	f89d 0000 	ldrb.w	r0, [sp]
    94d6:	b108      	cbz	r0, 94dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    94d8:	2000      	movs	r0, #0
    94da:	bd08      	pop	{r3, pc}
    94dc:	2101      	movs	r1, #1
    94de:	2017      	movs	r0, #23
    94e0:	e7de      	b.n	94a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x274>
    94e2:	0000      	.short	0x0000
    94e4:	20000174 	.word	0x20000174
    94e8:	b538      	push	{r3, r4, r5, lr}
    94ea:	2800      	cmp	r0, #0
    94ec:	d16d      	bne.n	95ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    94ee:	4c38      	ldr	r4, [pc, #224]	; (95d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>)
    94f0:	6860      	ldr	r0, [r4, #4]
    94f2:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    94f6:	07ca      	lsls	r2, r1, #31
    94f8:	d002      	beq.n	9500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    94fa:	2101      	movs	r1, #1
    94fc:	2009      	movs	r0, #9
    94fe:	e05d      	b.n	95bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    9500:	078a      	lsls	r2, r1, #30
    9502:	d50a      	bpl.n	951a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    9504:	2101      	movs	r1, #1
    9506:	200c      	movs	r0, #12
    9508:	f000 fd36 	bl	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    950c:	6860      	ldr	r0, [r4, #4]
    950e:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    9512:	f041 0101 	orr.w	r1, r1, #1
    9516:	7001      	strb	r1, [r0, #0]
    9518:	e052      	b.n	95c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    951a:	074a      	lsls	r2, r1, #29
    951c:	d502      	bpl.n	9524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    951e:	2101      	movs	r1, #1
    9520:	2013      	movs	r0, #19
    9522:	e04b      	b.n	95bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    9524:	070a      	lsls	r2, r1, #28
    9526:	d506      	bpl.n	9536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    9528:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    952c:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    9530:	2101      	movs	r1, #1
    9532:	2007      	movs	r0, #7
    9534:	e042      	b.n	95bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x390>
    9536:	f011 0f30 	tst.w	r1, #48	; 0x30
    953a:	d046      	beq.n	95ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    953c:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    9540:	f88d 1000 	strb.w	r1, [sp]
    9544:	9900      	ldr	r1, [sp, #0]
    9546:	9100      	str	r1, [sp, #0]
    9548:	f89d 1000 	ldrb.w	r1, [sp]
    954c:	bbd1      	cbnz	r1, 95c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    954e:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    9552:	2500      	movs	r5, #0
    9554:	f88d 1000 	strb.w	r1, [sp]
    9558:	9900      	ldr	r1, [sp, #0]
    955a:	9100      	str	r1, [sp, #0]
    955c:	f89d 1000 	ldrb.w	r1, [sp]
    9560:	b1c1      	cbz	r1, 9594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    9562:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9566:	2924      	cmp	r1, #36	; 0x24
    9568:	d02d      	beq.n	95c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    956a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    956e:	2924      	cmp	r1, #36	; 0x24
    9570:	d029      	beq.n	95c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    9572:	2300      	movs	r3, #0
    9574:	f200 2276 	addw	r2, r0, #630	; 0x276
    9578:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    957c:	f006 f8cf 	bl	f71e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9580:	6860      	ldr	r0, [r4, #4]
    9582:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    9586:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    958a:	f041 0110 	orr.w	r1, r1, #16
    958e:	7001      	strb	r1, [r0, #0]
    9590:	f880 5093 	strb.w	r5, [r0, #147]	; 0x93
    9594:	6860      	ldr	r0, [r4, #4]
    9596:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    959a:	06c9      	lsls	r1, r1, #27
    959c:	d515      	bpl.n	95ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    959e:	f006 f8d9 	bl	f754 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    95a2:	f000 f92b 	bl	97fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    95a6:	6861      	ldr	r1, [r4, #4]
    95a8:	f101 0030 	add.w	r0, r1, #48	; 0x30
    95ac:	8bc2      	ldrh	r2, [r0, #30]
    95ae:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    95b2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    95b4:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    95b8:	2101      	movs	r1, #1
    95ba:	2015      	movs	r0, #21
    95bc:	f000 fcdc 	bl	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    95c0:	2001      	movs	r0, #1
    95c2:	bd38      	pop	{r3, r4, r5, pc}
    95c4:	e001      	b.n	95ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39e>
    95c6:	2301      	movs	r3, #1
    95c8:	e7d4      	b.n	9574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    95ca:	2000      	movs	r0, #0
    95cc:	e7f9      	b.n	95c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x396>
    95ce:	0000      	.short	0x0000
    95d0:	20000174 	.word	0x20000174
    95d4:	b570      	push	{r4, r5, r6, lr}
    95d6:	460d      	mov	r5, r1
    95d8:	4606      	mov	r6, r0
    95da:	f005 fe66 	bl	f2aa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    95de:	4604      	mov	r4, r0
    95e0:	4630      	mov	r0, r6
    95e2:	f005 fe6e 	bl	f2c2 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    95e6:	4629      	mov	r1, r5
    95e8:	f000 f81e 	bl	9628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    95ec:	b1b8      	cbz	r0, 961e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    95ee:	4620      	mov	r0, r4
    95f0:	f005 fc70 	bl	eed4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    95f4:	0001      	movs	r1, r0
    95f6:	d00d      	beq.n	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    95f8:	480a      	ldr	r0, [pc, #40]	; (9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>)
    95fa:	6840      	ldr	r0, [r0, #4]
    95fc:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    9600:	428a      	cmp	r2, r1
    9602:	d007      	beq.n	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    9604:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    9608:	2901      	cmp	r1, #1
    960a:	d005      	beq.n	9618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    960c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9610:	4220      	tst	r0, r4
    9612:	d004      	beq.n	961e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f2>
    9614:	2001      	movs	r0, #1
    9616:	bd70      	pop	{r4, r5, r6, pc}
    9618:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    961c:	e7f8      	b.n	9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>
    961e:	2000      	movs	r0, #0
    9620:	bd70      	pop	{r4, r5, r6, pc}
    9622:	0000      	.short	0x0000
    9624:	20000174 	.word	0x20000174
    9628:	b570      	push	{r4, r5, r6, lr}
    962a:	460d      	mov	r5, r1
    962c:	4604      	mov	r4, r0
    962e:	f005 fc51 	bl	eed4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9632:	b350      	cbz	r0, 968a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    9634:	4916      	ldr	r1, [pc, #88]	; (9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>)
    9636:	6849      	ldr	r1, [r1, #4]
    9638:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
    963c:	4282      	cmp	r2, r0
    963e:	d024      	beq.n	968a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    9640:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    9644:	2b01      	cmp	r3, #1
    9646:	d005      	beq.n	9654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    9648:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
    964c:	4223      	tst	r3, r4
    964e:	d013      	beq.n	9678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    9650:	b11d      	cbz	r5, 965a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    9652:	e01a      	b.n	968a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    9654:	f891 3126 	ldrb.w	r3, [r1, #294]	; 0x126
    9658:	e7f8      	b.n	964c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    965a:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    965e:	4221      	tst	r1, r4
    9660:	d113      	bne.n	968a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    9662:	b15a      	cbz	r2, 967c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x450>
    9664:	2a04      	cmp	r2, #4
    9666:	d00e      	beq.n	9686 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    9668:	2804      	cmp	r0, #4
    966a:	d00c      	beq.n	9686 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    966c:	2a08      	cmp	r2, #8
    966e:	d00a      	beq.n	9686 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    9670:	2808      	cmp	r0, #8
    9672:	d008      	beq.n	9686 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45a>
    9674:	4282      	cmp	r2, r0
    9676:	d908      	bls.n	968a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45e>
    9678:	2000      	movs	r0, #0
    967a:	bd70      	pop	{r4, r5, r6, pc}
    967c:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    9680:	2006      	movs	r0, #6
    9682:	f7fb ff2d 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9686:	4282      	cmp	r2, r0
    9688:	d3f6      	bcc.n	9678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44c>
    968a:	2001      	movs	r0, #1
    968c:	bd70      	pop	{r4, r5, r6, pc}
    968e:	0000      	.short	0x0000
    9690:	20000174 	.word	0x20000174
    9694:	b510      	push	{r4, lr}
    9696:	4c10      	ldr	r4, [pc, #64]	; (96d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ac>)
    9698:	2301      	movs	r3, #1
    969a:	2100      	movs	r1, #0
    969c:	6860      	ldr	r0, [r4, #4]
    969e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    96a2:	3078      	adds	r0, #120	; 0x78
    96a4:	f005 fb7c 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96a8:	b140      	cbz	r0, 96bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    96aa:	6860      	ldr	r0, [r4, #4]
    96ac:	2301      	movs	r3, #1
    96ae:	2104      	movs	r1, #4
    96b0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    96b4:	3078      	adds	r0, #120	; 0x78
    96b6:	f005 fb73 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96ba:	b108      	cbz	r0, 96c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x494>
    96bc:	2000      	movs	r0, #0
    96be:	bd10      	pop	{r4, pc}
    96c0:	6860      	ldr	r0, [r4, #4]
    96c2:	f890 00b2 	ldrb.w	r0, [r0, #178]	; 0xb2
    96c6:	2800      	cmp	r0, #0
    96c8:	d0f9      	beq.n	96be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    96ca:	2100      	movs	r1, #0
    96cc:	2012      	movs	r0, #18
    96ce:	f000 fc53 	bl	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    96d2:	2001      	movs	r0, #1
    96d4:	bd10      	pop	{r4, pc}
    96d6:	0000      	.short	0x0000
    96d8:	20000174 	.word	0x20000174
    96dc:	4903      	ldr	r1, [pc, #12]	; (96ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>)
    96de:	2000      	movs	r0, #0
    96e0:	6849      	ldr	r1, [r1, #4]
    96e2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    96e6:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    96ea:	4770      	bx	lr
    96ec:	20000174 	.word	0x20000174
    96f0:	490d      	ldr	r1, [pc, #52]	; (9728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>)
    96f2:	4602      	mov	r2, r0
    96f4:	7848      	ldrb	r0, [r1, #1]
    96f6:	b9a0      	cbnz	r0, 9722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    96f8:	f101 0010 	add.w	r0, r1, #16
    96fc:	6840      	ldr	r0, [r0, #4]
    96fe:	b142      	cbz	r2, 9712 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e6>
    9700:	7889      	ldrb	r1, [r1, #2]
    9702:	0709      	lsls	r1, r1, #28
    9704:	d503      	bpl.n	970e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    9706:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    970a:	2808      	cmp	r0, #8
    970c:	d009      	beq.n	9722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    970e:	2001      	movs	r0, #1
    9710:	4770      	bx	lr
    9712:	f100 0130 	add.w	r1, r0, #48	; 0x30
    9716:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    9718:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    971a:	428a      	cmp	r2, r1
    971c:	d801      	bhi.n	9722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f6>
    971e:	f7ff b93d 	b.w	899c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    9722:	2000      	movs	r0, #0
    9724:	4770      	bx	lr
    9726:	0000      	.short	0x0000
    9728:	20000164 	.word	0x20000164
    972c:	b538      	push	{r3, r4, r5, lr}
    972e:	4c32      	ldr	r4, [pc, #200]	; (97f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>)
    9730:	4605      	mov	r5, r0
    9732:	6860      	ldr	r0, [r4, #4]
    9734:	3078      	adds	r0, #120	; 0x78
    9736:	f006 ffdd 	bl	106f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    973a:	2800      	cmp	r0, #0
    973c:	d15b      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    973e:	2d00      	cmp	r5, #0
    9740:	d159      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9742:	6860      	ldr	r0, [r4, #4]
    9744:	2301      	movs	r3, #1
    9746:	4619      	mov	r1, r3
    9748:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    974c:	3078      	adds	r0, #120	; 0x78
    974e:	f005 fb27 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9752:	2800      	cmp	r0, #0
    9754:	d14f      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9756:	6860      	ldr	r0, [r4, #4]
    9758:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    975c:	f88d 1000 	strb.w	r1, [sp]
    9760:	9900      	ldr	r1, [sp, #0]
    9762:	9100      	str	r1, [sp, #0]
    9764:	f89d 2000 	ldrb.w	r2, [sp]
    9768:	2100      	movs	r1, #0
    976a:	b142      	cbz	r2, 977e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x552>
    976c:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
    9770:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    9774:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    9778:	2100      	movs	r1, #0
    977a:	2002      	movs	r0, #2
    977c:	e030      	b.n	97e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    977e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9782:	2301      	movs	r3, #1
    9784:	2104      	movs	r1, #4
    9786:	3078      	adds	r0, #120	; 0x78
    9788:	f005 fb0a 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    978c:	4605      	mov	r5, r0
    978e:	f7ff feab 	bl	94e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9792:	2800      	cmp	r0, #0
    9794:	d12f      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    9796:	4628      	mov	r0, r5
    9798:	f7ff fe68 	bl	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    979c:	2800      	cmp	r0, #0
    979e:	d12a      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97a0:	f7ff ff78 	bl	9694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    97a4:	2800      	cmp	r0, #0
    97a6:	d126      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97a8:	6860      	ldr	r0, [r4, #4]
    97aa:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    97ae:	290a      	cmp	r1, #10
    97b0:	d01a      	beq.n	97e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5bc>
    97b2:	2d00      	cmp	r5, #0
    97b4:	d11f      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97b6:	f000 fb2b 	bl	9e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe4>
    97ba:	2800      	cmp	r0, #0
    97bc:	d11b      	bne.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97be:	6860      	ldr	r0, [r4, #4]
    97c0:	2301      	movs	r3, #1
    97c2:	2100      	movs	r1, #0
    97c4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    97c8:	3078      	adds	r0, #120	; 0x78
    97ca:	f005 fae9 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97ce:	2800      	cmp	r0, #0
    97d0:	d011      	beq.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97d2:	6860      	ldr	r0, [r4, #4]
    97d4:	f890 026c 	ldrb.w	r0, [r0, #620]	; 0x26c
    97d8:	2800      	cmp	r0, #0
    97da:	d00c      	beq.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ca>
    97dc:	2100      	movs	r1, #0
    97de:	20ff      	movs	r0, #255	; 0xff
    97e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    97e4:	f000 bbc8 	b.w	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    97e8:	f890 1109 	ldrb.w	r1, [r0, #265]	; 0x109
    97ec:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    97f0:	2100      	movs	r1, #0
    97f2:	2007      	movs	r0, #7
    97f4:	e7f4      	b.n	97e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b4>
    97f6:	bd38      	pop	{r3, r4, r5, pc}
    97f8:	20000174 	.word	0x20000174
    97fc:	480a      	ldr	r0, [pc, #40]	; (9828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fc>)
    97fe:	b510      	push	{r4, lr}
    9800:	6843      	ldr	r3, [r0, #4]
    9802:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    9806:	2801      	cmp	r0, #1
    9808:	d00a      	beq.n	9820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    980a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    980e:	f103 0130 	add.w	r1, r3, #48	; 0x30
    9812:	8818      	ldrh	r0, [r3, #0]
    9814:	f005 ff5b 	bl	f6ce <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    981c:	f7fd bf5a 	b.w	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9820:	2002      	movs	r0, #2
    9822:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    9826:	bd10      	pop	{r4, pc}
    9828:	20000174 	.word	0x20000174
    982c:	b570      	push	{r4, r5, r6, lr}
    982e:	4c24      	ldr	r4, [pc, #144]	; (98c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x694>)
    9830:	0006      	movs	r6, r0
    9832:	f104 0510 	add.w	r5, r4, #16
    9836:	d12f      	bne.n	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9838:	f000 f8a2 	bl	9980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>
    983c:	f000 f844 	bl	98c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>
    9840:	0006      	movs	r6, r0
    9842:	d129      	bne.n	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9844:	8860      	ldrh	r0, [r4, #2]
    9846:	0741      	lsls	r1, r0, #29
    9848:	d506      	bpl.n	9858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    984a:	6869      	ldr	r1, [r5, #4]
    984c:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
    9850:	2907      	cmp	r1, #7
    9852:	d101      	bne.n	9858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    9854:	2101      	movs	r1, #1
    9856:	7021      	strb	r1, [r4, #0]
    9858:	0780      	lsls	r0, r0, #30
    985a:	d512      	bpl.n	9882 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    985c:	68a0      	ldr	r0, [r4, #8]
    985e:	78c0      	ldrb	r0, [r0, #3]
    9860:	2826      	cmp	r0, #38	; 0x26
    9862:	d205      	bcs.n	9870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    9864:	4917      	ldr	r1, [pc, #92]	; (98c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>)
    9866:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    986a:	b109      	cbz	r1, 9870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    986c:	4788      	blx	r1
    986e:	e008      	b.n	9882 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9870:	28ff      	cmp	r0, #255	; 0xff
    9872:	d004      	beq.n	987e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    9874:	f240 71c9 	movw	r1, #1993	; 0x7c9
    9878:	2031      	movs	r0, #49	; 0x31
    987a:	f7fb fe31 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    987e:	f001 f9d3 	bl	ac28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    9882:	78a0      	ldrb	r0, [r4, #2]
    9884:	06c0      	lsls	r0, r0, #27
    9886:	d507      	bpl.n	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9888:	6868      	ldr	r0, [r5, #4]
    988a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    988e:	290b      	cmp	r1, #11
    9890:	d102      	bne.n	9898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9892:	210c      	movs	r1, #12
    9894:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9898:	7860      	ldrb	r0, [r4, #1]
    989a:	0700      	lsls	r0, r0, #28
    989c:	d50d      	bpl.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    989e:	6868      	ldr	r0, [r5, #4]
    98a0:	2301      	movs	r3, #1
    98a2:	2105      	movs	r1, #5
    98a4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    98a8:	3078      	adds	r0, #120	; 0x78
    98aa:	f005 fa79 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98ae:	b108      	cbz	r0, 98b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x688>
    98b0:	2608      	movs	r6, #8
    98b2:	e002      	b.n	98ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x68e>
    98b4:	2000      	movs	r0, #0
    98b6:	f7fc fe05 	bl	64c4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    98ba:	4630      	mov	r0, r6
    98bc:	bd70      	pop	{r4, r5, r6, pc}
    98be:	0000      	.short	0x0000
    98c0:	20000164 	.word	0x20000164
    98c4:	20000214 	.word	0x20000214
    98c8:	b570      	push	{r4, r5, r6, lr}
    98ca:	4d2b      	ldr	r5, [pc, #172]	; (9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74c>)
    98cc:	2000      	movs	r0, #0
    98ce:	78a9      	ldrb	r1, [r5, #2]
    98d0:	07c9      	lsls	r1, r1, #31
    98d2:	d017      	beq.n	9904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d8>
    98d4:	68e8      	ldr	r0, [r5, #12]
    98d6:	f105 0410 	add.w	r4, r5, #16
    98da:	2301      	movs	r3, #1
    98dc:	78c6      	ldrb	r6, [r0, #3]
    98de:	6860      	ldr	r0, [r4, #4]
    98e0:	2105      	movs	r1, #5
    98e2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    98e6:	3078      	adds	r0, #120	; 0x78
    98e8:	f005 fa5a 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98ec:	b158      	cbz	r0, 9906 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    98ee:	1eb6      	subs	r6, r6, #2
    98f0:	2e0a      	cmp	r6, #10
    98f2:	d206      	bcs.n	9902 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    98f4:	e8df f006 	tbb	[pc, r6]
    98f8:	05050707 	.word	0x05050707
    98fc:	05050707 	.word	0x05050707
    9900:	0707      	.short	0x0707
    9902:	2008      	movs	r0, #8
    9904:	bd70      	pop	{r4, r5, r6, pc}
    9906:	68e8      	ldr	r0, [r5, #12]
    9908:	f7fd fd48 	bl	739c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    990c:	b138      	cbz	r0, 991e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f2>
    990e:	68e8      	ldr	r0, [r5, #12]
    9910:	78c5      	ldrb	r5, [r0, #3]
    9912:	b145      	cbz	r5, 9926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9914:	2d01      	cmp	r5, #1
    9916:	d006      	beq.n	9926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    9918:	2d16      	cmp	r5, #22
    991a:	d118      	bne.n	994e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    991c:	e003      	b.n	9926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    991e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9922:	f000 bdd1 	b.w	a4c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    9926:	6860      	ldr	r0, [r4, #4]
    9928:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    992c:	f005 fa86 	bl	ee3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9930:	b168      	cbz	r0, 994e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    9932:	6861      	ldr	r1, [r4, #4]
    9934:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9938:	281f      	cmp	r0, #31
    993a:	d008      	beq.n	994e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    993c:	2820      	cmp	r0, #32
    993e:	d003      	beq.n	9948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    9940:	2d16      	cmp	r5, #22
    9942:	d00c      	beq.n	995e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x732>
    9944:	2002      	movs	r0, #2
    9946:	bd70      	pop	{r4, r5, r6, pc}
    9948:	2027      	movs	r0, #39	; 0x27
    994a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    994e:	2d26      	cmp	r5, #38	; 0x26
    9950:	d207      	bcs.n	9962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    9952:	480a      	ldr	r0, [pc, #40]	; (997c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    9954:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    9958:	b118      	cbz	r0, 9962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    995a:	4780      	blx	r0
    995c:	e003      	b.n	9966 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    995e:	2020      	movs	r0, #32
    9960:	bd70      	pop	{r4, r5, r6, pc}
    9962:	f000 fdb1 	bl	a4c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    9966:	6861      	ldr	r1, [r4, #4]
    9968:	e9f1 233a 	ldrd	r2, r3, [r1, #232]!	; 0xe8
    996c:	1c52      	adds	r2, r2, #1
    996e:	f143 0300 	adc.w	r3, r3, #0
    9972:	e9c1 2300 	strd	r2, r3, [r1]
    9976:	bd70      	pop	{r4, r5, r6, pc}
    9978:	20000164 	.word	0x20000164
    997c:	2000017c 	.word	0x2000017c
    9980:	b570      	push	{r4, r5, r6, lr}
    9982:	4e23      	ldr	r6, [pc, #140]	; (9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    9984:	78b0      	ldrb	r0, [r6, #2]
    9986:	0700      	lsls	r0, r0, #28
    9988:	d540      	bpl.n	9a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    998a:	f106 0410 	add.w	r4, r6, #16
    998e:	6860      	ldr	r0, [r4, #4]
    9990:	3078      	adds	r0, #120	; 0x78
    9992:	f006 feaf 	bl	106f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9996:	b148      	cbz	r0, 99ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    9998:	6860      	ldr	r0, [r4, #4]
    999a:	21fe      	movs	r1, #254	; 0xfe
    999c:	2500      	movs	r5, #0
    999e:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    99a2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    99a6:	2919      	cmp	r1, #25
    99a8:	d10c      	bne.n	99c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    99aa:	e004      	b.n	99b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    99ac:	f240 71d3 	movw	r1, #2003	; 0x7d3
    99b0:	2031      	movs	r0, #49	; 0x31
    99b2:	f7fb fd95 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99b6:	f880 50c3 	strb.w	r5, [r0, #195]	; 0xc3
    99ba:	f7ff fd45 	bl	9448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    99be:	6860      	ldr	r0, [r4, #4]
    99c0:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    99c4:	6860      	ldr	r0, [r4, #4]
    99c6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    99ca:	291f      	cmp	r1, #31
    99cc:	d002      	beq.n	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    99ce:	2929      	cmp	r1, #41	; 0x29
    99d0:	d113      	bne.n	99fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    99d2:	e00b      	b.n	99ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    99d4:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    99d8:	f005 fa30 	bl	ee3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    99dc:	b108      	cbz	r0, 99e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    99de:	2027      	movs	r0, #39	; 0x27
    99e0:	e000      	b.n	99e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    99e2:	2020      	movs	r0, #32
    99e4:	6861      	ldr	r1, [r4, #4]
    99e6:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    99ea:	e006      	b.n	99fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    99ec:	2101      	movs	r1, #1
    99ee:	f880 126d 	strb.w	r1, [r0, #621]	; 0x26d
    99f2:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    99f6:	f880 50be 	strb.w	r5, [r0, #190]	; 0xbe
    99fa:	6860      	ldr	r0, [r4, #4]
    99fc:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    9a00:	2908      	cmp	r1, #8
    9a02:	d103      	bne.n	9a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    9a04:	2102      	movs	r1, #2
    9a06:	7031      	strb	r1, [r6, #0]
    9a08:	f880 110c 	strb.w	r1, [r0, #268]	; 0x10c
    9a0c:	bd70      	pop	{r4, r5, r6, pc}
    9a0e:	0000      	.short	0x0000
    9a10:	20000164 	.word	0x20000164
    9a14:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    9a16:	4606      	mov	r6, r0
    9a18:	4668      	mov	r0, sp
    9a1a:	f7fc fbdd 	bl	61d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9a1e:	b310      	cbz	r0, 9a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83a>
    9a20:	2222      	movs	r2, #34	; 0x22
    9a22:	2100      	movs	r1, #0
    9a24:	9800      	ldr	r0, [sp, #0]
    9a26:	f003 ff59 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9a2a:	2103      	movs	r1, #3
    9a2c:	9800      	ldr	r0, [sp, #0]
    9a2e:	f005 fcac 	bl	f38a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9a32:	9800      	ldr	r0, [sp, #0]
    9a34:	7801      	ldrb	r1, [r0, #0]
    9a36:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    9a3a:	7001      	strb	r1, [r0, #0]
    9a3c:	4631      	mov	r1, r6
    9a3e:	f7fd fcbd 	bl	73bc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9a42:	4c62      	ldr	r4, [pc, #392]	; (9bcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a0>)
    9a44:	f644 152f 	movw	r5, #18735	; 0x492f
    9a48:	2e0e      	cmp	r6, #14
    9a4a:	d079      	beq.n	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    9a4c:	dc0e      	bgt.n	9a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x840>
    9a4e:	f1a6 0602 	sub.w	r6, r6, #2
    9a52:	2e0c      	cmp	r6, #12
    9a54:	d21c      	bcs.n	9a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    9a56:	e8df f006 	tbb	[pc, r6]
    9a5a:	1b1e      	.short	0x1b1e
    9a5c:	23aeae52 	.word	0x23aeae52
    9a60:	ae1b5f1b 	.word	0xae1b5f1b
    9a64:	363c      	.short	0x363c
    9a66:	f640 210a 	movw	r1, #2570	; 0xa0a
    9a6a:	e0aa      	b.n	9bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9a6c:	2e15      	cmp	r6, #21
    9a6e:	d068      	beq.n	9b42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    9a70:	dc08      	bgt.n	9a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x858>
    9a72:	2e11      	cmp	r6, #17
    9a74:	d01a      	beq.n	9aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x880>
    9a76:	2e12      	cmp	r6, #18
    9a78:	d017      	beq.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9a7a:	2e13      	cmp	r6, #19
    9a7c:	d015      	beq.n	9aaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9a7e:	2e14      	cmp	r6, #20
    9a80:	d106      	bne.n	9a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x864>
    9a82:	e05e      	b.n	9b42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x916>
    9a84:	2e16      	cmp	r6, #22
    9a86:	d030      	beq.n	9aea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    9a88:	2e17      	cmp	r6, #23
    9a8a:	d075      	beq.n	9b78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9a8c:	2eff      	cmp	r6, #255	; 0xff
    9a8e:	d072      	beq.n	9b76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94a>
    9a90:	f640 217b 	movw	r1, #2683	; 0xa7b
    9a94:	e095      	b.n	9bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9a96:	6861      	ldr	r1, [r4, #4]
    9a98:	9800      	ldr	r0, [sp, #0]
    9a9a:	f891 110e 	ldrb.w	r1, [r1, #270]	; 0x10e
    9a9e:	e016      	b.n	9ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8a2>
    9aa0:	6860      	ldr	r0, [r4, #4]
    9aa2:	9900      	ldr	r1, [sp, #0]
    9aa4:	f890 010e 	ldrb.w	r0, [r0, #270]	; 0x10e
    9aa8:	7108      	strb	r0, [r1, #4]
    9aaa:	e084      	b.n	9bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9aac:	6860      	ldr	r0, [r4, #4]
    9aae:	f890 110b 	ldrb.w	r1, [r0, #267]	; 0x10b
    9ab2:	9800      	ldr	r0, [sp, #0]
    9ab4:	f005 fc45 	bl	f342 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9ab8:	6860      	ldr	r0, [r4, #4]
    9aba:	f890 110a 	ldrb.w	r1, [r0, #266]	; 0x10a
    9abe:	9800      	ldr	r0, [sp, #0]
    9ac0:	f005 fc41 	bl	f346 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9ac4:	e077      	b.n	9bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9ac6:	6861      	ldr	r1, [r4, #4]
    9ac8:	9800      	ldr	r0, [sp, #0]
    9aca:	f891 110a 	ldrb.w	r1, [r1, #266]	; 0x10a
    9ace:	7101      	strb	r1, [r0, #4]
    9ad0:	e071      	b.n	9bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9ad2:	9800      	ldr	r0, [sp, #0]
    9ad4:	210c      	movs	r1, #12
    9ad6:	7101      	strb	r1, [r0, #4]
    9ad8:	2159      	movs	r1, #89	; 0x59
    9ada:	7141      	strb	r1, [r0, #5]
    9adc:	2100      	movs	r1, #0
    9ade:	7181      	strb	r1, [r0, #6]
    9ae0:	21a7      	movs	r1, #167	; 0xa7
    9ae2:	71c1      	strb	r1, [r0, #7]
    9ae4:	2111      	movs	r1, #17
    9ae6:	7201      	strb	r1, [r0, #8]
    9ae8:	e065      	b.n	9bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9aea:	9800      	ldr	r0, [sp, #0]
    9aec:	f8d4 1004 	ldr.w	r1, [r4, #4]
    9af0:	f891 2126 	ldrb.w	r2, [r1, #294]	; 0x126
    9af4:	7102      	strb	r2, [r0, #4]
    9af6:	f891 1127 	ldrb.w	r1, [r1, #295]	; 0x127
    9afa:	7141      	strb	r1, [r0, #5]
    9afc:	e05b      	b.n	9bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9afe:	6861      	ldr	r1, [r4, #4]
    9b00:	9800      	ldr	r0, [sp, #0]
    9b02:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
    9b06:	f005 fc31 	bl	f36c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    9b0a:	6861      	ldr	r1, [r4, #4]
    9b0c:	9800      	ldr	r0, [sp, #0]
    9b0e:	f501 7182 	add.w	r1, r1, #260	; 0x104
    9b12:	f005 fc28 	bl	f366 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    9b16:	e04e      	b.n	9bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b18:	f001 ff54 	bl	b9c4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b1c:	4028      	ands	r0, r5
    9b1e:	f001 0106 	and.w	r1, r1, #6
    9b22:	e9cd 0101 	strd	r0, r1, [sp, #4]
    9b26:	6861      	ldr	r1, [r4, #4]
    9b28:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9b2c:	f891 10d4 	ldrb.w	r1, [r1, #212]	; 0xd4
    9b30:	4008      	ands	r0, r1
    9b32:	f88d 0004 	strb.w	r0, [sp, #4]
    9b36:	a901      	add	r1, sp, #4
    9b38:	9800      	ldr	r0, [sp, #0]
    9b3a:	f005 fc21 	bl	f380 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9b3e:	e03a      	b.n	9bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b40:	e025      	b.n	9b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x962>
    9b42:	6860      	ldr	r0, [r4, #4]
    9b44:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    9b48:	9800      	ldr	r0, [sp, #0]
    9b4a:	f005 fc26 	bl	f39a <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9b4e:	6860      	ldr	r0, [r4, #4]
    9b50:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    9b54:	9800      	ldr	r0, [sp, #0]
    9b56:	f005 fc24 	bl	f3a2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9b5a:	6860      	ldr	r0, [r4, #4]
    9b5c:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9b60:	9800      	ldr	r0, [sp, #0]
    9b62:	f005 fc22 	bl	f3aa <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9b66:	6860      	ldr	r0, [r4, #4]
    9b68:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    9b6c:	9800      	ldr	r0, [sp, #0]
    9b6e:	f005 fc20 	bl	f3b2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9b72:	e020      	b.n	9bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9b74:	e000      	b.n	9b78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9b76:	e016      	b.n	9ba6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    9b78:	6861      	ldr	r1, [r4, #4]
    9b7a:	f891 0124 	ldrb.w	r0, [r1, #292]	; 0x124
    9b7e:	2801      	cmp	r0, #1
    9b80:	9800      	ldr	r0, [sp, #0]
    9b82:	d0b5      	beq.n	9af0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c4>
    9b84:	f811 2f6a 	ldrb.w	r2, [r1, #106]!
    9b88:	7102      	strb	r2, [r0, #4]
    9b8a:	7849      	ldrb	r1, [r1, #1]
    9b8c:	e7b5      	b.n	9afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ce>
    9b8e:	f001 ff19 	bl	b9c4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b92:	4028      	ands	r0, r5
    9b94:	f001 0106 	and.w	r1, r1, #6
    9b98:	e9cd 0101 	strd	r0, r1, [sp, #4]
    9b9c:	a901      	add	r1, sp, #4
    9b9e:	9800      	ldr	r0, [sp, #0]
    9ba0:	f005 fbe9 	bl	f376 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9ba4:	e007      	b.n	9bb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98a>
    9ba6:	6860      	ldr	r0, [r4, #4]
    9ba8:	f890 226f 	ldrb.w	r2, [r0, #623]	; 0x26f
    9bac:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    9bb0:	9800      	ldr	r0, [sp, #0]
    9bb2:	f005 fbca 	bl	f34a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    9bb6:	f7fc fae9 	bl	618c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9bba:	2800      	cmp	r0, #0
    9bbc:	d104      	bne.n	9bc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    9bbe:	f640 217f 	movw	r1, #2687	; 0xa7f
    9bc2:	2031      	movs	r0, #49	; 0x31
    9bc4:	f7fb fc8c 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9bc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9bca:	0000      	.short	0x0000
    9bcc:	20000174 	.word	0x20000174
    9bd0:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9bd4:	4e8d      	ldr	r6, [pc, #564]	; (9e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbe0>)
    9bd6:	468a      	mov	sl, r1
    9bd8:	6870      	ldr	r0, [r6, #4]
    9bda:	8800      	ldrh	r0, [r0, #0]
    9bdc:	f7fc f8be 	bl	5d5c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9be0:	0007      	movs	r7, r0
    9be2:	d00c      	beq.n	9bfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    9be4:	f1a6 0510 	sub.w	r5, r6, #16
    9be8:	f04f 0400 	mov.w	r4, #0
    9bec:	8868      	ldrh	r0, [r5, #2]
    9bee:	05c0      	lsls	r0, r0, #23
    9bf0:	d50a      	bpl.n	9c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9dc>
    9bf2:	6870      	ldr	r0, [r6, #4]
    9bf4:	f8a0 40b4 	strh.w	r4, [r0, #180]	; 0xb4
    9bf8:	f880 41dc 	strb.w	r4, [r0, #476]	; 0x1dc
    9bfc:	e009      	b.n	9c12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e6>
    9bfe:	f640 515c 	movw	r1, #3420	; 0xd5c
    9c02:	2031      	movs	r0, #49	; 0x31
    9c04:	f7fb fc6c 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c08:	6871      	ldr	r1, [r6, #4]
    9c0a:	f831 0fb4 	ldrh.w	r0, [r1, #180]!
    9c0e:	1c40      	adds	r0, r0, #1
    9c10:	8008      	strh	r0, [r1, #0]
    9c12:	f001 f9df 	bl	afd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    9c16:	f04f 0901 	mov.w	r9, #1
    9c1a:	b348      	cbz	r0, 9c70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9c1c:	8868      	ldrh	r0, [r5, #2]
    9c1e:	0500      	lsls	r0, r0, #20
    9c20:	d506      	bpl.n	9c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    9c22:	6870      	ldr	r0, [r6, #4]
    9c24:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    9c28:	b111      	cbz	r1, 9c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa04>
    9c2a:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
    9c2e:	e01f      	b.n	9c70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9c30:	6871      	ldr	r1, [r6, #4]
    9c32:	f8d1 00a8 	ldr.w	r0, [r1, #168]	; 0xa8
    9c36:	1c40      	adds	r0, r0, #1
    9c38:	f8c1 00a8 	str.w	r0, [r1, #168]	; 0xa8
    9c3c:	f8d1 20ac 	ldr.w	r2, [r1, #172]	; 0xac
    9c40:	4282      	cmp	r2, r0
    9c42:	d301      	bcc.n	9c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1c>
    9c44:	1a13      	subs	r3, r2, r0
    9c46:	e000      	b.n	9c4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    9c48:	2300      	movs	r3, #0
    9c4a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    9c4e:	f10c 0c05 	add.w	ip, ip, #5
    9c52:	4563      	cmp	r3, ip
    9c54:	d801      	bhi.n	9c5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    9c56:	f881 90b2 	strb.w	r9, [r1, #178]	; 0xb2
    9c5a:	4290      	cmp	r0, r2
    9c5c:	d308      	bcc.n	9c70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa44>
    9c5e:	f501 709d 	add.w	r0, r1, #314	; 0x13a
    9c62:	220c      	movs	r2, #12
    9c64:	f8c1 40a8 	str.w	r4, [r1, #168]	; 0xa8
    9c68:	f7fd fc62 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9c6c:	f7fd fd32 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c70:	8868      	ldrh	r0, [r5, #2]
    9c72:	f04f 0b02 	mov.w	fp, #2
    9c76:	f410 7f40 	tst.w	r0, #768	; 0x300
    9c7a:	d00e      	beq.n	9c9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9c7c:	6870      	ldr	r0, [r6, #4]
    9c7e:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9c82:	b111      	cbz	r1, 9c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5e>
    9c84:	2903      	cmp	r1, #3
    9c86:	d108      	bne.n	9c9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9c88:	e002      	b.n	9c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    9c8a:	f880 908a 	strb.w	r9, [r0, #138]	; 0x8a
    9c8e:	e001      	b.n	9c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa68>
    9c90:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    9c94:	2101      	movs	r1, #1
    9c96:	f7fe fea7 	bl	89e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9c9a:	6870      	ldr	r0, [r6, #4]
    9c9c:	46b0      	mov	r8, r6
    9c9e:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9ca2:	2901      	cmp	r1, #1
    9ca4:	d104      	bne.n	9cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    9ca6:	8869      	ldrh	r1, [r5, #2]
    9ca8:	0549      	lsls	r1, r1, #21
    9caa:	d501      	bpl.n	9cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa84>
    9cac:	f880 b08a 	strb.w	fp, [r0, #138]	; 0x8a
    9cb0:	9900      	ldr	r1, [sp, #0]
    9cb2:	2900      	cmp	r1, #0
    9cb4:	d179      	bne.n	9daa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    9cb6:	78a9      	ldrb	r1, [r5, #2]
    9cb8:	0649      	lsls	r1, r1, #25
    9cba:	d502      	bpl.n	9cc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa96>
    9cbc:	f8a0 41f0 	strh.w	r4, [r0, #496]	; 0x1f0
    9cc0:	e004      	b.n	9ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa0>
    9cc2:	f8b0 11f0 	ldrh.w	r1, [r0, #496]	; 0x1f0
    9cc6:	1c49      	adds	r1, r1, #1
    9cc8:	f8a0 11f0 	strh.w	r1, [r0, #496]	; 0x1f0
    9ccc:	4650      	mov	r0, sl
    9cce:	f7ff fdad 	bl	982c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    9cd2:	ea40 000a 	orr.w	r0, r0, sl
    9cd6:	4682      	mov	sl, r0
    9cd8:	f7ff fd28 	bl	972c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x500>
    9cdc:	f8d8 6004 	ldr.w	r6, [r8, #4]
    9ce0:	f8b6 01d0 	ldrh.w	r0, [r6, #464]	; 0x1d0
    9ce4:	1c40      	adds	r0, r0, #1
    9ce6:	f8a6 01d0 	strh.w	r0, [r6, #464]	; 0x1d0
    9cea:	f896 01d4 	ldrb.w	r0, [r6, #468]	; 0x1d4
    9cee:	b128      	cbz	r0, 9cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad0>
    9cf0:	f7fc fc54 	bl	659c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    9cf4:	b1b0      	cbz	r0, 9d24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9cf6:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9cfa:	e013      	b.n	9d24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9cfc:	f7fc faee 	bl	62dc <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9d00:	b108      	cbz	r0, 9d06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xada>
    9d02:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9d06:	f7fc fae3 	bl	62d0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9d0a:	b158      	cbz	r0, 9d24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9d0c:	f896 01dc 	ldrb.w	r0, [r6, #476]	; 0x1dc
    9d10:	1c40      	adds	r0, r0, #1
    9d12:	b2c0      	uxtb	r0, r0
    9d14:	f886 01dc 	strb.w	r0, [r6, #476]	; 0x1dc
    9d18:	2802      	cmp	r0, #2
    9d1a:	d903      	bls.n	9d24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf8>
    9d1c:	f8a6 41d0 	strh.w	r4, [r6, #464]	; 0x1d0
    9d20:	f886 41dc 	strb.w	r4, [r6, #476]	; 0x1dc
    9d24:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9d28:	4646      	mov	r6, r8
    9d2a:	2301      	movs	r3, #1
    9d2c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9d30:	2100      	movs	r1, #0
    9d32:	3078      	adds	r0, #120	; 0x78
    9d34:	f005 f834 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d38:	b920      	cbnz	r0, 9d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb18>
    9d3a:	6870      	ldr	r0, [r6, #4]
    9d3c:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9d40:	280c      	cmp	r0, #12
    9d42:	d160      	bne.n	9e06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9d44:	6870      	ldr	r0, [r6, #4]
    9d46:	2301      	movs	r3, #1
    9d48:	2100      	movs	r1, #0
    9d4a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9d4e:	3078      	adds	r0, #120	; 0x78
    9d50:	f005 f826 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d54:	b350      	cbz	r0, 9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9d56:	6870      	ldr	r0, [r6, #4]
    9d58:	2301      	movs	r3, #1
    9d5a:	2100      	movs	r1, #0
    9d5c:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9d60:	3078      	adds	r0, #120	; 0x78
    9d62:	f005 f81d 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d66:	b308      	cbz	r0, 9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9d68:	6870      	ldr	r0, [r6, #4]
    9d6a:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9d6e:	2902      	cmp	r1, #2
    9d70:	d149      	bne.n	9e06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9d72:	f890 01dc 	ldrb.w	r0, [r0, #476]	; 0x1dc
    9d76:	b9c8      	cbnz	r0, 9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9d78:	4638      	mov	r0, r7
    9d7a:	f004 faaa 	bl	e2d2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9d7e:	b1a8      	cbz	r0, 9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9d80:	6870      	ldr	r0, [r6, #4]
    9d82:	3078      	adds	r0, #120	; 0x78
    9d84:	f006 fcb6 	bl	106f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9d88:	b980      	cbnz	r0, 9dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9d8a:	6871      	ldr	r1, [r6, #4]
    9d8c:	f8b1 01ca 	ldrh.w	r0, [r1, #458]	; 0x1ca
    9d90:	2801      	cmp	r0, #1
    9d92:	d938      	bls.n	9e06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9d94:	f881 91d2 	strb.w	r9, [r1, #466]	; 0x1d2
    9d98:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    9d9c:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    9da0:	1e83      	subs	r3, r0, #2
    9da2:	429a      	cmp	r2, r3
    9da4:	db03      	blt.n	9dae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    9da6:	2001      	movs	r0, #1
    9da8:	e004      	b.n	9db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    9daa:	e01d      	b.n	9de8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9dac:	e02b      	b.n	9e06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbda>
    9dae:	1a80      	subs	r0, r0, r2
    9db0:	1e40      	subs	r0, r0, #1
    9db2:	b280      	uxth	r0, r0
    9db4:	f8b1 21d0 	ldrh.w	r2, [r1, #464]	; 0x1d0
    9db8:	88ab      	ldrh	r3, [r5, #4]
    9dba:	429a      	cmp	r2, r3
    9dbc:	d301      	bcc.n	9dc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb96>
    9dbe:	2201      	movs	r2, #1
    9dc0:	e002      	b.n	9dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    9dc2:	1a9a      	subs	r2, r3, r2
    9dc4:	1c52      	adds	r2, r2, #1
    9dc6:	b292      	uxth	r2, r2
    9dc8:	4290      	cmp	r0, r2
    9dca:	d900      	bls.n	9dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    9dcc:	4610      	mov	r0, r2
    9dce:	2801      	cmp	r0, #1
    9dd0:	d102      	bne.n	9dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbac>
    9dd2:	bf00      	nop
    9dd4:	f881 41d2 	strb.w	r4, [r1, #466]	; 0x1d2
    9dd8:	6871      	ldr	r1, [r6, #4]
    9dda:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
    9dde:	4410      	add	r0, r2
    9de0:	f8a1 01cc 	strh.w	r0, [r1, #460]	; 0x1cc
    9de4:	f001 f9ca 	bl	b17c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f50>
    9de8:	78a8      	ldrb	r0, [r5, #2]
    9dea:	4652      	mov	r2, sl
    9dec:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9df0:	9800      	ldr	r0, [sp, #0]
    9df2:	f001 f903 	bl	affc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    9df6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9dfa:	f880 41d3 	strb.w	r4, [r0, #467]	; 0x1d3
    9dfe:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9e02:	f7fc b9ad 	b.w	6160 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9e06:	2001      	movs	r0, #1
    9e08:	6871      	ldr	r1, [r6, #4]
    9e0a:	e7e3      	b.n	9dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    9e0c:	20000174 	.word	0x20000174
    9e10:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9e12:	4c58      	ldr	r4, [pc, #352]	; (9f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>)
    9e14:	2301      	movs	r3, #1
    9e16:	2100      	movs	r1, #0
    9e18:	6860      	ldr	r0, [r4, #4]
    9e1a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e1e:	3078      	adds	r0, #120	; 0x78
    9e20:	f004 ffbe 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e24:	2800      	cmp	r0, #0
    9e26:	d07c      	beq.n	9f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    9e28:	6860      	ldr	r0, [r4, #4]
    9e2a:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    9e2e:	2500      	movs	r5, #0
    9e30:	b139      	cbz	r1, 9e42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc16>
    9e32:	2100      	movs	r1, #0
    9e34:	200e      	movs	r0, #14
    9e36:	f000 f89f 	bl	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9e3a:	6860      	ldr	r0, [r4, #4]
    9e3c:	f880 512b 	strb.w	r5, [r0, #299]	; 0x12b
    9e40:	e096      	b.n	9f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9e42:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    9e46:	b119      	cbz	r1, 9e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc24>
    9e48:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    9e4c:	0789      	lsls	r1, r1, #30
    9e4e:	d016      	beq.n	9e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc52>
    9e50:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    9e54:	f88d 1004 	strb.w	r1, [sp, #4]
    9e58:	9901      	ldr	r1, [sp, #4]
    9e5a:	9101      	str	r1, [sp, #4]
    9e5c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9e60:	b141      	cbz	r1, 9e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc48>
    9e62:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    9e66:	f88d 1000 	strb.w	r1, [sp]
    9e6a:	9900      	ldr	r1, [sp, #0]
    9e6c:	9100      	str	r1, [sp, #0]
    9e6e:	f89d 1000 	ldrb.w	r1, [sp]
    9e72:	b189      	cbz	r1, 9e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    9e74:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    9e78:	2901      	cmp	r1, #1
    9e7a:	d030      	beq.n	9ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb2>
    9e7c:	e072      	b.n	9f64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9e7e:	2100      	movs	r1, #0
    9e80:	200c      	movs	r0, #12
    9e82:	f000 f879 	bl	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9e86:	6860      	ldr	r0, [r4, #4]
    9e88:	f810 1fc5 	ldrb.w	r1, [r0, #197]!
    9e8c:	f041 0101 	orr.w	r1, r1, #1
    9e90:	7001      	strb	r1, [r0, #0]
    9e92:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    9e96:	e06b      	b.n	9f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9e98:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9e9c:	2924      	cmp	r1, #36	; 0x24
    9e9e:	d01c      	beq.n	9eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    9ea0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9ea4:	2924      	cmp	r1, #36	; 0x24
    9ea6:	d018      	beq.n	9eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcae>
    9ea8:	f05f 0300 	movs.w	r3, #0
    9eac:	f200 2276 	addw	r2, r0, #630	; 0x276
    9eb0:	f500 718d 	add.w	r1, r0, #282	; 0x11a
    9eb4:	f005 fc33 	bl	f71e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9eb8:	6860      	ldr	r0, [r4, #4]
    9eba:	f880 511a 	strb.w	r5, [r0, #282]	; 0x11a
    9ebe:	2100      	movs	r1, #0
    9ec0:	2014      	movs	r0, #20
    9ec2:	f000 f859 	bl	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9ec6:	6861      	ldr	r1, [r4, #4]
    9ec8:	f101 0030 	add.w	r0, r1, #48	; 0x30
    9ecc:	8bc2      	ldrh	r2, [r0, #30]
    9ece:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    9ed2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9ed4:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    9ed8:	e04a      	b.n	9f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9eda:	2301      	movs	r3, #1
    9edc:	e7e6      	b.n	9eac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    9ede:	f890 1125 	ldrb.w	r1, [r0, #293]	; 0x125
    9ee2:	f88d 1000 	strb.w	r1, [sp]
    9ee6:	9900      	ldr	r1, [sp, #0]
    9ee8:	9100      	str	r1, [sp, #0]
    9eea:	f89d 1000 	ldrb.w	r1, [sp]
    9eee:	bb31      	cbnz	r1, 9f3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    9ef0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9ef4:	2301      	movs	r3, #1
    9ef6:	210b      	movs	r1, #11
    9ef8:	3078      	adds	r0, #120	; 0x78
    9efa:	f004 ff51 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9efe:	b9f0      	cbnz	r0, 9f3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd12>
    9f00:	6860      	ldr	r0, [r4, #4]
    9f02:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    9f06:	f006 fbfd 	bl	10704 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9f0a:	4605      	mov	r5, r0
    9f0c:	6860      	ldr	r0, [r4, #4]
    9f0e:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    9f12:	f006 fbf7 	bl	10704 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9f16:	4606      	mov	r6, r0
    9f18:	6860      	ldr	r0, [r4, #4]
    9f1a:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    9f1e:	4628      	mov	r0, r5
    9f20:	e000      	b.n	9f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf8>
    9f22:	e020      	b.n	9f66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    9f24:	f006 fbf9 	bl	1071a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9f28:	b150      	cbz	r0, 9f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    9f2a:	6860      	ldr	r0, [r4, #4]
    9f2c:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    9f30:	4630      	mov	r0, r6
    9f32:	f006 fbf2 	bl	1071a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9f36:	b118      	cbz	r0, 9f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>
    9f38:	2000      	movs	r0, #0
    9f3a:	f000 f929 	bl	a190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    9f3e:	e011      	b.n	9f64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9f40:	6860      	ldr	r0, [r4, #4]
    9f42:	2301      	movs	r3, #1
    9f44:	2103      	movs	r1, #3
    9f46:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f4a:	3078      	adds	r0, #120	; 0x78
    9f4c:	f004 ff28 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f50:	b940      	cbnz	r0, 9f64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    9f52:	6860      	ldr	r0, [r4, #4]
    9f54:	2301      	movs	r3, #1
    9f56:	2102      	movs	r1, #2
    9f58:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f5c:	3078      	adds	r0, #120	; 0x78
    9f5e:	f004 ff1f 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f62:	b108      	cbz	r0, 9f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3c>
    9f64:	2000      	movs	r0, #0
    9f66:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9f68:	2100      	movs	r1, #0
    9f6a:	2016      	movs	r0, #22
    9f6c:	f000 f804 	bl	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9f70:	2001      	movs	r0, #1
    9f72:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9f74:	20000174 	.word	0x20000174
    9f78:	b570      	push	{r4, r5, r6, lr}
    9f7a:	4c0d      	ldr	r4, [pc, #52]	; (9fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd84>)
    9f7c:	4606      	mov	r6, r0
    9f7e:	460d      	mov	r5, r1
    9f80:	6860      	ldr	r0, [r4, #4]
    9f82:	3078      	adds	r0, #120	; 0x78
    9f84:	f006 fbb6 	bl	106f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9f88:	b120      	cbz	r0, 9f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    9f8a:	f640 2184 	movw	r1, #2692	; 0xa84
    9f8e:	2031      	movs	r0, #49	; 0x31
    9f90:	f7fb faa6 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f94:	6862      	ldr	r2, [r4, #4]
    9f96:	2000      	movs	r0, #0
    9f98:	f882 610c 	strb.w	r6, [r2, #268]	; 0x10c
    9f9c:	b115      	cbz	r5, 9fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9f9e:	f8a2 00c0 	strh.w	r0, [r2, #192]	; 0xc0
    9fa2:	bd70      	pop	{r4, r5, r6, pc}
    9fa4:	f822 0fba 	strh.w	r0, [r2, #186]!
    9fa8:	2001      	movs	r0, #1
    9faa:	7110      	strb	r0, [r2, #4]
    9fac:	bd70      	pop	{r4, r5, r6, pc}
    9fae:	0000      	.short	0x0000
    9fb0:	20000174 	.word	0x20000174
    9fb4:	b538      	push	{r3, r4, r5, lr}
    9fb6:	4c1f      	ldr	r4, [pc, #124]	; (a034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>)
    9fb8:	2500      	movs	r5, #0
    9fba:	6860      	ldr	r0, [r4, #4]
    9fbc:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
    9fc0:	2901      	cmp	r1, #1
    9fc2:	d00a      	beq.n	9fda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    9fc4:	2902      	cmp	r1, #2
    9fc6:	d133      	bne.n	a030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    9fc8:	f890 10c4 	ldrb.w	r1, [r0, #196]	; 0xc4
    9fcc:	b1d9      	cbz	r1, a006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    9fce:	2106      	movs	r1, #6
    9fd0:	f880 110e 	strb.w	r1, [r0, #270]	; 0x10e
    9fd4:	2101      	movs	r1, #1
    9fd6:	2002      	movs	r0, #2
    9fd8:	e025      	b.n	a026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    9fda:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    9fde:	f88d 1000 	strb.w	r1, [sp]
    9fe2:	9900      	ldr	r1, [sp, #0]
    9fe4:	9100      	str	r1, [sp, #0]
    9fe6:	f89d 1000 	ldrb.w	r1, [sp]
    9fea:	2900      	cmp	r1, #0
    9fec:	d120      	bne.n	a030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe04>
    9fee:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
    9ff2:	f500 71f0 	add.w	r1, r0, #480	; 0x1e0
    9ff6:	2200      	movs	r2, #0
    9ff8:	f200 2059 	addw	r0, r0, #601	; 0x259
    9ffc:	f004 fe88 	bl	ed10 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a000:	2101      	movs	r1, #1
    a002:	2005      	movs	r0, #5
    a004:	e00f      	b.n	a026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfa>
    a006:	2203      	movs	r2, #3
    a008:	2106      	movs	r1, #6
    a00a:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
    a00e:	f880 110a 	strb.w	r1, [r0, #266]	; 0x10a
    a012:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    a016:	0880      	lsrs	r0, r0, #2
    a018:	f010 0f01 	tst.w	r0, #1
    a01c:	d001      	beq.n	a022 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf6>
    a01e:	2011      	movs	r0, #17
    a020:	e000      	b.n	a024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdf8>
    a022:	200d      	movs	r0, #13
    a024:	2101      	movs	r1, #1
    a026:	f7ff ffa7 	bl	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    a02a:	6860      	ldr	r0, [r4, #4]
    a02c:	f880 5258 	strb.w	r5, [r0, #600]	; 0x258
    a030:	bd38      	pop	{r3, r4, r5, pc}
    a032:	0000      	.short	0x0000
    a034:	20000174 	.word	0x20000174
    a038:	b570      	push	{r4, r5, r6, lr}
    a03a:	4b2b      	ldr	r3, [pc, #172]	; (a0e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebc>)
    a03c:	4602      	mov	r2, r0
    a03e:	8858      	ldrh	r0, [r3, #2]
    a040:	4310      	orrs	r0, r2
    a042:	8058      	strh	r0, [r3, #2]
    a044:	f103 0010 	add.w	r0, r3, #16
    a048:	2a40      	cmp	r2, #64	; 0x40
    a04a:	6840      	ldr	r0, [r0, #4]
    a04c:	d00d      	beq.n	a06a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3e>
    a04e:	0796      	lsls	r6, r2, #30
    a050:	f04f 0500 	mov.w	r5, #0
    a054:	f04f 0401 	mov.w	r4, #1
    a058:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    a05c:	d50c      	bpl.n	a078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    a05e:	b14e      	cbz	r6, a074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe48>
    a060:	f640 41c9 	movw	r1, #3273	; 0xcc9
    a064:	2031      	movs	r0, #49	; 0x31
    a066:	f7fb fa3b 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a06a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a06e:	2104      	movs	r1, #4
    a070:	f7fe bcba 	b.w	89e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a074:	6099      	str	r1, [r3, #8]
    a076:	e01c      	b.n	a0b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    a078:	b1c6      	cbz	r6, a0ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a07a:	60d9      	str	r1, [r3, #12]
    a07c:	78c9      	ldrb	r1, [r1, #3]
    a07e:	2906      	cmp	r1, #6
    a080:	d002      	beq.n	a088 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    a082:	290b      	cmp	r1, #11
    a084:	d112      	bne.n	a0ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a086:	e009      	b.n	a09c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    a088:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a08c:	2917      	cmp	r1, #23
    a08e:	d10d      	bne.n	a0ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a090:	2100      	movs	r1, #0
    a092:	e9c0 1138 	strd	r1, r1, [r0, #224]	; 0xe0
    a096:	f880 408b 	strb.w	r4, [r0, #139]	; 0x8b
    a09a:	e007      	b.n	a0ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a09c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a0a0:	2911      	cmp	r1, #17
    a0a2:	d103      	bne.n	a0ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe80>
    a0a4:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    a0a8:	f880 40c4 	strb.w	r4, [r0, #196]	; 0xc4
    a0ac:	0791      	lsls	r1, r2, #30
    a0ae:	d516      	bpl.n	a0de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a0b0:	6899      	ldr	r1, [r3, #8]
    a0b2:	78c9      	ldrb	r1, [r1, #3]
    a0b4:	2905      	cmp	r1, #5
    a0b6:	d002      	beq.n	a0be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe92>
    a0b8:	290b      	cmp	r1, #11
    a0ba:	d110      	bne.n	a0de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a0bc:	e009      	b.n	a0d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    a0be:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a0c2:	2915      	cmp	r1, #21
    a0c4:	d10b      	bne.n	a0de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a0c6:	2100      	movs	r1, #0
    a0c8:	e9c0 113a 	strd	r1, r1, [r0, #232]	; 0xe8
    a0cc:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
    a0d0:	e005      	b.n	a0de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a0d2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a0d6:	2910      	cmp	r1, #16
    a0d8:	d101      	bne.n	a0de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    a0da:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
    a0de:	0690      	lsls	r0, r2, #26
    a0e0:	d501      	bpl.n	a0e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    a0e2:	2008      	movs	r0, #8
    a0e4:	7058      	strb	r0, [r3, #1]
    a0e6:	bd70      	pop	{r4, r5, r6, pc}
    a0e8:	20000164 	.word	0x20000164
    a0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0f0:	4c26      	ldr	r4, [pc, #152]	; (a18c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>)
    a0f2:	2501      	movs	r5, #1
    a0f4:	6862      	ldr	r2, [r4, #4]
    a0f6:	f892 0276 	ldrb.w	r0, [r2, #630]	; 0x276
    a0fa:	b108      	cbz	r0, a100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed4>
    a0fc:	2701      	movs	r7, #1
    a0fe:	e000      	b.n	a102 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed6>
    a100:	2700      	movs	r7, #0
    a102:	f892 1277 	ldrb.w	r1, [r2, #631]	; 0x277
    a106:	b109      	cbz	r1, a10c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    a108:	2601      	movs	r6, #1
    a10a:	e000      	b.n	a10e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee2>
    a10c:	2600      	movs	r6, #0
    a10e:	b90f      	cbnz	r7, a114 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>
    a110:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    a114:	b90e      	cbnz	r6, a11a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeee>
    a116:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    a11a:	f102 0366 	add.w	r3, r2, #102	; 0x66
    a11e:	7218      	strb	r0, [r3, #8]
    a120:	7259      	strb	r1, [r3, #9]
    a122:	20ff      	movs	r0, #255	; 0xff
    a124:	7298      	strb	r0, [r3, #10]
    a126:	f892 0124 	ldrb.w	r0, [r2, #292]	; 0x124
    a12a:	2801      	cmp	r0, #1
    a12c:	d001      	beq.n	a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    a12e:	b907      	cbnz	r7, a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf06>
    a130:	b116      	cbz	r6, a138 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    a132:	2000      	movs	r0, #0
    a134:	f000 f82c 	bl	a190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a138:	6860      	ldr	r0, [r4, #4]
    a13a:	3030      	adds	r0, #48	; 0x30
    a13c:	f005 fb60 	bl	f800 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a140:	4607      	mov	r7, r0
    a142:	2105      	movs	r1, #5
    a144:	6860      	ldr	r0, [r4, #4]
    a146:	f7fe fc4f 	bl	89e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a14a:	6860      	ldr	r0, [r4, #4]
    a14c:	3030      	adds	r0, #48	; 0x30
    a14e:	f005 fb57 	bl	f800 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a152:	4606      	mov	r6, r0
    a154:	42b7      	cmp	r7, r6
    a156:	d20a      	bcs.n	a16e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    a158:	f7f8 fd1a 	bl	2b90 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    a15c:	4601      	mov	r1, r0
    a15e:	1bf0      	subs	r0, r6, r7
    a160:	2865      	cmp	r0, #101	; 0x65
    a162:	d200      	bcs.n	a166 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3a>
    a164:	2065      	movs	r0, #101	; 0x65
    a166:	f7f8 fc35 	bl	29d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a16a:	b100      	cbz	r0, a16e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf42>
    a16c:	2500      	movs	r5, #0
    a16e:	6860      	ldr	r0, [r4, #4]
    a170:	f005 faf0 	bl	f754 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a174:	b138      	cbz	r0, a186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf5a>
    a176:	6863      	ldr	r3, [r4, #4]
    a178:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    a17c:	8818      	ldrh	r0, [r3, #0]
    a17e:	f103 0130 	add.w	r1, r3, #48	; 0x30
    a182:	f005 faa4 	bl	f6ce <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a186:	4628      	mov	r0, r5
    a188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a18c:	20000174 	.word	0x20000174
    a190:	b510      	push	{r4, lr}
    a192:	4c11      	ldr	r4, [pc, #68]	; (a1d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>)
    a194:	6861      	ldr	r1, [r4, #4]
    a196:	880a      	ldrh	r2, [r1, #0]
    a198:	f8a1 2188 	strh.w	r2, [r1, #392]	; 0x188
    a19c:	f881 0186 	strb.w	r0, [r1, #390]	; 0x186
    a1a0:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    a1a4:	f006 faae 	bl	10704 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a1a8:	6861      	ldr	r1, [r4, #4]
    a1aa:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    a1ae:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    a1b2:	f006 faa7 	bl	10704 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a1b6:	6861      	ldr	r1, [r4, #4]
    a1b8:	2211      	movs	r2, #17
    a1ba:	f881 018b 	strb.w	r0, [r1, #395]	; 0x18b
    a1be:	f501 70be 	add.w	r0, r1, #380	; 0x17c
    a1c2:	f7fd f9b5 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a1c6:	6861      	ldr	r1, [r4, #4]
    a1c8:	2000      	movs	r0, #0
    a1ca:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    a1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a1d2:	f7fd ba7f 	b.w	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a1d6:	0000      	.short	0x0000
    a1d8:	20000174 	.word	0x20000174
    a1dc:	b570      	push	{r4, r5, r6, lr}
    a1de:	4d0f      	ldr	r5, [pc, #60]	; (a21c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>)
    a1e0:	686c      	ldr	r4, [r5, #4]
    a1e2:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    a1e6:	2920      	cmp	r1, #32
    a1e8:	d002      	beq.n	a1f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    a1ea:	2927      	cmp	r1, #39	; 0x27
    a1ec:	d003      	beq.n	a1f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfca>
    a1ee:	e011      	b.n	a214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfe8>
    a1f0:	f7ff ffce 	bl	a190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a1f4:	e008      	b.n	a208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    a1f6:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
    a1fa:	f104 0078 	add.w	r0, r4, #120	; 0x78
    a1fe:	2301      	movs	r3, #1
    a200:	210b      	movs	r1, #11
    a202:	f004 fdcd 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a206:	b138      	cbz	r0, a218 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfec>
    a208:	6869      	ldr	r1, [r5, #4]
    a20a:	2000      	movs	r0, #0
    a20c:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a210:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a214:	2000      	movs	r0, #0
    a216:	bd70      	pop	{r4, r5, r6, pc}
    a218:	202a      	movs	r0, #42	; 0x2a
    a21a:	e7e9      	b.n	a1f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    a21c:	20000174 	.word	0x20000174
    a220:	b570      	push	{r4, r5, r6, lr}
    a222:	4c17      	ldr	r4, [pc, #92]	; (a280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1054>)
    a224:	2301      	movs	r3, #1
    a226:	2100      	movs	r1, #0
    a228:	6860      	ldr	r0, [r4, #4]
    a22a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a22e:	3078      	adds	r0, #120	; 0x78
    a230:	f004 fdb6 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a234:	b1b0      	cbz	r0, a264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1038>
    a236:	f1a4 0510 	sub.w	r5, r4, #16
    a23a:	68e8      	ldr	r0, [r5, #12]
    a23c:	f005 f809 	bl	f252 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    a240:	6861      	ldr	r1, [r4, #4]
    a242:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a246:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a24a:	f006 fa74 	bl	10736 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a24e:	b158      	cbz	r0, a268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x103c>
    a250:	6861      	ldr	r1, [r4, #4]
    a252:	2028      	movs	r0, #40	; 0x28
    a254:	2208      	movs	r2, #8
    a256:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a25a:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a25e:	f7fd f967 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a262:	e00b      	b.n	a27c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    a264:	2001      	movs	r0, #1
    a266:	bd70      	pop	{r4, r5, r6, pc}
    a268:	6861      	ldr	r1, [r4, #4]
    a26a:	68e8      	ldr	r0, [r5, #12]
    a26c:	f201 2176 	addw	r1, r1, #630	; 0x276
    a270:	f004 ffea 	bl	f248 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    a274:	6861      	ldr	r1, [r4, #4]
    a276:	200b      	movs	r0, #11
    a278:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a27c:	2000      	movs	r0, #0
    a27e:	bd70      	pop	{r4, r5, r6, pc}
    a280:	20000174 	.word	0x20000174
    a284:	b570      	push	{r4, r5, r6, lr}
    a286:	4d2b      	ldr	r5, [pc, #172]	; (a334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1108>)
    a288:	2301      	movs	r3, #1
    a28a:	2100      	movs	r1, #0
    a28c:	6868      	ldr	r0, [r5, #4]
    a28e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a292:	3078      	adds	r0, #120	; 0x78
    a294:	f004 fd84 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a298:	b1d8      	cbz	r0, a2d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a6>
    a29a:	f1a5 0410 	sub.w	r4, r5, #16
    a29e:	2100      	movs	r1, #0
    a2a0:	68e0      	ldr	r0, [r4, #12]
    a2a2:	f004 ffa9 	bl	f1f8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    a2a6:	b1b0      	cbz	r0, a2d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10aa>
    a2a8:	68e0      	ldr	r0, [r4, #12]
    a2aa:	6869      	ldr	r1, [r5, #4]
    a2ac:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    a2b0:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a2b4:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a2b8:	f006 fa3d 	bl	10736 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a2bc:	b178      	cbz	r0, a2de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b2>
    a2be:	6869      	ldr	r1, [r5, #4]
    a2c0:	2028      	movs	r0, #40	; 0x28
    a2c2:	2208      	movs	r2, #8
    a2c4:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a2c8:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a2cc:	f7fd f930 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a2d0:	e02e      	b.n	a330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1104>
    a2d2:	2001      	movs	r0, #1
    a2d4:	bd70      	pop	{r4, r5, r6, pc}
    a2d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a2da:	f000 b8f5 	b.w	a4c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a2de:	68e0      	ldr	r0, [r4, #12]
    a2e0:	f004 ffba 	bl	f258 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    a2e4:	f004 fd3f 	bl	ed66 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a2e8:	4606      	mov	r6, r0
    a2ea:	6868      	ldr	r0, [r5, #4]
    a2ec:	4631      	mov	r1, r6
    a2ee:	f8c0 627c 	str.w	r6, [r0, #636]	; 0x27c
    a2f2:	68e0      	ldr	r0, [r4, #12]
    a2f4:	7900      	ldrb	r0, [r0, #4]
    a2f6:	f004 fecf 	bl	f098 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a2fa:	6869      	ldr	r1, [r5, #4]
    a2fc:	f8a1 0276 	strh.w	r0, [r1, #630]	; 0x276
    a300:	68e0      	ldr	r0, [r4, #12]
    a302:	4631      	mov	r1, r6
    a304:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    a308:	f004 fec2 	bl	f090 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    a30c:	6869      	ldr	r1, [r5, #4]
    a30e:	f8c1 0278 	str.w	r0, [r1, #632]	; 0x278
    a312:	68e0      	ldr	r0, [r4, #12]
    a314:	f004 ffa3 	bl	f25e <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    a318:	6869      	ldr	r1, [r5, #4]
    a31a:	f8a1 0280 	strh.w	r0, [r1, #640]	; 0x280
    a31e:	68e0      	ldr	r0, [r4, #12]
    a320:	f004 ffa0 	bl	f264 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    a324:	6869      	ldr	r1, [r5, #4]
    a326:	f8a1 0282 	strh.w	r0, [r1, #642]	; 0x282
    a32a:	200d      	movs	r0, #13
    a32c:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a330:	2000      	movs	r0, #0
    a332:	bd70      	pop	{r4, r5, r6, pc}
    a334:	20000174 	.word	0x20000174
    a338:	b538      	push	{r3, r4, r5, lr}
    a33a:	4c2c      	ldr	r4, [pc, #176]	; (a3ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    a33c:	2301      	movs	r3, #1
    a33e:	2100      	movs	r1, #0
    a340:	6860      	ldr	r0, [r4, #4]
    a342:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a346:	3078      	adds	r0, #120	; 0x78
    a348:	f004 fd2a 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a34c:	b970      	cbnz	r0, a36c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    a34e:	6860      	ldr	r0, [r4, #4]
    a350:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a354:	2a12      	cmp	r2, #18
    a356:	d009      	beq.n	a36c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>
    a358:	2301      	movs	r3, #1
    a35a:	2105      	movs	r1, #5
    a35c:	3078      	adds	r0, #120	; 0x78
    a35e:	f004 fd1f 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a362:	b108      	cbz	r0, a368 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113c>
    a364:	2008      	movs	r0, #8
    a366:	bd38      	pop	{r3, r4, r5, pc}
    a368:	2001      	movs	r0, #1
    a36a:	bd38      	pop	{r3, r4, r5, pc}
    a36c:	6860      	ldr	r0, [r4, #4]
    a36e:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
    a372:	b908      	cbnz	r0, a378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114c>
    a374:	f7ff f85c 	bl	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a378:	4d1c      	ldr	r5, [pc, #112]	; (a3ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>)
    a37a:	6861      	ldr	r1, [r4, #4]
    a37c:	3d10      	subs	r5, #16
    a37e:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
    a382:	68e8      	ldr	r0, [r5, #12]
    a384:	f004 ff7d 	bl	f282 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    a388:	6861      	ldr	r1, [r4, #4]
    a38a:	68e8      	ldr	r0, [r5, #12]
    a38c:	f501 7180 	add.w	r1, r1, #256	; 0x100
    a390:	f004 ff6e 	bl	f270 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    a394:	6861      	ldr	r1, [r4, #4]
    a396:	f891 028c 	ldrb.w	r0, [r1, #652]	; 0x28c
    a39a:	f88d 0000 	strb.w	r0, [sp]
    a39e:	9800      	ldr	r0, [sp, #0]
    a3a0:	9000      	str	r0, [sp, #0]
    a3a2:	f89d 0000 	ldrb.w	r0, [sp]
    a3a6:	b120      	cbz	r0, a3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1186>
    a3a8:	f240 21a2 	movw	r1, #674	; 0x2a2
    a3ac:	2031      	movs	r0, #49	; 0x31
    a3ae:	f7fb f897 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3b2:	8808      	ldrh	r0, [r1, #0]
    a3b4:	f8a1 028e 	strh.w	r0, [r1, #654]	; 0x28e
    a3b8:	f501 7124 	add.w	r1, r1, #656	; 0x290
    a3bc:	68e8      	ldr	r0, [r5, #12]
    a3be:	f004 ff5b 	bl	f278 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    a3c2:	6861      	ldr	r1, [r4, #4]
    a3c4:	68e8      	ldr	r0, [r5, #12]
    a3c6:	f501 7126 	add.w	r1, r1, #664	; 0x298
    a3ca:	f004 ff4e 	bl	f26a <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    a3ce:	6861      	ldr	r1, [r4, #4]
    a3d0:	2207      	movs	r2, #7
    a3d2:	f501 7021 	add.w	r0, r1, #644	; 0x284
    a3d6:	f7fd f8ab 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a3da:	6861      	ldr	r1, [r4, #4]
    a3dc:	2014      	movs	r0, #20
    a3de:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a3e2:	f7fd f977 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a3e6:	2000      	movs	r0, #0
    a3e8:	bd38      	pop	{r3, r4, r5, pc}
    a3ea:	0000      	.short	0x0000
    a3ec:	20000174 	.word	0x20000174
    a3f0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a3f2:	4c13      	ldr	r4, [pc, #76]	; (a440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    a3f4:	6860      	ldr	r0, [r4, #4]
    a3f6:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a3fa:	07c0      	lsls	r0, r0, #31
    a3fc:	d001      	beq.n	a402 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11d6>
    a3fe:	2001      	movs	r0, #1
    a400:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a402:	480f      	ldr	r0, [pc, #60]	; (a440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>)
    a404:	4669      	mov	r1, sp
    a406:	3810      	subs	r0, #16
    a408:	68c0      	ldr	r0, [r0, #12]
    a40a:	f004 ff40 	bl	f28e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    a40e:	f001 fad9 	bl	b9c4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a412:	f644 122f 	movw	r2, #18735	; 0x492f
    a416:	4010      	ands	r0, r2
    a418:	e9dd 5200 	ldrd	r5, r2, [sp]
    a41c:	6863      	ldr	r3, [r4, #4]
    a41e:	4005      	ands	r5, r0
    a420:	f001 0106 	and.w	r1, r1, #6
    a424:	f843 5fd4 	str.w	r5, [r3, #212]!
    a428:	400a      	ands	r2, r1
    a42a:	605a      	str	r2, [r3, #4]
    a42c:	f7ff f800 	bl	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a430:	6860      	ldr	r0, [r4, #4]
    a432:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a436:	f041 0101 	orr.w	r1, r1, #1
    a43a:	7001      	strb	r1, [r0, #0]
    a43c:	2000      	movs	r0, #0
    a43e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a440:	20000174 	.word	0x20000174
    a444:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a448:	4d1e      	ldr	r5, [pc, #120]	; (a4c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    a44a:	2301      	movs	r3, #1
    a44c:	2107      	movs	r1, #7
    a44e:	6868      	ldr	r0, [r5, #4]
    a450:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a454:	3078      	adds	r0, #120	; 0x78
    a456:	f004 fca3 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a45a:	b380      	cbz	r0, a4be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1292>
    a45c:	f1a5 0010 	sub.w	r0, r5, #16
    a460:	4669      	mov	r1, sp
    a462:	68c0      	ldr	r0, [r0, #12]
    a464:	f004 ff18 	bl	f298 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a468:	686e      	ldr	r6, [r5, #4]
    a46a:	f89d 7004 	ldrb.w	r7, [sp, #4]
    a46e:	36d4      	adds	r6, #212	; 0xd4
    a470:	9c00      	ldr	r4, [sp, #0]
    a472:	f001 faa7 	bl	b9c4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a476:	4004      	ands	r4, r0
    a478:	f644 102f 	movw	r0, #18735	; 0x492f
    a47c:	4004      	ands	r4, r0
    a47e:	400f      	ands	r7, r1
    a480:	f007 0006 	and.w	r0, r7, #6
    a484:	6034      	str	r4, [r6, #0]
    a486:	6070      	str	r0, [r6, #4]
    a488:	6869      	ldr	r1, [r5, #4]
    a48a:	2000      	movs	r0, #0
    a48c:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a490:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a494:	880a      	ldrh	r2, [r1, #0]
    a496:	f8a1 2198 	strh.w	r2, [r1, #408]	; 0x198
    a49a:	f881 0196 	strb.w	r0, [r1, #406]	; 0x196
    a49e:	9a00      	ldr	r2, [sp, #0]
    a4a0:	f8c1 219a 	str.w	r2, [r1, #410]	; 0x19a
    a4a4:	9a01      	ldr	r2, [sp, #4]
    a4a6:	f8c1 219e 	str.w	r2, [r1, #414]	; 0x19e
    a4aa:	f501 70c6 	add.w	r0, r1, #396	; 0x18c
    a4ae:	2205      	movs	r2, #5
    a4b0:	f7fd f83e 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a4b4:	f7fd f90e 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a4b8:	2000      	movs	r0, #0
    a4ba:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a4be:	e7ff      	b.n	a4c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    a4c0:	2001      	movs	r0, #1
    a4c2:	e7fa      	b.n	a4ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128e>
    a4c4:	20000174 	.word	0x20000174
    a4c8:	480b      	ldr	r0, [pc, #44]	; (a4f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    a4ca:	b510      	push	{r4, lr}
    a4cc:	6840      	ldr	r0, [r0, #4]
    a4ce:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a4d2:	070a      	lsls	r2, r1, #28
    a4d4:	d501      	bpl.n	a4da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ae>
    a4d6:	2001      	movs	r0, #1
    a4d8:	bd10      	pop	{r4, pc}
    a4da:	f041 0108 	orr.w	r1, r1, #8
    a4de:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a4e2:	4905      	ldr	r1, [pc, #20]	; (a4f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12cc>)
    a4e4:	3910      	subs	r1, #16
    a4e6:	68c9      	ldr	r1, [r1, #12]
    a4e8:	78c9      	ldrb	r1, [r1, #3]
    a4ea:	f880 1108 	strb.w	r1, [r0, #264]	; 0x108
    a4ee:	f7fe ff9f 	bl	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a4f2:	2000      	movs	r0, #0
    a4f4:	bd10      	pop	{r4, pc}
    a4f6:	0000      	.short	0x0000
    a4f8:	20000174 	.word	0x20000174
    a4fc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a500:	4d36      	ldr	r5, [pc, #216]	; (a5dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    a502:	6868      	ldr	r0, [r5, #4]
    a504:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a508:	f010 0f30 	tst.w	r0, #48	; 0x30
    a50c:	d002      	beq.n	a514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    a50e:	2001      	movs	r0, #1
    a510:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a514:	4c31      	ldr	r4, [pc, #196]	; (a5dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b0>)
    a516:	3c10      	subs	r4, #16
    a518:	68e0      	ldr	r0, [r4, #12]
    a51a:	f004 fed8 	bl	f2ce <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a51e:	b328      	cbz	r0, a56c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1340>
    a520:	68e0      	ldr	r0, [r4, #12]
    a522:	f004 fec6 	bl	f2b2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a526:	4607      	mov	r7, r0
    a528:	68e0      	ldr	r0, [r4, #12]
    a52a:	f004 fec6 	bl	f2ba <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a52e:	4680      	mov	r8, r0
    a530:	68e0      	ldr	r0, [r4, #12]
    a532:	f004 febc 	bl	f2ae <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a536:	4606      	mov	r6, r0
    a538:	68e0      	ldr	r0, [r4, #12]
    a53a:	f004 febc 	bl	f2b6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a53e:	4601      	mov	r1, r0
    a540:	9700      	str	r7, [sp, #0]
    a542:	6868      	ldr	r0, [r5, #4]
    a544:	4643      	mov	r3, r8
    a546:	4632      	mov	r2, r6
    a548:	3030      	adds	r0, #48	; 0x30
    a54a:	f005 f993 	bl	f874 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a54e:	78a0      	ldrb	r0, [r4, #2]
    a550:	0781      	lsls	r1, r0, #30
    a552:	f04f 0001 	mov.w	r0, #1
    a556:	d503      	bpl.n	a560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1334>
    a558:	68a1      	ldr	r1, [r4, #8]
    a55a:	78c9      	ldrb	r1, [r1, #3]
    a55c:	2914      	cmp	r1, #20
    a55e:	d009      	beq.n	a574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    a560:	6869      	ldr	r1, [r5, #4]
    a562:	f891 1085 	ldrb.w	r1, [r1, #133]	; 0x85
    a566:	291c      	cmp	r1, #28
    a568:	d004      	beq.n	a574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>
    a56a:	e006      	b.n	a57a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    a56c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a570:	f7ff bfaa 	b.w	a4c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a574:	6869      	ldr	r1, [r5, #4]
    a576:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    a57a:	686b      	ldr	r3, [r5, #4]
    a57c:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    a580:	2801      	cmp	r0, #1
    a582:	d011      	beq.n	a5a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    a584:	f893 011b 	ldrb.w	r0, [r3, #283]	; 0x11b
    a588:	f88d 0004 	strb.w	r0, [sp, #4]
    a58c:	9801      	ldr	r0, [sp, #4]
    a58e:	9001      	str	r0, [sp, #4]
    a590:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a594:	b940      	cbnz	r0, a5a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137c>
    a596:	f893 011a 	ldrb.w	r0, [r3, #282]	; 0x11a
    a59a:	f88d 0000 	strb.w	r0, [sp]
    a59e:	9800      	ldr	r0, [sp, #0]
    a5a0:	9000      	str	r0, [sp, #0]
    a5a2:	f89d 0000 	ldrb.w	r0, [sp]
    a5a6:	b148      	cbz	r0, a5bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>
    a5a8:	f813 0f87 	ldrb.w	r0, [r3, #135]!
    a5ac:	f040 0010 	orr.w	r0, r0, #16
    a5b0:	f883 0000 	strb.w	r0, [r3]
    a5b4:	f7fe ff3c 	bl	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a5b8:	2000      	movs	r0, #0
    a5ba:	e7a9      	b.n	a510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    a5bc:	f893 0087 	ldrb.w	r0, [r3, #135]	; 0x87
    a5c0:	f503 72ad 	add.w	r2, r3, #346	; 0x15a
    a5c4:	f040 0020 	orr.w	r0, r0, #32
    a5c8:	f883 0087 	strb.w	r0, [r3, #135]	; 0x87
    a5cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
    a5d0:	8818      	ldrh	r0, [r3, #0]
    a5d2:	f005 f956 	bl	f882 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a5d6:	f7fd f87d 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a5da:	e7eb      	b.n	a5b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    a5dc:	20000174 	.word	0x20000174
    a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a5e4:	4c1b      	ldr	r4, [pc, #108]	; (a654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>)
    a5e6:	2301      	movs	r3, #1
    a5e8:	210a      	movs	r1, #10
    a5ea:	6860      	ldr	r0, [r4, #4]
    a5ec:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a5f0:	3078      	adds	r0, #120	; 0x78
    a5f2:	f004 fbd5 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a5f6:	b358      	cbz	r0, a650 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    a5f8:	f1a4 0510 	sub.w	r5, r4, #16
    a5fc:	68e8      	ldr	r0, [r5, #12]
    a5fe:	f004 fe66 	bl	f2ce <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a602:	b1d0      	cbz	r0, a63a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140e>
    a604:	68e8      	ldr	r0, [r5, #12]
    a606:	f004 fe54 	bl	f2b2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a60a:	4680      	mov	r8, r0
    a60c:	68e8      	ldr	r0, [r5, #12]
    a60e:	f004 fe54 	bl	f2ba <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a612:	4607      	mov	r7, r0
    a614:	68e8      	ldr	r0, [r5, #12]
    a616:	f004 fe4a 	bl	f2ae <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a61a:	4606      	mov	r6, r0
    a61c:	68e8      	ldr	r0, [r5, #12]
    a61e:	f004 fe4a 	bl	f2b6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a622:	4601      	mov	r1, r0
    a624:	f8cd 8000 	str.w	r8, [sp]
    a628:	6860      	ldr	r0, [r4, #4]
    a62a:	463b      	mov	r3, r7
    a62c:	4632      	mov	r2, r6
    a62e:	3030      	adds	r0, #48	; 0x30
    a630:	f005 f920 	bl	f874 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a634:	6860      	ldr	r0, [r4, #4]
    a636:	f005 f88d 	bl	f754 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a63a:	6861      	ldr	r1, [r4, #4]
    a63c:	2000      	movs	r0, #0
    a63e:	f881 00be 	strb.w	r0, [r1, #190]	; 0xbe
    a642:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a646:	f7ff f8d9 	bl	97fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    a64a:	2000      	movs	r0, #0
    a64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a650:	2001      	movs	r0, #1
    a652:	e7fb      	b.n	a64c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1420>
    a654:	20000174 	.word	0x20000174
    a658:	b510      	push	{r4, lr}
    a65a:	4c09      	ldr	r4, [pc, #36]	; (a680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1454>)
    a65c:	6860      	ldr	r0, [r4, #4]
    a65e:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a662:	0740      	lsls	r0, r0, #29
    a664:	d501      	bpl.n	a66a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x143e>
    a666:	2001      	movs	r0, #1
    a668:	bd10      	pop	{r4, pc}
    a66a:	f7fe fee1 	bl	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a66e:	6860      	ldr	r0, [r4, #4]
    a670:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a674:	f041 0104 	orr.w	r1, r1, #4
    a678:	7001      	strb	r1, [r0, #0]
    a67a:	2000      	movs	r0, #0
    a67c:	bd10      	pop	{r4, pc}
    a67e:	0000      	.short	0x0000
    a680:	20000174 	.word	0x20000174
    a684:	b510      	push	{r4, lr}
    a686:	4c0a      	ldr	r4, [pc, #40]	; (a6b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    a688:	2301      	movs	r3, #1
    a68a:	2109      	movs	r1, #9
    a68c:	6860      	ldr	r0, [r4, #4]
    a68e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a692:	3078      	adds	r0, #120	; 0x78
    a694:	f004 fb84 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a698:	2800      	cmp	r0, #0
    a69a:	d007      	beq.n	a6ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1480>
    a69c:	6860      	ldr	r0, [r4, #4]
    a69e:	2100      	movs	r1, #0
    a6a0:	f800 1fb2 	strb.w	r1, [r0, #178]!
    a6a4:	7301      	strb	r1, [r0, #12]
    a6a6:	f800 1c2d 	strb.w	r1, [r0, #-45]
    a6aa:	4608      	mov	r0, r1
    a6ac:	bd10      	pop	{r4, pc}
    a6ae:	0000      	.short	0x0000
    a6b0:	20000174 	.word	0x20000174
    a6b4:	b510      	push	{r4, lr}
    a6b6:	4c0f      	ldr	r4, [pc, #60]	; (a6f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>)
    a6b8:	2301      	movs	r3, #1
    a6ba:	2100      	movs	r1, #0
    a6bc:	6860      	ldr	r0, [r4, #4]
    a6be:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a6c2:	3078      	adds	r0, #120	; 0x78
    a6c4:	f004 fb6c 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6c8:	b138      	cbz	r0, a6da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ae>
    a6ca:	f7fe feb1 	bl	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a6ce:	6861      	ldr	r1, [r4, #4]
    a6d0:	2010      	movs	r0, #16
    a6d2:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a6d6:	2000      	movs	r0, #0
    a6d8:	bd10      	pop	{r4, pc}
    a6da:	6860      	ldr	r0, [r4, #4]
    a6dc:	2301      	movs	r3, #1
    a6de:	2105      	movs	r1, #5
    a6e0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a6e4:	3078      	adds	r0, #120	; 0x78
    a6e6:	f004 fb5b 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6ea:	b108      	cbz	r0, a6f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c4>
    a6ec:	2008      	movs	r0, #8
    a6ee:	bd10      	pop	{r4, pc}
    a6f0:	2001      	movs	r0, #1
    a6f2:	bd10      	pop	{r4, pc}
    a6f4:	20000174 	.word	0x20000174
    a6f8:	4806      	ldr	r0, [pc, #24]	; (a714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e8>)
    a6fa:	6840      	ldr	r0, [r0, #4]
    a6fc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a700:	2911      	cmp	r1, #17
    a702:	d001      	beq.n	a708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14dc>
    a704:	2002      	movs	r0, #2
    a706:	4770      	bx	lr
    a708:	2112      	movs	r1, #18
    a70a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a70e:	2000      	movs	r0, #0
    a710:	4770      	bx	lr
    a712:	0000      	.short	0x0000
    a714:	20000174 	.word	0x20000174
    a718:	b538      	push	{r3, r4, r5, lr}
    a71a:	4c36      	ldr	r4, [pc, #216]	; (a7f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    a71c:	2301      	movs	r3, #1
    a71e:	210b      	movs	r1, #11
    a720:	6860      	ldr	r0, [r4, #4]
    a722:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a726:	3078      	adds	r0, #120	; 0x78
    a728:	f004 fb3a 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a72c:	bb80      	cbnz	r0, a790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1564>
    a72e:	6860      	ldr	r0, [r4, #4]
    a730:	2301      	movs	r3, #1
    a732:	2100      	movs	r1, #0
    a734:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a738:	3078      	adds	r0, #120	; 0x78
    a73a:	f004 fb31 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a73e:	b328      	cbz	r0, a78c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1560>
    a740:	6860      	ldr	r0, [r4, #4]
    a742:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a746:	2824      	cmp	r0, #36	; 0x24
    a748:	d023      	beq.n	a792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    a74a:	f1a4 0510 	sub.w	r5, r4, #16
    a74e:	68e8      	ldr	r0, [r5, #12]
    a750:	f004 fdd9 	bl	f306 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a754:	b1f8      	cbz	r0, a796 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156a>
    a756:	6860      	ldr	r0, [r4, #4]
    a758:	2102      	movs	r1, #2
    a75a:	30d4      	adds	r0, #212	; 0xd4
    a75c:	f005 ff79 	bl	10652 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a760:	68e8      	ldr	r0, [r5, #12]
    a762:	7941      	ldrb	r1, [r0, #5]
    a764:	f001 0207 	and.w	r2, r1, #7
    a768:	6861      	ldr	r1, [r4, #4]
    a76a:	f881 2067 	strb.w	r2, [r1, #103]	; 0x67
    a76e:	7900      	ldrb	r0, [r0, #4]
    a770:	f000 0007 	and.w	r0, r0, #7
    a774:	f881 0066 	strb.w	r0, [r1, #102]	; 0x66
    a778:	f891 3125 	ldrb.w	r3, [r1, #293]	; 0x125
    a77c:	f88d 3000 	strb.w	r3, [sp]
    a780:	9b00      	ldr	r3, [sp, #0]
    a782:	9300      	str	r3, [sp, #0]
    a784:	f89d 3000 	ldrb.w	r3, [sp]
    a788:	bb5b      	cbnz	r3, a7e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a78a:	e008      	b.n	a79e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    a78c:	2001      	movs	r0, #1
    a78e:	bd38      	pop	{r3, r4, r5, pc}
    a790:	e7ff      	b.n	a792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1566>
    a792:	2020      	movs	r0, #32
    a794:	e7fb      	b.n	a78e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a79a:	f7ff be95 	b.w	a4c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a79e:	f891 3124 	ldrb.w	r3, [r1, #292]	; 0x124
    a7a2:	2b01      	cmp	r3, #1
    a7a4:	d01d      	beq.n	a7e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a7a6:	f101 036e 	add.w	r3, r1, #110	; 0x6e
    a7aa:	785d      	ldrb	r5, [r3, #1]
    a7ac:	4285      	cmp	r5, r0
    a7ae:	d106      	bne.n	a7be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    a7b0:	7818      	ldrb	r0, [r3, #0]
    a7b2:	4290      	cmp	r0, r2
    a7b4:	d103      	bne.n	a7be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1592>
    a7b6:	2002      	movs	r0, #2
    a7b8:	f881 0124 	strb.w	r0, [r1, #292]	; 0x124
    a7bc:	e011      	b.n	a7e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b6>
    a7be:	f501 70bc 	add.w	r0, r1, #376	; 0x178
    a7c2:	880a      	ldrh	r2, [r1, #0]
    a7c4:	f820 2b02 	strh.w	r2, [r0], #2
    a7c8:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    a7cc:	f800 2b01 	strb.w	r2, [r0], #1
    a7d0:	f891 2067 	ldrb.w	r2, [r1, #103]	; 0x67
    a7d4:	f800 290d 	strb.w	r2, [r0], #-13
    a7d8:	221b      	movs	r2, #27
    a7da:	f7fc fea9 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a7de:	f7fc ff79 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a7e2:	6861      	ldr	r1, [r4, #4]
    a7e4:	2021      	movs	r0, #33	; 0x21
    a7e6:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a7ea:	f7fe fe21 	bl	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a7ee:	2000      	movs	r0, #0
    a7f0:	e7cd      	b.n	a78e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a7f2:	0000      	.short	0x0000
    a7f4:	20000174 	.word	0x20000174
    a7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a7fc:	4951      	ldr	r1, [pc, #324]	; (a944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    a7fe:	6848      	ldr	r0, [r1, #4]
    a800:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a804:	2a20      	cmp	r2, #32
    a806:	d009      	beq.n	a81c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>
    a808:	f05f 0600 	movs.w	r6, #0
    a80c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a810:	2a22      	cmp	r2, #34	; 0x22
    a812:	d005      	beq.n	a820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f4>
    a814:	b3a6      	cbz	r6, a880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1654>
    a816:	f100 0485 	add.w	r4, r0, #133	; 0x85
    a81a:	e003      	b.n	a824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>
    a81c:	2601      	movs	r6, #1
    a81e:	e7f5      	b.n	a80c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15e0>
    a820:	f100 0486 	add.w	r4, r0, #134	; 0x86
    a824:	4688      	mov	r8, r1
    a826:	2102      	movs	r1, #2
    a828:	30d4      	adds	r0, #212	; 0xd4
    a82a:	f005 ff12 	bl	10652 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a82e:	4d45      	ldr	r5, [pc, #276]	; (a944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1718>)
    a830:	3d10      	subs	r5, #16
    a832:	68e8      	ldr	r0, [r5, #12]
    a834:	f004 fd71 	bl	f31a <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a838:	2700      	movs	r7, #0
    a83a:	b328      	cbz	r0, a888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a83c:	4631      	mov	r1, r6
    a83e:	68e8      	ldr	r0, [r5, #12]
    a840:	f7fe fec8 	bl	95d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    a844:	b300      	cbz	r0, a888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x165c>
    a846:	4646      	mov	r6, r8
    a848:	466a      	mov	r2, sp
    a84a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a84e:	68e9      	ldr	r1, [r5, #12]
    a850:	f004 fbd8 	bl	f004 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a854:	b3a8      	cbz	r0, a8c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1696>
    a856:	68e8      	ldr	r0, [r5, #12]
    a858:	f004 fd31 	bl	f2be <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a85c:	6871      	ldr	r1, [r6, #4]
    a85e:	f8a1 0274 	strh.w	r0, [r1, #628]	; 0x274
    a862:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a866:	f005 ff66 	bl	10736 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a86a:	b358      	cbz	r0, a8c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    a86c:	6871      	ldr	r1, [r6, #4]
    a86e:	2028      	movs	r0, #40	; 0x28
    a870:	2208      	movs	r2, #8
    a872:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    a876:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    a87a:	f7fc fe59 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a87e:	e055      	b.n	a92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a880:	e7ff      	b.n	a882 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1656>
    a882:	2002      	movs	r0, #2
    a884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a888:	f8d8 0004 	ldr.w	r0, [r8, #4]
    a88c:	f04f 0900 	mov.w	r9, #0
    a890:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a894:	2901      	cmp	r1, #1
    a896:	d016      	beq.n	a8c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169a>
    a898:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    a89c:	b1fe      	cbz	r6, a8de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    a89e:	68e8      	ldr	r0, [r5, #12]
    a8a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    a8a4:	2201      	movs	r2, #1
    a8a6:	78c0      	ldrb	r0, [r0, #3]
    a8a8:	f881 0109 	strb.w	r0, [r1, #265]	; 0x109
    a8ac:	4082      	lsls	r2, r0
    a8ae:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a8b2:	b160      	cbz	r0, a8ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a2>
    a8b4:	200a      	movs	r0, #10
    a8b6:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a8ba:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    a8be:	b9a0      	cbnz	r0, a8ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16be>
    a8c0:	e008      	b.n	a8d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a8>
    a8c2:	e014      	b.n	a8ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c2>
    a8c4:	e027      	b.n	a916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ea>
    a8c6:	201e      	movs	r0, #30
    a8c8:	f7ff fc62 	bl	a190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a8cc:	e7e6      	b.n	a89c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    a8ce:	f240 31fd 	movw	r1, #1021	; 0x3fd
    a8d2:	e001      	b.n	a8d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ac>
    a8d4:	f240 4105 	movw	r1, #1029	; 0x405
    a8d8:	2031      	movs	r0, #49	; 0x31
    a8da:	f7fa fe01 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8de:	7027      	strb	r7, [r4, #0]
    a8e0:	f7fe fdb2 	bl	9448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a8e4:	f7ff fdf0 	bl	a4c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x129c>
    a8e8:	4681      	mov	r9, r0
    a8ea:	4648      	mov	r0, r9
    a8ec:	e7ca      	b.n	a884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a8ee:	6870      	ldr	r0, [r6, #4]
    a8f0:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
    a8f4:	2901      	cmp	r1, #1
    a8f6:	d009      	beq.n	a90c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e0>
    a8f8:	f880 7124 	strb.w	r7, [r0, #292]	; 0x124
    a8fc:	6870      	ldr	r0, [r6, #4]
    a8fe:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a902:	42a1      	cmp	r1, r4
    a904:	d112      	bne.n	a92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a906:	f880 7086 	strb.w	r7, [r0, #134]	; 0x86
    a90a:	e00f      	b.n	a92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1700>
    a90c:	2000      	movs	r0, #0
    a90e:	f7ff fc3f 	bl	a190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    a912:	7027      	strb	r7, [r4, #0]
    a914:	e7f2      	b.n	a8fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    a916:	6870      	ldr	r0, [r6, #4]
    a918:	f89d 1000 	ldrb.w	r1, [sp]
    a91c:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
    a920:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a924:	f880 1277 	strb.w	r1, [r0, #631]	; 0x277
    a928:	2024      	movs	r0, #36	; 0x24
    a92a:	7020      	strb	r0, [r4, #0]
    a92c:	6870      	ldr	r0, [r6, #4]
    a92e:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a932:	42a1      	cmp	r1, r4
    a934:	d102      	bne.n	a93c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>
    a936:	f7fe fd87 	bl	9448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a93a:	e001      	b.n	a940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>
    a93c:	f880 70be 	strb.w	r7, [r0, #190]	; 0xbe
    a940:	2000      	movs	r0, #0
    a942:	e79f      	b.n	a884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1658>
    a944:	20000174 	.word	0x20000174
    a948:	b570      	push	{r4, r5, r6, lr}
    a94a:	480a      	ldr	r0, [pc, #40]	; (a974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a94c:	2102      	movs	r1, #2
    a94e:	6840      	ldr	r0, [r0, #4]
    a950:	30d4      	adds	r0, #212	; 0xd4
    a952:	f005 fe7e 	bl	10652 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x762>
    a956:	4c07      	ldr	r4, [pc, #28]	; (a974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1748>)
    a958:	3c10      	subs	r4, #16
    a95a:	68e0      	ldr	r0, [r4, #12]
    a95c:	f004 fced 	bl	f33a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a960:	4605      	mov	r5, r0
    a962:	68e0      	ldr	r0, [r4, #12]
    a964:	f004 fceb 	bl	f33e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a968:	4601      	mov	r1, r0
    a96a:	4628      	mov	r0, r5
    a96c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a970:	f005 beed 	b.w	1074e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a974:	20000174 	.word	0x20000174
    a978:	4808      	ldr	r0, [pc, #32]	; (a99c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    a97a:	68c0      	ldr	r0, [r0, #12]
    a97c:	7901      	ldrb	r1, [r0, #4]
    a97e:	4807      	ldr	r0, [pc, #28]	; (a99c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>)
    a980:	3010      	adds	r0, #16
    a982:	6840      	ldr	r0, [r0, #4]
    a984:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a988:	2820      	cmp	r0, #32
    a98a:	d005      	beq.n	a998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    a98c:	2827      	cmp	r0, #39	; 0x27
    a98e:	d003      	beq.n	a998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    a990:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    a994:	f005 bedb 	b.w	1074e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a998:	2016      	movs	r0, #22
    a99a:	e7fb      	b.n	a994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>
    a99c:	20000164 	.word	0x20000164
    a9a0:	b510      	push	{r4, lr}
    a9a2:	4c08      	ldr	r4, [pc, #32]	; (a9c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>)
    a9a4:	6860      	ldr	r0, [r4, #4]
    a9a6:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a9aa:	2817      	cmp	r0, #23
    a9ac:	d001      	beq.n	a9b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1786>
    a9ae:	2002      	movs	r0, #2
    a9b0:	bd10      	pop	{r4, pc}
    a9b2:	f7fe fd49 	bl	9448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a9b6:	6861      	ldr	r1, [r4, #4]
    a9b8:	201b      	movs	r0, #27
    a9ba:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a9be:	2000      	movs	r0, #0
    a9c0:	bd10      	pop	{r4, pc}
    a9c2:	0000      	.short	0x0000
    a9c4:	20000174 	.word	0x20000174
    a9c8:	b510      	push	{r4, lr}
    a9ca:	4c0c      	ldr	r4, [pc, #48]	; (a9fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    a9cc:	2301      	movs	r3, #1
    a9ce:	4619      	mov	r1, r3
    a9d0:	6860      	ldr	r0, [r4, #4]
    a9d2:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a9d6:	3078      	adds	r0, #120	; 0x78
    a9d8:	f004 f9e2 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9dc:	b108      	cbz	r0, a9e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b6>
    a9de:	2000      	movs	r0, #0
    a9e0:	bd10      	pop	{r4, pc}
    a9e2:	4806      	ldr	r0, [pc, #24]	; (a9fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d0>)
    a9e4:	3810      	subs	r0, #16
    a9e6:	68c0      	ldr	r0, [r0, #12]
    a9e8:	f004 fc6d 	bl	f2c6 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a9ec:	6861      	ldr	r1, [r4, #4]
    a9ee:	f881 0089 	strb.w	r0, [r1, #137]	; 0x89
    a9f2:	2007      	movs	r0, #7
    a9f4:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    a9f8:	e7f1      	b.n	a9de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    a9fa:	0000      	.short	0x0000
    a9fc:	20000174 	.word	0x20000174
    aa00:	b570      	push	{r4, r5, r6, lr}
    aa02:	4834      	ldr	r0, [pc, #208]	; (aad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    aa04:	4c33      	ldr	r4, [pc, #204]	; (aad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a8>)
    aa06:	2500      	movs	r5, #0
    aa08:	68c0      	ldr	r0, [r0, #12]
    aa0a:	3410      	adds	r4, #16
    aa0c:	6862      	ldr	r2, [r4, #4]
    aa0e:	7901      	ldrb	r1, [r0, #4]
    aa10:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    aa14:	390e      	subs	r1, #14
    aa16:	290a      	cmp	r1, #10
    aa18:	d259      	bcs.n	aace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa1a:	e8df f001 	tbb	[pc, r1]
    aa1e:	5805      	.short	0x5805
    aa20:	581a5858 	.word	0x581a5858
    aa24:	442c5820 	.word	0x442c5820
    aa28:	2804      	cmp	r0, #4
    aa2a:	d150      	bne.n	aace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa2c:	f7fe fe56 	bl	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    aa30:	6860      	ldr	r0, [r4, #4]
    aa32:	2205      	movs	r2, #5
    aa34:	f500 73c6 	add.w	r3, r0, #396	; 0x18c
    aa38:	8801      	ldrh	r1, [r0, #0]
    aa3a:	f8a0 1198 	strh.w	r1, [r0, #408]	; 0x198
    aa3e:	211a      	movs	r1, #26
    aa40:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    aa44:	4601      	mov	r1, r0
    aa46:	4618      	mov	r0, r3
    aa48:	f7fc fd72 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    aa4c:	f7fc fe42 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aa50:	e03d      	b.n	aace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa52:	280e      	cmp	r0, #14
    aa54:	d13b      	bne.n	aace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa56:	f7ff fe15 	bl	a684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1458>
    aa5a:	4605      	mov	r5, r0
    aa5c:	e037      	b.n	aace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa5e:	281c      	cmp	r0, #28
    aa60:	d135      	bne.n	aace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa62:	f7fe fe3b 	bl	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    aa66:	6860      	ldr	r0, [r4, #4]
    aa68:	2105      	movs	r1, #5
    aa6a:	30d4      	adds	r0, #212	; 0xd4
    aa6c:	f005 fde7 	bl	1063e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    aa70:	f7fe fec4 	bl	97fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>
    aa74:	e02b      	b.n	aace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa76:	2820      	cmp	r0, #32
    aa78:	d001      	beq.n	aa7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    aa7a:	2827      	cmp	r0, #39	; 0x27
    aa7c:	d127      	bne.n	aace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa7e:	f7fe fe2d 	bl	96dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b0>
    aa82:	6860      	ldr	r0, [r4, #4]
    aa84:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aa88:	2921      	cmp	r1, #33	; 0x21
    aa8a:	d020      	beq.n	aace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aa8c:	2108      	movs	r1, #8
    aa8e:	30d4      	adds	r0, #212	; 0xd4
    aa90:	f005 fdd5 	bl	1063e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    aa94:	6860      	ldr	r0, [r4, #4]
    aa96:	210b      	movs	r1, #11
    aa98:	30d4      	adds	r0, #212	; 0xd4
    aa9a:	f005 fdd0 	bl	1063e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x74e>
    aa9e:	201a      	movs	r0, #26
    aaa0:	f7ff fb76 	bl	a190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    aaa4:	e013      	b.n	aace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aaa6:	f892 0086 	ldrb.w	r0, [r2, #134]	; 0x86
    aaaa:	2822      	cmp	r0, #34	; 0x22
    aaac:	d10f      	bne.n	aace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a2>
    aaae:	2600      	movs	r6, #0
    aab0:	f882 6086 	strb.w	r6, [r2, #134]	; 0x86
    aab4:	f7fe fcc8 	bl	9448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    aab8:	6860      	ldr	r0, [r4, #4]
    aaba:	f890 0124 	ldrb.w	r0, [r0, #292]	; 0x124
    aabe:	2801      	cmp	r0, #1
    aac0:	d102      	bne.n	aac8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189c>
    aac2:	2000      	movs	r0, #0
    aac4:	f7ff fb64 	bl	a190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf64>
    aac8:	6860      	ldr	r0, [r4, #4]
    aaca:	f880 6124 	strb.w	r6, [r0, #292]	; 0x124
    aace:	4628      	mov	r0, r5
    aad0:	bd70      	pop	{r4, r5, r6, pc}
    aad2:	0000      	.short	0x0000
    aad4:	20000164 	.word	0x20000164
    aad8:	b570      	push	{r4, r5, r6, lr}
    aada:	4c31      	ldr	r4, [pc, #196]	; (aba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    aadc:	6860      	ldr	r0, [r4, #4]
    aade:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    aae2:	0789      	lsls	r1, r1, #30
    aae4:	d507      	bpl.n	aaf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    aae6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aaea:	2301      	movs	r3, #1
    aaec:	2108      	movs	r1, #8
    aaee:	3078      	adds	r0, #120	; 0x78
    aaf0:	f004 f956 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aaf4:	b1f8      	cbz	r0, ab36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    aaf6:	6860      	ldr	r0, [r4, #4]
    aaf8:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    aafc:	0780      	lsls	r0, r0, #30
    aafe:	d414      	bmi.n	ab2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    ab00:	4d27      	ldr	r5, [pc, #156]	; (aba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1974>)
    ab02:	3d10      	subs	r5, #16
    ab04:	68e8      	ldr	r0, [r5, #12]
    ab06:	f004 fbe0 	bl	f2ca <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    ab0a:	6861      	ldr	r1, [r4, #4]
    ab0c:	f881 00cf 	strb.w	r0, [r1, #207]	; 0xcf
    ab10:	68e8      	ldr	r0, [r5, #12]
    ab12:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    ab16:	f8a1 20d0 	strh.w	r2, [r1, #208]	; 0xd0
    ab1a:	8840      	ldrh	r0, [r0, #2]
    ab1c:	f8a1 00d2 	strh.w	r0, [r1, #210]	; 0xd2
    ab20:	f811 0fc5 	ldrb.w	r0, [r1, #197]!
    ab24:	f040 0002 	orr.w	r0, r0, #2
    ab28:	7008      	strb	r0, [r1, #0]
    ab2a:	6860      	ldr	r0, [r4, #4]
    ab2c:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    ab30:	07c9      	lsls	r1, r1, #31
    ab32:	d002      	beq.n	ab3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    ab34:	e015      	b.n	ab62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    ab36:	2001      	movs	r0, #1
    ab38:	bd70      	pop	{r4, r5, r6, pc}
    ab3a:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    ab3e:	078a      	lsls	r2, r1, #30
    ab40:	d504      	bpl.n	ab4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
    ab42:	f240 21e2 	movw	r1, #738	; 0x2e2
    ab46:	2031      	movs	r0, #49	; 0x31
    ab48:	f7fa fcca 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab4c:	f041 0102 	orr.w	r1, r1, #2
    ab50:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    ab54:	f7fe fc6c 	bl	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    ab58:	6860      	ldr	r0, [r4, #4]
    ab5a:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
    ab5e:	07c0      	lsls	r0, r0, #31
    ab60:	d007      	beq.n	ab72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    ab62:	6861      	ldr	r1, [r4, #4]
    ab64:	2201      	movs	r2, #1
    ab66:	f101 00c6 	add.w	r0, r1, #198	; 0xc6
    ab6a:	f7fc fce1 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    ab6e:	f7fc fdb1 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ab72:	6860      	ldr	r0, [r4, #4]
    ab74:	2100      	movs	r1, #0
    ab76:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ab7a:	2a06      	cmp	r2, #6
    ab7c:	d103      	bne.n	ab86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    ab7e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ab82:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    ab86:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
    ab8a:	b132      	cbz	r2, ab9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    ab8c:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    ab90:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ab94:	b90a      	cbnz	r2, ab9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    ab96:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    ab9a:	2000      	movs	r0, #0
    ab9c:	bd70      	pop	{r4, r5, r6, pc}
    ab9e:	0000      	.short	0x0000
    aba0:	20000174 	.word	0x20000174
    aba4:	b510      	push	{r4, lr}
    aba6:	4c1f      	ldr	r4, [pc, #124]	; (ac24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f8>)
    aba8:	6863      	ldr	r3, [r4, #4]
    abaa:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    abae:	2808      	cmp	r0, #8
    abb0:	d20d      	bcs.n	abce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a2>
    abb2:	f500 72f4 	add.w	r2, r0, #488	; 0x1e8
    abb6:	f1c0 0008 	rsb	r0, r0, #8
    abba:	b2c1      	uxtb	r1, r0
    abbc:	1898      	adds	r0, r3, r2
    abbe:	f7fa fd2d 	bl	561c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    abc2:	6861      	ldr	r1, [r4, #4]
    abc4:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    abc8:	4410      	add	r0, r2
    abca:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    abce:	6863      	ldr	r3, [r4, #4]
    abd0:	f893 0112 	ldrb.w	r0, [r3, #274]	; 0x112
    abd4:	3808      	subs	r0, #8
    abd6:	2804      	cmp	r0, #4
    abd8:	d20d      	bcs.n	abf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    abda:	f500 7282 	add.w	r2, r0, #260	; 0x104
    abde:	f1c0 0004 	rsb	r0, r0, #4
    abe2:	b2c1      	uxtb	r1, r0
    abe4:	1898      	adds	r0, r3, r2
    abe6:	f7fa fd19 	bl	561c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    abea:	6861      	ldr	r1, [r4, #4]
    abec:	f891 2112 	ldrb.w	r2, [r1, #274]	; 0x112
    abf0:	4410      	add	r0, r2
    abf2:	f881 0112 	strb.w	r0, [r1, #274]	; 0x112
    abf6:	6860      	ldr	r0, [r4, #4]
    abf8:	f890 1112 	ldrb.w	r1, [r0, #274]	; 0x112
    abfc:	290c      	cmp	r1, #12
    abfe:	d30f      	bcc.n	ac20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
    ac00:	d005      	beq.n	ac0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e2>
    ac02:	f640 013b 	movw	r1, #2107	; 0x83b
    ac06:	f04f 0031 	mov.w	r0, #49	; 0x31
    ac0a:	f7fa fc69 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac0e:	2100      	movs	r1, #0
    ac10:	f880 1112 	strb.w	r1, [r0, #274]	; 0x112
    ac14:	2101      	movs	r1, #1
    ac16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac1a:	2004      	movs	r0, #4
    ac1c:	f7ff b9ac 	b.w	9f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    ac20:	bd10      	pop	{r4, pc}
    ac22:	0000      	.short	0x0000
    ac24:	20000174 	.word	0x20000174
    ac28:	4804      	ldr	r0, [pc, #16]	; (ac3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>)
    ac2a:	2129      	movs	r1, #41	; 0x29
    ac2c:	6840      	ldr	r0, [r0, #4]
    ac2e:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ac32:	2100      	movs	r1, #0
    ac34:	f880 126c 	strb.w	r1, [r0, #620]	; 0x26c
    ac38:	4770      	bx	lr
    ac3a:	0000      	.short	0x0000
    ac3c:	20000174 	.word	0x20000174
    ac40:	4809      	ldr	r0, [pc, #36]	; (ac68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3c>)
    ac42:	b510      	push	{r4, lr}
    ac44:	6840      	ldr	r0, [r0, #4]
    ac46:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ac4a:	2914      	cmp	r1, #20
    ac4c:	d004      	beq.n	ac58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    ac4e:	f240 61fd 	movw	r1, #1789	; 0x6fd
    ac52:	2031      	movs	r0, #49	; 0x31
    ac54:	f7fa fc44 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac58:	2101      	movs	r1, #1
    ac5a:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    ac5e:	2115      	movs	r1, #21
    ac60:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ac64:	bd10      	pop	{r4, pc}
    ac66:	0000      	.short	0x0000
    ac68:	20000174 	.word	0x20000174
    ac6c:	b510      	push	{r4, lr}
    ac6e:	4c0a      	ldr	r4, [pc, #40]	; (ac98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    ac70:	6860      	ldr	r0, [r4, #4]
    ac72:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    ac76:	07c0      	lsls	r0, r0, #31
    ac78:	d008      	beq.n	ac8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    ac7a:	f7fe fbe5 	bl	9448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ac7e:	6860      	ldr	r0, [r4, #4]
    ac80:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    ac84:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    ac88:	7001      	strb	r1, [r0, #0]
    ac8a:	bd10      	pop	{r4, pc}
    ac8c:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    ac90:	2031      	movs	r0, #49	; 0x31
    ac92:	f7fa fc25 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac96:	0000      	.short	0x0000
    ac98:	20000174 	.word	0x20000174
    ac9c:	b510      	push	{r4, lr}
    ac9e:	4c0a      	ldr	r4, [pc, #40]	; (acc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9c>)
    aca0:	2301      	movs	r3, #1
    aca2:	2100      	movs	r1, #0
    aca4:	6860      	ldr	r0, [r4, #4]
    aca6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    acaa:	3078      	adds	r0, #120	; 0x78
    acac:	f004 f878 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    acb0:	b120      	cbz	r0, acbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a90>
    acb2:	6861      	ldr	r1, [r4, #4]
    acb4:	201c      	movs	r0, #28
    acb6:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    acba:	bd10      	pop	{r4, pc}
    acbc:	f240 7184 	movw	r1, #1924	; 0x784
    acc0:	2031      	movs	r0, #49	; 0x31
    acc2:	f7fa fc0d 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acc6:	0000      	.short	0x0000
    acc8:	20000174 	.word	0x20000174
    accc:	480a      	ldr	r0, [pc, #40]	; (acf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1acc>)
    acce:	b510      	push	{r4, lr}
    acd0:	6840      	ldr	r0, [r0, #4]
    acd2:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    acd6:	f3c1 1201 	ubfx	r2, r1, #4, #2
    acda:	2a01      	cmp	r2, #1
    acdc:	d004      	beq.n	ace8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abc>
    acde:	f240 718b 	movw	r1, #1931	; 0x78b
    ace2:	2031      	movs	r0, #49	; 0x31
    ace4:	f7fa fbfc 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ace8:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    acec:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    acf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    acf4:	f7fe bba8 	b.w	9448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    acf8:	20000174 	.word	0x20000174
    acfc:	b510      	push	{r4, lr}
    acfe:	4c0a      	ldr	r4, [pc, #40]	; (ad28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afc>)
    ad00:	2301      	movs	r3, #1
    ad02:	2100      	movs	r1, #0
    ad04:	6860      	ldr	r0, [r4, #4]
    ad06:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ad0a:	3078      	adds	r0, #120	; 0x78
    ad0c:	f004 f848 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad10:	b120      	cbz	r0, ad1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    ad12:	6861      	ldr	r1, [r4, #4]
    ad14:	200e      	movs	r0, #14
    ad16:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ad1a:	bd10      	pop	{r4, pc}
    ad1c:	f240 7177 	movw	r1, #1911	; 0x777
    ad20:	2031      	movs	r0, #49	; 0x31
    ad22:	f7fa fbdd 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad26:	0000      	.short	0x0000
    ad28:	20000174 	.word	0x20000174
    ad2c:	4804      	ldr	r0, [pc, #16]	; (ad40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b14>)
    ad2e:	6840      	ldr	r0, [r0, #4]
    ad30:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    ad34:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    ad38:	7001      	strb	r1, [r0, #0]
    ad3a:	f7fe bb85 	b.w	9448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    ad3e:	0000      	.short	0x0000
    ad40:	20000174 	.word	0x20000174
    ad44:	4809      	ldr	r0, [pc, #36]	; (ad6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b40>)
    ad46:	b510      	push	{r4, lr}
    ad48:	6840      	ldr	r0, [r0, #4]
    ad4a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ad4e:	2910      	cmp	r1, #16
    ad50:	d004      	beq.n	ad5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b30>
    ad52:	f240 61f5 	movw	r1, #1781	; 0x6f5
    ad56:	2031      	movs	r0, #49	; 0x31
    ad58:	f7fa fbc2 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad5c:	2101      	movs	r1, #1
    ad5e:	f880 10c3 	strb.w	r1, [r0, #195]	; 0xc3
    ad62:	2111      	movs	r1, #17
    ad64:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ad68:	bd10      	pop	{r4, pc}
    ad6a:	0000      	.short	0x0000
    ad6c:	20000174 	.word	0x20000174
    ad70:	b510      	push	{r4, lr}
    ad72:	4c0a      	ldr	r4, [pc, #40]	; (ad9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b70>)
    ad74:	2301      	movs	r3, #1
    ad76:	2100      	movs	r1, #0
    ad78:	6860      	ldr	r0, [r4, #4]
    ad7a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ad7e:	3078      	adds	r0, #120	; 0x78
    ad80:	f004 f80e 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad84:	b120      	cbz	r0, ad90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>
    ad86:	6861      	ldr	r1, [r4, #4]
    ad88:	201f      	movs	r0, #31
    ad8a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ad8e:	bd10      	pop	{r4, pc}
    ad90:	f240 7197 	movw	r1, #1943	; 0x797
    ad94:	2031      	movs	r0, #49	; 0x31
    ad96:	f7fa fba3 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad9a:	0000      	.short	0x0000
    ad9c:	20000174 	.word	0x20000174
    ada0:	4808      	ldr	r0, [pc, #32]	; (adc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b98>)
    ada2:	b510      	push	{r4, lr}
    ada4:	6840      	ldr	r0, [r0, #4]
    ada6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    adaa:	2921      	cmp	r1, #33	; 0x21
    adac:	d005      	beq.n	adba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    adae:	b121      	cbz	r1, adba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b8e>
    adb0:	f240 719e 	movw	r1, #1950	; 0x79e
    adb4:	2031      	movs	r0, #49	; 0x31
    adb6:	f7fa fb93 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adba:	2122      	movs	r1, #34	; 0x22
    adbc:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    adc0:	bd10      	pop	{r4, pc}
    adc2:	0000      	.short	0x0000
    adc4:	20000174 	.word	0x20000174
    adc8:	4809      	ldr	r0, [pc, #36]	; (adf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>)
    adca:	b510      	push	{r4, lr}
    adcc:	6840      	ldr	r0, [r0, #4]
    adce:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    add2:	2928      	cmp	r1, #40	; 0x28
    add4:	d006      	beq.n	ade4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bb8>
    add6:	2915      	cmp	r1, #21
    add8:	d006      	beq.n	ade8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbc>
    adda:	f240 711e 	movw	r1, #1822	; 0x71e
    adde:	2031      	movs	r0, #49	; 0x31
    ade0:	f7fa fb7e 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ade4:	2100      	movs	r1, #0
    ade6:	e000      	b.n	adea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
    ade8:	2119      	movs	r1, #25
    adea:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    adee:	bd10      	pop	{r4, pc}
    adf0:	20000174 	.word	0x20000174
    adf4:	4807      	ldr	r0, [pc, #28]	; (ae14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
    adf6:	b510      	push	{r4, lr}
    adf8:	6840      	ldr	r0, [r0, #4]
    adfa:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    adfe:	2915      	cmp	r1, #21
    ae00:	d004      	beq.n	ae0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be0>
    ae02:	f240 710a 	movw	r1, #1802	; 0x70a
    ae06:	2031      	movs	r0, #49	; 0x31
    ae08:	f7fa fb6a 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae0c:	2119      	movs	r1, #25
    ae0e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ae12:	bd10      	pop	{r4, pc}
    ae14:	20000174 	.word	0x20000174
    ae18:	b510      	push	{r4, lr}
    ae1a:	4c0a      	ldr	r4, [pc, #40]	; (ae44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c18>)
    ae1c:	2301      	movs	r3, #1
    ae1e:	2100      	movs	r1, #0
    ae20:	6860      	ldr	r0, [r4, #4]
    ae22:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae26:	3078      	adds	r0, #120	; 0x78
    ae28:	f003 ffba 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae2c:	b120      	cbz	r0, ae38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c0c>
    ae2e:	6861      	ldr	r1, [r4, #4]
    ae30:	2004      	movs	r0, #4
    ae32:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ae36:	bd10      	pop	{r4, pc}
    ae38:	f240 61ef 	movw	r1, #1775	; 0x6ef
    ae3c:	2031      	movs	r0, #49	; 0x31
    ae3e:	f7fa fb4f 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae42:	0000      	.short	0x0000
    ae44:	20000174 	.word	0x20000174
    ae48:	4807      	ldr	r0, [pc, #28]	; (ae68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3c>)
    ae4a:	b510      	push	{r4, lr}
    ae4c:	6840      	ldr	r0, [r0, #4]
    ae4e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ae52:	2915      	cmp	r1, #21
    ae54:	d004      	beq.n	ae60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c34>
    ae56:	f240 7104 	movw	r1, #1796	; 0x704
    ae5a:	2031      	movs	r0, #49	; 0x31
    ae5c:	f7fa fb40 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae60:	2117      	movs	r1, #23
    ae62:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    ae66:	bd10      	pop	{r4, pc}
    ae68:	20000174 	.word	0x20000174
    ae6c:	b538      	push	{r3, r4, r5, lr}
    ae6e:	4d20      	ldr	r5, [pc, #128]	; (aef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    ae70:	6869      	ldr	r1, [r5, #4]
    ae72:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    ae76:	281b      	cmp	r0, #27
    ae78:	d002      	beq.n	ae80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c54>
    ae7a:	f240 7137 	movw	r1, #1847	; 0x737
    ae7e:	e00e      	b.n	ae9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
    ae80:	2400      	movs	r4, #0
    ae82:	f881 40c3 	strb.w	r4, [r1, #195]	; 0xc3
    ae86:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    ae8a:	f88d 0000 	strb.w	r0, [sp]
    ae8e:	9800      	ldr	r0, [sp, #0]
    ae90:	9000      	str	r0, [sp, #0]
    ae92:	f89d 0000 	ldrb.w	r0, [sp]
    ae96:	2201      	movs	r2, #1
    ae98:	b120      	cbz	r0, aea4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c78>
    ae9a:	f240 713b 	movw	r1, #1851	; 0x73b
    ae9e:	2031      	movs	r0, #49	; 0x31
    aea0:	f7fa fb1e 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aea4:	4812      	ldr	r0, [pc, #72]	; (aef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>)
    aea6:	f891 30c4 	ldrb.w	r3, [r1, #196]	; 0xc4
    aeaa:	6840      	ldr	r0, [r0, #4]
    aeac:	f500 70db 	add.w	r0, r0, #438	; 0x1b6
    aeb0:	b143      	cbz	r3, aec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    aeb2:	f881 40c4 	strb.w	r4, [r1, #196]	; 0xc4
    aeb6:	880a      	ldrh	r2, [r1, #0]
    aeb8:	f8a1 21c2 	strh.w	r2, [r1, #450]	; 0x1c2
    aebc:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    aec0:	220a      	movs	r2, #10
    aec2:	e007      	b.n	aed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca8>
    aec4:	880b      	ldrh	r3, [r1, #0]
    aec6:	f8a1 31c2 	strh.w	r3, [r1, #450]	; 0x1c2
    aeca:	f881 41c0 	strb.w	r4, [r1, #448]	; 0x1c0
    aece:	f881 21c4 	strb.w	r2, [r1, #452]	; 0x1c4
    aed2:	2209      	movs	r2, #9
    aed4:	f7fc fb2c 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    aed8:	6868      	ldr	r0, [r5, #4]
    aeda:	8800      	ldrh	r0, [r0, #0]
    aedc:	f7fa ff28 	bl	5d30 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    aee0:	f003 fb82 	bl	e5e8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    aee4:	f7fc fbf6 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aee8:	6868      	ldr	r0, [r5, #4]
    aeea:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
    aeee:	bd38      	pop	{r3, r4, r5, pc}
    aef0:	20000174 	.word	0x20000174
    aef4:	b510      	push	{r4, lr}
    aef6:	4c08      	ldr	r4, [pc, #32]	; (af18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>)
    aef8:	2301      	movs	r3, #1
    aefa:	4619      	mov	r1, r3
    aefc:	6860      	ldr	r0, [r4, #4]
    aefe:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    af02:	3078      	adds	r0, #120	; 0x78
    af04:	f003 ff4c 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af08:	2800      	cmp	r0, #0
    af0a:	d103      	bne.n	af14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce8>
    af0c:	6861      	ldr	r1, [r4, #4]
    af0e:	2008      	movs	r0, #8
    af10:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    af14:	bd10      	pop	{r4, pc}
    af16:	0000      	.short	0x0000
    af18:	20000174 	.word	0x20000174
    af1c:	4815      	ldr	r0, [pc, #84]	; (af74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    af1e:	b510      	push	{r4, lr}
    af20:	6880      	ldr	r0, [r0, #8]
    af22:	7901      	ldrb	r1, [r0, #4]
    af24:	4813      	ldr	r0, [pc, #76]	; (af74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d48>)
    af26:	3010      	adds	r0, #16
    af28:	6840      	ldr	r0, [r0, #4]
    af2a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af2e:	2a0a      	cmp	r2, #10
    af30:	d109      	bne.n	af46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    af32:	f890 2109 	ldrb.w	r2, [r0, #265]	; 0x109
    af36:	428a      	cmp	r2, r1
    af38:	d105      	bne.n	af46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1a>
    af3a:	2100      	movs	r1, #0
    af3c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    af40:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    af44:	bd10      	pop	{r4, pc}
    af46:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    af4a:	0713      	lsls	r3, r2, #28
    af4c:	d507      	bpl.n	af5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d32>
    af4e:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
    af52:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    af56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af5a:	f7fe ba75 	b.w	9448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    af5e:	29ff      	cmp	r1, #255	; 0xff
    af60:	d004      	beq.n	af6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d40>
    af62:	f240 61e2 	movw	r1, #1762	; 0x6e2
    af66:	2031      	movs	r0, #49	; 0x31
    af68:	f7fa faba 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af70:	f7ff be5a 	b.w	ac28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fc>
    af74:	20000164 	.word	0x20000164
    af78:	b510      	push	{r4, lr}
    af7a:	4c15      	ldr	r4, [pc, #84]	; (afd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da4>)
    af7c:	6860      	ldr	r0, [r4, #4]
    af7e:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    af82:	0789      	lsls	r1, r1, #30
    af84:	d411      	bmi.n	afaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7e>
    af86:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af8a:	2301      	movs	r3, #1
    af8c:	2100      	movs	r1, #0
    af8e:	3078      	adds	r0, #120	; 0x78
    af90:	f003 ff06 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af94:	b120      	cbz	r0, afa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d74>
    af96:	6861      	ldr	r1, [r4, #4]
    af98:	2006      	movs	r0, #6
    af9a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    af9e:	e009      	b.n	afb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d88>
    afa0:	f240 7163 	movw	r1, #1891	; 0x763
    afa4:	2031      	movs	r0, #49	; 0x31
    afa6:	f7fa fa9b 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afaa:	2100      	movs	r1, #0
    afac:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    afb0:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
    afb4:	6860      	ldr	r0, [r4, #4]
    afb6:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    afba:	0780      	lsls	r0, r0, #30
    afbc:	d507      	bpl.n	afce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da2>
    afbe:	f7fe fa43 	bl	9448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    afc2:	6860      	ldr	r0, [r4, #4]
    afc4:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    afc8:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    afcc:	7001      	strb	r1, [r0, #0]
    afce:	bd10      	pop	{r4, pc}
    afd0:	20000174 	.word	0x20000174
    afd4:	4808      	ldr	r0, [pc, #32]	; (aff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dcc>)
    afd6:	b510      	push	{r4, lr}
    afd8:	6840      	ldr	r0, [r0, #4]
    afda:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    afde:	b941      	cbnz	r1, aff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc6>
    afe0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    afe4:	2301      	movs	r3, #1
    afe6:	2106      	movs	r1, #6
    afe8:	3078      	adds	r0, #120	; 0x78
    afea:	f003 fed9 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afee:	2800      	cmp	r0, #0
    aff0:	d000      	beq.n	aff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc8>
    aff2:	2001      	movs	r0, #1
    aff4:	bd10      	pop	{r4, pc}
    aff6:	0000      	.short	0x0000
    aff8:	20000174 	.word	0x20000174
    affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    affe:	4c5e      	ldr	r4, [pc, #376]	; (b178 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    b000:	4607      	mov	r7, r0
    b002:	4615      	mov	r5, r2
    b004:	6860      	ldr	r0, [r4, #4]
    b006:	2200      	movs	r2, #0
    b008:	b111      	cbz	r1, b010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    b00a:	f8a0 21de 	strh.w	r2, [r0, #478]	; 0x1de
    b00e:	e006      	b.n	b01e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
    b010:	f8b0 11de 	ldrh.w	r1, [r0, #478]	; 0x1de
    b014:	f8b0 21ce 	ldrh.w	r2, [r0, #462]	; 0x1ce
    b018:	4411      	add	r1, r2
    b01a:	f8a0 11de 	strh.w	r1, [r0, #478]	; 0x1de
    b01e:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    b022:	f88d 1000 	strb.w	r1, [sp]
    b026:	9900      	ldr	r1, [sp, #0]
    b028:	9100      	str	r1, [sp, #0]
    b02a:	f89d 1000 	ldrb.w	r1, [sp]
    b02e:	b939      	cbnz	r1, b040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e14>
    b030:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b034:	2301      	movs	r3, #1
    b036:	4619      	mov	r1, r3
    b038:	3078      	adds	r0, #120	; 0x78
    b03a:	f003 feb1 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b03e:	b130      	cbz	r0, b04e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e22>
    b040:	6860      	ldr	r0, [r4, #4]
    b042:	f830 1fb8 	ldrh.w	r1, [r0, #184]!
    b046:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    b04a:	4411      	add	r1, r2
    b04c:	8001      	strh	r1, [r0, #0]
    b04e:	6861      	ldr	r1, [r4, #4]
    b050:	f891 00be 	ldrb.w	r0, [r1, #190]	; 0xbe
    b054:	b130      	cbz	r0, b064 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e38>
    b056:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
    b05a:	f8b1 31ce 	ldrh.w	r3, [r1, #462]	; 0x1ce
    b05e:	441a      	add	r2, r3
    b060:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    b064:	f991 20c2 	ldrsb.w	r2, [r1, #194]	; 0xc2
    b068:	2a00      	cmp	r2, #0
    b06a:	dd06      	ble.n	b07a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4e>
    b06c:	f8b1 30c0 	ldrh.w	r3, [r1, #192]	; 0xc0
    b070:	f8b1 61ce 	ldrh.w	r6, [r1, #462]	; 0x1ce
    b074:	4433      	add	r3, r6
    b076:	f8a1 30c0 	strh.w	r3, [r1, #192]	; 0xc0
    b07a:	263d      	movs	r6, #61	; 0x3d
    b07c:	b117      	cbz	r7, b084 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e58>
    b07e:	f881 60a6 	strb.w	r6, [r1, #166]	; 0xa6
    b082:	e016      	b.n	b0b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    b084:	4b3c      	ldr	r3, [pc, #240]	; (b178 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4c>)
    b086:	3b10      	subs	r3, #16
    b088:	781b      	ldrb	r3, [r3, #0]
    b08a:	2b02      	cmp	r3, #2
    b08c:	d00b      	beq.n	b0a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7a>
    b08e:	2b01      	cmp	r3, #1
    b090:	d015      	beq.n	b0be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e92>
    b092:	b36d      	cbz	r5, b0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ec4>
    b094:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    b098:	2208      	movs	r2, #8
    b09a:	f7fc fa49 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    b09e:	06e8      	lsls	r0, r5, #27
    b0a0:	d510      	bpl.n	b0c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e98>
    b0a2:	201e      	movs	r0, #30
    b0a4:	e01b      	b.n	b0de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    b0a6:	f891 010e 	ldrb.w	r0, [r1, #270]	; 0x10e
    b0aa:	2806      	cmp	r0, #6
    b0ac:	d048      	beq.n	b140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b0ae:	2016      	movs	r0, #22
    b0b0:	e046      	b.n	b140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b0b2:	f101 009d 	add.w	r0, r1, #157	; 0x9d
    b0b6:	2208      	movs	r2, #8
    b0b8:	f7fc fa3a 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    b0bc:	e049      	b.n	b152 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b0be:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    b0c2:	e03d      	b.n	b140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b0c4:	0728      	lsls	r0, r5, #28
    b0c6:	d503      	bpl.n	b0d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea4>
    b0c8:	6860      	ldr	r0, [r4, #4]
    b0ca:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    b0ce:	e040      	b.n	b152 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b0d0:	06a8      	lsls	r0, r5, #26
    b0d2:	d501      	bpl.n	b0d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eac>
    b0d4:	2023      	movs	r0, #35	; 0x23
    b0d6:	e002      	b.n	b0de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb2>
    b0d8:	07a8      	lsls	r0, r5, #30
    b0da:	d004      	beq.n	b0e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eba>
    b0dc:	202a      	movs	r0, #42	; 0x2a
    b0de:	6861      	ldr	r1, [r4, #4]
    b0e0:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    b0e4:	e035      	b.n	b152 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b0e6:	f640 4173 	movw	r1, #3187	; 0xc73
    b0ea:	2031      	movs	r0, #49	; 0x31
    b0ec:	f7fa f9f8 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0f0:	b128      	cbz	r0, b0fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ed2>
    b0f2:	f8b1 00ba 	ldrh.w	r0, [r1, #186]	; 0xba
    b0f6:	f8b1 30bc 	ldrh.w	r3, [r1, #188]	; 0xbc
    b0fa:	4298      	cmp	r0, r3
    b0fc:	d216      	bcs.n	b12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    b0fe:	2a00      	cmp	r2, #0
    b100:	dd05      	ble.n	b10e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ee2>
    b102:	f8b1 00c0 	ldrh.w	r0, [r1, #192]	; 0xc0
    b106:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
    b10a:	4290      	cmp	r0, r2
    b10c:	d20e      	bcs.n	b12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f00>
    b10e:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
    b112:	f8b1 00b6 	ldrh.w	r0, [r1, #182]	; 0xb6
    b116:	4282      	cmp	r2, r0
    b118:	d30a      	bcc.n	b130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    b11a:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
    b11e:	f88d 2000 	strb.w	r2, [sp]
    b122:	9a00      	ldr	r2, [sp, #0]
    b124:	9200      	str	r2, [sp, #0]
    b126:	f89d 2000 	ldrb.w	r2, [sp]
    b12a:	b10a      	cbz	r2, b130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f04>
    b12c:	2022      	movs	r0, #34	; 0x22
    b12e:	e007      	b.n	b140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b130:	f891 208a 	ldrb.w	r2, [r1, #138]	; 0x8a
    b134:	b13a      	cbz	r2, b146 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f1a>
    b136:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
    b13a:	4282      	cmp	r2, r0
    b13c:	d309      	bcc.n	b152 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b13e:	2008      	movs	r0, #8
    b140:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    b144:	e7b5      	b.n	b0b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e86>
    b146:	f8b1 00b4 	ldrh.w	r0, [r1, #180]	; 0xb4
    b14a:	2806      	cmp	r0, #6
    b14c:	d301      	bcc.n	b152 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f26>
    b14e:	203e      	movs	r0, #62	; 0x3e
    b150:	e7f6      	b.n	b140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f14>
    b152:	6860      	ldr	r0, [r4, #4]
    b154:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    b158:	f88d 1000 	strb.w	r1, [sp]
    b15c:	9900      	ldr	r1, [sp, #0]
    b15e:	9100      	str	r1, [sp, #0]
    b160:	f89d 1000 	ldrb.w	r1, [sp]
    b164:	b119      	cbz	r1, b16e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f42>
    b166:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b16a:	f005 bab4 	b.w	106d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    b16e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b172:	2100      	movs	r1, #0
    b174:	f7fd bc38 	b.w	89e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b178:	20000174 	.word	0x20000174
    b17c:	b570      	push	{r4, r5, r6, lr}
    b17e:	4d2e      	ldr	r5, [pc, #184]	; (b238 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200c>)
    b180:	6868      	ldr	r0, [r5, #4]
    b182:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    b186:	b151      	cbz	r1, b19e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b188:	2901      	cmp	r1, #1
    b18a:	d008      	beq.n	b19e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b18c:	2902      	cmp	r1, #2
    b18e:	d009      	beq.n	b1a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    b190:	2903      	cmp	r1, #3
    b192:	d007      	beq.n	b1a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f78>
    b194:	f640 21f1 	movw	r1, #2801	; 0xaf1
    b198:	2031      	movs	r0, #49	; 0x31
    b19a:	f7fa f9a1 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b19e:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    b1a2:	e037      	b.n	b214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe8>
    b1a4:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    b1a8:	2908      	cmp	r1, #8
    b1aa:	d036      	beq.n	b21a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fee>
    b1ac:	f8b0 20b4 	ldrh.w	r2, [r0, #180]	; 0xb4
    b1b0:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	; 0xb6
    b1b4:	2400      	movs	r4, #0
    b1b6:	1c93      	adds	r3, r2, #2
    b1b8:	4299      	cmp	r1, r3
    b1ba:	d306      	bcc.n	b1ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    b1bc:	1a89      	subs	r1, r1, r2
    b1be:	1e89      	subs	r1, r1, #2
    b1c0:	040c      	lsls	r4, r1, #16
    b1c2:	0c24      	lsrs	r4, r4, #16
    b1c4:	d001      	beq.n	b1ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f9e>
    b1c6:	1e64      	subs	r4, r4, #1
    b1c8:	b2a4      	uxth	r4, r4
    b1ca:	f890 10b2 	ldrb.w	r1, [r0, #178]	; 0xb2
    b1ce:	b139      	cbz	r1, b1e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fb4>
    b1d0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b1d4:	2301      	movs	r3, #1
    b1d6:	2109      	movs	r1, #9
    b1d8:	3078      	adds	r0, #120	; 0x78
    b1da:	f003 fde1 	bl	eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1de:	b340      	cbz	r0, b232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2006>
    b1e0:	f7ff fef8 	bl	afd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da8>
    b1e4:	b178      	cbz	r0, b206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    b1e6:	686a      	ldr	r2, [r5, #4]
    b1e8:	2000      	movs	r0, #0
    b1ea:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
    b1ee:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
    b1f2:	1c93      	adds	r3, r2, #2
    b1f4:	4299      	cmp	r1, r3
    b1f6:	d303      	bcc.n	b200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    b1f8:	1a88      	subs	r0, r1, r2
    b1fa:	1e80      	subs	r0, r0, #2
    b1fc:	d000      	beq.n	b200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fd4>
    b1fe:	1e40      	subs	r0, r0, #1
    b200:	42a0      	cmp	r0, r4
    b202:	d200      	bcs.n	b206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fda>
    b204:	b284      	uxth	r4, r0
    b206:	b10c      	cbz	r4, b20c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    b208:	1e64      	subs	r4, r4, #1
    b20a:	b2a4      	uxth	r4, r4
    b20c:	6868      	ldr	r0, [r5, #4]
    b20e:	f8b0 11cc 	ldrh.w	r1, [r0, #460]	; 0x1cc
    b212:	4421      	add	r1, r4
    b214:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    b218:	bd70      	pop	{r4, r5, r6, pc}
    b21a:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    b21e:	2903      	cmp	r1, #3
    b220:	d3bd      	bcc.n	b19e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f72>
    b222:	f830 1f7c 	ldrh.w	r1, [r0, #124]!
    b226:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    b228:	4411      	add	r1, r2
    b22a:	1c49      	adds	r1, r1, #1
    b22c:	f8a0 114c 	strh.w	r1, [r0, #332]	; 0x14c
    b230:	bd70      	pop	{r4, r5, r6, pc}
    b232:	2400      	movs	r4, #0
    b234:	e7ea      	b.n	b20c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe0>
    b236:	0000      	.short	0x0000
    b238:	20000174 	.word	0x20000174

0000b23c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    b23c:	4903      	ldr	r1, [pc, #12]	; (b24c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    b23e:	884a      	ldrh	r2, [r1, #2]
    b240:	8002      	strh	r2, [r0, #0]
    b242:	7809      	ldrb	r1, [r1, #0]
    b244:	7081      	strb	r1, [r0, #2]
    b246:	2000      	movs	r0, #0
    b248:	4770      	bx	lr
    b24a:	0000      	.short	0x0000
    b24c:	20001264 	.word	0x20001264

0000b250 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b250:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b252:	460c      	mov	r4, r1
    b254:	4605      	mov	r5, r0
    b256:	8800      	ldrh	r0, [r0, #0]
    b258:	4669      	mov	r1, sp
    b25a:	f003 fd77 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b25e:	2200      	movs	r2, #0
    b260:	b128      	cbz	r0, b26e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    b262:	f8c4 2002 	str.w	r2, [r4, #2]
    b266:	71a2      	strb	r2, [r4, #6]
    b268:	8022      	strh	r2, [r4, #0]
    b26a:	2002      	movs	r0, #2
    b26c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b26e:	9901      	ldr	r1, [sp, #4]
    b270:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    b274:	f881 2064 	strb.w	r2, [r1, #100]	; 0x64
    b278:	f8d1 0017 	ldr.w	r0, [r1, #23]
    b27c:	f8c4 0002 	str.w	r0, [r4, #2]
    b280:	7ec8      	ldrb	r0, [r1, #27]
    b282:	71a0      	strb	r0, [r4, #6]
    b284:	8828      	ldrh	r0, [r5, #0]
    b286:	8020      	strh	r0, [r4, #0]
    b288:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    b28c:	f88d 0008 	strb.w	r0, [sp, #8]
    b290:	9802      	ldr	r0, [sp, #8]
    b292:	9002      	str	r0, [sp, #8]
    b294:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b298:	2800      	cmp	r0, #0
    b29a:	d1eb      	bne.n	b274 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    b29c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000b2a0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    b2a0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    b2a2:	460d      	mov	r5, r1
    b2a4:	4606      	mov	r6, r0
    b2a6:	8800      	ldrh	r0, [r0, #0]
    b2a8:	4669      	mov	r1, sp
    b2aa:	f003 fd4f 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b2ae:	2800      	cmp	r0, #0
    b2b0:	d11a      	bne.n	b2e8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    b2b2:	f8dd 4004 	ldr.w	r4, [sp, #4]
    b2b6:	2700      	movs	r7, #0
    b2b8:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    b2bc:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
    b2c0:	f005 fee9 	bl	11096 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    b2c4:	70a8      	strb	r0, [r5, #2]
    b2c6:	7860      	ldrb	r0, [r4, #1]
    b2c8:	f005 fee5 	bl	11096 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    b2cc:	70e8      	strb	r0, [r5, #3]
    b2ce:	78a0      	ldrb	r0, [r4, #2]
    b2d0:	f88d 0008 	strb.w	r0, [sp, #8]
    b2d4:	9802      	ldr	r0, [sp, #8]
    b2d6:	9002      	str	r0, [sp, #8]
    b2d8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b2dc:	3c6e      	subs	r4, #110	; 0x6e
    b2de:	2800      	cmp	r0, #0
    b2e0:	d1ea      	bne.n	b2b8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    b2e2:	8830      	ldrh	r0, [r6, #0]
    b2e4:	8028      	strh	r0, [r5, #0]
    b2e6:	2000      	movs	r0, #0
    b2e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000b2ec <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b2ec:	4903      	ldr	r1, [pc, #12]	; (b2fc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    b2ee:	888a      	ldrh	r2, [r1, #4]
    b2f0:	8002      	strh	r2, [r0, #0]
    b2f2:	88c9      	ldrh	r1, [r1, #6]
    b2f4:	8041      	strh	r1, [r0, #2]
    b2f6:	2000      	movs	r0, #0
    b2f8:	4770      	bx	lr
    b2fa:	0000      	.short	0x0000
    b2fc:	200002b4 	.word	0x200002b4

0000b300 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b300:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b302:	2400      	movs	r4, #0
    b304:	a902      	add	r1, sp, #8
    b306:	f88d 4004 	strb.w	r4, [sp, #4]
    b30a:	f88d 4008 	strb.w	r4, [sp, #8]
    b30e:	9100      	str	r1, [sp, #0]
    b310:	7882      	ldrb	r2, [r0, #2]
    b312:	7841      	ldrb	r1, [r0, #1]
    b314:	7800      	ldrb	r0, [r0, #0]
    b316:	ab01      	add	r3, sp, #4
    b318:	f006 f848 	bl	113ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
    b31c:	2800      	cmp	r0, #0
    b31e:	d112      	bne.n	b346 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    b320:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b324:	f005 ff83 	bl	1122e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    b328:	b170      	cbz	r0, b348 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    b32a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b32e:	f005 ff7e 	bl	1122e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
    b332:	b148      	cbz	r0, b348 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    b334:	4805      	ldr	r0, [pc, #20]	; (b34c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    b336:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b33a:	7381      	strb	r1, [r0, #14]
    b33c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b340:	73c1      	strb	r1, [r0, #15]
    b342:	8204      	strh	r4, [r0, #16]
    b344:	2000      	movs	r0, #0
    b346:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b348:	2011      	movs	r0, #17
    b34a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b34c:	20001264 	.word	0x20001264

0000b350 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    b350:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    b354:	460f      	mov	r7, r1
    b356:	4605      	mov	r5, r0
    b358:	7806      	ldrb	r6, [r0, #0]
    b35a:	f005 ff1b 	bl	11194 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12c>
    b35e:	2800      	cmp	r0, #0
    b360:	d10a      	bne.n	b378 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b362:	4628      	mov	r0, r5
    b364:	f005 fef0 	bl	11148 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
    b368:	2800      	cmp	r0, #0
    b36a:	d105      	bne.n	b378 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b36c:	2001      	movs	r0, #1
    b36e:	f7fa faad 	bl	58cc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    b372:	4286      	cmp	r6, r0
    b374:	d302      	bcc.n	b37c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    b376:	2007      	movs	r0, #7
    b378:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    b37c:	2101      	movs	r1, #1
    b37e:	4630      	mov	r0, r6
    b380:	f003 fa56 	bl	e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b384:	0004      	movs	r4, r0
    b386:	d004      	beq.n	b392 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    b388:	f004 fd98 	bl	febc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b38c:	b170      	cbz	r0, b3ac <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5c>
    b38e:	200c      	movs	r0, #12
    b390:	e7f2      	b.n	b378 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b392:	2200      	movs	r2, #0
    b394:	2101      	movs	r1, #1
    b396:	4630      	mov	r0, r6
    b398:	f003 fa40 	bl	e81c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    b39c:	0004      	movs	r4, r0
    b39e:	d013      	beq.n	b3c8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x78>
    b3a0:	4817      	ldr	r0, [pc, #92]	; (b400 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xb0>)
    b3a2:	f990 1000 	ldrsb.w	r1, [r0]
    b3a6:	4620      	mov	r0, r4
    b3a8:	f004 fb24 	bl	f9f4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    b3ac:	4620      	mov	r0, r4
    b3ae:	f004 fbcd 	bl	fb4c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    b3b2:	7038      	strb	r0, [r7, #0]
    b3b4:	74e8      	strb	r0, [r5, #19]
    b3b6:	4629      	mov	r1, r5
    b3b8:	4620      	mov	r0, r4
    b3ba:	f7fc fb89 	bl	7ad0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    b3be:	4606      	mov	r6, r0
    b3c0:	7e68      	ldrb	r0, [r5, #25]
    b3c2:	b1d0      	cbz	r0, b3fa <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    b3c4:	b12e      	cbz	r6, b3d2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x82>
    b3c6:	e018      	b.n	b3fa <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xaa>
    b3c8:	f241 215a 	movw	r1, #4698	; 0x125a
    b3cc:	2039      	movs	r0, #57	; 0x39
    b3ce:	f7fa f887 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3d2:	2200      	movs	r2, #0
    b3d4:	4668      	mov	r0, sp
    b3d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    b3d8:	f003 faee 	bl	e9b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    b3dc:	2200      	movs	r2, #0
    b3de:	2101      	movs	r1, #1
    b3e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b3e2:	f003 fb5f 	bl	eaa4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    b3e6:	2204      	movs	r2, #4
    b3e8:	4668      	mov	r0, sp
    b3ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    b3ec:	f003 fae4 	bl	e9b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    b3f0:	2200      	movs	r2, #0
    b3f2:	4611      	mov	r1, r2
    b3f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    b3f6:	f003 fb55 	bl	eaa4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    b3fa:	4630      	mov	r0, r6
    b3fc:	e7bc      	b.n	b378 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    b3fe:	0000      	.short	0x0000
    b400:	200002ac 	.word	0x200002ac

0000b404 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    b404:	7801      	ldrb	r1, [r0, #0]
    b406:	b171      	cbz	r1, b426 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b408:	7841      	ldrb	r1, [r0, #1]
    b40a:	b161      	cbz	r1, b426 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b40c:	8841      	ldrh	r1, [r0, #2]
    b40e:	291b      	cmp	r1, #27
    b410:	d309      	bcc.n	b426 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b412:	8881      	ldrh	r1, [r0, #4]
    b414:	291b      	cmp	r1, #27
    b416:	d306      	bcc.n	b426 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b418:	4904      	ldr	r1, [pc, #16]	; (b42c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    b41a:	6802      	ldr	r2, [r0, #0]
    b41c:	600a      	str	r2, [r1, #0]
    b41e:	8880      	ldrh	r0, [r0, #4]
    b420:	8088      	strh	r0, [r1, #4]
    b422:	2000      	movs	r0, #0
    b424:	4770      	bx	lr
    b426:	2012      	movs	r0, #18
    b428:	4770      	bx	lr
    b42a:	0000      	.short	0x0000
    b42c:	20001264 	.word	0x20001264

0000b430 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    b430:	6800      	ldr	r0, [r0, #0]
    b432:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b436:	4288      	cmp	r0, r1
    b438:	d303      	bcc.n	b442 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    b43a:	4903      	ldr	r1, [pc, #12]	; (b448 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    b43c:	6088      	str	r0, [r1, #8]
    b43e:	2000      	movs	r0, #0
    b440:	4770      	bx	lr
    b442:	2012      	movs	r0, #18
    b444:	4770      	bx	lr
    b446:	0000      	.short	0x0000
    b448:	20001264 	.word	0x20001264

0000b44c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    b44c:	4a03      	ldr	r2, [pc, #12]	; (b45c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    b44e:	e9d2 1200 	ldrd	r1, r2, [r2]
    b452:	6001      	str	r1, [r0, #0]
    b454:	6042      	str	r2, [r0, #4]
    b456:	2000      	movs	r0, #0
    b458:	4770      	bx	lr
    b45a:	0000      	.short	0x0000
    b45c:	0000b8b8 	.word	0x0000b8b8

0000b460 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    b460:	b510      	push	{r4, lr}
    b462:	2005      	movs	r0, #5
    b464:	f000 faa2 	bl	b9ac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    b468:	f7fd fe38 	bl	90dc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    b46c:	4902      	ldr	r1, [pc, #8]	; (b478 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    b46e:	4801      	ldr	r0, [pc, #4]	; (b474 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    b470:	6048      	str	r0, [r1, #4]
    b472:	bd10      	pop	{r4, pc}
    b474:	0000b47d 	.word	0x0000b47d
    b478:	200002ac 	.word	0x200002ac
    b47c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    b480:	4613      	mov	r3, r2
    b482:	4a33      	ldr	r2, [pc, #204]	; (b550 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf0>)
    b484:	460f      	mov	r7, r1
    b486:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
    b48a:	8814      	ldrh	r4, [r2, #0]
    b48c:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
    b490:	428c      	cmp	r4, r1
    b492:	d200      	bcs.n	b496 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    b494:	4621      	mov	r1, r4
    b496:	4688      	mov	r8, r1
    b498:	8891      	ldrh	r1, [r2, #4]
    b49a:	42b1      	cmp	r1, r6
    b49c:	d200      	bcs.n	b4a0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x40>
    b49e:	460e      	mov	r6, r1
    b4a0:	8851      	ldrh	r1, [r2, #2]
    b4a2:	f640 0448 	movw	r4, #2120	; 0x848
    b4a6:	42a1      	cmp	r1, r4
    b4a8:	d300      	bcc.n	b4ac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x4c>
    b4aa:	4621      	mov	r1, r4
    b4ac:	88d5      	ldrh	r5, [r2, #6]
    b4ae:	42a5      	cmp	r5, r4
    b4b0:	d300      	bcc.n	b4b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x54>
    b4b2:	4625      	mov	r5, r4
    b4b4:	42a1      	cmp	r1, r4
    b4b6:	d200      	bcs.n	b4ba <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x5a>
    b4b8:	460c      	mov	r4, r1
    b4ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
    b4be:	2e1b      	cmp	r6, #27
    b4c0:	d001      	beq.n	b4c6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x66>
    b4c2:	4295      	cmp	r5, r2
    b4c4:	d104      	bne.n	b4d0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x70>
    b4c6:	f1b8 0f1b 	cmp.w	r8, #27
    b4ca:	d03e      	beq.n	b54a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b4cc:	4294      	cmp	r4, r2
    b4ce:	d03c      	beq.n	b54a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b4d0:	466a      	mov	r2, sp
    b4d2:	4619      	mov	r1, r3
    b4d4:	f005 fece 	bl	11274 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    b4d8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    b4dc:	4641      	mov	r1, r8
    b4de:	4540      	cmp	r0, r8
    b4e0:	d900      	bls.n	b4e4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>
    b4e2:	4608      	mov	r0, r1
    b4e4:	80f8      	strh	r0, [r7, #6]
    b4e6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b4ea:	42a1      	cmp	r1, r4
    b4ec:	d800      	bhi.n	b4f0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x90>
    b4ee:	460c      	mov	r4, r1
    b4f0:	813c      	strh	r4, [r7, #8]
    b4f2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b4f6:	42b1      	cmp	r1, r6
    b4f8:	d800      	bhi.n	b4fc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    b4fa:	460e      	mov	r6, r1
    b4fc:	807e      	strh	r6, [r7, #2]
    b4fe:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b502:	42a9      	cmp	r1, r5
    b504:	d800      	bhi.n	b508 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xa8>
    b506:	460d      	mov	r5, r1
    b508:	80bd      	strh	r5, [r7, #4]
    b50a:	21ff      	movs	r1, #255	; 0xff
    b50c:	7039      	strb	r1, [r7, #0]
    b50e:	381b      	subs	r0, #27
    b510:	28e0      	cmp	r0, #224	; 0xe0
    b512:	d902      	bls.n	b51a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xba>
    b514:	f640 41b8 	movw	r1, #3256	; 0xcb8
    b518:	e014      	b.n	b544 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b51a:	3e1b      	subs	r6, #27
    b51c:	2ee0      	cmp	r6, #224	; 0xe0
    b51e:	d902      	bls.n	b526 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc6>
    b520:	f640 41ba 	movw	r1, #3258	; 0xcba
    b524:	e00e      	b.n	b544 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b526:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    b52a:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    b52e:	4284      	cmp	r4, r0
    b530:	d902      	bls.n	b538 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd8>
    b532:	f640 41bc 	movw	r1, #3260	; 0xcbc
    b536:	e005      	b.n	b544 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe4>
    b538:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    b53c:	4285      	cmp	r5, r0
    b53e:	d904      	bls.n	b54a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xea>
    b540:	f640 41be 	movw	r1, #3262	; 0xcbe
    b544:	2039      	movs	r0, #57	; 0x39
    b546:	f7f9 ffcb 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b54a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    b54e:	0000      	.short	0x0000
    b550:	200002b4 	.word	0x200002b4
    b554:	b510      	push	{r4, lr}
    b556:	480e      	ldr	r0, [pc, #56]	; (b590 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x130>)
    b558:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b55c:	4b0d      	ldr	r3, [pc, #52]	; (b594 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x134>)
    b55e:	8281      	strh	r1, [r0, #20]
    b560:	2100      	movs	r1, #0
    b562:	7581      	strb	r1, [r0, #22]
    b564:	8301      	strh	r1, [r0, #24]
    b566:	221b      	movs	r2, #27
    b568:	801a      	strh	r2, [r3, #0]
    b56a:	f44f 74a4 	mov.w	r4, #328	; 0x148
    b56e:	805c      	strh	r4, [r3, #2]
    b570:	809a      	strh	r2, [r3, #4]
    b572:	80dc      	strh	r4, [r3, #6]
    b574:	7381      	strb	r1, [r0, #14]
    b576:	73c1      	strb	r1, [r0, #15]
    b578:	2303      	movs	r3, #3
    b57a:	7003      	strb	r3, [r0, #0]
    b57c:	2302      	movs	r3, #2
    b57e:	7043      	strb	r3, [r0, #1]
    b580:	8042      	strh	r2, [r0, #2]
    b582:	8082      	strh	r2, [r0, #4]
    b584:	f640 62a6 	movw	r2, #3750	; 0xea6
    b588:	6082      	str	r2, [r0, #8]
    b58a:	7481      	strb	r1, [r0, #18]
    b58c:	7301      	strb	r1, [r0, #12]
    b58e:	bd10      	pop	{r4, pc}
    b590:	20001264 	.word	0x20001264
    b594:	200002b4 	.word	0x200002b4
    b598:	b510      	push	{r4, lr}
    b59a:	2101      	movs	r1, #1
    b59c:	2000      	movs	r0, #0
    b59e:	f003 f947 	bl	e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    b5a2:	0004      	movs	r4, r0
    b5a4:	d10c      	bne.n	b5c0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    b5a6:	2200      	movs	r2, #0
    b5a8:	2101      	movs	r1, #1
    b5aa:	4610      	mov	r0, r2
    b5ac:	f003 f936 	bl	e81c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    b5b0:	0004      	movs	r4, r0
    b5b2:	d007      	beq.n	b5c4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x164>
    b5b4:	4806      	ldr	r0, [pc, #24]	; (b5d0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x170>)
    b5b6:	f990 1000 	ldrsb.w	r1, [r0]
    b5ba:	4620      	mov	r0, r4
    b5bc:	f004 fa1a 	bl	f9f4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    b5c0:	4620      	mov	r0, r4
    b5c2:	bd10      	pop	{r4, pc}
    b5c4:	f240 2135 	movw	r1, #565	; 0x235
    b5c8:	2039      	movs	r0, #57	; 0x39
    b5ca:	f7f9 ff89 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5ce:	0000      	.short	0x0000
    b5d0:	200002ac 	.word	0x200002ac

0000b5d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    b5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5d8:	b088      	sub	sp, #32
    b5da:	460c      	mov	r4, r1
    b5dc:	4606      	mov	r6, r0
    b5de:	f004 fab8 	bl	fb52 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    b5e2:	b198      	cbz	r0, b60c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    b5e4:	4630      	mov	r0, r6
    b5e6:	f004 faa7 	bl	fb38 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    b5ea:	b130      	cbz	r0, b5fa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    b5ec:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    b5f0:	2012      	movs	r0, #18
    b5f2:	2900      	cmp	r1, #0
    b5f4:	d00b      	beq.n	b60e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b5f6:	2980      	cmp	r1, #128	; 0x80
    b5f8:	d809      	bhi.n	b60e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b5fa:	4630      	mov	r0, r6
    b5fc:	f004 fa8b 	bl	fb16 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    b600:	b140      	cbz	r0, b614 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b602:	4630      	mov	r0, r6
    b604:	f004 f9c0 	bl	f988 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    b608:	b130      	cbz	r0, b618 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    b60a:	e009      	b.n	b620 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    b60c:	2042      	movs	r0, #66	; 0x42
    b60e:	b008      	add	sp, #32
    b610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b614:	200c      	movs	r0, #12
    b616:	e7fa      	b.n	b60e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b618:	4630      	mov	r0, r6
    b61a:	f004 fa87 	bl	fb2c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    b61e:	b3c0      	cbz	r0, b692 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    b620:	4630      	mov	r0, r6
    b622:	f004 fc4b 	bl	febc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b626:	2800      	cmp	r0, #0
    b628:	d1f4      	bne.n	b614 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b62a:	4630      	mov	r0, r6
    b62c:	f004 f9c7 	bl	f9be <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    b630:	2800      	cmp	r0, #0
    b632:	d1ef      	bne.n	b614 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b634:	4630      	mov	r0, r6
    b636:	f7fc f9e9 	bl	7a0c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    b63a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    b63e:	f242 7110 	movw	r1, #10000	; 0x2710
    b642:	fb00 f801 	mul.w	r8, r0, r1
    b646:	78e1      	ldrb	r1, [r4, #3]
    b648:	4630      	mov	r0, r6
    b64a:	f004 fa5b 	bl	fb04 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    b64e:	4630      	mov	r0, r6
    b650:	f004 fa6e 	bl	fb30 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b654:	b300      	cbz	r0, b698 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    b656:	2200      	movs	r2, #0
    b658:	4611      	mov	r1, r2
    b65a:	a801      	add	r0, sp, #4
    b65c:	f7fa f9aa 	bl	59b4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b660:	0004      	movs	r4, r0
    b662:	d06d      	beq.n	b740 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    b664:	2100      	movs	r1, #0
    b666:	f7fb fd6d 	bl	7144 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    b66a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b66e:	8020      	strh	r0, [r4, #0]
    b670:	4621      	mov	r1, r4
    b672:	4630      	mov	r0, r6
    b674:	f004 fa80 	bl	fb78 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    b678:	f000 f9a4 	bl	b9c4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b67c:	0940      	lsrs	r0, r0, #5
    b67e:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    b682:	07c0      	lsls	r0, r0, #31
    b684:	4d3a      	ldr	r5, [pc, #232]	; (b770 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>)
    b686:	f104 0030 	add.w	r0, r4, #48	; 0x30
    b68a:	d00f      	beq.n	b6ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd8>
    b68c:	8869      	ldrh	r1, [r5, #2]
    b68e:	88aa      	ldrh	r2, [r5, #4]
    b690:	e00e      	b.n	b6b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    b692:	e7ff      	b.n	b694 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    b694:	2012      	movs	r0, #18
    b696:	e7ba      	b.n	b60e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b698:	4642      	mov	r2, r8
    b69a:	2100      	movs	r1, #0
    b69c:	4630      	mov	r0, r6
    b69e:	f7fd f8b1 	bl	8804 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b6a2:	2800      	cmp	r0, #0
    b6a4:	d0b3      	beq.n	b60e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b6a6:	f241 417b 	movw	r1, #5243	; 0x147b
    b6aa:	e053      	b.n	b754 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b6ac:	211b      	movs	r1, #27
    b6ae:	460a      	mov	r2, r1
    b6b0:	84c1      	strh	r1, [r0, #38]	; 0x26
    b6b2:	8502      	strh	r2, [r0, #40]	; 0x28
    b6b4:	68a8      	ldr	r0, [r5, #8]
    b6b6:	6320      	str	r0, [r4, #48]	; 0x30
    b6b8:	f641 574c 	movw	r7, #7500	; 0x1d4c
    b6bc:	4630      	mov	r0, r6
    b6be:	f004 fa3f 	bl	fb40 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b6c2:	b910      	cbnz	r0, b6ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf6>
    b6c4:	4630      	mov	r0, r6
    b6c6:	f004 fa55 	bl	fb74 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    b6ca:	6127      	str	r7, [r4, #16]
    b6cc:	8821      	ldrh	r1, [r4, #0]
    b6ce:	f8ad 1008 	strh.w	r1, [sp, #8]
    b6d2:	7ba9      	ldrb	r1, [r5, #14]
    b6d4:	f88d 100a 	strb.w	r1, [sp, #10]
    b6d8:	7be9      	ldrb	r1, [r5, #15]
    b6da:	f88d 100b 	strb.w	r1, [sp, #11]
    b6de:	8a29      	ldrh	r1, [r5, #16]
    b6e0:	f8ad 100c 	strh.w	r1, [sp, #12]
    b6e4:	a905      	add	r1, sp, #20
    b6e6:	9100      	str	r1, [sp, #0]
    b6e8:	2001      	movs	r0, #1
    b6ea:	ab04      	add	r3, sp, #16
    b6ec:	aa02      	add	r2, sp, #8
    b6ee:	4621      	mov	r1, r4
    b6f0:	f005 fdf6 	bl	112e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
    b6f4:	b140      	cbz	r0, b708 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x134>
    b6f6:	2100      	movs	r1, #0
    b6f8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b6fc:	f7fa f984 	bl	5a08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b700:	b1f0      	cbz	r0, b740 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16c>
    b702:	f241 41cb 	movw	r1, #5323	; 0x14cb
    b706:	e025      	b.n	b754 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b708:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b70c:	f88d 0018 	strb.w	r0, [sp, #24]
    b710:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b714:	f88d 0019 	strb.w	r0, [sp, #25]
    b718:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b71c:	f8ad 001a 	strh.w	r0, [sp, #26]
    b720:	a906      	add	r1, sp, #24
    b722:	4620      	mov	r0, r4
    b724:	f003 fbd2 	bl	eecc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b728:	7868      	ldrb	r0, [r5, #1]
    b72a:	9000      	str	r0, [sp, #0]
    b72c:	782b      	ldrb	r3, [r5, #0]
    b72e:	88aa      	ldrh	r2, [r5, #4]
    b730:	8869      	ldrh	r1, [r5, #2]
    b732:	8820      	ldrh	r0, [r4, #0]
    b734:	f7fa fa34 	bl	5ba0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b738:	b120      	cbz	r0, b744 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x170>
    b73a:	f241 41d6 	movw	r1, #5334	; 0x14d6
    b73e:	e009      	b.n	b754 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b740:	2009      	movs	r0, #9
    b742:	e764      	b.n	b60e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b744:	4642      	mov	r2, r8
    b746:	4621      	mov	r1, r4
    b748:	4630      	mov	r0, r6
    b74a:	f7fd f85b 	bl	8804 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b74e:	b120      	cbz	r0, b75a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    b750:	f241 41d8 	movw	r1, #5336	; 0x14d8
    b754:	2039      	movs	r0, #57	; 0x39
    b756:	f7f9 fec3 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b75a:	4806      	ldr	r0, [pc, #24]	; (b774 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a0>)
    b75c:	6843      	ldr	r3, [r0, #4]
    b75e:	b123      	cbz	r3, b76a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x196>
    b760:	2200      	movs	r2, #0
    b762:	f504 718d 	add.w	r1, r4, #282	; 0x11a
    b766:	4620      	mov	r0, r4
    b768:	4798      	blx	r3
    b76a:	2000      	movs	r0, #0
    b76c:	e74f      	b.n	b60e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b76e:	0000      	.short	0x0000
    b770:	20001264 	.word	0x20001264
    b774:	200002ac 	.word	0x200002ac
    b778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b77c:	b088      	sub	sp, #32
    b77e:	4604      	mov	r4, r0
    b780:	8800      	ldrh	r0, [r0, #0]
    b782:	a906      	add	r1, sp, #24
    b784:	f003 fae2 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b788:	2800      	cmp	r0, #0
    b78a:	d147      	bne.n	b81c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b78c:	9807      	ldr	r0, [sp, #28]
    b78e:	f890 1162 	ldrb.w	r1, [r0, #354]	; 0x162
    b792:	f88d 1008 	strb.w	r1, [sp, #8]
    b796:	9902      	ldr	r1, [sp, #8]
    b798:	9102      	str	r1, [sp, #8]
    b79a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b79e:	3078      	adds	r0, #120	; 0x78
    b7a0:	b101      	cbz	r1, b7a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    b7a2:	2101      	movs	r1, #1
    b7a4:	f88d 100c 	strb.w	r1, [sp, #12]
    b7a8:	7bc1      	ldrb	r1, [r0, #15]
    b7aa:	f04f 0800 	mov.w	r8, #0
    b7ae:	0689      	lsls	r1, r1, #26
    b7b0:	d502      	bpl.n	b7b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e4>
    b7b2:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b7b6:	b149      	cbz	r1, b7cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    b7b8:	f05f 0100 	movs.w	r1, #0
    b7bc:	f88d 1004 	strb.w	r1, [sp, #4]
    b7c0:	2105      	movs	r1, #5
    b7c2:	305c      	adds	r0, #92	; 0x5c
    b7c4:	f004 ffcb 	bl	1075e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
    b7c8:	b110      	cbz	r0, b7d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1fc>
    b7ca:	e004      	b.n	b7d6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x202>
    b7cc:	2101      	movs	r1, #1
    b7ce:	e7f5      	b.n	b7bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1e8>
    b7d0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b7d4:	b308      	cbz	r0, b81a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    b7d6:	8921      	ldrh	r1, [r4, #8]
    b7d8:	88e0      	ldrh	r0, [r4, #6]
    b7da:	f005 fd3d 	bl	11258 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b7de:	2800      	cmp	r0, #0
    b7e0:	d11c      	bne.n	b81c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b7e2:	88a1      	ldrh	r1, [r4, #4]
    b7e4:	8860      	ldrh	r0, [r4, #2]
    b7e6:	f005 fd37 	bl	11258 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b7ea:	2800      	cmp	r0, #0
    b7ec:	d116      	bne.n	b81c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b7ee:	8921      	ldrh	r1, [r4, #8]
    b7f0:	88e0      	ldrh	r0, [r4, #6]
    b7f2:	f005 fd27 	bl	11244 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    b7f6:	2800      	cmp	r0, #0
    b7f8:	d110      	bne.n	b81c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b7fa:	88a1      	ldrh	r1, [r4, #4]
    b7fc:	8860      	ldrh	r0, [r4, #2]
    b7fe:	f005 fd21 	bl	11244 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    b802:	0006      	movs	r6, r0
    b804:	d10a      	bne.n	b81c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b806:	9807      	ldr	r0, [sp, #28]
    b808:	f500 758d 	add.w	r5, r0, #282	; 0x11a
    b80c:	27ff      	movs	r7, #255	; 0xff
    b80e:	706f      	strb	r7, [r5, #1]
    b810:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b814:	b129      	cbz	r1, b822 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24e>
    b816:	263a      	movs	r6, #58	; 0x3a
    b818:	e02e      	b.n	b878 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    b81a:	201a      	movs	r0, #26
    b81c:	b008      	add	sp, #32
    b81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b822:	4641      	mov	r1, r8
    b824:	aa03      	add	r2, sp, #12
    b826:	f005 fd25 	bl	11274 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
    b82a:	8861      	ldrh	r1, [r4, #2]
    b82c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    b830:	4281      	cmp	r1, r0
    b832:	d200      	bcs.n	b836 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    b834:	4608      	mov	r0, r1
    b836:	80e8      	strh	r0, [r5, #6]
    b838:	88a1      	ldrh	r1, [r4, #4]
    b83a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    b83e:	4281      	cmp	r1, r0
    b840:	d200      	bcs.n	b844 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x270>
    b842:	4608      	mov	r0, r1
    b844:	8128      	strh	r0, [r5, #8]
    b846:	88e2      	ldrh	r2, [r4, #6]
    b848:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b84c:	428a      	cmp	r2, r1
    b84e:	d200      	bcs.n	b852 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    b850:	4611      	mov	r1, r2
    b852:	8069      	strh	r1, [r5, #2]
    b854:	8922      	ldrh	r2, [r4, #8]
    b856:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    b85a:	428a      	cmp	r2, r1
    b85c:	d200      	bcs.n	b860 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    b85e:	4611      	mov	r1, r2
    b860:	f640 0248 	movw	r2, #2120	; 0x848
    b864:	80a9      	strh	r1, [r5, #4]
    b866:	4291      	cmp	r1, r2
    b868:	d300      	bcc.n	b86c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    b86a:	4611      	mov	r1, r2
    b86c:	80a9      	strh	r1, [r5, #4]
    b86e:	4290      	cmp	r0, r2
    b870:	d200      	bcs.n	b874 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a0>
    b872:	4602      	mov	r2, r0
    b874:	812a      	strh	r2, [r5, #8]
    b876:	702f      	strb	r7, [r5, #0]
    b878:	f885 8001 	strb.w	r8, [r5, #1]
    b87c:	4630      	mov	r0, r6
    b87e:	e7cd      	b.n	b81c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x248>
    b880:	b510      	push	{r4, lr}
    b882:	4604      	mov	r4, r0
    b884:	88c1      	ldrh	r1, [r0, #6]
    b886:	8880      	ldrh	r0, [r0, #4]
    b888:	f005 fce6 	bl	11258 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b88c:	2800      	cmp	r0, #0
    b88e:	d10f      	bne.n	b8b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    b890:	8861      	ldrh	r1, [r4, #2]
    b892:	8820      	ldrh	r0, [r4, #0]
    b894:	f005 fce0 	bl	11258 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f0>
    b898:	2800      	cmp	r0, #0
    b89a:	d109      	bne.n	b8b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2dc>
    b89c:	4805      	ldr	r0, [pc, #20]	; (b8b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2e0>)
    b89e:	88a1      	ldrh	r1, [r4, #4]
    b8a0:	8081      	strh	r1, [r0, #4]
    b8a2:	8821      	ldrh	r1, [r4, #0]
    b8a4:	8001      	strh	r1, [r0, #0]
    b8a6:	88e1      	ldrh	r1, [r4, #6]
    b8a8:	80c1      	strh	r1, [r0, #6]
    b8aa:	8861      	ldrh	r1, [r4, #2]
    b8ac:	8041      	strh	r1, [r0, #2]
    b8ae:	2000      	movs	r0, #0
    b8b0:	bd10      	pop	{r4, pc}
    b8b2:	0000      	.short	0x0000
    b8b4:	200002b4 	.word	0x200002b4
    b8b8:	0c11a70c 	.word	0x0c11a70c
    b8bc:	11a70059 	.word	0x11a70059

0000b8c0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b8c0:	b510      	push	{r4, lr}
    b8c2:	f7fb ff01 	bl	76c8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b8c6:	4805      	ldr	r0, [pc, #20]	; (b8dc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    b8c8:	6840      	ldr	r0, [r0, #4]
    b8ca:	f005 fde7 	bl	1149c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x434>
    b8ce:	f005 fb59 	bl	10f84 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8d6:	f7fc b867 	b.w	79a8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    b8da:	0000      	.short	0x0000
    b8dc:	200002bc 	.word	0x200002bc

0000b8e0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b8e0:	b510      	push	{r4, lr}
    b8e2:	4c05      	ldr	r4, [pc, #20]	; (b8f8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    b8e4:	68a0      	ldr	r0, [r4, #8]
    b8e6:	f005 fdd9 	bl	1149c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x434>
    b8ea:	68e0      	ldr	r0, [r4, #12]
    b8ec:	f005 fdd6 	bl	1149c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x434>
    b8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8f4:	f005 bbab 	b.w	1104e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b8f8:	200002bc 	.word	0x200002bc

0000b8fc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b8fc:	b510      	push	{r4, lr}
    b8fe:	4905      	ldr	r1, [pc, #20]	; (b914 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b900:	4805      	ldr	r0, [pc, #20]	; (b918 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b902:	f005 fdbe 	bl	11482 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b906:	4804      	ldr	r0, [pc, #16]	; (b918 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b90c:	4903      	ldr	r1, [pc, #12]	; (b91c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b90e:	1d00      	adds	r0, r0, #4
    b910:	f005 bdb7 	b.w	11482 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b914:	200002cc 	.word	0x200002cc
    b918:	200002c0 	.word	0x200002c0
    b91c:	200002d4 	.word	0x200002d4

0000b920 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b920:	b510      	push	{r4, lr}
    b922:	4908      	ldr	r1, [pc, #32]	; (b944 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b924:	4808      	ldr	r0, [pc, #32]	; (b948 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b926:	f005 fdac 	bl	11482 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b92a:	4807      	ldr	r0, [pc, #28]	; (b948 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b92c:	4907      	ldr	r1, [pc, #28]	; (b94c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b92e:	1d00      	adds	r0, r0, #4
    b930:	f005 fda7 	bl	11482 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b934:	4804      	ldr	r0, [pc, #16]	; (b948 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b93a:	4905      	ldr	r1, [pc, #20]	; (b950 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b93c:	3008      	adds	r0, #8
    b93e:	f005 bda0 	b.w	11482 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
    b942:	0000      	.short	0x0000
    b944:	200002e4 	.word	0x200002e4
    b948:	200002c0 	.word	0x200002c0
    b94c:	200002ec 	.word	0x200002ec
    b950:	200002dc 	.word	0x200002dc

0000b954 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b954:	4801      	ldr	r0, [pc, #4]	; (b95c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b956:	7800      	ldrb	r0, [r0, #0]
    b958:	4770      	bx	lr
    b95a:	0000      	.short	0x0000
    b95c:	200002bc 	.word	0x200002bc
    b960:	b510      	push	{r4, lr}
    b962:	f7fc f975 	bl	7c50 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b966:	f7fc fff5 	bl	8954 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b96a:	4803      	ldr	r0, [pc, #12]	; (b978 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b96c:	f7fc f956 	bl	7c1c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b974:	f7fb beb4 	b.w	76e0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b978:	200016f7 	.word	0x200016f7
    b97c:	4909      	ldr	r1, [pc, #36]	; (b9a4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b97e:	b510      	push	{r4, lr}
    b980:	2001      	movs	r0, #1
    b982:	7008      	strb	r0, [r1, #0]
    b984:	f7fc f994 	bl	7cb0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b988:	f7fd fbc0 	bl	910c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b98c:	f003 f910 	bl	ebb0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b990:	4805      	ldr	r0, [pc, #20]	; (b9a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    b992:	f7fa fcb5 	bl	6300 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b996:	2000      	movs	r0, #0
    b998:	f7f9 ff7c 	bl	5894 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b9a0:	f7fb bea6 	b.w	76f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    b9a4:	200002bc 	.word	0x200002bc
    b9a8:	200016f7 	.word	0x200016f7

0000b9ac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b9ac:	4a04      	ldr	r2, [pc, #16]	; (b9c0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    b9ae:	08c1      	lsrs	r1, r0, #3
    b9b0:	f000 0307 	and.w	r3, r0, #7
    b9b4:	2001      	movs	r0, #1
    b9b6:	4098      	lsls	r0, r3
    b9b8:	5c53      	ldrb	r3, [r2, r1]
    b9ba:	4303      	orrs	r3, r0
    b9bc:	5453      	strb	r3, [r2, r1]
    b9be:	4770      	bx	lr
    b9c0:	20000020 	.word	0x20000020

0000b9c4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b9c4:	4901      	ldr	r1, [pc, #4]	; (b9cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b9c6:	e9d1 0100 	ldrd	r0, r1, [r1]
    b9ca:	4770      	bx	lr
    b9cc:	20000020 	.word	0x20000020

0000b9d0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b9d0:	4806      	ldr	r0, [pc, #24]	; (b9ec <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    b9d2:	8801      	ldrh	r1, [r0, #0]
    b9d4:	7900      	ldrb	r0, [r0, #4]
    b9d6:	0602      	lsls	r2, r0, #24
    b9d8:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    b9dc:	f000 0001 	and.w	r0, r0, #1
    b9e0:	1800      	adds	r0, r0, r0
    b9e2:	b2c0      	uxtb	r0, r0
    b9e4:	f040 0001 	orr.w	r0, r0, #1
    b9e8:	4770      	bx	lr
    b9ea:	0000      	.short	0x0000
    b9ec:	20000020 	.word	0x20000020

0000b9f0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b9f0:	b510      	push	{r4, lr}
    b9f2:	f7f9 f9ad 	bl	4d50 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b9f6:	2200      	movs	r2, #0
    b9f8:	4b08      	ldr	r3, [pc, #32]	; (ba1c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b9fa:	4611      	mov	r1, r2
    b9fc:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    ba00:	4284      	cmp	r4, r0
    ba02:	d303      	bcc.n	ba0c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    ba04:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    ba08:	7882      	ldrb	r2, [r0, #2]
    ba0a:	e003      	b.n	ba14 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    ba0c:	1c49      	adds	r1, r1, #1
    ba0e:	b2c9      	uxtb	r1, r1
    ba10:	290c      	cmp	r1, #12
    ba12:	d3f3      	bcc.n	b9fc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    ba14:	4802      	ldr	r0, [pc, #8]	; (ba20 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    ba16:	7002      	strb	r2, [r0, #0]
    ba18:	bd10      	pop	{r4, pc}
    ba1a:	0000      	.short	0x0000
    ba1c:	000114ee 	.word	0x000114ee
    ba20:	2000033c 	.word	0x2000033c

0000ba24 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    ba24:	b570      	push	{r4, r5, r6, lr}
    ba26:	4605      	mov	r5, r0
    ba28:	4616      	mov	r6, r2
    ba2a:	460c      	mov	r4, r1
    ba2c:	2002      	movs	r0, #2
    ba2e:	f000 f9b7 	bl	bda0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ba32:	4906      	ldr	r1, [pc, #24]	; (ba4c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    ba34:	2001      	movs	r0, #1
    ba36:	1ef6      	subs	r6, r6, #3
    ba38:	7008      	strb	r0, [r1, #0]
    ba3a:	4805      	ldr	r0, [pc, #20]	; (ba50 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ba3c:	6006      	str	r6, [r0, #0]
    ba3e:	4804      	ldr	r0, [pc, #16]	; (ba50 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ba40:	3808      	subs	r0, #8
    ba42:	6005      	str	r5, [r0, #0]
    ba44:	1f00      	subs	r0, r0, #4
    ba46:	6004      	str	r4, [r0, #0]
    ba48:	bd70      	pop	{r4, r5, r6, pc}
    ba4a:	0000      	.short	0x0000
    ba4c:	2000033d 	.word	0x2000033d
    ba50:	4000f510 	.word	0x4000f510

0000ba54 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    ba54:	b510      	push	{r4, lr}
    ba56:	4c0c      	ldr	r4, [pc, #48]	; (ba88 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    ba58:	7820      	ldrb	r0, [r4, #0]
    ba5a:	b180      	cbz	r0, ba7e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    ba5c:	490b      	ldr	r1, [pc, #44]	; (ba8c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    ba5e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ba62:	6008      	str	r0, [r1, #0]
    ba64:	f000 f86a 	bl	bb3c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    ba68:	2100      	movs	r1, #0
    ba6a:	b120      	cbz	r0, ba76 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    ba6c:	2001      	movs	r0, #1
    ba6e:	7060      	strb	r0, [r4, #1]
    ba70:	4807      	ldr	r0, [pc, #28]	; (ba90 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    ba72:	6800      	ldr	r0, [r0, #0]
    ba74:	e001      	b.n	ba7a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    ba76:	7061      	strb	r1, [r4, #1]
    ba78:	2010      	movs	r0, #16
    ba7a:	70a0      	strb	r0, [r4, #2]
    ba7c:	7021      	strb	r1, [r4, #0]
    ba7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba82:	2000      	movs	r0, #0
    ba84:	f000 b98c 	b.w	bda0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ba88:	2000033d 	.word	0x2000033d
    ba8c:	4001f508 	.word	0x4001f508
    ba90:	4000f400 	.word	0x4000f400

0000ba94 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    ba94:	b510      	push	{r4, lr}
    ba96:	2002      	movs	r0, #2
    ba98:	f000 f982 	bl	bda0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ba9c:	4904      	ldr	r1, [pc, #16]	; (bab0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    ba9e:	2001      	movs	r0, #1
    baa0:	7008      	strb	r0, [r1, #0]
    baa2:	f000 f859 	bl	bb58 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    baa6:	4903      	ldr	r1, [pc, #12]	; (bab4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    baa8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    baac:	6008      	str	r0, [r1, #0]
    baae:	bd10      	pop	{r4, pc}
    bab0:	2000033d 	.word	0x2000033d
    bab4:	4001f504 	.word	0x4001f504

0000bab8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    bab8:	4803      	ldr	r0, [pc, #12]	; (bac8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    baba:	2100      	movs	r1, #0
    babc:	7001      	strb	r1, [r0, #0]
    babe:	7041      	strb	r1, [r0, #1]
    bac0:	2110      	movs	r1, #16
    bac2:	7081      	strb	r1, [r0, #2]
    bac4:	4770      	bx	lr
    bac6:	0000      	.short	0x0000
    bac8:	2000033d 	.word	0x2000033d

0000bacc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    bacc:	4807      	ldr	r0, [pc, #28]	; (baec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    bace:	b510      	push	{r4, lr}
    bad0:	7801      	ldrb	r1, [r0, #0]
    bad2:	b141      	cbz	r1, bae6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    bad4:	f000 f832 	bl	bb3c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    bad8:	b118      	cbz	r0, bae2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    bada:	4805      	ldr	r0, [pc, #20]	; (baf0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    badc:	6800      	ldr	r0, [r0, #0]
    bade:	b2c0      	uxtb	r0, r0
    bae0:	bd10      	pop	{r4, pc}
    bae2:	2010      	movs	r0, #16
    bae4:	bd10      	pop	{r4, pc}
    bae6:	7880      	ldrb	r0, [r0, #2]
    bae8:	bd10      	pop	{r4, pc}
    baea:	0000      	.short	0x0000
    baec:	2000033d 	.word	0x2000033d
    baf0:	4000f400 	.word	0x4000f400

0000baf4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    baf4:	4808      	ldr	r0, [pc, #32]	; (bb18 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    baf6:	b510      	push	{r4, lr}
    baf8:	7801      	ldrb	r1, [r0, #0]
    bafa:	b159      	cbz	r1, bb14 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    bafc:	4807      	ldr	r0, [pc, #28]	; (bb1c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    bafe:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    bb02:	b128      	cbz	r0, bb10 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    bb04:	f000 f80c 	bl	bb20 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    bb08:	2800      	cmp	r0, #0
    bb0a:	d000      	beq.n	bb0e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    bb0c:	2001      	movs	r0, #1
    bb0e:	bd10      	pop	{r4, pc}
    bb10:	2002      	movs	r0, #2
    bb12:	bd10      	pop	{r4, pc}
    bb14:	7840      	ldrb	r0, [r0, #1]
    bb16:	bd10      	pop	{r4, pc}
    bb18:	2000033d 	.word	0x2000033d
    bb1c:	4000f000 	.word	0x4000f000
    bb20:	4805      	ldr	r0, [pc, #20]	; (bb38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    bb22:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    bb26:	b111      	cbz	r1, bb2e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    bb28:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    bb2c:	b108      	cbz	r0, bb32 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    bb2e:	2000      	movs	r0, #0
    bb30:	4770      	bx	lr
    bb32:	2001      	movs	r0, #1
    bb34:	4770      	bx	lr
    bb36:	0000      	.short	0x0000
    bb38:	4000f000 	.word	0x4000f000
    bb3c:	4805      	ldr	r0, [pc, #20]	; (bb54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    bb3e:	b510      	push	{r4, lr}
    bb40:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    bb44:	b120      	cbz	r0, bb50 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    bb46:	f7ff ffeb 	bl	bb20 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    bb4a:	b108      	cbz	r0, bb50 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    bb4c:	2001      	movs	r0, #1
    bb4e:	bd10      	pop	{r4, pc}
    bb50:	2000      	movs	r0, #0
    bb52:	bd10      	pop	{r4, pc}
    bb54:	4000f000 	.word	0x4000f000
    bb58:	4804      	ldr	r0, [pc, #16]	; (bb6c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    bb5a:	2100      	movs	r1, #0
    bb5c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bb60:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bb64:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    bb68:	4770      	bx	lr
    bb6a:	0000      	.short	0x0000
    bb6c:	4000f000 	.word	0x4000f000

0000bb70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    bb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb74:	4604      	mov	r4, r0
    bb76:	461e      	mov	r6, r3
    bb78:	4690      	mov	r8, r2
    bb7a:	460f      	mov	r7, r1
    bb7c:	2001      	movs	r0, #1
    bb7e:	f000 f90f 	bl	bda0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bb82:	4d1e      	ldr	r5, [pc, #120]	; (bbfc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    bb84:	481e      	ldr	r0, [pc, #120]	; (bc00 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    bb86:	f004 0103 	and.w	r1, r4, #3
    bb8a:	712e      	strb	r6, [r5, #4]
    bb8c:	6800      	ldr	r0, [r0, #0]
    bb8e:	0432      	lsls	r2, r6, #16
    bb90:	f361 0007 	bfi	r0, r1, #0, #8
    bb94:	f366 200f 	bfi	r0, r6, #8, #8
    bb98:	0c00      	lsrs	r0, r0, #16
    bb9a:	4e1a      	ldr	r6, [pc, #104]	; (bc04 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    bb9c:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    bba0:	4308      	orrs	r0, r1
    bba2:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    bba6:	4818      	ldr	r0, [pc, #96]	; (bc08 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    bba8:	6007      	str	r7, [r0, #0]
    bbaa:	f001 fddd 	bl	d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bbae:	b938      	cbnz	r0, bbc0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    bbb0:	4815      	ldr	r0, [pc, #84]	; (bc08 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    bbb2:	3010      	adds	r0, #16
    bbb4:	6801      	ldr	r1, [r0, #0]
    bbb6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    bbba:	ea41 0108 	orr.w	r1, r1, r8
    bbbe:	6001      	str	r1, [r0, #0]
    bbc0:	f000 f8e4 	bl	bd8c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    bbc4:	b10c      	cbz	r4, bbca <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    bbc6:	2c04      	cmp	r4, #4
    bbc8:	d107      	bne.n	bbda <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    bbca:	4811      	ldr	r0, [pc, #68]	; (bc10 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    bbcc:	490d      	ldr	r1, [pc, #52]	; (bc04 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    bbce:	4a0f      	ldr	r2, [pc, #60]	; (bc0c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    bbd0:	1d09      	adds	r1, r1, #4
    bbd2:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    bbd6:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    bbda:	2001      	movs	r0, #1
    bbdc:	7068      	strb	r0, [r5, #1]
    bbde:	70ec      	strb	r4, [r5, #3]
    bbe0:	b11c      	cbz	r4, bbea <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    bbe2:	2c01      	cmp	r4, #1
    bbe4:	d001      	beq.n	bbea <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    bbe6:	2c02      	cmp	r4, #2
    bbe8:	d106      	bne.n	bbf8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    bbea:	7028      	strb	r0, [r5, #0]
    bbec:	2100      	movs	r1, #0
    bbee:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    bbf2:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    bbf6:	6030      	str	r0, [r6, #0]
    bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbfc:	20000340 	.word	0x20000340
    bc00:	0000bd9c 	.word	0x0000bd9c
    bc04:	4000f000 	.word	0x4000f000
    bc08:	4000f508 	.word	0x4000f508
    bc0c:	4000f100 	.word	0x4000f100
    bc10:	4001f088 	.word	0x4001f088

0000bc14 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    bc14:	b570      	push	{r4, r5, r6, lr}
    bc16:	4a1c      	ldr	r2, [pc, #112]	; (bc88 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    bc18:	7853      	ldrb	r3, [r2, #1]
    bc1a:	b1a3      	cbz	r3, bc46 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    bc1c:	4b1b      	ldr	r3, [pc, #108]	; (bc8c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    bc1e:	6019      	str	r1, [r3, #0]
    bc20:	1d19      	adds	r1, r3, #4
    bc22:	6008      	str	r0, [r1, #0]
    bc24:	2501      	movs	r5, #1
    bc26:	7095      	strb	r5, [r2, #2]
    bc28:	4610      	mov	r0, r2
    bc2a:	78d6      	ldrb	r6, [r2, #3]
    bc2c:	4b18      	ldr	r3, [pc, #96]	; (bc90 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    bc2e:	7800      	ldrb	r0, [r0, #0]
    bc30:	4c18      	ldr	r4, [pc, #96]	; (bc94 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    bc32:	2100      	movs	r1, #0
    bc34:	b156      	cbz	r6, bc4c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    bc36:	2e04      	cmp	r6, #4
    bc38:	d01b      	beq.n	bc72 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    bc3a:	b308      	cbz	r0, bc80 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    bc3c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bc40:	0668      	lsls	r0, r5, #25
    bc42:	6018      	str	r0, [r3, #0]
    bc44:	bd70      	pop	{r4, r5, r6, pc}
    bc46:	f44f 71c2 	mov.w	r1, #388	; 0x184
    bc4a:	e01a      	b.n	bc82 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    bc4c:	b178      	cbz	r0, bc6e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    bc4e:	4620      	mov	r0, r4
    bc50:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bc54:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    bc58:	601e      	str	r6, [r3, #0]
    bc5a:	1271      	asrs	r1, r6, #9
    bc5c:	f005 fc7c 	bl	11558 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bc60:	2800      	cmp	r0, #0
    bc62:	d0ef      	beq.n	bc44 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    bc64:	6065      	str	r5, [r4, #4]
    bc66:	480a      	ldr	r0, [pc, #40]	; (bc90 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    bc68:	1d00      	adds	r0, r0, #4
    bc6a:	6006      	str	r6, [r0, #0]
    bc6c:	bd70      	pop	{r4, r5, r6, pc}
    bc6e:	21b3      	movs	r1, #179	; 0xb3
    bc70:	e007      	b.n	bc82 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    bc72:	7015      	strb	r5, [r2, #0]
    bc74:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    bc78:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    bc7c:	6025      	str	r5, [r4, #0]
    bc7e:	bd70      	pop	{r4, r5, r6, pc}
    bc80:	21c6      	movs	r1, #198	; 0xc6
    bc82:	203c      	movs	r0, #60	; 0x3c
    bc84:	f7f9 fc2c 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc88:	20000340 	.word	0x20000340
    bc8c:	4000f50c 	.word	0x4000f50c
    bc90:	4001f504 	.word	0x4001f504
    bc94:	4000f000 	.word	0x4000f000

0000bc98 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    bc98:	b570      	push	{r4, r5, r6, lr}
    bc9a:	4d05      	ldr	r5, [pc, #20]	; (bcb0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    bc9c:	2400      	movs	r4, #0
    bc9e:	7828      	ldrb	r0, [r5, #0]
    bca0:	b110      	cbz	r0, bca8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    bca2:	f000 f873 	bl	bd8c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    bca6:	702c      	strb	r4, [r5, #0]
    bca8:	706c      	strb	r4, [r5, #1]
    bcaa:	70ac      	strb	r4, [r5, #2]
    bcac:	bd70      	pop	{r4, r5, r6, pc}
    bcae:	0000      	.short	0x0000
    bcb0:	20000340 	.word	0x20000340

0000bcb4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    bcb4:	4802      	ldr	r0, [pc, #8]	; (bcc0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    bcb6:	2100      	movs	r1, #0
    bcb8:	7001      	strb	r1, [r0, #0]
    bcba:	7041      	strb	r1, [r0, #1]
    bcbc:	7081      	strb	r1, [r0, #2]
    bcbe:	4770      	bx	lr
    bcc0:	20000340 	.word	0x20000340

0000bcc4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    bcc4:	480b      	ldr	r0, [pc, #44]	; (bcf4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    bcc6:	b510      	push	{r4, lr}
    bcc8:	7800      	ldrb	r0, [r0, #0]
    bcca:	b158      	cbz	r0, bce4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    bccc:	f44f 7182 	mov.w	r1, #260	; 0x104
    bcd0:	4809      	ldr	r0, [pc, #36]	; (bcf8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    bcd2:	f005 fc41 	bl	11558 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bcd6:	b140      	cbz	r0, bcea <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    bcd8:	4808      	ldr	r0, [pc, #32]	; (bcfc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    bcda:	6800      	ldr	r0, [r0, #0]
    bcdc:	2800      	cmp	r0, #0
    bcde:	d000      	beq.n	bce2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    bce0:	2001      	movs	r0, #1
    bce2:	bd10      	pop	{r4, pc}
    bce4:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    bce8:	e001      	b.n	bcee <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    bcea:	f240 11eb 	movw	r1, #491	; 0x1eb
    bcee:	203c      	movs	r0, #60	; 0x3c
    bcf0:	f7f9 fbf6 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcf4:	20000340 	.word	0x20000340
    bcf8:	4000f000 	.word	0x4000f000
    bcfc:	4000f400 	.word	0x4000f400

0000bd00 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    bd00:	4801      	ldr	r0, [pc, #4]	; (bd08 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    bd02:	2101      	movs	r1, #1
    bd04:	6081      	str	r1, [r0, #8]
    bd06:	4770      	bx	lr
    bd08:	4000f000 	.word	0x4000f000

0000bd0c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    bd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd10:	481b      	ldr	r0, [pc, #108]	; (bd80 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    bd12:	7800      	ldrb	r0, [r0, #0]
    bd14:	b1d8      	cbz	r0, bd4e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    bd16:	f8df 806c 	ldr.w	r8, [pc, #108]	; bd84 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    bd1a:	f44f 7682 	mov.w	r6, #260	; 0x104
    bd1e:	4631      	mov	r1, r6
    bd20:	4640      	mov	r0, r8
    bd22:	f005 fc19 	bl	11558 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bd26:	2800      	cmp	r0, #0
    bd28:	d128      	bne.n	bd7c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    bd2a:	2002      	movs	r0, #2
    bd2c:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    bd30:	4c15      	ldr	r4, [pc, #84]	; (bd88 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    bd32:	6820      	ldr	r0, [r4, #0]
    bd34:	43c0      	mvns	r0, r0
    bd36:	f340 1500 	sbfx	r5, r0, #4, #1
    bd3a:	6820      	ldr	r0, [r4, #0]
    bd3c:	f040 0010 	orr.w	r0, r0, #16
    bd40:	6020      	str	r0, [r4, #0]
    bd42:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    bd46:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    bd4a:	1c6d      	adds	r5, r5, #1
    bd4c:	e008      	b.n	bd60 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    bd4e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    bd52:	203c      	movs	r0, #60	; 0x3c
    bd54:	f7f9 fbc4 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd58:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    bd5c:	f7f9 fa1a 	bl	5194 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bd60:	4631      	mov	r1, r6
    bd62:	4640      	mov	r0, r8
    bd64:	f005 fbf8 	bl	11558 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    bd68:	2800      	cmp	r0, #0
    bd6a:	d0f5      	beq.n	bd58 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    bd6c:	b91d      	cbnz	r5, bd76 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    bd6e:	6820      	ldr	r0, [r4, #0]
    bd70:	f020 0010 	bic.w	r0, r0, #16
    bd74:	6020      	str	r0, [r4, #0]
    bd76:	2002      	movs	r0, #2
    bd78:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    bd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd80:	20000340 	.word	0x20000340
    bd84:	4000f000 	.word	0x4000f000
    bd88:	e000ed10 	.word	0xe000ed10
    bd8c:	4902      	ldr	r1, [pc, #8]	; (bd98 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    bd8e:	4801      	ldr	r0, [pc, #4]	; (bd94 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    bd90:	6008      	str	r0, [r1, #0]
    bd92:	4770      	bx	lr
    bd94:	02020000 	.word	0x02020000
    bd98:	4001f508 	.word	0x4001f508
    bd9c:	00010000 	.word	0x00010000

0000bda0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    bda0:	b510      	push	{r4, lr}
    bda2:	4604      	mov	r4, r0
    bda4:	f000 f820 	bl	bde8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    bda8:	2c00      	cmp	r4, #0
    bdaa:	d00e      	beq.n	bdca <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    bdac:	4a0b      	ldr	r2, [pc, #44]	; (bddc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    bdae:	480b      	ldr	r0, [pc, #44]	; (bddc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    bdb0:	490b      	ldr	r1, [pc, #44]	; (bde0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    bdb2:	3214      	adds	r2, #20
    bdb4:	2c01      	cmp	r4, #1
    bdb6:	d005      	beq.n	bdc4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    bdb8:	2c02      	cmp	r4, #2
    bdba:	d007      	beq.n	bdcc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    bdbc:	2181      	movs	r1, #129	; 0x81
    bdbe:	203d      	movs	r0, #61	; 0x3d
    bdc0:	f7f9 fb8e 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdc4:	2302      	movs	r3, #2
    bdc6:	6003      	str	r3, [r0, #0]
    bdc8:	6011      	str	r1, [r2, #0]
    bdca:	bd10      	pop	{r4, pc}
    bdcc:	2303      	movs	r3, #3
    bdce:	6003      	str	r3, [r0, #0]
    bdd0:	6011      	str	r1, [r2, #0]
    bdd2:	4904      	ldr	r1, [pc, #16]	; (bde4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    bdd4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bdd8:	6008      	str	r0, [r1, #0]
    bdda:	bd10      	pop	{r4, pc}
    bddc:	4000f500 	.word	0x4000f500
    bde0:	200017f9 	.word	0x200017f9
    bde4:	4001f504 	.word	0x4001f504
    bde8:	4805      	ldr	r0, [pc, #20]	; (be00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    bdea:	b510      	push	{r4, lr}
    bdec:	2100      	movs	r1, #0
    bdee:	6001      	str	r1, [r0, #0]
    bdf0:	6001      	str	r1, [r0, #0]
    bdf2:	f7ff ff51 	bl	bc98 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    bdf6:	4903      	ldr	r1, [pc, #12]	; (be04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    bdf8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bdfc:	6008      	str	r0, [r1, #0]
    bdfe:	bd10      	pop	{r4, pc}
    be00:	4000f500 	.word	0x4000f500
    be04:	4001f508 	.word	0x4001f508

0000be08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    be08:	4805      	ldr	r0, [pc, #20]	; (be20 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    be0a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    be0e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    be12:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    be16:	2100      	movs	r1, #0
    be18:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    be1c:	4770      	bx	lr
    be1e:	0000      	.short	0x0000
    be20:	40001000 	.word	0x40001000

0000be24 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    be24:	4904      	ldr	r1, [pc, #16]	; (be38 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    be26:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    be2a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    be2e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    be32:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    be36:	4770      	bx	lr
    be38:	40001000 	.word	0x40001000

0000be3c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    be3c:	4801      	ldr	r0, [pc, #4]	; (be44 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    be3e:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    be42:	4770      	bx	lr
    be44:	200012a8 	.word	0x200012a8

0000be48 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    be48:	4902      	ldr	r1, [pc, #8]	; (be54 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    be4a:	5c08      	ldrb	r0, [r1, r0]
    be4c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    be50:	4770      	bx	lr
    be52:	0000      	.short	0x0000
    be54:	0000cb76 	.word	0x0000cb76

0000be58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be5a:	4c24      	ldr	r4, [pc, #144]	; (beec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    be5c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    be60:	f010 0f10 	tst.w	r0, #16
    be64:	d001      	beq.n	be6a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    be66:	2701      	movs	r7, #1
    be68:	e000      	b.n	be6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    be6a:	2700      	movs	r7, #0
    be6c:	2010      	movs	r0, #16
    be6e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    be72:	2002      	movs	r0, #2
    be74:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    be78:	481d      	ldr	r0, [pc, #116]	; (bef0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    be7a:	2500      	movs	r5, #0
    be7c:	491d      	ldr	r1, [pc, #116]	; (bef4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    be7e:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    be82:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    be86:	6008      	str	r0, [r1, #0]
    be88:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    be8c:	f44f 7688 	mov.w	r6, #272	; 0x110
    be90:	f010 0fff 	tst.w	r0, #255	; 0xff
    be94:	d019      	beq.n	beca <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    be96:	20ff      	movs	r0, #255	; 0xff
    be98:	f88d 0000 	strb.w	r0, [sp]
    be9c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bea0:	2001      	movs	r0, #1
    bea2:	6120      	str	r0, [r4, #16]
    bea4:	e005      	b.n	beb2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    bea6:	bf00      	nop
    bea8:	f89d 0000 	ldrb.w	r0, [sp]
    beac:	1e40      	subs	r0, r0, #1
    beae:	f88d 0000 	strb.w	r0, [sp]
    beb2:	f89d 0000 	ldrb.w	r0, [sp]
    beb6:	b128      	cbz	r0, bec4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    beb8:	4631      	mov	r1, r6
    beba:	4620      	mov	r0, r4
    bebc:	f005 fb7b 	bl	115b6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bec0:	2800      	cmp	r0, #0
    bec2:	d0f1      	beq.n	bea8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    bec4:	f89d 0000 	ldrb.w	r0, [sp]
    bec8:	b158      	cbz	r0, bee2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    beca:	f000 fc49 	bl	c760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    bece:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    bed2:	f000 fdd1 	bl	ca78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    bed6:	2f00      	cmp	r7, #0
    bed8:	d002      	beq.n	bee0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    beda:	2010      	movs	r0, #16
    bedc:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bee2:	f640 0163 	movw	r1, #2147	; 0x863
    bee6:	203e      	movs	r0, #62	; 0x3e
    bee8:	f7f9 fafa 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    beec:	40001000 	.word	0x40001000
    bef0:	200012a8 	.word	0x200012a8
    bef4:	4001f508 	.word	0x4001f508

0000bef8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    bef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    befc:	4d18      	ldr	r5, [pc, #96]	; (bf60 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    befe:	4607      	mov	r7, r0
    bf00:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    bf04:	07c2      	lsls	r2, r0, #31
    bf06:	d00f      	beq.n	bf28 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    bf08:	4c16      	ldr	r4, [pc, #88]	; (bf64 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    bf0a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    bf0e:	f042 0201 	orr.w	r2, r2, #1
    bf12:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    bf16:	f040 0002 	orr.w	r0, r0, #2
    bf1a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    bf1e:	2601      	movs	r6, #1
    bf20:	b13f      	cbz	r7, bf32 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    bf22:	2f01      	cmp	r7, #1
    bf24:	d00b      	beq.n	bf3e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    bf26:	e010      	b.n	bf4a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    bf28:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    bf2c:	203e      	movs	r0, #62	; 0x3e
    bf2e:	f7f9 fad7 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf32:	4608      	mov	r0, r1
    bf34:	f000 fdfa 	bl	cb2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    bf38:	726e      	strb	r6, [r5, #9]
    bf3a:	6026      	str	r6, [r4, #0]
    bf3c:	e005      	b.n	bf4a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    bf3e:	4608      	mov	r0, r1
    bf40:	f000 fdda 	bl	caf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    bf44:	2002      	movs	r0, #2
    bf46:	7268      	strb	r0, [r5, #9]
    bf48:	6066      	str	r6, [r4, #4]
    bf4a:	4807      	ldr	r0, [pc, #28]	; (bf68 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    bf4c:	64c6      	str	r6, [r0, #76]	; 0x4c
    bf4e:	4806      	ldr	r0, [pc, #24]	; (bf68 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    bf50:	300c      	adds	r0, #12
    bf52:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    bf56:	4638      	mov	r0, r7
    bf58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bf5c:	f000 bd5e 	b.w	ca1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    bf60:	200012a8 	.word	0x200012a8
    bf64:	40001000 	.word	0x40001000
    bf68:	40008000 	.word	0x40008000

0000bf6c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    bf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf70:	4c2c      	ldr	r4, [pc, #176]	; (c024 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    bf72:	0006      	movs	r6, r0
    bf74:	4d2c      	ldr	r5, [pc, #176]	; (c028 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    bf76:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    bf7a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c02c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    bf7e:	f040 0002 	orr.w	r0, r0, #2
    bf82:	4689      	mov	r9, r1
    bf84:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    bf88:	f04f 0700 	mov.w	r7, #0
    bf8c:	d002      	beq.n	bf94 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    bf8e:	2e01      	cmp	r6, #1
    bf90:	d020      	beq.n	bfd4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    bf92:	e036      	b.n	c002 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    bf94:	4608      	mov	r0, r1
    bf96:	f000 fdc9 	bl	cb2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    bf9a:	2001      	movs	r0, #1
    bf9c:	7260      	strb	r0, [r4, #9]
    bf9e:	79e0      	ldrb	r0, [r4, #7]
    bfa0:	2801      	cmp	r0, #1
    bfa2:	d105      	bne.n	bfb0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    bfa4:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    bfa8:	f040 0008 	orr.w	r0, r0, #8
    bfac:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    bfb0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bfb2:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    bfb6:	62a0      	str	r0, [r4, #40]	; 0x28
    bfb8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    bfbc:	f8c8 0000 	str.w	r0, [r8]
    bfc0:	491b      	ldr	r1, [pc, #108]	; (c030 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    bfc2:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    bfc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    bfca:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    bfce:	fbb0 f7f1 	udiv	r7, r0, r1
    bfd2:	e016      	b.n	c002 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    bfd4:	4608      	mov	r0, r1
    bfd6:	f000 fd8f 	bl	caf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    bfda:	2002      	movs	r0, #2
    bfdc:	7260      	strb	r0, [r4, #9]
    bfde:	79e0      	ldrb	r0, [r4, #7]
    bfe0:	2801      	cmp	r0, #1
    bfe2:	d105      	bne.n	bff0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    bfe4:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    bfe8:	f040 0004 	orr.w	r0, r0, #4
    bfec:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    bff0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bff2:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    bff6:	62a0      	str	r0, [r4, #40]	; 0x28
    bff8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    bffc:	f8c8 0000 	str.w	r0, [r8]
    c000:	2729      	movs	r7, #41	; 0x29
    c002:	f000 fc19 	bl	c838 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    c006:	f001 fa83 	bl	d510 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    c00a:	b120      	cbz	r0, c016 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    c00c:	f7ff ff24 	bl	be58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c010:	2000      	movs	r0, #0
    c012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c016:	2100      	movs	r1, #0
    c018:	4630      	mov	r0, r6
    c01a:	f000 fcff 	bl	ca1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c01e:	4638      	mov	r0, r7
    c020:	e7f7      	b.n	c012 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    c022:	0000      	.short	0x0000
    c024:	200012a8 	.word	0x200012a8
    c028:	40001000 	.word	0x40001000
    c02c:	4001f504 	.word	0x4001f504
    c030:	0000cb70 	.word	0x0000cb70

0000c034 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    c034:	4a02      	ldr	r2, [pc, #8]	; (c040 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    c036:	6b13      	ldr	r3, [r2, #48]	; 0x30
    c038:	6003      	str	r3, [r0, #0]
    c03a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    c03c:	6008      	str	r0, [r1, #0]
    c03e:	4770      	bx	lr
    c040:	200012a8 	.word	0x200012a8

0000c044 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    c044:	b510      	push	{r4, lr}
    c046:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    c048:	4901      	ldr	r1, [pc, #4]	; (c050 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    c04a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    c04e:	bd10      	pop	{r4, pc}
    c050:	20001298 	.word	0x20001298

0000c054 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    c054:	490f      	ldr	r1, [pc, #60]	; (c094 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    c056:	b510      	push	{r4, lr}
    c058:	69ca      	ldr	r2, [r1, #28]
    c05a:	4282      	cmp	r2, r0
    c05c:	d302      	bcc.n	c064 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    c05e:	f640 01f7 	movw	r1, #2295	; 0x8f7
    c062:	e00b      	b.n	c07c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    c064:	2201      	movs	r2, #1
    c066:	730a      	strb	r2, [r1, #12]
    c068:	6108      	str	r0, [r1, #16]
    c06a:	490b      	ldr	r1, [pc, #44]	; (c098 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    c06c:	644a      	str	r2, [r1, #68]	; 0x44
    c06e:	1d0a      	adds	r2, r1, #4
    c070:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    c074:	4283      	cmp	r3, r0
    c076:	d304      	bcc.n	c082 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    c078:	f44f 6110 	mov.w	r1, #2304	; 0x900
    c07c:	203e      	movs	r0, #62	; 0x3e
    c07e:	f7f9 fa2f 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c082:	2300      	movs	r3, #0
    c084:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    c088:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c090:	f000 bc98 	b.w	c9c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c094:	200012a8 	.word	0x200012a8
    c098:	40008000 	.word	0x40008000

0000c09c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    c09c:	b570      	push	{r4, r5, r6, lr}
    c09e:	4c0f      	ldr	r4, [pc, #60]	; (c0dc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    c0a0:	4603      	mov	r3, r0
    c0a2:	2002      	movs	r0, #2
    c0a4:	7320      	strb	r0, [r4, #12]
    c0a6:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    c0aa:	2096      	movs	r0, #150	; 0x96
    c0ac:	f894 1020 	ldrb.w	r1, [r4, #32]
    c0b0:	7d22      	ldrb	r2, [r4, #20]
    c0b2:	2d01      	cmp	r5, #1
    c0b4:	d00e      	beq.n	c0d4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    c0b6:	f000 fd97 	bl	cbe8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    c0ba:	6120      	str	r0, [r4, #16]
    c0bc:	4808      	ldr	r0, [pc, #32]	; (c0e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    c0be:	2100      	movs	r1, #0
    c0c0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    c0c4:	6921      	ldr	r1, [r4, #16]
    c0c6:	69e0      	ldr	r0, [r4, #28]
    c0c8:	4408      	add	r0, r1
    c0ca:	4905      	ldr	r1, [pc, #20]	; (c0e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    c0cc:	1d09      	adds	r1, r1, #4
    c0ce:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c0d2:	bd70      	pop	{r4, r5, r6, pc}
    c0d4:	f000 fda6 	bl	cc24 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    c0d8:	e7ef      	b.n	c0ba <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    c0da:	0000      	.short	0x0000
    c0dc:	200012a8 	.word	0x200012a8
    c0e0:	40008000 	.word	0x40008000

0000c0e4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    c0e4:	b510      	push	{r4, lr}
    c0e6:	f001 fb5b 	bl	d7a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c0ea:	2800      	cmp	r0, #0
    c0ec:	d006      	beq.n	c0fc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    c0ee:	4804      	ldr	r0, [pc, #16]	; (c100 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    c0f0:	6801      	ldr	r1, [r0, #0]
    c0f2:	f021 0101 	bic.w	r1, r1, #1
    c0f6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    c0fa:	6001      	str	r1, [r0, #0]
    c0fc:	bd10      	pop	{r4, pc}
    c0fe:	0000      	.short	0x0000
    c100:	40001774 	.word	0x40001774

0000c104 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    c104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c108:	2238      	movs	r2, #56	; 0x38
    c10a:	2100      	movs	r1, #0
    c10c:	4813      	ldr	r0, [pc, #76]	; (c15c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    c10e:	f001 fbe5 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c112:	f000 fcb1 	bl	ca78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c116:	f001 fafc 	bl	d712 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c11a:	4d11      	ldr	r5, [pc, #68]	; (c160 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c11c:	4e10      	ldr	r6, [pc, #64]	; (c160 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c11e:	2400      	movs	r4, #0
    c120:	4f0f      	ldr	r7, [pc, #60]	; (c160 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c122:	3508      	adds	r5, #8
    c124:	3610      	adds	r6, #16
    c126:	b928      	cbnz	r0, c134 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c128:	f001 fb0a 	bl	d740 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c12c:	b910      	cbnz	r0, c134 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c12e:	f001 fb11 	bl	d754 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    c132:	b108      	cbz	r0, c138 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    c134:	2224      	movs	r2, #36	; 0x24
    c136:	e006      	b.n	c146 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c138:	f001 fb4c 	bl	d7d4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c13c:	b910      	cbnz	r0, c144 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    c13e:	f001 fb3f 	bl	d7c0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    c142:	b140      	cbz	r0, c156 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    c144:	2240      	movs	r2, #64	; 0x40
    c146:	21ff      	movs	r1, #255	; 0xff
    c148:	4638      	mov	r0, r7
    c14a:	f001 fbc7 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c14e:	602c      	str	r4, [r5, #0]
    c150:	6034      	str	r4, [r6, #0]
    c152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c156:	2238      	movs	r2, #56	; 0x38
    c158:	e7f5      	b.n	c146 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c15a:	0000      	.short	0x0000
    c15c:	200012a8 	.word	0x200012a8
    c160:	40000e00 	.word	0x40000e00

0000c164 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    c164:	4801      	ldr	r0, [pc, #4]	; (c16c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    c166:	69c0      	ldr	r0, [r0, #28]
    c168:	4770      	bx	lr
    c16a:	0000      	.short	0x0000
    c16c:	200012a8 	.word	0x200012a8

0000c170 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    c170:	4801      	ldr	r0, [pc, #4]	; (c178 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    c172:	6980      	ldr	r0, [r0, #24]
    c174:	4770      	bx	lr
    c176:	0000      	.short	0x0000
    c178:	200012a8 	.word	0x200012a8

0000c17c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    c17c:	b510      	push	{r4, lr}
    c17e:	f000 fc2f 	bl	c9e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    c182:	f7ff fe69 	bl	be58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c186:	f7f9 f85b 	bl	5240 <mpsl_fem_disable>
    c18a:	b130      	cbz	r0, c19a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    c18c:	1c40      	adds	r0, r0, #1
    c18e:	d004      	beq.n	c19a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    c190:	f240 5126 	movw	r1, #1318	; 0x526
    c194:	203e      	movs	r0, #62	; 0x3e
    c196:	f7f9 f9a3 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c19a:	480f      	ldr	r0, [pc, #60]	; (c1d8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    c19c:	4a0f      	ldr	r2, [pc, #60]	; (c1dc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    c19e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c1a0:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    c1a4:	6011      	str	r1, [r2, #0]
    c1a6:	2400      	movs	r4, #0
    c1a8:	6284      	str	r4, [r0, #40]	; 0x28
    c1aa:	7304      	strb	r4, [r0, #12]
    c1ac:	61c4      	str	r4, [r0, #28]
    c1ae:	6184      	str	r4, [r0, #24]
    c1b0:	f000 fc16 	bl	c9e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    c1b4:	480a      	ldr	r0, [pc, #40]	; (c1e0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    c1b6:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c1ba:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c1be:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c1c2:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c1c6:	2001      	movs	r0, #1
    c1c8:	f005 f9e4 	bl	11594 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c1d0:	2001      	movs	r0, #1
    c1d2:	f005 b9d2 	b.w	1157a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c1d6:	0000      	.short	0x0000
    c1d8:	200012a8 	.word	0x200012a8
    c1dc:	4001f508 	.word	0x4001f508
    c1e0:	40008000 	.word	0x40008000

0000c1e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c1e4:	b570      	push	{r4, r5, r6, lr}
    c1e6:	2001      	movs	r0, #1
    c1e8:	f005 f9d4 	bl	11594 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c1ec:	4c37      	ldr	r4, [pc, #220]	; (c2cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    c1ee:	2000      	movs	r0, #0
    c1f0:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c1f4:	2001      	movs	r0, #1
    c1f6:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c1fa:	f001 fac1 	bl	d780 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c1fe:	4d34      	ldr	r5, [pc, #208]	; (c2d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c200:	b118      	cbz	r0, c20a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    c202:	6828      	ldr	r0, [r5, #0]
    c204:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c208:	6028      	str	r0, [r5, #0]
    c20a:	f001 faad 	bl	d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c20e:	b128      	cbz	r0, c21c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    c210:	6828      	ldr	r0, [r5, #0]
    c212:	4930      	ldr	r1, [pc, #192]	; (c2d4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c214:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    c218:	4308      	orrs	r0, r1
    c21a:	6028      	str	r0, [r5, #0]
    c21c:	f001 fac0 	bl	d7a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c220:	b138      	cbz	r0, c232 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    c222:	482b      	ldr	r0, [pc, #172]	; (c2d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c224:	1d00      	adds	r0, r0, #4
    c226:	6801      	ldr	r1, [r0, #0]
    c228:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    c22c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    c230:	6001      	str	r1, [r0, #0]
    c232:	4927      	ldr	r1, [pc, #156]	; (c2d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c234:	4828      	ldr	r0, [pc, #160]	; (c2d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    c236:	313c      	adds	r1, #60	; 0x3c
    c238:	6008      	str	r0, [r1, #0]
    c23a:	f7f9 f837 	bl	52ac <mpsl_fem_device_config_254_apply_get>
    c23e:	b140      	cbz	r0, c252 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c240:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c244:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    c248:	1c41      	adds	r1, r0, #1
    c24a:	d002      	beq.n	c252 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c24c:	4920      	ldr	r1, [pc, #128]	; (c2d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c24e:	3110      	adds	r1, #16
    c250:	6008      	str	r0, [r1, #0]
    c252:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    c256:	6e00      	ldr	r0, [r0, #96]	; 0x60
    c258:	1c41      	adds	r1, r0, #1
    c25a:	d004      	beq.n	c266 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    c25c:	491f      	ldr	r1, [pc, #124]	; (c2dc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    c25e:	680a      	ldr	r2, [r1, #0]
    c260:	f360 4217 	bfi	r2, r0, #16, #8
    c264:	600a      	str	r2, [r1, #0]
    c266:	f240 1103 	movw	r1, #259	; 0x103
    c26a:	f240 605b 	movw	r0, #1627	; 0x65b
    c26e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    c272:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c276:	2001      	movs	r0, #1
    c278:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    c27c:	f000 f842 	bl	c304 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    c280:	f240 2001 	movw	r0, #513	; 0x201
    c284:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    c288:	2002      	movs	r0, #2
    c28a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c28e:	4914      	ldr	r1, [pc, #80]	; (c2e0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c290:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c294:	6008      	str	r0, [r1, #0]
    c296:	4913      	ldr	r1, [pc, #76]	; (c2e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    c298:	2000      	movs	r0, #0
    c29a:	4d13      	ldr	r5, [pc, #76]	; (c2e8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    c29c:	8608      	strh	r0, [r1, #48]	; 0x30
    c29e:	3110      	adds	r1, #16
    c2a0:	61c8      	str	r0, [r1, #28]
    c2a2:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    c2a6:	7028      	strb	r0, [r5, #0]
    c2a8:	2001      	movs	r0, #1
    c2aa:	f005 f966 	bl	1157a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c2ae:	2010      	movs	r0, #16
    c2b0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c2b4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c2b8:	2002      	movs	r0, #2
    c2ba:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c2be:	6868      	ldr	r0, [r5, #4]
    c2c0:	2800      	cmp	r0, #0
    c2c2:	d002      	beq.n	c2ca <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    c2c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c2c8:	4700      	bx	r0
    c2ca:	bd70      	pop	{r4, r5, r6, pc}
    c2cc:	40001000 	.word	0x40001000
    c2d0:	4000173c 	.word	0x4000173c
    c2d4:	80000096 	.word	0x80000096
    c2d8:	8900002c 	.word	0x8900002c
    c2dc:	4000158c 	.word	0x4000158c
    c2e0:	4001f504 	.word	0x4001f504
    c2e4:	20001298 	.word	0x20001298
    c2e8:	200002f4 	.word	0x200002f4

0000c2ec <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    c2ec:	4901      	ldr	r1, [pc, #4]	; (c2f4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    c2ee:	7548      	strb	r0, [r1, #21]
    c2f0:	4770      	bx	lr
    c2f2:	0000      	.short	0x0000
    c2f4:	200012a8 	.word	0x200012a8

0000c2f8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    c2f8:	4901      	ldr	r1, [pc, #4]	; (c300 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    c2fa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c2fe:	4770      	bx	lr
    c300:	0000cbc4 	.word	0x0000cbc4

0000c304 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    c304:	4908      	ldr	r1, [pc, #32]	; (c328 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    c306:	b510      	push	{r4, lr}
    c308:	7508      	strb	r0, [r1, #20]
    c30a:	4908      	ldr	r1, [pc, #32]	; (c32c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    c30c:	2801      	cmp	r0, #1
    c30e:	d006      	beq.n	c31e <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    c310:	2802      	cmp	r0, #2
    c312:	d006      	beq.n	c322 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    c314:	f640 5135 	movw	r1, #3381	; 0xd35
    c318:	203e      	movs	r0, #62	; 0x3e
    c31a:	f7f9 f8e1 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c31e:	2003      	movs	r0, #3
    c320:	e000      	b.n	c324 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    c322:	2004      	movs	r0, #4
    c324:	6008      	str	r0, [r1, #0]
    c326:	bd10      	pop	{r4, pc}
    c328:	200012a8 	.word	0x200012a8
    c32c:	40001510 	.word	0x40001510

0000c330 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c330:	4905      	ldr	r1, [pc, #20]	; (c348 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c332:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    c336:	4805      	ldr	r0, [pc, #20]	; (c34c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    c338:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c33c:	f041 0101 	orr.w	r1, r1, #1
    c340:	7001      	strb	r1, [r0, #0]
    c342:	f000 ba3f 	b.w	c7c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c346:	0000      	.short	0x0000
    c348:	40001000 	.word	0x40001000
    c34c:	200012a8 	.word	0x200012a8

0000c350 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    c350:	4901      	ldr	r1, [pc, #4]	; (c358 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    c352:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c356:	4770      	bx	lr
    c358:	0000cbd0 	.word	0x0000cbd0

0000c35c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c360:	f8df 90a0 	ldr.w	r9, [pc, #160]	; c404 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    c364:	4d28      	ldr	r5, [pc, #160]	; (c408 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    c366:	460f      	mov	r7, r1
    c368:	0006      	movs	r6, r0
    c36a:	4614      	mov	r4, r2
    c36c:	f04f 0801 	mov.w	r8, #1
    c370:	d004      	beq.n	c37c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    c372:	2e01      	cmp	r6, #1
    c374:	d010      	beq.n	c398 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    c376:	f240 71f4 	movw	r1, #2036	; 0x7f4
    c37a:	e039      	b.n	c3f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    c37c:	4610      	mov	r0, r2
    c37e:	f000 fbd5 	bl	cb2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c382:	4822      	ldr	r0, [pc, #136]	; (c40c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    c384:	f885 8009 	strb.w	r8, [r5, #9]
    c388:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    c38c:	4638      	mov	r0, r7
    c38e:	f000 fb7b 	bl	ca88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    c392:	4604      	mov	r4, r0
    c394:	4648      	mov	r0, r9
    c396:	e00c      	b.n	c3b2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    c398:	4610      	mov	r0, r2
    c39a:	f000 fbad 	bl	caf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    c39e:	2002      	movs	r0, #2
    c3a0:	7268      	strb	r0, [r5, #9]
    c3a2:	f649 71ba 	movw	r1, #40890	; 0x9fba
    c3a6:	4638      	mov	r0, r7
    c3a8:	f000 fb6e 	bl	ca88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    c3ac:	4604      	mov	r4, r0
    c3ae:	4815      	ldr	r0, [pc, #84]	; (c404 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    c3b0:	1d00      	adds	r0, r0, #4
    c3b2:	f000 fb27 	bl	ca04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    c3b6:	4f16      	ldr	r7, [pc, #88]	; (c410 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    c3b8:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    c3bc:	4916      	ldr	r1, [pc, #88]	; (c418 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    c3be:	4815      	ldr	r0, [pc, #84]	; (c414 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    c3c0:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    c3c4:	2010      	movs	r0, #16
    c3c6:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    c3ca:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c3cc:	4913      	ldr	r1, [pc, #76]	; (c41c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    c3ce:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    c3d2:	62a8      	str	r0, [r5, #40]	; 0x28
    c3d4:	0138      	lsls	r0, r7, #4
    c3d6:	6008      	str	r0, [r1, #0]
    c3d8:	f000 fa2e 	bl	c838 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    c3dc:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    c3e0:	480b      	ldr	r0, [pc, #44]	; (c410 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    c3e2:	300c      	adds	r0, #12
    c3e4:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c3e8:	42a0      	cmp	r0, r4
    c3ea:	d304      	bcc.n	c3f6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    c3ec:	f640 010a 	movw	r1, #2058	; 0x80a
    c3f0:	203e      	movs	r0, #62	; 0x3e
    c3f2:	f7f9 f875 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c3f6:	4621      	mov	r1, r4
    c3f8:	4630      	mov	r0, r6
    c3fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3fe:	f000 bb0d 	b.w	ca1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c402:	0000      	.short	0x0000
    c404:	40001000 	.word	0x40001000
    c408:	200012a8 	.word	0x200012a8
    c40c:	0000cb70 	.word	0x0000cb70
    c410:	40008000 	.word	0x40008000
    c414:	40008140 	.word	0x40008140
    c418:	4001f098 	.word	0x4001f098
    c41c:	4001f504 	.word	0x4001f504

0000c420 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    c420:	4b0d      	ldr	r3, [pc, #52]	; (c458 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    c422:	b510      	push	{r4, lr}
    c424:	71d8      	strb	r0, [r3, #7]
    c426:	729a      	strb	r2, [r3, #10]
    c428:	b151      	cbz	r1, c440 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    c42a:	2002      	movs	r0, #2
    c42c:	7218      	strb	r0, [r3, #8]
    c42e:	2801      	cmp	r0, #1
    c430:	d008      	beq.n	c444 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    c432:	2802      	cmp	r0, #2
    c434:	d00f      	beq.n	c456 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c436:	f640 211d 	movw	r1, #2589	; 0xa1d
    c43a:	203e      	movs	r0, #62	; 0x3e
    c43c:	f7f9 f850 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c440:	2001      	movs	r0, #1
    c442:	e7f3      	b.n	c42c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    c444:	7a58      	ldrb	r0, [r3, #9]
    c446:	2802      	cmp	r0, #2
    c448:	d105      	bne.n	c456 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c44a:	f000 f97f 	bl	c74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    c44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c452:	f000 baad 	b.w	c9b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    c456:	bd10      	pop	{r4, pc}
    c458:	200012a8 	.word	0x200012a8

0000c45c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    c45c:	4902      	ldr	r1, [pc, #8]	; (c468 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    c45e:	2000      	movs	r0, #0
    c460:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c464:	4770      	bx	lr
    c466:	0000      	.short	0x0000
    c468:	40008000 	.word	0x40008000

0000c46c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    c46c:	4904      	ldr	r1, [pc, #16]	; (c480 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    c46e:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    c472:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    c476:	4249      	negs	r1, r1
    c478:	7001      	strb	r1, [r0, #0]
    c47a:	2001      	movs	r0, #1
    c47c:	4770      	bx	lr
    c47e:	0000      	.short	0x0000
    c480:	40001000 	.word	0x40001000

0000c484 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    c484:	4903      	ldr	r1, [pc, #12]	; (c494 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    c486:	0e02      	lsrs	r2, r0, #24
    c488:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    c48c:	0200      	lsls	r0, r0, #8
    c48e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    c492:	4770      	bx	lr
    c494:	40001000 	.word	0x40001000

0000c498 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    c498:	6800      	ldr	r0, [r0, #0]
    c49a:	4903      	ldr	r1, [pc, #12]	; (c4a8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    c49c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c4a0:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    c4a4:	4770      	bx	lr
    c4a6:	0000      	.short	0x0000
    c4a8:	40001000 	.word	0x40001000

0000c4ac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    c4ac:	b510      	push	{r4, lr}
    c4ae:	2200      	movs	r2, #0
    c4b0:	2901      	cmp	r1, #1
    c4b2:	d006      	beq.n	c4c2 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    c4b4:	2902      	cmp	r1, #2
    c4b6:	d002      	beq.n	c4be <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    c4b8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    c4bc:	e014      	b.n	c4e8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    c4be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c4c2:	490b      	ldr	r1, [pc, #44]	; (c4f0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    c4c4:	430a      	orrs	r2, r1
    c4c6:	490b      	ldr	r1, [pc, #44]	; (c4f4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c4c8:	600a      	str	r2, [r1, #0]
    c4ca:	490b      	ldr	r1, [pc, #44]	; (c4f8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    c4cc:	4308      	orrs	r0, r1
    c4ce:	4909      	ldr	r1, [pc, #36]	; (c4f4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    c4d0:	1d09      	adds	r1, r1, #4
    c4d2:	6008      	str	r0, [r1, #0]
    c4d4:	4809      	ldr	r0, [pc, #36]	; (c4fc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    c4d6:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c4da:	b2c0      	uxtb	r0, r0
    c4dc:	2803      	cmp	r0, #3
    c4de:	d001      	beq.n	c4e4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    c4e0:	280b      	cmp	r0, #11
    c4e2:	d104      	bne.n	c4ee <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    c4e4:	f44f 7135 	mov.w	r1, #724	; 0x2d4
    c4e8:	203e      	movs	r0, #62	; 0x3e
    c4ea:	f7f8 fff9 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c4ee:	bd10      	pop	{r4, pc}
    c4f0:	00100108 	.word	0x00100108
    c4f4:	40001514 	.word	0x40001514
    c4f8:	02030000 	.word	0x02030000
    c4fc:	40001000 	.word	0x40001000

0000c500 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    c500:	4901      	ldr	r1, [pc, #4]	; (c508 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    c502:	7588      	strb	r0, [r1, #22]
    c504:	4770      	bx	lr
    c506:	0000      	.short	0x0000
    c508:	200012a8 	.word	0x200012a8

0000c50c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    c50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c510:	4852      	ldr	r0, [pc, #328]	; (c65c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c512:	f04f 0a01 	mov.w	sl, #1
    c516:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    c51a:	4850      	ldr	r0, [pc, #320]	; (c65c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c51c:	300c      	adds	r0, #12
    c51e:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    c522:	f000 fff3 	bl	d50c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    c526:	4c4e      	ldr	r4, [pc, #312]	; (c660 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c528:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    c52c:	f000 f918 	bl	c760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    c530:	494c      	ldr	r1, [pc, #304]	; (c664 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c532:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c534:	6008      	str	r0, [r1, #0]
    c536:	f8df 9130 	ldr.w	r9, [pc, #304]	; c668 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    c53a:	2000      	movs	r0, #0
    c53c:	62a0      	str	r0, [r4, #40]	; 0x28
    c53e:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    c542:	f240 131d 	movw	r3, #285	; 0x11d
    c546:	439a      	bics	r2, r3
    c548:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    c54c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c550:	f000 f986 	bl	c860 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    c554:	4605      	mov	r5, r0
    c556:	4841      	ldr	r0, [pc, #260]	; (c65c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c558:	3008      	adds	r0, #8
    c55a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c55e:	4e3f      	ldr	r6, [pc, #252]	; (c65c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    c560:	61e0      	str	r0, [r4, #28]
    c562:	1d36      	adds	r6, r6, #4
    c564:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c568:	61a0      	str	r0, [r4, #24]
    c56a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c56e:	7d21      	ldrb	r1, [r4, #20]
    c570:	f884 1020 	strb.w	r1, [r4, #32]
    c574:	7a61      	ldrb	r1, [r4, #9]
    c576:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    c57a:	46a0      	mov	r8, r4
    c57c:	2400      	movs	r4, #0
    c57e:	4639      	mov	r1, r7
    c580:	4628      	mov	r0, r5
    c582:	f000 f9e1 	bl	c948 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    c586:	b910      	cbnz	r0, c58e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    c588:	f8c9 a010 	str.w	sl, [r9, #16]
    c58c:	2401      	movs	r4, #1
    c58e:	4f34      	ldr	r7, [pc, #208]	; (c660 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c590:	07e8      	lsls	r0, r5, #31
    c592:	f1a7 0710 	sub.w	r7, r7, #16
    c596:	d002      	beq.n	c59e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    c598:	6838      	ldr	r0, [r7, #0]
    c59a:	4780      	blx	r0
    c59c:	e032      	b.n	c604 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    c59e:	07a8      	lsls	r0, r5, #30
    c5a0:	d527      	bpl.n	c5f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    c5a2:	0768      	lsls	r0, r5, #29
    c5a4:	d41f      	bmi.n	c5e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c5a6:	f001 f8fb 	bl	d7a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c5aa:	b9e0      	cbnz	r0, c5e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c5ac:	f001 f8e8 	bl	d780 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c5b0:	b9c8      	cbnz	r0, c5e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c5b2:	482e      	ldr	r0, [pc, #184]	; (c66c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c5b4:	6800      	ldr	r0, [r0, #0]
    c5b6:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    c5ba:	f3c0 5142 	ubfx	r1, r0, #21, #3
    c5be:	f000 030f 	and.w	r3, r0, #15
    c5c2:	f3c0 1203 	ubfx	r2, r0, #4, #4
    c5c6:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c5ca:	f1bc 0f00 	cmp.w	ip, #0
    c5ce:	d00a      	beq.n	c5e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c5d0:	b10b      	cbz	r3, c5d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    c5d2:	b102      	cbz	r2, c5d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    c5d4:	b938      	cbnz	r0, c5e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c5d6:	4825      	ldr	r0, [pc, #148]	; (c66c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c5d8:	1d00      	adds	r0, r0, #4
    c5da:	6800      	ldr	r0, [r0, #0]
    c5dc:	b118      	cbz	r0, c5e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c5de:	2903      	cmp	r1, #3
    c5e0:	d201      	bcs.n	c5e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c5e2:	f045 0504 	orr.w	r5, r5, #4
    c5e6:	f345 0080 	sbfx	r0, r5, #2, #1
    c5ea:	4621      	mov	r1, r4
    c5ec:	1c40      	adds	r0, r0, #1
    c5ee:	687a      	ldr	r2, [r7, #4]
    c5f0:	e007      	b.n	c602 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    c5f2:	f015 0f28 	tst.w	r5, #40	; 0x28
    c5f6:	d005      	beq.n	c604 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    c5f8:	f345 1140 	sbfx	r1, r5, #5, #1
    c5fc:	68ba      	ldr	r2, [r7, #8]
    c5fe:	4620      	mov	r0, r4
    c600:	1c49      	adds	r1, r1, #1
    c602:	4790      	blx	r2
    c604:	06e8      	lsls	r0, r5, #27
    c606:	d501      	bpl.n	c60c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    c608:	68f8      	ldr	r0, [r7, #12]
    c60a:	4780      	blx	r0
    c60c:	f898 1009 	ldrb.w	r1, [r8, #9]
    c610:	4640      	mov	r0, r8
    c612:	2902      	cmp	r1, #2
    c614:	d120      	bne.n	c658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    c616:	7b01      	ldrb	r1, [r0, #12]
    c618:	2900      	cmp	r1, #0
    c61a:	d01d      	beq.n	c658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    c61c:	2902      	cmp	r1, #2
    c61e:	d004      	beq.n	c62a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    c620:	2901      	cmp	r1, #1
    c622:	d009      	beq.n	c638 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    c624:	f640 4114 	movw	r1, #3092	; 0xc14
    c628:	e00d      	b.n	c646 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    c62a:	69c1      	ldr	r1, [r0, #28]
    c62c:	f8d8 0010 	ldr.w	r0, [r8, #16]
    c630:	4408      	add	r0, r1
    c632:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    c636:	e00b      	b.n	c650 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c638:	6901      	ldr	r1, [r0, #16]
    c63a:	f8d8 001c 	ldr.w	r0, [r8, #28]
    c63e:	4281      	cmp	r1, r0
    c640:	d804      	bhi.n	c64c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    c642:	f640 4115 	movw	r1, #3093	; 0xc15
    c646:	203e      	movs	r0, #62	; 0x3e
    c648:	f7f8 ff4a 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c64c:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    c650:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c654:	f000 b9b6 	b.w	c9c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c65c:	40008000 	.word	0x40008000
    c660:	200012a8 	.word	0x200012a8
    c664:	4001f508 	.word	0x4001f508
    c668:	40001000 	.word	0x40001000
    c66c:	40001450 	.word	0x40001450

0000c670 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c670:	b570      	push	{r4, r5, r6, lr}
    c672:	4b16      	ldr	r3, [pc, #88]	; (c6cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    c674:	888c      	ldrh	r4, [r1, #4]
    c676:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    c67a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    c67e:	780c      	ldrb	r4, [r1, #0]
    c680:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c684:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c688:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    c68c:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    c690:	2401      	movs	r4, #1
    c692:	4084      	lsls	r4, r0
    c694:	b2c9      	uxtb	r1, r1
    c696:	b2e5      	uxtb	r5, r4
    c698:	4329      	orrs	r1, r5
    c69a:	b132      	cbz	r2, c6aa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    c69c:	2a01      	cmp	r2, #1
    c69e:	d00a      	beq.n	c6b6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    c6a0:	f240 518d 	movw	r1, #1421	; 0x58d
    c6a4:	203e      	movs	r0, #62	; 0x3e
    c6a6:	f7f8 ff1b 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6aa:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c6ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c6b2:	43a0      	bics	r0, r4
    c6b4:	e004      	b.n	c6c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    c6b6:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c6ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c6be:	4328      	orrs	r0, r5
    c6c0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c6c4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c6c8:	bd70      	pop	{r4, r5, r6, pc}
    c6ca:	0000      	.short	0x0000
    c6cc:	40001000 	.word	0x40001000

0000c6d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c6d0:	4901      	ldr	r1, [pc, #4]	; (c6d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c6d2:	2001      	movs	r0, #1
    c6d4:	7008      	strb	r0, [r1, #0]
    c6d6:	4770      	bx	lr
    c6d8:	200002f4 	.word	0x200002f4
    c6dc:	480b      	ldr	r0, [pc, #44]	; (c70c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    c6de:	7d81      	ldrb	r1, [r0, #22]
    c6e0:	480b      	ldr	r0, [pc, #44]	; (c710 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c6e2:	5c40      	ldrb	r0, [r0, r1]
    c6e4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    c6e8:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c6ec:	d204      	bcs.n	c6f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    c6ee:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    c6f2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c6f6:	e001      	b.n	c6fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c6f8:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    c6fc:	4a05      	ldr	r2, [pc, #20]	; (c714 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    c6fe:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c702:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c706:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    c70a:	4770      	bx	lr
    c70c:	200012a8 	.word	0x200012a8
    c710:	0000cb76 	.word	0x0000cb76
    c714:	40001000 	.word	0x40001000
    c718:	b508      	push	{r3, lr}
    c71a:	490b      	ldr	r1, [pc, #44]	; (c748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    c71c:	466b      	mov	r3, sp
    c71e:	f991 2015 	ldrsb.w	r2, [r1, #21]
    c722:	7d89      	ldrb	r1, [r1, #22]
    c724:	f000 faca 	bl	ccbc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    c728:	f99d 0000 	ldrsb.w	r0, [sp]
    c72c:	f000 fa9a 	bl	cc64 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c730:	f10d 0001 	add.w	r0, sp, #1
    c734:	f7f8 fda8 	bl	5288 <mpsl_fem_pa_gain_set>
    c738:	2800      	cmp	r0, #0
    c73a:	d004      	beq.n	c746 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    c73c:	f240 51ce 	movw	r1, #1486	; 0x5ce
    c740:	203e      	movs	r0, #62	; 0x3e
    c742:	f7f8 fecd 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c746:	bd08      	pop	{r3, pc}
    c748:	200012a8 	.word	0x200012a8
    c74c:	4803      	ldr	r0, [pc, #12]	; (c75c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    c74e:	7a01      	ldrb	r1, [r0, #8]
    c750:	2901      	cmp	r1, #1
    c752:	d102      	bne.n	c75a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    c754:	7a80      	ldrb	r0, [r0, #10]
    c756:	f7ff bfdf 	b.w	c718 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    c75a:	4770      	bx	lr
    c75c:	200012a8 	.word	0x200012a8
    c760:	480d      	ldr	r0, [pc, #52]	; (c798 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    c762:	b510      	push	{r4, lr}
    c764:	7a40      	ldrb	r0, [r0, #9]
    c766:	2801      	cmp	r0, #1
    c768:	d00c      	beq.n	c784 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    c76a:	2802      	cmp	r0, #2
    c76c:	d113      	bne.n	c796 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c76e:	f7f8 fd6d 	bl	524c <mpsl_fem_lna_configuration_clear>
    c772:	2800      	cmp	r0, #0
    c774:	d00f      	beq.n	c796 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c776:	1c40      	adds	r0, r0, #1
    c778:	d00d      	beq.n	c796 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c77a:	f640 017a 	movw	r1, #2170	; 0x87a
    c77e:	203e      	movs	r0, #62	; 0x3e
    c780:	f7f8 feae 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c784:	f7f8 fd74 	bl	5270 <mpsl_fem_pa_configuration_clear>
    c788:	2800      	cmp	r0, #0
    c78a:	d004      	beq.n	c796 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c78c:	1c40      	adds	r0, r0, #1
    c78e:	d002      	beq.n	c796 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c790:	f640 0174 	movw	r1, #2164	; 0x874
    c794:	e7f3      	b.n	c77e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    c796:	bd10      	pop	{r4, pc}
    c798:	200012a8 	.word	0x200012a8
    c79c:	4808      	ldr	r0, [pc, #32]	; (c7c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    c79e:	2100      	movs	r1, #0
    c7a0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c7a4:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c7a8:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c7ac:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c7b0:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c7b4:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c7b8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c7bc:	4770      	bx	lr
    c7be:	0000      	.short	0x0000
    c7c0:	40001000 	.word	0x40001000
    c7c4:	4818      	ldr	r0, [pc, #96]	; (c828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    c7c6:	b510      	push	{r4, lr}
    c7c8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c7cc:	07c1      	lsls	r1, r0, #31
    c7ce:	d029      	beq.n	c824 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c7d0:	0781      	lsls	r1, r0, #30
    c7d2:	d514      	bpl.n	c7fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    c7d4:	4815      	ldr	r0, [pc, #84]	; (c82c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c7d6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c7da:	f041 0101 	orr.w	r1, r1, #1
    c7de:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c7e2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c7e6:	b2c0      	uxtb	r0, r0
    c7e8:	280b      	cmp	r0, #11
    c7ea:	d005      	beq.n	c7f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c7ec:	280a      	cmp	r0, #10
    c7ee:	d003      	beq.n	c7f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c7f0:	2803      	cmp	r0, #3
    c7f2:	d001      	beq.n	c7f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    c7f4:	2802      	cmp	r0, #2
    c7f6:	d115      	bne.n	c824 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c7f8:	f240 51f7 	movw	r1, #1527	; 0x5f7
    c7fc:	e00f      	b.n	c81e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    c7fe:	0740      	lsls	r0, r0, #29
    c800:	d510      	bpl.n	c824 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c802:	480a      	ldr	r0, [pc, #40]	; (c82c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    c804:	490a      	ldr	r1, [pc, #40]	; (c830 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    c806:	3008      	adds	r0, #8
    c808:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c80c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c810:	4808      	ldr	r0, [pc, #32]	; (c834 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    c812:	f004 fed5 	bl	115c0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c816:	2800      	cmp	r0, #0
    c818:	d004      	beq.n	c824 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    c81a:	f240 51ff 	movw	r1, #1535	; 0x5ff
    c81e:	203e      	movs	r0, #62	; 0x3e
    c820:	f7f8 fe5e 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c824:	bd10      	pop	{r4, pc}
    c826:	0000      	.short	0x0000
    c828:	200012a8 	.word	0x200012a8
    c82c:	40001000 	.word	0x40001000
    c830:	4001f098 	.word	0x4001f098
    c834:	40008000 	.word	0x40008000
    c838:	4808      	ldr	r0, [pc, #32]	; (c85c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    c83a:	4601      	mov	r1, r0
    c83c:	79c2      	ldrb	r2, [r0, #7]
    c83e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c842:	b112      	cbz	r2, c84a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    c844:	2a01      	cmp	r2, #1
    c846:	d003      	beq.n	c850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    c848:	e006      	b.n	c858 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c84a:	f041 0102 	orr.w	r1, r1, #2
    c84e:	e001      	b.n	c854 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    c850:	f041 0104 	orr.w	r1, r1, #4
    c854:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c858:	f7ff bfb4 	b.w	c7c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c85c:	200012a8 	.word	0x200012a8
    c860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c864:	4d34      	ldr	r5, [pc, #208]	; (c938 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    c866:	2400      	movs	r4, #0
    c868:	7b28      	ldrb	r0, [r5, #12]
    c86a:	b138      	cbz	r0, c87c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c86c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c870:	4832      	ldr	r0, [pc, #200]	; (c93c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    c872:	f004 fea5 	bl	115c0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c876:	b108      	cbz	r0, c87c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    c878:	2601      	movs	r6, #1
    c87a:	e000      	b.n	c87e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    c87c:	2600      	movs	r6, #0
    c87e:	7a68      	ldrb	r0, [r5, #9]
    c880:	4f2f      	ldr	r7, [pc, #188]	; (c940 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    c882:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c886:	2801      	cmp	r0, #1
    c888:	d002      	beq.n	c890 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c88a:	2802      	cmp	r0, #2
    c88c:	d006      	beq.n	c89c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c88e:	e016      	b.n	c8be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c890:	4638      	mov	r0, r7
    c892:	f004 fe90 	bl	115b6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c896:	b190      	cbz	r0, c8be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c898:	2408      	movs	r4, #8
    c89a:	e010      	b.n	c8be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c89c:	4638      	mov	r0, r7
    c89e:	f004 fe8a 	bl	115b6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c8a2:	b100      	cbz	r0, c8a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    c8a4:	2402      	movs	r4, #2
    c8a6:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    c8aa:	43c0      	mvns	r0, r0
    c8ac:	f340 0000 	sbfx	r0, r0, #0, #1
    c8b0:	1c40      	adds	r0, r0, #1
    c8b2:	d101      	bne.n	c8b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    c8b4:	f044 0404 	orr.w	r4, r4, #4
    c8b8:	b10e      	cbz	r6, c8be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    c8ba:	f044 0401 	orr.w	r4, r4, #1
    c8be:	f014 0f0b 	tst.w	r4, #11
    c8c2:	d107      	bne.n	c8d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c8c4:	f44f 7188 	mov.w	r1, #272	; 0x110
    c8c8:	4638      	mov	r0, r7
    c8ca:	f004 fe74 	bl	115b6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c8ce:	b108      	cbz	r0, c8d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c8d0:	f044 0410 	orr.w	r4, r4, #16
    c8d4:	481b      	ldr	r0, [pc, #108]	; (c944 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    c8d6:	7800      	ldrb	r0, [r0, #0]
    c8d8:	b1f8      	cbz	r0, c91a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    c8da:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c8de:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c8e2:	d007      	beq.n	c8f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c8e4:	f44f 718a 	mov.w	r1, #276	; 0x114
    c8e8:	4638      	mov	r0, r7
    c8ea:	f004 fe64 	bl	115b6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c8ee:	b108      	cbz	r0, c8f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c8f0:	2001      	movs	r0, #1
    c8f2:	e000      	b.n	c8f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c8f4:	2000      	movs	r0, #0
    c8f6:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c8fa:	b13e      	cbz	r6, c90c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c8fc:	f44f 718c 	mov.w	r1, #280	; 0x118
    c900:	4638      	mov	r0, r7
    c902:	f004 fe58 	bl	115b6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c906:	b108      	cbz	r0, c90c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    c908:	2001      	movs	r0, #1
    c90a:	e000      	b.n	c90e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    c90c:	2000      	movs	r0, #0
    c90e:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c912:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c916:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c91a:	f7ff ff3f 	bl	c79c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c91e:	06e0      	lsls	r0, r4, #27
    c920:	d506      	bpl.n	c930 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c922:	0720      	lsls	r0, r4, #28
    c924:	d404      	bmi.n	c930 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c926:	7a68      	ldrb	r0, [r5, #9]
    c928:	2801      	cmp	r0, #1
    c92a:	d101      	bne.n	c930 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    c92c:	f044 0420 	orr.w	r4, r4, #32
    c930:	4620      	mov	r0, r4
    c932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c936:	0000      	.short	0x0000
    c938:	200012a8 	.word	0x200012a8
    c93c:	40008000 	.word	0x40008000
    c940:	40001000 	.word	0x40001000
    c944:	200002f4 	.word	0x200002f4
    c948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c94c:	4c17      	ldr	r4, [pc, #92]	; (c9ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    c94e:	460d      	mov	r5, r1
    c950:	7a21      	ldrb	r1, [r4, #8]
    c952:	b129      	cbz	r1, c960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    c954:	f010 0f11 	tst.w	r0, #17
    c958:	d007      	beq.n	c96a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    c95a:	f7ff fa7d 	bl	be58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c95e:	e023      	b.n	c9a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c960:	f000 f88a 	bl	ca78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c964:	2000      	movs	r0, #0
    c966:	7320      	strb	r0, [r4, #12]
    c968:	e01e      	b.n	c9a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c96a:	2901      	cmp	r1, #1
    c96c:	d001      	beq.n	c972 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c96e:	2601      	movs	r6, #1
    c970:	e000      	b.n	c974 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    c972:	2600      	movs	r6, #0
    c974:	79e0      	ldrb	r0, [r4, #7]
    c976:	2801      	cmp	r0, #1
    c978:	d00e      	beq.n	c998 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    c97a:	2700      	movs	r7, #0
    c97c:	f000 f87c 	bl	ca78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    c980:	2196      	movs	r1, #150	; 0x96
    c982:	4630      	mov	r0, r6
    c984:	f000 f88e 	bl	caa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    c988:	4601      	mov	r1, r0
    c98a:	b14f      	cbz	r7, c9a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    c98c:	353b      	adds	r5, #59	; 0x3b
    c98e:	428d      	cmp	r5, r1
    c990:	d904      	bls.n	c99c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    c992:	2000      	movs	r0, #0
    c994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c998:	2701      	movs	r7, #1
    c99a:	e7ef      	b.n	c97c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    c99c:	2001      	movs	r0, #1
    c99e:	71e0      	strb	r0, [r4, #7]
    c9a0:	7aa2      	ldrb	r2, [r4, #10]
    c9a2:	4630      	mov	r0, r6
    c9a4:	f7ff fcda 	bl	c35c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c9a8:	2001      	movs	r0, #1
    c9aa:	e7f3      	b.n	c994 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c9ac:	200012a8 	.word	0x200012a8
    c9b0:	4803      	ldr	r0, [pc, #12]	; (c9c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    c9b2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c9b6:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c9ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c9be:	4770      	bx	lr
    c9c0:	40001000 	.word	0x40001000
    c9c4:	4804      	ldr	r0, [pc, #16]	; (c9d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    c9c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c9c8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c9cc:	6281      	str	r1, [r0, #40]	; 0x28
    c9ce:	4903      	ldr	r1, [pc, #12]	; (c9dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    c9d0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c9d4:	6008      	str	r0, [r1, #0]
    c9d6:	4770      	bx	lr
    c9d8:	200012a8 	.word	0x200012a8
    c9dc:	4001f504 	.word	0x4001f504
    c9e0:	4a07      	ldr	r2, [pc, #28]	; (ca00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c9e2:	2000      	movs	r0, #0
    c9e4:	3208      	adds	r2, #8
    c9e6:	4906      	ldr	r1, [pc, #24]	; (ca00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c9e8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c9ec:	1d0a      	adds	r2, r1, #4
    c9ee:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c9f2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c9f6:	4902      	ldr	r1, [pc, #8]	; (ca00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    c9f8:	310c      	adds	r1, #12
    c9fa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c9fe:	4770      	bx	lr
    ca00:	40008000 	.word	0x40008000
    ca04:	4903      	ldr	r1, [pc, #12]	; (ca14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    ca06:	79c9      	ldrb	r1, [r1, #7]
    ca08:	2900      	cmp	r1, #0
    ca0a:	d102      	bne.n	ca12 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    ca0c:	4902      	ldr	r1, [pc, #8]	; (ca18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    ca0e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ca12:	4770      	bx	lr
    ca14:	200012a8 	.word	0x200012a8
    ca18:	4001f098 	.word	0x4001f098
    ca1c:	b510      	push	{r4, lr}
    ca1e:	4a14      	ldr	r2, [pc, #80]	; (ca70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    ca20:	b120      	cbz	r0, ca2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    ca22:	2801      	cmp	r0, #1
    ca24:	d011      	beq.n	ca4a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    ca26:	f240 712c 	movw	r1, #1836	; 0x72c
    ca2a:	e01c      	b.n	ca66 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    ca2c:	f101 0028 	add.w	r0, r1, #40	; 0x28
    ca30:	e9c2 1002 	strd	r1, r0, [r2, #8]
    ca34:	490f      	ldr	r1, [pc, #60]	; (ca74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    ca36:	480e      	ldr	r0, [pc, #56]	; (ca70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    ca38:	f7f8 fc20 	bl	527c <mpsl_fem_pa_configuration_set>
    ca3c:	2800      	cmp	r0, #0
    ca3e:	d015      	beq.n	ca6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    ca40:	1c40      	adds	r0, r0, #1
    ca42:	d013      	beq.n	ca6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    ca44:	f240 711b 	movw	r1, #1819	; 0x71b
    ca48:	e00d      	b.n	ca66 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    ca4a:	f101 0029 	add.w	r0, r1, #41	; 0x29
    ca4e:	e9c2 1002 	strd	r1, r0, [r2, #8]
    ca52:	4908      	ldr	r1, [pc, #32]	; (ca74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    ca54:	4806      	ldr	r0, [pc, #24]	; (ca70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    ca56:	f7f8 fbff 	bl	5258 <mpsl_fem_lna_configuration_set>
    ca5a:	2800      	cmp	r0, #0
    ca5c:	d006      	beq.n	ca6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    ca5e:	1c40      	adds	r0, r0, #1
    ca60:	d004      	beq.n	ca6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    ca62:	f44f 61e5 	mov.w	r1, #1832	; 0x728
    ca66:	203e      	movs	r0, #62	; 0x3e
    ca68:	f7f8 fd3a 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca6c:	bd10      	pop	{r4, pc}
    ca6e:	0000      	.short	0x0000
    ca70:	200002fc 	.word	0x200002fc
    ca74:	0000cba0 	.word	0x0000cba0
    ca78:	4802      	ldr	r0, [pc, #8]	; (ca84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    ca7a:	2100      	movs	r1, #0
    ca7c:	71c1      	strb	r1, [r0, #7]
    ca7e:	7201      	strb	r1, [r0, #8]
    ca80:	7241      	strb	r1, [r0, #9]
    ca82:	4770      	bx	lr
    ca84:	200012a8 	.word	0x200012a8
    ca88:	4a05      	ldr	r2, [pc, #20]	; (caa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    ca8a:	79d2      	ldrb	r2, [r2, #7]
    ca8c:	2a01      	cmp	r2, #1
    ca8e:	d006      	beq.n	ca9e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    ca90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ca94:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    ca98:	fbb1 f1f2 	udiv	r1, r1, r2
    ca9c:	1a40      	subs	r0, r0, r1
    ca9e:	4770      	bx	lr
    caa0:	200012a8 	.word	0x200012a8
    caa4:	b570      	push	{r4, r5, r6, lr}
    caa6:	4c13      	ldr	r4, [pc, #76]	; (caf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    caa8:	4603      	mov	r3, r0
    caaa:	460d      	mov	r5, r1
    caac:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    cab0:	2000      	movs	r0, #0
    cab2:	b15a      	cbz	r2, cacc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    cab4:	4621      	mov	r1, r4
    cab6:	f891 1020 	ldrb.w	r1, [r1, #32]
    caba:	b163      	cbz	r3, cad6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    cabc:	2b01      	cmp	r3, #1
    cabe:	d111      	bne.n	cae4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    cac0:	2a01      	cmp	r2, #1
    cac2:	4628      	mov	r0, r5
    cac4:	d012      	beq.n	caec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    cac6:	f004 fd80 	bl	115ca <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    caca:	e009      	b.n	cae0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    cacc:	f640 0127 	movw	r1, #2087	; 0x827
    cad0:	203e      	movs	r0, #62	; 0x3e
    cad2:	f7f8 fd05 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cad6:	2a01      	cmp	r2, #1
    cad8:	4628      	mov	r0, r5
    cada:	d004      	beq.n	cae6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    cadc:	f004 fd83 	bl	115e6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    cae0:	69e1      	ldr	r1, [r4, #28]
    cae2:	4408      	add	r0, r1
    cae4:	bd70      	pop	{r4, r5, r6, pc}
    cae6:	f000 f8d1 	bl	cc8c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    caea:	e7f9      	b.n	cae0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    caec:	f000 f8c0 	bl	cc70 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    caf0:	e7f6      	b.n	cae0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    caf2:	0000      	.short	0x0000
    caf4:	200012a8 	.word	0x200012a8
    caf8:	b510      	push	{r4, lr}
    cafa:	f7ff fc03 	bl	c304 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    cafe:	f7ff fded 	bl	c6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    cb02:	f7ff fe23 	bl	c74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    cb06:	f7ff ff53 	bl	c9b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    cb0a:	f000 fe49 	bl	d7a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cb0e:	2800      	cmp	r0, #0
    cb10:	d108      	bne.n	cb24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    cb12:	f000 fe35 	bl	d780 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cb16:	2800      	cmp	r0, #0
    cb18:	d104      	bne.n	cb24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    cb1a:	4803      	ldr	r0, [pc, #12]	; (cb28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    cb1c:	6801      	ldr	r1, [r0, #0]
    cb1e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    cb22:	6001      	str	r1, [r0, #0]
    cb24:	bd10      	pop	{r4, pc}
    cb26:	0000      	.short	0x0000
    cb28:	40001568 	.word	0x40001568
    cb2c:	b510      	push	{r4, lr}
    cb2e:	4604      	mov	r4, r0
    cb30:	f7ff fbe8 	bl	c304 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    cb34:	f7ff fdd2 	bl	c6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    cb38:	4620      	mov	r0, r4
    cb3a:	f7ff fded 	bl	c718 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    cb3e:	f000 fe2f 	bl	d7a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cb42:	2800      	cmp	r0, #0
    cb44:	d00d      	beq.n	cb62 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    cb46:	4a09      	ldr	r2, [pc, #36]	; (cb6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    cb48:	6811      	ldr	r1, [r2, #0]
    cb4a:	0650      	lsls	r0, r2, #25
    cb4c:	2c02      	cmp	r4, #2
    cb4e:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    cb52:	d007      	beq.n	cb64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    cb54:	f3c0 2006 	ubfx	r0, r0, #8, #7
    cb58:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    cb5c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    cb60:	6010      	str	r0, [r2, #0]
    cb62:	bd10      	pop	{r4, pc}
    cb64:	f3c0 6006 	ubfx	r0, r0, #24, #7
    cb68:	e7f6      	b.n	cb58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    cb6a:	0000      	.short	0x0000
    cb6c:	40001588 	.word	0x40001588
    cb70:	a62c0000 	.word	0xa62c0000
    cb74:	0604a1e0 	.word	0x0604a1e0
    cb78:	0e0c0a08 	.word	0x0e0c0a08
    cb7c:	16141210 	.word	0x16141210
    cb80:	201e1c18 	.word	0x201e1c18
    cb84:	28262422 	.word	0x28262422
    cb88:	302e2c2a 	.word	0x302e2c2a
    cb8c:	38363432 	.word	0x38363432
    cb90:	403e3c3a 	.word	0x403e3c3a
    cb94:	48464442 	.word	0x48464442
    cb98:	024e4c4a 	.word	0x024e4c4a
    cb9c:	0000501a 	.word	0x0000501a
    cba0:	00000001 	.word	0x00000001
    cba4:	40001110 	.word	0x40001110
	...
    cbbc:	00001e14 	.word	0x00001e14
    cbc0:	00001130 	.word	0x00001130
    cbc4:	00000000 	.word	0x00000000
    cbc8:	00000028 	.word	0x00000028
    cbcc:	00000018 	.word	0x00000018
    cbd0:	00000000 	.word	0x00000000
    cbd4:	00001e14 	.word	0x00001e14
    cbd8:	00001130 	.word	0x00001130
    cbdc:	00000000 	.word	0x00000000
    cbe0:	00001770 	.word	0x00001770
    cbe4:	00000fa0 	.word	0x00000fa0

0000cbe8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    cbe8:	b570      	push	{r4, r5, r6, lr}
    cbea:	4605      	mov	r5, r0
    cbec:	4614      	mov	r4, r2
    cbee:	4608      	mov	r0, r1
    cbf0:	f7ff fbae 	bl	c350 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    cbf4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    cbf8:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    cbfc:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    cc00:	4807      	ldr	r0, [pc, #28]	; (cc20 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    cc02:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    cc06:	4408      	add	r0, r1
    cc08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    cc0c:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    cc10:	fbb0 f5f1 	udiv	r5, r0, r1
    cc14:	4620      	mov	r0, r4
    cc16:	f7ff fb6f 	bl	c2f8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    cc1a:	4428      	add	r0, r5
    cc1c:	1d40      	adds	r0, r0, #5
    cc1e:	bd70      	pop	{r4, r5, r6, pc}
    cc20:	0000ccb0 	.word	0x0000ccb0

0000cc24 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    cc24:	b570      	push	{r4, r5, r6, lr}
    cc26:	4d0e      	ldr	r5, [pc, #56]	; (cc60 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    cc28:	461c      	mov	r4, r3
    cc2a:	3d08      	subs	r5, #8
    cc2c:	4b0c      	ldr	r3, [pc, #48]	; (cc60 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    cc2e:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    cc32:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    cc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cc3a:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    cc3e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    cc42:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    cc46:	4418      	add	r0, r3
    cc48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    cc4c:	fbb0 f5f1 	udiv	r5, r0, r1
    cc50:	4610      	mov	r0, r2
    cc52:	f7ff fb51 	bl	c2f8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    cc56:	4428      	add	r0, r5
    cc58:	4420      	add	r0, r4
    cc5a:	1d40      	adds	r0, r0, #5
    cc5c:	bd70      	pop	{r4, r5, r6, pc}
    cc5e:	0000      	.short	0x0000
    cc60:	0000ccb0 	.word	0x0000ccb0

0000cc64 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    cc64:	4901      	ldr	r1, [pc, #4]	; (cc6c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    cc66:	b2c0      	uxtb	r0, r0
    cc68:	6008      	str	r0, [r1, #0]
    cc6a:	4770      	bx	lr
    cc6c:	4000150c 	.word	0x4000150c

0000cc70 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    cc70:	4a05      	ldr	r2, [pc, #20]	; (cc88 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    cc72:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    cc76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cc7a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    cc7e:	fbb1 f1f2 	udiv	r1, r1, r2
    cc82:	4408      	add	r0, r1
    cc84:	1e80      	subs	r0, r0, #2
    cc86:	4770      	bx	lr
    cc88:	0000cca8 	.word	0x0000cca8

0000cc8c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    cc8c:	4a05      	ldr	r2, [pc, #20]	; (cca4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    cc8e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    cc92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cc96:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    cc9a:	fbb1 f1f2 	udiv	r1, r1, r2
    cc9e:	4408      	add	r0, r1
    cca0:	4770      	bx	lr
    cca2:	0000      	.short	0x0000
    cca4:	0000cca8 	.word	0x0000cca8
    cca8:	05dc0000 	.word	0x05dc0000
    ccac:	000003e8 	.word	0x000003e8
    ccb0:	00000000 	.word	0x00000000
    ccb4:	00001e14 	.word	0x00001e14
    ccb8:	00001130 	.word	0x00001130

0000ccbc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    ccbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ccc0:	461e      	mov	r6, r3
    ccc2:	4617      	mov	r7, r2
    ccc4:	460c      	mov	r4, r1
    ccc6:	4605      	mov	r5, r0
    ccc8:	f7f4 fd4c 	bl	1764 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    cccc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; cd74 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    ccd0:	4680      	mov	r8, r0
    ccd2:	f899 0000 	ldrb.w	r0, [r9]
    ccd6:	42a8      	cmp	r0, r5
    ccd8:	d110      	bne.n	ccfc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    ccda:	f899 1001 	ldrb.w	r1, [r9, #1]
    ccde:	4648      	mov	r0, r9
    cce0:	42a1      	cmp	r1, r4
    cce2:	d10b      	bne.n	ccfc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    cce4:	f990 1002 	ldrsb.w	r1, [r0, #2]
    cce8:	42b9      	cmp	r1, r7
    ccea:	d107      	bne.n	ccfc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    ccec:	78c2      	ldrb	r2, [r0, #3]
    ccee:	4542      	cmp	r2, r8
    ccf0:	d104      	bne.n	ccfc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    ccf2:	8881      	ldrh	r1, [r0, #4]
    ccf4:	8031      	strh	r1, [r6, #0]
    ccf6:	7980      	ldrb	r0, [r0, #6]
    ccf8:	70b0      	strb	r0, [r6, #2]
    ccfa:	e036      	b.n	cd6a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    ccfc:	463a      	mov	r2, r7
    ccfe:	4621      	mov	r1, r4
    cd00:	2d01      	cmp	r5, #1
    cd02:	d009      	beq.n	cd18 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    cd04:	2d02      	cmp	r5, #2
    cd06:	d009      	beq.n	cd1c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    cd08:	2d04      	cmp	r5, #4
    cd0a:	d009      	beq.n	cd20 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    cd0c:	2d08      	cmp	r5, #8
    cd0e:	d009      	beq.n	cd24 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    cd10:	f240 4133 	movw	r1, #1075	; 0x433
    cd14:	2006      	movs	r0, #6
    cd16:	e00c      	b.n	cd32 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    cd18:	2000      	movs	r0, #0
    cd1a:	e004      	b.n	cd26 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cd1c:	2001      	movs	r0, #1
    cd1e:	e002      	b.n	cd26 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cd20:	2003      	movs	r0, #3
    cd22:	e000      	b.n	cd26 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    cd24:	2002      	movs	r0, #2
    cd26:	466b      	mov	r3, sp
    cd28:	f7f4 fd62 	bl	17f0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    cd2c:	b118      	cbz	r0, cd36 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    cd2e:	213d      	movs	r1, #61	; 0x3d
    cd30:	2075      	movs	r0, #117	; 0x75
    cd32:	f7f8 fbd5 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd36:	4620      	mov	r0, r4
    cd38:	f7ff f886 	bl	be48 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    cd3c:	4602      	mov	r2, r0
    cd3e:	4631      	mov	r1, r6
    cd40:	f99d 0000 	ldrsb.w	r0, [sp]
    cd44:	f7f8 faac 	bl	52a0 <mpsl_fem_tx_power_split>
    cd48:	4601      	mov	r1, r0
    cd4a:	f889 1007 	strb.w	r1, [r9, #7]
    cd4e:	8831      	ldrh	r1, [r6, #0]
    cd50:	f8a9 1004 	strh.w	r1, [r9, #4]
    cd54:	78b1      	ldrb	r1, [r6, #2]
    cd56:	f889 1006 	strb.w	r1, [r9, #6]
    cd5a:	f889 5000 	strb.w	r5, [r9]
    cd5e:	f889 4001 	strb.w	r4, [r9, #1]
    cd62:	f889 7002 	strb.w	r7, [r9, #2]
    cd66:	f889 8003 	strb.w	r8, [r9, #3]
    cd6a:	f999 0007 	ldrsb.w	r0, [r9, #7]
    cd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cd72:	0000      	.short	0x0000
    cd74:	20000345 	.word	0x20000345

0000cd78 <__udivmoddi4>:
    cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd7c:	4607      	mov	r7, r0
    cd7e:	468c      	mov	ip, r1
    cd80:	4608      	mov	r0, r1
    cd82:	9e09      	ldr	r6, [sp, #36]	; 0x24
    cd84:	4615      	mov	r5, r2
    cd86:	463c      	mov	r4, r7
    cd88:	4619      	mov	r1, r3
    cd8a:	2b00      	cmp	r3, #0
    cd8c:	f040 80c6 	bne.w	cf1c <__udivmoddi4+0x1a4>
    cd90:	4282      	cmp	r2, r0
    cd92:	fab2 f782 	clz	r7, r2
    cd96:	d946      	bls.n	ce26 <__udivmoddi4+0xae>
    cd98:	b14f      	cbz	r7, cdae <__udivmoddi4+0x36>
    cd9a:	f1c7 0e20 	rsb	lr, r7, #32
    cd9e:	fa24 fe0e 	lsr.w	lr, r4, lr
    cda2:	fa00 f307 	lsl.w	r3, r0, r7
    cda6:	40bd      	lsls	r5, r7
    cda8:	ea4e 0c03 	orr.w	ip, lr, r3
    cdac:	40bc      	lsls	r4, r7
    cdae:	ea4f 4815 	mov.w	r8, r5, lsr #16
    cdb2:	fa1f fe85 	uxth.w	lr, r5
    cdb6:	fbbc f9f8 	udiv	r9, ip, r8
    cdba:	0c22      	lsrs	r2, r4, #16
    cdbc:	fb08 c319 	mls	r3, r8, r9, ip
    cdc0:	fb09 fa0e 	mul.w	sl, r9, lr
    cdc4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    cdc8:	459a      	cmp	sl, r3
    cdca:	d928      	bls.n	ce1e <__udivmoddi4+0xa6>
    cdcc:	18eb      	adds	r3, r5, r3
    cdce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    cdd2:	d204      	bcs.n	cdde <__udivmoddi4+0x66>
    cdd4:	459a      	cmp	sl, r3
    cdd6:	d902      	bls.n	cdde <__udivmoddi4+0x66>
    cdd8:	f1a9 0002 	sub.w	r0, r9, #2
    cddc:	442b      	add	r3, r5
    cdde:	eba3 030a 	sub.w	r3, r3, sl
    cde2:	b2a4      	uxth	r4, r4
    cde4:	fbb3 f2f8 	udiv	r2, r3, r8
    cde8:	fb08 3312 	mls	r3, r8, r2, r3
    cdec:	fb02 fe0e 	mul.w	lr, r2, lr
    cdf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cdf4:	45a6      	cmp	lr, r4
    cdf6:	d914      	bls.n	ce22 <__udivmoddi4+0xaa>
    cdf8:	192c      	adds	r4, r5, r4
    cdfa:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    cdfe:	d203      	bcs.n	ce08 <__udivmoddi4+0x90>
    ce00:	45a6      	cmp	lr, r4
    ce02:	d901      	bls.n	ce08 <__udivmoddi4+0x90>
    ce04:	1e93      	subs	r3, r2, #2
    ce06:	442c      	add	r4, r5
    ce08:	eba4 040e 	sub.w	r4, r4, lr
    ce0c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ce10:	b11e      	cbz	r6, ce1a <__udivmoddi4+0xa2>
    ce12:	40fc      	lsrs	r4, r7
    ce14:	2300      	movs	r3, #0
    ce16:	6034      	str	r4, [r6, #0]
    ce18:	6073      	str	r3, [r6, #4]
    ce1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce1e:	4648      	mov	r0, r9
    ce20:	e7dd      	b.n	cdde <__udivmoddi4+0x66>
    ce22:	4613      	mov	r3, r2
    ce24:	e7f0      	b.n	ce08 <__udivmoddi4+0x90>
    ce26:	b902      	cbnz	r2, ce2a <__udivmoddi4+0xb2>
    ce28:	deff      	udf	#255	; 0xff
    ce2a:	bb87      	cbnz	r7, ce8e <__udivmoddi4+0x116>
    ce2c:	1a83      	subs	r3, r0, r2
    ce2e:	2101      	movs	r1, #1
    ce30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ce34:	b2aa      	uxth	r2, r5
    ce36:	fbb3 fcfe 	udiv	ip, r3, lr
    ce3a:	0c20      	lsrs	r0, r4, #16
    ce3c:	fb0e 331c 	mls	r3, lr, ip, r3
    ce40:	fb0c f802 	mul.w	r8, ip, r2
    ce44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    ce48:	4598      	cmp	r8, r3
    ce4a:	d963      	bls.n	cf14 <__udivmoddi4+0x19c>
    ce4c:	18eb      	adds	r3, r5, r3
    ce4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    ce52:	d204      	bcs.n	ce5e <__udivmoddi4+0xe6>
    ce54:	4598      	cmp	r8, r3
    ce56:	d902      	bls.n	ce5e <__udivmoddi4+0xe6>
    ce58:	f1ac 0002 	sub.w	r0, ip, #2
    ce5c:	442b      	add	r3, r5
    ce5e:	eba3 0308 	sub.w	r3, r3, r8
    ce62:	b2a4      	uxth	r4, r4
    ce64:	fbb3 fcfe 	udiv	ip, r3, lr
    ce68:	fb0e 331c 	mls	r3, lr, ip, r3
    ce6c:	fb0c f202 	mul.w	r2, ip, r2
    ce70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    ce74:	42a2      	cmp	r2, r4
    ce76:	d94f      	bls.n	cf18 <__udivmoddi4+0x1a0>
    ce78:	192c      	adds	r4, r5, r4
    ce7a:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    ce7e:	d204      	bcs.n	ce8a <__udivmoddi4+0x112>
    ce80:	42a2      	cmp	r2, r4
    ce82:	d902      	bls.n	ce8a <__udivmoddi4+0x112>
    ce84:	f1ac 0302 	sub.w	r3, ip, #2
    ce88:	442c      	add	r4, r5
    ce8a:	1aa4      	subs	r4, r4, r2
    ce8c:	e7be      	b.n	ce0c <__udivmoddi4+0x94>
    ce8e:	f1c7 0c20 	rsb	ip, r7, #32
    ce92:	fa20 f80c 	lsr.w	r8, r0, ip
    ce96:	fa00 f307 	lsl.w	r3, r0, r7
    ce9a:	fa24 fc0c 	lsr.w	ip, r4, ip
    ce9e:	40bd      	lsls	r5, r7
    cea0:	ea4c 0203 	orr.w	r2, ip, r3
    cea4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cea8:	b2ab      	uxth	r3, r5
    ceaa:	fbb8 fcfe 	udiv	ip, r8, lr
    ceae:	0c11      	lsrs	r1, r2, #16
    ceb0:	fb0e 801c 	mls	r0, lr, ip, r8
    ceb4:	fb0c f903 	mul.w	r9, ip, r3
    ceb8:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    cebc:	4581      	cmp	r9, r0
    cebe:	fa04 f407 	lsl.w	r4, r4, r7
    cec2:	d923      	bls.n	cf0c <__udivmoddi4+0x194>
    cec4:	1828      	adds	r0, r5, r0
    cec6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    ceca:	d204      	bcs.n	ced6 <__udivmoddi4+0x15e>
    cecc:	4581      	cmp	r9, r0
    cece:	d902      	bls.n	ced6 <__udivmoddi4+0x15e>
    ced0:	f1ac 0102 	sub.w	r1, ip, #2
    ced4:	4428      	add	r0, r5
    ced6:	eba0 0009 	sub.w	r0, r0, r9
    ceda:	b292      	uxth	r2, r2
    cedc:	fbb0 fcfe 	udiv	ip, r0, lr
    cee0:	fb0e 001c 	mls	r0, lr, ip, r0
    cee4:	fb0c f803 	mul.w	r8, ip, r3
    cee8:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    ceec:	4598      	cmp	r8, r3
    ceee:	d90f      	bls.n	cf10 <__udivmoddi4+0x198>
    cef0:	18eb      	adds	r3, r5, r3
    cef2:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    cef6:	d204      	bcs.n	cf02 <__udivmoddi4+0x18a>
    cef8:	4598      	cmp	r8, r3
    cefa:	d902      	bls.n	cf02 <__udivmoddi4+0x18a>
    cefc:	f1ac 0202 	sub.w	r2, ip, #2
    cf00:	442b      	add	r3, r5
    cf02:	eba3 0308 	sub.w	r3, r3, r8
    cf06:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    cf0a:	e791      	b.n	ce30 <__udivmoddi4+0xb8>
    cf0c:	4661      	mov	r1, ip
    cf0e:	e7e2      	b.n	ced6 <__udivmoddi4+0x15e>
    cf10:	4662      	mov	r2, ip
    cf12:	e7f6      	b.n	cf02 <__udivmoddi4+0x18a>
    cf14:	4660      	mov	r0, ip
    cf16:	e7a2      	b.n	ce5e <__udivmoddi4+0xe6>
    cf18:	4663      	mov	r3, ip
    cf1a:	e7b6      	b.n	ce8a <__udivmoddi4+0x112>
    cf1c:	4283      	cmp	r3, r0
    cf1e:	d905      	bls.n	cf2c <__udivmoddi4+0x1b4>
    cf20:	b10e      	cbz	r6, cf26 <__udivmoddi4+0x1ae>
    cf22:	e9c6 7000 	strd	r7, r0, [r6]
    cf26:	2100      	movs	r1, #0
    cf28:	4608      	mov	r0, r1
    cf2a:	e776      	b.n	ce1a <__udivmoddi4+0xa2>
    cf2c:	fab3 f183 	clz	r1, r3
    cf30:	b981      	cbnz	r1, cf54 <__udivmoddi4+0x1dc>
    cf32:	4283      	cmp	r3, r0
    cf34:	d301      	bcc.n	cf3a <__udivmoddi4+0x1c2>
    cf36:	42ba      	cmp	r2, r7
    cf38:	d80a      	bhi.n	cf50 <__udivmoddi4+0x1d8>
    cf3a:	1abc      	subs	r4, r7, r2
    cf3c:	eb60 0303 	sbc.w	r3, r0, r3
    cf40:	2001      	movs	r0, #1
    cf42:	469c      	mov	ip, r3
    cf44:	2e00      	cmp	r6, #0
    cf46:	d068      	beq.n	d01a <__udivmoddi4+0x2a2>
    cf48:	e9c6 4c00 	strd	r4, ip, [r6]
    cf4c:	2100      	movs	r1, #0
    cf4e:	e764      	b.n	ce1a <__udivmoddi4+0xa2>
    cf50:	4608      	mov	r0, r1
    cf52:	e7f7      	b.n	cf44 <__udivmoddi4+0x1cc>
    cf54:	f1c1 0c20 	rsb	ip, r1, #32
    cf58:	408b      	lsls	r3, r1
    cf5a:	fa22 f40c 	lsr.w	r4, r2, ip
    cf5e:	431c      	orrs	r4, r3
    cf60:	fa02 f501 	lsl.w	r5, r2, r1
    cf64:	fa00 f301 	lsl.w	r3, r0, r1
    cf68:	fa27 f20c 	lsr.w	r2, r7, ip
    cf6c:	fa20 fb0c 	lsr.w	fp, r0, ip
    cf70:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cf74:	4313      	orrs	r3, r2
    cf76:	fbbb f8f9 	udiv	r8, fp, r9
    cf7a:	fa1f fe84 	uxth.w	lr, r4
    cf7e:	fb09 bb18 	mls	fp, r9, r8, fp
    cf82:	0c1a      	lsrs	r2, r3, #16
    cf84:	fb08 fa0e 	mul.w	sl, r8, lr
    cf88:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    cf8c:	4592      	cmp	sl, r2
    cf8e:	fa07 f701 	lsl.w	r7, r7, r1
    cf92:	d93e      	bls.n	d012 <__udivmoddi4+0x29a>
    cf94:	18a2      	adds	r2, r4, r2
    cf96:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    cf9a:	d204      	bcs.n	cfa6 <__udivmoddi4+0x22e>
    cf9c:	4592      	cmp	sl, r2
    cf9e:	d902      	bls.n	cfa6 <__udivmoddi4+0x22e>
    cfa0:	f1a8 0002 	sub.w	r0, r8, #2
    cfa4:	4422      	add	r2, r4
    cfa6:	eba2 020a 	sub.w	r2, r2, sl
    cfaa:	b29b      	uxth	r3, r3
    cfac:	fbb2 f8f9 	udiv	r8, r2, r9
    cfb0:	fb09 2218 	mls	r2, r9, r8, r2
    cfb4:	fb08 fe0e 	mul.w	lr, r8, lr
    cfb8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    cfbc:	4596      	cmp	lr, r2
    cfbe:	d92a      	bls.n	d016 <__udivmoddi4+0x29e>
    cfc0:	18a2      	adds	r2, r4, r2
    cfc2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    cfc6:	d204      	bcs.n	cfd2 <__udivmoddi4+0x25a>
    cfc8:	4596      	cmp	lr, r2
    cfca:	d902      	bls.n	cfd2 <__udivmoddi4+0x25a>
    cfcc:	f1a8 0302 	sub.w	r3, r8, #2
    cfd0:	4422      	add	r2, r4
    cfd2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cfd6:	fba0 9305 	umull	r9, r3, r0, r5
    cfda:	eba2 020e 	sub.w	r2, r2, lr
    cfde:	429a      	cmp	r2, r3
    cfe0:	46ce      	mov	lr, r9
    cfe2:	4698      	mov	r8, r3
    cfe4:	d302      	bcc.n	cfec <__udivmoddi4+0x274>
    cfe6:	d106      	bne.n	cff6 <__udivmoddi4+0x27e>
    cfe8:	454f      	cmp	r7, r9
    cfea:	d204      	bcs.n	cff6 <__udivmoddi4+0x27e>
    cfec:	ebb9 0e05 	subs.w	lr, r9, r5
    cff0:	eb63 0804 	sbc.w	r8, r3, r4
    cff4:	3801      	subs	r0, #1
    cff6:	b186      	cbz	r6, d01a <__udivmoddi4+0x2a2>
    cff8:	ebb7 030e 	subs.w	r3, r7, lr
    cffc:	eb62 0708 	sbc.w	r7, r2, r8
    d000:	fa07 fc0c 	lsl.w	ip, r7, ip
    d004:	40cb      	lsrs	r3, r1
    d006:	ea4c 0303 	orr.w	r3, ip, r3
    d00a:	40cf      	lsrs	r7, r1
    d00c:	e9c6 3700 	strd	r3, r7, [r6]
    d010:	e79c      	b.n	cf4c <__udivmoddi4+0x1d4>
    d012:	4640      	mov	r0, r8
    d014:	e7c7      	b.n	cfa6 <__udivmoddi4+0x22e>
    d016:	4643      	mov	r3, r8
    d018:	e7db      	b.n	cfd2 <__udivmoddi4+0x25a>
    d01a:	4631      	mov	r1, r6
    d01c:	e6fd      	b.n	ce1a <__udivmoddi4+0xa2>

0000d01e <strcmp>:
    d01e:	f810 2b01 	ldrb.w	r2, [r0], #1
    d022:	f811 3b01 	ldrb.w	r3, [r1], #1
    d026:	2a01      	cmp	r2, #1
    d028:	bf28      	it	cs
    d02a:	429a      	cmpcs	r2, r3
    d02c:	d0f7      	beq.n	d01e <strcmp>
    d02e:	1ad0      	subs	r0, r2, r3
    d030:	4770      	bx	lr

0000d032 <strlen>:
    d032:	4603      	mov	r3, r0
    d034:	f813 2b01 	ldrb.w	r2, [r3], #1
    d038:	2a00      	cmp	r2, #0
    d03a:	d1fb      	bne.n	d034 <strlen+0x2>
    d03c:	1a18      	subs	r0, r3, r0
    d03e:	3801      	subs	r0, #1
    d040:	4770      	bx	lr
    d042:	2804      	cmp	r0, #4
    d044:	d202      	bcs.n	d04c <strlen+0x1a>
    d046:	f04f 0028 	mov.w	r0, #40	; 0x28
    d04a:	4770      	bx	lr
    d04c:	d102      	bne.n	d054 <strlen+0x22>
    d04e:	f04f 0010 	mov.w	r0, #16
    d052:	4770      	bx	lr
    d054:	f04f 0000 	mov.w	r0, #0
    d058:	4770      	bx	lr
    d05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d05e:	000d      	movs	r5, r1
    d060:	4604      	mov	r4, r0
    d062:	f04f 0602 	mov.w	r6, #2
    d066:	f04f 0701 	mov.w	r7, #1
    d06a:	d008      	beq.n	d07e <strlen+0x4c>
    d06c:	7828      	ldrb	r0, [r5, #0]
    d06e:	b1d0      	cbz	r0, d0a6 <strlen+0x74>
    d070:	2801      	cmp	r0, #1
    d072:	d007      	beq.n	d084 <strlen+0x52>
    d074:	2802      	cmp	r0, #2
    d076:	d014      	beq.n	d0a2 <strlen+0x70>
    d078:	2803      	cmp	r0, #3
    d07a:	d13e      	bne.n	d0fa <strlen+0xc8>
    d07c:	e016      	b.n	d0ac <strlen+0x7a>
    d07e:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
    d082:	e00e      	b.n	d0a2 <strlen+0x70>
    d084:	6868      	ldr	r0, [r5, #4]
    d086:	28c8      	cmp	r0, #200	; 0xc8
    d088:	d303      	bcc.n	d092 <strlen+0x60>
    d08a:	2103      	movs	r1, #3
    d08c:	f7f5 fca2 	bl	29d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d090:	b108      	cbz	r0, d096 <strlen+0x64>
    d092:	2600      	movs	r6, #0
    d094:	e007      	b.n	d0a6 <strlen+0x74>
    d096:	4620      	mov	r0, r4
    d098:	6869      	ldr	r1, [r5, #4]
    d09a:	f000 f943 	bl	d324 <strlen+0x2f2>
    d09e:	2601      	movs	r6, #1
    d0a0:	e001      	b.n	d0a6 <strlen+0x74>
    d0a2:	f7f4 fbf3 	bl	188c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    d0a6:	4630      	mov	r0, r6
    d0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0ac:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d0b0:	2800      	cmp	r0, #0
    d0b2:	d1f6      	bne.n	d0a2 <strlen+0x70>
    d0b4:	6868      	ldr	r0, [r5, #4]
    d0b6:	f7f4 fbbb 	bl	1830 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    d0ba:	b1f0      	cbz	r0, d0fa <strlen+0xc8>
    d0bc:	6869      	ldr	r1, [r5, #4]
    d0be:	7808      	ldrb	r0, [r1, #0]
    d0c0:	b130      	cbz	r0, d0d0 <strlen+0x9e>
    d0c2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d0c6:	2805      	cmp	r0, #5
    d0c8:	d008      	beq.n	d0dc <strlen+0xaa>
    d0ca:	f44f 71be 	mov.w	r1, #380	; 0x17c
    d0ce:	e011      	b.n	d0f4 <strlen+0xc2>
    d0d0:	4620      	mov	r0, r4
    d0d2:	f000 f92f 	bl	d334 <strlen+0x302>
    d0d6:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    d0da:	e7e2      	b.n	d0a2 <strlen+0x70>
    d0dc:	4620      	mov	r0, r4
    d0de:	f000 f942 	bl	d366 <strlen+0x334>
    d0e2:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d0e6:	4621      	mov	r1, r4
    d0e8:	f000 f80a 	bl	d100 <strlen+0xce>
    d0ec:	2800      	cmp	r0, #0
    d0ee:	d1d8      	bne.n	d0a2 <strlen+0x70>
    d0f0:	f44f 71bf 	mov.w	r1, #382	; 0x17e
    d0f4:	206a      	movs	r0, #106	; 0x6a
    d0f6:	f7f7 ff23 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d0fa:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d0fe:	e7d0      	b.n	d0a2 <strlen+0x70>
    d100:	f7f5 be4a 	b.w	2d98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    d104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d108:	460d      	mov	r5, r1
    d10a:	0004      	movs	r4, r0
    d10c:	d00c      	beq.n	d128 <strlen+0xf6>
    d10e:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    d112:	2700      	movs	r7, #0
    d114:	2002      	movs	r0, #2
    d116:	2d09      	cmp	r5, #9
    d118:	d270      	bcs.n	d1fc <strlen+0x1ca>
    d11a:	e8df f005 	tbb	[pc, r5]
    d11e:	1108      	.short	0x1108
    d120:	70653535 	.word	0x70653535
    d124:	0093a588 	.word	0x0093a588
    d128:	f44f 71cb 	mov.w	r1, #406	; 0x196
    d12c:	e0f7      	b.n	d31e <strlen+0x2ec>
    d12e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d132:	2804      	cmp	r0, #4
    d134:	d07a      	beq.n	d22c <strlen+0x1fa>
    d136:	2803      	cmp	r0, #3
    d138:	d0fc      	beq.n	d134 <strlen+0x102>
    d13a:	f240 11a1 	movw	r1, #417	; 0x1a1
    d13e:	e0ee      	b.n	d31e <strlen+0x2ec>
    d140:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d144:	2804      	cmp	r0, #4
    d146:	d004      	beq.n	d152 <strlen+0x120>
    d148:	2803      	cmp	r0, #3
    d14a:	d002      	beq.n	d152 <strlen+0x120>
    d14c:	f240 11a5 	movw	r1, #421	; 0x1a5
    d150:	e0e5      	b.n	d31e <strlen+0x2ec>
    d152:	2005      	movs	r0, #5
    d154:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d158:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d15c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d160:	bbb0      	cbnz	r0, d1d0 <strlen+0x19e>
    d162:	2100      	movs	r1, #0
    d164:	4620      	mov	r0, r4
    d166:	f000 f8dd 	bl	d324 <strlen+0x2f2>
    d16a:	7820      	ldrb	r0, [r4, #0]
    d16c:	2801      	cmp	r0, #1
    d16e:	d006      	beq.n	d17e <strlen+0x14c>
    d170:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    d174:	e9c4 0106 	strd	r0, r1, [r4, #24]
    d178:	2100      	movs	r1, #0
    d17a:	6a22      	ldr	r2, [r4, #32]
    d17c:	e048      	b.n	d210 <strlen+0x1de>
    d17e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d182:	f7f5 fd15 	bl	2bb0 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    d186:	e7f5      	b.n	d174 <strlen+0x142>
    d188:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    d18c:	2904      	cmp	r1, #4
    d18e:	d004      	beq.n	d19a <strlen+0x168>
    d190:	2903      	cmp	r1, #3
    d192:	d002      	beq.n	d19a <strlen+0x168>
    d194:	f240 11c3 	movw	r1, #451	; 0x1c3
    d198:	e0c1      	b.n	d31e <strlen+0x2ec>
    d19a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    d19e:	b122      	cbz	r2, d1aa <strlen+0x178>
    d1a0:	4621      	mov	r1, r4
    d1a2:	4630      	mov	r0, r6
    d1a4:	f000 f8fe 	bl	d3a4 <strlen+0x372>
    d1a8:	e0b1      	b.n	d30e <strlen+0x2dc>
    d1aa:	2904      	cmp	r1, #4
    d1ac:	d000      	beq.n	d1b0 <strlen+0x17e>
    d1ae:	2001      	movs	r0, #1
    d1b0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d1b4:	6a22      	ldr	r2, [r4, #32]
    d1b6:	2d02      	cmp	r5, #2
    d1b8:	d00b      	beq.n	d1d2 <strlen+0x1a0>
    d1ba:	2106      	movs	r1, #6
    d1bc:	4630      	mov	r0, r6
    d1be:	4790      	blx	r2
    d1c0:	2800      	cmp	r0, #0
    d1c2:	d06d      	beq.n	d2a0 <strlen+0x26e>
    d1c4:	7800      	ldrb	r0, [r0, #0]
    d1c6:	2800      	cmp	r0, #0
    d1c8:	d06a      	beq.n	d2a0 <strlen+0x26e>
    d1ca:	f240 11dd 	movw	r1, #477	; 0x1dd
    d1ce:	e0a6      	b.n	d31e <strlen+0x2ec>
    d1d0:	e034      	b.n	d23c <strlen+0x20a>
    d1d2:	2105      	movs	r1, #5
    d1d4:	4630      	mov	r0, r6
    d1d6:	4790      	blx	r2
    d1d8:	2800      	cmp	r0, #0
    d1da:	d07c      	beq.n	d2d6 <strlen+0x2a4>
    d1dc:	7800      	ldrb	r0, [r0, #0]
    d1de:	2800      	cmp	r0, #0
    d1e0:	d079      	beq.n	d2d6 <strlen+0x2a4>
    d1e2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    d1e6:	e09a      	b.n	d31e <strlen+0x2ec>
    d1e8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d1ec:	2805      	cmp	r0, #5
    d1ee:	d002      	beq.n	d1f6 <strlen+0x1c4>
    d1f0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    d1f4:	e093      	b.n	d31e <strlen+0x2ec>
    d1f6:	2102      	movs	r1, #2
    d1f8:	6a22      	ldr	r2, [r4, #32]
    d1fa:	e009      	b.n	d210 <strlen+0x1de>
    d1fc:	e07e      	b.n	d2fc <strlen+0x2ca>
    d1fe:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d202:	2805      	cmp	r0, #5
    d204:	d002      	beq.n	d20c <strlen+0x1da>
    d206:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    d20a:	e088      	b.n	d31e <strlen+0x2ec>
    d20c:	6a22      	ldr	r2, [r4, #32]
    d20e:	2101      	movs	r1, #1
    d210:	4630      	mov	r0, r6
    d212:	4790      	blx	r2
    d214:	4601      	mov	r1, r0
    d216:	4620      	mov	r0, r4
    d218:	f7ff ff1f 	bl	d05a <strlen+0x28>
    d21c:	2802      	cmp	r0, #2
    d21e:	d076      	beq.n	d30e <strlen+0x2dc>
    d220:	b3e8      	cbz	r0, d29e <strlen+0x26c>
    d222:	2801      	cmp	r0, #1
    d224:	d06d      	beq.n	d302 <strlen+0x2d0>
    d226:	f240 212a 	movw	r1, #554	; 0x22a
    d22a:	e078      	b.n	d31e <strlen+0x2ec>
    d22c:	e071      	b.n	d312 <strlen+0x2e0>
    d22e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d232:	2805      	cmp	r0, #5
    d234:	d002      	beq.n	d23c <strlen+0x20a>
    d236:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    d23a:	e070      	b.n	d31e <strlen+0x2ec>
    d23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d240:	f7f4 bb24 	b.w	188c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x9c>
    d244:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d248:	2805      	cmp	r0, #5
    d24a:	d002      	beq.n	d252 <strlen+0x220>
    d24c:	f240 11f5 	movw	r1, #501	; 0x1f5
    d250:	e065      	b.n	d31e <strlen+0x2ec>
    d252:	6a22      	ldr	r2, [r4, #32]
    d254:	210a      	movs	r1, #10
    d256:	4630      	mov	r0, r6
    d258:	4790      	blx	r2
    d25a:	4601      	mov	r1, r0
    d25c:	4620      	mov	r0, r4
    d25e:	f7ff fefc 	bl	d05a <strlen+0x28>
    d262:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    d266:	e05a      	b.n	d31e <strlen+0x2ec>
    d268:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    d26c:	2905      	cmp	r1, #5
    d26e:	d007      	beq.n	d280 <strlen+0x24e>
    d270:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    d274:	b10a      	cbz	r2, d27a <strlen+0x248>
    d276:	2903      	cmp	r1, #3
    d278:	d002      	beq.n	d280 <strlen+0x24e>
    d27a:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    d27e:	e04e      	b.n	d31e <strlen+0x2ec>
    d280:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    d284:	b129      	cbz	r1, d292 <strlen+0x260>
    d286:	4621      	mov	r1, r4
    d288:	4630      	mov	r0, r6
    d28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d28e:	f000 b889 	b.w	d3a4 <strlen+0x372>
    d292:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
    d296:	b199      	cbz	r1, d2c0 <strlen+0x28e>
    d298:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    d29c:	e001      	b.n	d2a2 <strlen+0x270>
    d29e:	e033      	b.n	d308 <strlen+0x2d6>
    d2a0:	e035      	b.n	d30e <strlen+0x2dc>
    d2a2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d2a6:	6a22      	ldr	r2, [r4, #32]
    d2a8:	2108      	movs	r1, #8
    d2aa:	4630      	mov	r0, r6
    d2ac:	4790      	blx	r2
    d2ae:	2800      	cmp	r0, #0
    d2b0:	d011      	beq.n	d2d6 <strlen+0x2a4>
    d2b2:	7800      	ldrb	r0, [r0, #0]
    d2b4:	2800      	cmp	r0, #0
    d2b6:	d00e      	beq.n	d2d6 <strlen+0x2a4>
    d2b8:	f44f 7102 	mov.w	r1, #520	; 0x208
    d2bc:	e02f      	b.n	d31e <strlen+0x2ec>
    d2be:	e00a      	b.n	d2d6 <strlen+0x2a4>
    d2c0:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    d2c4:	b161      	cbz	r1, d2e0 <strlen+0x2ae>
    d2c6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d2ca:	4621      	mov	r1, r4
    d2cc:	f7ff ff18 	bl	d100 <strlen+0xce>
    d2d0:	b118      	cbz	r0, d2da <strlen+0x2a8>
    d2d2:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
    d2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d2da:	f44f 7103 	mov.w	r1, #524	; 0x20c
    d2de:	e01e      	b.n	d31e <strlen+0x2ec>
    d2e0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d2e4:	6a22      	ldr	r2, [r4, #32]
    d2e6:	2107      	movs	r1, #7
    d2e8:	4630      	mov	r0, r6
    d2ea:	4790      	blx	r2
    d2ec:	2800      	cmp	r0, #0
    d2ee:	d0f2      	beq.n	d2d6 <strlen+0x2a4>
    d2f0:	7800      	ldrb	r0, [r0, #0]
    d2f2:	2800      	cmp	r0, #0
    d2f4:	d0ef      	beq.n	d2d6 <strlen+0x2a4>
    d2f6:	f44f 7105 	mov.w	r1, #532	; 0x214
    d2fa:	e010      	b.n	d31e <strlen+0x2ec>
    d2fc:	f240 2119 	movw	r1, #537	; 0x219
    d300:	e00d      	b.n	d31e <strlen+0x2ec>
    d302:	2104      	movs	r1, #4
    d304:	6a22      	ldr	r2, [r4, #32]
    d306:	e783      	b.n	d210 <strlen+0x1de>
    d308:	2103      	movs	r1, #3
    d30a:	6a22      	ldr	r2, [r4, #32]
    d30c:	e780      	b.n	d210 <strlen+0x1de>
    d30e:	2d00      	cmp	r5, #0
    d310:	d1e1      	bne.n	d2d6 <strlen+0x2a4>
    d312:	f000 f8fd 	bl	d510 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    d316:	2800      	cmp	r0, #0
    d318:	d0dd      	beq.n	d2d6 <strlen+0x2a4>
    d31a:	f240 2133 	movw	r1, #563	; 0x233
    d31e:	206a      	movs	r0, #106	; 0x6a
    d320:	f7f7 fe0e 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d324:	4602      	mov	r2, r0
    d326:	7803      	ldrb	r3, [r0, #0]
    d328:	6840      	ldr	r0, [r0, #4]
    d32a:	4408      	add	r0, r1
    d32c:	6050      	str	r0, [r2, #4]
    d32e:	3859      	subs	r0, #89	; 0x59
    d330:	f7f6 bc44 	b.w	3bbc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    d334:	2201      	movs	r2, #1
    d336:	7002      	strb	r2, [r0, #0]
    d338:	2200      	movs	r2, #0
    d33a:	72c2      	strb	r2, [r0, #11]
    d33c:	790a      	ldrb	r2, [r1, #4]
    d33e:	b172      	cbz	r2, d35e <strlen+0x32c>
    d340:	2200      	movs	r2, #0
    d342:	8102      	strh	r2, [r0, #8]
    d344:	794a      	ldrb	r2, [r1, #5]
    d346:	b162      	cbz	r2, d362 <strlen+0x330>
    d348:	2203      	movs	r2, #3
    d34a:	7282      	strb	r2, [r0, #10]
    d34c:	688a      	ldr	r2, [r1, #8]
    d34e:	326a      	adds	r2, #106	; 0x6a
    d350:	6042      	str	r2, [r0, #4]
    d352:	68c9      	ldr	r1, [r1, #12]
    d354:	6101      	str	r1, [r0, #16]
    d356:	2103      	movs	r1, #3
    d358:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d35c:	4770      	bx	lr
    d35e:	222b      	movs	r2, #43	; 0x2b
    d360:	e7ef      	b.n	d342 <strlen+0x310>
    d362:	2202      	movs	r2, #2
    d364:	e7f1      	b.n	d34a <strlen+0x318>
    d366:	b510      	push	{r4, lr}
    d368:	2200      	movs	r2, #0
    d36a:	7002      	strb	r2, [r0, #0]
    d36c:	72c2      	strb	r2, [r0, #11]
    d36e:	790a      	ldrb	r2, [r1, #4]
    d370:	b1a2      	cbz	r2, d39c <strlen+0x36a>
    d372:	2200      	movs	r2, #0
    d374:	8102      	strh	r2, [r0, #8]
    d376:	794a      	ldrb	r2, [r1, #5]
    d378:	b192      	cbz	r2, d3a0 <strlen+0x36e>
    d37a:	2203      	movs	r2, #3
    d37c:	7282      	strb	r2, [r0, #10]
    d37e:	68ca      	ldr	r2, [r1, #12]
    d380:	326a      	adds	r2, #106	; 0x6a
    d382:	6042      	str	r2, [r0, #4]
    d384:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
    d388:	6889      	ldr	r1, [r1, #8]
    d38a:	17cb      	asrs	r3, r1, #31
    d38c:	1861      	adds	r1, r4, r1
    d38e:	415a      	adcs	r2, r3
    d390:	e9c0 1204 	strd	r1, r2, [r0, #16]
    d394:	2104      	movs	r1, #4
    d396:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d39a:	bd10      	pop	{r4, pc}
    d39c:	222b      	movs	r2, #43	; 0x2b
    d39e:	e7e9      	b.n	d374 <strlen+0x342>
    d3a0:	2202      	movs	r2, #2
    d3a2:	e7eb      	b.n	d37c <strlen+0x34a>
    d3a4:	b570      	push	{r4, r5, r6, lr}
    d3a6:	4605      	mov	r5, r0
    d3a8:	460c      	mov	r4, r1
    d3aa:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
    d3ae:	f7f6 f9d3 	bl	3758 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    d3b2:	b178      	cbz	r0, d3d4 <strlen+0x3a2>
    d3b4:	4620      	mov	r0, r4
    d3b6:	f000 f810 	bl	d3da <strlen+0x3a8>
    d3ba:	6a22      	ldr	r2, [r4, #32]
    d3bc:	2109      	movs	r1, #9
    d3be:	4628      	mov	r0, r5
    d3c0:	4790      	blx	r2
    d3c2:	2800      	cmp	r0, #0
    d3c4:	d008      	beq.n	d3d8 <strlen+0x3a6>
    d3c6:	7800      	ldrb	r0, [r0, #0]
    d3c8:	2800      	cmp	r0, #0
    d3ca:	d005      	beq.n	d3d8 <strlen+0x3a6>
    d3cc:	21dc      	movs	r1, #220	; 0xdc
    d3ce:	206a      	movs	r0, #106	; 0x6a
    d3d0:	f7f7 fdb6 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d3d4:	21d8      	movs	r1, #216	; 0xd8
    d3d6:	e7fa      	b.n	d3ce <strlen+0x39c>
    d3d8:	bd70      	pop	{r4, r5, r6, pc}
    d3da:	2100      	movs	r1, #0
    d3dc:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    d3e0:	f800 1f24 	strb.w	r1, [r0, #36]!
    d3e4:	7041      	strb	r1, [r0, #1]
    d3e6:	4770      	bx	lr

0000d3e8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    d3e8:	b570      	push	{r4, r5, r6, lr}
    d3ea:	f7f4 faab 	bl	1944 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d3ee:	4605      	mov	r5, r0
    d3f0:	2400      	movs	r4, #0
    d3f2:	e006      	b.n	d402 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    d3f4:	4620      	mov	r0, r4
    d3f6:	f7f4 faab 	bl	1950 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d3fa:	f7ff ffee 	bl	d3da <strlen+0x3a8>
    d3fe:	1c64      	adds	r4, r4, #1
    d400:	b2e4      	uxtb	r4, r4
    d402:	42ac      	cmp	r4, r5
    d404:	d3f6      	bcc.n	d3f4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    d406:	bd70      	pop	{r4, r5, r6, pc}

0000d408 <mpsl_timeslot_request>:
    d408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d40c:	460d      	mov	r5, r1
    d40e:	f7f4 fa9f 	bl	1950 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d412:	0004      	movs	r4, r0
    d414:	d008      	beq.n	d428 <mpsl_timeslot_request+0x20>
    d416:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d41a:	f06f 0622 	mvn.w	r6, #34	; 0x22
    d41e:	2801      	cmp	r0, #1
    d420:	d006      	beq.n	d430 <mpsl_timeslot_request+0x28>
    d422:	2802      	cmp	r0, #2
    d424:	d111      	bne.n	d44a <mpsl_timeslot_request+0x42>
    d426:	e003      	b.n	d430 <mpsl_timeslot_request+0x28>
    d428:	f06f 0001 	mvn.w	r0, #1
    d42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d430:	f06f 0715 	mvn.w	r7, #21
    d434:	b15d      	cbz	r5, d44e <mpsl_timeslot_request+0x46>
    d436:	4628      	mov	r0, r5
    d438:	f7f4 f9fa 	bl	1830 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x40>
    d43c:	b138      	cbz	r0, d44e <mpsl_timeslot_request+0x46>
    d43e:	7828      	ldrb	r0, [r5, #0]
    d440:	b138      	cbz	r0, d452 <mpsl_timeslot_request+0x4a>
    d442:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    d446:	2802      	cmp	r0, #2
    d448:	d008      	beq.n	d45c <mpsl_timeslot_request+0x54>
    d44a:	4630      	mov	r0, r6
    d44c:	e7ee      	b.n	d42c <mpsl_timeslot_request+0x24>
    d44e:	4638      	mov	r0, r7
    d450:	e7ec      	b.n	d42c <mpsl_timeslot_request+0x24>
    d452:	4629      	mov	r1, r5
    d454:	4620      	mov	r0, r4
    d456:	f7ff ff6d 	bl	d334 <strlen+0x302>
    d45a:	e003      	b.n	d464 <mpsl_timeslot_request+0x5c>
    d45c:	4629      	mov	r1, r5
    d45e:	4620      	mov	r0, r4
    d460:	f7ff ff81 	bl	d366 <strlen+0x334>
    d464:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    d468:	4621      	mov	r1, r4
    d46a:	f7ff fe49 	bl	d100 <strlen+0xce>
    d46e:	b108      	cbz	r0, d474 <mpsl_timeslot_request+0x6c>
    d470:	2000      	movs	r0, #0
    d472:	e7db      	b.n	d42c <mpsl_timeslot_request+0x24>
    d474:	f240 21b1 	movw	r1, #689	; 0x2b1
    d478:	206a      	movs	r0, #106	; 0x6a
    d47a:	f7f7 fd61 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000d47e <mpsl_timeslot_session_close>:
    d47e:	b510      	push	{r4, lr}
    d480:	4604      	mov	r4, r0
    d482:	f7f4 fa65 	bl	1950 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d486:	0001      	movs	r1, r0
    d488:	d005      	beq.n	d496 <mpsl_timeslot_session_close+0x18>
    d48a:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    d48e:	f06f 0222 	mvn.w	r2, #34	; 0x22
    d492:	b978      	cbnz	r0, d4b4 <mpsl_timeslot_session_close+0x36>
    d494:	e002      	b.n	d49c <mpsl_timeslot_session_close+0x1e>
    d496:	f06f 0001 	mvn.w	r0, #1
    d49a:	bd10      	pop	{r4, pc}
    d49c:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
    d4a0:	b140      	cbz	r0, d4b4 <mpsl_timeslot_session_close+0x36>
    d4a2:	2802      	cmp	r0, #2
    d4a4:	d008      	beq.n	d4b8 <mpsl_timeslot_session_close+0x3a>
    d4a6:	2801      	cmp	r0, #1
    d4a8:	d006      	beq.n	d4b8 <mpsl_timeslot_session_close+0x3a>
    d4aa:	2001      	movs	r0, #1
    d4ac:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    d4b0:	2000      	movs	r0, #0
    d4b2:	bd10      	pop	{r4, pc}
    d4b4:	4610      	mov	r0, r2
    d4b6:	bd10      	pop	{r4, pc}
    d4b8:	4620      	mov	r0, r4
    d4ba:	f7ff ff73 	bl	d3a4 <strlen+0x372>
    d4be:	e7f7      	b.n	d4b0 <mpsl_timeslot_session_close+0x32>

0000d4c0 <mpsl_timeslot_session_count_set>:
    d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4c4:	460e      	mov	r6, r1
    d4c6:	4607      	mov	r7, r0
    d4c8:	f7f4 fa3c 	bl	1944 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d4cc:	4605      	mov	r5, r0
    d4ce:	2400      	movs	r4, #0
    d4d0:	e00b      	b.n	d4ea <mpsl_timeslot_session_count_set+0x2a>
    d4d2:	4620      	mov	r0, r4
    d4d4:	f7f4 fa3c 	bl	1950 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d4d8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    d4dc:	b118      	cbz	r0, d4e6 <mpsl_timeslot_session_count_set+0x26>
    d4de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4e6:	1c64      	adds	r4, r4, #1
    d4e8:	b2e4      	uxtb	r4, r4
    d4ea:	42ac      	cmp	r4, r5
    d4ec:	d3f1      	bcc.n	d4d2 <mpsl_timeslot_session_count_set+0x12>
    d4ee:	2e08      	cmp	r6, #8
    d4f0:	d902      	bls.n	d4f8 <mpsl_timeslot_session_count_set+0x38>
    d4f2:	f06f 0015 	mvn.w	r0, #21
    d4f6:	e7f4      	b.n	d4e2 <mpsl_timeslot_session_count_set+0x22>
    d4f8:	b117      	cbz	r7, d500 <mpsl_timeslot_session_count_set+0x40>
    d4fa:	4631      	mov	r1, r6
    d4fc:	4638      	mov	r0, r7
    d4fe:	e001      	b.n	d504 <mpsl_timeslot_session_count_set+0x44>
    d500:	2100      	movs	r1, #0
    d502:	4608      	mov	r0, r1
    d504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d508:	f7f4 ba08 	b.w	191c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000d50c <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    d50c:	f7f6 bdfa 	b.w	4104 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000d510 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    d510:	b510      	push	{r4, lr}
    d512:	2000      	movs	r0, #0
    d514:	f7f7 f91c 	bl	4750 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    d518:	6800      	ldr	r0, [r0, #0]
    d51a:	2800      	cmp	r0, #0
    d51c:	bf18      	it	ne
    d51e:	2001      	movne	r0, #1
    d520:	bd10      	pop	{r4, pc}

0000d522 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    d522:	b510      	push	{r4, lr}
    d524:	f7f7 f994 	bl	4850 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    d528:	f7f6 fc66 	bl	3df8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    d52c:	f000 f802 	bl	d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    d530:	b280      	uxth	r0, r0
    d532:	bd10      	pop	{r4, pc}

0000d534 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    d534:	0a41      	lsrs	r1, r0, #9
    d536:	f643 5209 	movw	r2, #15625	; 0x3d09
    d53a:	4351      	muls	r1, r2
    d53c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d540:	fb10 f002 	smulbb	r0, r0, r2
    d544:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d548:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    d54c:	4770      	bx	lr
    d54e:	2800      	cmp	r0, #0
    d550:	db09      	blt.n	d566 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    d552:	f000 021f 	and.w	r2, r0, #31
    d556:	2101      	movs	r1, #1
    d558:	4091      	lsls	r1, r2
    d55a:	0940      	lsrs	r0, r0, #5
    d55c:	0080      	lsls	r0, r0, #2
    d55e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d562:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d566:	4770      	bx	lr
    d568:	2800      	cmp	r0, #0
    d56a:	db0d      	blt.n	d588 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    d56c:	f000 021f 	and.w	r2, r0, #31
    d570:	2101      	movs	r1, #1
    d572:	4091      	lsls	r1, r2
    d574:	0940      	lsrs	r0, r0, #5
    d576:	0080      	lsls	r0, r0, #2
    d578:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d57c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d580:	f3bf 8f4f 	dsb	sy
    d584:	f3bf 8f6f 	isb	sy
    d588:	4770      	bx	lr

0000d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d58a:	b570      	push	{r4, r5, r6, lr}
    d58c:	4602      	mov	r2, r0
    d58e:	2000      	movs	r0, #0
    d590:	2900      	cmp	r1, #0
    d592:	d01d      	beq.n	d5d0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    d594:	fba2 0101 	umull	r0, r1, r2, r1
    d598:	0a40      	lsrs	r0, r0, #9
    d59a:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    d59e:	0a49      	lsrs	r1, r1, #9
    d5a0:	1c40      	adds	r0, r0, #1
    d5a2:	f141 0100 	adc.w	r1, r1, #0
    d5a6:	f240 72a1 	movw	r2, #1953	; 0x7a1
    d5aa:	1883      	adds	r3, r0, r2
    d5ac:	f141 0100 	adc.w	r1, r1, #0
    d5b0:	1c5b      	adds	r3, r3, #1
    d5b2:	f141 0400 	adc.w	r4, r1, #0
    d5b6:	2100      	movs	r1, #0
    d5b8:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    d5bc:	41a1      	sbcs	r1, r4
    d5be:	d203      	bcs.n	d5c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    d5c0:	2172      	movs	r1, #114	; 0x72
    d5c2:	206d      	movs	r0, #109	; 0x6d
    d5c4:	f7f7 fcbc 	bl	4f40 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d5c8:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    d5cc:	fbb0 f0f2 	udiv	r0, r0, r2
    d5d0:	bd70      	pop	{r4, r5, r6, pc}
    d5d2:	5840      	ldr	r0, [r0, r1]
    d5d4:	2800      	cmp	r0, #0
    d5d6:	d000      	beq.n	d5da <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    d5d8:	2001      	movs	r0, #1
    d5da:	4770      	bx	lr
    d5dc:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    d5e0:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    d5e4:	f002 0201 	and.w	r2, r2, #1
    d5e8:	03c0      	lsls	r0, r0, #15
    d5ea:	d503      	bpl.n	d5f4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d5ec:	428a      	cmp	r2, r1
    d5ee:	d101      	bne.n	d5f4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d5f0:	2001      	movs	r0, #1
    d5f2:	4770      	bx	lr
    d5f4:	2000      	movs	r0, #0
    d5f6:	4770      	bx	lr

0000d5f8 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    d5f8:	b510      	push	{r4, lr}
    d5fa:	2101      	movs	r1, #1
    d5fc:	0788      	lsls	r0, r1, #30
    d5fe:	f7f7 fc49 	bl	4e94 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d602:	2800      	cmp	r0, #0
    d604:	d000      	beq.n	d608 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    d606:	2001      	movs	r0, #1
    d608:	bd10      	pop	{r4, pc}

0000d60a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    d60a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d60e:	2101      	movs	r1, #1
    d610:	6001      	str	r1, [r0, #0]
    d612:	4770      	bx	lr

0000d614 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    d614:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d618:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    d61c:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    d620:	f002 0203 	and.w	r2, r2, #3
    d624:	03c9      	lsls	r1, r1, #15
    d626:	d503      	bpl.n	d630 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d628:	4282      	cmp	r2, r0
    d62a:	d101      	bne.n	d630 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d62c:	2001      	movs	r0, #1
    d62e:	4770      	bx	lr
    d630:	2000      	movs	r0, #0
    d632:	4770      	bx	lr

0000d634 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    d634:	b510      	push	{r4, lr}
    d636:	2100      	movs	r1, #0
    d638:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d63c:	f7f7 fc2a 	bl	4e94 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d640:	2800      	cmp	r0, #0
    d642:	d000      	beq.n	d646 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    d644:	2001      	movs	r0, #1
    d646:	bd10      	pop	{r4, pc}
    d648:	2800      	cmp	r0, #0
    d64a:	db09      	blt.n	d660 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    d64c:	f000 021f 	and.w	r2, r0, #31
    d650:	2101      	movs	r1, #1
    d652:	4091      	lsls	r1, r2
    d654:	0940      	lsrs	r0, r0, #5
    d656:	0080      	lsls	r0, r0, #2
    d658:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d65c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d660:	4770      	bx	lr
    d662:	2800      	cmp	r0, #0
    d664:	db0d      	blt.n	d682 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    d666:	f000 021f 	and.w	r2, r0, #31
    d66a:	2101      	movs	r1, #1
    d66c:	4091      	lsls	r1, r2
    d66e:	0940      	lsrs	r0, r0, #5
    d670:	0080      	lsls	r0, r0, #2
    d672:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d676:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d67a:	f3bf 8f4f 	dsb	sy
    d67e:	f3bf 8f6f 	isb	sy
    d682:	4770      	bx	lr
    d684:	00021000 	.word	0x00021000
    d688:	000000fa 	.word	0x000000fa
    d68c:	63a70f14 	.word	0x63a70f14
    d690:	c477f9cf 	.word	0xc477f9cf
    d694:	e931f9ef 	.word	0xe931f9ef
    d698:	03bcf561 	.word	0x03bcf561
    d69c:	2b06749a 	.word	0x2b06749a
    d6a0:	2800      	cmp	r0, #0
    d6a2:	db09      	blt.n	d6b8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    d6a4:	f000 021f 	and.w	r2, r0, #31
    d6a8:	2101      	movs	r1, #1
    d6aa:	4091      	lsls	r1, r2
    d6ac:	0940      	lsrs	r0, r0, #5
    d6ae:	0080      	lsls	r0, r0, #2
    d6b0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6b4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d6b8:	4770      	bx	lr

0000d6ba <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    d6ba:	f3ef 8110 	mrs	r1, PRIMASK
    d6be:	b672      	cpsid	i
    d6c0:	7802      	ldrb	r2, [r0, #0]
    d6c2:	2a01      	cmp	r2, #1
    d6c4:	d001      	beq.n	d6ca <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    d6c6:	2201      	movs	r2, #1
    d6c8:	e000      	b.n	d6cc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    d6ca:	2200      	movs	r2, #0
    d6cc:	2301      	movs	r3, #1
    d6ce:	7003      	strb	r3, [r0, #0]
    d6d0:	b901      	cbnz	r1, d6d4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    d6d2:	b662      	cpsie	i
    d6d4:	b10a      	cbz	r2, d6da <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    d6d6:	2000      	movs	r0, #0
    d6d8:	4770      	bx	lr
    d6da:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d6de:	4770      	bx	lr

0000d6e0 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    d6e0:	2100      	movs	r1, #0
    d6e2:	7001      	strb	r1, [r0, #0]
    d6e4:	4608      	mov	r0, r1
    d6e6:	4770      	bx	lr

0000d6e8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    d6e8:	f3ef 8110 	mrs	r1, PRIMASK
    d6ec:	b672      	cpsid	i
    d6ee:	2200      	movs	r2, #0
    d6f0:	7002      	strb	r2, [r0, #0]
    d6f2:	b901      	cbnz	r1, d6f6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    d6f4:	b662      	cpsie	i
    d6f6:	2000      	movs	r0, #0
    d6f8:	4770      	bx	lr

0000d6fa <mpsl_low_priority_process>:
    d6fa:	f7f7 bd11 	b.w	5120 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000d6fe <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    d6fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d702:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d706:	280f      	cmp	r0, #15
    d708:	d001      	beq.n	d70e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    d70a:	2000      	movs	r0, #0
    d70c:	4770      	bx	lr
    d70e:	2001      	movs	r0, #1
    d710:	4770      	bx	lr

0000d712 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    d712:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d716:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d71a:	280a      	cmp	r0, #10
    d71c:	d001      	beq.n	d722 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d71e:	2000      	movs	r0, #0
    d720:	4770      	bx	lr
    d722:	2001      	movs	r0, #1
    d724:	4770      	bx	lr

0000d726 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d726:	b500      	push	{lr}
    d728:	f7ff fff3 	bl	d712 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d72c:	b120      	cbz	r0, d738 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d72e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d732:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d736:	b108      	cbz	r0, d73c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d738:	2000      	movs	r0, #0
    d73a:	bd00      	pop	{pc}
    d73c:	2001      	movs	r0, #1
    d73e:	bd00      	pop	{pc}

0000d740 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d740:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d744:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d748:	280e      	cmp	r0, #14
    d74a:	d001      	beq.n	d750 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d74c:	2000      	movs	r0, #0
    d74e:	4770      	bx	lr
    d750:	2001      	movs	r0, #1
    d752:	4770      	bx	lr

0000d754 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    d754:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d758:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d75c:	2810      	cmp	r0, #16
    d75e:	d001      	beq.n	d764 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d760:	2000      	movs	r0, #0
    d762:	4770      	bx	lr
    d764:	2001      	movs	r0, #1
    d766:	4770      	bx	lr

0000d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d768:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d76c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d770:	2806      	cmp	r0, #6
    d772:	d003      	beq.n	d77c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d774:	1c40      	adds	r0, r0, #1
    d776:	d001      	beq.n	d77c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d778:	2000      	movs	r0, #0
    d77a:	4770      	bx	lr
    d77c:	2001      	movs	r0, #1
    d77e:	4770      	bx	lr

0000d780 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d780:	b500      	push	{lr}
    d782:	f7ff fff1 	bl	d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d786:	b148      	cbz	r0, d79c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d788:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d78c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d790:	2806      	cmp	r0, #6
    d792:	d303      	bcc.n	d79c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d794:	1c40      	adds	r0, r0, #1
    d796:	d001      	beq.n	d79c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d798:	2001      	movs	r0, #1
    d79a:	bd00      	pop	{pc}
    d79c:	2000      	movs	r0, #0
    d79e:	bd00      	pop	{pc}

0000d7a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d7a0:	b500      	push	{lr}
    d7a2:	f7ff ffe1 	bl	d768 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d7a6:	b138      	cbz	r0, d7b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d7a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d7ac:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d7b0:	2806      	cmp	r0, #6
    d7b2:	d303      	bcc.n	d7bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d7b4:	1c40      	adds	r0, r0, #1
    d7b6:	d001      	beq.n	d7bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d7b8:	2000      	movs	r0, #0
    d7ba:	bd00      	pop	{pc}
    d7bc:	2001      	movs	r0, #1
    d7be:	bd00      	pop	{pc}

0000d7c0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d7c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d7c4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d7c8:	280d      	cmp	r0, #13
    d7ca:	d001      	beq.n	d7d0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d7cc:	2000      	movs	r0, #0
    d7ce:	4770      	bx	lr
    d7d0:	2001      	movs	r0, #1
    d7d2:	4770      	bx	lr

0000d7d4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d7d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d7d8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d7dc:	2808      	cmp	r0, #8
    d7de:	d001      	beq.n	d7e4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d7e0:	2000      	movs	r0, #0
    d7e2:	4770      	bx	lr
    d7e4:	2001      	movs	r0, #1
    d7e6:	4770      	bx	lr

0000d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d7e8:	b4f0      	push	{r4, r5, r6, r7}
    d7ea:	ea80 0c01 	eor.w	ip, r0, r1
    d7ee:	4603      	mov	r3, r0
    d7f0:	f01c 0f03 	tst.w	ip, #3
    d7f4:	d13c      	bne.n	d870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d7f6:	f013 0f03 	tst.w	r3, #3
    d7fa:	d00b      	beq.n	d814 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d7fc:	2a00      	cmp	r2, #0
    d7fe:	bf04      	itt	eq
    d800:	bcf0      	popeq	{r4, r5, r6, r7}
    d802:	4770      	bxeq	lr
    d804:	f811 cb01 	ldrb.w	ip, [r1], #1
    d808:	f803 cb01 	strb.w	ip, [r3], #1
    d80c:	1e52      	subs	r2, r2, #1
    d80e:	f013 0f03 	tst.w	r3, #3
    d812:	d1f3      	bne.n	d7fc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d814:	2a03      	cmp	r2, #3
    d816:	d94f      	bls.n	d8b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d818:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d81c:	d24c      	bcs.n	d8b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d81e:	f1c2 0c00 	rsb	ip, r2, #0
    d822:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d826:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d82a:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d82e:	f1cc 0c00 	rsb	ip, ip, #0
    d832:	f1bc 0f00 	cmp.w	ip, #0
    d836:	dd1b      	ble.n	d870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d838:	1f0d      	subs	r5, r1, #4
    d83a:	1f1c      	subs	r4, r3, #4
    d83c:	f01c 0f01 	tst.w	ip, #1
    d840:	d003      	beq.n	d84a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d842:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d846:	f844 6f04 	str.w	r6, [r4, #4]!
    d84a:	ea5f 066c 	movs.w	r6, ip, asr #1
    d84e:	d007      	beq.n	d860 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d850:	686f      	ldr	r7, [r5, #4]
    d852:	6067      	str	r7, [r4, #4]
    d854:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d858:	f844 7f08 	str.w	r7, [r4, #8]!
    d85c:	1e76      	subs	r6, r6, #1
    d85e:	d1f7      	bne.n	d850 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d860:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d864:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d868:	f1cc 0c00 	rsb	ip, ip, #0
    d86c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d870:	2a00      	cmp	r2, #0
    d872:	bf04      	itt	eq
    d874:	bcf0      	popeq	{r4, r5, r6, r7}
    d876:	4770      	bxeq	lr
    d878:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d87c:	d226      	bcs.n	d8cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d87e:	2a00      	cmp	r2, #0
    d880:	bfdc      	itt	le
    d882:	bcf0      	pople	{r4, r5, r6, r7}
    d884:	4770      	bxle	lr
    d886:	1e49      	subs	r1, r1, #1
    d888:	1e5b      	subs	r3, r3, #1
    d88a:	f012 0f01 	tst.w	r2, #1
    d88e:	d003      	beq.n	d898 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d890:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d894:	f803 cf01 	strb.w	ip, [r3, #1]!
    d898:	1052      	asrs	r2, r2, #1
    d89a:	bf04      	itt	eq
    d89c:	bcf0      	popeq	{r4, r5, r6, r7}
    d89e:	4770      	bxeq	lr
    d8a0:	f891 c001 	ldrb.w	ip, [r1, #1]
    d8a4:	f883 c001 	strb.w	ip, [r3, #1]
    d8a8:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d8ac:	f803 cf02 	strb.w	ip, [r3, #2]!
    d8b0:	1e52      	subs	r2, r2, #1
    d8b2:	d1f5      	bne.n	d8a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d8b4:	bcf0      	pop	{r4, r5, r6, r7}
    d8b6:	4770      	bx	lr
    d8b8:	2a04      	cmp	r2, #4
    d8ba:	d3d9      	bcc.n	d870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d8bc:	f851 cb04 	ldr.w	ip, [r1], #4
    d8c0:	1f12      	subs	r2, r2, #4
    d8c2:	f843 cb04 	str.w	ip, [r3], #4
    d8c6:	2a04      	cmp	r2, #4
    d8c8:	d2f8      	bcs.n	d8bc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d8ca:	e7d1      	b.n	d870 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d8cc:	f811 cb01 	ldrb.w	ip, [r1], #1
    d8d0:	f803 cb01 	strb.w	ip, [r3], #1
    d8d4:	1e52      	subs	r2, r2, #1
    d8d6:	d1f9      	bne.n	d8cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d8d8:	bcf0      	pop	{r4, r5, r6, r7}
    d8da:	4770      	bx	lr

0000d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d8dc:	b470      	push	{r4, r5, r6}
    d8de:	4603      	mov	r3, r0
    d8e0:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d8e4:	f010 0f03 	tst.w	r0, #3
    d8e8:	d009      	beq.n	d8fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d8ea:	2a00      	cmp	r2, #0
    d8ec:	bf04      	itt	eq
    d8ee:	bc70      	popeq	{r4, r5, r6}
    d8f0:	4770      	bxeq	lr
    d8f2:	f803 cb01 	strb.w	ip, [r3], #1
    d8f6:	1e52      	subs	r2, r2, #1
    d8f8:	f013 0f03 	tst.w	r3, #3
    d8fc:	d1f5      	bne.n	d8ea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d8fe:	b2c9      	uxtb	r1, r1
    d900:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d904:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d908:	2a03      	cmp	r2, #3
    d90a:	d939      	bls.n	d980 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d90c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d910:	d236      	bcs.n	d980 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d912:	4251      	negs	r1, r2
    d914:	17cc      	asrs	r4, r1, #31
    d916:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d91a:	1089      	asrs	r1, r1, #2
    d91c:	424e      	negs	r6, r1
    d91e:	2e00      	cmp	r6, #0
    d920:	dd11      	ble.n	d946 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d922:	1f19      	subs	r1, r3, #4
    d924:	f016 0f01 	tst.w	r6, #1
    d928:	bf18      	it	ne
    d92a:	f841 5f04 	strne.w	r5, [r1, #4]!
    d92e:	1074      	asrs	r4, r6, #1
    d930:	d004      	beq.n	d93c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d932:	604d      	str	r5, [r1, #4]
    d934:	f841 5f08 	str.w	r5, [r1, #8]!
    d938:	1e64      	subs	r4, r4, #1
    d93a:	d1fa      	bne.n	d932 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d93c:	4271      	negs	r1, r6
    d93e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d942:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d946:	2a00      	cmp	r2, #0
    d948:	bf04      	itt	eq
    d94a:	bc70      	popeq	{r4, r5, r6}
    d94c:	4770      	bxeq	lr
    d94e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d952:	d21d      	bcs.n	d990 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d954:	2a00      	cmp	r2, #0
    d956:	bfdc      	itt	le
    d958:	bc70      	pople	{r4, r5, r6}
    d95a:	4770      	bxle	lr
    d95c:	1e59      	subs	r1, r3, #1
    d95e:	f012 0f01 	tst.w	r2, #1
    d962:	bf18      	it	ne
    d964:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d968:	1052      	asrs	r2, r2, #1
    d96a:	bf04      	itt	eq
    d96c:	bc70      	popeq	{r4, r5, r6}
    d96e:	4770      	bxeq	lr
    d970:	f881 c001 	strb.w	ip, [r1, #1]
    d974:	f801 cf02 	strb.w	ip, [r1, #2]!
    d978:	1e52      	subs	r2, r2, #1
    d97a:	d1f9      	bne.n	d970 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d97c:	bc70      	pop	{r4, r5, r6}
    d97e:	4770      	bx	lr
    d980:	2a04      	cmp	r2, #4
    d982:	d3e0      	bcc.n	d946 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d984:	1f12      	subs	r2, r2, #4
    d986:	f843 5b04 	str.w	r5, [r3], #4
    d98a:	2a04      	cmp	r2, #4
    d98c:	d2fa      	bcs.n	d984 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d98e:	e7da      	b.n	d946 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d990:	f803 cb01 	strb.w	ip, [r3], #1
    d994:	1e52      	subs	r2, r2, #1
    d996:	d1fb      	bne.n	d990 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d998:	bc70      	pop	{r4, r5, r6}
    d99a:	4770      	bx	lr
    d99c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d9a0:	4770      	bx	lr
    d9a2:	2000      	movs	r0, #0
    d9a4:	4770      	bx	lr
    d9a6:	2000      	movs	r0, #0
    d9a8:	4770      	bx	lr
    d9aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d9ae:	4770      	bx	lr
    d9b0:	4770      	bx	lr
    d9b2:	4770      	bx	lr
    d9b4:	2000      	movs	r0, #0
    d9b6:	4770      	bx	lr
    d9b8:	2100      	movs	r1, #0
    d9ba:	7001      	strb	r1, [r0, #0]
    d9bc:	4770      	bx	lr
    d9be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d9c2:	4770      	bx	lr
    d9c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d9c8:	4770      	bx	lr
    d9ca:	2100      	movs	r1, #0
    d9cc:	7001      	strb	r1, [r0, #0]
    d9ce:	4770      	bx	lr
    d9d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d9d4:	4770      	bx	lr
    d9d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d9da:	4770      	bx	lr
    d9dc:	7800      	ldrb	r0, [r0, #0]
    d9de:	2800      	cmp	r0, #0
    d9e0:	d001      	beq.n	d9e6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    d9e2:	f06f 0015 	mvn.w	r0, #21
    d9e6:	4770      	bx	lr
    d9e8:	2000      	movs	r0, #0
    d9ea:	4770      	bx	lr
    d9ec:	2200      	movs	r2, #0
    d9ee:	f000 b800 	b.w	d9f2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000d9f2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    d9f2:	b570      	push	{r4, r5, r6, lr}
    d9f4:	4614      	mov	r4, r2
    d9f6:	460d      	mov	r5, r1
    d9f8:	1b00      	subs	r0, r0, r4
    d9fa:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    d9fe:	4288      	cmp	r0, r1
    da00:	da01      	bge.n	da06 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    da02:	4608      	mov	r0, r1
    da04:	e002      	b.n	da0c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    da06:	287f      	cmp	r0, #127	; 0x7f
    da08:	dd00      	ble.n	da0c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    da0a:	207f      	movs	r0, #127	; 0x7f
    da0c:	b240      	sxtb	r0, r0
    da0e:	f7f3 fedd 	bl	17cc <mpsl_tx_power_radio_supported_power_adjust>
    da12:	7028      	strb	r0, [r5, #0]
    da14:	706c      	strb	r4, [r5, #1]
    da16:	2100      	movs	r1, #0
    da18:	4420      	add	r0, r4
    da1a:	70a9      	strb	r1, [r5, #2]
    da1c:	b240      	sxtb	r0, r0
    da1e:	bd70      	pop	{r4, r5, r6, pc}
    da20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da24:	460c      	mov	r4, r1
    da26:	4681      	mov	r9, r0
    da28:	7849      	ldrb	r1, [r1, #1]
    da2a:	f100 0003 	add.w	r0, r0, #3
    da2e:	f88d 1000 	strb.w	r1, [sp]
    da32:	f020 0003 	bic.w	r0, r0, #3
    da36:	78a1      	ldrb	r1, [r4, #2]
    da38:	0016      	movs	r6, r2
    da3a:	4605      	mov	r5, r0
    da3c:	f88d 1001 	strb.w	r1, [sp, #1]
    da40:	d000      	beq.n	da44 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    da42:	2000      	movs	r0, #0
    da44:	4669      	mov	r1, sp
    da46:	f7f7 ff4f 	bl	58e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    da4a:	4428      	add	r0, r5
    da4c:	78a1      	ldrb	r1, [r4, #2]
    da4e:	4605      	mov	r5, r0
    da50:	b131      	cbz	r1, da60 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    da52:	8a63      	ldrh	r3, [r4, #18]
    da54:	78e2      	ldrb	r2, [r4, #3]
    da56:	b106      	cbz	r6, da5a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    da58:	2000      	movs	r0, #0
    da5a:	f7f8 f9d7 	bl	5e0c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    da5e:	4405      	add	r5, r0
    da60:	7820      	ldrb	r0, [r4, #0]
    da62:	7861      	ldrb	r1, [r4, #1]
    da64:	46b2      	mov	sl, r6
    da66:	2600      	movs	r6, #0
    da68:	4408      	add	r0, r1
    da6a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    da6e:	4637      	mov	r7, r6
    da70:	e008      	b.n	da84 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    da72:	7a23      	ldrb	r3, [r4, #8]
    da74:	79e2      	ldrb	r2, [r4, #7]
    da76:	79a1      	ldrb	r1, [r4, #6]
    da78:	7960      	ldrb	r0, [r4, #5]
    da7a:	f000 feff 	bl	e87c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    da7e:	1c7f      	adds	r7, r7, #1
    da80:	4406      	add	r6, r0
    da82:	b2ff      	uxtb	r7, r7
    da84:	4547      	cmp	r7, r8
    da86:	d3f4      	bcc.n	da72 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    da88:	1ced      	adds	r5, r5, #3
    da8a:	f025 0003 	bic.w	r0, r5, #3
    da8e:	4604      	mov	r4, r0
    da90:	f1ba 0f00 	cmp.w	sl, #0
    da94:	d000      	beq.n	da98 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    da96:	2000      	movs	r0, #0
    da98:	4632      	mov	r2, r6
    da9a:	4641      	mov	r1, r8
    da9c:	f7f8 f900 	bl	5ca0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    daa0:	4420      	add	r0, r4
    daa2:	1dc0      	adds	r0, r0, #7
    daa4:	f020 0007 	bic.w	r0, r0, #7
    daa8:	eba0 0009 	sub.w	r0, r0, r9
    daac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000dab0 <sdc_soc_ecb_block_encrypt>:
    dab0:	b530      	push	{r4, r5, lr}
    dab2:	460d      	mov	r5, r1
    dab4:	b08d      	sub	sp, #52	; 0x34
    dab6:	4614      	mov	r4, r2
    dab8:	4601      	mov	r1, r0
    daba:	2210      	movs	r2, #16
    dabc:	4668      	mov	r0, sp
    dabe:	f7ff fe93 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dac2:	2210      	movs	r2, #16
    dac4:	4629      	mov	r1, r5
    dac6:	a804      	add	r0, sp, #16
    dac8:	f7ff fe8e 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dacc:	4668      	mov	r0, sp
    dace:	f001 f856 	bl	eb7e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    dad2:	b118      	cbz	r0, dadc <sdc_soc_ecb_block_encrypt+0x2c>
    dad4:	f06f 0015 	mvn.w	r0, #21
    dad8:	b00d      	add	sp, #52	; 0x34
    dada:	bd30      	pop	{r4, r5, pc}
    dadc:	2210      	movs	r2, #16
    dade:	4620      	mov	r0, r4
    dae0:	a908      	add	r1, sp, #32
    dae2:	f7ff fe81 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dae6:	2000      	movs	r0, #0
    dae8:	e7f6      	b.n	dad8 <sdc_soc_ecb_block_encrypt+0x28>

0000daea <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    daea:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    daec:	4604      	mov	r4, r0
    daee:	1d01      	adds	r1, r0, #4
    daf0:	4668      	mov	r0, sp
    daf2:	f7f9 fc97 	bl	7424 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    daf6:	2800      	cmp	r0, #0
    daf8:	d004      	beq.n	db04 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    dafa:	4669      	mov	r1, sp
    dafc:	4620      	mov	r0, r4
    dafe:	f000 f848 	bl	db92 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    db02:	2001      	movs	r0, #1
    db04:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000db06 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    db06:	b50e      	push	{r1, r2, r3, lr}
    db08:	4601      	mov	r1, r0
    db0a:	4668      	mov	r0, sp
    db0c:	f000 f827 	bl	db5e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    db10:	4668      	mov	r0, sp
    db12:	f001 fce6 	bl	f4e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    db16:	bd0e      	pop	{r1, r2, r3, pc}

0000db18 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    db18:	b510      	push	{r4, lr}
    db1a:	4604      	mov	r4, r0
    db1c:	4620      	mov	r0, r4
    db1e:	f7f7 fdd7 	bl	56d0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    db22:	2800      	cmp	r0, #0
    db24:	d006      	beq.n	db34 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    db26:	78a1      	ldrb	r1, [r4, #2]
    db28:	7820      	ldrb	r0, [r4, #0]
    db2a:	f000 f804 	bl	db36 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    db2e:	2800      	cmp	r0, #0
    db30:	d0f4      	beq.n	db1c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    db32:	2001      	movs	r0, #1
    db34:	bd10      	pop	{r4, pc}
    db36:	b570      	push	{r4, r5, r6, lr}
    db38:	460c      	mov	r4, r1
    db3a:	4605      	mov	r5, r0
    db3c:	f7f7 fe3a 	bl	57b4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    db40:	2800      	cmp	r0, #0
    db42:	d002      	beq.n	db4a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    db44:	2d3e      	cmp	r5, #62	; 0x3e
    db46:	d001      	beq.n	db4c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    db48:	2001      	movs	r0, #1
    db4a:	bd70      	pop	{r4, r5, r6, pc}
    db4c:	2c12      	cmp	r4, #18
    db4e:	d004      	beq.n	db5a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    db50:	4620      	mov	r0, r4
    db52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    db56:	f7f7 be3f 	b.w	57d8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    db5a:	2000      	movs	r0, #0
    db5c:	bd70      	pop	{r4, r5, r6, pc}

0000db5e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    db5e:	880a      	ldrh	r2, [r1, #0]
    db60:	f3c2 020b 	ubfx	r2, r2, #0, #12
    db64:	8002      	strh	r2, [r0, #0]
    db66:	884a      	ldrh	r2, [r1, #2]
    db68:	8042      	strh	r2, [r0, #2]
    db6a:	784a      	ldrb	r2, [r1, #1]
    db6c:	0993      	lsrs	r3, r2, #6
    db6e:	2200      	movs	r2, #0
    db70:	7142      	strb	r2, [r0, #5]
    db72:	784b      	ldrb	r3, [r1, #1]
    db74:	f3c3 1301 	ubfx	r3, r3, #4, #2
    db78:	b11b      	cbz	r3, db82 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    db7a:	2b01      	cmp	r3, #1
    db7c:	d005      	beq.n	db8a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    db7e:	2b02      	cmp	r3, #2
    db80:	d005      	beq.n	db8e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    db82:	7102      	strb	r2, [r0, #4]
    db84:	1d09      	adds	r1, r1, #4
    db86:	6081      	str	r1, [r0, #8]
    db88:	4770      	bx	lr
    db8a:	2201      	movs	r2, #1
    db8c:	e7f9      	b.n	db82 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    db8e:	2202      	movs	r2, #2
    db90:	e7f7      	b.n	db82 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000db92 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    db92:	b510      	push	{r4, lr}
    db94:	460c      	mov	r4, r1
    db96:	7809      	ldrb	r1, [r1, #0]
    db98:	7001      	strb	r1, [r0, #0]
    db9a:	7841      	ldrb	r1, [r0, #1]
    db9c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    dba0:	7041      	strb	r1, [r0, #1]
    dba2:	8822      	ldrh	r2, [r4, #0]
    dba4:	f3c2 2203 	ubfx	r2, r2, #8, #4
    dba8:	4311      	orrs	r1, r2
    dbaa:	7041      	strb	r1, [r0, #1]
    dbac:	78a2      	ldrb	r2, [r4, #2]
    dbae:	7082      	strb	r2, [r0, #2]
    dbb0:	8862      	ldrh	r2, [r4, #2]
    dbb2:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    dbb6:	0a12      	lsrs	r2, r2, #8
    dbb8:	70c2      	strb	r2, [r0, #3]
    dbba:	7041      	strb	r1, [r0, #1]
    dbbc:	7922      	ldrb	r2, [r4, #4]
    dbbe:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    dbc2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    dbc6:	7041      	strb	r1, [r0, #1]
    dbc8:	7962      	ldrb	r2, [r4, #5]
    dbca:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    dbce:	7041      	strb	r1, [r0, #1]
    dbd0:	68a1      	ldr	r1, [r4, #8]
    dbd2:	1d02      	adds	r2, r0, #4
    dbd4:	4291      	cmp	r1, r2
    dbd6:	d006      	beq.n	dbe6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    dbd8:	8862      	ldrh	r2, [r4, #2]
    dbda:	2afb      	cmp	r2, #251	; 0xfb
    dbdc:	d300      	bcc.n	dbe0 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    dbde:	22fb      	movs	r2, #251	; 0xfb
    dbe0:	1d00      	adds	r0, r0, #4
    dbe2:	f7ff fe01 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dbe6:	78a0      	ldrb	r0, [r4, #2]
    dbe8:	1d00      	adds	r0, r0, #4
    dbea:	b2c0      	uxtb	r0, r0
    dbec:	bd10      	pop	{r4, pc}

0000dbee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    dbee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbf2:	4604      	mov	r4, r0
    dbf4:	f891 c000 	ldrb.w	ip, [r1]
    dbf8:	2000      	movs	r0, #0
    dbfa:	2513      	movs	r5, #19
    dbfc:	260c      	movs	r6, #12
    dbfe:	2705      	movs	r7, #5
    dc00:	223e      	movs	r2, #62	; 0x3e
    dc02:	23ff      	movs	r3, #255	; 0xff
    dc04:	f1bc 0f1b 	cmp.w	ip, #27
    dc08:	d27d      	bcs.n	dd06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    dc0a:	e8df f00c 	tbb	[pc, ip]
    dc0e:	0e7c      	.short	0x0e7c
    dc10:	872d2725 	.word	0x872d2725
    dc14:	d0bda391 	.word	0xd0bda391
    dc18:	f2f4ddd2 	.word	0xf2f4ddd2
    dc1c:	537c7cf1 	.word	0x537c7cf1
    dc20:	edeeefff 	.word	0xedeeefff
    dc24:	e9eaebec 	.word	0xe9eaebec
    dc28:	00e8      	.short	0x00e8
    dc2a:	7026      	strb	r6, [r4, #0]
    dc2c:	7908      	ldrb	r0, [r1, #4]
    dc2e:	70a0      	strb	r0, [r4, #2]
    dc30:	7948      	ldrb	r0, [r1, #5]
    dc32:	70e0      	strb	r0, [r4, #3]
    dc34:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    dc38:	0a00      	lsrs	r0, r0, #8
    dc3a:	7120      	strb	r0, [r4, #4]
    dc3c:	79c8      	ldrb	r0, [r1, #7]
    dc3e:	7160      	strb	r0, [r4, #5]
    dc40:	7a08      	ldrb	r0, [r1, #8]
    dc42:	71a0      	strb	r0, [r4, #6]
    dc44:	8908      	ldrh	r0, [r1, #8]
    dc46:	0a00      	lsrs	r0, r0, #8
    dc48:	71e0      	strb	r0, [r4, #7]
    dc4a:	7a88      	ldrb	r0, [r1, #10]
    dc4c:	7220      	strb	r0, [r4, #8]
    dc4e:	8948      	ldrh	r0, [r1, #10]
    dc50:	0a00      	lsrs	r0, r0, #8
    dc52:	7260      	strb	r0, [r4, #9]
    dc54:	2008      	movs	r0, #8
    dc56:	e174      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dc58:	2010      	movs	r0, #16
    dc5a:	e000      	b.n	dc5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    dc5c:	201a      	movs	r0, #26
    dc5e:	7020      	strb	r0, [r4, #0]
    dc60:	7908      	ldrb	r0, [r1, #4]
    dc62:	70a0      	strb	r0, [r4, #2]
    dc64:	2001      	movs	r0, #1
    dc66:	e16c      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dc68:	7022      	strb	r2, [r4, #0]
    dc6a:	2001      	movs	r0, #1
    dc6c:	70a0      	strb	r0, [r4, #2]
    dc6e:	7908      	ldrb	r0, [r1, #4]
    dc70:	70e0      	strb	r0, [r4, #3]
    dc72:	7988      	ldrb	r0, [r1, #6]
    dc74:	7120      	strb	r0, [r4, #4]
    dc76:	88c8      	ldrh	r0, [r1, #6]
    dc78:	0a00      	lsrs	r0, r0, #8
    dc7a:	7160      	strb	r0, [r4, #5]
    dc7c:	7a08      	ldrb	r0, [r1, #8]
    dc7e:	71a0      	strb	r0, [r4, #6]
    dc80:	7a48      	ldrb	r0, [r1, #9]
    dc82:	71e0      	strb	r0, [r4, #7]
    dc84:	f8d1 000a 	ldr.w	r0, [r1, #10]
    dc88:	60a0      	str	r0, [r4, #8]
    dc8a:	89c8      	ldrh	r0, [r1, #14]
    dc8c:	81a0      	strh	r0, [r4, #12]
    dc8e:	7c08      	ldrb	r0, [r1, #16]
    dc90:	73a0      	strb	r0, [r4, #14]
    dc92:	8a08      	ldrh	r0, [r1, #16]
    dc94:	0a00      	lsrs	r0, r0, #8
    dc96:	73e0      	strb	r0, [r4, #15]
    dc98:	7c88      	ldrb	r0, [r1, #18]
    dc9a:	7420      	strb	r0, [r4, #16]
    dc9c:	8a48      	ldrh	r0, [r1, #18]
    dc9e:	0a00      	lsrs	r0, r0, #8
    dca0:	7460      	strb	r0, [r4, #17]
    dca2:	7d08      	ldrb	r0, [r1, #20]
    dca4:	74a0      	strb	r0, [r4, #18]
    dca6:	8a88      	ldrh	r0, [r1, #20]
    dca8:	0a00      	lsrs	r0, r0, #8
    dcaa:	74e0      	strb	r0, [r4, #19]
    dcac:	7d88      	ldrb	r0, [r1, #22]
    dcae:	7520      	strb	r0, [r4, #20]
    dcb0:	4628      	mov	r0, r5
    dcb2:	e146      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dcb4:	7022      	strb	r2, [r4, #0]
    dcb6:	200a      	movs	r0, #10
    dcb8:	70a0      	strb	r0, [r4, #2]
    dcba:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    dcbe:	70e0      	strb	r0, [r4, #3]
    dcc0:	7888      	ldrb	r0, [r1, #2]
    dcc2:	7120      	strb	r0, [r4, #4]
    dcc4:	8848      	ldrh	r0, [r1, #2]
    dcc6:	0a00      	lsrs	r0, r0, #8
    dcc8:	7160      	strb	r0, [r4, #5]
    dcca:	7908      	ldrb	r0, [r1, #4]
    dccc:	71a0      	strb	r0, [r4, #6]
    dcce:	7948      	ldrb	r0, [r1, #5]
    dcd0:	71e0      	strb	r0, [r4, #7]
    dcd2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dcd6:	60a0      	str	r0, [r4, #8]
    dcd8:	8948      	ldrh	r0, [r1, #10]
    dcda:	81a0      	strh	r0, [r4, #12]
    dcdc:	68c8      	ldr	r0, [r1, #12]
    dcde:	f8c4 000e 	str.w	r0, [r4, #14]
    dce2:	8a08      	ldrh	r0, [r1, #16]
    dce4:	8260      	strh	r0, [r4, #18]
    dce6:	f8d1 0012 	ldr.w	r0, [r1, #18]
    dcea:	6160      	str	r0, [r4, #20]
    dcec:	8ac8      	ldrh	r0, [r1, #22]
    dcee:	8320      	strh	r0, [r4, #24]
    dcf0:	7e08      	ldrb	r0, [r1, #24]
    dcf2:	76a0      	strb	r0, [r4, #26]
    dcf4:	8b08      	ldrh	r0, [r1, #24]
    dcf6:	0a00      	lsrs	r0, r0, #8
    dcf8:	76e0      	strb	r0, [r4, #27]
    dcfa:	7e88      	ldrb	r0, [r1, #26]
    dcfc:	7720      	strb	r0, [r4, #28]
    dcfe:	8b48      	ldrh	r0, [r1, #26]
    dd00:	0a00      	lsrs	r0, r0, #8
    dd02:	7760      	strb	r0, [r4, #29]
    dd04:	e000      	b.n	dd08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    dd06:	e097      	b.n	de38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    dd08:	7f08      	ldrb	r0, [r1, #28]
    dd0a:	77a0      	strb	r0, [r4, #30]
    dd0c:	8b88      	ldrh	r0, [r1, #28]
    dd0e:	0a00      	lsrs	r0, r0, #8
    dd10:	77e0      	strb	r0, [r4, #31]
    dd12:	7f88      	ldrb	r0, [r1, #30]
    dd14:	f884 0020 	strb.w	r0, [r4, #32]
    dd18:	201f      	movs	r0, #31
    dd1a:	e112      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dd1c:	7022      	strb	r2, [r4, #0]
    dd1e:	2014      	movs	r0, #20
    dd20:	70a0      	strb	r0, [r4, #2]
    dd22:	7908      	ldrb	r0, [r1, #4]
    dd24:	70e0      	strb	r0, [r4, #3]
    dd26:	8888      	ldrh	r0, [r1, #4]
    dd28:	0a00      	lsrs	r0, r0, #8
    dd2a:	7120      	strb	r0, [r4, #4]
    dd2c:	7988      	ldrb	r0, [r1, #6]
    dd2e:	e0a6      	b.n	de7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    dd30:	7022      	strb	r2, [r4, #0]
    dd32:	2004      	movs	r0, #4
    dd34:	70a0      	strb	r0, [r4, #2]
    dd36:	7908      	ldrb	r0, [r1, #4]
    dd38:	70e0      	strb	r0, [r4, #3]
    dd3a:	7988      	ldrb	r0, [r1, #6]
    dd3c:	7120      	strb	r0, [r4, #4]
    dd3e:	88c8      	ldrh	r0, [r1, #6]
    dd40:	0a00      	lsrs	r0, r0, #8
    dd42:	7160      	strb	r0, [r4, #5]
    dd44:	6888      	ldr	r0, [r1, #8]
    dd46:	f8c4 0006 	str.w	r0, [r4, #6]
    dd4a:	68c8      	ldr	r0, [r1, #12]
    dd4c:	f8c4 000a 	str.w	r0, [r4, #10]
    dd50:	200c      	movs	r0, #12
    dd52:	e0f6      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dd54:	7022      	strb	r2, [r4, #0]
    dd56:	2003      	movs	r0, #3
    dd58:	70a0      	strb	r0, [r4, #2]
    dd5a:	7908      	ldrb	r0, [r1, #4]
    dd5c:	70e0      	strb	r0, [r4, #3]
    dd5e:	7988      	ldrb	r0, [r1, #6]
    dd60:	7120      	strb	r0, [r4, #4]
    dd62:	88c8      	ldrh	r0, [r1, #6]
    dd64:	0a00      	lsrs	r0, r0, #8
    dd66:	7160      	strb	r0, [r4, #5]
    dd68:	7a08      	ldrb	r0, [r1, #8]
    dd6a:	71a0      	strb	r0, [r4, #6]
    dd6c:	8908      	ldrh	r0, [r1, #8]
    dd6e:	0a00      	lsrs	r0, r0, #8
    dd70:	71e0      	strb	r0, [r4, #7]
    dd72:	7a88      	ldrb	r0, [r1, #10]
    dd74:	7220      	strb	r0, [r4, #8]
    dd76:	8948      	ldrh	r0, [r1, #10]
    dd78:	0a00      	lsrs	r0, r0, #8
    dd7a:	7260      	strb	r0, [r4, #9]
    dd7c:	7b08      	ldrb	r0, [r1, #12]
    dd7e:	72a0      	strb	r0, [r4, #10]
    dd80:	8988      	ldrh	r0, [r1, #12]
    dd82:	0a00      	lsrs	r0, r0, #8
    dd84:	72e0      	strb	r0, [r4, #11]
    dd86:	e0b6      	b.n	def6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    dd88:	7022      	strb	r2, [r4, #0]
    dd8a:	70a7      	strb	r7, [r4, #2]
    dd8c:	7908      	ldrb	r0, [r1, #4]
    dd8e:	70e0      	strb	r0, [r4, #3]
    dd90:	8888      	ldrh	r0, [r1, #4]
    dd92:	0a00      	lsrs	r0, r0, #8
    dd94:	7120      	strb	r0, [r4, #4]
    dd96:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dd9a:	f8c4 0005 	str.w	r0, [r4, #5]
    dd9e:	f8d1 000a 	ldr.w	r0, [r1, #10]
    dda2:	f8c4 0009 	str.w	r0, [r4, #9]
    dda6:	89c8      	ldrh	r0, [r1, #14]
    dda8:	f8a4 000d 	strh.w	r0, [r4, #13]
    ddac:	e0c8      	b.n	df40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x352>
    ddae:	2011      	movs	r0, #17
    ddb0:	e045      	b.n	de3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    ddb2:	7027      	strb	r7, [r4, #0]
    ddb4:	7908      	ldrb	r0, [r1, #4]
    ddb6:	70a0      	strb	r0, [r4, #2]
    ddb8:	7948      	ldrb	r0, [r1, #5]
    ddba:	70e0      	strb	r0, [r4, #3]
    ddbc:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ddc0:	0a00      	lsrs	r0, r0, #8
    ddc2:	7120      	strb	r0, [r4, #4]
    ddc4:	79c8      	ldrb	r0, [r1, #7]
    ddc6:	e05a      	b.n	de7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    ddc8:	2008      	movs	r0, #8
    ddca:	7020      	strb	r0, [r4, #0]
    ddcc:	7908      	ldrb	r0, [r1, #4]
    ddce:	70a0      	strb	r0, [r4, #2]
    ddd0:	7988      	ldrb	r0, [r1, #6]
    ddd2:	70e0      	strb	r0, [r4, #3]
    ddd4:	88c8      	ldrh	r0, [r1, #6]
    ddd6:	0a00      	lsrs	r0, r0, #8
    ddd8:	7120      	strb	r0, [r4, #4]
    ddda:	7a08      	ldrb	r0, [r1, #8]
    dddc:	e04f      	b.n	de7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
    ddde:	e09a      	b.n	df16 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    dde0:	e06e      	b.n	dec0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d2>
    dde2:	e04f      	b.n	de84 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x296>
    dde4:	e07a      	b.n	dedc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ee>
    dde6:	e088      	b.n	defa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    dde8:	e041      	b.n	de6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    ddea:	e030      	b.n	de4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x260>
    ddec:	e011      	b.n	de12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    ddee:	e00d      	b.n	de0c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    ddf0:	e024      	b.n	de3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    ddf2:	e01b      	b.n	de2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23e>
    ddf4:	e7ff      	b.n	ddf6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    ddf6:	2030      	movs	r0, #48	; 0x30
    ddf8:	7020      	strb	r0, [r4, #0]
    ddfa:	7908      	ldrb	r0, [r1, #4]
    ddfc:	70a0      	strb	r0, [r4, #2]
    ddfe:	7988      	ldrb	r0, [r1, #6]
    de00:	70e0      	strb	r0, [r4, #3]
    de02:	88c8      	ldrh	r0, [r1, #6]
    de04:	0a00      	lsrs	r0, r0, #8
    de06:	7120      	strb	r0, [r4, #4]
    de08:	2003      	movs	r0, #3
    de0a:	e09a      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    de0c:	7022      	strb	r2, [r4, #0]
    de0e:	2007      	movs	r0, #7
    de10:	e03a      	b.n	de88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29a>
    de12:	7022      	strb	r2, [r4, #0]
    de14:	70a6      	strb	r6, [r4, #2]
    de16:	7908      	ldrb	r0, [r1, #4]
    de18:	70e0      	strb	r0, [r4, #3]
    de1a:	7988      	ldrb	r0, [r1, #6]
    de1c:	7120      	strb	r0, [r4, #4]
    de1e:	88c8      	ldrh	r0, [r1, #6]
    de20:	0a00      	lsrs	r0, r0, #8
    de22:	7160      	strb	r0, [r4, #5]
    de24:	7a08      	ldrb	r0, [r1, #8]
    de26:	71a0      	strb	r0, [r4, #6]
    de28:	7a48      	ldrb	r0, [r1, #9]
    de2a:	e01d      	b.n	de68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27a>
    de2c:	4620      	mov	r0, r4
    de2e:	1d09      	adds	r1, r1, #4
    de30:	f7f7 fc92 	bl	5758 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    de34:	2800      	cmp	r0, #0
    de36:	d109      	bne.n	de4c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x25e>
    de38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de3c:	2057      	movs	r0, #87	; 0x57
    de3e:	7020      	strb	r0, [r4, #0]
    de40:	7908      	ldrb	r0, [r1, #4]
    de42:	70a0      	strb	r0, [r4, #2]
    de44:	8888      	ldrh	r0, [r1, #4]
    de46:	0a00      	lsrs	r0, r0, #8
    de48:	70e0      	strb	r0, [r4, #3]
    de4a:	2002      	movs	r0, #2
    de4c:	e079      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    de4e:	7022      	strb	r2, [r4, #0]
    de50:	2012      	movs	r0, #18
    de52:	70a0      	strb	r0, [r4, #2]
    de54:	7908      	ldrb	r0, [r1, #4]
    de56:	70e0      	strb	r0, [r4, #3]
    de58:	7948      	ldrb	r0, [r1, #5]
    de5a:	7120      	strb	r0, [r4, #4]
    de5c:	7988      	ldrb	r0, [r1, #6]
    de5e:	7160      	strb	r0, [r4, #5]
    de60:	88c8      	ldrh	r0, [r1, #6]
    de62:	0a00      	lsrs	r0, r0, #8
    de64:	71a0      	strb	r0, [r4, #6]
    de66:	7a08      	ldrb	r0, [r1, #8]
    de68:	71e0      	strb	r0, [r4, #7]
    de6a:	2006      	movs	r0, #6
    de6c:	e069      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    de6e:	7023      	strb	r3, [r4, #0]
    de70:	20a1      	movs	r0, #161	; 0xa1
    de72:	70a0      	strb	r0, [r4, #2]
    de74:	7908      	ldrb	r0, [r1, #4]
    de76:	70e0      	strb	r0, [r4, #3]
    de78:	7948      	ldrb	r0, [r1, #5]
    de7a:	7120      	strb	r0, [r4, #4]
    de7c:	2000      	movs	r0, #0
    de7e:	7160      	strb	r0, [r4, #5]
    de80:	2004      	movs	r0, #4
    de82:	e05e      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    de84:	7023      	strb	r3, [r4, #0]
    de86:	20a2      	movs	r0, #162	; 0xa2
    de88:	70a0      	strb	r0, [r4, #2]
    de8a:	7908      	ldrb	r0, [r1, #4]
    de8c:	70e0      	strb	r0, [r4, #3]
    de8e:	8888      	ldrh	r0, [r1, #4]
    de90:	0a00      	lsrs	r0, r0, #8
    de92:	7120      	strb	r0, [r4, #4]
    de94:	7988      	ldrb	r0, [r1, #6]
    de96:	7160      	strb	r0, [r4, #5]
    de98:	88c8      	ldrh	r0, [r1, #6]
    de9a:	0a00      	lsrs	r0, r0, #8
    de9c:	71a0      	strb	r0, [r4, #6]
    de9e:	7a08      	ldrb	r0, [r1, #8]
    dea0:	71e0      	strb	r0, [r4, #7]
    dea2:	8908      	ldrh	r0, [r1, #8]
    dea4:	0a00      	lsrs	r0, r0, #8
    dea6:	7220      	strb	r0, [r4, #8]
    dea8:	7a88      	ldrb	r0, [r1, #10]
    deaa:	7260      	strb	r0, [r4, #9]
    deac:	8948      	ldrh	r0, [r1, #10]
    deae:	0a00      	lsrs	r0, r0, #8
    deb0:	72a0      	strb	r0, [r4, #10]
    deb2:	7b08      	ldrb	r0, [r1, #12]
    deb4:	72e0      	strb	r0, [r4, #11]
    deb6:	8988      	ldrh	r0, [r1, #12]
    deb8:	0a00      	lsrs	r0, r0, #8
    deba:	7320      	strb	r0, [r4, #12]
    debc:	200b      	movs	r0, #11
    debe:	e040      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dec0:	7023      	strb	r3, [r4, #0]
    dec2:	20a3      	movs	r0, #163	; 0xa3
    dec4:	70a0      	strb	r0, [r4, #2]
    dec6:	7908      	ldrb	r0, [r1, #4]
    dec8:	70e0      	strb	r0, [r4, #3]
    deca:	8888      	ldrh	r0, [r1, #4]
    decc:	0a00      	lsrs	r0, r0, #8
    dece:	7120      	strb	r0, [r4, #4]
    ded0:	7988      	ldrb	r0, [r1, #6]
    ded2:	7160      	strb	r0, [r4, #5]
    ded4:	79c8      	ldrb	r0, [r1, #7]
    ded6:	71a0      	strb	r0, [r4, #6]
    ded8:	2005      	movs	r0, #5
    deda:	e032      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dedc:	7022      	strb	r2, [r4, #0]
    dede:	70a5      	strb	r5, [r4, #2]
    dee0:	7908      	ldrb	r0, [r1, #4]
    dee2:	70e0      	strb	r0, [r4, #3]
    dee4:	7948      	ldrb	r0, [r1, #5]
    dee6:	7120      	strb	r0, [r4, #4]
    dee8:	f8d1 0006 	ldr.w	r0, [r1, #6]
    deec:	f8c4 0005 	str.w	r0, [r4, #5]
    def0:	8948      	ldrh	r0, [r1, #10]
    def2:	f8a4 0009 	strh.w	r0, [r4, #9]
    def6:	200a      	movs	r0, #10
    def8:	e023      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    defa:	7023      	strb	r3, [r4, #0]
    defc:	20a4      	movs	r0, #164	; 0xa4
    defe:	70a0      	strb	r0, [r4, #2]
    df00:	7908      	ldrb	r0, [r1, #4]
    df02:	70e0      	strb	r0, [r4, #3]
    df04:	8888      	ldrh	r0, [r1, #4]
    df06:	0a00      	lsrs	r0, r0, #8
    df08:	7120      	strb	r0, [r4, #4]
    df0a:	7988      	ldrb	r0, [r1, #6]
    df0c:	7160      	strb	r0, [r4, #5]
    df0e:	79c8      	ldrb	r0, [r1, #7]
    df10:	71a0      	strb	r0, [r4, #6]
    df12:	2007      	movs	r0, #7
    df14:	e015      	b.n	df42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    df16:	7023      	strb	r3, [r4, #0]
    df18:	2080      	movs	r0, #128	; 0x80
    df1a:	70a0      	strb	r0, [r4, #2]
    df1c:	888a      	ldrh	r2, [r1, #4]
    df1e:	f8a4 2003 	strh.w	r2, [r4, #3]
    df22:	88ca      	ldrh	r2, [r1, #6]
    df24:	f8a4 2005 	strh.w	r2, [r4, #5]
    df28:	7a0a      	ldrb	r2, [r1, #8]
    df2a:	71e2      	strb	r2, [r4, #7]
    df2c:	894a      	ldrh	r2, [r1, #10]
    df2e:	8122      	strh	r2, [r4, #8]
    df30:	898a      	ldrh	r2, [r1, #12]
    df32:	8162      	strh	r2, [r4, #10]
    df34:	89ca      	ldrh	r2, [r1, #14]
    df36:	81a2      	strh	r2, [r4, #12]
    df38:	7c09      	ldrb	r1, [r1, #16]
    df3a:	f001 0101 	and.w	r1, r1, #1
    df3e:	73a1      	strb	r1, [r4, #14]
    df40:	200d      	movs	r0, #13
    df42:	7060      	strb	r0, [r4, #1]
    df44:	1c80      	adds	r0, r0, #2
    df46:	e777      	b.n	de38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>

0000df48 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    df48:	223e      	movs	r2, #62	; 0x3e
    df4a:	7002      	strb	r2, [r0, #0]
    df4c:	2201      	movs	r2, #1
    df4e:	7082      	strb	r2, [r0, #2]
    df50:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    df54:	70c2      	strb	r2, [r0, #3]
    df56:	788a      	ldrb	r2, [r1, #2]
    df58:	7102      	strb	r2, [r0, #4]
    df5a:	884a      	ldrh	r2, [r1, #2]
    df5c:	0a12      	lsrs	r2, r2, #8
    df5e:	7142      	strb	r2, [r0, #5]
    df60:	790a      	ldrb	r2, [r1, #4]
    df62:	7182      	strb	r2, [r0, #6]
    df64:	794a      	ldrb	r2, [r1, #5]
    df66:	71c2      	strb	r2, [r0, #7]
    df68:	f8d1 2006 	ldr.w	r2, [r1, #6]
    df6c:	6082      	str	r2, [r0, #8]
    df6e:	894a      	ldrh	r2, [r1, #10]
    df70:	8182      	strh	r2, [r0, #12]
    df72:	7e0a      	ldrb	r2, [r1, #24]
    df74:	7382      	strb	r2, [r0, #14]
    df76:	8b0a      	ldrh	r2, [r1, #24]
    df78:	0a12      	lsrs	r2, r2, #8
    df7a:	73c2      	strb	r2, [r0, #15]
    df7c:	7e8a      	ldrb	r2, [r1, #26]
    df7e:	7402      	strb	r2, [r0, #16]
    df80:	8b4a      	ldrh	r2, [r1, #26]
    df82:	0a12      	lsrs	r2, r2, #8
    df84:	7442      	strb	r2, [r0, #17]
    df86:	7f0a      	ldrb	r2, [r1, #28]
    df88:	7482      	strb	r2, [r0, #18]
    df8a:	8b8a      	ldrh	r2, [r1, #28]
    df8c:	0a12      	lsrs	r2, r2, #8
    df8e:	74c2      	strb	r2, [r0, #19]
    df90:	7f89      	ldrb	r1, [r1, #30]
    df92:	7501      	strb	r1, [r0, #20]
    df94:	2113      	movs	r1, #19
    df96:	7041      	strb	r1, [r0, #1]
    df98:	4608      	mov	r0, r1
    df9a:	4770      	bx	lr
    df9c:	094a      	lsrs	r2, r1, #5
    df9e:	f001 011f 	and.w	r1, r1, #31
    dfa2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    dfa6:	40c8      	lsrs	r0, r1
    dfa8:	f000 0001 	and.w	r0, r0, #1
    dfac:	4770      	bx	lr

0000dfae <sdc_hci_data_get>:
    dfae:	b510      	push	{r4, lr}
    dfb0:	b120      	cbz	r0, dfbc <sdc_hci_data_get+0xe>
    dfb2:	f7ff fd9a 	bl	daea <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    dfb6:	b120      	cbz	r0, dfc2 <sdc_hci_data_get+0x14>
    dfb8:	2000      	movs	r0, #0
    dfba:	bd10      	pop	{r4, pc}
    dfbc:	f06f 0015 	mvn.w	r0, #21
    dfc0:	bd10      	pop	{r4, pc}
    dfc2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dfc6:	bd10      	pop	{r4, pc}

0000dfc8 <sdc_hci_data_put>:
    dfc8:	b510      	push	{r4, lr}
    dfca:	f06f 0415 	mvn.w	r4, #21
    dfce:	b120      	cbz	r0, dfda <sdc_hci_data_put+0x12>
    dfd0:	f7ff fd99 	bl	db06 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    dfd4:	b108      	cbz	r0, dfda <sdc_hci_data_put+0x12>
    dfd6:	2000      	movs	r0, #0
    dfd8:	bd10      	pop	{r4, pc}
    dfda:	4620      	mov	r0, r4
    dfdc:	bd10      	pop	{r4, pc}

0000dfde <sdc_hci_evt_get>:
    dfde:	b510      	push	{r4, lr}
    dfe0:	b120      	cbz	r0, dfec <sdc_hci_evt_get+0xe>
    dfe2:	f7ff fd99 	bl	db18 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    dfe6:	b120      	cbz	r0, dff2 <sdc_hci_evt_get+0x14>
    dfe8:	2000      	movs	r0, #0
    dfea:	bd10      	pop	{r4, pc}
    dfec:	f06f 0015 	mvn.w	r0, #21
    dff0:	bd10      	pop	{r4, pc}
    dff2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dff6:	bd10      	pop	{r4, pc}

0000dff8 <sdc_hci_get>:
    dff8:	b118      	cbz	r0, e002 <sdc_hci_get+0xa>
    dffa:	b111      	cbz	r1, e002 <sdc_hci_get+0xa>
    dffc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    e000:	4770      	bx	lr
    e002:	f06f 0015 	mvn.w	r0, #21
    e006:	4770      	bx	lr

0000e008 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    e008:	f002 bf30 	b.w	10e6c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000e00c <sdc_hci_cmd_cb_read_transmit_power_level>:
    e00c:	f002 bf7e 	b.w	10f0c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000e010 <sdc_hci_cmd_cb_set_event_mask>:
    e010:	b510      	push	{r4, lr}
    e012:	f7f7 fbf1 	bl	57f8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    e016:	2000      	movs	r0, #0
    e018:	bd10      	pop	{r4, pc}

0000e01a <sdc_hci_cmd_cb_set_event_mask_page_2>:
    e01a:	b510      	push	{r4, lr}
    e01c:	f7f7 fbfc 	bl	5818 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    e020:	2000      	movs	r0, #0
    e022:	bd10      	pop	{r4, pc}

0000e024 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    e024:	f002 bf8e 	b.w	10f44 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000e028 <sdc_hci_cmd_vs_conn_event_extend>:
    e028:	b508      	push	{r3, lr}
    e02a:	7800      	ldrb	r0, [r0, #0]
    e02c:	f88d 0000 	strb.w	r0, [sp]
    e030:	4668      	mov	r0, sp
    e032:	f002 fe3c 	bl	10cae <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    e036:	bd08      	pop	{r3, pc}

0000e038 <sdc_hci_cmd_vs_conn_update>:
    e038:	2001      	movs	r0, #1
    e03a:	4770      	bx	lr

0000e03c <sdc_hci_cmd_vs_event_length_set>:
    e03c:	f7fd b9f8 	b.w	b430 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000e040 <sdc_hci_cmd_vs_llpm_mode_set>:
    e040:	2001      	movs	r0, #1
    e042:	4770      	bx	lr

0000e044 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    e044:	7881      	ldrb	r1, [r0, #2]
    e046:	8800      	ldrh	r0, [r0, #0]
    e048:	f002 bdf9 	b.w	10c3e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000e04c <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    e04c:	7800      	ldrb	r0, [r0, #0]
    e04e:	b100      	cbz	r0, e052 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    e050:	2001      	movs	r0, #1
    e052:	f002 bdef 	b.w	10c34 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000e056 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    e056:	b570      	push	{r4, r5, r6, lr}
    e058:	4605      	mov	r5, r0
    e05a:	2210      	movs	r2, #16
    e05c:	2100      	movs	r1, #0
    e05e:	f7ff fc3d 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e062:	2210      	movs	r2, #16
    e064:	2100      	movs	r1, #0
    e066:	f105 0010 	add.w	r0, r5, #16
    e06a:	f7ff fc37 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e06e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    e072:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    e076:	1c40      	adds	r0, r0, #1
    e078:	d10b      	bne.n	e092 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e07a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e07e:	1c40      	adds	r0, r0, #1
    e080:	d107      	bne.n	e092 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e082:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    e086:	1c40      	adds	r0, r0, #1
    e088:	d103      	bne.n	e092 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e08a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    e08e:	1c40      	adds	r0, r0, #1
    e090:	d00b      	beq.n	e0aa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    e092:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    e096:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e09a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    e09e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    e0a2:	612a      	str	r2, [r5, #16]
    e0a4:	6168      	str	r0, [r5, #20]
    e0a6:	61a9      	str	r1, [r5, #24]
    e0a8:	61eb      	str	r3, [r5, #28]
    e0aa:	2000      	movs	r0, #0
    e0ac:	f7f8 f8fa 	bl	62a4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e0b0:	b918      	cbnz	r0, e0ba <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    e0b2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    e0b6:	07c0      	lsls	r0, r0, #31
    e0b8:	d118      	bne.n	e0ec <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e0ba:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    e0be:	1c40      	adds	r0, r0, #1
    e0c0:	d10b      	bne.n	e0da <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e0c2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    e0c6:	1c40      	adds	r0, r0, #1
    e0c8:	d107      	bne.n	e0da <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e0ca:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    e0ce:	1c40      	adds	r0, r0, #1
    e0d0:	d103      	bne.n	e0da <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e0d2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e0d6:	1c40      	adds	r0, r0, #1
    e0d8:	d008      	beq.n	e0ec <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e0da:	f854 0f90 	ldr.w	r0, [r4, #144]!
    e0de:	6861      	ldr	r1, [r4, #4]
    e0e0:	68a2      	ldr	r2, [r4, #8]
    e0e2:	68e3      	ldr	r3, [r4, #12]
    e0e4:	6028      	str	r0, [r5, #0]
    e0e6:	6069      	str	r1, [r5, #4]
    e0e8:	60aa      	str	r2, [r5, #8]
    e0ea:	60eb      	str	r3, [r5, #12]
    e0ec:	2000      	movs	r0, #0
    e0ee:	bd70      	pop	{r4, r5, r6, pc}

0000e0f0 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    e0f0:	b538      	push	{r3, r4, r5, lr}
    e0f2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    e0f6:	4604      	mov	r4, r0
    e0f8:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e0fc:	1c40      	adds	r0, r0, #1
    e0fe:	d105      	bne.n	e10c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    e100:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    e104:	43c0      	mvns	r0, r0
    e106:	0400      	lsls	r0, r0, #16
    e108:	0c00      	lsrs	r0, r0, #16
    e10a:	d03e      	beq.n	e18a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e10c:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    e110:	07c0      	lsls	r0, r0, #31
    e112:	d03a      	beq.n	e18a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e114:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e118:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    e11c:	f8ad 1000 	strh.w	r1, [sp]
    e120:	f8c4 0001 	str.w	r0, [r4, #1]
    e124:	f8bd 0000 	ldrh.w	r0, [sp]
    e128:	f8a4 0005 	strh.w	r0, [r4, #5]
    e12c:	79a0      	ldrb	r0, [r4, #6]
    e12e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    e132:	71a0      	strb	r0, [r4, #6]
    e134:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    e138:	1c40      	adds	r0, r0, #1
    e13a:	d00f      	beq.n	e15c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e13c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    e140:	1c40      	adds	r0, r0, #1
    e142:	d00b      	beq.n	e15c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e144:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    e148:	1c40      	adds	r0, r0, #1
    e14a:	d007      	beq.n	e15c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e14c:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    e150:	1c40      	adds	r0, r0, #1
    e152:	d003      	beq.n	e15c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e154:	2000      	movs	r0, #0
    e156:	f7f8 f8a5 	bl	62a4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e15a:	b140      	cbz	r0, e16e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    e15c:	2210      	movs	r2, #16
    e15e:	2100      	movs	r1, #0
    e160:	1de0      	adds	r0, r4, #7
    e162:	f7ff fbbb 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e166:	2001      	movs	r0, #1
    e168:	7020      	strb	r0, [r4, #0]
    e16a:	2000      	movs	r0, #0
    e16c:	bd38      	pop	{r3, r4, r5, pc}
    e16e:	f855 2f90 	ldr.w	r2, [r5, #144]!
    e172:	6869      	ldr	r1, [r5, #4]
    e174:	68a8      	ldr	r0, [r5, #8]
    e176:	68eb      	ldr	r3, [r5, #12]
    e178:	f8c4 2007 	str.w	r2, [r4, #7]
    e17c:	f8c4 100b 	str.w	r1, [r4, #11]
    e180:	f8c4 000f 	str.w	r0, [r4, #15]
    e184:	f8c4 3013 	str.w	r3, [r4, #19]
    e188:	e7ed      	b.n	e166 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    e18a:	2000      	movs	r0, #0
    e18c:	e7ec      	b.n	e168 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000e18e <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    e18e:	f002 bd80 	b.w	10c92 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000e192 <sdc_hci_cmd_ip_read_bd_addr>:
    e192:	f002 be7c 	b.w	10e8e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000e196 <sdc_hci_cmd_ip_read_local_version_information>:
    e196:	f7fd b959 	b.w	b44c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000e19a <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    e19a:	f002 bb3e 	b.w	1081a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000e19e <sdc_hci_cmd_le_clear_filter_accept_list>:
    e19e:	f002 bb53 	b.w	10848 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000e1a2 <sdc_hci_cmd_le_encrypt>:
    e1a2:	f002 bb5b 	b.w	1085c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000e1a6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    e1a6:	8802      	ldrh	r2, [r0, #0]
    e1a8:	800a      	strh	r2, [r1, #0]
    e1aa:	f002 bb60 	b.w	1086e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000e1ae <sdc_hci_cmd_le_long_term_key_request_reply>:
    e1ae:	8802      	ldrh	r2, [r0, #0]
    e1b0:	800a      	strh	r2, [r1, #0]
    e1b2:	f002 bb75 	b.w	108a0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000e1b6 <sdc_hci_cmd_le_rand>:
    e1b6:	f002 bb9d 	b.w	108f4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000e1ba <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    e1ba:	f002 bba1 	b.w	10900 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000e1be <sdc_hci_cmd_le_read_buffer_size>:
    e1be:	f7fd b83d 	b.w	b23c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000e1c2 <sdc_hci_cmd_le_read_channel_map>:
    e1c2:	f7fd b845 	b.w	b250 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000e1c6 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    e1c6:	f002 bbd2 	b.w	1096e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000e1ca <sdc_hci_cmd_le_read_max_data_length>:
    e1ca:	f002 bba2 	b.w	10912 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000e1ce <sdc_hci_cmd_le_read_phy>:
    e1ce:	f7fd b867 	b.w	b2a0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000e1d2 <sdc_hci_cmd_le_read_remote_features>:
    e1d2:	f002 bba7 	b.w	10924 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000e1d6 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    e1d6:	f7fd b889 	b.w	b2ec <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000e1da <sdc_hci_cmd_le_read_transmit_power>:
    e1da:	f002 bbbf 	b.w	1095c <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000e1de <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    e1de:	f002 bbca 	b.w	10976 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000e1e2 <sdc_hci_cmd_le_set_adv_data>:
    e1e2:	f002 bbdd 	b.w	109a0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000e1e6 <sdc_hci_cmd_le_set_adv_enable>:
    e1e6:	f002 bbf0 	b.w	109ca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000e1ea <sdc_hci_cmd_le_set_adv_params>:
    e1ea:	f002 bc21 	b.w	10a30 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000e1ee <sdc_hci_cmd_le_set_data_length>:
    e1ee:	f002 bcb4 	b.w	10b5a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000e1f2 <sdc_hci_cmd_le_set_default_phy>:
    e1f2:	f7fd b885 	b.w	b300 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000e1f6 <sdc_hci_cmd_le_set_event_mask>:
    e1f6:	b510      	push	{r4, lr}
    e1f8:	f7f7 faf6 	bl	57e8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    e1fc:	2000      	movs	r0, #0
    e1fe:	bd10      	pop	{r4, pc}

0000e200 <sdc_hci_cmd_le_set_phy>:
    e200:	f002 bccb 	b.w	10b9a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000e204 <sdc_hci_cmd_le_set_random_address>:
    e204:	f002 bce2 	b.w	10bcc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000e208 <sdc_hci_cmd_le_set_scan_response_data>:
    e208:	f002 bcee 	b.w	10be8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000e20c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    e20c:	f002 bd01 	b.w	10c12 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000e210 <sdc_hci_cmd_lc_disconnect>:
    e210:	f002 bab5 	b.w	1077e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000e214 <sdc_hci_cmd_lc_read_remote_version_information>:
    e214:	f002 be47 	b.w	10ea6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    e218:	b570      	push	{r4, r5, r6, lr}
    e21a:	880b      	ldrh	r3, [r1, #0]
    e21c:	7f04      	ldrb	r4, [r0, #28]
    e21e:	f100 0524 	add.w	r5, r0, #36	; 0x24
    e222:	f3c3 060e 	ubfx	r6, r3, #0, #15
    e226:	8802      	ldrh	r2, [r0, #0]
    e228:	4435      	add	r5, r6
    e22a:	1da4      	adds	r4, r4, #6
    e22c:	882d      	ldrh	r5, [r5, #0]
    e22e:	4422      	add	r2, r4
    e230:	b292      	uxth	r2, r2
    e232:	4425      	add	r5, r4
    e234:	1e54      	subs	r4, r2, #1
    e236:	442c      	add	r4, r5
    e238:	fb94 f4f2 	sdiv	r4, r4, r2
    e23c:	fb02 6204 	mla	r2, r2, r4, r6
    e240:	8840      	ldrh	r0, [r0, #2]
    e242:	b292      	uxth	r2, r2
    e244:	4290      	cmp	r0, r2
    e246:	d903      	bls.n	e250 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    e248:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    e24c:	4310      	orrs	r0, r2
    e24e:	e002      	b.n	e256 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    e250:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e254:	4398      	bics	r0, r3
    e256:	8008      	strh	r0, [r1, #0]
    e258:	bd70      	pop	{r4, r5, r6, pc}
    e25a:	0442      	lsls	r2, r0, #17
    e25c:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    e260:	d107      	bne.n	e272 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e262:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    e266:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    e26a:	4288      	cmp	r0, r1
    e26c:	d001      	beq.n	e272 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    e26e:	2001      	movs	r0, #1
    e270:	4770      	bx	lr
    e272:	2000      	movs	r0, #0
    e274:	4770      	bx	lr

0000e276 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    e276:	b570      	push	{r4, r5, r6, lr}
    e278:	7f00      	ldrb	r0, [r0, #28]
    e27a:	461c      	mov	r4, r3
    e27c:	1d80      	adds	r0, r0, #6
    e27e:	4408      	add	r0, r1
    e280:	4613      	mov	r3, r2
    e282:	8809      	ldrh	r1, [r1, #0]
    e284:	9a04      	ldr	r2, [sp, #16]
    e286:	1cc9      	adds	r1, r1, #3
    e288:	b289      	uxth	r1, r1
    e28a:	1915      	adds	r5, r2, r4
    e28c:	1ec0      	subs	r0, r0, #3
    e28e:	428d      	cmp	r5, r1
    e290:	d805      	bhi.n	e29e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    e292:	1881      	adds	r1, r0, r2
    e294:	4622      	mov	r2, r4
    e296:	4618      	mov	r0, r3
    e298:	f7ff faa6 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e29c:	e000      	b.n	e2a0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    e29e:	2400      	movs	r4, #0
    e2a0:	4620      	mov	r0, r4
    e2a2:	bd70      	pop	{r4, r5, r6, pc}

0000e2a4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    e2a4:	b570      	push	{r4, r5, r6, lr}
    e2a6:	7f00      	ldrb	r0, [r0, #28]
    e2a8:	461c      	mov	r4, r3
    e2aa:	1d80      	adds	r0, r0, #6
    e2ac:	4408      	add	r0, r1
    e2ae:	4613      	mov	r3, r2
    e2b0:	8809      	ldrh	r1, [r1, #0]
    e2b2:	9a04      	ldr	r2, [sp, #16]
    e2b4:	1cc9      	adds	r1, r1, #3
    e2b6:	b289      	uxth	r1, r1
    e2b8:	1915      	adds	r5, r2, r4
    e2ba:	1ec0      	subs	r0, r0, #3
    e2bc:	428d      	cmp	r5, r1
    e2be:	d805      	bhi.n	e2cc <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    e2c0:	4410      	add	r0, r2
    e2c2:	4622      	mov	r2, r4
    e2c4:	4619      	mov	r1, r3
    e2c6:	f7ff fa8f 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e2ca:	e000      	b.n	e2ce <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    e2cc:	2400      	movs	r4, #0
    e2ce:	4620      	mov	r0, r4
    e2d0:	bd70      	pop	{r4, r5, r6, pc}

0000e2d2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e2d2:	8881      	ldrh	r1, [r0, #4]
    e2d4:	88c0      	ldrh	r0, [r0, #6]
    e2d6:	4288      	cmp	r0, r1
    e2d8:	d101      	bne.n	e2de <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e2da:	2001      	movs	r0, #1
    e2dc:	4770      	bx	lr
    e2de:	2000      	movs	r0, #0
    e2e0:	4770      	bx	lr

0000e2e2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    e2e2:	8881      	ldrh	r1, [r0, #4]
    e2e4:	8900      	ldrh	r0, [r0, #8]
    e2e6:	4288      	cmp	r0, r1
    e2e8:	d101      	bne.n	e2ee <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    e2ea:	2001      	movs	r0, #1
    e2ec:	4770      	bx	lr
    e2ee:	2000      	movs	r0, #0
    e2f0:	4770      	bx	lr

0000e2f2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2f6:	460f      	mov	r7, r1
    e2f8:	4604      	mov	r4, r0
    e2fa:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e2fe:	8880      	ldrh	r0, [r0, #4]
    e300:	2600      	movs	r6, #0
    e302:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e306:	1845      	adds	r5, r0, r1
    e308:	603e      	str	r6, [r7, #0]
    e30a:	8a20      	ldrh	r0, [r4, #16]
    e30c:	2800      	cmp	r0, #0
    e30e:	d01a      	beq.n	e346 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    e310:	89a1      	ldrh	r1, [r4, #12]
    e312:	4408      	add	r0, r1
    e314:	b280      	uxth	r0, r0
    e316:	81a0      	strh	r0, [r4, #12]
    e318:	8829      	ldrh	r1, [r5, #0]
    e31a:	4288      	cmp	r0, r1
    e31c:	d905      	bls.n	e32a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    e31e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e322:	f04f 0014 	mov.w	r0, #20
    e326:	f7f7 f8db 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e32a:	d10a      	bne.n	e342 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    e32c:	69a0      	ldr	r0, [r4, #24]
    e32e:	b108      	cbz	r0, e334 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x42>
    e330:	7f40      	ldrb	r0, [r0, #29]
    e332:	70a8      	strb	r0, [r5, #2]
    e334:	f104 0104 	add.w	r1, r4, #4
    e338:	4620      	mov	r0, r4
    e33a:	f7ff ff6d 	bl	e218 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e33e:	81a6      	strh	r6, [r4, #12]
    e340:	603d      	str	r5, [r7, #0]
    e342:	8226      	strh	r6, [r4, #16]
    e344:	2001      	movs	r0, #1
    e346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e34a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e34a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e34c:	4604      	mov	r4, r0
    e34e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    e352:	88c0      	ldrh	r0, [r0, #6]
    e354:	460e      	mov	r6, r1
    e356:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e35a:	8a60      	ldrh	r0, [r4, #18]
    e35c:	19d9      	adds	r1, r3, r7
    e35e:	b108      	cbz	r0, e364 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    e360:	42b0      	cmp	r0, r6
    e362:	d201      	bcs.n	e368 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    e364:	2000      	movs	r0, #0
    e366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e368:	89e0      	ldrh	r0, [r4, #14]
    e36a:	2500      	movs	r5, #0
    e36c:	b140      	cbz	r0, e380 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    e36e:	f8b1 c000 	ldrh.w	ip, [r1]
    e372:	4560      	cmp	r0, ip
    e374:	d008      	beq.n	e388 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e376:	f240 2151 	movw	r1, #593	; 0x251
    e37a:	2014      	movs	r0, #20
    e37c:	f7f7 f8b0 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e380:	7f60      	ldrb	r0, [r4, #29]
    e382:	7088      	strb	r0, [r1, #2]
    e384:	800d      	strh	r5, [r1, #0]
    e386:	e00e      	b.n	e3a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e388:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e38c:	4418      	add	r0, r3
    e38e:	f10c 0c06 	add.w	ip, ip, #6
    e392:	44bc      	add	ip, r7
    e394:	4460      	add	r0, ip
    e396:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    e39a:	f820 cc03 	strh.w	ip, [r0, #-3]
    e39e:	f894 c020 	ldrb.w	ip, [r4, #32]
    e3a2:	f800 cc01 	strb.w	ip, [r0, #-1]
    e3a6:	89e0      	ldrh	r0, [r4, #14]
    e3a8:	4430      	add	r0, r6
    e3aa:	81e0      	strh	r0, [r4, #14]
    e3ac:	8808      	ldrh	r0, [r1, #0]
    e3ae:	4430      	add	r0, r6
    e3b0:	8008      	strh	r0, [r1, #0]
    e3b2:	b19a      	cbz	r2, e3dc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    e3b4:	1da1      	adds	r1, r4, #6
    e3b6:	4620      	mov	r0, r4
    e3b8:	f7ff ff2e 	bl	e218 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e3bc:	81e5      	strh	r5, [r4, #14]
    e3be:	7f60      	ldrb	r0, [r4, #29]
    e3c0:	1c40      	adds	r0, r0, #1
    e3c2:	7760      	strb	r0, [r4, #29]
    e3c4:	7da0      	ldrb	r0, [r4, #22]
    e3c6:	f88d 0000 	strb.w	r0, [sp]
    e3ca:	9800      	ldr	r0, [sp, #0]
    e3cc:	9000      	str	r0, [sp, #0]
    e3ce:	f89d 0000 	ldrb.w	r0, [sp]
    e3d2:	b178      	cbz	r0, e3f4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e3d4:	88e0      	ldrh	r0, [r4, #6]
    e3d6:	82a0      	strh	r0, [r4, #20]
    e3d8:	75a5      	strb	r5, [r4, #22]
    e3da:	e00b      	b.n	e3f4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e3dc:	7f20      	ldrb	r0, [r4, #28]
    e3de:	89e1      	ldrh	r1, [r4, #14]
    e3e0:	1d80      	adds	r0, r0, #6
    e3e2:	4438      	add	r0, r7
    e3e4:	4419      	add	r1, r3
    e3e6:	4408      	add	r0, r1
    e3e8:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e3ec:	83e1      	strh	r1, [r4, #30]
    e3ee:	7880      	ldrb	r0, [r0, #2]
    e3f0:	f884 0020 	strb.w	r0, [r4, #32]
    e3f4:	8265      	strh	r5, [r4, #18]
    e3f6:	2001      	movs	r0, #1
    e3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e3fa <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    e3fa:	1cc0      	adds	r0, r0, #3
    e3fc:	4770      	bx	lr

0000e3fe <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e3fe:	b510      	push	{r4, lr}
    e400:	4604      	mov	r4, r0
    e402:	88c0      	ldrh	r0, [r0, #6]
    e404:	88a1      	ldrh	r1, [r4, #4]
    e406:	4281      	cmp	r1, r0
    e408:	d007      	beq.n	e41a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e40a:	89a0      	ldrh	r0, [r4, #12]
    e40c:	b928      	cbnz	r0, e41a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e40e:	8a20      	ldrh	r0, [r4, #16]
    e410:	b918      	cbnz	r0, e41a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e412:	88a0      	ldrh	r0, [r4, #4]
    e414:	8aa1      	ldrh	r1, [r4, #20]
    e416:	4288      	cmp	r0, r1
    e418:	d101      	bne.n	e41e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    e41a:	2000      	movs	r0, #0
    e41c:	bd10      	pop	{r4, pc}
    e41e:	1d21      	adds	r1, r4, #4
    e420:	4620      	mov	r0, r4
    e422:	f7ff fef9 	bl	e218 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e426:	2000      	movs	r0, #0
    e428:	8220      	strh	r0, [r4, #16]
    e42a:	2001      	movs	r0, #1
    e42c:	bd10      	pop	{r4, pc}

0000e42e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e42e:	b510      	push	{r4, lr}
    e430:	4604      	mov	r4, r0
    e432:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e436:	88c0      	ldrh	r0, [r0, #6]
    e438:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e43c:	4402      	add	r2, r0
    e43e:	8820      	ldrh	r0, [r4, #0]
    e440:	2845      	cmp	r0, #69	; 0x45
    e442:	d200      	bcs.n	e446 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e444:	2045      	movs	r0, #69	; 0x45
    e446:	4288      	cmp	r0, r1
    e448:	d204      	bcs.n	e454 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e44a:	f240 1119 	movw	r1, #281	; 0x119
    e44e:	2014      	movs	r0, #20
    e450:	f7f7 f846 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e454:	7de0      	ldrb	r0, [r4, #23]
    e456:	2800      	cmp	r0, #0
    e458:	d003      	beq.n	e462 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e45a:	8810      	ldrh	r0, [r2, #0]
    e45c:	4288      	cmp	r0, r1
    e45e:	d201      	bcs.n	e464 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e460:	2000      	movs	r0, #0
    e462:	bd10      	pop	{r4, pc}
    e464:	8011      	strh	r1, [r2, #0]
    e466:	1da1      	adds	r1, r4, #6
    e468:	4620      	mov	r0, r4
    e46a:	f7ff fed5 	bl	e218 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e46e:	2000      	movs	r0, #0
    e470:	75e0      	strb	r0, [r4, #23]
    e472:	2001      	movs	r0, #1
    e474:	bd10      	pop	{r4, pc}

0000e476 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e476:	b530      	push	{r4, r5, lr}
    e478:	88c4      	ldrh	r4, [r0, #6]
    e47a:	8881      	ldrh	r1, [r0, #4]
    e47c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e480:	f3c1 030e 	ubfx	r3, r1, #0, #15
    e484:	4413      	add	r3, r2
    e486:	8882      	ldrh	r2, [r0, #4]
    e488:	8a85      	ldrh	r5, [r0, #20]
    e48a:	42aa      	cmp	r2, r5
    e48c:	d012      	beq.n	e4b4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e48e:	42a1      	cmp	r1, r4
    e490:	d010      	beq.n	e4b4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e492:	8981      	ldrh	r1, [r0, #12]
    e494:	b971      	cbnz	r1, e4b4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e496:	6982      	ldr	r2, [r0, #24]
    e498:	b172      	cbz	r2, e4b8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e49a:	4610      	mov	r0, r2
    e49c:	f7ff ff21 	bl	e2e2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    e4a0:	b950      	cbnz	r0, e4b8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e4a2:	8910      	ldrh	r0, [r2, #8]
    e4a4:	3224      	adds	r2, #36	; 0x24
    e4a6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e4aa:	4410      	add	r0, r2
    e4ac:	7899      	ldrb	r1, [r3, #2]
    e4ae:	7880      	ldrb	r0, [r0, #2]
    e4b0:	4288      	cmp	r0, r1
    e4b2:	d101      	bne.n	e4b8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e4b4:	2000      	movs	r0, #0
    e4b6:	bd30      	pop	{r4, r5, pc}
    e4b8:	4618      	mov	r0, r3
    e4ba:	bd30      	pop	{r4, r5, pc}

0000e4bc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e4bc:	7f00      	ldrb	r0, [r0, #28]
    e4be:	1d80      	adds	r0, r0, #6
    e4c0:	4408      	add	r0, r1
    e4c2:	1ec0      	subs	r0, r0, #3
    e4c4:	6010      	str	r0, [r2, #0]
    e4c6:	8808      	ldrh	r0, [r1, #0]
    e4c8:	4770      	bx	lr

0000e4ca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4ce:	460e      	mov	r6, r1
    e4d0:	88c1      	ldrh	r1, [r0, #6]
    e4d2:	8902      	ldrh	r2, [r0, #8]
    e4d4:	4604      	mov	r4, r0
    e4d6:	f100 0824 	add.w	r8, r0, #36	; 0x24
    e4da:	8800      	ldrh	r0, [r0, #0]
    e4dc:	f3c1 050e 	ubfx	r5, r1, #0, #15
    e4e0:	f3c2 070e 	ubfx	r7, r2, #0, #15
    e4e4:	2845      	cmp	r0, #69	; 0x45
    e4e6:	d200      	bcs.n	e4ea <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e4e8:	2045      	movs	r0, #69	; 0x45
    e4ea:	42b0      	cmp	r0, r6
    e4ec:	d203      	bcs.n	e4f6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e4ee:	21db      	movs	r1, #219	; 0xdb
    e4f0:	2014      	movs	r0, #20
    e4f2:	f7f6 fff5 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4f6:	4610      	mov	r0, r2
    e4f8:	f7ff feaf 	bl	e25a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e4fc:	b110      	cbz	r0, e504 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e4fe:	2000      	movs	r0, #0
    e500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e504:	42af      	cmp	r7, r5
    e506:	d908      	bls.n	e51a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e508:	7f21      	ldrb	r1, [r4, #28]
    e50a:	1b78      	subs	r0, r7, r5
    e50c:	1a40      	subs	r0, r0, r1
    e50e:	1f80      	subs	r0, r0, #6
    e510:	4286      	cmp	r6, r0
    e512:	dd02      	ble.n	e51a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e514:	2000      	movs	r0, #0
    e516:	75e0      	strb	r0, [r4, #23]
    e518:	e7f1      	b.n	e4fe <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e51a:	eb08 0005 	add.w	r0, r8, r5
    e51e:	2101      	movs	r1, #1
    e520:	8006      	strh	r6, [r0, #0]
    e522:	75e1      	strb	r1, [r4, #23]
    e524:	e7ec      	b.n	e500 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e526 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e526:	b538      	push	{r3, r4, r5, lr}
    e528:	88c4      	ldrh	r4, [r0, #6]
    e52a:	8881      	ldrh	r1, [r0, #4]
    e52c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e530:	f3c1 030e 	ubfx	r3, r1, #0, #15
    e534:	441a      	add	r2, r3
    e536:	42a1      	cmp	r1, r4
    e538:	d010      	beq.n	e55c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e53a:	8983      	ldrh	r3, [r0, #12]
    e53c:	8a05      	ldrh	r5, [r0, #16]
    e53e:	8812      	ldrh	r2, [r2, #0]
    e540:	442b      	add	r3, r5
    e542:	4293      	cmp	r3, r2
    e544:	d308      	bcc.n	e558 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e546:	f8ad 1000 	strh.w	r1, [sp]
    e54a:	4669      	mov	r1, sp
    e54c:	f7ff fe64 	bl	e218 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e550:	f8bd 0000 	ldrh.w	r0, [sp]
    e554:	42a0      	cmp	r0, r4
    e556:	d001      	beq.n	e55c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e558:	2001      	movs	r0, #1
    e55a:	bd38      	pop	{r3, r4, r5, pc}
    e55c:	2000      	movs	r0, #0
    e55e:	bd38      	pop	{r3, r4, r5, pc}

0000e560 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e560:	b570      	push	{r4, r5, r6, lr}
    e562:	88c6      	ldrh	r6, [r0, #6]
    e564:	8885      	ldrh	r5, [r0, #4]
    e566:	4603      	mov	r3, r0
    e568:	f100 0424 	add.w	r4, r0, #36	; 0x24
    e56c:	f3c5 000e 	ubfx	r0, r5, #0, #15
    e570:	4420      	add	r0, r4
    e572:	42b5      	cmp	r5, r6
    e574:	d102      	bne.n	e57c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e576:	2000      	movs	r0, #0
    e578:	8218      	strh	r0, [r3, #16]
    e57a:	bd70      	pop	{r4, r5, r6, pc}
    e57c:	8804      	ldrh	r4, [r0, #0]
    e57e:	899d      	ldrh	r5, [r3, #12]
    e580:	7f1e      	ldrb	r6, [r3, #28]
    e582:	1b64      	subs	r4, r4, r5
    e584:	4435      	add	r5, r6
    e586:	4428      	add	r0, r5
    e588:	880d      	ldrh	r5, [r1, #0]
    e58a:	b2a4      	uxth	r4, r4
    e58c:	1cc0      	adds	r0, r0, #3
    e58e:	42a5      	cmp	r5, r4
    e590:	d900      	bls.n	e594 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e592:	800c      	strh	r4, [r1, #0]
    e594:	899c      	ldrh	r4, [r3, #12]
    e596:	b124      	cbz	r4, e5a2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e598:	2400      	movs	r4, #0
    e59a:	7014      	strb	r4, [r2, #0]
    e59c:	8809      	ldrh	r1, [r1, #0]
    e59e:	8219      	strh	r1, [r3, #16]
    e5a0:	bd70      	pop	{r4, r5, r6, pc}
    e5a2:	2401      	movs	r4, #1
    e5a4:	e7f9      	b.n	e59a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e5a6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    e5a6:	b508      	push	{r3, lr}
    e5a8:	8a81      	ldrh	r1, [r0, #20]
    e5aa:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e5ae:	3aff      	subs	r2, #255	; 0xff
    e5b0:	d008      	beq.n	e5c4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    e5b2:	7d82      	ldrb	r2, [r0, #22]
    e5b4:	f88d 2000 	strb.w	r2, [sp]
    e5b8:	9a00      	ldr	r2, [sp, #0]
    e5ba:	9200      	str	r2, [sp, #0]
    e5bc:	f89d 2000 	ldrb.w	r2, [sp]
    e5c0:	b952      	cbnz	r2, e5d8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e5c2:	e004      	b.n	e5ce <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    e5c4:	f240 318e 	movw	r1, #910	; 0x38e
    e5c8:	2014      	movs	r0, #20
    e5ca:	f7f6 ff89 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5ce:	8880      	ldrh	r0, [r0, #4]
    e5d0:	4281      	cmp	r1, r0
    e5d2:	d101      	bne.n	e5d8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e5d4:	2000      	movs	r0, #0
    e5d6:	bd08      	pop	{r3, pc}
    e5d8:	2001      	movs	r0, #1
    e5da:	bd08      	pop	{r3, pc}

0000e5dc <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    e5dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e5e0:	8281      	strh	r1, [r0, #20]
    e5e2:	2100      	movs	r1, #0
    e5e4:	7581      	strb	r1, [r0, #22]
    e5e6:	4770      	bx	lr

0000e5e8 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    e5e8:	b510      	push	{r4, lr}
    e5ea:	8a81      	ldrh	r1, [r0, #20]
    e5ec:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e5f0:	3aff      	subs	r2, #255	; 0xff
    e5f2:	d004      	beq.n	e5fe <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    e5f4:	f240 316a 	movw	r1, #874	; 0x36a
    e5f8:	2014      	movs	r0, #20
    e5fa:	f7f6 ff71 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5fe:	88c1      	ldrh	r1, [r0, #6]
    e600:	8281      	strh	r1, [r0, #20]
    e602:	89c1      	ldrh	r1, [r0, #14]
    e604:	b109      	cbz	r1, e60a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    e606:	21ff      	movs	r1, #255	; 0xff
    e608:	e000      	b.n	e60c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    e60a:	2100      	movs	r1, #0
    e60c:	7581      	strb	r1, [r0, #22]
    e60e:	bd10      	pop	{r4, pc}

0000e610 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e614:	461d      	mov	r5, r3
    e616:	4616      	mov	r6, r2
    e618:	9f06      	ldr	r7, [sp, #24]
    e61a:	460b      	mov	r3, r1
    e61c:	4604      	mov	r4, r0
    e61e:	463a      	mov	r2, r7
    e620:	4629      	mov	r1, r5
    e622:	4630      	mov	r0, r6
    e624:	f000 f84f 	bl	e6c6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e628:	4283      	cmp	r3, r0
    e62a:	d201      	bcs.n	e630 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e62c:	21a8      	movs	r1, #168	; 0xa8
    e62e:	e018      	b.n	e662 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e630:	1ce0      	adds	r0, r4, #3
    e632:	f020 0103 	bic.w	r1, r0, #3
    e636:	4620      	mov	r0, r4
    e638:	42a1      	cmp	r1, r4
    e63a:	d001      	beq.n	e640 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    e63c:	21a9      	movs	r1, #169	; 0xa9
    e63e:	e010      	b.n	e662 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e640:	2224      	movs	r2, #36	; 0x24
    e642:	2100      	movs	r1, #0
    e644:	f7ff f94a 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e648:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e64c:	82a0      	strh	r0, [r4, #20]
    e64e:	19a8      	adds	r0, r5, r6
    e650:	1d80      	adds	r0, r0, #6
    e652:	4378      	muls	r0, r7
    e654:	b280      	uxth	r0, r0
    e656:	7725      	strb	r5, [r4, #28]
    e658:	8060      	strh	r0, [r4, #2]
    e65a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e65e:	d903      	bls.n	e668 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    e660:	21af      	movs	r1, #175	; 0xaf
    e662:	2014      	movs	r0, #20
    e664:	f7f6 ff3c 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e668:	8026      	strh	r6, [r4, #0]
    e66a:	2000      	movs	r0, #0
    e66c:	7760      	strb	r0, [r4, #29]
    e66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e672 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    e672:	6181      	str	r1, [r0, #24]
    e674:	6188      	str	r0, [r1, #24]
    e676:	4770      	bx	lr

0000e678 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e67c:	460b      	mov	r3, r1
    e67e:	4604      	mov	r4, r0
    e680:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e684:	8905      	ldrh	r5, [r0, #8]
    e686:	8946      	ldrh	r6, [r0, #10]
    e688:	8880      	ldrh	r0, [r0, #4]
    e68a:	f3c5 070e 	ubfx	r7, r5, #0, #15
    e68e:	4439      	add	r1, r7
    e690:	460f      	mov	r7, r1
    e692:	4285      	cmp	r5, r0
    e694:	d102      	bne.n	e69c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    e696:	2000      	movs	r0, #0
    e698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e69c:	b10a      	cbz	r2, e6a2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    e69e:	1cc8      	adds	r0, r1, #3
    e6a0:	6010      	str	r0, [r2, #0]
    e6a2:	b123      	cbz	r3, e6ae <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    e6a4:	7f22      	ldrb	r2, [r4, #28]
    e6a6:	1cf9      	adds	r1, r7, #3
    e6a8:	4618      	mov	r0, r3
    e6aa:	f7ff f89d 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e6ae:	883f      	ldrh	r7, [r7, #0]
    e6b0:	f104 0108 	add.w	r1, r4, #8
    e6b4:	4620      	mov	r0, r4
    e6b6:	f7ff fdaf 	bl	e218 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e6ba:	42b5      	cmp	r5, r6
    e6bc:	d101      	bne.n	e6c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    e6be:	8920      	ldrh	r0, [r4, #8]
    e6c0:	8160      	strh	r0, [r4, #10]
    e6c2:	4638      	mov	r0, r7
    e6c4:	e7e8      	b.n	e698 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000e6c6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e6c6:	4401      	add	r1, r0
    e6c8:	1d89      	adds	r1, r1, #6
    e6ca:	4351      	muls	r1, r2
    e6cc:	b28a      	uxth	r2, r1
    e6ce:	2100      	movs	r1, #0
    e6d0:	2845      	cmp	r0, #69	; 0x45
    e6d2:	d202      	bcs.n	e6da <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    e6d4:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    e6d8:	b281      	uxth	r1, r0
    e6da:	3224      	adds	r2, #36	; 0x24
    e6dc:	1850      	adds	r0, r2, r1
    e6de:	b280      	uxth	r0, r0
    e6e0:	4770      	bx	lr

0000e6e2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e6e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e6e6:	4688      	mov	r8, r1
    e6e8:	88c1      	ldrh	r1, [r0, #6]
    e6ea:	4604      	mov	r4, r0
    e6ec:	8900      	ldrh	r0, [r0, #8]
    e6ee:	f3c1 060e 	ubfx	r6, r1, #0, #15
    e6f2:	f104 0524 	add.w	r5, r4, #36	; 0x24
    e6f6:	f3c0 070e 	ubfx	r7, r0, #0, #15
    e6fa:	eb05 0906 	add.w	r9, r5, r6
    e6fe:	f7ff fdac 	bl	e25a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e702:	2200      	movs	r2, #0
    e704:	b998      	cbnz	r0, e72e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e706:	8820      	ldrh	r0, [r4, #0]
    e708:	2845      	cmp	r0, #69	; 0x45
    e70a:	d200      	bcs.n	e70e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e70c:	2045      	movs	r0, #69	; 0x45
    e70e:	42b7      	cmp	r7, r6
    e710:	d906      	bls.n	e720 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e712:	7f23      	ldrb	r3, [r4, #28]
    e714:	1bb9      	subs	r1, r7, r6
    e716:	1ac9      	subs	r1, r1, r3
    e718:	1f89      	subs	r1, r1, #6
    e71a:	4281      	cmp	r1, r0
    e71c:	da00      	bge.n	e720 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e71e:	4608      	mov	r0, r1
    e720:	89e1      	ldrh	r1, [r4, #14]
    e722:	b111      	cbz	r1, e72a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e724:	f8b9 3000 	ldrh.w	r3, [r9]
    e728:	1ac0      	subs	r0, r0, r3
    e72a:	4540      	cmp	r0, r8
    e72c:	da03      	bge.n	e736 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e72e:	8262      	strh	r2, [r4, #18]
    e730:	2000      	movs	r0, #0
    e732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e736:	7f20      	ldrb	r0, [r4, #28]
    e738:	4429      	add	r1, r5
    e73a:	1d80      	adds	r0, r0, #6
    e73c:	4430      	add	r0, r6
    e73e:	4408      	add	r0, r1
    e740:	f8a4 8012 	strh.w	r8, [r4, #18]
    e744:	1ec0      	subs	r0, r0, #3
    e746:	e7f4      	b.n	e732 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e748 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    e748:	2100      	movs	r1, #0
    e74a:	81c1      	strh	r1, [r0, #14]
    e74c:	8241      	strh	r1, [r0, #18]
    e74e:	7581      	strb	r1, [r0, #22]
    e750:	4770      	bx	lr

0000e752 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e752:	b570      	push	{r4, r5, r6, lr}
    e754:	2300      	movs	r3, #0
    e756:	f1a1 0208 	sub.w	r2, r1, #8
    e75a:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    e75e:	42a2      	cmp	r2, r4
    e760:	d304      	bcc.n	e76c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e762:	f240 11cd 	movw	r1, #461	; 0x1cd
    e766:	2015      	movs	r0, #21
    e768:	f7f6 feba 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e76c:	6802      	ldr	r2, [r0, #0]
    e76e:	b90a      	cbnz	r2, e774 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    e770:	e01e      	b.n	e7b0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e772:	4610      	mov	r0, r2
    e774:	6802      	ldr	r2, [r0, #0]
    e776:	8893      	ldrh	r3, [r2, #4]
    e778:	428b      	cmp	r3, r1
    e77a:	d002      	beq.n	e782 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    e77c:	6813      	ldr	r3, [r2, #0]
    e77e:	2b00      	cmp	r3, #0
    e780:	d1f7      	bne.n	e772 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    e782:	8894      	ldrh	r4, [r2, #4]
    e784:	4613      	mov	r3, r2
    e786:	428c      	cmp	r4, r1
    e788:	d101      	bne.n	e78e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    e78a:	6811      	ldr	r1, [r2, #0]
    e78c:	e00d      	b.n	e7aa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    e78e:	f101 0508 	add.w	r5, r1, #8
    e792:	b2ae      	uxth	r6, r5
    e794:	2500      	movs	r5, #0
    e796:	42b4      	cmp	r4, r6
    e798:	d309      	bcc.n	e7ae <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    e79a:	1a64      	subs	r4, r4, r1
    e79c:	4411      	add	r1, r2
    e79e:	600d      	str	r5, [r1, #0]
    e7a0:	808c      	strh	r4, [r1, #4]
    e7a2:	6802      	ldr	r2, [r0, #0]
    e7a4:	6812      	ldr	r2, [r2, #0]
    e7a6:	6002      	str	r2, [r0, #0]
    e7a8:	600a      	str	r2, [r1, #0]
    e7aa:	6001      	str	r1, [r0, #0]
    e7ac:	e000      	b.n	e7b0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    e7ae:	2300      	movs	r3, #0
    e7b0:	4618      	mov	r0, r3
    e7b2:	bd70      	pop	{r4, r5, r6, pc}

0000e7b4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e7b4:	b510      	push	{r4, lr}
    e7b6:	000c      	movs	r4, r1
    e7b8:	d004      	beq.n	e7c4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    e7ba:	2c08      	cmp	r4, #8
    e7bc:	d207      	bcs.n	e7ce <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e7be:	f240 1195 	movw	r1, #405	; 0x195
    e7c2:	e00a      	b.n	e7da <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    e7c4:	b108      	cbz	r0, e7ca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    e7c6:	2100      	movs	r1, #0
    e7c8:	6001      	str	r1, [r0, #0]
    e7ca:	2000      	movs	r0, #0
    e7cc:	bd10      	pop	{r4, pc}
    e7ce:	b158      	cbz	r0, e7e8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    e7d0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    e7d4:	d304      	bcc.n	e7e0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    e7d6:	f240 11a7 	movw	r1, #423	; 0x1a7
    e7da:	2015      	movs	r0, #21
    e7dc:	f7f6 fe80 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7e0:	b2a1      	uxth	r1, r4
    e7e2:	6800      	ldr	r0, [r0, #0]
    e7e4:	f000 f814 	bl	e810 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e7e8:	1d20      	adds	r0, r4, #4
    e7ea:	bd10      	pop	{r4, pc}

0000e7ec <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e7ec:	2100      	movs	r1, #0
    e7ee:	6802      	ldr	r2, [r0, #0]
    e7f0:	e003      	b.n	e7fa <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e7f2:	8893      	ldrh	r3, [r2, #4]
    e7f4:	6812      	ldr	r2, [r2, #0]
    e7f6:	4419      	add	r1, r3
    e7f8:	b289      	uxth	r1, r1
    e7fa:	2a00      	cmp	r2, #0
    e7fc:	d1f9      	bne.n	e7f2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e7fe:	f000 b807 	b.w	e810 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e802 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e802:	2300      	movs	r3, #0
    e804:	600b      	str	r3, [r1, #0]
    e806:	808a      	strh	r2, [r1, #4]
    e808:	6802      	ldr	r2, [r0, #0]
    e80a:	600a      	str	r2, [r1, #0]
    e80c:	6001      	str	r1, [r0, #0]
    e80e:	4770      	bx	lr
    e810:	2300      	movs	r3, #0
    e812:	6043      	str	r3, [r0, #4]
    e814:	1d02      	adds	r2, r0, #4
    e816:	8101      	strh	r1, [r0, #8]
    e818:	6002      	str	r2, [r0, #0]
    e81a:	4770      	bx	lr

0000e81c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    e81c:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    e820:	3bff      	subs	r3, #255	; 0xff
    e822:	d001      	beq.n	e828 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    e824:	2902      	cmp	r1, #2
    e826:	d301      	bcc.n	e82c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    e828:	2000      	movs	r0, #0
    e82a:	4770      	bx	lr
    e82c:	f7f7 b91e 	b.w	5a6c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e830:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e834:	3aff      	subs	r2, #255	; 0xff
    e836:	d001      	beq.n	e83c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    e838:	2902      	cmp	r1, #2
    e83a:	d301      	bcc.n	e840 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    e83c:	2000      	movs	r0, #0
    e83e:	4770      	bx	lr
    e840:	f7f7 b94e 	b.w	5ae0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000e844 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e844:	b570      	push	{r4, r5, r6, lr}
    e846:	4605      	mov	r5, r0
    e848:	460c      	mov	r4, r1
    e84a:	4608      	mov	r0, r1
    e84c:	f000 f9a9 	bl	eba2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e850:	b108      	cbz	r0, e856 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e852:	2010      	movs	r0, #16
    e854:	bd70      	pop	{r4, r5, r6, pc}
    e856:	2d02      	cmp	r5, #2
    e858:	d301      	bcc.n	e85e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    e85a:	2007      	movs	r0, #7
    e85c:	bd70      	pop	{r4, r5, r6, pc}
    e85e:	7025      	strb	r5, [r4, #0]
    e860:	2000      	movs	r0, #0
    e862:	8060      	strh	r0, [r4, #2]
    e864:	bd70      	pop	{r4, r5, r6, pc}
    e866:	b510      	push	{r4, lr}
    e868:	4604      	mov	r4, r0
    e86a:	f7f7 f985 	bl	5b78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    e86e:	42a0      	cmp	r0, r4
    e870:	d901      	bls.n	e876 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    e872:	2001      	movs	r0, #1
    e874:	bd10      	pop	{r4, pc}
    e876:	2000      	movs	r0, #0
    e878:	bd10      	pop	{r4, pc}
    e87a:	4770      	bx	lr

0000e87c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e87c:	b570      	push	{r4, r5, r6, lr}
    e87e:	460e      	mov	r6, r1
    e880:	461d      	mov	r5, r3
    e882:	4611      	mov	r1, r2
    e884:	f000 f813 	bl	e8ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    e888:	4604      	mov	r4, r0
    e88a:	4629      	mov	r1, r5
    e88c:	4630      	mov	r0, r6
    e88e:	f000 f804 	bl	e89a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    e892:	4420      	add	r0, r4
    e894:	1d00      	adds	r0, r0, #4
    e896:	b280      	uxth	r0, r0
    e898:	bd70      	pop	{r4, r5, r6, pc}
    e89a:	b510      	push	{r4, lr}
    e89c:	460a      	mov	r2, r1
    e89e:	2101      	movs	r1, #1
    e8a0:	f7ff ff11 	bl	e6c6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e8a4:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e8a8:	1cc0      	adds	r0, r0, #3
    e8aa:	4008      	ands	r0, r1
    e8ac:	bd10      	pop	{r4, pc}
    e8ae:	b510      	push	{r4, lr}
    e8b0:	460a      	mov	r2, r1
    e8b2:	210a      	movs	r1, #10
    e8b4:	f7ff ff07 	bl	e6c6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e8b8:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    e8bc:	1cc0      	adds	r0, r0, #3
    e8be:	4008      	ands	r0, r1
    e8c0:	bd10      	pop	{r4, pc}
    e8c2:	b109      	cbz	r1, e8c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    e8c4:	2100      	movs	r1, #0
    e8c6:	e000      	b.n	e8ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    e8c8:	2102      	movs	r1, #2
    e8ca:	1843      	adds	r3, r0, r1
    e8cc:	7d1a      	ldrb	r2, [r3, #20]
    e8ce:	2a02      	cmp	r2, #2
    e8d0:	d008      	beq.n	e8e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e8d2:	7d5b      	ldrb	r3, [r3, #21]
    e8d4:	2b02      	cmp	r3, #2
    e8d6:	d009      	beq.n	e8ec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e8d8:	2a03      	cmp	r2, #3
    e8da:	d003      	beq.n	e8e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    e8dc:	2b03      	cmp	r3, #3
    e8de:	d005      	beq.n	e8ec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    e8e0:	2000      	movs	r0, #0
    e8e2:	4770      	bx	lr
    e8e4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e8e8:	8b00      	ldrh	r0, [r0, #24]
    e8ea:	4770      	bx	lr
    e8ec:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e8f0:	8b40      	ldrh	r0, [r0, #26]
    e8f2:	4770      	bx	lr
    e8f4:	b109      	cbz	r1, e8fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    e8f6:	2100      	movs	r1, #0
    e8f8:	e000      	b.n	e8fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    e8fa:	2102      	movs	r1, #2
    e8fc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e900:	8b01      	ldrh	r1, [r0, #24]
    e902:	b911      	cbnz	r1, e90a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    e904:	8b40      	ldrh	r0, [r0, #26]
    e906:	2800      	cmp	r0, #0
    e908:	d000      	beq.n	e90c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    e90a:	2001      	movs	r0, #1
    e90c:	4770      	bx	lr
    e90e:	b538      	push	{r3, r4, r5, lr}
    e910:	7883      	ldrb	r3, [r0, #2]
    e912:	f88d 3000 	strb.w	r3, [sp]
    e916:	9b00      	ldr	r3, [sp, #0]
    e918:	9300      	str	r3, [sp, #0]
    e91a:	f89d 3000 	ldrb.w	r3, [sp]
    e91e:	b95b      	cbnz	r3, e938 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    e920:	2400      	movs	r4, #0
    e922:	b10a      	cbz	r2, e928 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    e924:	2300      	movs	r3, #0
    e926:	e000      	b.n	e92a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    e928:	2302      	movs	r3, #2
    e92a:	18c2      	adds	r2, r0, r3
    e92c:	7d15      	ldrb	r5, [r2, #20]
    e92e:	2d02      	cmp	r5, #2
    e930:	d004      	beq.n	e93c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    e932:	7d52      	ldrb	r2, [r2, #21]
    e934:	2a02      	cmp	r2, #2
    e936:	d004      	beq.n	e942 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    e938:	2000      	movs	r0, #0
    e93a:	bd38      	pop	{r3, r4, r5, pc}
    e93c:	461a      	mov	r2, r3
    e93e:	1c5b      	adds	r3, r3, #1
    e940:	e000      	b.n	e944 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    e942:	1c5a      	adds	r2, r3, #1
    e944:	b179      	cbz	r1, e966 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    e946:	18c5      	adds	r5, r0, r3
    e948:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e94c:	752c      	strb	r4, [r5, #20]
    e94e:	831c      	strh	r4, [r3, #24]
    e950:	2303      	movs	r3, #3
    e952:	1884      	adds	r4, r0, r2
    e954:	7523      	strb	r3, [r4, #20]
    e956:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e95a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    e95e:	685b      	ldr	r3, [r3, #4]
    e960:	600b      	str	r3, [r1, #0]
    e962:	8b00      	ldrh	r0, [r0, #24]
    e964:	8088      	strh	r0, [r1, #4]
    e966:	2001      	movs	r0, #1
    e968:	bd38      	pop	{r3, r4, r5, pc}
    e96a:	b510      	push	{r4, lr}
    e96c:	b109      	cbz	r1, e972 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    e96e:	2100      	movs	r1, #0
    e970:	e000      	b.n	e974 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    e972:	2102      	movs	r1, #2
    e974:	1843      	adds	r3, r0, r1
    e976:	7d1c      	ldrb	r4, [r3, #20]
    e978:	4294      	cmp	r4, r2
    e97a:	d103      	bne.n	e984 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    e97c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e980:	8b00      	ldrh	r0, [r0, #24]
    e982:	bd10      	pop	{r4, pc}
    e984:	7d5b      	ldrb	r3, [r3, #21]
    e986:	4293      	cmp	r3, r2
    e988:	d103      	bne.n	e992 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    e98a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e98e:	8b40      	ldrh	r0, [r0, #26]
    e990:	bd10      	pop	{r4, pc}
    e992:	2000      	movs	r0, #0
    e994:	bd10      	pop	{r4, pc}
    e996:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    e99a:	d201      	bcs.n	e9a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    e99c:	0841      	lsrs	r1, r0, #1
    e99e:	e000      	b.n	e9a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    e9a0:	21ff      	movs	r1, #255	; 0xff
    e9a2:	1a40      	subs	r0, r0, r1
    e9a4:	f240 6172 	movw	r1, #1650	; 0x672
    e9a8:	4288      	cmp	r0, r1
    e9aa:	db00      	blt.n	e9ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    e9ac:	4608      	mov	r0, r1
    e9ae:	b280      	uxth	r0, r0
    e9b0:	4770      	bx	lr

0000e9b2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    e9b2:	2101      	movs	r1, #1
    e9b4:	f7ff bf85 	b.w	e8c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000e9b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    e9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9bc:	4606      	mov	r6, r0
    e9be:	f342 0780 	sbfx	r7, r2, #2, #1
    e9c2:	7848      	ldrb	r0, [r1, #1]
    e9c4:	460c      	mov	r4, r1
    e9c6:	f022 0504 	bic.w	r5, r2, #4
    e9ca:	1c7f      	adds	r7, r7, #1
    e9cc:	b100      	cbz	r0, e9d0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    e9ce:	b90d      	cbnz	r5, e9d4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    e9d0:	4328      	orrs	r0, r5
    e9d2:	d104      	bne.n	e9de <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    e9d4:	b145      	cbz	r5, e9e8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    e9d6:	2100      	movs	r1, #0
    e9d8:	4620      	mov	r0, r4
    e9da:	f7f7 f9d7 	bl	5d8c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    e9de:	20ff      	movs	r0, #255	; 0xff
    e9e0:	70a0      	strb	r0, [r4, #2]
    e9e2:	b11f      	cbz	r7, e9ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    e9e4:	2000      	movs	r0, #0
    e9e6:	e002      	b.n	e9ee <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    e9e8:	2101      	movs	r1, #1
    e9ea:	e7f5      	b.n	e9d8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    e9ec:	2002      	movs	r0, #2
    e9ee:	1821      	adds	r1, r4, r0
    e9f0:	7d09      	ldrb	r1, [r1, #20]
    e9f2:	2903      	cmp	r1, #3
    e9f4:	d102      	bne.n	e9fc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e9f6:	2d02      	cmp	r5, #2
    e9f8:	d000      	beq.n	e9fc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e9fa:	1c40      	adds	r0, r0, #1
    e9fc:	1822      	adds	r2, r4, r0
    e9fe:	2101      	movs	r1, #1
    ea00:	7511      	strb	r1, [r2, #20]
    ea02:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    ea06:	2200      	movs	r2, #0
    ea08:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    ea0c:	830a      	strh	r2, [r1, #24]
    ea0e:	6840      	ldr	r0, [r0, #4]
    ea10:	70a2      	strb	r2, [r4, #2]
    ea12:	4631      	mov	r1, r6
    ea14:	f362 010f 	bfi	r1, r2, #0, #16
    ea18:	e9c6 0100 	strd	r0, r1, [r6]
    ea1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ea20 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    ea20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea24:	461e      	mov	r6, r3
    ea26:	4613      	mov	r3, r2
    ea28:	4604      	mov	r4, r0
    ea2a:	b109      	cbz	r1, ea30 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    ea2c:	2000      	movs	r0, #0
    ea2e:	e000      	b.n	ea32 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    ea30:	2002      	movs	r0, #2
    ea32:	21ff      	movs	r1, #255	; 0xff
    ea34:	70a1      	strb	r1, [r4, #2]
    ea36:	1821      	adds	r1, r4, r0
    ea38:	7d0a      	ldrb	r2, [r1, #20]
    ea3a:	2a01      	cmp	r2, #1
    ea3c:	d003      	beq.n	ea46 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    ea3e:	7d49      	ldrb	r1, [r1, #21]
    ea40:	2901      	cmp	r1, #1
    ea42:	d10c      	bne.n	ea5e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    ea44:	1c40      	adds	r0, r0, #1
    ea46:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    ea4a:	2700      	movs	r7, #0
    ea4c:	8b29      	ldrh	r1, [r5, #24]
    ea4e:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    ea52:	198a      	adds	r2, r1, r6
    ea54:	4562      	cmp	r2, ip
    ea56:	d905      	bls.n	ea64 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    ea58:	4420      	add	r0, r4
    ea5a:	832f      	strh	r7, [r5, #24]
    ea5c:	7507      	strb	r7, [r0, #20]
    ea5e:	2000      	movs	r0, #0
    ea60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    ea68:	4632      	mov	r2, r6
    ea6a:	6840      	ldr	r0, [r0, #4]
    ea6c:	4408      	add	r0, r1
    ea6e:	4619      	mov	r1, r3
    ea70:	f7fe feba 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea74:	8b28      	ldrh	r0, [r5, #24]
    ea76:	4430      	add	r0, r6
    ea78:	8328      	strh	r0, [r5, #24]
    ea7a:	70a7      	strb	r7, [r4, #2]
    ea7c:	2001      	movs	r0, #1
    ea7e:	e7ef      	b.n	ea60 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000ea80 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    ea80:	2202      	movs	r2, #2
    ea82:	2100      	movs	r1, #0
    ea84:	f7ff bf71 	b.w	e96a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000ea88 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    ea88:	b510      	push	{r4, lr}
    ea8a:	2101      	movs	r1, #1
    ea8c:	f7ff ff32 	bl	e8f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    ea90:	2800      	cmp	r0, #0
    ea92:	d000      	beq.n	ea96 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    ea94:	2001      	movs	r0, #1
    ea96:	bd10      	pop	{r4, pc}

0000ea98 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    ea98:	2201      	movs	r2, #1
    ea9a:	f7ff bf38 	b.w	e90e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000ea9e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    ea9e:	2200      	movs	r2, #0
    eaa0:	f7ff bf35 	b.w	e90e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000eaa4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    eaa4:	b570      	push	{r4, r5, r6, lr}
    eaa6:	b109      	cbz	r1, eaac <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    eaa8:	2300      	movs	r3, #0
    eaaa:	e000      	b.n	eaae <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    eaac:	2302      	movs	r3, #2
    eaae:	21ff      	movs	r1, #255	; 0xff
    eab0:	7081      	strb	r1, [r0, #2]
    eab2:	18c1      	adds	r1, r0, r3
    eab4:	2402      	movs	r4, #2
    eab6:	7d0d      	ldrb	r5, [r1, #20]
    eab8:	2d01      	cmp	r5, #1
    eaba:	d007      	beq.n	eacc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    eabc:	7d4d      	ldrb	r5, [r1, #21]
    eabe:	2d01      	cmp	r5, #1
    eac0:	d009      	beq.n	ead6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    eac2:	f44f 718b 	mov.w	r1, #278	; 0x116
    eac6:	2009      	movs	r0, #9
    eac8:	f7f6 fd0a 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eacc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ead0:	831a      	strh	r2, [r3, #24]
    ead2:	750c      	strb	r4, [r1, #20]
    ead4:	e003      	b.n	eade <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    ead6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    eada:	835a      	strh	r2, [r3, #26]
    eadc:	754c      	strb	r4, [r1, #21]
    eade:	2100      	movs	r1, #0
    eae0:	7081      	strb	r1, [r0, #2]
    eae2:	bd70      	pop	{r4, r5, r6, pc}

0000eae4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    eae4:	2101      	movs	r1, #1
    eae6:	7001      	strb	r1, [r0, #0]
    eae8:	4770      	bx	lr

0000eaea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    eaea:	2201      	movs	r2, #1
    eaec:	4611      	mov	r1, r2
    eaee:	f7ff bf3c 	b.w	e96a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000eaf2 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    eaf2:	2201      	movs	r2, #1
    eaf4:	2100      	movs	r1, #0
    eaf6:	f7ff bf38 	b.w	e96a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000eafa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    eafa:	2100      	movs	r1, #0
    eafc:	f7ff bee1 	b.w	e8c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    eb00:	2800      	cmp	r0, #0
    eb02:	db09      	blt.n	eb18 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    eb04:	f000 021f 	and.w	r2, r0, #31
    eb08:	2101      	movs	r1, #1
    eb0a:	4091      	lsls	r1, r2
    eb0c:	0940      	lsrs	r0, r0, #5
    eb0e:	0080      	lsls	r0, r0, #2
    eb10:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eb14:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    eb18:	4770      	bx	lr
    eb1a:	2800      	cmp	r0, #0
    eb1c:	db0d      	blt.n	eb3a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    eb1e:	f000 021f 	and.w	r2, r0, #31
    eb22:	2101      	movs	r1, #1
    eb24:	4091      	lsls	r1, r2
    eb26:	0940      	lsrs	r0, r0, #5
    eb28:	0080      	lsls	r0, r0, #2
    eb2a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eb2e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    eb32:	f3bf 8f4f 	dsb	sy
    eb36:	f3bf 8f6f 	isb	sy
    eb3a:	4770      	bx	lr
    eb3c:	b510      	push	{r4, lr}
    eb3e:	200e      	movs	r0, #14
    eb40:	f7ff ffeb 	bl	eb1a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    eb44:	200e      	movs	r0, #14
    eb46:	f7ff ffdb 	bl	eb00 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    eb4a:	200f      	movs	r0, #15
    eb4c:	f7ff ffe5 	bl	eb1a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    eb50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb54:	200f      	movs	r0, #15
    eb56:	f7ff bfd3 	b.w	eb00 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    eb5a:	2800      	cmp	r0, #0
    eb5c:	db09      	blt.n	eb72 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    eb5e:	f000 021f 	and.w	r2, r0, #31
    eb62:	2101      	movs	r1, #1
    eb64:	4091      	lsls	r1, r2
    eb66:	0940      	lsrs	r0, r0, #5
    eb68:	0080      	lsls	r0, r0, #2
    eb6a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    eb6e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    eb72:	4770      	bx	lr
    eb74:	5840      	ldr	r0, [r0, r1]
    eb76:	2800      	cmp	r0, #0
    eb78:	d000      	beq.n	eb7c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    eb7a:	2001      	movs	r0, #1
    eb7c:	4770      	bx	lr

0000eb7e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    eb7e:	b510      	push	{r4, lr}
    eb80:	4604      	mov	r4, r0
    eb82:	4620      	mov	r0, r4
    eb84:	f7f7 fa02 	bl	5f8c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    eb88:	2811      	cmp	r0, #17
    eb8a:	d0fa      	beq.n	eb82 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    eb8c:	bd10      	pop	{r4, pc}

0000eb8e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    eb8e:	b510      	push	{r4, lr}
    eb90:	f7ff fff5 	bl	eb7e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    eb94:	2800      	cmp	r0, #0
    eb96:	d003      	beq.n	eba0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    eb98:	21a0      	movs	r1, #160	; 0xa0
    eb9a:	201d      	movs	r0, #29
    eb9c:	f7f6 fca0 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eba0:	bd10      	pop	{r4, pc}

0000eba2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    eba2:	b108      	cbz	r0, eba8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    eba4:	2000      	movs	r0, #0
    eba6:	4770      	bx	lr
    eba8:	2001      	movs	r0, #1
    ebaa:	4770      	bx	lr

0000ebac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    ebac:	f7f7 bb40 	b.w	6230 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000ebb0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    ebb0:	f7f7 bb2e 	b.w	6210 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000ebb4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    ebb4:	b510      	push	{r4, lr}
    ebb6:	4050      	eors	r0, r2
    ebb8:	780a      	ldrb	r2, [r1, #0]
    ebba:	781c      	ldrb	r4, [r3, #0]
    ebbc:	4062      	eors	r2, r4
    ebbe:	4410      	add	r0, r2
    ebc0:	784a      	ldrb	r2, [r1, #1]
    ebc2:	785c      	ldrb	r4, [r3, #1]
    ebc4:	4062      	eors	r2, r4
    ebc6:	4410      	add	r0, r2
    ebc8:	788a      	ldrb	r2, [r1, #2]
    ebca:	789c      	ldrb	r4, [r3, #2]
    ebcc:	4062      	eors	r2, r4
    ebce:	4410      	add	r0, r2
    ebd0:	78ca      	ldrb	r2, [r1, #3]
    ebd2:	78dc      	ldrb	r4, [r3, #3]
    ebd4:	4062      	eors	r2, r4
    ebd6:	4410      	add	r0, r2
    ebd8:	790a      	ldrb	r2, [r1, #4]
    ebda:	791c      	ldrb	r4, [r3, #4]
    ebdc:	7949      	ldrb	r1, [r1, #5]
    ebde:	4062      	eors	r2, r4
    ebe0:	4410      	add	r0, r2
    ebe2:	795a      	ldrb	r2, [r3, #5]
    ebe4:	4051      	eors	r1, r2
    ebe6:	42c1      	cmn	r1, r0
    ebe8:	d101      	bne.n	ebee <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    ebea:	2001      	movs	r0, #1
    ebec:	bd10      	pop	{r4, pc}
    ebee:	2000      	movs	r0, #0
    ebf0:	bd10      	pop	{r4, pc}

0000ebf2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    ebf2:	b510      	push	{r4, lr}
    ebf4:	2900      	cmp	r1, #0
    ebf6:	4604      	mov	r4, r0
    ebf8:	f04f 0106 	mov.w	r1, #6
    ebfc:	d002      	beq.n	ec04 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    ebfe:	f7f6 fd0d 	bl	561c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ec02:	e001      	b.n	ec08 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    ec04:	f7f6 fd18 	bl	5638 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ec08:	7960      	ldrb	r0, [r4, #5]
    ec0a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ec0e:	7160      	strb	r0, [r4, #5]
    ec10:	bd10      	pop	{r4, pc}

0000ec12 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    ec12:	4770      	bx	lr

0000ec14 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    ec14:	b530      	push	{r4, r5, lr}
    ec16:	460c      	mov	r4, r1
    ec18:	4605      	mov	r5, r0
    ec1a:	b08d      	sub	sp, #52	; 0x34
    ec1c:	f04f 0103 	mov.w	r1, #3
    ec20:	f104 0003 	add.w	r0, r4, #3
    ec24:	b112      	cbz	r2, ec2c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    ec26:	f7f6 fcf9 	bl	561c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    ec2a:	e001      	b.n	ec30 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    ec2c:	f7f6 fd04 	bl	5638 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ec30:	7960      	ldrb	r0, [r4, #5]
    ec32:	220d      	movs	r2, #13
    ec34:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ec38:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    ec3c:	7160      	strb	r0, [r4, #5]
    ec3e:	2100      	movs	r1, #0
    ec40:	a804      	add	r0, sp, #16
    ec42:	f7fe fe4b 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ec46:	78e0      	ldrb	r0, [r4, #3]
    ec48:	f88d 001f 	strb.w	r0, [sp, #31]
    ec4c:	7920      	ldrb	r0, [r4, #4]
    ec4e:	f88d 001e 	strb.w	r0, [sp, #30]
    ec52:	7960      	ldrb	r0, [r4, #5]
    ec54:	f88d 001d 	strb.w	r0, [sp, #29]
    ec58:	2210      	movs	r2, #16
    ec5a:	4629      	mov	r1, r5
    ec5c:	4668      	mov	r0, sp
    ec5e:	f7fe fdc3 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ec62:	4668      	mov	r0, sp
    ec64:	f7ff ff93 	bl	eb8e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ec68:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    ec6c:	7020      	strb	r0, [r4, #0]
    ec6e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    ec72:	7060      	strb	r0, [r4, #1]
    ec74:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    ec78:	70a0      	strb	r0, [r4, #2]
    ec7a:	b00d      	add	sp, #52	; 0x34
    ec7c:	bd30      	pop	{r4, r5, pc}

0000ec7e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    ec7e:	f7f7 beb3 	b.w	69e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>
    ec82:	07c1      	lsls	r1, r0, #31
    ec84:	d001      	beq.n	ec8a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    ec86:	2001      	movs	r0, #1
    ec88:	4770      	bx	lr
    ec8a:	0780      	lsls	r0, r0, #30
    ec8c:	d501      	bpl.n	ec92 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    ec8e:	2002      	movs	r0, #2
    ec90:	4770      	bx	lr
    ec92:	2000      	movs	r0, #0
    ec94:	4770      	bx	lr
    ec96:	b510      	push	{r4, lr}
    ec98:	2801      	cmp	r0, #1
    ec9a:	d008      	beq.n	ecae <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    ec9c:	2802      	cmp	r0, #2
    ec9e:	d004      	beq.n	ecaa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    eca0:	f240 31f3 	movw	r1, #1011	; 0x3f3
    eca4:	2006      	movs	r0, #6
    eca6:	f7f6 fc1b 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecaa:	2001      	movs	r0, #1
    ecac:	bd10      	pop	{r4, pc}
    ecae:	2000      	movs	r0, #0
    ecb0:	bd10      	pop	{r4, pc}
    ecb2:	2900      	cmp	r1, #0
    ecb4:	d004      	beq.n	ecc0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    ecb6:	2801      	cmp	r0, #1
    ecb8:	d003      	beq.n	ecc2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    ecba:	2901      	cmp	r1, #1
    ecbc:	d001      	beq.n	ecc2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    ecbe:	2002      	movs	r0, #2
    ecc0:	4770      	bx	lr
    ecc2:	2001      	movs	r0, #1
    ecc4:	4770      	bx	lr
    ecc6:	f7ff bc4b 	b.w	e560 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000ecca <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    ecca:	2101      	movs	r1, #1
    eccc:	f7f8 b986 	b.w	6fdc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000ecd0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    ecd0:	b510      	push	{r4, lr}
    ecd2:	f002 fc2f 	bl	11534 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    ecd6:	b118      	cbz	r0, ece0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    ecd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ecdc:	f7fc bef6 	b.w	bacc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    ece0:	20ff      	movs	r0, #255	; 0xff
    ece2:	bd10      	pop	{r4, pc}

0000ece4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    ece4:	b510      	push	{r4, lr}
    ece6:	f7f8 f9c1 	bl	706c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ecea:	2810      	cmp	r0, #16
    ecec:	d003      	beq.n	ecf6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    ecee:	f7f8 f98d 	bl	700c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ecf2:	2810      	cmp	r0, #16
    ecf4:	d100      	bne.n	ecf8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    ecf6:	2008      	movs	r0, #8
    ecf8:	bd10      	pop	{r4, pc}

0000ecfa <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    ecfa:	b510      	push	{r4, lr}
    ecfc:	f7f8 f9b6 	bl	706c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ed00:	2810      	cmp	r0, #16
    ed02:	d003      	beq.n	ed0c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    ed04:	f7f8 fa10 	bl	7128 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    ed08:	2001      	movs	r0, #1
    ed0a:	bd10      	pop	{r4, pc}
    ed0c:	2000      	movs	r0, #0
    ed0e:	bd10      	pop	{r4, pc}

0000ed10 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    ed10:	b570      	push	{r4, r5, r6, lr}
    ed12:	460e      	mov	r6, r1
    ed14:	b08c      	sub	sp, #48	; 0x30
    ed16:	4614      	mov	r4, r2
    ed18:	4601      	mov	r1, r0
    ed1a:	461d      	mov	r5, r3
    ed1c:	2210      	movs	r2, #16
    ed1e:	4668      	mov	r0, sp
    ed20:	f000 f928 	bl	ef74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ed24:	2210      	movs	r2, #16
    ed26:	4631      	mov	r1, r6
    ed28:	a804      	add	r0, sp, #16
    ed2a:	f000 f923 	bl	ef74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ed2e:	4668      	mov	r0, sp
    ed30:	f7ff ff2d 	bl	eb8e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ed34:	a908      	add	r1, sp, #32
    ed36:	f04f 0210 	mov.w	r2, #16
    ed3a:	4628      	mov	r0, r5
    ed3c:	b11c      	cbz	r4, ed46 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    ed3e:	f000 f919 	bl	ef74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ed42:	b00c      	add	sp, #48	; 0x30
    ed44:	bd70      	pop	{r4, r5, r6, pc}
    ed46:	f7fe fd4f 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ed4a:	e7fa      	b.n	ed42 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    ed4c:	b510      	push	{r4, lr}
    ed4e:	460c      	mov	r4, r1
    ed50:	2100      	movs	r1, #0
    ed52:	f7ff fd6d 	bl	e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ed56:	6060      	str	r0, [r4, #4]
    ed58:	b118      	cbz	r0, ed62 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    ed5a:	2001      	movs	r0, #1
    ed5c:	7020      	strb	r0, [r4, #0]
    ed5e:	2000      	movs	r0, #0
    ed60:	bd10      	pop	{r4, pc}
    ed62:	2002      	movs	r0, #2
    ed64:	bd10      	pop	{r4, pc}

0000ed66 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ed66:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ed6a:	4348      	muls	r0, r1
    ed6c:	4770      	bx	lr

0000ed6e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    ed6e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ed72:	fbb0 f0f1 	udiv	r0, r0, r1
    ed76:	b280      	uxth	r0, r0
    ed78:	4770      	bx	lr

0000ed7a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    ed7a:	b570      	push	{r4, r5, r6, lr}
    ed7c:	4604      	mov	r4, r0
    ed7e:	4290      	cmp	r0, r2
    ed80:	d20b      	bcs.n	ed9a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    ed82:	1b10      	subs	r0, r2, r4
    ed84:	2865      	cmp	r0, #101	; 0x65
    ed86:	d200      	bcs.n	ed8a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    ed88:	2065      	movs	r0, #101	; 0x65
    ed8a:	1825      	adds	r5, r4, r0
    ed8c:	428d      	cmp	r5, r1
    ed8e:	d803      	bhi.n	ed98 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    ed90:	2103      	movs	r1, #3
    ed92:	f7f3 fe1f 	bl	29d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ed96:	b108      	cbz	r0, ed9c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    ed98:	4620      	mov	r0, r4
    ed9a:	bd70      	pop	{r4, r5, r6, pc}
    ed9c:	4628      	mov	r0, r5
    ed9e:	bd70      	pop	{r4, r5, r6, pc}

0000eda0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    eda0:	b510      	push	{r4, lr}
    eda2:	f1a2 030f 	sub.w	r3, r2, #15
    eda6:	290c      	cmp	r1, #12
    eda8:	d244      	bcs.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edaa:	e8df f001 	tbb	[pc, r1]
    edae:	0806      	.short	0x0806
    edb0:	1815120d 	.word	0x1815120d
    edb4:	4127241c 	.word	0x4127241c
    edb8:	312a      	.short	0x312a
    edba:	b3c2      	cbz	r2, ee2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    edbc:	e03a      	b.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edbe:	2a07      	cmp	r2, #7
    edc0:	d03a      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    edc2:	2a08      	cmp	r2, #8
    edc4:	d038      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    edc6:	e035      	b.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edc8:	2a0c      	cmp	r2, #12
    edca:	d035      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    edcc:	2a0b      	cmp	r2, #11
    edce:	d033      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    edd0:	e030      	b.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edd2:	2a0d      	cmp	r2, #13
    edd4:	d030      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    edd6:	e02d      	b.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edd8:	2b0c      	cmp	r3, #12
    edda:	d92d      	bls.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eddc:	e02a      	b.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edde:	3a10      	subs	r2, #16
    ede0:	2a0b      	cmp	r2, #11
    ede2:	d929      	bls.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ede4:	e026      	b.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ede6:	2b03      	cmp	r3, #3
    ede8:	d926      	bls.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    edea:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    edee:	b308      	cbz	r0, ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edf0:	2a1b      	cmp	r2, #27
    edf2:	d921      	bls.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    edf4:	e01e      	b.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edf6:	2a04      	cmp	r2, #4
    edf8:	d01e      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    edfa:	e01b      	b.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    edfc:	2a06      	cmp	r2, #6
    edfe:	d01b      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee00:	e018      	b.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee02:	2a1c      	cmp	r2, #28
    ee04:	d018      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee06:	2a1d      	cmp	r2, #29
    ee08:	d016      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee0a:	2a1e      	cmp	r2, #30
    ee0c:	d014      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee0e:	e011      	b.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee10:	2a1f      	cmp	r2, #31
    ee12:	d011      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee14:	2a20      	cmp	r2, #32
    ee16:	d00f      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee18:	2a21      	cmp	r2, #33	; 0x21
    ee1a:	d00d      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee1c:	2a22      	cmp	r2, #34	; 0x22
    ee1e:	d00b      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee20:	2a23      	cmp	r2, #35	; 0x23
    ee22:	d009      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee24:	2a24      	cmp	r2, #36	; 0x24
    ee26:	d007      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee28:	2a27      	cmp	r2, #39	; 0x27
    ee2a:	d005      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee2c:	e002      	b.n	ee34 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ee2e:	e003      	b.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee30:	2a0e      	cmp	r2, #14
    ee32:	d001      	beq.n	ee38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ee34:	2000      	movs	r0, #0
    ee36:	bd10      	pop	{r4, pc}
    ee38:	2001      	movs	r0, #1
    ee3a:	bd10      	pop	{r4, pc}

0000ee3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ee3c:	280c      	cmp	r0, #12
    ee3e:	d013      	beq.n	ee68 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee40:	280b      	cmp	r0, #11
    ee42:	d011      	beq.n	ee68 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee44:	280d      	cmp	r0, #13
    ee46:	d00f      	beq.n	ee68 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee48:	281f      	cmp	r0, #31
    ee4a:	d00d      	beq.n	ee68 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee4c:	2820      	cmp	r0, #32
    ee4e:	d00b      	beq.n	ee68 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee50:	2821      	cmp	r0, #33	; 0x21
    ee52:	d009      	beq.n	ee68 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee54:	2822      	cmp	r0, #34	; 0x22
    ee56:	d007      	beq.n	ee68 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee58:	2823      	cmp	r0, #35	; 0x23
    ee5a:	d005      	beq.n	ee68 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee5c:	2824      	cmp	r0, #36	; 0x24
    ee5e:	d003      	beq.n	ee68 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee60:	2827      	cmp	r0, #39	; 0x27
    ee62:	d001      	beq.n	ee68 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ee64:	2000      	movs	r0, #0
    ee66:	4770      	bx	lr
    ee68:	2001      	movs	r0, #1
    ee6a:	4770      	bx	lr

0000ee6c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ee6c:	f011 0f0c 	tst.w	r1, #12
    ee70:	d018      	beq.n	eea4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    ee72:	074a      	lsls	r2, r1, #29
    ee74:	f44f 7116 	mov.w	r1, #600	; 0x258
    ee78:	2a00      	cmp	r2, #0
    ee7a:	da02      	bge.n	ee82 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    ee7c:	f04f 0210 	mov.w	r2, #16
    ee80:	e001      	b.n	ee86 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    ee82:	f04f 0240 	mov.w	r2, #64	; 0x40
    ee86:	da01      	bge.n	ee8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    ee88:	f04f 0196 	mov.w	r1, #150	; 0x96
    ee8c:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    ee90:	eba0 0301 	sub.w	r3, r0, r1
    ee94:	4288      	cmp	r0, r1
    ee96:	d903      	bls.n	eea0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ee98:	fb93 f0f2 	sdiv	r0, r3, r2
    ee9c:	b280      	uxth	r0, r0
    ee9e:	4770      	bx	lr
    eea0:	2000      	movs	r0, #0
    eea2:	4770      	bx	lr
    eea4:	2902      	cmp	r1, #2
    eea6:	d008      	beq.n	eeba <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    eea8:	2870      	cmp	r0, #112	; 0x70
    eeaa:	d9f9      	bls.n	eea0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    eeac:	3870      	subs	r0, #112	; 0x70
    eeae:	17c1      	asrs	r1, r0, #31
    eeb0:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    eeb4:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    eeb8:	4770      	bx	lr
    eeba:	283c      	cmp	r0, #60	; 0x3c
    eebc:	d9f0      	bls.n	eea0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    eebe:	383c      	subs	r0, #60	; 0x3c
    eec0:	17c1      	asrs	r1, r0, #31
    eec2:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    eec6:	f3c0 008f 	ubfx	r0, r0, #2, #16
    eeca:	4770      	bx	lr

0000eecc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    eecc:	6809      	ldr	r1, [r1, #0]
    eece:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    eed2:	4770      	bx	lr

0000eed4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    eed4:	07c1      	lsls	r1, r0, #31
    eed6:	d001      	beq.n	eedc <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    eed8:	2001      	movs	r0, #1
    eeda:	4770      	bx	lr
    eedc:	0781      	lsls	r1, r0, #30
    eede:	d501      	bpl.n	eee4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    eee0:	2002      	movs	r0, #2
    eee2:	4770      	bx	lr
    eee4:	0740      	lsls	r0, r0, #29
    eee6:	d501      	bpl.n	eeec <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    eee8:	2008      	movs	r0, #8
    eeea:	4770      	bx	lr
    eeec:	2000      	movs	r0, #0
    eeee:	4770      	bx	lr

0000eef0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    eef0:	b510      	push	{r4, lr}
    eef2:	f640 12c4 	movw	r2, #2500	; 0x9c4
    eef6:	2901      	cmp	r1, #1
    eef8:	d006      	beq.n	ef08 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    eefa:	2902      	cmp	r1, #2
    eefc:	d005      	beq.n	ef0a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    eefe:	f240 31ba 	movw	r1, #954	; 0x3ba
    ef02:	2029      	movs	r0, #41	; 0x29
    ef04:	f7f6 faec 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef08:	b108      	cbz	r0, ef0e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    ef0a:	4610      	mov	r0, r2
    ef0c:	bd10      	pop	{r4, pc}
    ef0e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ef12:	bd10      	pop	{r4, pc}

0000ef14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    ef14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef18:	4607      	mov	r7, r0
    ef1a:	460e      	mov	r6, r1
    ef1c:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    ef20:	f7f4 f92e 	bl	3180 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    ef24:	b198      	cbz	r0, ef4e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    ef26:	b31e      	cbz	r6, ef70 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    ef28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    ef2c:	1b40      	subs	r0, r0, r5
    ef2e:	2300      	movs	r3, #0
    ef30:	eb61 0104 	sbc.w	r1, r1, r4
    ef34:	461a      	mov	r2, r3
    ef36:	1a1b      	subs	r3, r3, r0
    ef38:	418a      	sbcs	r2, r1
    ef3a:	da19      	bge.n	ef70 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    ef3c:	1c42      	adds	r2, r0, #1
    ef3e:	f171 0100 	sbcs.w	r1, r1, #0
    ef42:	db07      	blt.n	ef54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    ef44:	f240 2136 	movw	r1, #566	; 0x236
    ef48:	2029      	movs	r0, #41	; 0x29
    ef4a:	f7f6 fac9 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef4e:	f44f 710b 	mov.w	r1, #556	; 0x22c
    ef52:	e7f9      	b.n	ef48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    ef54:	4430      	add	r0, r6
    ef56:	1e40      	subs	r0, r0, #1
    ef58:	fbb0 f1f6 	udiv	r1, r0, r6
    ef5c:	fb01 f006 	mul.w	r0, r1, r6
    ef60:	1828      	adds	r0, r5, r0
    ef62:	f144 0400 	adc.w	r4, r4, #0
    ef66:	e9c7 0404 	strd	r0, r4, [r7, #16]
    ef6a:	4608      	mov	r0, r1
    ef6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef70:	2000      	movs	r0, #0
    ef72:	e7fb      	b.n	ef6c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000ef74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    ef74:	b530      	push	{r4, r5, lr}
    ef76:	4613      	mov	r3, r2
    ef78:	e006      	b.n	ef88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    ef7a:	18cc      	adds	r4, r1, r3
    ef7c:	1ad5      	subs	r5, r2, r3
    ef7e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    ef82:	1e5b      	subs	r3, r3, #1
    ef84:	5544      	strb	r4, [r0, r5]
    ef86:	b2db      	uxtb	r3, r3
    ef88:	2b00      	cmp	r3, #0
    ef8a:	d1f6      	bne.n	ef7a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    ef8c:	bd30      	pop	{r4, r5, pc}

0000ef8e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    ef8e:	b538      	push	{r3, r4, r5, lr}
    ef90:	4605      	mov	r5, r0
    ef92:	460c      	mov	r4, r1
    ef94:	4668      	mov	r0, sp
    ef96:	f7fd fa69 	bl	c46c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    ef9a:	b310      	cbz	r0, efe2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    ef9c:	f99d 0000 	ldrsb.w	r0, [sp]
    efa0:	7260      	strb	r0, [r4, #9]
    efa2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    efa6:	72a1      	strb	r1, [r4, #10]
    efa8:	f994 100b 	ldrsb.w	r1, [r4, #11]
    efac:	2200      	movs	r2, #0
    efae:	1a41      	subs	r1, r0, r1
    efb0:	d500      	bpl.n	efb4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    efb2:	4249      	negs	r1, r1
    efb4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    efb8:	428b      	cmp	r3, r1
    efba:	dc10      	bgt.n	efde <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    efbc:	2bff      	cmp	r3, #255	; 0xff
    efbe:	d00e      	beq.n	efde <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    efc0:	7b21      	ldrb	r1, [r4, #12]
    efc2:	1c49      	adds	r1, r1, #1
    efc4:	b2c9      	uxtb	r1, r1
    efc6:	7321      	strb	r1, [r4, #12]
    efc8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    efcc:	4299      	cmp	r1, r3
    efce:	d802      	bhi.n	efd6 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    efd0:	7ae1      	ldrb	r1, [r4, #11]
    efd2:	297f      	cmp	r1, #127	; 0x7f
    efd4:	d103      	bne.n	efde <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    efd6:	72e0      	strb	r0, [r4, #11]
    efd8:	2000      	movs	r0, #0
    efda:	7320      	strb	r0, [r4, #12]
    efdc:	2201      	movs	r2, #1
    efde:	4610      	mov	r0, r2
    efe0:	bd38      	pop	{r3, r4, r5, pc}
    efe2:	207f      	movs	r0, #127	; 0x7f
    efe4:	7260      	strb	r0, [r4, #9]
    efe6:	2000      	movs	r0, #0
    efe8:	bd38      	pop	{r3, r4, r5, pc}

0000efea <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    efea:	2300      	movs	r3, #0
    efec:	6303      	str	r3, [r0, #48]	; 0x30
    efee:	8702      	strh	r2, [r0, #56]	; 0x38
    eff0:	f240 2371 	movw	r3, #625	; 0x271
    eff4:	435a      	muls	r2, r3
    eff6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    effa:	1e52      	subs	r2, r2, #1
    effc:	fbb2 f1f1 	udiv	r1, r2, r1
    f000:	6341      	str	r1, [r0, #52]	; 0x34
    f002:	4770      	bx	lr

0000f004 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    f004:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f008:	4607      	mov	r7, r0
    f00a:	4690      	mov	r8, r2
    f00c:	468b      	mov	fp, r1
    f00e:	2601      	movs	r6, #1
    f010:	4608      	mov	r0, r1
    f012:	f000 f94a 	bl	f2aa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    f016:	4682      	mov	sl, r0
    f018:	4658      	mov	r0, fp
    f01a:	f000 f952 	bl	f2c2 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    f01e:	4681      	mov	r9, r0
    f020:	f7ff ff58 	bl	eed4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    f024:	4604      	mov	r4, r0
    f026:	4650      	mov	r0, sl
    f028:	f7ff ff54 	bl	eed4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    f02c:	4605      	mov	r5, r0
    f02e:	ea54 0005 	orrs.w	r0, r4, r5
    f032:	d100      	bne.n	f036 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    f034:	2600      	movs	r6, #0
    f036:	f7fc fccb 	bl	b9d0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f03a:	ea10 0f09 	tst.w	r0, r9
    f03e:	d100      	bne.n	f042 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    f040:	2400      	movs	r4, #0
    f042:	f7fc fcc5 	bl	b9d0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f046:	ea10 0f0a 	tst.w	r0, sl
    f04a:	d100      	bne.n	f04e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    f04c:	2500      	movs	r5, #0
    f04e:	f897 006e 	ldrb.w	r0, [r7, #110]	; 0x6e
    f052:	42a0      	cmp	r0, r4
    f054:	d100      	bne.n	f058 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    f056:	2400      	movs	r4, #0
    f058:	f888 4000 	strb.w	r4, [r8]
    f05c:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
    f060:	42a8      	cmp	r0, r5
    f062:	d100      	bne.n	f066 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    f064:	2500      	movs	r5, #0
    f066:	f888 5001 	strb.w	r5, [r8, #1]
    f06a:	b974      	cbnz	r4, f08a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f06c:	b96d      	cbnz	r5, f08a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f06e:	4658      	mov	r0, fp
    f070:	f000 f925 	bl	f2be <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    f074:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
    f078:	1a40      	subs	r0, r0, r1
    f07a:	b200      	sxth	r0, r0
    f07c:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f080:	4288      	cmp	r0, r1
    f082:	dc01      	bgt.n	f088 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    f084:	2800      	cmp	r0, #0
    f086:	dc00      	bgt.n	f08a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    f088:	2600      	movs	r6, #0
    f08a:	4630      	mov	r0, r6
    f08c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000f090 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    f090:	f240 41e2 	movw	r1, #1250	; 0x4e2
    f094:	4348      	muls	r0, r1
    f096:	4770      	bx	lr

0000f098 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    f098:	f240 2171 	movw	r1, #625	; 0x271
    f09c:	fb10 f001 	smulbb	r0, r0, r1
    f0a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f0a4:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    f0a8:	4770      	bx	lr

0000f0aa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    f0aa:	b510      	push	{r4, lr}
    f0ac:	2300      	movs	r3, #0
    f0ae:	461a      	mov	r2, r3
    f0b0:	e003      	b.n	f0ba <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    f0b2:	5c84      	ldrb	r4, [r0, r2]
    f0b4:	4323      	orrs	r3, r4
    f0b6:	1c52      	adds	r2, r2, #1
    f0b8:	b2d2      	uxtb	r2, r2
    f0ba:	428a      	cmp	r2, r1
    f0bc:	d3f9      	bcc.n	f0b2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    f0be:	b10b      	cbz	r3, f0c4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    f0c0:	2000      	movs	r0, #0
    f0c2:	bd10      	pop	{r4, pc}
    f0c4:	2001      	movs	r0, #1
    f0c6:	bd10      	pop	{r4, pc}

0000f0c8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    f0c8:	b510      	push	{r4, lr}
    f0ca:	4604      	mov	r4, r0
    f0cc:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    f0d0:	b108      	cbz	r0, f0d6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    f0d2:	2825      	cmp	r0, #37	; 0x25
    f0d4:	d901      	bls.n	f0da <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    f0d6:	2012      	movs	r0, #18
    f0d8:	bd10      	pop	{r4, pc}
    f0da:	b12a      	cbz	r2, f0e8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    f0dc:	7da0      	ldrb	r0, [r4, #22]
    f0de:	b128      	cbz	r0, f0ec <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    f0e0:	2801      	cmp	r0, #1
    f0e2:	d009      	beq.n	f0f8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    f0e4:	201f      	movs	r0, #31
    f0e6:	bd10      	pop	{r4, pc}
    f0e8:	2000      	movs	r0, #0
    f0ea:	bd10      	pop	{r4, pc}
    f0ec:	4620      	mov	r0, r4
    f0ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0f2:	4611      	mov	r1, r2
    f0f4:	f7f8 b90e 	b.w	7314 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    f0f8:	88a2      	ldrh	r2, [r4, #4]
    f0fa:	6949      	ldr	r1, [r1, #20]
    f0fc:	f104 0016 	add.w	r0, r4, #22
    f100:	f7f8 f8b4 	bl	726c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    f104:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    f108:	e7ee      	b.n	f0e8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000f10a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    f10a:	b530      	push	{r4, r5, lr}
    f10c:	1c42      	adds	r2, r0, #1
    f10e:	428a      	cmp	r2, r1
    f110:	d004      	beq.n	f11c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    f112:	680a      	ldr	r2, [r1, #0]
    f114:	f8c0 2001 	str.w	r2, [r0, #1]
    f118:	7909      	ldrb	r1, [r1, #4]
    f11a:	7141      	strb	r1, [r0, #5]
    f11c:	7941      	ldrb	r1, [r0, #5]
    f11e:	f001 011f 	and.w	r1, r1, #31
    f122:	7141      	strb	r1, [r0, #5]
    f124:	2100      	movs	r1, #0
    f126:	72c1      	strb	r1, [r0, #11]
    f128:	1843      	adds	r3, r0, r1
    f12a:	1c49      	adds	r1, r1, #1
    f12c:	785c      	ldrb	r4, [r3, #1]
    f12e:	b2c9      	uxtb	r1, r1
    f130:	f004 0201 	and.w	r2, r4, #1
    f134:	0864      	lsrs	r4, r4, #1
    f136:	f004 0501 	and.w	r5, r4, #1
    f13a:	4415      	add	r5, r2
    f13c:	0862      	lsrs	r2, r4, #1
    f13e:	f002 0401 	and.w	r4, r2, #1
    f142:	442c      	add	r4, r5
    f144:	0852      	lsrs	r2, r2, #1
    f146:	f002 0501 	and.w	r5, r2, #1
    f14a:	442c      	add	r4, r5
    f14c:	0852      	lsrs	r2, r2, #1
    f14e:	f002 0501 	and.w	r5, r2, #1
    f152:	442c      	add	r4, r5
    f154:	0852      	lsrs	r2, r2, #1
    f156:	f002 0501 	and.w	r5, r2, #1
    f15a:	442c      	add	r4, r5
    f15c:	0852      	lsrs	r2, r2, #1
    f15e:	f002 0501 	and.w	r5, r2, #1
    f162:	442c      	add	r4, r5
    f164:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    f168:	719a      	strb	r2, [r3, #6]
    f16a:	7ac3      	ldrb	r3, [r0, #11]
    f16c:	2905      	cmp	r1, #5
    f16e:	441a      	add	r2, r3
    f170:	72c2      	strb	r2, [r0, #11]
    f172:	d3d9      	bcc.n	f128 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    f174:	bd30      	pop	{r4, r5, pc}
    f176:	b570      	push	{r4, r5, r6, lr}
    f178:	f8d0 201f 	ldr.w	r2, [r0, #31]
    f17c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    f180:	f012 0fff 	tst.w	r2, #255	; 0xff
    f184:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    f188:	d108      	bne.n	f19c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f18a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    f18e:	b92c      	cbnz	r4, f19c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f190:	f3c2 4407 	ubfx	r4, r2, #16, #8
    f194:	b914      	cbnz	r4, f19c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f196:	0e12      	lsrs	r2, r2, #24
    f198:	d100      	bne.n	f19c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f19a:	b35b      	cbz	r3, f1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f19c:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    f1a0:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    f1a4:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    f1a8:	7d83      	ldrb	r3, [r0, #22]
    f1aa:	b141      	cbz	r1, f1be <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f1ac:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f1b0:	d905      	bls.n	f1be <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f1b2:	f640 5107 	movw	r1, #3335	; 0xd07
    f1b6:	428a      	cmp	r2, r1
    f1b8:	d801      	bhi.n	f1be <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f1ba:	2101      	movs	r1, #1
    f1bc:	e000      	b.n	f1c0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    f1be:	2100      	movs	r1, #0
    f1c0:	7846      	ldrb	r6, [r0, #1]
    f1c2:	2e22      	cmp	r6, #34	; 0x22
    f1c4:	d116      	bne.n	f1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f1c6:	b959      	cbnz	r1, f1e0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    f1c8:	1f91      	subs	r1, r2, #6
    f1ca:	f640 467a 	movw	r6, #3194	; 0xc7a
    f1ce:	42b1      	cmp	r1, r6
    f1d0:	d810      	bhi.n	f1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f1d2:	b17b      	cbz	r3, f1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f1d4:	2b08      	cmp	r3, #8
    f1d6:	d80d      	bhi.n	f1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f1d8:	4293      	cmp	r3, r2
    f1da:	d20b      	bcs.n	f1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f1dc:	4294      	cmp	r4, r2
    f1de:	d809      	bhi.n	f1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f1e0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f1e4:	d206      	bcs.n	f1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f1e6:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    f1ea:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    f1ee:	d801      	bhi.n	f1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f1f0:	2001      	movs	r0, #1
    f1f2:	bd70      	pop	{r4, r5, r6, pc}
    f1f4:	2000      	movs	r0, #0
    f1f6:	bd70      	pop	{r4, r5, r6, pc}

0000f1f8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    f1f8:	b570      	push	{r4, r5, r6, lr}
    f1fa:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    f1fe:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    f202:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    f206:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    f20a:	88c0      	ldrh	r0, [r0, #6]
    f20c:	b131      	cbz	r1, f21c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    f20e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f212:	d903      	bls.n	f21c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    f214:	f640 5107 	movw	r1, #3335	; 0xd07
    f218:	428a      	cmp	r2, r1
    f21a:	d90b      	bls.n	f234 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    f21c:	1f91      	subs	r1, r2, #6
    f21e:	f640 467a 	movw	r6, #3194	; 0xc7a
    f222:	42b1      	cmp	r1, r6
    f224:	d80e      	bhi.n	f244 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f226:	b16b      	cbz	r3, f244 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f228:	2b08      	cmp	r3, #8
    f22a:	d80b      	bhi.n	f244 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f22c:	4293      	cmp	r3, r2
    f22e:	d209      	bcs.n	f244 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f230:	4294      	cmp	r4, r2
    f232:	d807      	bhi.n	f244 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f234:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f238:	d204      	bcs.n	f244 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f23a:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    f23e:	d801      	bhi.n	f244 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f240:	2001      	movs	r0, #1
    f242:	bd70      	pop	{r4, r5, r6, pc}
    f244:	2000      	movs	r0, #0
    f246:	bd70      	pop	{r4, r5, r6, pc}

0000f248 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    f248:	6842      	ldr	r2, [r0, #4]
    f24a:	600a      	str	r2, [r1, #0]
    f24c:	7a00      	ldrb	r0, [r0, #8]
    f24e:	7108      	strb	r0, [r1, #4]
    f250:	4770      	bx	lr

0000f252 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    f252:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f256:	4770      	bx	lr

0000f258 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    f258:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    f25c:	4770      	bx	lr

0000f25e <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    f25e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f262:	4770      	bx	lr

0000f264 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    f264:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    f268:	4770      	bx	lr

0000f26a <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    f26a:	8980      	ldrh	r0, [r0, #12]
    f26c:	8008      	strh	r0, [r1, #0]
    f26e:	4770      	bx	lr

0000f270 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    f270:	f8d0 0016 	ldr.w	r0, [r0, #22]
    f274:	6008      	str	r0, [r1, #0]
    f276:	4770      	bx	lr

0000f278 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    f278:	6842      	ldr	r2, [r0, #4]
    f27a:	600a      	str	r2, [r1, #0]
    f27c:	6880      	ldr	r0, [r0, #8]
    f27e:	6048      	str	r0, [r1, #4]
    f280:	4770      	bx	lr

0000f282 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    f282:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    f286:	600a      	str	r2, [r1, #0]
    f288:	6840      	ldr	r0, [r0, #4]
    f28a:	6048      	str	r0, [r1, #4]
    f28c:	4770      	bx	lr

0000f28e <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    f28e:	6842      	ldr	r2, [r0, #4]
    f290:	600a      	str	r2, [r1, #0]
    f292:	6880      	ldr	r0, [r0, #8]
    f294:	6048      	str	r0, [r1, #4]
    f296:	4770      	bx	lr

0000f298 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    f298:	6842      	ldr	r2, [r0, #4]
    f29a:	600a      	str	r2, [r1, #0]
    f29c:	6880      	ldr	r0, [r0, #8]
    f29e:	6048      	str	r0, [r1, #4]
    f2a0:	4770      	bx	lr

0000f2a2 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    f2a2:	7800      	ldrb	r0, [r0, #0]
    f2a4:	f000 0003 	and.w	r0, r0, #3
    f2a8:	4770      	bx	lr

0000f2aa <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    f2aa:	7900      	ldrb	r0, [r0, #4]
    f2ac:	4770      	bx	lr

0000f2ae <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    f2ae:	8880      	ldrh	r0, [r0, #4]
    f2b0:	4770      	bx	lr

0000f2b2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    f2b2:	88c0      	ldrh	r0, [r0, #6]
    f2b4:	4770      	bx	lr

0000f2b6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    f2b6:	8900      	ldrh	r0, [r0, #8]
    f2b8:	4770      	bx	lr

0000f2ba <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    f2ba:	8940      	ldrh	r0, [r0, #10]
    f2bc:	4770      	bx	lr

0000f2be <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    f2be:	88c0      	ldrh	r0, [r0, #6]
    f2c0:	4770      	bx	lr

0000f2c2 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    f2c2:	7940      	ldrb	r0, [r0, #5]
    f2c4:	4770      	bx	lr

0000f2c6 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    f2c6:	7900      	ldrb	r0, [r0, #4]
    f2c8:	4770      	bx	lr

0000f2ca <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    f2ca:	7900      	ldrb	r0, [r0, #4]
    f2cc:	4770      	bx	lr

0000f2ce <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    f2ce:	8901      	ldrh	r1, [r0, #8]
    f2d0:	291b      	cmp	r1, #27
    f2d2:	d30c      	bcc.n	f2ee <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f2d4:	8941      	ldrh	r1, [r0, #10]
    f2d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    f2da:	4291      	cmp	r1, r2
    f2dc:	d307      	bcc.n	f2ee <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f2de:	8881      	ldrh	r1, [r0, #4]
    f2e0:	291b      	cmp	r1, #27
    f2e2:	d304      	bcc.n	f2ee <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f2e4:	88c0      	ldrh	r0, [r0, #6]
    f2e6:	4290      	cmp	r0, r2
    f2e8:	d301      	bcc.n	f2ee <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f2ea:	2001      	movs	r0, #1
    f2ec:	4770      	bx	lr
    f2ee:	2000      	movs	r0, #0
    f2f0:	4770      	bx	lr

0000f2f2 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    f2f2:	b510      	push	{r4, lr}
    f2f4:	29fb      	cmp	r1, #251	; 0xfb
    f2f6:	d904      	bls.n	f302 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    f2f8:	f240 51fe 	movw	r1, #1534	; 0x5fe
    f2fc:	202a      	movs	r0, #42	; 0x2a
    f2fe:	f7f6 f8ef 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f302:	7041      	strb	r1, [r0, #1]
    f304:	bd10      	pop	{r4, pc}

0000f306 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    f306:	7901      	ldrb	r1, [r0, #4]
    f308:	0749      	lsls	r1, r1, #29
    f30a:	d004      	beq.n	f316 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f30c:	7940      	ldrb	r0, [r0, #5]
    f30e:	0740      	lsls	r0, r0, #29
    f310:	d001      	beq.n	f316 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f312:	2001      	movs	r0, #1
    f314:	4770      	bx	lr
    f316:	2000      	movs	r0, #0
    f318:	4770      	bx	lr

0000f31a <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    f31a:	7901      	ldrb	r1, [r0, #4]
    f31c:	7940      	ldrb	r0, [r0, #5]
    f31e:	f001 0107 	and.w	r1, r1, #7
    f322:	1e4a      	subs	r2, r1, #1
    f324:	f000 0007 	and.w	r0, r0, #7
    f328:	4011      	ands	r1, r2
    f32a:	1e42      	subs	r2, r0, #1
    f32c:	4010      	ands	r0, r2
    f32e:	4301      	orrs	r1, r0
    f330:	d001      	beq.n	f336 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x1c>
    f332:	2000      	movs	r0, #0
    f334:	4770      	bx	lr
    f336:	2001      	movs	r0, #1
    f338:	4770      	bx	lr

0000f33a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    f33a:	7900      	ldrb	r0, [r0, #4]
    f33c:	4770      	bx	lr

0000f33e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    f33e:	7940      	ldrb	r0, [r0, #5]
    f340:	4770      	bx	lr

0000f342 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    f342:	7101      	strb	r1, [r0, #4]
    f344:	4770      	bx	lr

0000f346 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    f346:	7141      	strb	r1, [r0, #5]
    f348:	4770      	bx	lr

0000f34a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    f34a:	b510      	push	{r4, lr}
    f34c:	2a1b      	cmp	r2, #27
    f34e:	d904      	bls.n	f35a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    f350:	f240 4127 	movw	r1, #1063	; 0x427
    f354:	202a      	movs	r0, #42	; 0x2a
    f356:	f7f6 f8c3 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f35a:	7042      	strb	r2, [r0, #1]
    f35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f360:	1cc0      	adds	r0, r0, #3
    f362:	f7fe ba41 	b.w	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000f366 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    f366:	6809      	ldr	r1, [r1, #0]
    f368:	60c1      	str	r1, [r0, #12]
    f36a:	4770      	bx	lr

0000f36c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    f36c:	680a      	ldr	r2, [r1, #0]
    f36e:	6042      	str	r2, [r0, #4]
    f370:	6849      	ldr	r1, [r1, #4]
    f372:	6081      	str	r1, [r0, #8]
    f374:	4770      	bx	lr

0000f376 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    f376:	680a      	ldr	r2, [r1, #0]
    f378:	6042      	str	r2, [r0, #4]
    f37a:	6849      	ldr	r1, [r1, #4]
    f37c:	6081      	str	r1, [r0, #8]
    f37e:	4770      	bx	lr

0000f380 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    f380:	680a      	ldr	r2, [r1, #0]
    f382:	6042      	str	r2, [r0, #4]
    f384:	6849      	ldr	r1, [r1, #4]
    f386:	6081      	str	r1, [r0, #8]
    f388:	4770      	bx	lr

0000f38a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    f38a:	7802      	ldrb	r2, [r0, #0]
    f38c:	f001 0103 	and.w	r1, r1, #3
    f390:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f394:	430a      	orrs	r2, r1
    f396:	7002      	strb	r2, [r0, #0]
    f398:	4770      	bx	lr

0000f39a <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    f39a:	7101      	strb	r1, [r0, #4]
    f39c:	0a09      	lsrs	r1, r1, #8
    f39e:	7141      	strb	r1, [r0, #5]
    f3a0:	4770      	bx	lr

0000f3a2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    f3a2:	7181      	strb	r1, [r0, #6]
    f3a4:	0a09      	lsrs	r1, r1, #8
    f3a6:	71c1      	strb	r1, [r0, #7]
    f3a8:	4770      	bx	lr

0000f3aa <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    f3aa:	7201      	strb	r1, [r0, #8]
    f3ac:	0a09      	lsrs	r1, r1, #8
    f3ae:	7241      	strb	r1, [r0, #9]
    f3b0:	4770      	bx	lr

0000f3b2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    f3b2:	7281      	strb	r1, [r0, #10]
    f3b4:	0a09      	lsrs	r1, r1, #8
    f3b6:	72c1      	strb	r1, [r0, #11]
    f3b8:	4770      	bx	lr

0000f3ba <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    f3ba:	7802      	ldrb	r2, [r0, #0]
    f3bc:	f002 020f 	and.w	r2, r2, #15
    f3c0:	2a03      	cmp	r2, #3
    f3c2:	d003      	beq.n	f3cc <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    f3c4:	2a05      	cmp	r2, #5
    f3c6:	d104      	bne.n	f3d2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    f3c8:	f7ff bed5 	b.w	f176 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    f3cc:	7840      	ldrb	r0, [r0, #1]
    f3ce:	280c      	cmp	r0, #12
    f3d0:	d001      	beq.n	f3d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    f3d2:	2000      	movs	r0, #0
    f3d4:	4770      	bx	lr
    f3d6:	2001      	movs	r0, #1
    f3d8:	4770      	bx	lr

0000f3da <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    f3da:	b570      	push	{r4, r5, r6, lr}
    f3dc:	4614      	mov	r4, r2
    f3de:	4605      	mov	r5, r0
    f3e0:	2a1f      	cmp	r2, #31
    f3e2:	d903      	bls.n	f3ec <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    f3e4:	21b5      	movs	r1, #181	; 0xb5
    f3e6:	202a      	movs	r0, #42	; 0x2a
    f3e8:	f7f6 f87a 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3ec:	f105 0009 	add.w	r0, r5, #9
    f3f0:	f7fe f9fa 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f3f4:	1da4      	adds	r4, r4, #6
    f3f6:	706c      	strb	r4, [r5, #1]
    f3f8:	bd70      	pop	{r4, r5, r6, pc}

0000f3fa <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    f3fa:	b510      	push	{r4, lr}
    f3fc:	7802      	ldrb	r2, [r0, #0]
    f3fe:	f001 030f 	and.w	r3, r1, #15
    f402:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    f406:	431a      	orrs	r2, r3
    f408:	7002      	strb	r2, [r0, #0]
    f40a:	2907      	cmp	r1, #7
    f40c:	d20c      	bcs.n	f428 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    f40e:	e8df f001 	tbb	[pc, r1]
    f412:	0604      	.short	0x0604
    f414:	08040604 	.word	0x08040604
    f418:	0004      	.short	0x0004
    f41a:	2106      	movs	r1, #6
    f41c:	e002      	b.n	f424 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f41e:	210c      	movs	r1, #12
    f420:	e000      	b.n	f424 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f422:	2122      	movs	r1, #34	; 0x22
    f424:	7041      	strb	r1, [r0, #1]
    f426:	bd10      	pop	{r4, pc}
    f428:	216f      	movs	r1, #111	; 0x6f
    f42a:	202a      	movs	r0, #42	; 0x2a
    f42c:	f7f6 f858 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f430 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    f430:	680a      	ldr	r2, [r1, #0]
    f432:	f840 2f09 	str.w	r2, [r0, #9]!
    f436:	8889      	ldrh	r1, [r1, #4]
    f438:	8081      	strh	r1, [r0, #4]
    f43a:	4770      	bx	lr

0000f43c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    f43c:	7802      	ldrb	r2, [r0, #0]
    f43e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f442:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    f446:	7002      	strb	r2, [r0, #0]
    f448:	4770      	bx	lr

0000f44a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    f44a:	680a      	ldr	r2, [r1, #0]
    f44c:	f840 2f03 	str.w	r2, [r0, #3]!
    f450:	8889      	ldrh	r1, [r1, #4]
    f452:	8081      	strh	r1, [r0, #4]
    f454:	4770      	bx	lr

0000f456 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    f456:	7802      	ldrb	r2, [r0, #0]
    f458:	2340      	movs	r3, #64	; 0x40
    f45a:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    f45e:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    f462:	430a      	orrs	r2, r1
    f464:	7002      	strb	r2, [r0, #0]
    f466:	4770      	bx	lr

0000f468 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    f468:	b570      	push	{r4, r5, r6, lr}
    f46a:	4614      	mov	r4, r2
    f46c:	4605      	mov	r5, r0
    f46e:	2a1f      	cmp	r2, #31
    f470:	d903      	bls.n	f47a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    f472:	21d7      	movs	r1, #215	; 0xd7
    f474:	202a      	movs	r0, #42	; 0x2a
    f476:	f7f6 f833 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f47a:	f105 0009 	add.w	r0, r5, #9
    f47e:	f7fe f9b3 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f482:	1da4      	adds	r4, r4, #6
    f484:	706c      	strb	r4, [r5, #1]
    f486:	bd70      	pop	{r4, r5, r6, pc}

0000f488 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    f488:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f48c:	4604      	mov	r4, r0
    f48e:	2000      	movs	r0, #0
    f490:	f7f6 fa1c 	bl	58cc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f494:	2600      	movs	r6, #0
    f496:	4605      	mov	r5, r0
    f498:	4637      	mov	r7, r6
    f49a:	e00e      	b.n	f4ba <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    f49c:	8820      	ldrh	r0, [r4, #0]
    f49e:	1c40      	adds	r0, r0, #1
    f4a0:	b280      	uxth	r0, r0
    f4a2:	8020      	strh	r0, [r4, #0]
    f4a4:	42a8      	cmp	r0, r5
    f4a6:	d300      	bcc.n	f4aa <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    f4a8:	8027      	strh	r7, [r4, #0]
    f4aa:	8820      	ldrh	r0, [r4, #0]
    f4ac:	4669      	mov	r1, sp
    f4ae:	f7ff fc4d 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f4b2:	2800      	cmp	r0, #0
    f4b4:	d007      	beq.n	f4c6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    f4b6:	1c76      	adds	r6, r6, #1
    f4b8:	b2f6      	uxtb	r6, r6
    f4ba:	42ae      	cmp	r6, r5
    f4bc:	d3ee      	bcc.n	f49c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    f4be:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f4c2:	8020      	strh	r0, [r4, #0]
    f4c4:	2012      	movs	r0, #18
    f4c6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000f4ca <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    f4ca:	6841      	ldr	r1, [r0, #4]
    f4cc:	2200      	movs	r2, #0
    f4ce:	f891 31d2 	ldrb.w	r3, [r1, #466]	; 0x1d2
    f4d2:	2b00      	cmp	r3, #0
    f4d4:	d004      	beq.n	f4e0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    f4d6:	f881 21d2 	strb.w	r2, [r1, #466]	; 0x1d2
    f4da:	6840      	ldr	r0, [r0, #4]
    f4dc:	f000 bd08 	b.w	fef0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f4e0:	4770      	bx	lr

0000f4e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    f4e2:	b510      	push	{r4, lr}
    f4e4:	7901      	ldrb	r1, [r0, #4]
    f4e6:	b119      	cbz	r1, f4f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    f4e8:	2901      	cmp	r1, #1
    f4ea:	d006      	beq.n	f4fa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    f4ec:	2000      	movs	r0, #0
    f4ee:	bd10      	pop	{r4, pc}
    f4f0:	8842      	ldrh	r2, [r0, #2]
    f4f2:	6883      	ldr	r3, [r0, #8]
    f4f4:	8800      	ldrh	r0, [r0, #0]
    f4f6:	2102      	movs	r1, #2
    f4f8:	e003      	b.n	f502 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    f4fa:	8842      	ldrh	r2, [r0, #2]
    f4fc:	6883      	ldr	r3, [r0, #8]
    f4fe:	8800      	ldrh	r0, [r0, #0]
    f500:	2101      	movs	r1, #1
    f502:	f7f7 ffb9 	bl	7478 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    f506:	b908      	cbnz	r0, f50c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    f508:	f7f8 f80c 	bl	7524 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    f50c:	2001      	movs	r0, #1
    f50e:	bd10      	pop	{r4, pc}
    f510:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f514:	460e      	mov	r6, r1
    f516:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    f51a:	4617      	mov	r7, r2
    f51c:	39ff      	subs	r1, #255	; 0xff
    f51e:	d014      	beq.n	f54a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f520:	8030      	strh	r0, [r6, #0]
    f522:	2100      	movs	r1, #0
    f524:	7171      	strb	r1, [r6, #5]
    f526:	f7f6 fc03 	bl	5d30 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f52a:	4604      	mov	r4, r0
    f52c:	f7fe ffa3 	bl	e476 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f530:	0005      	movs	r5, r0
    f532:	d00a      	beq.n	f54a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f534:	4620      	mov	r0, r4
    f536:	4629      	mov	r1, r5
    f538:	aa01      	add	r2, sp, #4
    f53a:	f7fe ffbf 	bl	e4bc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f53e:	8070      	strh	r0, [r6, #2]
    f540:	b130      	cbz	r0, f550 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    f542:	28fb      	cmp	r0, #251	; 0xfb
    f544:	d906      	bls.n	f554 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    f546:	21ae      	movs	r1, #174	; 0xae
    f548:	e026      	b.n	f598 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f54a:	2000      	movs	r0, #0
    f54c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f550:	21ad      	movs	r1, #173	; 0xad
    f552:	e021      	b.n	f598 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f554:	9801      	ldr	r0, [sp, #4]
    f556:	f7ff fea4 	bl	f2a2 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    f55a:	2801      	cmp	r0, #1
    f55c:	d003      	beq.n	f566 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f55e:	2802      	cmp	r0, #2
    f560:	d001      	beq.n	f566 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f562:	21bd      	movs	r1, #189	; 0xbd
    f564:	e018      	b.n	f598 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f566:	7130      	strb	r0, [r6, #4]
    f568:	4629      	mov	r1, r5
    f56a:	8873      	ldrh	r3, [r6, #2]
    f56c:	2503      	movs	r5, #3
    f56e:	4620      	mov	r0, r4
    f570:	463a      	mov	r2, r7
    f572:	9500      	str	r5, [sp, #0]
    f574:	f7fe fe7f 	bl	e276 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    f578:	4620      	mov	r0, r4
    f57a:	60b7      	str	r7, [r6, #8]
    f57c:	f7fe ff3f 	bl	e3fe <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f580:	b138      	cbz	r0, f592 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    f582:	2100      	movs	r1, #0
    f584:	4620      	mov	r0, r4
    f586:	460a      	mov	r2, r1
    f588:	f7ff f876 	bl	e678 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f58c:	b118      	cbz	r0, f596 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    f58e:	2001      	movs	r0, #1
    f590:	e7dc      	b.n	f54c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    f592:	21cd      	movs	r1, #205	; 0xcd
    f594:	e000      	b.n	f598 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f596:	21d2      	movs	r1, #210	; 0xd2
    f598:	202b      	movs	r0, #43	; 0x2b
    f59a:	f7f5 ffa1 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f59e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    f59e:	f7f8 b9bf 	b.w	7920 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    f5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5a6:	460c      	mov	r4, r1
    f5a8:	b180      	cbz	r0, f5cc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    f5aa:	2700      	movs	r7, #0
    f5ac:	4606      	mov	r6, r0
    f5ae:	f500 7596 	add.w	r5, r0, #300	; 0x12c
    f5b2:	2a10      	cmp	r2, #16
    f5b4:	d060      	beq.n	f678 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xda>
    f5b6:	dc0c      	bgt.n	f5d2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    f5b8:	f1a2 0205 	sub.w	r2, r2, #5
    f5bc:	2a08      	cmp	r2, #8
    f5be:	d210      	bcs.n	f5e2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    f5c0:	e8df f002 	tbb	[pc, r2]
    f5c4:	0f0f124e 	.word	0x0f0f124e
    f5c8:	540f2033 	.word	0x540f2033
    f5cc:	f44f 7112 	mov.w	r1, #584	; 0x248
    f5d0:	e034      	b.n	f63c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f5d2:	2a11      	cmp	r2, #17
    f5d4:	d072      	beq.n	f6bc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    f5d6:	2a18      	cmp	r2, #24
    f5d8:	d068      	beq.n	f6ac <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x10e>
    f5da:	2a1a      	cmp	r2, #26
    f5dc:	d057      	beq.n	f68e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xf0>
    f5de:	2a1b      	cmp	r2, #27
    f5e0:	d060      	beq.n	f6a4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x106>
    f5e2:	f240 2175 	movw	r1, #629	; 0x275
    f5e6:	e029      	b.n	f63c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f5e8:	7067      	strb	r7, [r4, #1]
    f5ea:	2007      	movs	r0, #7
    f5ec:	7020      	strb	r0, [r4, #0]
    f5ee:	8537      	strh	r7, [r6, #40]	; 0x28
    f5f0:	f855 0f80 	ldr.w	r0, [r5, #128]!
    f5f4:	6060      	str	r0, [r4, #4]
    f5f6:	6868      	ldr	r0, [r5, #4]
    f5f8:	60a0      	str	r0, [r4, #8]
    f5fa:	8928      	ldrh	r0, [r5, #8]
    f5fc:	81a0      	strh	r0, [r4, #12]
    f5fe:	7127      	strb	r7, [r4, #4]
    f600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f604:	8830      	ldrh	r0, [r6, #0]
    f606:	f7f6 fb93 	bl	5d30 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f60a:	4680      	mov	r8, r0
    f60c:	f7fe ffcb 	bl	e5a6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    f610:	b110      	cbz	r0, f618 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x7a>
    f612:	f240 11b9 	movw	r1, #441	; 0x1b9
    f616:	e011      	b.n	f63c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x9e>
    f618:	7067      	strb	r7, [r4, #1]
    f61a:	200c      	movs	r0, #12
    f61c:	7020      	strb	r0, [r4, #0]
    f61e:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
    f622:	7120      	strb	r0, [r4, #4]
    f624:	8830      	ldrh	r0, [r6, #0]
    f626:	80e0      	strh	r0, [r4, #6]
    f628:	e015      	b.n	f656 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xb8>
    f62a:	8830      	ldrh	r0, [r6, #0]
    f62c:	f7f6 fb80 	bl	5d30 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f630:	4680      	mov	r8, r0
    f632:	f7fe ffb8 	bl	e5a6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    f636:	b120      	cbz	r0, f642 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    f638:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    f63c:	2010      	movs	r0, #16
    f63e:	f7f5 ff4f 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f642:	7067      	strb	r7, [r4, #1]
    f644:	200b      	movs	r0, #11
    f646:	7020      	strb	r0, [r4, #0]
    f648:	f815 0f94 	ldrb.w	r0, [r5, #148]!
    f64c:	7120      	strb	r0, [r4, #4]
    f64e:	8830      	ldrh	r0, [r6, #0]
    f650:	80e0      	strh	r0, [r4, #6]
    f652:	7928      	ldrb	r0, [r5, #4]
    f654:	7220      	strb	r0, [r4, #8]
    f656:	4640      	mov	r0, r8
    f658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f65c:	f7fe bfbe 	b.w	e5dc <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f660:	7067      	strb	r7, [r4, #1]
    f662:	2006      	movs	r0, #6
    f664:	7020      	strb	r0, [r4, #0]
    f666:	f855 0f6a 	ldr.w	r0, [r5, #106]!
    f66a:	e00a      	b.n	f682 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe4>
    f66c:	7067      	strb	r7, [r4, #1]
    f66e:	200e      	movs	r0, #14
    f670:	7020      	strb	r0, [r4, #0]
    f672:	8830      	ldrh	r0, [r6, #0]
    f674:	8088      	strh	r0, [r1, #4]
    f676:	e7c3      	b.n	f600 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f678:	7067      	strb	r7, [r4, #1]
    f67a:	2012      	movs	r0, #18
    f67c:	7020      	strb	r0, [r4, #0]
    f67e:	f855 0f22 	ldr.w	r0, [r5, #34]!
    f682:	6060      	str	r0, [r4, #4]
    f684:	6868      	ldr	r0, [r5, #4]
    f686:	60a0      	str	r0, [r4, #8]
    f688:	68a8      	ldr	r0, [r5, #8]
    f68a:	60e0      	str	r0, [r4, #12]
    f68c:	e7b8      	b.n	f600 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f68e:	7067      	strb	r7, [r4, #1]
    f690:	2018      	movs	r0, #24
    f692:	7020      	strb	r0, [r4, #0]
    f694:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    f696:	6060      	str	r0, [r4, #4]
    f698:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    f69a:	60a0      	str	r0, [r4, #8]
    f69c:	f8b5 0040 	ldrh.w	r0, [r5, #64]	; 0x40
    f6a0:	81a0      	strh	r0, [r4, #12]
    f6a2:	e7ad      	b.n	f600 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f6a4:	2019      	movs	r0, #25
    f6a6:	7020      	strb	r0, [r4, #0]
    f6a8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    f6aa:	e004      	b.n	f6b6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x118>
    f6ac:	7067      	strb	r7, [r4, #1]
    f6ae:	2016      	movs	r0, #22
    f6b0:	7020      	strb	r0, [r4, #0]
    f6b2:	f8d5 000a 	ldr.w	r0, [r5, #10]
    f6b6:	6048      	str	r0, [r1, #4]
    f6b8:	e7a2      	b.n	f600 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>
    f6ba:	e7ff      	b.n	f6bc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x11e>
    f6bc:	7067      	strb	r7, [r4, #1]
    f6be:	2013      	movs	r0, #19
    f6c0:	7020      	strb	r0, [r4, #0]
    f6c2:	f855 0f5a 	ldr.w	r0, [r5, #90]!
    f6c6:	6060      	str	r0, [r4, #4]
    f6c8:	88a8      	ldrh	r0, [r5, #4]
    f6ca:	8120      	strh	r0, [r4, #8]
    f6cc:	e798      	b.n	f600 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x62>

0000f6ce <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    f6ce:	b4f0      	push	{r4, r5, r6, r7}
    f6d0:	8150      	strh	r0, [r2, #10]
    f6d2:	890d      	ldrh	r5, [r1, #8]
    f6d4:	4614      	mov	r4, r2
    f6d6:	8195      	strh	r5, [r2, #12]
    f6d8:	898a      	ldrh	r2, [r1, #12]
    f6da:	81e2      	strh	r2, [r4, #14]
    f6dc:	8948      	ldrh	r0, [r1, #10]
    f6de:	8220      	strh	r0, [r4, #16]
    f6e0:	89ce      	ldrh	r6, [r1, #14]
    f6e2:	8266      	strh	r6, [r4, #18]
    f6e4:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    f6e6:	42b7      	cmp	r7, r6
    f6e8:	d108      	bne.n	f6fc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f6ea:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    f6ec:	4286      	cmp	r6, r0
    f6ee:	d105      	bne.n	f6fc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f6f0:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    f6f2:	4296      	cmp	r6, r2
    f6f4:	d102      	bne.n	f6fc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    f6f6:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    f6f8:	42aa      	cmp	r2, r5
    f6fa:	d001      	beq.n	f700 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f6fc:	2201      	movs	r2, #1
    f6fe:	e000      	b.n	f702 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    f700:	2200      	movs	r2, #0
    f702:	7522      	strb	r2, [r4, #20]
    f704:	8548      	strh	r0, [r1, #42]	; 0x2a
    f706:	8a60      	ldrh	r0, [r4, #18]
    f708:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f70a:	89a0      	ldrh	r0, [r4, #12]
    f70c:	8588      	strh	r0, [r1, #44]	; 0x2c
    f70e:	89e0      	ldrh	r0, [r4, #14]
    f710:	8608      	strh	r0, [r1, #48]	; 0x30
    f712:	4620      	mov	r0, r4
    f714:	bcf0      	pop	{r4, r5, r6, r7}
    f716:	2210      	movs	r2, #16
    f718:	4619      	mov	r1, r3
    f71a:	f7f7 bf09 	b.w	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000f71e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f71e:	b510      	push	{r4, lr}
    f720:	888c      	ldrh	r4, [r1, #4]
    f722:	890a      	ldrh	r2, [r1, #8]
    f724:	884b      	ldrh	r3, [r1, #2]
    f726:	88c9      	ldrh	r1, [r1, #6]
    f728:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    f72c:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    f730:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    f734:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    f738:	bd10      	pop	{r4, pc}

0000f73a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f73a:	b570      	push	{r4, r5, r6, lr}
    f73c:	4615      	mov	r5, r2
    f73e:	460c      	mov	r4, r1
    f740:	f000 f8ce 	bl	f8e0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    f744:	3096      	adds	r0, #150	; 0x96
    f746:	4428      	add	r0, r5
    f748:	42a0      	cmp	r0, r4
    f74a:	d801      	bhi.n	f750 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f74c:	1a20      	subs	r0, r4, r0
    f74e:	bd70      	pop	{r4, r5, r6, pc}
    f750:	2000      	movs	r0, #0
    f752:	bd70      	pop	{r4, r5, r6, pc}

0000f754 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f758:	4604      	mov	r4, r0
    f75a:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    f75c:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    f75e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    f762:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    f766:	4285      	cmp	r5, r0
    f768:	d300      	bcc.n	f76c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    f76a:	4605      	mov	r5, r0
    f76c:	4620      	mov	r0, r4
    f76e:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    f772:	f000 f8a5 	bl	f8c0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f776:	4601      	mov	r1, r0
    f778:	8765      	strh	r5, [r4, #58]	; 0x3a
    f77a:	87e1      	strh	r1, [r4, #62]	; 0x3e
    f77c:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    f780:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f784:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    f788:	4680      	mov	r8, r0
    f78a:	42aa      	cmp	r2, r5
    f78c:	d200      	bcs.n	f790 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    f78e:	462a      	mov	r2, r5
    f790:	428b      	cmp	r3, r1
    f792:	d200      	bcs.n	f796 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    f794:	460b      	mov	r3, r1
    f796:	8202      	strh	r2, [r0, #16]
    f798:	f8a8 3012 	strh.w	r3, [r8, #18]
    f79c:	42bd      	cmp	r5, r7
    f79e:	d101      	bne.n	f7a4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    f7a0:	42b1      	cmp	r1, r6
    f7a2:	d001      	beq.n	f7a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    f7a4:	2001      	movs	r0, #1
    f7a6:	e000      	b.n	f7aa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    f7a8:	2000      	movs	r0, #0
    f7aa:	4681      	mov	r9, r0
    f7ac:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    f7b0:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    f7b4:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    f7b6:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    f7b8:	4285      	cmp	r5, r0
    f7ba:	d300      	bcc.n	f7be <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    f7bc:	4605      	mov	r5, r0
    f7be:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    f7c2:	4620      	mov	r0, r4
    f7c4:	f000 f884 	bl	f8d0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f7c8:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    f7cc:	2902      	cmp	r1, #2
    f7ce:	d108      	bne.n	f7e2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    f7d0:	42af      	cmp	r7, r5
    f7d2:	d200      	bcs.n	f7d6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    f7d4:	463d      	mov	r5, r7
    f7d6:	4286      	cmp	r6, r0
    f7d8:	d200      	bcs.n	f7dc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    f7da:	4630      	mov	r0, r6
    f7dc:	2100      	movs	r1, #0
    f7de:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    f7e2:	f8a8 5008 	strh.w	r5, [r8, #8]
    f7e6:	f8a8 000c 	strh.w	r0, [r8, #12]
    f7ea:	42bd      	cmp	r5, r7
    f7ec:	d101      	bne.n	f7f2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f7ee:	42b0      	cmp	r0, r6
    f7f0:	d001      	beq.n	f7f6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    f7f2:	2001      	movs	r0, #1
    f7f4:	e000      	b.n	f7f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    f7f6:	2000      	movs	r0, #0
    f7f8:	ea40 0009 	orr.w	r0, r0, r9
    f7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f800 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f800:	6840      	ldr	r0, [r0, #4]
    f802:	4770      	bx	lr

0000f804 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f808:	4616      	mov	r6, r2
    f80a:	460f      	mov	r7, r1
    f80c:	4604      	mov	r4, r0
    f80e:	f000 f867 	bl	f8e0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    f812:	4605      	mov	r5, r0
    f814:	463a      	mov	r2, r7
    f816:	6921      	ldr	r1, [r4, #16]
    f818:	6b20      	ldr	r0, [r4, #48]	; 0x30
    f81a:	f000 f84c 	bl	f8b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f81e:	19a9      	adds	r1, r5, r6
    f820:	4281      	cmp	r1, r0
    f822:	d300      	bcc.n	f826 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f824:	4608      	mov	r0, r1
    f826:	6360      	str	r0, [r4, #52]	; 0x34
    f828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f82c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f82c:	221b      	movs	r2, #27
    f82e:	8402      	strh	r2, [r0, #32]
    f830:	8382      	strh	r2, [r0, #28]
    f832:	82c2      	strh	r2, [r0, #22]
    f834:	8282      	strh	r2, [r0, #20]
    f836:	8142      	strh	r2, [r0, #10]
    f838:	8202      	strh	r2, [r0, #16]
    f83a:	8102      	strh	r2, [r0, #8]
    f83c:	8542      	strh	r2, [r0, #42]	; 0x2a
    f83e:	8582      	strh	r2, [r0, #44]	; 0x2c
    f840:	8482      	strh	r2, [r0, #36]	; 0x24
    f842:	2900      	cmp	r1, #0
    f844:	d10a      	bne.n	f85c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f846:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f84a:	8441      	strh	r1, [r0, #34]	; 0x22
    f84c:	83c1      	strh	r1, [r0, #30]
    f84e:	8341      	strh	r1, [r0, #26]
    f850:	8301      	strh	r1, [r0, #24]
    f852:	81c1      	strh	r1, [r0, #14]
    f854:	8241      	strh	r1, [r0, #18]
    f856:	8181      	strh	r1, [r0, #12]
    f858:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f85a:	8601      	strh	r1, [r0, #48]	; 0x30
    f85c:	4770      	bx	lr

0000f85e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f85e:	6800      	ldr	r0, [r0, #0]
    f860:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f864:	4290      	cmp	r0, r2
    f866:	d903      	bls.n	f870 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f868:	1a40      	subs	r0, r0, r1
    f86a:	389c      	subs	r0, #156	; 0x9c
    f86c:	0840      	lsrs	r0, r0, #1
    f86e:	4770      	bx	lr
    f870:	2000      	movs	r0, #0
    f872:	4770      	bx	lr

0000f874 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f874:	b510      	push	{r4, lr}
    f876:	9c02      	ldr	r4, [sp, #8]
    f878:	8281      	strh	r1, [r0, #20]
    f87a:	82c2      	strh	r2, [r0, #22]
    f87c:	8303      	strh	r3, [r0, #24]
    f87e:	8344      	strh	r4, [r0, #26]
    f880:	bd10      	pop	{r4, pc}

0000f882 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f882:	b430      	push	{r4, r5}
    f884:	8150      	strh	r0, [r2, #10]
    f886:	8a88      	ldrh	r0, [r1, #20]
    f888:	8190      	strh	r0, [r2, #12]
    f88a:	8ac8      	ldrh	r0, [r1, #22]
    f88c:	81d0      	strh	r0, [r2, #14]
    f88e:	8b08      	ldrh	r0, [r1, #24]
    f890:	8210      	strh	r0, [r2, #16]
    f892:	8b48      	ldrh	r0, [r1, #26]
    f894:	4614      	mov	r4, r2
    f896:	8250      	strh	r0, [r2, #18]
    f898:	4620      	mov	r0, r4
    f89a:	bc30      	pop	{r4, r5}
    f89c:	221a      	movs	r2, #26
    f89e:	4619      	mov	r1, r3
    f8a0:	f7f7 be46 	b.w	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f8a4:	2902      	cmp	r1, #2
    f8a6:	d003      	beq.n	f8b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    f8a8:	00c0      	lsls	r0, r0, #3
    f8aa:	3070      	adds	r0, #112	; 0x70
    f8ac:	b280      	uxth	r0, r0
    f8ae:	4770      	bx	lr
    f8b0:	0080      	lsls	r0, r0, #2
    f8b2:	303c      	adds	r0, #60	; 0x3c
    f8b4:	e7fa      	b.n	f8ac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f8b6:	4288      	cmp	r0, r1
    f8b8:	d300      	bcc.n	f8bc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    f8ba:	4608      	mov	r0, r1
    f8bc:	1a80      	subs	r0, r0, r2
    f8be:	4770      	bx	lr
    f8c0:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    f8c4:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    f8c8:	4281      	cmp	r1, r0
    f8ca:	d200      	bcs.n	f8ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    f8cc:	4608      	mov	r0, r1
    f8ce:	4770      	bx	lr
    f8d0:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f8d4:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    f8d8:	4281      	cmp	r1, r0
    f8da:	d200      	bcs.n	f8de <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    f8dc:	4608      	mov	r0, r1
    f8de:	4770      	bx	lr
    f8e0:	2196      	movs	r1, #150	; 0x96
    f8e2:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    f8e6:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    f8ea:	f000 b800 	b.w	f8ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    f8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8f2:	460d      	mov	r5, r1
    f8f4:	4606      	mov	r6, r0
    f8f6:	4698      	mov	r8, r3
    f8f8:	4617      	mov	r7, r2
    f8fa:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    f8fc:	4611      	mov	r1, r2
    f8fe:	f7ff ffd1 	bl	f8a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f902:	4604      	mov	r4, r0
    f904:	4639      	mov	r1, r7
    f906:	4630      	mov	r0, r6
    f908:	f7ff ffe2 	bl	f8d0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    f90c:	42a0      	cmp	r0, r4
    f90e:	d200      	bcs.n	f912 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    f910:	4604      	mov	r4, r0
    f912:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    f916:	4641      	mov	r1, r8
    f918:	f7ff ffc4 	bl	f8a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    f91c:	4607      	mov	r7, r0
    f91e:	4641      	mov	r1, r8
    f920:	4630      	mov	r0, r6
    f922:	f7ff ffcd 	bl	f8c0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    f926:	42b8      	cmp	r0, r7
    f928:	d300      	bcc.n	f92c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xaa>
    f92a:	4638      	mov	r0, r7
    f92c:	4420      	add	r0, r4
    f92e:	4428      	add	r0, r5
    f930:	1d80      	adds	r0, r0, #6
    f932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f936:	b510      	push	{r4, lr}
    f938:	4604      	mov	r4, r0
    f93a:	2108      	movs	r1, #8
    f93c:	4620      	mov	r0, r4
    f93e:	f7f5 fe7b 	bl	5638 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f942:	6820      	ldr	r0, [r4, #0]
    f944:	2800      	cmp	r0, #0
    f946:	d102      	bne.n	f94e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f948:	6860      	ldr	r0, [r4, #4]
    f94a:	2800      	cmp	r0, #0
    f94c:	d0f5      	beq.n	f93a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb8>
    f94e:	bd10      	pop	{r4, pc}
    f950:	2801      	cmp	r0, #1
    f952:	d102      	bne.n	f95a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    f954:	7948      	ldrb	r0, [r1, #5]
    f956:	0980      	lsrs	r0, r0, #6
    f958:	d001      	beq.n	f95e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    f95a:	2000      	movs	r0, #0
    f95c:	4770      	bx	lr
    f95e:	2001      	movs	r0, #1
    f960:	4770      	bx	lr
    f962:	2801      	cmp	r0, #1
    f964:	d106      	bne.n	f974 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f966:	7948      	ldrb	r0, [r1, #5]
    f968:	2101      	movs	r1, #1
    f96a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f96e:	d101      	bne.n	f974 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf2>
    f970:	2001      	movs	r0, #1
    f972:	4770      	bx	lr
    f974:	2000      	movs	r0, #0
    f976:	4770      	bx	lr
    f978:	2802      	cmp	r0, #2
    f97a:	d003      	beq.n	f984 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    f97c:	2803      	cmp	r0, #3
    f97e:	d001      	beq.n	f984 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x102>
    f980:	2000      	movs	r0, #0
    f982:	4770      	bx	lr
    f984:	2001      	movs	r0, #1
    f986:	4770      	bx	lr

0000f988 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    f988:	b510      	push	{r4, lr}
    f98a:	4604      	mov	r4, r0
    f98c:	7c00      	ldrb	r0, [r0, #16]
    f98e:	f7ff fff3 	bl	f978 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf6>
    f992:	b148      	cbz	r0, f9a8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f994:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    f998:	f104 0150 	add.w	r1, r4, #80	; 0x50
    f99c:	f7ff f9a2 	bl	ece4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f9a0:	2808      	cmp	r0, #8
    f9a2:	d001      	beq.n	f9a8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f9a4:	2001      	movs	r0, #1
    f9a6:	bd10      	pop	{r4, pc}
    f9a8:	7c20      	ldrb	r0, [r4, #16]
    f9aa:	b118      	cbz	r0, f9b4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f9ac:	2802      	cmp	r0, #2
    f9ae:	d001      	beq.n	f9b4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f9b0:	7de0      	ldrb	r0, [r4, #23]
    f9b2:	bd10      	pop	{r4, pc}
    f9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9b8:	2000      	movs	r0, #0
    f9ba:	f7f6 bc73 	b.w	62a4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000f9be <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    f9be:	b508      	push	{r3, lr}
    f9c0:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    f9c4:	f88d 1000 	strb.w	r1, [sp]
    f9c8:	9900      	ldr	r1, [sp, #0]
    f9ca:	9100      	str	r1, [sp, #0]
    f9cc:	f89d 1000 	ldrb.w	r1, [sp]
    f9d0:	b109      	cbz	r1, f9d6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    f9d2:	2001      	movs	r0, #1
    f9d4:	bd08      	pop	{r3, pc}
    f9d6:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    f9da:	f88d 0000 	strb.w	r0, [sp]
    f9de:	9800      	ldr	r0, [sp, #0]
    f9e0:	9000      	str	r0, [sp, #0]
    f9e2:	f89d 0000 	ldrb.w	r0, [sp]
    f9e6:	2000      	movs	r0, #0
    f9e8:	bd08      	pop	{r3, pc}

0000f9ea <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    f9ea:	20ff      	movs	r0, #255	; 0xff
    f9ec:	7008      	strb	r0, [r1, #0]
    f9ee:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    f9f0:	f7ff b878 	b.w	eae4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000f9f4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    f9f4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f9f6:	460d      	mov	r5, r1
    f9f8:	4604      	mov	r4, r0
    f9fa:	f44f 7288 	mov.w	r2, #272	; 0x110
    f9fe:	2100      	movs	r1, #0
    fa00:	f7fd ff6c 	bl	d8dc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fa04:	20ff      	movs	r0, #255	; 0xff
    fa06:	7020      	strb	r0, [r4, #0]
    fa08:	207f      	movs	r0, #127	; 0x7f
    fa0a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    fa0e:	2013      	movs	r0, #19
    fa10:	8060      	strh	r0, [r4, #2]
    fa12:	f7f6 fa4f 	bl	5eb4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    fa16:	4601      	mov	r1, r0
    fa18:	62e0      	str	r0, [r4, #44]	; 0x2c
    fa1a:	2200      	movs	r2, #0
    fa1c:	4668      	mov	r0, sp
    fa1e:	f7fe ffcb 	bl	e9b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fa22:	2200      	movs	r2, #0
    fa24:	2101      	movs	r1, #1
    fa26:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fa28:	f7ff f83c 	bl	eaa4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fa2c:	2204      	movs	r2, #4
    fa2e:	4668      	mov	r0, sp
    fa30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fa32:	f7fe ffc1 	bl	e9b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fa36:	2200      	movs	r2, #0
    fa38:	4611      	mov	r1, r2
    fa3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fa3c:	f7ff f832 	bl	eaa4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fa40:	73a5      	strb	r5, [r4, #14]
    fa42:	f104 0020 	add.w	r0, r4, #32
    fa46:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    fa4a:	f000 b994 	b.w	fd76 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000fa4e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    fa4e:	7880      	ldrb	r0, [r0, #2]
    fa50:	f3c0 0080 	ubfx	r0, r0, #2, #1
    fa54:	b108      	cbz	r0, fa5a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    fa56:	2000      	movs	r0, #0
    fa58:	4770      	bx	lr
    fa5a:	201f      	movs	r0, #31
    fa5c:	4770      	bx	lr

0000fa5e <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    fa5e:	f7f8 bc9d 	b.w	839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>

0000fa62 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    fa62:	b570      	push	{r4, r5, r6, lr}
    fa64:	2300      	movs	r3, #0
    fa66:	2a03      	cmp	r2, #3
    fa68:	d015      	beq.n	fa96 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x34>
    fa6a:	2a0e      	cmp	r2, #14
    fa6c:	d01a      	beq.n	faa4 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x42>
    fa6e:	2a12      	cmp	r2, #18
    fa70:	d030      	beq.n	fad4 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x72>
    fa72:	2a19      	cmp	r2, #25
    fa74:	d004      	beq.n	fa80 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1e>
    fa76:	f240 21d2 	movw	r1, #722	; 0x2d2
    fa7a:	202d      	movs	r0, #45	; 0x2d
    fa7c:	f7f5 fd30 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa80:	704b      	strb	r3, [r1, #1]
    fa82:	2217      	movs	r2, #23
    fa84:	700a      	strb	r2, [r1, #0]
    fa86:	f850 2fb5 	ldr.w	r2, [r0, #181]!
    fa8a:	604a      	str	r2, [r1, #4]
    fa8c:	6842      	ldr	r2, [r0, #4]
    fa8e:	608a      	str	r2, [r1, #8]
    fa90:	7a00      	ldrb	r0, [r0, #8]
    fa92:	7308      	strb	r0, [r1, #12]
    fa94:	bd70      	pop	{r4, r5, r6, pc}
    fa96:	704b      	strb	r3, [r1, #1]
    fa98:	2205      	movs	r2, #5
    fa9a:	700a      	strb	r2, [r1, #0]
    fa9c:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
    faa0:	6048      	str	r0, [r1, #4]
    faa2:	bd70      	pop	{r4, r5, r6, pc}
    faa4:	4605      	mov	r5, r0
    faa6:	704b      	strb	r3, [r1, #1]
    faa8:	2011      	movs	r0, #17
    faaa:	460c      	mov	r4, r1
    faac:	7008      	strb	r0, [r1, #0]
    faae:	2220      	movs	r2, #32
    fab0:	f105 016e 	add.w	r1, r5, #110	; 0x6e
    fab4:	1d20      	adds	r0, r4, #4
    fab6:	f7fd fe97 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    faba:	2001      	movs	r0, #1
    fabc:	7220      	strb	r0, [r4, #8]
    fabe:	7920      	ldrb	r0, [r4, #4]
    fac0:	2800      	cmp	r0, #0
    fac2:	d1ee      	bne.n	faa2 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x40>
    fac4:	69e8      	ldr	r0, [r5, #28]
    fac6:	8800      	ldrh	r0, [r0, #0]
    fac8:	f7f6 f932 	bl	5d30 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    facc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fad0:	f7fe bd84 	b.w	e5dc <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    fad4:	704b      	strb	r3, [r1, #1]
    fad6:	2214      	movs	r2, #20
    fad8:	700a      	strb	r2, [r1, #0]
    fada:	f850 2f98 	ldr.w	r2, [r0, #152]!
    fade:	604a      	str	r2, [r1, #4]
    fae0:	8880      	ldrh	r0, [r0, #4]
    fae2:	8108      	strh	r0, [r1, #8]
    fae4:	bd70      	pop	{r4, r5, r6, pc}

0000fae6 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    fae6:	6880      	ldr	r0, [r0, #8]
    fae8:	4770      	bx	lr

0000faea <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    faea:	2001      	movs	r0, #1
    faec:	4770      	bx	lr

0000faee <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    faee:	b510      	push	{r4, lr}
    faf0:	4604      	mov	r4, r0
    faf2:	3020      	adds	r0, #32
    faf4:	f000 f8ff 	bl	fcf6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    faf8:	8861      	ldrh	r1, [r4, #2]
    fafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fafe:	2228      	movs	r2, #40	; 0x28
    fb00:	f7f8 be34 	b.w	876c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000fb04 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    fb04:	2200      	movs	r2, #0
    fb06:	8502      	strh	r2, [r0, #40]	; 0x28
    fb08:	8843      	ldrh	r3, [r0, #2]
    fb0a:	2b1d      	cmp	r3, #29
    fb0c:	d001      	beq.n	fb12 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    fb0e:	7341      	strb	r1, [r0, #13]
    fb10:	4770      	bx	lr
    fb12:	7342      	strb	r2, [r0, #13]
    fb14:	4770      	bx	lr

0000fb16 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    fb16:	b510      	push	{r4, lr}
    fb18:	2400      	movs	r4, #0
    fb1a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    fb1c:	f7fe ffb0 	bl	ea80 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    fb20:	b100      	cbz	r0, fb24 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    fb22:	2001      	movs	r0, #1
    fb24:	4384      	bics	r4, r0
    fb26:	f084 0001 	eor.w	r0, r4, #1
    fb2a:	bd10      	pop	{r4, pc}

0000fb2c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    fb2c:	2000      	movs	r0, #0
    fb2e:	4770      	bx	lr

0000fb30 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    fb30:	7880      	ldrb	r0, [r0, #2]
    fb32:	f000 0001 	and.w	r0, r0, #1
    fb36:	4770      	bx	lr

0000fb38 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    fb38:	7880      	ldrb	r0, [r0, #2]
    fb3a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    fb3e:	4770      	bx	lr

0000fb40 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    fb40:	2001      	movs	r0, #1
    fb42:	4770      	bx	lr

0000fb44 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    fb44:	7880      	ldrb	r0, [r0, #2]
    fb46:	f3c0 0040 	ubfx	r0, r0, #1, #1
    fb4a:	4770      	bx	lr

0000fb4c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    fb4c:	f990 000e 	ldrsb.w	r0, [r0, #14]
    fb50:	4770      	bx	lr

0000fb52 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    fb52:	7800      	ldrb	r0, [r0, #0]
    fb54:	28ff      	cmp	r0, #255	; 0xff
    fb56:	d001      	beq.n	fb5c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    fb58:	2001      	movs	r0, #1
    fb5a:	4770      	bx	lr
    fb5c:	2000      	movs	r0, #0
    fb5e:	4770      	bx	lr

0000fb60 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    fb60:	680a      	ldr	r2, [r1, #0]
    fb62:	f840 2f11 	str.w	r2, [r0, #17]!
    fb66:	8889      	ldrh	r1, [r1, #4]
    fb68:	8081      	strh	r1, [r0, #4]
    fb6a:	2101      	movs	r1, #1
    fb6c:	7181      	strb	r1, [r0, #6]
    fb6e:	4770      	bx	lr

0000fb70 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    fb70:	7b00      	ldrb	r0, [r0, #12]
    fb72:	4770      	bx	lr

0000fb74 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    fb74:	2001      	movs	r0, #1
    fb76:	4770      	bx	lr

0000fb78 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    fb78:	61c1      	str	r1, [r0, #28]
    fb7a:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    fb7e:	724a      	strb	r2, [r1, #9]
    fb80:	f8d0 2049 	ldr.w	r2, [r0, #73]	; 0x49
    fb84:	f8c1 200a 	str.w	r2, [r1, #10]
    fb88:	f8b0 004d 	ldrh.w	r0, [r0, #77]	; 0x4d
    fb8c:	81c8      	strh	r0, [r1, #14]
    fb8e:	4770      	bx	lr

0000fb90 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    fb90:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    fb94:	4770      	bx	lr

0000fb96 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    fb96:	b510      	push	{r4, lr}
    fb98:	4604      	mov	r4, r0
    fb9a:	7880      	ldrb	r0, [r0, #2]
    fb9c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    fba0:	b158      	cbz	r0, fbba <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    fba2:	233c      	movs	r3, #60	; 0x3c
    fba4:	22ff      	movs	r2, #255	; 0xff
    fba6:	4620      	mov	r0, r4
    fba8:	69e1      	ldr	r1, [r4, #28]
    fbaa:	f7f8 fc23 	bl	83f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f4>
    fbae:	220e      	movs	r2, #14
    fbb0:	4621      	mov	r1, r4
    fbb2:	f104 0064 	add.w	r0, r4, #100	; 0x64
    fbb6:	f7f7 fcbb 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    fbba:	78a0      	ldrb	r0, [r4, #2]
    fbbc:	07c0      	lsls	r0, r0, #31
    fbbe:	f7f7 fd89 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fbc2:	2001      	movs	r0, #1
    fbc4:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    fbc8:	bd10      	pop	{r4, pc}

0000fbca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    fbca:	7bc0      	ldrb	r0, [r0, #15]
    fbcc:	2800      	cmp	r0, #0
    fbce:	d000      	beq.n	fbd2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    fbd0:	2001      	movs	r0, #1
    fbd2:	4770      	bx	lr
    fbd4:	b510      	push	{r4, lr}
    fbd6:	f7ff f885 	bl	ece4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    fbda:	4604      	mov	r4, r0
    fbdc:	f7f7 f972 	bl	6ec4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    fbe0:	b138      	cbz	r0, fbf2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    fbe2:	4620      	mov	r0, r4
    fbe4:	f7f7 f916 	bl	6e14 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    fbe8:	b118      	cbz	r0, fbf2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    fbea:	2110      	movs	r1, #16
    fbec:	f7ff fa5d 	bl	f0aa <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    fbf0:	b108      	cbz	r0, fbf6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    fbf2:	2000      	movs	r0, #0
    fbf4:	bd10      	pop	{r4, pc}
    fbf6:	2001      	movs	r0, #1
    fbf8:	bd10      	pop	{r4, pc}
    fbfa:	2101      	movs	r1, #1
    fbfc:	f7f8 b860 	b.w	7cc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    fc00:	2101      	movs	r1, #1
    fc02:	f7f8 b85d 	b.w	7cc0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    fc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc0a:	4604      	mov	r4, r0
    fc0c:	460f      	mov	r7, r1
    fc0e:	7e40      	ldrb	r0, [r0, #25]
    fc10:	f7f7 f8e6 	bl	6de0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    fc14:	4606      	mov	r6, r0
    fc16:	7e20      	ldrb	r0, [r4, #24]
    fc18:	f104 0549 	add.w	r5, r4, #73	; 0x49
    fc1c:	b120      	cbz	r0, fc28 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    fc1e:	b11e      	cbz	r6, fc28 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x5e>
    fc20:	7e60      	ldrb	r0, [r4, #25]
    fc22:	f7f7 f8d1 	bl	6dc8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    fc26:	b1a0      	cbz	r0, fc52 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x88>
    fc28:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    fc2c:	2800      	cmp	r0, #0
    fc2e:	d024      	beq.n	fc7a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    fc30:	7ea0      	ldrb	r0, [r4, #26]
    fc32:	2800      	cmp	r0, #0
    fc34:	d021      	beq.n	fc7a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    fc36:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    fc3a:	4629      	mov	r1, r5
    fc3c:	f7ff fe91 	bl	f962 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe0>
    fc40:	b1a8      	cbz	r0, fc6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa4>
    fc42:	f7f7 f8bd 	bl	6dc0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    fc46:	463a      	mov	r2, r7
    fc48:	4629      	mov	r1, r5
    fc4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fc4e:	f7fe bfe1 	b.w	ec14 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    fc52:	2001      	movs	r0, #1
    fc54:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    fc58:	463a      	mov	r2, r7
    fc5a:	4629      	mov	r1, r5
    fc5c:	4630      	mov	r0, r6
    fc5e:	f7fe ffd9 	bl	ec14 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    fc62:	7e61      	ldrb	r1, [r4, #25]
    fc64:	4628      	mov	r0, r5
    fc66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fc6a:	f7f7 b8c5 	b.w	6df8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    fc6e:	4639      	mov	r1, r7
    fc70:	4628      	mov	r0, r5
    fc72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fc76:	f7fe bfbc 	b.w	ebf2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    fc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc7e:	b510      	push	{r4, lr}
    fc80:	4604      	mov	r4, r0
    fc82:	4608      	mov	r0, r1
    fc84:	f7fc fc3c 	bl	c500 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    fc88:	7921      	ldrb	r1, [r4, #4]
    fc8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc8e:	2025      	movs	r0, #37	; 0x25
    fc90:	f7fc bc0c 	b.w	c4ac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    fc94:	b510      	push	{r4, lr}
    fc96:	4604      	mov	r4, r0
    fc98:	3026      	adds	r0, #38	; 0x26
    fc9a:	f7fc fbe7 	bl	c46c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    fc9e:	2800      	cmp	r0, #0
    fca0:	d102      	bne.n	fca8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xde>
    fca2:	207f      	movs	r0, #127	; 0x7f
    fca4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    fca8:	bd10      	pop	{r4, pc}
    fcaa:	b570      	push	{r4, r5, r6, lr}
    fcac:	4614      	mov	r4, r2
    fcae:	461d      	mov	r5, r3
    fcb0:	4606      	mov	r6, r0
    fcb2:	f7f4 f83d 	bl	3d30 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    fcb6:	1900      	adds	r0, r0, r4
    fcb8:	4169      	adcs	r1, r5
    fcba:	e9c6 0100 	strd	r0, r1, [r6]
    fcbe:	bd70      	pop	{r4, r5, r6, pc}
    fcc0:	7802      	ldrb	r2, [r0, #0]
    fcc2:	2320      	movs	r3, #32
    fcc4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    fcc8:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    fccc:	430a      	orrs	r2, r1
    fcce:	7002      	strb	r2, [r0, #0]
    fcd0:	4770      	bx	lr

0000fcd2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    fcd2:	b570      	push	{r4, r5, r6, lr}
    fcd4:	7001      	strb	r1, [r0, #0]
    fcd6:	7042      	strb	r2, [r0, #1]
    fcd8:	4614      	mov	r4, r2
    fcda:	460d      	mov	r5, r1
    fcdc:	7880      	ldrb	r0, [r0, #2]
    fcde:	f000 f87f 	bl	fde0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fce2:	fb10 f005 	smulbb	r0, r0, r5
    fce6:	4360      	muls	r0, r4
    fce8:	28ff      	cmp	r0, #255	; 0xff
    fcea:	d303      	bcc.n	fcf4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    fcec:	215c      	movs	r1, #92	; 0x5c
    fcee:	202e      	movs	r0, #46	; 0x2e
    fcf0:	f7f5 fbf6 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcf4:	bd70      	pop	{r4, r5, r6, pc}

0000fcf6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    fcf6:	b510      	push	{r4, lr}
    fcf8:	4604      	mov	r4, r0
    fcfa:	7880      	ldrb	r0, [r0, #2]
    fcfc:	f000 f870 	bl	fde0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fd00:	7861      	ldrb	r1, [r4, #1]
    fd02:	7822      	ldrb	r2, [r4, #0]
    fd04:	fb11 f102 	smulbb	r1, r1, r2
    fd08:	4348      	muls	r0, r1
    fd0a:	b2c0      	uxtb	r0, r0
    fd0c:	bd10      	pop	{r4, pc}

0000fd0e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    fd0e:	b510      	push	{r4, lr}
    fd10:	4604      	mov	r4, r0
    fd12:	f000 f84d 	bl	fdb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    fd16:	7961      	ldrb	r1, [r4, #5]
    fd18:	1c49      	adds	r1, r1, #1
    fd1a:	b2c9      	uxtb	r1, r1
    fd1c:	7161      	strb	r1, [r4, #5]
    fd1e:	7862      	ldrb	r2, [r4, #1]
    fd20:	4291      	cmp	r1, r2
    fd22:	d10b      	bne.n	fd3c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    fd24:	2200      	movs	r2, #0
    fd26:	7162      	strb	r2, [r4, #5]
    fd28:	78e1      	ldrb	r1, [r4, #3]
    fd2a:	4301      	orrs	r1, r0
    fd2c:	70e1      	strb	r1, [r4, #3]
    fd2e:	78a3      	ldrb	r3, [r4, #2]
    fd30:	4299      	cmp	r1, r3
    fd32:	d103      	bne.n	fd3c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    fd34:	70e2      	strb	r2, [r4, #3]
    fd36:	7921      	ldrb	r1, [r4, #4]
    fd38:	1c49      	adds	r1, r1, #1
    fd3a:	7121      	strb	r1, [r4, #4]
    fd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd40:	f000 b825 	b.w	fd8e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000fd44 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    fd44:	7081      	strb	r1, [r0, #2]
    fd46:	4770      	bx	lr

0000fd48 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    fd48:	b570      	push	{r4, r5, r6, lr}
    fd4a:	4604      	mov	r4, r0
    fd4c:	7880      	ldrb	r0, [r0, #2]
    fd4e:	f000 f847 	bl	fde0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fd52:	7861      	ldrb	r1, [r4, #1]
    fd54:	fb11 f500 	smulbb	r5, r1, r0
    fd58:	78e0      	ldrb	r0, [r4, #3]
    fd5a:	f000 f841 	bl	fde0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fd5e:	7861      	ldrb	r1, [r4, #1]
    fd60:	7962      	ldrb	r2, [r4, #5]
    fd62:	fb10 2001 	smlabb	r0, r0, r1, r2
    fd66:	7821      	ldrb	r1, [r4, #0]
    fd68:	7922      	ldrb	r2, [r4, #4]
    fd6a:	1a89      	subs	r1, r1, r2
    fd6c:	fb11 f105 	smulbb	r1, r1, r5
    fd70:	1a08      	subs	r0, r1, r0
    fd72:	b2c0      	uxtb	r0, r0
    fd74:	bd70      	pop	{r4, r5, r6, pc}

0000fd76 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    fd76:	2100      	movs	r1, #0
    fd78:	6001      	str	r1, [r0, #0]
    fd7a:	8081      	strh	r1, [r0, #4]
    fd7c:	2101      	movs	r1, #1
    fd7e:	7041      	strb	r1, [r0, #1]
    fd80:	7001      	strb	r1, [r0, #0]
    fd82:	4770      	bx	lr

0000fd84 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    fd84:	2100      	movs	r1, #0
    fd86:	70c1      	strb	r1, [r0, #3]
    fd88:	7141      	strb	r1, [r0, #5]
    fd8a:	7101      	strb	r1, [r0, #4]
    fd8c:	4770      	bx	lr
    fd8e:	b510      	push	{r4, lr}
    fd90:	2801      	cmp	r0, #1
    fd92:	d007      	beq.n	fda4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    fd94:	2802      	cmp	r0, #2
    fd96:	d007      	beq.n	fda8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    fd98:	2804      	cmp	r0, #4
    fd9a:	d007      	beq.n	fdac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    fd9c:	2139      	movs	r1, #57	; 0x39
    fd9e:	202e      	movs	r0, #46	; 0x2e
    fda0:	f7f5 fb9e 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fda4:	2025      	movs	r0, #37	; 0x25
    fda6:	bd10      	pop	{r4, pc}
    fda8:	2026      	movs	r0, #38	; 0x26
    fdaa:	bd10      	pop	{r4, pc}
    fdac:	2027      	movs	r0, #39	; 0x27
    fdae:	bd10      	pop	{r4, pc}
    fdb0:	4601      	mov	r1, r0
    fdb2:	2000      	movs	r0, #0
    fdb4:	788a      	ldrb	r2, [r1, #2]
    fdb6:	07d3      	lsls	r3, r2, #31
    fdb8:	d002      	beq.n	fdc0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    fdba:	78cb      	ldrb	r3, [r1, #3]
    fdbc:	07db      	lsls	r3, r3, #31
    fdbe:	d006      	beq.n	fdce <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    fdc0:	0793      	lsls	r3, r2, #30
    fdc2:	d506      	bpl.n	fdd2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    fdc4:	78cb      	ldrb	r3, [r1, #3]
    fdc6:	079b      	lsls	r3, r3, #30
    fdc8:	d403      	bmi.n	fdd2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    fdca:	2002      	movs	r0, #2
    fdcc:	4770      	bx	lr
    fdce:	2001      	movs	r0, #1
    fdd0:	4770      	bx	lr
    fdd2:	0752      	lsls	r2, r2, #29
    fdd4:	d5fc      	bpl.n	fdd0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    fdd6:	78c9      	ldrb	r1, [r1, #3]
    fdd8:	0749      	lsls	r1, r1, #29
    fdda:	d4f9      	bmi.n	fdd0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    fddc:	2004      	movs	r0, #4
    fdde:	4770      	bx	lr
    fde0:	f3c0 0180 	ubfx	r1, r0, #2, #1
    fde4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    fde8:	4411      	add	r1, r2
    fdea:	f000 0001 	and.w	r0, r0, #1
    fdee:	4408      	add	r0, r1
    fdf0:	4770      	bx	lr

0000fdf2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    fdf2:	f240 315a 	movw	r1, #858	; 0x35a
    fdf6:	4348      	muls	r0, r1
    fdf8:	4770      	bx	lr

0000fdfa <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    fdfa:	f240 20ef 	movw	r0, #751	; 0x2ef
    fdfe:	4770      	bx	lr
    fe00:	041c020e 	.word	0x041c020e
    fe04:	0c600630 	.word	0x0c600630
    fe08:	06b4035a 	.word	0x06b4035a
    fe0c:	0bf505c5 	.word	0x0bf505c5
    fe10:	01a31225 	.word	0x01a31225
    fe14:	05bf03b1 	.word	0x05bf03b1
    fe18:	064902ef 	.word	0x064902ef
    fe1c:	09a3      	.short	0x09a3

0000fe1e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    fe1e:	b510      	push	{r4, lr}
    fe20:	f890 1108 	ldrb.w	r1, [r0, #264]	; 0x108
    fe24:	b109      	cbz	r1, fe2a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    fe26:	2000      	movs	r0, #0
    fe28:	bd10      	pop	{r4, pc}
    fe2a:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
    fe2e:	b131      	cbz	r1, fe3e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    fe30:	e9d0 1233 	ldrd	r1, r2, [r0, #204]	; 0xcc
    fe34:	428a      	cmp	r2, r1
    fe36:	d902      	bls.n	fe3e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    fe38:	f7ff fead 	bl	fb96 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    fe3c:	e7f3      	b.n	fe26 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    fe3e:	2001      	movs	r0, #1
    fe40:	bd10      	pop	{r4, pc}

0000fe42 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    fe42:	b510      	push	{r4, lr}
    fe44:	b131      	cbz	r1, fe54 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    fe46:	2901      	cmp	r1, #1
    fe48:	d008      	beq.n	fe5c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    fe4a:	f240 7195 	movw	r1, #1941	; 0x795
    fe4e:	2030      	movs	r0, #48	; 0x30
    fe50:	f7f5 fb46 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe58:	f000 b9ec 	b.w	10234 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x344>
    fe5c:	2100      	movs	r1, #0
    fe5e:	f880 10c8 	strb.w	r1, [r0, #200]	; 0xc8
    fe62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe66:	f000 b948 	b.w	100fa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>

0000fe6a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    fe6a:	b510      	push	{r4, lr}
    fe6c:	4604      	mov	r4, r0
    fe6e:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    fe72:	2800      	cmp	r0, #0
    fe74:	d019      	beq.n	feaa <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    fe76:	2001      	movs	r0, #1
    fe78:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
    fe7c:	4601      	mov	r1, r0
    fe7e:	4620      	mov	r0, r4
    fe80:	f7ff fe86 	bl	fb90 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    fe84:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    fe88:	b170      	cbz	r0, fea8 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    fe8a:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
    fe8e:	f7f3 fb1d 	bl	34cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    fe92:	7820      	ldrb	r0, [r4, #0]
    fe94:	f7f3 fc82 	bl	379c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    fe98:	f814 09c0 	ldrb.w	r0, [r4], #-192
    fe9c:	f7f3 fc5c 	bl	3758 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    fea0:	b120      	cbz	r0, feac <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    fea2:	2000      	movs	r0, #0
    fea4:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
    fea8:	2000      	movs	r0, #0
    feaa:	bd10      	pop	{r4, pc}
    feac:	f240 2109 	movw	r1, #521	; 0x209
    feb0:	2030      	movs	r0, #48	; 0x30
    feb2:	f7f5 fb15 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000feb6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    feb6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
    feba:	4770      	bx	lr

0000febc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    febc:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    fec0:	4770      	bx	lr

0000fec2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    fec2:	b50e      	push	{r1, r2, r3, lr}
    fec4:	4669      	mov	r1, sp
    fec6:	2001      	movs	r0, #1
    fec8:	f7fe fcbc 	bl	e844 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fecc:	b138      	cbz	r0, fede <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    fece:	f240 1137 	movw	r1, #311	; 0x137
    fed2:	2030      	movs	r0, #48	; 0x30
    fed4:	f7f5 fb04 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fed8:	9802      	ldr	r0, [sp, #8]
    feda:	f7ff ffc6 	bl	fe6a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    fede:	4668      	mov	r0, sp
    fee0:	f7f5 fd42 	bl	5968 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fee4:	2800      	cmp	r0, #0
    fee6:	d0f7      	beq.n	fed8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    fee8:	f7f8 fde4 	bl	8ab4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    feec:	2000      	movs	r0, #0
    feee:	bd0e      	pop	{r1, r2, r3, pc}

0000fef0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    fef0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fef2:	4604      	mov	r4, r0
    fef4:	f890 01d3 	ldrb.w	r0, [r0, #467]	; 0x1d3
    fef8:	2800      	cmp	r0, #0
    fefa:	d15f      	bne.n	ffbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    fefc:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    ff00:	2803      	cmp	r0, #3
    ff02:	d15b      	bne.n	ffbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ff04:	f7f3 ff14 	bl	3d30 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ff08:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
    ff0c:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
    ff10:	1ac0      	subs	r0, r0, r3
    ff12:	eb61 0102 	sbc.w	r1, r1, r2
    ff16:	2300      	movs	r3, #0
    ff18:	461a      	mov	r2, r3
    ff1a:	1a1b      	subs	r3, r3, r0
    ff1c:	418a      	sbcs	r2, r1
    ff1e:	da4d      	bge.n	ffbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ff20:	1c42      	adds	r2, r0, #1
    ff22:	f171 0100 	sbcs.w	r1, r1, #0
    ff26:	db02      	blt.n	ff2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    ff28:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    ff2c:	e036      	b.n	ff9c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    ff2e:	6921      	ldr	r1, [r4, #16]
    ff30:	b111      	cbz	r1, ff38 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    ff32:	fbb0 f0f1 	udiv	r0, r0, r1
    ff36:	e000      	b.n	ff3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    ff38:	2000      	movs	r0, #0
    ff3a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    ff3e:	1c40      	adds	r0, r0, #1
    ff40:	4408      	add	r0, r1
    ff42:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    ff46:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    ff4a:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
    ff4e:	1a08      	subs	r0, r1, r0
    ff50:	b200      	sxth	r0, r0
    ff52:	2800      	cmp	r0, #0
    ff54:	dd32      	ble.n	ffbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ff56:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    ff5a:	f7f3 fab7 	bl	34cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ff5e:	2800      	cmp	r0, #0
    ff60:	d02c      	beq.n	ffbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ff62:	20ff      	movs	r0, #255	; 0xff
    ff64:	f884 0219 	strb.w	r0, [r4, #537]	; 0x219
    ff68:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
    ff6c:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
    ff70:	ae01      	add	r6, sp, #4
    ff72:	1a40      	subs	r0, r0, r1
    ff74:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    ff78:	1e40      	subs	r0, r0, #1
    ff7a:	4408      	add	r0, r1
    ff7c:	b285      	uxth	r5, r0
    ff7e:	e017      	b.n	ffb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    ff80:	9600      	str	r6, [sp, #0]
    ff82:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    ff86:	2300      	movs	r3, #0
    ff88:	2201      	movs	r2, #1
    ff8a:	4620      	mov	r0, r4
    ff8c:	f7f8 fe66 	bl	8c5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    ff90:	2800      	cmp	r0, #0
    ff92:	d013      	beq.n	ffbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ff94:	2801      	cmp	r0, #1
    ff96:	d004      	beq.n	ffa2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    ff98:	f240 6101 	movw	r1, #1537	; 0x601
    ff9c:	2030      	movs	r0, #48	; 0x30
    ff9e:	f7f5 fa9f 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffa2:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    ffa6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ffaa:	4408      	add	r0, r1
    ffac:	f8a4 0214 	strh.w	r0, [r4, #532]	; 0x214
    ffb0:	f8b4 0214 	ldrh.w	r0, [r4, #532]	; 0x214
    ffb4:	1a28      	subs	r0, r5, r0
    ffb6:	b200      	sxth	r0, r0
    ffb8:	2800      	cmp	r0, #0
    ffba:	dae1      	bge.n	ff80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    ffbc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ffbe:	2000      	movs	r0, #0
    ffc0:	4770      	bx	lr
    ffc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffc6:	4604      	mov	r4, r0
    ffc8:	2501      	movs	r5, #1
    ffca:	f000 f90c 	bl	101e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    ffce:	2600      	movs	r6, #0
    ffd0:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
    ffd4:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
    ffd8:	2701      	movs	r7, #1
    ffda:	f884 70eb 	strb.w	r7, [r4, #235]	; 0xeb
    ffde:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    ffe2:	f104 08e0 	add.w	r8, r4, #224	; 0xe0
    ffe6:	b169      	cbz	r1, 10004 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x114>
    ffe8:	e9f4 013c 	ldrd	r0, r1, [r4, #240]!	; 0xf0
    ffec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fff0:	1880      	adds	r0, r0, r2
    fff2:	f141 0100 	adc.w	r1, r1, #0
    fff6:	e864 013c 	strd	r0, r1, [r4], #-240	; 0xf0
    fffa:	2100      	movs	r1, #0
    fffc:	4640      	mov	r0, r8
    fffe:	f7fe ff89 	bl	ef14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   10002:	e00d      	b.n	10020 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x130>
   10004:	4620      	mov	r0, r4
   10006:	f7ff fd6e 	bl	fae6 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   1000a:	4601      	mov	r1, r0
   1000c:	e9f4 203c 	ldrd	r2, r0, [r4, #240]!	; 0xf0
   10010:	1852      	adds	r2, r2, r1
   10012:	4170      	adcs	r0, r6
   10014:	e864 203c 	strd	r2, r0, [r4], #-240	; 0xf0
   10018:	4640      	mov	r0, r8
   1001a:	f7fe ff7b 	bl	ef14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   1001e:	1c45      	adds	r5, r0, #1
   10020:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
   10024:	1c41      	adds	r1, r0, #1
   10026:	290a      	cmp	r1, #10
   10028:	d202      	bcs.n	10030 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
   1002a:	4428      	add	r0, r5
   1002c:	f8a4 00f8 	strh.w	r0, [r4, #248]	; 0xf8
   10030:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   10034:	b138      	cbz	r0, 10046 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
   10036:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
   1003a:	1c40      	adds	r0, r0, #1
   1003c:	280a      	cmp	r0, #10
   1003e:	d302      	bcc.n	10046 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
   10040:	f884 70ea 	strb.w	r7, [r4, #234]	; 0xea
   10044:	e002      	b.n	1004c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15c>
   10046:	2002      	movs	r0, #2
   10048:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
   1004c:	4620      	mov	r0, r4
   1004e:	f000 f823 	bl	10098 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
   10052:	b120      	cbz	r0, 1005e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
   10054:	4620      	mov	r0, r4
   10056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1005a:	f000 b80e 	b.w	1007a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
   1005e:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
   10062:	4641      	mov	r1, r8
   10064:	f000 f8bd 	bl	101e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
   10068:	2800      	cmp	r0, #0
   1006a:	d104      	bne.n	10076 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x186>
   1006c:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
   10070:	2030      	movs	r0, #48	; 0x30
   10072:	f7f5 fa35 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1007a:	b510      	push	{r4, lr}
   1007c:	4604      	mov	r4, r0
   1007e:	f814 0fc0 	ldrb.w	r0, [r4, #192]!
   10082:	f7f3 fb69 	bl	3758 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   10086:	2000      	movs	r0, #0
   10088:	7620      	strb	r0, [r4, #24]
   1008a:	bd10      	pop	{r4, pc}
   1008c:	b510      	push	{r4, lr}
   1008e:	f7ff fd2e 	bl	faee <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   10092:	f500 7088 	add.w	r0, r0, #272	; 0x110
   10096:	bd10      	pop	{r4, pc}
   10098:	b570      	push	{r4, r5, r6, lr}
   1009a:	4605      	mov	r5, r0
   1009c:	f890 0108 	ldrb.w	r0, [r0, #264]	; 0x108
   100a0:	b108      	cbz	r0, 100a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b6>
   100a2:	2001      	movs	r0, #1
   100a4:	bd70      	pop	{r4, r5, r6, pc}
   100a6:	e9d5 1040 	ldrd	r1, r0, [r5, #256]	; 0x100
   100aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   100ae:	4050      	eors	r0, r2
   100b0:	ea70 0101 	orns	r1, r0, r1
   100b4:	d011      	beq.n	100da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
   100b6:	2400      	movs	r4, #0
   100b8:	4628      	mov	r0, r5
   100ba:	f7ff ffe7 	bl	1008c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
   100be:	e9f5 123c 	ldrd	r1, r2, [r5, #240]!	; 0xf0
   100c2:	1840      	adds	r0, r0, r1
   100c4:	4154      	adcs	r4, r2
   100c6:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
   100ca:	3df0      	subs	r5, #240	; 0xf0
   100cc:	1a10      	subs	r0, r2, r0
   100ce:	41a1      	sbcs	r1, r4
   100d0:	d503      	bpl.n	100da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ea>
   100d2:	4628      	mov	r0, r5
   100d4:	f7ff fd5f 	bl	fb96 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   100d8:	e7e3      	b.n	100a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
   100da:	2000      	movs	r0, #0
   100dc:	bd70      	pop	{r4, r5, r6, pc}
   100de:	b510      	push	{r4, lr}
   100e0:	4604      	mov	r4, r0
   100e2:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
   100e6:	f000 f9f2 	bl	104ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5de>
   100ea:	4602      	mov	r2, r0
   100ec:	4620      	mov	r0, r4
   100ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100f2:	f240 111b 	movw	r1, #283	; 0x11b
   100f6:	f7ff bb85 	b.w	f804 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   100fa:	b510      	push	{r4, lr}
   100fc:	f7fc f83e 	bl	c17c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   10100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10104:	f7f3 bc8a 	b.w	3a1c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   10108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1010c:	4604      	mov	r4, r0
   1010e:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
   10112:	2800      	cmp	r0, #0
   10114:	d051      	beq.n	101ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
   10116:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   1011a:	2803      	cmp	r0, #3
   1011c:	d14d      	bne.n	101ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ca>
   1011e:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
   10122:	f001 f9e2 	bl	114ea <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   10126:	4605      	mov	r5, r0
   10128:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
   1012c:	f7f8 fcb4 	bl	8a98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   10130:	4428      	add	r0, r5
   10132:	b286      	uxth	r6, r0
   10134:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
   10138:	f7f8 fcae 	bl	8a98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
   1013c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   10140:	fa1f f880 	uxth.w	r8, r0
   10144:	4648      	mov	r0, r9
   10146:	f7fc f8d7 	bl	c2f8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1014a:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
   1014e:	1a0d      	subs	r5, r1, r0
   10150:	4648      	mov	r0, r9
   10152:	f7fc f8fd 	bl	c350 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10156:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   1015a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1015e:	fbb0 f0fa 	udiv	r0, r0, sl
   10162:	1a2d      	subs	r5, r5, r0
   10164:	4648      	mov	r0, r9
   10166:	f7fc f8c7 	bl	c2f8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1016a:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   1016e:	1a0f      	subs	r7, r1, r0
   10170:	4648      	mov	r0, r9
   10172:	f7fc f8ed 	bl	c350 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10176:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   1017a:	4401      	add	r1, r0
   1017c:	fbb1 f0fa 	udiv	r0, r1, sl
   10180:	1a39      	subs	r1, r7, r0
   10182:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
   10186:	4370      	muls	r0, r6
   10188:	fbb0 f2f8 	udiv	r2, r0, r8
   1018c:	2029      	movs	r0, #41	; 0x29
   1018e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
   10192:	3260      	adds	r2, #96	; 0x60
   10194:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
   10198:	eb00 0052 	add.w	r0, r0, r2, lsr #1
   1019c:	42a9      	cmp	r1, r5
   1019e:	d801      	bhi.n	101a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
   101a0:	4285      	cmp	r5, r0
   101a2:	d901      	bls.n	101a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b8>
   101a4:	f7f4 fdda 	bl	4d5c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
   101a8:	4631      	mov	r1, r6
   101aa:	6920      	ldr	r0, [r4, #16]
   101ac:	f7fd f9ed 	bl	d58a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   101b0:	2100      	movs	r1, #0
   101b2:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
   101b6:	f884 121a 	strb.w	r1, [r4, #538]	; 0x21a
   101ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101be:	b570      	push	{r4, r5, r6, lr}
   101c0:	460c      	mov	r4, r1
   101c2:	4605      	mov	r5, r0
   101c4:	f7fc f8c4 	bl	c350 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   101c8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   101cc:	4408      	add	r0, r1
   101ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   101d2:	fbb0 f6f1 	udiv	r6, r0, r1
   101d6:	4628      	mov	r0, r5
   101d8:	f7fc f88e 	bl	c2f8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   101dc:	4430      	add	r0, r6
   101de:	4420      	add	r0, r4
   101e0:	bd70      	pop	{r4, r5, r6, pc}
   101e2:	f7f2 bdd9 	b.w	2d98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   101e6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   101e8:	4604      	mov	r4, r0
   101ea:	f7ff fca9 	bl	fb40 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   101ee:	b1f8      	cbz	r0, 10230 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
   101f0:	4620      	mov	r0, r4
   101f2:	f7ff fc9d 	bl	fb30 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   101f6:	b918      	cbnz	r0, 10200 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
   101f8:	4620      	mov	r0, r4
   101fa:	f7ff fca3 	bl	fb44 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   101fe:	b140      	cbz	r0, 10212 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x322>
   10200:	2449      	movs	r4, #73	; 0x49
   10202:	4668      	mov	r0, sp
   10204:	f7f5 f846 	bl	5294 <mpsl_fem_pa_is_configured>
   10208:	f89d 0000 	ldrb.w	r0, [sp]
   1020c:	b118      	cbz	r0, 10216 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x326>
   1020e:	2501      	movs	r5, #1
   10210:	e002      	b.n	10218 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
   10212:	2442      	movs	r4, #66	; 0x42
   10214:	e7f5      	b.n	10202 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x312>
   10216:	2500      	movs	r5, #0
   10218:	a801      	add	r0, sp, #4
   1021a:	f7f5 f823 	bl	5264 <mpsl_fem_lna_is_configured>
   1021e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10222:	b100      	cbz	r0, 10226 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x336>
   10224:	2001      	movs	r0, #1
   10226:	4305      	orrs	r5, r0
   10228:	d000      	beq.n	1022c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x33c>
   1022a:	3409      	adds	r4, #9
   1022c:	4620      	mov	r0, r4
   1022e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10230:	206b      	movs	r0, #107	; 0x6b
   10232:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10234:	b570      	push	{r4, r5, r6, lr}
   10236:	4604      	mov	r4, r0
   10238:	f890 00c1 	ldrb.w	r0, [r0, #193]	; 0xc1
   1023c:	2500      	movs	r5, #0
   1023e:	b138      	cbz	r0, 10250 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x360>
   10240:	f7f7 fbbe 	bl	79c0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   10244:	f242 7110 	movw	r1, #10000	; 0x2710
   10248:	fbb0 f2f1 	udiv	r2, r0, r1
   1024c:	fb01 0512 	mls	r5, r1, r2, r0
   10250:	4620      	mov	r0, r4
   10252:	f7ff fc48 	bl	fae6 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   10256:	e9d4 213c 	ldrd	r2, r1, [r4, #240]	; 0xf0
   1025a:	4428      	add	r0, r5
   1025c:	34e0      	adds	r4, #224	; 0xe0
   1025e:	2500      	movs	r5, #0
   10260:	1882      	adds	r2, r0, r2
   10262:	eb45 0001 	adc.w	r0, r5, r1
   10266:	e9c4 2004 	strd	r2, r0, [r4, #16]
   1026a:	f804 5b0b 	strb.w	r5, [r4], #11
   1026e:	2001      	movs	r0, #1
   10270:	f804 0901 	strb.w	r0, [r4], #-1
   10274:	2002      	movs	r0, #2
   10276:	f804 09ea 	strb.w	r0, [r4], #-234
   1027a:	4620      	mov	r0, r4
   1027c:	f7ff ffb3 	bl	101e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
   10280:	f8a4 00e8 	strh.w	r0, [r4, #232]	; 0xe8
   10284:	4620      	mov	r0, r4
   10286:	f7ff ff07 	bl	10098 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
   1028a:	b930      	cbnz	r0, 1029a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3aa>
   1028c:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
   10290:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
   10294:	f7ff ffa5 	bl	101e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f2>
   10298:	b128      	cbz	r0, 102a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3b6>
   1029a:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
   1029e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   102a2:	f7ff bf2a 	b.w	100fa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
   102a6:	f240 61ef 	movw	r1, #1775	; 0x6ef
   102aa:	2030      	movs	r0, #48	; 0x30
   102ac:	f7f5 f918 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102b0:	b510      	push	{r4, lr}
   102b2:	4604      	mov	r4, r0
   102b4:	2000      	movs	r0, #0
   102b6:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
   102ba:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
   102be:	f7f3 fa4b 	bl	3758 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   102c2:	2020      	movs	r0, #32
   102c4:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
   102c8:	bd10      	pop	{r4, pc}
   102ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   102ce:	4604      	mov	r4, r0
   102d0:	2500      	movs	r5, #0
   102d2:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
   102d6:	e9d4 673c 	ldrd	r6, r7, [r4, #240]	; 0xf0
   102da:	4689      	mov	r9, r1
   102dc:	f880 50d8 	strb.w	r5, [r0, #216]	; 0xd8
   102e0:	f04f 0801 	mov.w	r8, #1
   102e4:	f880 80d9 	strb.w	r8, [r0, #217]	; 0xd9
   102e8:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
   102ec:	4641      	mov	r1, r8
   102ee:	34c0      	adds	r4, #192	; 0xc0
   102f0:	f7f6 ff28 	bl	7144 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   102f4:	6860      	ldr	r0, [r4, #4]
   102f6:	f8c0 6238 	str.w	r6, [r0, #568]	; 0x238
   102fa:	f8c0 723c 	str.w	r7, [r0, #572]	; 0x23c
   102fe:	6861      	ldr	r1, [r4, #4]
   10300:	7820      	ldrb	r0, [r4, #0]
   10302:	f881 024c 	strb.w	r0, [r1, #588]	; 0x24c
   10306:	6861      	ldr	r1, [r4, #4]
   10308:	f8c1 9250 	str.w	r9, [r1, #592]	; 0x250
   1030c:	6860      	ldr	r0, [r4, #4]
   1030e:	e9c0 6790 	strd	r6, r7, [r0, #576]	; 0x240
   10312:	6864      	ldr	r4, [r4, #4]
   10314:	f884 5204 	strb.w	r5, [r4, #516]	; 0x204
   10318:	2300      	movs	r3, #0
   1031a:	f8a4 5248 	strh.w	r5, [r4, #584]	; 0x248
   1031e:	461a      	mov	r2, r3
   10320:	4619      	mov	r1, r3
   10322:	4620      	mov	r0, r4
   10324:	9500      	str	r5, [sp, #0]
   10326:	f7f8 fc99 	bl	8c5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   1032a:	b120      	cbz	r0, 10336 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x446>
   1032c:	f240 211d 	movw	r1, #541	; 0x21d
   10330:	2030      	movs	r0, #48	; 0x30
   10332:	f7f5 f8d5 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10336:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
   1033a:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
   1033e:	f884 8204 	strb.w	r8, [r4, #516]	; 0x204
   10342:	f8a4 5216 	strh.w	r5, [r4, #534]	; 0x216
   10346:	f8a4 5214 	strh.w	r5, [r4, #532]	; 0x214
   1034a:	347c      	adds	r4, #124	; 0x7c
   1034c:	f884 519d 	strb.w	r5, [r4, #413]	; 0x19d
   10350:	8820      	ldrh	r0, [r4, #0]
   10352:	1e40      	subs	r0, r0, #1
   10354:	8020      	strh	r0, [r4, #0]
   10356:	f8a4 51ce 	strh.w	r5, [r4, #462]	; 0x1ce
   1035a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1035e:	f7ff becc 	b.w	100fa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x20a>
   10362:	b570      	push	{r4, r5, r6, lr}
   10364:	b140      	cbz	r0, 10378 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x488>
   10366:	2909      	cmp	r1, #9
   10368:	d248      	bcs.n	103fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
   1036a:	e8df f001 	tbb	[pc, r1]
   1036e:	1507      	.short	0x1507
   10370:	47373b3b 	.word	0x47373b3b
   10374:	00433f29 	.word	0x00433f29
   10378:	21ca      	movs	r1, #202	; 0xca
   1037a:	e03c      	b.n	103f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   1037c:	4604      	mov	r4, r0
   1037e:	f7f7 fc6f 	bl	7c60 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   10382:	b110      	cbz	r0, 1038a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
   10384:	f240 2179 	movw	r1, #633	; 0x279
   10388:	e035      	b.n	103f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   1038a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   1038e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10392:	38ff      	subs	r0, #255	; 0xff
   10394:	f7f3 bc12 	b.w	3bbc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   10398:	4605      	mov	r5, r0
   1039a:	f7ff fbcd 	bl	fb38 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   1039e:	b9a8      	cbnz	r0, 103cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   103a0:	4628      	mov	r0, r5
   103a2:	f7ff fe73 	bl	1008c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
   103a6:	4604      	mov	r4, r0
   103a8:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
   103ac:	42a0      	cmp	r0, r4
   103ae:	d20b      	bcs.n	103c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
   103b0:	1a20      	subs	r0, r4, r0
   103b2:	2103      	movs	r1, #3
   103b4:	f7f2 fb0e 	bl	29d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   103b8:	b130      	cbz	r0, 103c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d8>
   103ba:	4628      	mov	r0, r5
   103bc:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
   103c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   103c4:	f7ff bb4b 	b.w	fa5e <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   103c8:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
   103cc:	4628      	mov	r0, r5
   103ce:	f7f7 fc63 	bl	7c98 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   103d2:	2800      	cmp	r0, #0
   103d4:	d014      	beq.n	10400 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x510>
   103d6:	f44f 712b 	mov.w	r1, #684	; 0x2ac
   103da:	e00c      	b.n	103f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   103dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   103e0:	f7fc b894 	b.w	c50c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   103e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   103e8:	f7ff bdeb 	b.w	ffc2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
   103ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   103f0:	f7ff be43 	b.w	1007a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18a>
   103f4:	21ea      	movs	r1, #234	; 0xea
   103f6:	2030      	movs	r0, #48	; 0x30
   103f8:	f7f5 f872 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103fc:	21ee      	movs	r1, #238	; 0xee
   103fe:	e7fa      	b.n	103f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x506>
   10400:	bd70      	pop	{r4, r5, r6, pc}
   10402:	b510      	push	{r4, lr}
   10404:	0004      	movs	r4, r0
   10406:	d008      	beq.n	1041a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52a>
   10408:	2909      	cmp	r1, #9
   1040a:	d25e      	bcs.n	104ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5da>
   1040c:	e8df f001 	tbb	[pc, r1]
   10410:	40403807 	.word	0x40403807
   10414:	4c455d3c 	.word	0x4c455d3c
   10418:	0059      	.short	0x0059
   1041a:	2193      	movs	r1, #147	; 0x93
   1041c:	e052      	b.n	104c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
   1041e:	2100      	movs	r1, #0
   10420:	f8c4 1254 	str.w	r1, [r4, #596]	; 0x254
   10424:	f894 1218 	ldrb.w	r1, [r4, #536]	; 0x218
   10428:	4620      	mov	r0, r4
   1042a:	b189      	cbz	r1, 10450 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x560>
   1042c:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
   10430:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
   10434:	428a      	cmp	r2, r1
   10436:	d106      	bne.n	10446 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x556>
   10438:	f8b0 21cc 	ldrh.w	r2, [r0, #460]	; 0x1cc
   1043c:	1a51      	subs	r1, r2, r1
   1043e:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   10442:	4611      	mov	r1, r2
   10444:	e00d      	b.n	10462 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
   10446:	1a51      	subs	r1, r2, r1
   10448:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   1044c:	b291      	uxth	r1, r2
   1044e:	e008      	b.n	10462 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x572>
   10450:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
   10454:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
   10458:	1a89      	subs	r1, r1, r2
   1045a:	f8a0 11ce 	strh.w	r1, [r0, #462]	; 0x1ce
   1045e:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
   10462:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
   10466:	e9d0 128c 	ldrd	r1, r2, [r0, #560]	; 0x230
   1046a:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
   1046e:	f8c0 223c 	str.w	r2, [r0, #572]	; 0x23c
   10472:	f7f8 fedb 	bl	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   10476:	4620      	mov	r0, r4
   10478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1047c:	f7f8 bdf8 	b.w	9070 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
   10480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10484:	f000 b925 	b.w	106d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   10488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1048c:	f7fc b83e 	b.w	c50c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   10490:	4620      	mov	r0, r4
   10492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10496:	f000 b827 	b.w	104e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5f8>
   1049a:	2001      	movs	r0, #1
   1049c:	f7f2 fa8a 	bl	29b4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   104a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104a4:	f7fe bbeb 	b.w	ec7e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
   104a8:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
   104ac:	2804      	cmp	r0, #4
   104ae:	d001      	beq.n	104b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5c4>
   104b0:	21b5      	movs	r1, #181	; 0xb5
   104b2:	e007      	b.n	104c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
   104b4:	4620      	mov	r0, r4
   104b6:	f7ff fefb 	bl	102b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
   104ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104be:	f7f7 b909 	b.w	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   104c2:	21be      	movs	r1, #190	; 0xbe
   104c4:	2030      	movs	r0, #48	; 0x30
   104c6:	f7f5 f80b 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104ca:	21c2      	movs	r1, #194	; 0xc2
   104cc:	e7fa      	b.n	104c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5d4>
   104ce:	b510      	push	{r4, lr}
   104d0:	f7fb ff3e 	bl	c350 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   104d4:	f64d 7141 	movw	r1, #57153	; 0xdf41
   104d8:	4408      	add	r0, r1
   104da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   104de:	fbb0 f0f1 	udiv	r0, r0, r1
   104e2:	f200 1079 	addw	r0, r0, #377	; 0x179
   104e6:	bd10      	pop	{r4, pc}
   104e8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   104ea:	4604      	mov	r4, r0
   104ec:	f7f3 fc20 	bl	3d30 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   104f0:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
   104f4:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
   104f8:	1ac0      	subs	r0, r0, r3
   104fa:	eb61 0102 	sbc.w	r1, r1, r2
   104fe:	2200      	movs	r2, #0
   10500:	4613      	mov	r3, r2
   10502:	1a12      	subs	r2, r2, r0
   10504:	418b      	sbcs	r3, r1
   10506:	db02      	blt.n	1050e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x61e>
   10508:	f240 6111 	movw	r1, #1553	; 0x611
   1050c:	e052      	b.n	105b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
   1050e:	1c42      	adds	r2, r0, #1
   10510:	f171 0100 	sbcs.w	r1, r1, #0
   10514:	db02      	blt.n	1051c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x62c>
   10516:	f240 6112 	movw	r1, #1554	; 0x612
   1051a:	e04b      	b.n	105b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6c4>
   1051c:	6922      	ldr	r2, [r4, #16]
   1051e:	2100      	movs	r1, #0
   10520:	b10a      	cbz	r2, 10526 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
   10522:	fbb0 f1f2 	udiv	r1, r0, r2
   10526:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   1052a:	280d      	cmp	r0, #13
   1052c:	d00c      	beq.n	10548 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x658>
   1052e:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
   10532:	f8b4 2216 	ldrh.w	r2, [r4, #534]	; 0x216
   10536:	1843      	adds	r3, r0, r1
   10538:	1ad3      	subs	r3, r2, r3
   1053a:	b21b      	sxth	r3, r3
   1053c:	2b00      	cmp	r3, #0
   1053e:	db06      	blt.n	1054e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65e>
   10540:	1c52      	adds	r2, r2, #1
   10542:	f8a4 2216 	strh.w	r2, [r4, #534]	; 0x216
   10546:	e006      	b.n	10556 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x666>
   10548:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   1054c:	e012      	b.n	10574 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x684>
   1054e:	1c49      	adds	r1, r1, #1
   10550:	4408      	add	r0, r1
   10552:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   10556:	f894 0219 	ldrb.w	r0, [r4, #537]	; 0x219
   1055a:	f88d 0000 	strb.w	r0, [sp]
   1055e:	9800      	ldr	r0, [sp, #0]
   10560:	9000      	str	r0, [sp, #0]
   10562:	f89d 0000 	ldrb.w	r0, [sp]
   10566:	b940      	cbnz	r0, 1057a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
   10568:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   1056c:	f8b4 11cc 	ldrh.w	r1, [r4, #460]	; 0x1cc
   10570:	4288      	cmp	r0, r1
   10572:	d102      	bne.n	1057a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x68a>
   10574:	1c40      	adds	r0, r0, #1
   10576:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   1057a:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
   1057e:	1c40      	adds	r0, r0, #1
   10580:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
   10584:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
   10588:	f8b4 10b4 	ldrh.w	r1, [r4, #180]	; 0xb4
   1058c:	1a40      	subs	r0, r0, r1
   1058e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   10592:	1e40      	subs	r0, r0, #1
   10594:	4408      	add	r0, r1
   10596:	b285      	uxth	r5, r0
   10598:	e026      	b.n	105e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
   1059a:	a801      	add	r0, sp, #4
   1059c:	2300      	movs	r3, #0
   1059e:	9000      	str	r0, [sp, #0]
   105a0:	461a      	mov	r2, r3
   105a2:	4620      	mov	r0, r4
   105a4:	f7f8 fb5a 	bl	8c5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   105a8:	2800      	cmp	r0, #0
   105aa:	d03b      	beq.n	10624 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x734>
   105ac:	2801      	cmp	r0, #1
   105ae:	d004      	beq.n	105ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ca>
   105b0:	f240 6151 	movw	r1, #1617	; 0x651
   105b4:	2030      	movs	r0, #48	; 0x30
   105b6:	f7f4 ff93 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105ba:	f8b4 0216 	ldrh.w	r0, [r4, #534]	; 0x216
   105be:	f8b4 11c8 	ldrh.w	r1, [r4, #456]	; 0x1c8
   105c2:	1a42      	subs	r2, r0, r1
   105c4:	b212      	sxth	r2, r2
   105c6:	2a00      	cmp	r2, #0
   105c8:	da09      	bge.n	105de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
   105ca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   105ce:	4402      	add	r2, r0
   105d0:	1aaa      	subs	r2, r5, r2
   105d2:	b212      	sxth	r2, r2
   105d4:	2a00      	cmp	r2, #0
   105d6:	da02      	bge.n	105de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
   105d8:	f8a4 1216 	strh.w	r1, [r4, #534]	; 0x216
   105dc:	e004      	b.n	105e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f8>
   105de:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   105e2:	4408      	add	r0, r1
   105e4:	f8a4 0216 	strh.w	r0, [r4, #534]	; 0x216
   105e8:	f8b4 1216 	ldrh.w	r1, [r4, #534]	; 0x216
   105ec:	1a68      	subs	r0, r5, r1
   105ee:	b200      	sxth	r0, r0
   105f0:	2800      	cmp	r0, #0
   105f2:	dad2      	bge.n	1059a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
   105f4:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
   105f8:	b190      	cbz	r0, 10620 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x730>
   105fa:	2008      	movs	r0, #8
   105fc:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
   10600:	2208      	movs	r2, #8
   10602:	4621      	mov	r1, r4
   10604:	f104 009d 	add.w	r0, r4, #157	; 0x9d
   10608:	f7f6 ff92 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   1060c:	4620      	mov	r0, r4
   1060e:	f000 f862 	bl	106d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   10612:	4620      	mov	r0, r4
   10614:	f7ff fe4c 	bl	102b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c0>
   10618:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   1061c:	f7f7 b85a 	b.w	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10620:	203e      	movs	r0, #62	; 0x3e
   10622:	e7eb      	b.n	105fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x70c>
   10624:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10626:	01f4      	.short	0x01f4
   10628:	009600fa 	.word	0x009600fa
   1062c:	004b0064 	.word	0x004b0064
   10630:	001e0032 	.word	0x001e0032
   10634:	000a0014 	.word	0x000a0014
   10638:	00020005 	.word	0x00020005
   1063c:	0001      	.short	0x0001
   1063e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10642:	f001 0307 	and.w	r3, r1, #7
   10646:	7802      	ldrb	r2, [r0, #0]
   10648:	2101      	movs	r1, #1
   1064a:	4099      	lsls	r1, r3
   1064c:	438a      	bics	r2, r1
   1064e:	7002      	strb	r2, [r0, #0]
   10650:	4770      	bx	lr
   10652:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10656:	f001 0307 	and.w	r3, r1, #7
   1065a:	7802      	ldrb	r2, [r0, #0]
   1065c:	2101      	movs	r1, #1
   1065e:	4099      	lsls	r1, r3
   10660:	430a      	orrs	r2, r1
   10662:	7002      	strb	r2, [r0, #0]
   10664:	4770      	bx	lr

00010666 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   10666:	b510      	push	{r4, lr}
   10668:	4604      	mov	r4, r0
   1066a:	f8d0 027c 	ldr.w	r0, [r0, #636]	; 0x27c
   1066e:	6921      	ldr	r1, [r4, #16]
   10670:	4288      	cmp	r0, r1
   10672:	d109      	bne.n	10688 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   10674:	f8b4 1280 	ldrh.w	r1, [r4, #640]	; 0x280
   10678:	8b22      	ldrh	r2, [r4, #24]
   1067a:	4291      	cmp	r1, r2
   1067c:	d104      	bne.n	10688 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   1067e:	f8b4 1282 	ldrh.w	r1, [r4, #642]	; 0x282
   10682:	8b62      	ldrh	r2, [r4, #26]
   10684:	4291      	cmp	r1, r2
   10686:	d016      	beq.n	106b6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x50>
   10688:	8821      	ldrh	r1, [r4, #0]
   1068a:	f8a4 11ae 	strh.w	r1, [r4, #430]	; 0x1ae
   1068e:	f7fe fb6e 	bl	ed6e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   10692:	f8a4 01b0 	strh.w	r0, [r4, #432]	; 0x1b0
   10696:	f8b4 0280 	ldrh.w	r0, [r4, #640]	; 0x280
   1069a:	f8a4 01b2 	strh.w	r0, [r4, #434]	; 0x1b2
   1069e:	f8b4 0282 	ldrh.w	r0, [r4, #642]	; 0x282
   106a2:	f8a4 01b4 	strh.w	r0, [r4, #436]	; 0x1b4
   106a6:	2206      	movs	r2, #6
   106a8:	4621      	mov	r1, r4
   106aa:	f504 70d1 	add.w	r0, r4, #418	; 0x1a2
   106ae:	f7f6 ff3f 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   106b2:	f7f7 f80f 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   106b6:	2102      	movs	r1, #2
   106b8:	4620      	mov	r0, r4
   106ba:	f7f6 fd43 	bl	7144 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   106be:	2000      	movs	r0, #0
   106c0:	f804 0f86 	strb.w	r0, [r4, #134]!
   106c4:	2003      	movs	r0, #3
   106c6:	7120      	strb	r0, [r4, #4]
   106c8:	bd10      	pop	{r4, pc}

000106ca <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   106ca:	f7f5 babd 	b.w	5c48 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

000106ce <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   106ce:	2000      	movs	r0, #0
   106d0:	4770      	bx	lr

000106d2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   106d2:	f7f5 bf79 	b.w	65c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

000106d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   106d6:	2100      	movs	r1, #0
   106d8:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
   106dc:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
   106e0:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
   106e4:	f890 11d3 	ldrb.w	r1, [r0, #467]	; 0x1d3
   106e8:	b109      	cbz	r1, 106ee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
   106ea:	2102      	movs	r1, #2
   106ec:	e000      	b.n	106f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   106ee:	2103      	movs	r1, #3
   106f0:	f7f8 b97a 	b.w	89e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   106f4:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   106f8:	28fe      	cmp	r0, #254	; 0xfe
   106fa:	d001      	beq.n	10700 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
   106fc:	2001      	movs	r0, #1
   106fe:	4770      	bx	lr
   10700:	2000      	movs	r0, #0
   10702:	4770      	bx	lr
   10704:	b510      	push	{r4, lr}
   10706:	2801      	cmp	r0, #1
   10708:	d006      	beq.n	10718 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   1070a:	2802      	cmp	r0, #2
   1070c:	d004      	beq.n	10718 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   1070e:	f240 21a9 	movw	r1, #681	; 0x2a9
   10712:	2006      	movs	r0, #6
   10714:	f7f4 fee4 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10718:	bd10      	pop	{r4, pc}
   1071a:	2801      	cmp	r0, #1
   1071c:	d002      	beq.n	10724 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
   1071e:	2802      	cmp	r0, #2
   10720:	d105      	bne.n	1072e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   10722:	e002      	b.n	1072a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
   10724:	2901      	cmp	r1, #1
   10726:	d004      	beq.n	10732 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   10728:	e001      	b.n	1072e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   1072a:	2902      	cmp	r1, #2
   1072c:	d001      	beq.n	10732 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   1072e:	2000      	movs	r0, #0
   10730:	4770      	bx	lr
   10732:	2001      	movs	r0, #1
   10734:	4770      	bx	lr
   10736:	1a40      	subs	r0, r0, r1
   10738:	b200      	sxth	r0, r0
   1073a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   1073e:	4288      	cmp	r0, r1
   10740:	dc01      	bgt.n	10746 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
   10742:	2800      	cmp	r0, #0
   10744:	dc01      	bgt.n	1074a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
   10746:	2001      	movs	r0, #1
   10748:	4770      	bx	lr
   1074a:	2000      	movs	r0, #0
   1074c:	4770      	bx	lr
   1074e:	4602      	mov	r2, r0
   10750:	2000      	movs	r0, #0
   10752:	2a16      	cmp	r2, #22
   10754:	d102      	bne.n	1075c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
   10756:	4608      	mov	r0, r1
   10758:	f7f9 bd40 	b.w	a1dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
   1075c:	4770      	bx	lr
   1075e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10762:	f001 0107 	and.w	r1, r1, #7
   10766:	7800      	ldrb	r0, [r0, #0]
   10768:	40c8      	lsrs	r0, r1
   1076a:	f000 0001 	and.w	r0, r0, #1
   1076e:	4770      	bx	lr
   10770:	b118      	cbz	r0, 1077a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
   10772:	2802      	cmp	r0, #2
   10774:	d001      	beq.n	1077a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa4>
   10776:	2001      	movs	r0, #1
   10778:	4770      	bx	lr
   1077a:	2000      	movs	r0, #0
   1077c:	4770      	bx	lr

0001077e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   1077e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10780:	7881      	ldrb	r1, [r0, #2]
   10782:	4604      	mov	r4, r0
   10784:	291a      	cmp	r1, #26
   10786:	d025      	beq.n	107d4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   10788:	dc0e      	bgt.n	107a8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
   1078a:	2916      	cmp	r1, #22
   1078c:	d22c      	bcs.n	107e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   1078e:	e8df f001 	tbb	[pc, r1]
   10792:	2b2b      	.short	0x2b2b
   10794:	212b2b2b 	.word	0x212b2b2b
   10798:	2b2b2b2b 	.word	0x2b2b2b2b
   1079c:	2b2b2b2b 	.word	0x2b2b2b2b
   107a0:	2b2b2b2b 	.word	0x2b2b2b2b
   107a4:	2121212b 	.word	0x2121212b
   107a8:	292a      	cmp	r1, #42	; 0x2a
   107aa:	d01d      	beq.n	107e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   107ac:	dc0b      	bgt.n	107c6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   107ae:	f1a1 011e 	sub.w	r1, r1, #30
   107b2:	290c      	cmp	r1, #12
   107b4:	d218      	bcs.n	107e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   107b6:	e8df f001 	tbb	[pc, r1]
   107ba:	1717      	.short	0x1717
   107bc:	17171717 	.word	0x17171717
   107c0:	17171717 	.word	0x17171717
   107c4:	0d17      	.short	0x0d17
   107c6:	393a      	subs	r1, #58	; 0x3a
   107c8:	2904      	cmp	r1, #4
   107ca:	d20d      	bcs.n	107e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   107cc:	e8df f001 	tbb	[pc, r1]
   107d0:	020c020c 	.word	0x020c020c
   107d4:	8820      	ldrh	r0, [r4, #0]
   107d6:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   107da:	d205      	bcs.n	107e8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   107dc:	4669      	mov	r1, sp
   107de:	f7fe fab5 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   107e2:	b118      	cbz	r0, 107ec <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
   107e4:	2002      	movs	r0, #2
   107e6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   107e8:	2012      	movs	r0, #18
   107ea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   107ec:	9801      	ldr	r0, [sp, #4]
   107ee:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   107f2:	f88d 1008 	strb.w	r1, [sp, #8]
   107f6:	9902      	ldr	r1, [sp, #8]
   107f8:	9102      	str	r1, [sp, #8]
   107fa:	f89d 1008 	ldrb.w	r1, [sp, #8]
   107fe:	f500 708c 	add.w	r0, r0, #280	; 0x118
   10802:	b109      	cbz	r1, 10808 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
   10804:	200c      	movs	r0, #12
   10806:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10808:	21ff      	movs	r1, #255	; 0xff
   1080a:	7001      	strb	r1, [r0, #0]
   1080c:	78a1      	ldrb	r1, [r4, #2]
   1080e:	7041      	strb	r1, [r0, #1]
   10810:	4668      	mov	r0, sp
   10812:	f7fe fe5a 	bl	f4ca <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10816:	2000      	movs	r0, #0
   10818:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001081a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   1081a:	b510      	push	{r4, lr}
   1081c:	4604      	mov	r4, r0
   1081e:	f000 fe01 	bl	11424 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   10822:	b108      	cbz	r0, 10828 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   10824:	200c      	movs	r0, #12
   10826:	bd10      	pop	{r4, pc}
   10828:	7820      	ldrb	r0, [r4, #0]
   1082a:	b118      	cbz	r0, 10834 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   1082c:	2801      	cmp	r0, #1
   1082e:	d001      	beq.n	10834 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   10830:	2012      	movs	r0, #18
   10832:	bd10      	pop	{r4, pc}
   10834:	f7ff ff9c 	bl	10770 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10838:	1c61      	adds	r1, r4, #1
   1083a:	f7f6 fb51 	bl	6ee0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   1083e:	b108      	cbz	r0, 10844 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   10840:	2000      	movs	r0, #0
   10842:	bd10      	pop	{r4, pc}
   10844:	2007      	movs	r0, #7
   10846:	bd10      	pop	{r4, pc}

00010848 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   10848:	b510      	push	{r4, lr}
   1084a:	f000 fdeb 	bl	11424 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   1084e:	b108      	cbz	r0, 10854 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   10850:	200c      	movs	r0, #12
   10852:	bd10      	pop	{r4, pc}
   10854:	f7f6 fb6c 	bl	6f30 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   10858:	2000      	movs	r0, #0
   1085a:	bd10      	pop	{r4, pc}

0001085c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   1085c:	b510      	push	{r4, lr}
   1085e:	460b      	mov	r3, r1
   10860:	2201      	movs	r2, #1
   10862:	f100 0110 	add.w	r1, r0, #16
   10866:	f7fe fa53 	bl	ed10 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   1086a:	2000      	movs	r0, #0
   1086c:	bd10      	pop	{r4, pc}

0001086e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   1086e:	b510      	push	{r4, lr}
   10870:	8800      	ldrh	r0, [r0, #0]
   10872:	2100      	movs	r1, #0
   10874:	f7fd ffdc 	bl	e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10878:	b118      	cbz	r0, 10882 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   1087a:	f890 1258 	ldrb.w	r1, [r0, #600]	; 0x258
   1087e:	b111      	cbz	r1, 10886 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   10880:	e007      	b.n	10892 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   10882:	2002      	movs	r0, #2
   10884:	bd10      	pop	{r4, pc}
   10886:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1088a:	2914      	cmp	r1, #20
   1088c:	d003      	beq.n	10896 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   1088e:	2915      	cmp	r1, #21
   10890:	d001      	beq.n	10896 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   10892:	200c      	movs	r0, #12
   10894:	bd10      	pop	{r4, pc}
   10896:	2102      	movs	r1, #2
   10898:	f880 1258 	strb.w	r1, [r0, #600]	; 0x258
   1089c:	2000      	movs	r0, #0
   1089e:	bd10      	pop	{r4, pc}

000108a0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   108a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108a2:	4605      	mov	r5, r0
   108a4:	8800      	ldrh	r0, [r0, #0]
   108a6:	2100      	movs	r1, #0
   108a8:	f7fd ffc2 	bl	e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   108ac:	0004      	movs	r4, r0
   108ae:	d003      	beq.n	108b8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   108b0:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
   108b4:	b110      	cbz	r0, 108bc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   108b6:	e011      	b.n	108dc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   108b8:	2002      	movs	r0, #2
   108ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108bc:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   108c0:	2814      	cmp	r0, #20
   108c2:	d001      	beq.n	108c8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   108c4:	2815      	cmp	r0, #21
   108c6:	d109      	bne.n	108dc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   108c8:	f894 028c 	ldrb.w	r0, [r4, #652]	; 0x28c
   108cc:	f88d 0000 	strb.w	r0, [sp]
   108d0:	9800      	ldr	r0, [sp, #0]
   108d2:	9000      	str	r0, [sp, #0]
   108d4:	f89d 0000 	ldrb.w	r0, [sp]
   108d8:	2601      	movs	r6, #1
   108da:	b108      	cbz	r0, 108e0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   108dc:	200c      	movs	r0, #12
   108de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108e0:	2210      	movs	r2, #16
   108e2:	1ca9      	adds	r1, r5, #2
   108e4:	f204 2059 	addw	r0, r4, #601	; 0x259
   108e8:	f7fc ff7e 	bl	d7e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   108ec:	f884 6258 	strb.w	r6, [r4, #600]	; 0x258
   108f0:	2000      	movs	r0, #0
   108f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000108f4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   108f4:	b510      	push	{r4, lr}
   108f6:	2108      	movs	r1, #8
   108f8:	f7f4 fe9e 	bl	5638 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   108fc:	2000      	movs	r0, #0
   108fe:	bd10      	pop	{r4, pc}

00010900 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   10900:	b510      	push	{r4, lr}
   10902:	4604      	mov	r4, r0
   10904:	f7fa fe48 	bl	b598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10908:	f7ff f920 	bl	fb4c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1090c:	7020      	strb	r0, [r4, #0]
   1090e:	2000      	movs	r0, #0
   10910:	bd10      	pop	{r4, pc}

00010912 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   10912:	21fb      	movs	r1, #251	; 0xfb
   10914:	8001      	strh	r1, [r0, #0]
   10916:	f640 0248 	movw	r2, #2120	; 0x848
   1091a:	8042      	strh	r2, [r0, #2]
   1091c:	8081      	strh	r1, [r0, #4]
   1091e:	80c2      	strh	r2, [r0, #6]
   10920:	2000      	movs	r0, #0
   10922:	4770      	bx	lr

00010924 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   10924:	b51c      	push	{r2, r3, r4, lr}
   10926:	8800      	ldrh	r0, [r0, #0]
   10928:	4669      	mov	r1, sp
   1092a:	f7fe fa0f 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1092e:	2800      	cmp	r0, #0
   10930:	d10d      	bne.n	1094e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
   10932:	f89d 0000 	ldrb.w	r0, [sp]
   10936:	9c01      	ldr	r4, [sp, #4]
   10938:	2801      	cmp	r0, #1
   1093a:	f504 748c 	add.w	r4, r4, #280	; 0x118
   1093e:	d103      	bne.n	10948 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
   10940:	9801      	ldr	r0, [sp, #4]
   10942:	f000 fcf0 	bl	11326 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   10946:	b118      	cbz	r0, 10950 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
   10948:	7ce0      	ldrb	r0, [r4, #19]
   1094a:	b118      	cbz	r0, 10954 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
   1094c:	203a      	movs	r0, #58	; 0x3a
   1094e:	bd1c      	pop	{r2, r3, r4, pc}
   10950:	2002      	movs	r0, #2
   10952:	bd1c      	pop	{r2, r3, r4, pc}
   10954:	2001      	movs	r0, #1
   10956:	74e0      	strb	r0, [r4, #19]
   10958:	2000      	movs	r0, #0
   1095a:	bd1c      	pop	{r2, r3, r4, pc}

0001095c <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   1095c:	b510      	push	{r4, lr}
   1095e:	4604      	mov	r4, r0
   10960:	20d8      	movs	r0, #216	; 0xd8
   10962:	7020      	strb	r0, [r4, #0]
   10964:	f000 fcdc 	bl	11320 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   10968:	7060      	strb	r0, [r4, #1]
   1096a:	2000      	movs	r0, #0
   1096c:	bd10      	pop	{r4, pc}

0001096e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   1096e:	2108      	movs	r1, #8
   10970:	7001      	strb	r1, [r0, #0]
   10972:	2000      	movs	r0, #0
   10974:	4770      	bx	lr

00010976 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   10976:	b510      	push	{r4, lr}
   10978:	4604      	mov	r4, r0
   1097a:	f000 fd53 	bl	11424 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   1097e:	b108      	cbz	r0, 10984 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   10980:	200c      	movs	r0, #12
   10982:	bd10      	pop	{r4, pc}
   10984:	7820      	ldrb	r0, [r4, #0]
   10986:	b108      	cbz	r0, 1098c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   10988:	2801      	cmp	r0, #1
   1098a:	d107      	bne.n	1099c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   1098c:	f7ff fef0 	bl	10770 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
   10990:	1c61      	adds	r1, r4, #1
   10992:	f7fe f9b2 	bl	ecfa <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   10996:	b108      	cbz	r0, 1099c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10998:	2000      	movs	r0, #0
   1099a:	bd10      	pop	{r4, pc}
   1099c:	2012      	movs	r0, #18
   1099e:	bd10      	pop	{r4, pc}

000109a0 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   109a0:	b51c      	push	{r2, r3, r4, lr}
   109a2:	4604      	mov	r4, r0
   109a4:	f7fa fdf8 	bl	b598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   109a8:	2000      	movs	r0, #0
   109aa:	f88d 0002 	strb.w	r0, [sp, #2]
   109ae:	2103      	movs	r1, #3
   109b0:	f88d 1001 	strb.w	r1, [sp, #1]
   109b4:	f814 1b01 	ldrb.w	r1, [r4], #1
   109b8:	f88d 1003 	strb.w	r1, [sp, #3]
   109bc:	f88d 0000 	strb.w	r0, [sp]
   109c0:	4668      	mov	r0, sp
   109c2:	9401      	str	r4, [sp, #4]
   109c4:	f000 f97d 	bl	10cc2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   109c8:	bd1c      	pop	{r2, r3, r4, pc}

000109ca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   109ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   109cc:	4605      	mov	r5, r0
   109ce:	f7fa fde3 	bl	b598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   109d2:	4606      	mov	r6, r0
   109d4:	7828      	ldrb	r0, [r5, #0]
   109d6:	2400      	movs	r4, #0
   109d8:	b160      	cbz	r0, 109f4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   109da:	f88d 4000 	strb.w	r4, [sp]
   109de:	2001      	movs	r0, #1
   109e0:	f10d 0101 	add.w	r1, sp, #1
   109e4:	f7f5 fc32 	bl	624c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   109e8:	b120      	cbz	r0, 109f4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   109ea:	4668      	mov	r0, sp
   109ec:	f000 f897 	bl	10b1e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   109f0:	2800      	cmp	r0, #0
   109f2:	d112      	bne.n	10a1a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   109f4:	f88d 400c 	strb.w	r4, [sp, #12]
   109f8:	4630      	mov	r0, r6
   109fa:	f7ff f89d 	bl	fb38 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   109fe:	b118      	cbz	r0, 10a08 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   10a00:	2080      	movs	r0, #128	; 0x80
   10a02:	f8ad 000d 	strh.w	r0, [sp, #13]
   10a06:	e001      	b.n	10a0c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   10a08:	f8ad 400d 	strh.w	r4, [sp, #13]
   10a0c:	f88d 400f 	strb.w	r4, [sp, #15]
   10a10:	7828      	ldrb	r0, [r5, #0]
   10a12:	2801      	cmp	r0, #1
   10a14:	d003      	beq.n	10a1e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   10a16:	b138      	cbz	r0, 10a28 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   10a18:	2012      	movs	r0, #18
   10a1a:	b004      	add	sp, #16
   10a1c:	bd70      	pop	{r4, r5, r6, pc}
   10a1e:	a903      	add	r1, sp, #12
   10a20:	4630      	mov	r0, r6
   10a22:	f7fa fdd7 	bl	b5d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   10a26:	e7f8      	b.n	10a1a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   10a28:	4630      	mov	r0, r6
   10a2a:	f000 fc92 	bl	11352 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ea>
   10a2e:	e7f4      	b.n	10a1a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00010a30 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   10a30:	b530      	push	{r4, r5, lr}
   10a32:	b08b      	sub	sp, #44	; 0x2c
   10a34:	4604      	mov	r4, r0
   10a36:	f7fa fdaf 	bl	b598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10a3a:	4602      	mov	r2, r0
   10a3c:	7920      	ldrb	r0, [r4, #4]
   10a3e:	2804      	cmp	r0, #4
   10a40:	d803      	bhi.n	10a4a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   10a42:	8860      	ldrh	r0, [r4, #2]
   10a44:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   10a48:	d902      	bls.n	10a50 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   10a4a:	2012      	movs	r0, #18
   10a4c:	b00b      	add	sp, #44	; 0x2c
   10a4e:	bd30      	pop	{r4, r5, pc}
   10a50:	2500      	movs	r5, #0
   10a52:	f88d 5004 	strb.w	r5, [sp, #4]
   10a56:	7921      	ldrb	r1, [r4, #4]
   10a58:	9500      	str	r5, [sp, #0]
   10a5a:	f89d 0000 	ldrb.w	r0, [sp]
   10a5e:	2905      	cmp	r1, #5
   10a60:	f040 0010 	orr.w	r0, r0, #16
   10a64:	f88d 0000 	strb.w	r0, [sp]
   10a68:	d254      	bcs.n	10b14 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   10a6a:	e8df f001 	tbb	[pc, r1]
   10a6e:	0803      	.short	0x0803
   10a70:	000b1105 	.word	0x000b1105
   10a74:	f040 0001 	orr.w	r0, r0, #1
   10a78:	f040 0002 	orr.w	r0, r0, #2
   10a7c:	e006      	b.n	10a8c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   10a7e:	f040 0009 	orr.w	r0, r0, #9
   10a82:	e001      	b.n	10a88 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   10a84:	f040 0001 	orr.w	r0, r0, #1
   10a88:	f040 0004 	orr.w	r0, r0, #4
   10a8c:	f88d 0000 	strb.w	r0, [sp]
   10a90:	f8bd 0000 	ldrh.w	r0, [sp]
   10a94:	9000      	str	r0, [sp, #0]
   10a96:	f8bd 0000 	ldrh.w	r0, [sp]
   10a9a:	f8ad 0005 	strh.w	r0, [sp, #5]
   10a9e:	8821      	ldrh	r1, [r4, #0]
   10aa0:	f8dd 0006 	ldr.w	r0, [sp, #6]
   10aa4:	f361 201f 	bfi	r0, r1, #8, #24
   10aa8:	f8cd 0006 	str.w	r0, [sp, #6]
   10aac:	8861      	ldrh	r1, [r4, #2]
   10aae:	f8dd 0009 	ldr.w	r0, [sp, #9]
   10ab2:	f361 201f 	bfi	r0, r1, #8, #24
   10ab6:	f8cd 0009 	str.w	r0, [sp, #9]
   10aba:	7b60      	ldrb	r0, [r4, #13]
   10abc:	f88d 000d 	strb.w	r0, [sp, #13]
   10ac0:	7960      	ldrb	r0, [r4, #5]
   10ac2:	f88d 000e 	strb.w	r0, [sp, #14]
   10ac6:	79a0      	ldrb	r0, [r4, #6]
   10ac8:	f88d 000f 	strb.w	r0, [sp, #15]
   10acc:	f8d4 0007 	ldr.w	r0, [r4, #7]
   10ad0:	9004      	str	r0, [sp, #16]
   10ad2:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   10ad6:	f8ad 0014 	strh.w	r0, [sp, #20]
   10ada:	7ba0      	ldrb	r0, [r4, #14]
   10adc:	f88d 0016 	strb.w	r0, [sp, #22]
   10ae0:	207f      	movs	r0, #127	; 0x7f
   10ae2:	f88d 0017 	strb.w	r0, [sp, #23]
   10ae6:	2001      	movs	r0, #1
   10ae8:	f88d 0018 	strb.w	r0, [sp, #24]
   10aec:	f88d 5019 	strb.w	r5, [sp, #25]
   10af0:	f88d 001a 	strb.w	r0, [sp, #26]
   10af4:	f88d 501b 	strb.w	r5, [sp, #27]
   10af8:	4610      	mov	r0, r2
   10afa:	f7ff f839 	bl	fb70 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   10afe:	f88d 001c 	strb.w	r0, [sp, #28]
   10b02:	f88d 501d 	strb.w	r5, [sp, #29]
   10b06:	f88d 501e 	strb.w	r5, [sp, #30]
   10b0a:	a909      	add	r1, sp, #36	; 0x24
   10b0c:	a801      	add	r0, sp, #4
   10b0e:	f7fa fc1f 	bl	b350 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   10b12:	e79b      	b.n	10a4c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   10b14:	f241 01cf 	movw	r1, #4303	; 0x10cf
   10b18:	2039      	movs	r0, #57	; 0x39
   10b1a:	f7f4 fce1 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010b1e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   10b1e:	b570      	push	{r4, r5, r6, lr}
   10b20:	4604      	mov	r4, r0
   10b22:	7800      	ldrb	r0, [r0, #0]
   10b24:	2101      	movs	r1, #1
   10b26:	f7fd fe83 	bl	e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10b2a:	0005      	movs	r5, r0
   10b2c:	d007      	beq.n	10b3e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   10b2e:	f7ff f9c5 	bl	febc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10b32:	b160      	cbz	r0, 10b4e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10b34:	4628      	mov	r0, r5
   10b36:	f7ff f805 	bl	fb44 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10b3a:	b110      	cbz	r0, 10b42 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   10b3c:	e005      	b.n	10b4a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   10b3e:	2042      	movs	r0, #66	; 0x42
   10b40:	bd70      	pop	{r4, r5, r6, pc}
   10b42:	4628      	mov	r0, r5
   10b44:	f7fe fff4 	bl	fb30 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10b48:	b108      	cbz	r0, 10b4e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10b4a:	200c      	movs	r0, #12
   10b4c:	bd70      	pop	{r4, r5, r6, pc}
   10b4e:	1c61      	adds	r1, r4, #1
   10b50:	4628      	mov	r0, r5
   10b52:	f7ff f805 	bl	fb60 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   10b56:	2000      	movs	r0, #0
   10b58:	bd70      	pop	{r4, r5, r6, pc}

00010b5a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   10b5a:	b50e      	push	{r1, r2, r3, lr}
   10b5c:	8882      	ldrh	r2, [r0, #4]
   10b5e:	f244 2390 	movw	r3, #17040	; 0x4290
   10b62:	429a      	cmp	r2, r3
   10b64:	d901      	bls.n	10b6a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   10b66:	2012      	movs	r0, #18
   10b68:	bd0e      	pop	{r1, r2, r3, pc}
   10b6a:	f640 0348 	movw	r3, #2120	; 0x848
   10b6e:	429a      	cmp	r2, r3
   10b70:	d300      	bcc.n	10b74 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   10b72:	461a      	mov	r2, r3
   10b74:	8803      	ldrh	r3, [r0, #0]
   10b76:	f8ad 3000 	strh.w	r3, [sp]
   10b7a:	8843      	ldrh	r3, [r0, #2]
   10b7c:	f8ad 3002 	strh.w	r3, [sp, #2]
   10b80:	f8ad 2004 	strh.w	r2, [sp, #4]
   10b84:	8843      	ldrh	r3, [r0, #2]
   10b86:	f8ad 3006 	strh.w	r3, [sp, #6]
   10b8a:	f8ad 2008 	strh.w	r2, [sp, #8]
   10b8e:	8800      	ldrh	r0, [r0, #0]
   10b90:	8008      	strh	r0, [r1, #0]
   10b92:	4668      	mov	r0, sp
   10b94:	f7fa fdf0 	bl	b778 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>
   10b98:	bd0e      	pop	{r1, r2, r3, pc}

00010b9a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   10b9a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10b9c:	4604      	mov	r4, r0
   10b9e:	f10d 0007 	add.w	r0, sp, #7
   10ba2:	9000      	str	r0, [sp, #0]
   10ba4:	7922      	ldrb	r2, [r4, #4]
   10ba6:	78e1      	ldrb	r1, [r4, #3]
   10ba8:	78a0      	ldrb	r0, [r4, #2]
   10baa:	f10d 0306 	add.w	r3, sp, #6
   10bae:	f000 fbfd 	bl	113ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   10bb2:	2800      	cmp	r0, #0
   10bb4:	d109      	bne.n	10bca <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   10bb6:	8820      	ldrh	r0, [r4, #0]
   10bb8:	f8ad 0004 	strh.w	r0, [sp, #4]
   10bbc:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   10bc0:	f8ad 0008 	strh.w	r0, [sp, #8]
   10bc4:	a801      	add	r0, sp, #4
   10bc6:	f000 f937 	bl	10e38 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   10bca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010bcc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   10bcc:	b510      	push	{r4, lr}
   10bce:	4604      	mov	r4, r0
   10bd0:	2001      	movs	r0, #1
   10bd2:	f000 fa83 	bl	110dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   10bd6:	b128      	cbz	r0, 10be4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   10bd8:	4621      	mov	r1, r4
   10bda:	2001      	movs	r0, #1
   10bdc:	f7f5 fb4e 	bl	627c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10be0:	2000      	movs	r0, #0
   10be2:	bd10      	pop	{r4, pc}
   10be4:	200c      	movs	r0, #12
   10be6:	bd10      	pop	{r4, pc}

00010be8 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   10be8:	b51c      	push	{r2, r3, r4, lr}
   10bea:	4604      	mov	r4, r0
   10bec:	f7fa fcd4 	bl	b598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   10bf0:	2000      	movs	r0, #0
   10bf2:	f88d 0000 	strb.w	r0, [sp]
   10bf6:	f88d 0002 	strb.w	r0, [sp, #2]
   10bfa:	2003      	movs	r0, #3
   10bfc:	f88d 0001 	strb.w	r0, [sp, #1]
   10c00:	f814 0b01 	ldrb.w	r0, [r4], #1
   10c04:	f88d 0003 	strb.w	r0, [sp, #3]
   10c08:	4668      	mov	r0, sp
   10c0a:	9401      	str	r4, [sp, #4]
   10c0c:	f000 f8c2 	bl	10d94 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10c10:	bd1c      	pop	{r2, r3, r4, pc}

00010c12 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10c12:	b51c      	push	{r2, r3, r4, lr}
   10c14:	8801      	ldrh	r1, [r0, #0]
   10c16:	f8ad 1000 	strh.w	r1, [sp]
   10c1a:	8841      	ldrh	r1, [r0, #2]
   10c1c:	f8ad 1002 	strh.w	r1, [sp, #2]
   10c20:	8801      	ldrh	r1, [r0, #0]
   10c22:	f8ad 1004 	strh.w	r1, [sp, #4]
   10c26:	8840      	ldrh	r0, [r0, #2]
   10c28:	f8ad 0006 	strh.w	r0, [sp, #6]
   10c2c:	4668      	mov	r0, sp
   10c2e:	f7fa fe27 	bl	b880 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ac>
   10c32:	bd1c      	pop	{r2, r3, r4, pc}

00010c34 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10c34:	b510      	push	{r4, lr}
   10c36:	f7f5 fb45 	bl	62c4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   10c3a:	2000      	movs	r0, #0
   10c3c:	bd10      	pop	{r4, pc}

00010c3e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   10c3e:	b510      	push	{r4, lr}
   10c40:	460c      	mov	r4, r1
   10c42:	2100      	movs	r1, #0
   10c44:	f7fd fdf4 	bl	e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10c48:	b118      	cbz	r0, 10c52 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   10c4a:	2c02      	cmp	r4, #2
   10c4c:	d903      	bls.n	10c56 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   10c4e:	2012      	movs	r0, #18
   10c50:	bd10      	pop	{r4, pc}
   10c52:	2002      	movs	r0, #2
   10c54:	bd10      	pop	{r4, pc}
   10c56:	f014 0101 	ands.w	r1, r4, #1
   10c5a:	f880 11d5 	strb.w	r1, [r0, #469]	; 0x1d5
   10c5e:	f3c4 0240 	ubfx	r2, r4, #1, #1
   10c62:	f880 21d4 	strb.w	r2, [r0, #468]	; 0x1d4
   10c66:	d004      	beq.n	10c72 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   10c68:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
   10c6c:	b109      	cbz	r1, 10c72 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   10c6e:	f7ff f93f 	bl	fef0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   10c72:	2000      	movs	r0, #0
   10c74:	bd10      	pop	{r4, pc}

00010c76 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   10c76:	b51c      	push	{r2, r3, r4, lr}
   10c78:	460c      	mov	r4, r1
   10c7a:	4669      	mov	r1, sp
   10c7c:	f7fe f866 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10c80:	2800      	cmp	r0, #0
   10c82:	d105      	bne.n	10c90 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   10c84:	2100      	movs	r1, #0
   10c86:	4622      	mov	r2, r4
   10c88:	9801      	ldr	r0, [sp, #4]
   10c8a:	f000 faf3 	bl	11274 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
   10c8e:	2000      	movs	r0, #0
   10c90:	bd1c      	pop	{r2, r3, r4, pc}

00010c92 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   10c92:	b510      	push	{r4, lr}
   10c94:	4604      	mov	r4, r0
   10c96:	2000      	movs	r0, #0
   10c98:	f000 fa20 	bl	110dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74>
   10c9c:	b128      	cbz	r0, 10caa <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   10c9e:	4621      	mov	r1, r4
   10ca0:	2000      	movs	r0, #0
   10ca2:	f7f5 faeb 	bl	627c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10ca6:	2000      	movs	r0, #0
   10ca8:	bd10      	pop	{r4, pc}
   10caa:	200c      	movs	r0, #12
   10cac:	bd10      	pop	{r4, pc}

00010cae <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   10cae:	b510      	push	{r4, lr}
   10cb0:	7800      	ldrb	r0, [r0, #0]
   10cb2:	b100      	cbz	r0, 10cb6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   10cb4:	2001      	movs	r0, #1
   10cb6:	f7f7 fe57 	bl	8968 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   10cba:	2000      	movs	r0, #0
   10cbc:	bd10      	pop	{r4, pc}

00010cbe <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   10cbe:	f7fa bd5b 	b.w	b778 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a4>

00010cc2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   10cc2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10cc6:	4606      	mov	r6, r0
   10cc8:	7845      	ldrb	r5, [r0, #1]
   10cca:	7800      	ldrb	r0, [r0, #0]
   10ccc:	2101      	movs	r1, #1
   10cce:	f7fd fdaf 	bl	e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10cd2:	0004      	movs	r4, r0
   10cd4:	d01e      	beq.n	10d14 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   10cd6:	f7fe feba 	bl	fa4e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   10cda:	78f1      	ldrb	r1, [r6, #3]
   10cdc:	4281      	cmp	r1, r0
   10cde:	d800      	bhi.n	10ce2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   10ce0:	4608      	mov	r0, r1
   10ce2:	4607      	mov	r7, r0
   10ce4:	2d04      	cmp	r5, #4
   10ce6:	d018      	beq.n	10d1a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10ce8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10cea:	f7fd fefe 	bl	eaea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10cee:	4438      	add	r0, r7
   10cf0:	b281      	uxth	r1, r0
   10cf2:	4620      	mov	r0, r4
   10cf4:	2201      	movs	r2, #1
   10cf6:	f000 fa03 	bl	11100 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   10cfa:	2800      	cmp	r0, #0
   10cfc:	d10b      	bne.n	10d16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10cfe:	2d03      	cmp	r5, #3
   10d00:	d000      	beq.n	10d04 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10d02:	b1df      	cbz	r7, 10d3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d04:	4620      	mov	r0, r4
   10d06:	f7fe ff1b 	bl	fb40 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10d0a:	7871      	ldrb	r1, [r6, #1]
   10d0c:	2903      	cmp	r1, #3
   10d0e:	d010      	beq.n	10d32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10d10:	b9a0      	cbnz	r0, 10d3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d12:	e004      	b.n	10d1e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10d14:	2042      	movs	r0, #66	; 0x42
   10d16:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10d1a:	b97f      	cbnz	r7, 10d3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d1c:	e7f2      	b.n	10d04 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10d1e:	2904      	cmp	r1, #4
   10d20:	d107      	bne.n	10d32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10d22:	4620      	mov	r0, r4
   10d24:	f7ff f8ca 	bl	febc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10d28:	b140      	cbz	r0, 10d3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10d2c:	f7fd feac 	bl	ea88 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   10d30:	b120      	cbz	r0, 10d3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10d32:	2d01      	cmp	r5, #1
   10d34:	d004      	beq.n	10d40 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10d36:	2d03      	cmp	r5, #3
   10d38:	d002      	beq.n	10d40 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10d3a:	e00e      	b.n	10d5a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   10d3c:	2012      	movs	r0, #18
   10d3e:	e7ea      	b.n	10d16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10d40:	4620      	mov	r0, r4
   10d42:	f7fe fefd 	bl	fb40 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10d46:	b108      	cbz	r0, 10d4c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   10d48:	2200      	movs	r2, #0
   10d4a:	e002      	b.n	10d52 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10d4c:	2d01      	cmp	r5, #1
   10d4e:	d013      	beq.n	10d78 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   10d50:	2201      	movs	r2, #1
   10d52:	4668      	mov	r0, sp
   10d54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10d56:	f7fd fe2f 	bl	e9b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10d5a:	2d04      	cmp	r5, #4
   10d5c:	d018      	beq.n	10d90 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10d5e:	6872      	ldr	r2, [r6, #4]
   10d60:	463b      	mov	r3, r7
   10d62:	2101      	movs	r1, #1
   10d64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10d66:	f7fd fe5b 	bl	ea20 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10d6a:	b138      	cbz	r0, 10d7c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   10d6c:	7870      	ldrb	r0, [r6, #1]
   10d6e:	2802      	cmp	r0, #2
   10d70:	d006      	beq.n	10d80 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10d72:	2803      	cmp	r0, #3
   10d74:	d004      	beq.n	10d80 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10d76:	e00b      	b.n	10d90 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10d78:	2202      	movs	r2, #2
   10d7a:	e7ea      	b.n	10d52 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10d7c:	2007      	movs	r0, #7
   10d7e:	e7ca      	b.n	10d16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10d80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10d82:	f7fd feb2 	bl	eaea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10d86:	4602      	mov	r2, r0
   10d88:	2101      	movs	r1, #1
   10d8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10d8c:	f7fd fe8a 	bl	eaa4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10d90:	2000      	movs	r0, #0
   10d92:	e7c0      	b.n	10d16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00010d94 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   10d94:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10d98:	4607      	mov	r7, r0
   10d9a:	7845      	ldrb	r5, [r0, #1]
   10d9c:	78c6      	ldrb	r6, [r0, #3]
   10d9e:	7800      	ldrb	r0, [r0, #0]
   10da0:	2101      	movs	r1, #1
   10da2:	f7fd fd45 	bl	e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10da6:	0004      	movs	r4, r0
   10da8:	d003      	beq.n	10db2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   10daa:	f7fe fecb 	bl	fb44 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10dae:	b118      	cbz	r0, 10db8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10db0:	e003      	b.n	10dba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10db2:	2042      	movs	r0, #66	; 0x42
   10db4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10db8:	2600      	movs	r6, #0
   10dba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10dbc:	f7fd fe99 	bl	eaf2 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10dc0:	4430      	add	r0, r6
   10dc2:	b281      	uxth	r1, r0
   10dc4:	4688      	mov	r8, r1
   10dc6:	4620      	mov	r0, r4
   10dc8:	2201      	movs	r2, #1
   10dca:	f000 f999 	bl	11100 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x98>
   10dce:	2800      	cmp	r0, #0
   10dd0:	d1f0      	bne.n	10db4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10dd2:	2d04      	cmp	r5, #4
   10dd4:	d008      	beq.n	10de8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10dd6:	2d03      	cmp	r5, #3
   10dd8:	d00a      	beq.n	10df0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   10dda:	b12e      	cbz	r6, 10de8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10ddc:	4620      	mov	r0, r4
   10dde:	f7ff f86d 	bl	febc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10de2:	b118      	cbz	r0, 10dec <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   10de4:	200c      	movs	r0, #12
   10de6:	e7e5      	b.n	10db4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10de8:	2012      	movs	r0, #18
   10dea:	e7e3      	b.n	10db4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10dec:	2d01      	cmp	r5, #1
   10dee:	d10c      	bne.n	10e0a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10df0:	4620      	mov	r0, r4
   10df2:	f7fe fea5 	bl	fb40 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10df6:	b108      	cbz	r0, 10dfc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   10df8:	2204      	movs	r2, #4
   10dfa:	e002      	b.n	10e02 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10dfc:	2d01      	cmp	r5, #1
   10dfe:	d010      	beq.n	10e22 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10e00:	2205      	movs	r2, #5
   10e02:	4668      	mov	r0, sp
   10e04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10e06:	f7fd fdd7 	bl	e9b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10e0a:	687a      	ldr	r2, [r7, #4]
   10e0c:	4633      	mov	r3, r6
   10e0e:	2100      	movs	r1, #0
   10e10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10e12:	f7fd fe05 	bl	ea20 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10e16:	b130      	cbz	r0, 10e26 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   10e18:	2d02      	cmp	r5, #2
   10e1a:	d006      	beq.n	10e2a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10e1c:	2d03      	cmp	r5, #3
   10e1e:	d004      	beq.n	10e2a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10e20:	e008      	b.n	10e34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10e22:	2206      	movs	r2, #6
   10e24:	e7ed      	b.n	10e02 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10e26:	2007      	movs	r0, #7
   10e28:	e7c4      	b.n	10db4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10e2a:	4642      	mov	r2, r8
   10e2c:	2100      	movs	r1, #0
   10e2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10e30:	f7fd fe38 	bl	eaa4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10e34:	2000      	movs	r0, #0
   10e36:	e7bd      	b.n	10db4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00010e38 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10e38:	b510      	push	{r4, lr}
   10e3a:	4604      	mov	r4, r0
   10e3c:	8880      	ldrh	r0, [r0, #4]
   10e3e:	b128      	cbz	r0, 10e4c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10e40:	2801      	cmp	r0, #1
   10e42:	d003      	beq.n	10e4c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10e44:	2802      	cmp	r0, #2
   10e46:	d001      	beq.n	10e4c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10e48:	2012      	movs	r0, #18
   10e4a:	bd10      	pop	{r4, pc}
   10e4c:	78e0      	ldrb	r0, [r4, #3]
   10e4e:	f000 f9ee 	bl	1122e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   10e52:	b148      	cbz	r0, 10e68 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10e54:	78a0      	ldrb	r0, [r4, #2]
   10e56:	f000 f9ea 	bl	1122e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c6>
   10e5a:	b128      	cbz	r0, 10e68 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10e5c:	4620      	mov	r0, r4
   10e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10e62:	2101      	movs	r1, #1
   10e64:	f000 b890 	b.w	10f88 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   10e68:	2011      	movs	r0, #17
   10e6a:	bd10      	pop	{r4, pc}

00010e6c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10e6c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10e6e:	460c      	mov	r4, r1
   10e70:	4605      	mov	r5, r0
   10e72:	8800      	ldrh	r0, [r0, #0]
   10e74:	4669      	mov	r1, sp
   10e76:	f7fd ff69 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10e7a:	2800      	cmp	r0, #0
   10e7c:	d106      	bne.n	10e8c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10e7e:	9801      	ldr	r0, [sp, #4]
   10e80:	8829      	ldrh	r1, [r5, #0]
   10e82:	8021      	strh	r1, [r4, #0]
   10e84:	f8b0 00b0 	ldrh.w	r0, [r0, #176]	; 0xb0
   10e88:	8060      	strh	r0, [r4, #2]
   10e8a:	2000      	movs	r0, #0
   10e8c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010e8e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10e8e:	b510      	push	{r4, lr}
   10e90:	4604      	mov	r4, r0
   10e92:	4601      	mov	r1, r0
   10e94:	2000      	movs	r0, #0
   10e96:	f7f5 f9d9 	bl	624c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10e9a:	b910      	cbnz	r0, 10ea2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10e9c:	2000      	movs	r0, #0
   10e9e:	6020      	str	r0, [r4, #0]
   10ea0:	80a0      	strh	r0, [r4, #4]
   10ea2:	2000      	movs	r0, #0
   10ea4:	bd10      	pop	{r4, pc}

00010ea6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   10ea6:	b50e      	push	{r1, r2, r3, lr}
   10ea8:	8800      	ldrh	r0, [r0, #0]
   10eaa:	4669      	mov	r1, sp
   10eac:	f7fd ff4e 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10eb0:	b960      	cbnz	r0, 10ecc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   10eb2:	9801      	ldr	r0, [sp, #4]
   10eb4:	f000 fa37 	bl	11326 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2be>
   10eb8:	b140      	cbz	r0, 10ecc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   10eba:	9801      	ldr	r0, [sp, #4]
   10ebc:	4601      	mov	r1, r0
   10ebe:	f890 212a 	ldrb.w	r2, [r0, #298]	; 0x12a
   10ec2:	3078      	adds	r0, #120	; 0x78
   10ec4:	f501 7195 	add.w	r1, r1, #298	; 0x12a
   10ec8:	b962      	cbnz	r2, 10ee4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   10eca:	e001      	b.n	10ed0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   10ecc:	2002      	movs	r0, #2
   10ece:	bd0e      	pop	{r1, r2, r3, pc}
   10ed0:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
   10ed4:	f88d 2008 	strb.w	r2, [sp, #8]
   10ed8:	9a02      	ldr	r2, [sp, #8]
   10eda:	9202      	str	r2, [sp, #8]
   10edc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10ee0:	2201      	movs	r2, #1
   10ee2:	b10b      	cbz	r3, 10ee8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   10ee4:	203a      	movs	r0, #58	; 0x3a
   10ee6:	bd0e      	pop	{r1, r2, r3, pc}
   10ee8:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
   10eec:	079b      	lsls	r3, r3, #30
   10eee:	d008      	beq.n	10f02 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>
   10ef0:	2201      	movs	r2, #1
   10ef2:	304e      	adds	r0, #78	; 0x4e
   10ef4:	9901      	ldr	r1, [sp, #4]
   10ef6:	f7f6 fb1b 	bl	7530 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   10efa:	f7f6 fbeb 	bl	76d4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10efe:	2000      	movs	r0, #0
   10f00:	bd0e      	pop	{r1, r2, r3, pc}
   10f02:	700a      	strb	r2, [r1, #0]
   10f04:	4668      	mov	r0, sp
   10f06:	f7fe fae0 	bl	f4ca <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10f0a:	e7f8      	b.n	10efe <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>

00010f0c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10f0c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10f0e:	460c      	mov	r4, r1
   10f10:	4605      	mov	r5, r0
   10f12:	8800      	ldrh	r0, [r0, #0]
   10f14:	4669      	mov	r1, sp
   10f16:	f7fd ff19 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10f1a:	b108      	cbz	r0, 10f20 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10f1c:	2002      	movs	r0, #2
   10f1e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10f20:	78a8      	ldrb	r0, [r5, #2]
   10f22:	b130      	cbz	r0, 10f32 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10f24:	f000 f9fc 	bl	11320 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b8>
   10f28:	70a0      	strb	r0, [r4, #2]
   10f2a:	8828      	ldrh	r0, [r5, #0]
   10f2c:	8020      	strh	r0, [r4, #0]
   10f2e:	2000      	movs	r0, #0
   10f30:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10f32:	9801      	ldr	r0, [sp, #4]
   10f34:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   10f38:	e7f6      	b.n	10f28 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00010f3a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   10f3a:	b510      	push	{r4, lr}
   10f3c:	f7fa fcd0 	bl	b8e0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10f40:	2000      	movs	r0, #0
   10f42:	bd10      	pop	{r4, pc}

00010f44 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10f44:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10f48:	4604      	mov	r4, r0
   10f4a:	8840      	ldrh	r0, [r0, #2]
   10f4c:	460d      	mov	r5, r1
   10f4e:	b1b8      	cbz	r0, 10f80 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10f50:	8820      	ldrh	r0, [r4, #0]
   10f52:	4669      	mov	r1, sp
   10f54:	f7fd fefa 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10f58:	2800      	cmp	r0, #0
   10f5a:	d10f      	bne.n	10f7c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10f5c:	8820      	ldrh	r0, [r4, #0]
   10f5e:	8028      	strh	r0, [r5, #0]
   10f60:	9e01      	ldr	r6, [sp, #4]
   10f62:	f106 0510 	add.w	r5, r6, #16
   10f66:	3678      	adds	r6, #120	; 0x78
   10f68:	682f      	ldr	r7, [r5, #0]
   10f6a:	8862      	ldrh	r2, [r4, #2]
   10f6c:	4639      	mov	r1, r7
   10f6e:	4630      	mov	r0, r6
   10f70:	f7fe f83b 	bl	efea <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10f74:	6828      	ldr	r0, [r5, #0]
   10f76:	42b8      	cmp	r0, r7
   10f78:	d1f6      	bne.n	10f68 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10f7a:	2000      	movs	r0, #0
   10f7c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10f80:	2012      	movs	r0, #18
   10f82:	e7fb      	b.n	10f7c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010f84 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10f84:	f000 b863 	b.w	1104e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010f88 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10f8c:	b086      	sub	sp, #24
   10f8e:	4689      	mov	r9, r1
   10f90:	4607      	mov	r7, r0
   10f92:	8800      	ldrh	r0, [r0, #0]
   10f94:	a901      	add	r1, sp, #4
   10f96:	f7fd fed9 	bl	ed4c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10f9a:	2800      	cmp	r0, #0
   10f9c:	d136      	bne.n	1100c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10f9e:	9802      	ldr	r0, [sp, #8]
   10fa0:	4601      	mov	r1, r0
   10fa2:	4688      	mov	r8, r1
   10fa4:	f890 1176 	ldrb.w	r1, [r0, #374]	; 0x176
   10fa8:	f500 748c 	add.w	r4, r0, #280	; 0x118
   10fac:	f88d 1000 	strb.w	r1, [sp]
   10fb0:	9900      	ldr	r1, [sp, #0]
   10fb2:	9100      	str	r1, [sp, #0]
   10fb4:	f89d 1000 	ldrb.w	r1, [sp]
   10fb8:	3078      	adds	r0, #120	; 0x78
   10fba:	b109      	cbz	r1, 10fc0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   10fbc:	2601      	movs	r6, #1
   10fbe:	e000      	b.n	10fc2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   10fc0:	2600      	movs	r6, #0
   10fc2:	7b81      	ldrb	r1, [r0, #14]
   10fc4:	2921      	cmp	r1, #33	; 0x21
   10fc6:	d100      	bne.n	10fca <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10fc8:	b13e      	cbz	r6, 10fda <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   10fca:	2500      	movs	r5, #0
   10fcc:	305c      	adds	r0, #92	; 0x5c
   10fce:	2108      	movs	r1, #8
   10fd0:	4682      	mov	sl, r0
   10fd2:	f7ff fbc4 	bl	1075e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   10fd6:	b110      	cbz	r0, 10fde <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10fd8:	e007      	b.n	10fea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10fda:	2501      	movs	r5, #1
   10fdc:	e7f6      	b.n	10fcc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   10fde:	210b      	movs	r1, #11
   10fe0:	4650      	mov	r0, sl
   10fe2:	f7ff fbbc 	bl	1075e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x88>
   10fe6:	b900      	cbnz	r0, 10fea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10fe8:	b17d      	cbz	r5, 1100a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   10fea:	a804      	add	r0, sp, #16
   10fec:	9000      	str	r0, [sp, #0]
   10fee:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10ff2:	ab03      	add	r3, sp, #12
   10ff4:	463a      	mov	r2, r7
   10ff6:	4641      	mov	r1, r8
   10ff8:	f000 f972 	bl	112e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x278>
   10ffc:	0005      	movs	r5, r0
   10ffe:	d105      	bne.n	1100c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   11000:	340c      	adds	r4, #12
   11002:	20ff      	movs	r0, #255	; 0xff
   11004:	7060      	strb	r0, [r4, #1]
   11006:	b936      	cbnz	r6, 11016 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   11008:	e003      	b.n	11012 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   1100a:	201a      	movs	r0, #26
   1100c:	b006      	add	sp, #24
   1100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11012:	7820      	ldrb	r0, [r4, #0]
   11014:	b108      	cbz	r0, 1101a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   11016:	253a      	movs	r5, #58	; 0x3a
   11018:	e012      	b.n	11040 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   1101a:	f884 9000 	strb.w	r9, [r4]
   1101e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   11022:	70a0      	strb	r0, [r4, #2]
   11024:	f89d 1010 	ldrb.w	r1, [sp, #16]
   11028:	70e1      	strb	r1, [r4, #3]
   1102a:	f88d 0000 	strb.w	r0, [sp]
   1102e:	f88d 1001 	strb.w	r1, [sp, #1]
   11032:	88b8      	ldrh	r0, [r7, #4]
   11034:	f8ad 0002 	strh.w	r0, [sp, #2]
   11038:	4669      	mov	r1, sp
   1103a:	4640      	mov	r0, r8
   1103c:	f7fd ff46 	bl	eecc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   11040:	2000      	movs	r0, #0
   11042:	7060      	strb	r0, [r4, #1]
   11044:	4628      	mov	r0, r5
   11046:	e7e1      	b.n	1100c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

00011048 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   11048:	2008      	movs	r0, #8
   1104a:	f7fa bcaf 	b.w	b9ac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0001104e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   1104e:	b510      	push	{r4, lr}
   11050:	f7fd fddf 	bl	ec12 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   11054:	f7f5 feea 	bl	6e2c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   11058:	f7fa fcca 	bl	b9f0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   1105c:	f7fe fa9f 	bl	f59e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   11060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11064:	f7fa ba76 	b.w	b554 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf4>

00011068 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   11068:	f7f8 b8c8 	b.w	91fc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   1106c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11070:	4288      	cmp	r0, r1
   11072:	d303      	bcc.n	1107c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   11074:	f640 0148 	movw	r1, #2120	; 0x848
   11078:	4288      	cmp	r0, r1
   1107a:	d300      	bcc.n	1107e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   1107c:	4608      	mov	r0, r1
   1107e:	b280      	uxth	r0, r0
   11080:	4770      	bx	lr
   11082:	07c1      	lsls	r1, r0, #31
   11084:	d001      	beq.n	1108a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   11086:	2001      	movs	r0, #1
   11088:	4770      	bx	lr
   1108a:	0780      	lsls	r0, r0, #30
   1108c:	d501      	bpl.n	11092 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   1108e:	2002      	movs	r0, #2
   11090:	4770      	bx	lr
   11092:	2000      	movs	r0, #0
   11094:	4770      	bx	lr
   11096:	b510      	push	{r4, lr}
   11098:	2801      	cmp	r0, #1
   1109a:	d006      	beq.n	110aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   1109c:	2802      	cmp	r0, #2
   1109e:	d004      	beq.n	110aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   110a0:	f240 21a9 	movw	r1, #681	; 0x2a9
   110a4:	2006      	movs	r0, #6
   110a6:	f7f4 fa1b 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   110aa:	bd10      	pop	{r4, pc}
   110ac:	b50e      	push	{r1, r2, r3, lr}
   110ae:	4669      	mov	r1, sp
   110b0:	2001      	movs	r0, #1
   110b2:	f7fd fbc7 	bl	e844 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   110b6:	b150      	cbz	r0, 110ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   110b8:	f44f 71a3 	mov.w	r1, #326	; 0x146
   110bc:	2039      	movs	r0, #57	; 0x39
   110be:	f7f4 fa0f 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   110c2:	9802      	ldr	r0, [sp, #8]
   110c4:	f7fe fefa 	bl	febc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   110c8:	b108      	cbz	r0, 110ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66>
   110ca:	2001      	movs	r0, #1
   110cc:	bd0e      	pop	{r1, r2, r3, pc}
   110ce:	4668      	mov	r0, sp
   110d0:	f7f4 fc4a 	bl	5968 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   110d4:	2800      	cmp	r0, #0
   110d6:	d0f4      	beq.n	110c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a>
   110d8:	2000      	movs	r0, #0
   110da:	bd0e      	pop	{r1, r2, r3, pc}
   110dc:	b510      	push	{r4, lr}
   110de:	f7ff ffe5 	bl	110ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   110e2:	b158      	cbz	r0, 110fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   110e4:	f7fa fa58 	bl	b598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x138>
   110e8:	4604      	mov	r4, r0
   110ea:	f7fe fd2b 	bl	fb44 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   110ee:	b918      	cbnz	r0, 110f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x90>
   110f0:	4620      	mov	r0, r4
   110f2:	f7fe fd1d 	bl	fb30 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   110f6:	b108      	cbz	r0, 110fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   110f8:	2000      	movs	r0, #0
   110fa:	bd10      	pop	{r4, pc}
   110fc:	2001      	movs	r0, #1
   110fe:	bd10      	pop	{r4, pc}
   11100:	b570      	push	{r4, r5, r6, lr}
   11102:	460c      	mov	r4, r1
   11104:	4605      	mov	r5, r0
   11106:	b112      	cbz	r2, 1110e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa6>
   11108:	291f      	cmp	r1, #31
   1110a:	d80c      	bhi.n	11126 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbe>
   1110c:	e016      	b.n	1113c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd4>
   1110e:	f7f4 fef5 	bl	5efc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   11112:	42a0      	cmp	r0, r4
   11114:	d201      	bcs.n	1111a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb2>
   11116:	2007      	movs	r0, #7
   11118:	bd70      	pop	{r4, r5, r6, pc}
   1111a:	4628      	mov	r0, r5
   1111c:	f7fe fd10 	bl	fb40 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   11120:	b118      	cbz	r0, 1112a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   11122:	2c1f      	cmp	r4, #31
   11124:	d901      	bls.n	1112a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xc2>
   11126:	2012      	movs	r0, #18
   11128:	bd70      	pop	{r4, r5, r6, pc}
   1112a:	4628      	mov	r0, r5
   1112c:	f7fe fd11 	bl	fb52 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   11130:	b130      	cbz	r0, 11140 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd8>
   11132:	4621      	mov	r1, r4
   11134:	4628      	mov	r0, r5
   11136:	f7fe fcd8 	bl	faea <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1113a:	b118      	cbz	r0, 11144 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xdc>
   1113c:	2000      	movs	r0, #0
   1113e:	bd70      	pop	{r4, r5, r6, pc}
   11140:	2042      	movs	r0, #66	; 0x42
   11142:	bd70      	pop	{r4, r5, r6, pc}
   11144:	2045      	movs	r0, #69	; 0x45
   11146:	bd70      	pop	{r4, r5, r6, pc}
   11148:	b510      	push	{r4, lr}
   1114a:	4604      	mov	r4, r0
   1114c:	7840      	ldrb	r0, [r0, #1]
   1114e:	06c1      	lsls	r1, r0, #27
   11150:	d51c      	bpl.n	1118c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   11152:	07c0      	lsls	r0, r0, #31
   11154:	d00b      	beq.n	1116e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   11156:	f7fa fbfd 	bl	b954 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   1115a:	b1b8      	cbz	r0, 1118c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   1115c:	7860      	ldrb	r0, [r4, #1]
   1115e:	06c1      	lsls	r1, r0, #27
   11160:	d405      	bmi.n	1116e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   11162:	0700      	lsls	r0, r0, #28
   11164:	d503      	bpl.n	1116e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x106>
   11166:	7d20      	ldrb	r0, [r4, #20]
   11168:	2802      	cmp	r0, #2
   1116a:	d10f      	bne.n	1118c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   1116c:	e010      	b.n	11190 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   1116e:	7d20      	ldrb	r0, [r4, #20]
   11170:	2802      	cmp	r0, #2
   11172:	d001      	beq.n	11178 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x110>
   11174:	7ea0      	ldrb	r0, [r4, #26]
   11176:	b948      	cbnz	r0, 1118c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x124>
   11178:	7860      	ldrb	r0, [r4, #1]
   1117a:	0700      	lsls	r0, r0, #28
   1117c:	d408      	bmi.n	11190 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   1117e:	f8d4 0005 	ldr.w	r0, [r4, #5]
   11182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   11186:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1118a:	d201      	bcs.n	11190 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x128>
   1118c:	2011      	movs	r0, #17
   1118e:	bd10      	pop	{r4, pc}
   11190:	2000      	movs	r0, #0
   11192:	bd10      	pop	{r4, pc}
   11194:	b538      	push	{r3, r4, r5, lr}
   11196:	4604      	mov	r4, r0
   11198:	7800      	ldrb	r0, [r0, #0]
   1119a:	28ef      	cmp	r0, #239	; 0xef
   1119c:	d843      	bhi.n	11226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1119e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   111a2:	f8ad 0000 	strh.w	r0, [sp]
   111a6:	9800      	ldr	r0, [sp, #0]
   111a8:	f000 f917 	bl	113da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   111ac:	b3a0      	cbz	r0, 11218 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   111ae:	7861      	ldrb	r1, [r4, #1]
   111b0:	0708      	lsls	r0, r1, #28
   111b2:	d40b      	bmi.n	111cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   111b4:	f8d4 0002 	ldr.w	r0, [r4, #2]
   111b8:	f8d4 3005 	ldr.w	r3, [r4, #5]
   111bc:	0a02      	lsrs	r2, r0, #8
   111be:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   111c2:	d830      	bhi.n	11226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   111c4:	2220      	movs	r2, #32
   111c6:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   111ca:	d82c      	bhi.n	11226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   111cc:	7a60      	ldrb	r0, [r4, #9]
   111ce:	b318      	cbz	r0, 11218 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b0>
   111d0:	2807      	cmp	r0, #7
   111d2:	d828      	bhi.n	11226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   111d4:	7aa0      	ldrb	r0, [r4, #10]
   111d6:	b128      	cbz	r0, 111e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   111d8:	2801      	cmp	r0, #1
   111da:	d003      	beq.n	111e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   111dc:	2802      	cmp	r0, #2
   111de:	d001      	beq.n	111e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x17c>
   111e0:	2803      	cmp	r0, #3
   111e2:	d120      	bne.n	11226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   111e4:	074a      	lsls	r2, r1, #29
   111e6:	d403      	bmi.n	111f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   111e8:	2802      	cmp	r0, #2
   111ea:	d001      	beq.n	111f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   111ec:	2803      	cmp	r0, #3
   111ee:	d105      	bne.n	111fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x194>
   111f0:	7ae0      	ldrb	r0, [r4, #11]
   111f2:	b108      	cbz	r0, 111f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x190>
   111f4:	2801      	cmp	r0, #1
   111f6:	d116      	bne.n	11226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   111f8:	0748      	lsls	r0, r1, #29
   111fa:	d407      	bmi.n	1120c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   111fc:	7ca0      	ldrb	r0, [r4, #18]
   111fe:	b128      	cbz	r0, 1120c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   11200:	2801      	cmp	r0, #1
   11202:	d003      	beq.n	1120c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   11204:	2802      	cmp	r0, #2
   11206:	d001      	beq.n	1120c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a4>
   11208:	2803      	cmp	r0, #3
   1120a:	d10c      	bne.n	11226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1120c:	06c8      	lsls	r0, r1, #27
   1120e:	7d20      	ldrb	r0, [r4, #20]
   11210:	d503      	bpl.n	1121a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b2>
   11212:	2801      	cmp	r0, #1
   11214:	d107      	bne.n	11226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   11216:	e002      	b.n	1121e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b6>
   11218:	e005      	b.n	11226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1121a:	2802      	cmp	r0, #2
   1121c:	d003      	beq.n	11226 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1be>
   1121e:	7e20      	ldrb	r0, [r4, #24]
   11220:	b118      	cbz	r0, 1122a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   11222:	2801      	cmp	r0, #1
   11224:	d001      	beq.n	1122a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c2>
   11226:	2012      	movs	r0, #18
   11228:	bd38      	pop	{r3, r4, r5, pc}
   1122a:	2000      	movs	r0, #0
   1122c:	bd38      	pop	{r3, r4, r5, pc}
   1122e:	b510      	push	{r4, lr}
   11230:	0004      	movs	r4, r0
   11232:	d005      	beq.n	11240 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   11234:	f7fa fbcc 	bl	b9d0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11238:	4384      	bics	r4, r0
   1123a:	d001      	beq.n	11240 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   1123c:	2000      	movs	r0, #0
   1123e:	bd10      	pop	{r4, pc}
   11240:	2001      	movs	r0, #1
   11242:	bd10      	pop	{r4, pc}
   11244:	28fb      	cmp	r0, #251	; 0xfb
   11246:	d803      	bhi.n	11250 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1e8>
   11248:	f640 0048 	movw	r0, #2120	; 0x848
   1124c:	4281      	cmp	r1, r0
   1124e:	d901      	bls.n	11254 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ec>
   11250:	2011      	movs	r0, #17
   11252:	4770      	bx	lr
   11254:	2000      	movs	r0, #0
   11256:	4770      	bx	lr
   11258:	381b      	subs	r0, #27
   1125a:	28e1      	cmp	r0, #225	; 0xe1
   1125c:	d206      	bcs.n	1126c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   1125e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   11262:	d303      	bcc.n	1126c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x204>
   11264:	f244 2090 	movw	r0, #17040	; 0x4290
   11268:	4281      	cmp	r1, r0
   1126a:	d901      	bls.n	11270 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x208>
   1126c:	2012      	movs	r0, #18
   1126e:	4770      	bx	lr
   11270:	2000      	movs	r0, #0
   11272:	4770      	bx	lr
   11274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11278:	4606      	mov	r6, r0
   1127a:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   1127e:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   11282:	4615      	mov	r5, r2
   11284:	3030      	adds	r0, #48	; 0x30
   11286:	f7f7 fb75 	bl	8974 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   1128a:	4680      	mov	r8, r0
   1128c:	2102      	movs	r1, #2
   1128e:	f7fd fded 	bl	ee6c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11292:	4287      	cmp	r7, r0
   11294:	d200      	bcs.n	11298 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x230>
   11296:	4638      	mov	r0, r7
   11298:	4607      	mov	r7, r0
   1129a:	2102      	movs	r1, #2
   1129c:	4640      	mov	r0, r8
   1129e:	f7fd fde5 	bl	ee6c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   112a2:	4284      	cmp	r4, r0
   112a4:	d200      	bcs.n	112a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   112a6:	4620      	mov	r0, r4
   112a8:	8831      	ldrh	r1, [r6, #0]
   112aa:	8029      	strh	r1, [r5, #0]
   112ac:	2f1b      	cmp	r7, #27
   112ae:	d913      	bls.n	112d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x270>
   112b0:	2ffb      	cmp	r7, #251	; 0xfb
   112b2:	d300      	bcc.n	112b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   112b4:	27fb      	movs	r7, #251	; 0xfb
   112b6:	806f      	strh	r7, [r5, #2]
   112b8:	281b      	cmp	r0, #27
   112ba:	d90f      	bls.n	112dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x274>
   112bc:	28fb      	cmp	r0, #251	; 0xfb
   112be:	d300      	bcc.n	112c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   112c0:	20fb      	movs	r0, #251	; 0xfb
   112c2:	80e8      	strh	r0, [r5, #6]
   112c4:	4640      	mov	r0, r8
   112c6:	f7ff fed1 	bl	1106c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   112ca:	80a8      	strh	r0, [r5, #4]
   112cc:	4640      	mov	r0, r8
   112ce:	f7ff fecd 	bl	1106c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   112d2:	8128      	strh	r0, [r5, #8]
   112d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   112d8:	271b      	movs	r7, #27
   112da:	e7ec      	b.n	112b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x24e>
   112dc:	201b      	movs	r0, #27
   112de:	e7f0      	b.n	112c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   112e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112e4:	7890      	ldrb	r0, [r2, #2]
   112e6:	9e06      	ldr	r6, [sp, #24]
   112e8:	461d      	mov	r5, r3
   112ea:	4614      	mov	r4, r2
   112ec:	b908      	cbnz	r0, 112f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28a>
   112ee:	f7fa fb6f 	bl	b9d0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   112f2:	78e4      	ldrb	r4, [r4, #3]
   112f4:	4607      	mov	r7, r0
   112f6:	b914      	cbnz	r4, 112fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x296>
   112f8:	f7fa fb6a 	bl	b9d0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   112fc:	4604      	mov	r4, r0
   112fe:	b16f      	cbz	r7, 1131c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11300:	b164      	cbz	r4, 1131c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11302:	4638      	mov	r0, r7
   11304:	f7ff febd 	bl	11082 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   11308:	4620      	mov	r0, r4
   1130a:	f7ff feba 	bl	11082 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1130e:	b12f      	cbz	r7, 1131c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11310:	b124      	cbz	r4, 1131c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b4>
   11312:	702f      	strb	r7, [r5, #0]
   11314:	7034      	strb	r4, [r6, #0]
   11316:	2000      	movs	r0, #0
   11318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1131c:	2009      	movs	r0, #9
   1131e:	e7fb      	b.n	11318 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b0>
   11320:	207f      	movs	r0, #127	; 0x7f
   11322:	f000 b83c 	b.w	1139e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   11326:	b508      	push	{r3, lr}
   11328:	f890 1204 	ldrb.w	r1, [r0, #516]	; 0x204
   1132c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
   11330:	f88d 0000 	strb.w	r0, [sp]
   11334:	9800      	ldr	r0, [sp, #0]
   11336:	9000      	str	r0, [sp, #0]
   11338:	f89d 0000 	ldrb.w	r0, [sp]
   1133c:	b100      	cbz	r0, 11340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d8>
   1133e:	2001      	movs	r0, #1
   11340:	1e40      	subs	r0, r0, #1
   11342:	4208      	tst	r0, r1
   11344:	d003      	beq.n	1134e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   11346:	2904      	cmp	r1, #4
   11348:	d001      	beq.n	1134e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   1134a:	2001      	movs	r0, #1
   1134c:	bd08      	pop	{r3, pc}
   1134e:	2000      	movs	r0, #0
   11350:	bd08      	pop	{r3, pc}
   11352:	b570      	push	{r4, r5, r6, lr}
   11354:	4605      	mov	r5, r0
   11356:	f7fe fbfc 	bl	fb52 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1135a:	b170      	cbz	r0, 1137a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x312>
   1135c:	4628      	mov	r0, r5
   1135e:	f7fe fdad 	bl	febc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   11362:	2800      	cmp	r0, #0
   11364:	d008      	beq.n	11378 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   11366:	4628      	mov	r0, r5
   11368:	f7fe fda5 	bl	feb6 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   1136c:	4604      	mov	r4, r0
   1136e:	4628      	mov	r0, r5
   11370:	f7fe fd7b 	bl	fe6a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   11374:	b118      	cbz	r0, 1137e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
   11376:	200c      	movs	r0, #12
   11378:	bd70      	pop	{r4, r5, r6, pc}
   1137a:	2042      	movs	r0, #66	; 0x42
   1137c:	bd70      	pop	{r4, r5, r6, pc}
   1137e:	b164      	cbz	r4, 1139a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   11380:	8820      	ldrh	r0, [r4, #0]
   11382:	f7fd fc13 	bl	ebac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   11386:	8820      	ldrh	r0, [r4, #0]
   11388:	2100      	movs	r1, #0
   1138a:	f7f4 fb3d 	bl	5a08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1138e:	b120      	cbz	r0, 1139a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   11390:	f241 41fd 	movw	r1, #5373	; 0x14fd
   11394:	2039      	movs	r0, #57	; 0x39
   11396:	f7f4 f8a3 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1139a:	2000      	movs	r0, #0
   1139c:	bd70      	pop	{r4, r5, r6, pc}
   1139e:	b508      	push	{r3, lr}
   113a0:	f640 1288 	movw	r2, #2440	; 0x988
   113a4:	4669      	mov	r1, sp
   113a6:	f7f3 ff7b 	bl	52a0 <mpsl_fem_tx_power_split>
   113aa:	bd08      	pop	{r3, pc}
   113ac:	b530      	push	{r4, r5, lr}
   113ae:	f340 0400 	sbfx	r4, r0, #0, #1
   113b2:	f340 0040 	sbfx	r0, r0, #1, #1
   113b6:	1c40      	adds	r0, r0, #1
   113b8:	9d03      	ldr	r5, [sp, #12]
   113ba:	1c64      	adds	r4, r4, #1
   113bc:	d000      	beq.n	113c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x358>
   113be:	b119      	cbz	r1, 113c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x360>
   113c0:	b100      	cbz	r0, 113c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35c>
   113c2:	b10a      	cbz	r2, 113c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x360>
   113c4:	b91c      	cbnz	r4, 113ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x366>
   113c6:	e001      	b.n	113cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   113c8:	2011      	movs	r0, #17
   113ca:	bd30      	pop	{r4, r5, pc}
   113cc:	2100      	movs	r1, #0
   113ce:	7019      	strb	r1, [r3, #0]
   113d0:	b900      	cbnz	r0, 113d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36c>
   113d2:	2200      	movs	r2, #0
   113d4:	702a      	strb	r2, [r5, #0]
   113d6:	2000      	movs	r0, #0
   113d8:	bd30      	pop	{r4, r5, pc}
   113da:	b2c0      	uxtb	r0, r0
   113dc:	06c1      	lsls	r1, r0, #27
   113de:	d40c      	bmi.n	113fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x392>
   113e0:	0681      	lsls	r1, r0, #26
   113e2:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   113e6:	d503      	bpl.n	113f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   113e8:	b9d1      	cbnz	r1, 11420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   113ea:	0781      	lsls	r1, r0, #30
   113ec:	d418      	bmi.n	11420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   113ee:	e001      	b.n	113f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   113f0:	2900      	cmp	r1, #0
   113f2:	d1fa      	bne.n	113ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x382>
   113f4:	0700      	lsls	r0, r0, #28
   113f6:	d413      	bmi.n	11420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   113f8:	e010      	b.n	1141c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
   113fa:	0641      	lsls	r1, r0, #25
   113fc:	d410      	bmi.n	11420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   113fe:	0681      	lsls	r1, r0, #26
   11400:	d40e      	bmi.n	11420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   11402:	07c1      	lsls	r1, r0, #31
   11404:	ea4f 7180 	mov.w	r1, r0, lsl #30
   11408:	d004      	beq.n	11414 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
   1140a:	2900      	cmp	r1, #0
   1140c:	db02      	blt.n	11414 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
   1140e:	0740      	lsls	r0, r0, #29
   11410:	d404      	bmi.n	1141c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
   11412:	e005      	b.n	11420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   11414:	0701      	lsls	r1, r0, #28
   11416:	d403      	bmi.n	11420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   11418:	0740      	lsls	r0, r0, #29
   1141a:	d401      	bmi.n	11420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b8>
   1141c:	2001      	movs	r0, #1
   1141e:	4770      	bx	lr
   11420:	2000      	movs	r0, #0
   11422:	4770      	bx	lr
   11424:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   11426:	4669      	mov	r1, sp
   11428:	2001      	movs	r0, #1
   1142a:	f7fd fa0b 	bl	e844 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1142e:	b178      	cbz	r0, 11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e8>
   11430:	f44f 71b2 	mov.w	r1, #356	; 0x164
   11434:	2039      	movs	r0, #57	; 0x39
   11436:	f7f4 f853 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1143a:	9c02      	ldr	r4, [sp, #8]
   1143c:	4620      	mov	r0, r4
   1143e:	f7fe fd3d 	bl	febc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   11442:	b128      	cbz	r0, 11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e8>
   11444:	4620      	mov	r0, r4
   11446:	f7fe fbc0 	bl	fbca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   1144a:	b108      	cbz	r0, 11450 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e8>
   1144c:	2001      	movs	r0, #1
   1144e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11450:	4668      	mov	r0, sp
   11452:	f7f4 fa89 	bl	5968 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   11456:	2800      	cmp	r0, #0
   11458:	d0ef      	beq.n	1143a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d2>
   1145a:	2000      	movs	r0, #0
   1145c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1145e:	b510      	push	{r4, lr}
   11460:	f7fe fd2f 	bl	fec2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   11464:	b108      	cbz	r0, 1146a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x402>
   11466:	21e7      	movs	r1, #231	; 0xe7
   11468:	e003      	b.n	11472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x40a>
   1146a:	f7f6 fc01 	bl	7c70 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1146e:	b118      	cbz	r0, 11478 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   11470:	21ec      	movs	r1, #236	; 0xec
   11472:	2001      	movs	r0, #1
   11474:	f7f4 f834 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1147c:	2001      	movs	r0, #1
   1147e:	f7f4 ba09 	b.w	5894 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   11482:	6802      	ldr	r2, [r0, #0]
   11484:	b912      	cbnz	r2, 1148c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x424>
   11486:	6001      	str	r1, [r0, #0]
   11488:	4770      	bx	lr
   1148a:	4602      	mov	r2, r0
   1148c:	6850      	ldr	r0, [r2, #4]
   1148e:	b108      	cbz	r0, 11494 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42c>
   11490:	428a      	cmp	r2, r1
   11492:	d1fa      	bne.n	1148a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x422>
   11494:	428a      	cmp	r2, r1
   11496:	d0f7      	beq.n	11488 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x420>
   11498:	6051      	str	r1, [r2, #4]
   1149a:	4770      	bx	lr
   1149c:	b510      	push	{r4, lr}
   1149e:	4604      	mov	r4, r0
   114a0:	e002      	b.n	114a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x440>
   114a2:	6820      	ldr	r0, [r4, #0]
   114a4:	4780      	blx	r0
   114a6:	6864      	ldr	r4, [r4, #4]
   114a8:	2c00      	cmp	r4, #0
   114aa:	d1fa      	bne.n	114a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x43a>
   114ac:	bd10      	pop	{r4, pc}
   114ae:	b510      	push	{r4, lr}
   114b0:	2000      	movs	r0, #0
   114b2:	f7f4 f9ef 	bl	5894 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   114b6:	f7f4 fc27 	bl	5d08 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   114ba:	f7f4 fea9 	bl	6210 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   114be:	f7f5 f875 	bl	65ac <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   114c2:	2800      	cmp	r0, #0
   114c4:	d003      	beq.n	114ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x466>
   114c6:	21c6      	movs	r1, #198	; 0xc6
   114c8:	2001      	movs	r0, #1
   114ca:	f7f4 f809 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   114ce:	bd10      	pop	{r4, pc}
   114d0:	b510      	push	{r4, lr}
   114d2:	f7ff ffc4 	bl	1145e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3f6>
   114d6:	f7ff f8fa 	bl	106ce <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   114da:	2800      	cmp	r0, #0
   114dc:	d004      	beq.n	114e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x480>
   114de:	f240 1103 	movw	r1, #259	; 0x103
   114e2:	2001      	movs	r0, #1
   114e4:	f7f3 fffc 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   114e8:	bd10      	pop	{r4, pc}

000114ea <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   114ea:	f7f3 bc31 	b.w	4d50 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   114ee:	0001      	.short	0x0001
   114f0:	0002000b 	.word	0x0002000b
   114f4:	0005000a 	.word	0x0005000a
   114f8:	000a0009 	.word	0x000a0009
   114fc:	00140008 	.word	0x00140008
   11500:	001e0007 	.word	0x001e0007
   11504:	00320006 	.word	0x00320006
   11508:	004b0005 	.word	0x004b0005
   1150c:	00640004 	.word	0x00640004
   11510:	00960003 	.word	0x00960003
   11514:	00fa0002 	.word	0x00fa0002
   11518:	01f40001 	.word	0x01f40001
	...

0001151e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1151e:	b510      	push	{r4, lr}
   11520:	f7fa fdf0 	bl	c104 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   11524:	f000 f81d 	bl	11562 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   11528:	f7fa fac6 	bl	bab8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1152c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11530:	f7fa bbc0 	b.w	bcb4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00011534 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   11534:	b510      	push	{r4, lr}
   11536:	24c8      	movs	r4, #200	; 0xc8
   11538:	1e64      	subs	r4, r4, #1
   1153a:	b2e4      	uxtb	r4, r4
   1153c:	f7fa fada 	bl	baf4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   11540:	2802      	cmp	r0, #2
   11542:	d003      	beq.n	1154c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   11544:	2801      	cmp	r0, #1
   11546:	d000      	beq.n	1154a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   11548:	2000      	movs	r0, #0
   1154a:	bd10      	pop	{r4, pc}
   1154c:	2c00      	cmp	r4, #0
   1154e:	d1f3      	bne.n	11538 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   11550:	219e      	movs	r1, #158	; 0x9e
   11552:	203b      	movs	r0, #59	; 0x3b
   11554:	f7f3 ffc4 	bl	54e0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11558:	5840      	ldr	r0, [r0, r1]
   1155a:	2800      	cmp	r0, #0
   1155c:	d000      	beq.n	11560 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1155e:	2001      	movs	r0, #1
   11560:	4770      	bx	lr

00011562 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   11562:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   11566:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1156a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1156e:	f3bf 8f4f 	dsb	sy
   11572:	f3bf 8f6f 	isb	sy
   11576:	f7fa bc37 	b.w	bde8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   1157a:	2800      	cmp	r0, #0
   1157c:	db09      	blt.n	11592 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1157e:	f000 021f 	and.w	r2, r0, #31
   11582:	2101      	movs	r1, #1
   11584:	4091      	lsls	r1, r2
   11586:	0940      	lsrs	r0, r0, #5
   11588:	0080      	lsls	r0, r0, #2
   1158a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1158e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   11592:	4770      	bx	lr
   11594:	2800      	cmp	r0, #0
   11596:	db0d      	blt.n	115b4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   11598:	f000 021f 	and.w	r2, r0, #31
   1159c:	2101      	movs	r1, #1
   1159e:	4091      	lsls	r1, r2
   115a0:	0940      	lsrs	r0, r0, #5
   115a2:	0080      	lsls	r0, r0, #2
   115a4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   115a8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   115ac:	f3bf 8f4f 	dsb	sy
   115b0:	f3bf 8f6f 	isb	sy
   115b4:	4770      	bx	lr
   115b6:	5840      	ldr	r0, [r0, r1]
   115b8:	2800      	cmp	r0, #0
   115ba:	d000      	beq.n	115be <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   115bc:	2001      	movs	r0, #1
   115be:	4770      	bx	lr
   115c0:	5840      	ldr	r0, [r0, r1]
   115c2:	2800      	cmp	r0, #0
   115c4:	d000      	beq.n	115c8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   115c6:	2001      	movs	r0, #1
   115c8:	4770      	bx	lr

000115ca <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   115ca:	b510      	push	{r4, lr}
   115cc:	4604      	mov	r4, r0
   115ce:	4608      	mov	r0, r1
   115d0:	f7fa febe 	bl	c350 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   115d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   115d8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   115dc:	fbb0 f0f1 	udiv	r0, r0, r1
   115e0:	1a20      	subs	r0, r4, r0
   115e2:	1e80      	subs	r0, r0, #2
   115e4:	bd10      	pop	{r4, pc}

000115e6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   115e6:	b510      	push	{r4, lr}
   115e8:	4604      	mov	r4, r0
   115ea:	4608      	mov	r0, r1
   115ec:	f7fa feb0 	bl	c350 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   115f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   115f4:	fbb0 f0f1 	udiv	r0, r0, r1
   115f8:	1a20      	subs	r0, r4, r0
   115fa:	bd10      	pop	{r4, pc}
   115fc:	d8d8d8d8 	.word	0xd8d8d8d8
   11600:	d8d8d8d8 	.word	0xd8d8d8d8
   11604:	d8d8d8d8 	.word	0xd8d8d8d8
   11608:	d8d8d8d8 	.word	0xd8d8d8d8
   1160c:	d8d8d8d8 	.word	0xd8d8d8d8
   11610:	ecececec 	.word	0xecececec
   11614:	f0f0f0f0 	.word	0xf0f0f0f0
   11618:	f4f4f4f4 	.word	0xf4f4f4f4
   1161c:	f8f8f8f8 	.word	0xf8f8f8f8
   11620:	fcfcfcfc 	.word	0xfcfcfcfc
   11624:	03020000 	.word	0x03020000
   11628:	07060504 	.word	0x07060504
   1162c:	d8d8d808 	.word	0xd8d8d808
   11630:	d8d8d8d8 	.word	0xd8d8d8d8
   11634:	d8d8d8d8 	.word	0xd8d8d8d8
   11638:	d8d8d8d8 	.word	0xd8d8d8d8
   1163c:	d8d8d8d8 	.word	0xd8d8d8d8
   11640:	ecececd8 	.word	0xecececd8
   11644:	f0f0f0ec 	.word	0xf0f0f0ec
   11648:	f4f4f4f0 	.word	0xf4f4f4f0
   1164c:	f8f8f8f4 	.word	0xf8f8f8f4
   11650:	fcfcfcf8 	.word	0xfcfcfcf8
   11654:	000000fc 	.word	0x000000fc
   11658:	0403      	.short	0x0403
   1165a:	080c      	.short	0x080c
   1165c:	010d1702 	.word	0x010d1702
   11660:	09090201 	.word	0x09090201
   11664:	02060101 	.word	0x02060101
   11668:	03181809 	.word	0x03181809
   1166c:	09090101 	.word	0x09090101
   11670:	03050303 	.word	0x03050303
   11674:	02220102 	.word	0x02220102
   11678:	10092402 	.word	0x10092402
   1167c:	05050404 	.word	0x05050404

00011680 <AnalogRead>:

// ------------------------------------------------
// high level read adc channel and convert to float voltage
// ------------------------------------------------
float AnalogRead(int channel)
{
   11680:	b5f0      	push	{r4, r5, r6, r7, lr}
		.channels    = BIT(channel),		// bit mask of channels to read
   11682:	2301      	movs	r3, #1
{
   11684:	b087      	sub	sp, #28
		.channels    = BIT(channel),		// bit mask of channels to read
   11686:	4083      	lsls	r3, r0
	const struct adc_sequence sequence = {
   11688:	9302      	str	r3, [sp, #8]
   1168a:	230c      	movs	r3, #12
   1168c:	2700      	movs	r7, #0
   1168e:	4e2a      	ldr	r6, [pc, #168]	; (11738 <AnalogRead+0xb8>)
   11690:	9304      	str	r3, [sp, #16]
   11692:	230a      	movs	r3, #10
{
   11694:	4605      	mov	r5, r0
	const struct adc_sequence sequence = {
   11696:	9701      	str	r7, [sp, #4]
   11698:	9603      	str	r6, [sp, #12]
   1169a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1169e:	f88d 7016 	strb.w	r7, [sp, #22]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   116a2:	4826      	ldr	r0, [pc, #152]	; (1173c <AnalogRead+0xbc>)
   116a4:	f010 f8d4 	bl	21850 <z_impl_device_get_binding>
	if(_LastChannel != channel)
   116a8:	4b25      	ldr	r3, [pc, #148]	; (11740 <AnalogRead+0xc0>)
   116aa:	781a      	ldrb	r2, [r3, #0]
   116ac:	4295      	cmp	r5, r2
   116ae:	4604      	mov	r4, r0
   116b0:	d00b      	beq.n	116ca <AnalogRead+0x4a>
		_IsInitialized = false;
   116b2:	4a24      	ldr	r2, [pc, #144]	; (11744 <AnalogRead+0xc4>)
		_LastChannel = channel;
   116b4:	701d      	strb	r5, [r3, #0]
		_IsInitialized = false;
   116b6:	7017      	strb	r7, [r2, #0]
	if ( adc_dev != NULL && !_IsInitialized)
   116b8:	b968      	cbnz	r0, 116d6 <AnalogRead+0x56>
{
   116ba:	2400      	movs	r4, #0
	memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
   116bc:	2300      	movs	r3, #0
   116be:	6033      	str	r3, [r6, #0]
   116c0:	6073      	str	r3, [r6, #4]
   116c2:	60b3      	str	r3, [r6, #8]
	if (adc_dev)
   116c4:	b9c4      	cbnz	r4, 116f8 <AnalogRead+0x78>

	int16_t sv = readOneChannel(channel);
	if(sv == BAD_ANALOG_READ)
	{
		return sv;
   116c6:	4820      	ldr	r0, [pc, #128]	; (11748 <AnalogRead+0xc8>)
   116c8:	e02f      	b.n	1172a <AnalogRead+0xaa>
	if ( adc_dev != NULL && !_IsInitialized)
   116ca:	2800      	cmp	r0, #0
   116cc:	d0f5      	beq.n	116ba <AnalogRead+0x3a>
   116ce:	4b1d      	ldr	r3, [pc, #116]	; (11744 <AnalogRead+0xc4>)
   116d0:	781b      	ldrb	r3, [r3, #0]
   116d2:	2b00      	cmp	r3, #0
   116d4:	d1f2      	bne.n	116bc <AnalogRead+0x3c>
		m_1st_channel_cfg.channel_id = channel;
   116d6:	491d      	ldr	r1, [pc, #116]	; (1174c <AnalogRead+0xcc>)
   116d8:	790b      	ldrb	r3, [r1, #4]
   116da:	f365 0304 	bfi	r3, r5, #0, #5
        m_1st_channel_cfg.input_positive = channel+1,
   116de:	3501      	adds	r5, #1
		m_1st_channel_cfg.channel_id = channel;
   116e0:	710b      	strb	r3, [r1, #4]
        m_1st_channel_cfg.input_positive = channel+1,
   116e2:	714d      	strb	r5, [r1, #5]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
   116e4:	68a3      	ldr	r3, [r4, #8]
   116e6:	4620      	mov	r0, r4
   116e8:	681b      	ldr	r3, [r3, #0]
   116ea:	4798      	blx	r3
		if(ret != 0)
   116ec:	2800      	cmp	r0, #0
   116ee:	d1e4      	bne.n	116ba <AnalogRead+0x3a>
			_IsInitialized = true;	// we don't have any other analog users
   116f0:	4b14      	ldr	r3, [pc, #80]	; (11744 <AnalogRead+0xc4>)
   116f2:	2201      	movs	r2, #1
   116f4:	701a      	strb	r2, [r3, #0]
   116f6:	e7e1      	b.n	116bc <AnalogRead+0x3c>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   116f8:	68a3      	ldr	r3, [r4, #8]
   116fa:	a901      	add	r1, sp, #4
   116fc:	685b      	ldr	r3, [r3, #4]
   116fe:	4620      	mov	r0, r4
   11700:	4798      	blx	r3
		if(ret == 0)
   11702:	2800      	cmp	r0, #0
   11704:	d1df      	bne.n	116c6 <AnalogRead+0x46>
			sample_value = m_sample_buffer[0];
   11706:	f9b6 0000 	ldrsh.w	r0, [r6]
	if(sv == BAD_ANALOG_READ)
   1170a:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   1170e:	d0da      	beq.n	116c6 <AnalogRead+0x46>
			multip = 16384;
			break;
	}
	
	// the 3.6 relates to the voltage divider being used in my circuit
	float fout = (sv * 3.6 / multip);
   11710:	f7ee fe48 	bl	3a4 <__aeabi_i2d>
   11714:	a306      	add	r3, pc, #24	; (adr r3, 11730 <AnalogRead+0xb0>)
   11716:	e9d3 2300 	ldrd	r2, r3, [r3]
   1171a:	f7ee fead 	bl	478 <__aeabi_dmul>
   1171e:	4b0c      	ldr	r3, [pc, #48]	; (11750 <AnalogRead+0xd0>)
   11720:	2200      	movs	r2, #0
   11722:	f7ee fea9 	bl	478 <__aeabi_dmul>
   11726:	f7ef f8b9 	bl	89c <__aeabi_d2f>
	return fout;
}
   1172a:	b007      	add	sp, #28
   1172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1172e:	bf00      	nop
   11730:	cccccccd 	.word	0xcccccccd
   11734:	400ccccc 	.word	0x400ccccc
   11738:	200036c4 	.word	0x200036c4
   1173c:	0002d4c7 	.word	0x0002d4c7
   11740:	20000961 	.word	0x20000961
   11744:	200036ee 	.word	0x200036ee
   11748:	c2f60000 	.word	0xc2f60000
   1174c:	200008dc 	.word	0x200008dc
   11750:	3f500000 	.word	0x3f500000
   11754:	00000000 	.word	0x00000000

00011758 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   11758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1175a:	4d43      	ldr	r5, [pc, #268]	; (11868 <bt_init+0x110>)
   1175c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   11760:	6899      	ldr	r1, [r3, #8]
   11762:	f011 0101 	ands.w	r1, r1, #1
   11766:	d121      	bne.n	117ac <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   11768:	aa01      	add	r2, sp, #4
   1176a:	f640 4003 	movw	r0, #3075	; 0xc03
   1176e:	f004 faf9 	bl	15d64 <bt_hci_cmd_send_sync>
		if (err) {
   11772:	4604      	mov	r4, r0
   11774:	2800      	cmp	r0, #0
   11776:	d173      	bne.n	11860 <bt_init+0x108>
	uint8_t status = buf->data[0];
   11778:	9b01      	ldr	r3, [sp, #4]
   1177a:	689b      	ldr	r3, [r3, #8]
	if (status) {
   1177c:	781b      	ldrb	r3, [r3, #0]
   1177e:	b993      	cbnz	r3, 117a6 <bt_init+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11780:	f3bf 8f5b 	dmb	ish
   11784:	462b      	mov	r3, r5
   11786:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   1178a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1178e:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11792:	f3bf 8f5b 	dmb	ish
   11796:	e853 1f00 	ldrex	r1, [r3]
   1179a:	e843 2000 	strex	r0, r2, [r3]
   1179e:	2800      	cmp	r0, #0
   117a0:	d1f9      	bne.n	11796 <bt_init+0x3e>
   117a2:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   117a6:	9801      	ldr	r0, [sp, #4]
   117a8:	f00b fb86 	bl	1ceb8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   117ac:	aa01      	add	r2, sp, #4
   117ae:	2100      	movs	r1, #0
   117b0:	f241 0003 	movw	r0, #4099	; 0x1003
   117b4:	f004 fad6 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   117b8:	4604      	mov	r4, r0
   117ba:	2800      	cmp	r0, #0
   117bc:	d150      	bne.n	11860 <bt_init+0x108>
	read_local_features_complete(rsp);
   117be:	9b01      	ldr	r3, [sp, #4]
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   117c0:	4e2a      	ldr	r6, [pc, #168]	; (1186c <bt_init+0x114>)
   117c2:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   117c4:	f8d2 0001 	ldr.w	r0, [r2, #1]
   117c8:	f8d2 1005 	ldr.w	r1, [r2, #5]
   117cc:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   117ce:	4618      	mov	r0, r3
   117d0:	f00b fb72 	bl	1ceb8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   117d4:	4621      	mov	r1, r4
   117d6:	aa01      	add	r2, sp, #4
   117d8:	f241 0001 	movw	r0, #4097	; 0x1001
   117dc:	f004 fac2 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   117e0:	4604      	mov	r4, r0
   117e2:	2800      	cmp	r0, #0
   117e4:	d13c      	bne.n	11860 <bt_init+0x108>
	read_local_ver_complete(rsp);
   117e6:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   117e8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   117ea:	785a      	ldrb	r2, [r3, #1]
   117ec:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   117f0:	78d9      	ldrb	r1, [r3, #3]
   117f2:	789a      	ldrb	r2, [r3, #2]
   117f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   117f8:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   117fc:	791a      	ldrb	r2, [r3, #4]
   117fe:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   11802:	7a19      	ldrb	r1, [r3, #8]
   11804:	79da      	ldrb	r2, [r3, #7]
   11806:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1180a:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1180e:	795a      	ldrb	r2, [r3, #5]
   11810:	799b      	ldrb	r3, [r3, #6]
   11812:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   11816:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   1181a:	f00b fb4d 	bl	1ceb8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1181e:	4621      	mov	r1, r4
   11820:	aa01      	add	r2, sp, #4
   11822:	f241 0002 	movw	r0, #4098	; 0x1002
   11826:	f004 fa9d 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   1182a:	4604      	mov	r4, r0
   1182c:	b9c0      	cbnz	r0, 11860 <bt_init+0x108>
	read_supported_commands_complete(rsp);
   1182e:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   11830:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   11832:	1c53      	adds	r3, r2, #1
   11834:	3241      	adds	r2, #65	; 0x41
   11836:	6818      	ldr	r0, [r3, #0]
   11838:	6859      	ldr	r1, [r3, #4]
   1183a:	4634      	mov	r4, r6
   1183c:	c403      	stmia	r4!, {r0, r1}
   1183e:	3308      	adds	r3, #8
   11840:	4293      	cmp	r3, r2
   11842:	4626      	mov	r6, r4
   11844:	d1f7      	bne.n	11836 <bt_init+0xde>
	net_buf_unref(rsp);
   11846:	4638      	mov	r0, r7
   11848:	f00b fb36 	bl	1ceb8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   1184c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   11850:	065b      	lsls	r3, r3, #25
   11852:	d40f      	bmi.n	11874 <bt_init+0x11c>
		BT_ERR("Non-LE capable controller detected!");
   11854:	4806      	ldr	r0, [pc, #24]	; (11870 <bt_init+0x118>)
   11856:	2145      	movs	r1, #69	; 0x45
   11858:	f016 ffa2 	bl	287a0 <z_log_minimal_printk>
		return -ENODEV;
   1185c:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   11860:	4620      	mov	r0, r4
   11862:	b003      	add	sp, #12
   11864:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11866:	bf00      	nop
   11868:	20000350 	.word	0x20000350
   1186c:	200003c0 	.word	0x200003c0
   11870:	0002e513 	.word	0x0002e513
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   11874:	aa01      	add	r2, sp, #4
   11876:	2100      	movs	r1, #0
   11878:	f242 0003 	movw	r0, #8195	; 0x2003
   1187c:	f004 fa72 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   11880:	4604      	mov	r4, r0
   11882:	2800      	cmp	r0, #0
   11884:	d1ec      	bne.n	11860 <bt_init+0x108>
	read_le_features_complete(rsp);
   11886:	9b01      	ldr	r3, [sp, #4]
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   11888:	4ec1      	ldr	r6, [pc, #772]	; (11b90 <bt_init+0x438>)
   1188a:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1188c:	f8d2 0001 	ldr.w	r0, [r2, #1]
   11890:	f8d2 1005 	ldr.w	r1, [r2, #5]
   11894:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   11896:	4618      	mov	r0, r3
   11898:	f00b fb0e 	bl	1ceb8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1189c:	4621      	mov	r1, r4
   1189e:	aa01      	add	r2, sp, #4
   118a0:	f242 0002 	movw	r0, #8194	; 0x2002
   118a4:	f004 fa5e 	bl	15d64 <bt_hci_cmd_send_sync>
		if (err) {
   118a8:	4604      	mov	r4, r0
   118aa:	2800      	cmp	r0, #0
   118ac:	d1d8      	bne.n	11860 <bt_init+0x108>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   118ae:	9b01      	ldr	r3, [sp, #4]
   118b0:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   118b2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   118b6:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   118ba:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   118bc:	b129      	cbz	r1, 118ca <bt_init+0x172>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   118be:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   118c0:	4611      	mov	r1, r2
   118c2:	f106 0028 	add.w	r0, r6, #40	; 0x28
   118c6:	f01a fa90 	bl	2bdea <z_impl_k_sem_init>
		net_buf_unref(rsp);
   118ca:	9801      	ldr	r0, [sp, #4]
   118cc:	f00b faf4 	bl	1ceb8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   118d0:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   118d4:	f016 0620 	ands.w	r6, r6, #32
   118d8:	f000 80f8 	beq.w	11acc <bt_init+0x374>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   118dc:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   118e0:	071f      	lsls	r7, r3, #28
   118e2:	d512      	bpl.n	1190a <bt_init+0x1b2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   118e4:	aa01      	add	r2, sp, #4
   118e6:	2100      	movs	r1, #0
   118e8:	f242 001c 	movw	r0, #8220	; 0x201c
   118ec:	f004 fa3a 	bl	15d64 <bt_hci_cmd_send_sync>
		if (err) {
   118f0:	4604      	mov	r4, r0
   118f2:	2800      	cmp	r0, #0
   118f4:	d1b4      	bne.n	11860 <bt_init+0x108>
		le_read_supp_states_complete(rsp);
   118f6:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   118f8:	6883      	ldr	r3, [r0, #8]
   118fa:	f8d3 2001 	ldr.w	r2, [r3, #1]
   118fe:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   11902:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   11906:	f00b fad7 	bl	1ceb8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1190a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1190e:	069e      	lsls	r6, r3, #26
   11910:	d523      	bpl.n	1195a <bt_init+0x202>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   11912:	f10d 0102 	add.w	r1, sp, #2
   11916:	4668      	mov	r0, sp
   11918:	f004 fa86 	bl	15e28 <hci_le_read_max_data_len>
		if (err) {
   1191c:	4604      	mov	r4, r0
   1191e:	2800      	cmp	r0, #0
   11920:	d19e      	bne.n	11860 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11922:	2104      	movs	r1, #4
   11924:	f242 0024 	movw	r0, #8228	; 0x2024
   11928:	f004 f9d4 	bl	15cd4 <bt_hci_cmd_create>
		if (!buf) {
   1192c:	4606      	mov	r6, r0
   1192e:	2800      	cmp	r0, #0
   11930:	f000 80d3 	beq.w	11ada <bt_init+0x382>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   11934:	2104      	movs	r1, #4
   11936:	3008      	adds	r0, #8
   11938:	f00b fbd4 	bl	1d0e4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1193c:	f8bd 3000 	ldrh.w	r3, [sp]
   11940:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   11942:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   11946:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11948:	4622      	mov	r2, r4
   1194a:	4631      	mov	r1, r6
   1194c:	f242 0024 	movw	r0, #8228	; 0x2024
   11950:	f004 fa08 	bl	15d64 <bt_hci_cmd_send_sync>
		if (err) {
   11954:	4604      	mov	r4, r0
   11956:	2800      	cmp	r0, #0
   11958:	d182      	bne.n	11860 <bt_init+0x108>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1195a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1195e:	065c      	lsls	r4, r3, #25
   11960:	d510      	bpl.n	11984 <bt_init+0x22c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   11962:	aa01      	add	r2, sp, #4
   11964:	2100      	movs	r1, #0
   11966:	f242 002a 	movw	r0, #8234	; 0x202a
   1196a:	f004 f9fb 	bl	15d64 <bt_hci_cmd_send_sync>
		if (err) {
   1196e:	4604      	mov	r4, r0
   11970:	2800      	cmp	r0, #0
   11972:	f47f af75 	bne.w	11860 <bt_init+0x108>
		le_read_resolving_list_size_complete(rsp);
   11976:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   11978:	6883      	ldr	r3, [r0, #8]
   1197a:	785b      	ldrb	r3, [r3, #1]
   1197c:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   11980:	f00b fa9a 	bl	1ceb8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   11984:	2108      	movs	r1, #8
   11986:	f242 0001 	movw	r0, #8193	; 0x2001
   1198a:	f004 f9a3 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   1198e:	4604      	mov	r4, r0
   11990:	2800      	cmp	r0, #0
   11992:	f000 80a2 	beq.w	11ada <bt_init+0x382>
   11996:	2108      	movs	r1, #8
   11998:	4408      	add	r0, r1
   1199a:	f00b fba3 	bl	1d0e4 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   1199e:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   119a2:	f011 0f40 	tst.w	r1, #64	; 0x40
   119a6:	4602      	mov	r2, r0
   119a8:	f240 2302 	movw	r3, #514	; 0x202
   119ac:	bf08      	it	eq
   119ae:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   119b0:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   119b2:	bf4c      	ite	mi
   119b4:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   119b8:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   119bc:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   119c0:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   119c2:	bf48      	it	mi
   119c4:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   119c8:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   119cc:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   119d0:	bf18      	it	ne
   119d2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   119d6:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   119da:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   119dc:	bf48      	it	mi
   119de:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   119e2:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   119e4:	bf08      	it	eq
   119e6:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   119ea:	2100      	movs	r1, #0
   119ec:	f017 fd98 	bl	29520 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   119f0:	4621      	mov	r1, r4
   119f2:	2200      	movs	r2, #0
   119f4:	f242 0001 	movw	r0, #8193	; 0x2001
   119f8:	f004 f9b4 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   119fc:	4604      	mov	r4, r0
   119fe:	2800      	cmp	r0, #0
   11a00:	f47f af2e 	bne.w	11860 <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11a04:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   11a08:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11a0c:	0698      	lsls	r0, r3, #26
   11a0e:	d479      	bmi.n	11b04 <bt_init+0x3ac>
	if (bt_dev.le.acl_mtu) {
   11a10:	b9d9      	cbnz	r1, 11a4a <bt_init+0x2f2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   11a12:	aa01      	add	r2, sp, #4
   11a14:	f241 0005 	movw	r0, #4101	; 0x1005
   11a18:	f004 f9a4 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   11a1c:	4604      	mov	r4, r0
   11a1e:	2800      	cmp	r0, #0
   11a20:	f47f af1e 	bne.w	11860 <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
   11a24:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   11a28:	b963      	cbnz	r3, 11a44 <bt_init+0x2ec>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   11a2a:	9b01      	ldr	r3, [sp, #4]
   11a2c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   11a2e:	785a      	ldrb	r2, [r3, #1]
   11a30:	7899      	ldrb	r1, [r3, #2]
   11a32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11a36:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   11a3a:	889a      	ldrh	r2, [r3, #4]
   11a3c:	4855      	ldr	r0, [pc, #340]	; (11b94 <bt_init+0x43c>)
   11a3e:	4611      	mov	r1, r2
   11a40:	f01a f9d3 	bl	2bdea <z_impl_k_sem_init>
	net_buf_unref(rsp);
   11a44:	9801      	ldr	r0, [sp, #4]
   11a46:	f00b fa37 	bl	1ceb8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   11a4a:	2108      	movs	r1, #8
   11a4c:	f640 4001 	movw	r0, #3073	; 0xc01
   11a50:	f004 f940 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   11a54:	4604      	mov	r4, r0
   11a56:	2800      	cmp	r0, #0
   11a58:	d03f      	beq.n	11ada <bt_init+0x382>
   11a5a:	2108      	movs	r1, #8
   11a5c:	4408      	add	r0, r1
   11a5e:	f00b fb41 	bl	1d0e4 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   11a62:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   11a66:	07d9      	lsls	r1, r3, #31
   11a68:	4602      	mov	r2, r0
   11a6a:	d554      	bpl.n	11b16 <bt_init+0x3be>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   11a6c:	a146      	add	r1, pc, #280	; (adr r1, 11b88 <bt_init+0x430>)
   11a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   11a72:	f017 fd55 	bl	29520 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   11a76:	4621      	mov	r1, r4
   11a78:	2200      	movs	r2, #0
   11a7a:	f640 4001 	movw	r0, #3073	; 0xc01
   11a7e:	f004 f971 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   11a82:	4604      	mov	r4, r0
   11a84:	2800      	cmp	r0, #0
   11a86:	f47f aeeb 	bne.w	11860 <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   11a8a:	4601      	mov	r1, r0
   11a8c:	aa01      	add	r2, sp, #4
   11a8e:	f64f 4001 	movw	r0, #64513	; 0xfc01
   11a92:	f004 f967 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   11a96:	4604      	mov	r4, r0
   11a98:	2800      	cmp	r0, #0
   11a9a:	d040      	beq.n	11b1e <bt_init+0x3c6>
		BT_WARN("Vendor HCI extensions not available");
   11a9c:	483e      	ldr	r0, [pc, #248]	; (11b98 <bt_init+0x440>)
   11a9e:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
   11aa0:	f016 fe7e 	bl	287a0 <z_log_minimal_printk>
	err = bt_id_init();
   11aa4:	f017 fed3 	bl	2984e <bt_id_init>
	if (err) {
   11aa8:	4604      	mov	r4, r0
   11aaa:	2800      	cmp	r0, #0
   11aac:	f47f aed8 	bne.w	11860 <bt_init+0x108>
		err = bt_conn_init();
   11ab0:	f006 fd18 	bl	184e4 <bt_conn_init>
		if (err) {
   11ab4:	4604      	mov	r4, r0
   11ab6:	2800      	cmp	r0, #0
   11ab8:	f47f aed2 	bne.w	11860 <bt_init+0x108>
		if (!bt_dev.id_count) {
   11abc:	79eb      	ldrb	r3, [r5, #7]
   11abe:	2b00      	cmp	r3, #0
   11ac0:	d159      	bne.n	11b76 <bt_init+0x41e>
			BT_INFO("No ID address. App must call settings_load()");
   11ac2:	4836      	ldr	r0, [pc, #216]	; (11b9c <bt_init+0x444>)
   11ac4:	2149      	movs	r1, #73	; 0x49
   11ac6:	f016 fe6b 	bl	287a0 <z_log_minimal_printk>
			return 0;
   11aca:	e6c9      	b.n	11860 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   11acc:	2102      	movs	r1, #2
   11ace:	f640 406d 	movw	r0, #3181	; 0xc6d
   11ad2:	f004 f8ff 	bl	15cd4 <bt_hci_cmd_create>
		if (!buf) {
   11ad6:	4604      	mov	r4, r0
   11ad8:	b910      	cbnz	r0, 11ae0 <bt_init+0x388>
		return -ENOBUFS;
   11ada:	f06f 0468 	mvn.w	r4, #104	; 0x68
   11ade:	e6bf      	b.n	11860 <bt_init+0x108>
   11ae0:	2102      	movs	r1, #2
   11ae2:	3008      	adds	r0, #8
   11ae4:	f00b fafe 	bl	1d0e4 <net_buf_simple_add>
		cp_le->le = 0x01;
   11ae8:	2301      	movs	r3, #1
   11aea:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   11aec:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   11aee:	4621      	mov	r1, r4
   11af0:	4632      	mov	r2, r6
   11af2:	f640 406d 	movw	r0, #3181	; 0xc6d
   11af6:	f004 f935 	bl	15d64 <bt_hci_cmd_send_sync>
		if (err) {
   11afa:	4604      	mov	r4, r0
   11afc:	2800      	cmp	r0, #0
   11afe:	f43f aeed 	beq.w	118dc <bt_init+0x184>
   11b02:	e6ad      	b.n	11860 <bt_init+0x108>
	else if (!bt_dev.le.acl_mtu) {
   11b04:	2900      	cmp	r1, #0
   11b06:	d1a0      	bne.n	11a4a <bt_init+0x2f2>
		BT_ERR("ACL BR/EDR buffers not initialized");
   11b08:	4825      	ldr	r0, [pc, #148]	; (11ba0 <bt_init+0x448>)
   11b0a:	2145      	movs	r1, #69	; 0x45
   11b0c:	f016 fe48 	bl	287a0 <z_log_minimal_printk>
		return -EIO;
   11b10:	f06f 0404 	mvn.w	r4, #4
   11b14:	e6a4      	b.n	11860 <bt_init+0x108>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   11b16:	4823      	ldr	r0, [pc, #140]	; (11ba4 <bt_init+0x44c>)
   11b18:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   11b1c:	e7a9      	b.n	11a72 <bt_init+0x31a>
	net_buf_unref(rsp);
   11b1e:	9801      	ldr	r0, [sp, #4]
   11b20:	f00b f9ca 	bl	1ceb8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   11b24:	4621      	mov	r1, r4
   11b26:	aa01      	add	r2, sp, #4
   11b28:	f64f 4002 	movw	r0, #64514	; 0xfc02
   11b2c:	f004 f91a 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   11b30:	4604      	mov	r4, r0
   11b32:	b110      	cbz	r0, 11b3a <bt_init+0x3e2>
		BT_WARN("Failed to read supported vendor commands");
   11b34:	481c      	ldr	r0, [pc, #112]	; (11ba8 <bt_init+0x450>)
   11b36:	2157      	movs	r1, #87	; 0x57
   11b38:	e7b2      	b.n	11aa0 <bt_init+0x348>
	rp.cmds = (void *)rsp->data;
   11b3a:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   11b3c:	6883      	ldr	r3, [r0, #8]
   11b3e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   11b42:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   11b46:	f00b f9b7 	bl	1ceb8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   11b4a:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   11b4e:	075b      	lsls	r3, r3, #29
   11b50:	d5a8      	bpl.n	11aa4 <bt_init+0x34c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   11b52:	aa01      	add	r2, sp, #4
   11b54:	4621      	mov	r1, r4
   11b56:	f64f 4003 	movw	r0, #64515	; 0xfc03
   11b5a:	f004 f903 	bl	15d64 <bt_hci_cmd_send_sync>
		if (err) {
   11b5e:	b110      	cbz	r0, 11b66 <bt_init+0x40e>
			BT_WARN("Failed to read supported vendor features");
   11b60:	4812      	ldr	r0, [pc, #72]	; (11bac <bt_init+0x454>)
   11b62:	2157      	movs	r1, #87	; 0x57
   11b64:	e79c      	b.n	11aa0 <bt_init+0x348>
		rp.feat = (void *)rsp->data;
   11b66:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   11b68:	6883      	ldr	r3, [r0, #8]
   11b6a:	785b      	ldrb	r3, [r3, #1]
   11b6c:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   11b70:	f00b f9a2 	bl	1ceb8 <net_buf_unref>
   11b74:	e796      	b.n	11aa4 <bt_init+0x34c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11b76:	2108      	movs	r1, #8
   11b78:	480d      	ldr	r0, [pc, #52]	; (11bb0 <bt_init+0x458>)
   11b7a:	f017 fcaa 	bl	294d2 <atomic_or>
	bt_finalize_init();
   11b7e:	f004 fda1 	bl	166c4 <bt_finalize_init>
	return 0;
   11b82:	e66d      	b.n	11860 <bt_init+0x108>
   11b84:	f3af 8000 	nop.w
   11b88:	02008890 	.word	0x02008890
   11b8c:	20008000 	.word	0x20008000
   11b90:	20000420 	.word	0x20000420
   11b94:	20000450 	.word	0x20000450
   11b98:	0002e564 	.word	0x0002e564
   11b9c:	0002e5e9 	.word	0x0002e5e9
   11ba0:	0002e53c 	.word	0x0002e53c
   11ba4:	02008810 	.word	0x02008810
   11ba8:	0002e58d 	.word	0x0002e58d
   11bac:	0002e5bb 	.word	0x0002e5bb
   11bb0:	2000041c 	.word	0x2000041c

00011bb4 <disconnected>:
	is_connected = 1;

}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   11bb4:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   11bb6:	4804      	ldr	r0, [pc, #16]	; (11bc8 <disconnected+0x14>)
   11bb8:	f016 fc39 	bl	2842e <printk>
	clear_melty_parameters_initialized();
   11bbc:	f000 f9ba 	bl	11f34 <clear_melty_parameters_initialized>
	is_connected = 0;
   11bc0:	4b02      	ldr	r3, [pc, #8]	; (11bcc <disconnected+0x18>)
   11bc2:	2200      	movs	r2, #0
   11bc4:	601a      	str	r2, [r3, #0]

}
   11bc6:	bd08      	pop	{r3, pc}
   11bc8:	0002d252 	.word	0x0002d252
   11bcc:	20002140 	.word	0x20002140

00011bd0 <connected>:
{
   11bd0:	b508      	push	{r3, lr}
	if (err) {
   11bd2:	b121      	cbz	r1, 11bde <connected+0xe>
}
   11bd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err %u)\n", err);
   11bd8:	4804      	ldr	r0, [pc, #16]	; (11bec <connected+0x1c>)
   11bda:	f016 bc28 	b.w	2842e <printk>
	printk("Connected\n");
   11bde:	4804      	ldr	r0, [pc, #16]	; (11bf0 <connected+0x20>)
   11be0:	f016 fc25 	bl	2842e <printk>
	is_connected = 1;
   11be4:	4b03      	ldr	r3, [pc, #12]	; (11bf4 <connected+0x24>)
   11be6:	2201      	movs	r2, #1
   11be8:	601a      	str	r2, [r3, #0]
}
   11bea:	bd08      	pop	{r3, pc}
   11bec:	0002d26c 	.word	0x0002d26c
   11bf0:	0002d288 	.word	0x0002d288
   11bf4:	20002140 	.word	0x20002140

00011bf8 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11bf8:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   11bfa:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11bfc:	b08a      	sub	sp, #40	; 0x28
   11bfe:	4604      	mov	r4, r0
   11c00:	460e      	mov	r6, r1
   11c02:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   11c04:	2b03      	cmp	r3, #3
   11c06:	d820      	bhi.n	11c4a <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   11c08:	e8df f003 	tbb	[pc, r3]
   11c0c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11c10:	4911      	ldr	r1, [pc, #68]	; (11c58 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   11c12:	4628      	mov	r0, r5
   11c14:	f01a fae7 	bl	2c1e6 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11c18:	7863      	ldrb	r3, [r4, #1]
   11c1a:	9304      	str	r3, [sp, #16]
   11c1c:	78a3      	ldrb	r3, [r4, #2]
   11c1e:	9303      	str	r3, [sp, #12]
   11c20:	78e3      	ldrb	r3, [r4, #3]
   11c22:	9302      	str	r3, [sp, #8]
   11c24:	7923      	ldrb	r3, [r4, #4]
   11c26:	9301      	str	r3, [sp, #4]
   11c28:	7963      	ldrb	r3, [r4, #5]
   11c2a:	9300      	str	r3, [sp, #0]
   11c2c:	4a0b      	ldr	r2, [pc, #44]	; (11c5c <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   11c2e:	79a3      	ldrb	r3, [r4, #6]
   11c30:	9505      	str	r5, [sp, #20]
   11c32:	211e      	movs	r1, #30
   11c34:	4630      	mov	r0, r6
   11c36:	f016 fc07 	bl	28448 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   11c3a:	b00a      	add	sp, #40	; 0x28
   11c3c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   11c3e:	4908      	ldr	r1, [pc, #32]	; (11c60 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   11c40:	e7e7      	b.n	11c12 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   11c42:	4908      	ldr	r1, [pc, #32]	; (11c64 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   11c44:	e7e5      	b.n	11c12 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   11c46:	4908      	ldr	r1, [pc, #32]	; (11c68 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   11c48:	e7e3      	b.n	11c12 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11c4a:	4a08      	ldr	r2, [pc, #32]	; (11c6c <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   11c4c:	210a      	movs	r1, #10
   11c4e:	4628      	mov	r0, r5
   11c50:	f016 fbfa 	bl	28448 <snprintk>
		break;
   11c54:	e7e0      	b.n	11c18 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   11c56:	bf00      	nop
   11c58:	0002d293 	.word	0x0002d293
   11c5c:	0002d2bc 	.word	0x0002d2bc
   11c60:	0002d29a 	.word	0x0002d29a
   11c64:	0002d2a1 	.word	0x0002d2a1
   11c68:	0002d2ab 	.word	0x0002d2ab
   11c6c:	0002d2b5 	.word	0x0002d2b5

00011c70 <security_changed>:

#ifdef CONFIG_BT_LBS_SECURITY_ENABLED
static void security_changed(struct bt_conn *conn, bt_security_t level,
			     enum bt_security_err err)
{
   11c70:	b530      	push	{r4, r5, lr}
   11c72:	b089      	sub	sp, #36	; 0x24
   11c74:	460c      	mov	r4, r1
   11c76:	4615      	mov	r5, r2
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11c78:	f017 ffcf 	bl	29c1a <bt_conn_get_dst>
   11c7c:	4669      	mov	r1, sp
   11c7e:	f7ff ffbb 	bl	11bf8 <bt_addr_le_to_str.constprop.0.isra.0>

	if (!err) {
   11c82:	b935      	cbnz	r5, 11c92 <security_changed+0x22>
		printk("Security changed: %s level %u\n", addr, level);
   11c84:	4806      	ldr	r0, [pc, #24]	; (11ca0 <security_changed+0x30>)
   11c86:	4622      	mov	r2, r4
   11c88:	4669      	mov	r1, sp
   11c8a:	f016 fbd0 	bl	2842e <printk>
	} else {
		printk("Security failed: %s level %u err %d\n", addr, level,
			err);
	}
}
   11c8e:	b009      	add	sp, #36	; 0x24
   11c90:	bd30      	pop	{r4, r5, pc}
		printk("Security failed: %s level %u err %d\n", addr, level,
   11c92:	4804      	ldr	r0, [pc, #16]	; (11ca4 <security_changed+0x34>)
   11c94:	462b      	mov	r3, r5
   11c96:	4622      	mov	r2, r4
   11c98:	4669      	mov	r1, sp
   11c9a:	f016 fbc8 	bl	2842e <printk>
}
   11c9e:	e7f6      	b.n	11c8e <security_changed+0x1e>
   11ca0:	0002d2df 	.word	0x0002d2df
   11ca4:	0002d2fe 	.word	0x0002d2fe

00011ca8 <pairing_failed>:

	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
}

static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
   11ca8:	b510      	push	{r4, lr}
   11caa:	b088      	sub	sp, #32
   11cac:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11cae:	f017 ffb4 	bl	29c1a <bt_conn_get_dst>
   11cb2:	4669      	mov	r1, sp
   11cb4:	f7ff ffa0 	bl	11bf8 <bt_addr_le_to_str.constprop.0.isra.0>

	printk("Pairing failed conn: %s, reason %d\n", addr, reason);
   11cb8:	4803      	ldr	r0, [pc, #12]	; (11cc8 <pairing_failed+0x20>)
   11cba:	4622      	mov	r2, r4
   11cbc:	4669      	mov	r1, sp
   11cbe:	f016 fbb6 	bl	2842e <printk>
}
   11cc2:	b008      	add	sp, #32
   11cc4:	bd10      	pop	{r4, pc}
   11cc6:	bf00      	nop
   11cc8:	0002d323 	.word	0x0002d323

00011ccc <pairing_complete>:
{
   11ccc:	b510      	push	{r4, lr}
   11cce:	b088      	sub	sp, #32
   11cd0:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11cd2:	f017 ffa2 	bl	29c1a <bt_conn_get_dst>
   11cd6:	4669      	mov	r1, sp
   11cd8:	f7ff ff8e 	bl	11bf8 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing completed: %s, bonded: %d\n", addr, bonded);
   11cdc:	4803      	ldr	r0, [pc, #12]	; (11cec <pairing_complete+0x20>)
   11cde:	4622      	mov	r2, r4
   11ce0:	4669      	mov	r1, sp
   11ce2:	f016 fba4 	bl	2842e <printk>
}
   11ce6:	b008      	add	sp, #32
   11ce8:	bd10      	pop	{r4, pc}
   11cea:	bf00      	nop
   11cec:	0002d347 	.word	0x0002d347

00011cf0 <auth_cancel>:
{
   11cf0:	b500      	push	{lr}
   11cf2:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11cf4:	f017 ff91 	bl	29c1a <bt_conn_get_dst>
   11cf8:	4669      	mov	r1, sp
   11cfa:	f7ff ff7d 	bl	11bf8 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing cancelled: %s\n", addr);
   11cfe:	4803      	ldr	r0, [pc, #12]	; (11d0c <auth_cancel+0x1c>)
   11d00:	4669      	mov	r1, sp
   11d02:	f016 fb94 	bl	2842e <printk>
}
   11d06:	b009      	add	sp, #36	; 0x24
   11d08:	f85d fb04 	ldr.w	pc, [sp], #4
   11d0c:	0002d36a 	.word	0x0002d36a

00011d10 <auth_passkey_display>:
{
   11d10:	b510      	push	{r4, lr}
   11d12:	b088      	sub	sp, #32
   11d14:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11d16:	f017 ff80 	bl	29c1a <bt_conn_get_dst>
   11d1a:	4669      	mov	r1, sp
   11d1c:	f7ff ff6c 	bl	11bf8 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
   11d20:	4803      	ldr	r0, [pc, #12]	; (11d30 <auth_passkey_display+0x20>)
   11d22:	4622      	mov	r2, r4
   11d24:	4669      	mov	r1, sp
   11d26:	f016 fb82 	bl	2842e <printk>
}
   11d2a:	b008      	add	sp, #32
   11d2c:	bd10      	pop	{r4, pc}
   11d2e:	bf00      	nop
   11d30:	0002d381 	.word	0x0002d381

00011d34 <check_heart_beat>:
static struct bt_conn_auth_cb conn_auth_callbacks;
#endif


bool check_heart_beat(void)
{
   11d34:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_uptime_ticks();
   11d36:	f01a f905 	bl	2bf44 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   11d3a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	static bool heart_beat_good = false;
	static uint8_t last_heart_beat = 0;
	static uint64_t time_at_last_check = 0;

	if (k_uptime_get() - time_at_last_check > HEART_BEAT_CHECK_FREQ_MS) {
   11d3e:	4d1a      	ldr	r5, [pc, #104]	; (11da8 <check_heart_beat+0x74>)
   11d40:	4e1a      	ldr	r6, [pc, #104]	; (11dac <check_heart_beat+0x78>)
   11d42:	fba0 0304 	umull	r0, r3, r0, r4
   11d46:	fb04 3101 	mla	r1, r4, r1, r3
   11d4a:	e9d5 3200 	ldrd	r3, r2, [r5]
   11d4e:	0bc0      	lsrs	r0, r0, #15
   11d50:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   11d54:	1ac0      	subs	r0, r0, r3
   11d56:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   11d5a:	f240 2359 	movw	r3, #601	; 0x259
   11d5e:	eb61 0102 	sbc.w	r1, r1, r2
   11d62:	4298      	cmp	r0, r3
   11d64:	f171 0300 	sbcs.w	r3, r1, #0
   11d68:	d319      	bcc.n	11d9e <check_heart_beat+0x6a>
   11d6a:	f01a f8eb 	bl	2bf44 <z_impl_k_uptime_ticks>
   11d6e:	fba0 0304 	umull	r0, r3, r0, r4
   11d72:	fb04 3401 	mla	r4, r4, r1, r3
   11d76:	0bc0      	lsrs	r0, r0, #15
   11d78:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
   11d7c:	0be4      	lsrs	r4, r4, #15
		time_at_last_check = k_uptime_get();
   11d7e:	e9c5 0400 	strd	r0, r4, [r5]
		int current_heart_beat = get_heart_beat();
   11d82:	f000 f8e9 	bl	11f58 <get_heart_beat>
		//heartbeat must be a new number - and between 10 and 13 (inclusive)
		if (current_heart_beat != last_heart_beat && current_heart_beat >= 10 && current_heart_beat <= 13) {
   11d86:	4a0a      	ldr	r2, [pc, #40]	; (11db0 <check_heart_beat+0x7c>)
   11d88:	7813      	ldrb	r3, [r2, #0]
   11d8a:	4283      	cmp	r3, r0
   11d8c:	d009      	beq.n	11da2 <check_heart_beat+0x6e>
   11d8e:	f1a0 030a 	sub.w	r3, r0, #10
   11d92:	b2db      	uxtb	r3, r3
   11d94:	2b03      	cmp	r3, #3
   11d96:	d804      	bhi.n	11da2 <check_heart_beat+0x6e>
			last_heart_beat = current_heart_beat;
   11d98:	7010      	strb	r0, [r2, #0]
			heart_beat_good = true;
   11d9a:	2301      	movs	r3, #1
		} else {
			heart_beat_good = false;
   11d9c:	7033      	strb	r3, [r6, #0]
		}
	}
	
	return heart_beat_good;
}
   11d9e:	7830      	ldrb	r0, [r6, #0]
   11da0:	bd70      	pop	{r4, r5, r6, pc}
			heart_beat_good = false;
   11da2:	2300      	movs	r3, #0
   11da4:	e7fa      	b.n	11d9c <check_heart_beat+0x68>
   11da6:	bf00      	nop
   11da8:	20001908 	.word	0x20001908
   11dac:	200036ec 	.word	0x200036ec
   11db0:	200036ed 	.word	0x200036ed

00011db4 <main>:

void main(void)
{
   11db4:	b530      	push	{r4, r5, lr}
	int err;

	printk("Starting Bluetooth Peripheral LBS example\n");
   11db6:	4831      	ldr	r0, [pc, #196]	; (11e7c <main+0xc8>)
{
   11db8:	b089      	sub	sp, #36	; 0x24
	printk("Starting Bluetooth Peripheral LBS example\n");
   11dba:	f016 fb38 	bl	2842e <printk>

	if (IS_ENABLED(CONFIG_BT_LBS_SECURITY_ENABLED)) {
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
   11dbe:	4830      	ldr	r0, [pc, #192]	; (11e80 <main+0xcc>)
   11dc0:	f006 fb5e 	bl	18480 <bt_conn_auth_cb_register>
		if (err) {
   11dc4:	b128      	cbz	r0, 11dd2 <main+0x1e>
			printk("Failed to register authorization callbacks.\n");
   11dc6:	482f      	ldr	r0, [pc, #188]	; (11e84 <main+0xd0>)

		status_led_flash(is_connected);

	}

}
   11dc8:	b009      	add	sp, #36	; 0x24
   11dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			printk("Failed to register authorization info callbacks.\n");
   11dce:	f016 bb2e 	b.w	2842e <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
   11dd2:	482d      	ldr	r0, [pc, #180]	; (11e88 <main+0xd4>)
   11dd4:	f006 fb70 	bl	184b8 <bt_conn_auth_info_cb_register>
		if (err) {
   11dd8:	b108      	cbz	r0, 11dde <main+0x2a>
			printk("Failed to register authorization info callbacks.\n");
   11dda:	482c      	ldr	r0, [pc, #176]	; (11e8c <main+0xd8>)
   11ddc:	e7f4      	b.n	11dc8 <main+0x14>
	err = bt_enable(NULL);
   11dde:	f004 fc83 	bl	166e8 <bt_enable>
	if (err) {
   11de2:	4601      	mov	r1, r0
   11de4:	b128      	cbz	r0, 11df2 <main+0x3e>
		printk("Bluetooth init failed (err %d)\n", err);
   11de6:	482a      	ldr	r0, [pc, #168]	; (11e90 <main+0xdc>)
}
   11de8:	b009      	add	sp, #36	; 0x24
   11dea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Failed to init LBS (err:%d)\n", err);
   11dee:	f016 bb1e 	b.w	2842e <printk>
	printk("Bluetooth initialized\n");
   11df2:	4828      	ldr	r0, [pc, #160]	; (11e94 <main+0xe0>)
   11df4:	f016 fb1b 	bl	2842e <printk>
		settings_load();
   11df8:	f016 ff49 	bl	28c8e <settings_load>
	err = bt_melty_init();
   11dfc:	f016 fa60 	bl	282c0 <bt_melty_init>
	if (err) {
   11e00:	4601      	mov	r1, r0
   11e02:	b108      	cbz	r0, 11e08 <main+0x54>
		printk("Failed to init LBS (err:%d)\n", err);
   11e04:	4824      	ldr	r0, [pc, #144]	; (11e98 <main+0xe4>)
   11e06:	e7ef      	b.n	11de8 <main+0x34>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   11e08:	4d24      	ldr	r5, [pc, #144]	; (11e9c <main+0xe8>)
   11e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11e0c:	ac03      	add	r4, sp, #12
   11e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11e10:	682b      	ldr	r3, [r5, #0]
   11e12:	6023      	str	r3, [r4, #0]
   11e14:	2301      	movs	r3, #1
   11e16:	4922      	ldr	r1, [pc, #136]	; (11ea0 <main+0xec>)
   11e18:	9300      	str	r3, [sp, #0]
   11e1a:	2202      	movs	r2, #2
   11e1c:	4b21      	ldr	r3, [pc, #132]	; (11ea4 <main+0xf0>)
   11e1e:	a803      	add	r0, sp, #12
   11e20:	f005 fa56 	bl	172d0 <bt_le_adv_start>
	if (err) {
   11e24:	4601      	mov	r1, r0
   11e26:	b120      	cbz	r0, 11e32 <main+0x7e>
		printk("Advertising failed to start (err %d)\n", err);
   11e28:	481f      	ldr	r0, [pc, #124]	; (11ea8 <main+0xf4>)
   11e2a:	f016 fb00 	bl	2842e <printk>
}
   11e2e:	b009      	add	sp, #36	; 0x24
   11e30:	bd30      	pop	{r4, r5, pc}
	printk("Advertising successfully started\n");
   11e32:	481e      	ldr	r0, [pc, #120]	; (11eac <main+0xf8>)
		while (is_connected == 1 && get_melty_parameters_initialized()
   11e34:	4c1e      	ldr	r4, [pc, #120]	; (11eb0 <main+0xfc>)
	printk("Advertising successfully started\n");
   11e36:	f016 fafa 	bl	2842e <printk>
	init_melty();
   11e3a:	f000 fa07 	bl	1224c <init_melty>
		while (is_connected == 1 && get_melty_parameters_initialized()
   11e3e:	6823      	ldr	r3, [r4, #0]
   11e40:	2b01      	cmp	r3, #1
   11e42:	d00b      	beq.n	11e5c <main+0xa8>
		update_melty_stats(0, get_battery_voltage());	//assures voltage is updated even if throttle at 0
   11e44:	f000 fa30 	bl	122a8 <get_battery_voltage>
   11e48:	4601      	mov	r1, r0
   11e4a:	2000      	movs	r0, #0
   11e4c:	f000 fa38 	bl	122c0 <update_melty_stats>
		motors_safe();
   11e50:	f000 fa1a 	bl	12288 <motors_safe>
		status_led_flash(is_connected);
   11e54:	6820      	ldr	r0, [r4, #0]
   11e56:	f000 faf3 	bl	12440 <status_led_flash>
		while (is_connected == 1 && get_melty_parameters_initialized()
   11e5a:	e7f0      	b.n	11e3e <main+0x8a>
   11e5c:	f000 f870 	bl	11f40 <get_melty_parameters_initialized>
   11e60:	2800      	cmp	r0, #0
   11e62:	d0ef      	beq.n	11e44 <main+0x90>
		 && get_throttle() != 0 && check_heart_beat()) {
   11e64:	f000 f884 	bl	11f70 <get_throttle>
   11e68:	2800      	cmp	r0, #0
   11e6a:	d0eb      	beq.n	11e44 <main+0x90>
   11e6c:	f7ff ff62 	bl	11d34 <check_heart_beat>
   11e70:	2800      	cmp	r0, #0
   11e72:	d0e7      	beq.n	11e44 <main+0x90>
			do_melty();
   11e74:	f000 fa3e 	bl	122f4 <do_melty>
   11e78:	e7e1      	b.n	11e3e <main+0x8a>
   11e7a:	bf00      	nop
   11e7c:	0002d397 	.word	0x0002d397
   11e80:	20000568 	.word	0x20000568
   11e84:	0002d3c2 	.word	0x0002d3c2
   11e88:	20000580 	.word	0x20000580
   11e8c:	0002d3ef 	.word	0x0002d3ef
   11e90:	0002d421 	.word	0x0002d421
   11e94:	0002d441 	.word	0x0002d441
   11e98:	0002d458 	.word	0x0002d458
   11e9c:	0002c7c0 	.word	0x0002c7c0
   11ea0:	0002c878 	.word	0x0002c878
   11ea4:	0002c888 	.word	0x0002c888
   11ea8:	0002d475 	.word	0x0002d475
   11eac:	0002d49b 	.word	0x0002d49b
   11eb0:	20002140 	.word	0x20002140

00011eb4 <melty_ccc_cfg_changed>:
static u_int8_t heart_beat;

static void melty_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   11eb4:	1e4b      	subs	r3, r1, #1
   11eb6:	4259      	negs	r1, r3
   11eb8:	4159      	adcs	r1, r3
   11eba:	4b01      	ldr	r3, [pc, #4]	; (11ec0 <melty_ccc_cfg_changed+0xc>)
   11ebc:	7019      	strb	r1, [r3, #0]
}
   11ebe:	4770      	bx	lr
   11ec0:	200036f2 	.word	0x200036f2

00011ec4 <update_melty_config>:

static ssize_t update_melty_config(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   11ec4:	b538      	push	{r3, r4, r5, lr}
   11ec6:	461d      	mov	r5, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle,
		(void *)conn);

	if (len != 7U) {
   11ec8:	2d07      	cmp	r5, #7
{
   11eca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   11ece:	4614      	mov	r4, r2
	if (len != 7U) {
   11ed0:	d11c      	bne.n	11f0c <update_melty_config+0x48>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
   11ed2:	b9f3      	cbnz	r3, 11f12 <update_melty_config+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

    melty_parameters_initialized = false;

    radius = (((uint8_t *)buf)[0] + ((uint8_t *)buf)[1] * 256) / 1000.0f;
   11ed4:	7813      	ldrb	r3, [r2, #0]
   11ed6:	7850      	ldrb	r0, [r2, #1]
   11ed8:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   11edc:	f7ee fde8 	bl	ab0 <__aeabi_i2f>
   11ee0:	490d      	ldr	r1, [pc, #52]	; (11f18 <update_melty_config+0x54>)
   11ee2:	f7ee feed 	bl	cc0 <__aeabi_fdiv>
   11ee6:	4b0d      	ldr	r3, [pc, #52]	; (11f1c <update_melty_config+0x58>)
    led_offset = ((uint8_t *)buf)[2];
   11ee8:	78a2      	ldrb	r2, [r4, #2]
    radius = (((uint8_t *)buf)[0] + ((uint8_t *)buf)[1] * 256) / 1000.0f;
   11eea:	6018      	str	r0, [r3, #0]
    led_offset = ((uint8_t *)buf)[2];
   11eec:	4b0c      	ldr	r3, [pc, #48]	; (11f20 <update_melty_config+0x5c>)
   11eee:	701a      	strb	r2, [r3, #0]
    throttle = ((uint8_t *)buf)[3];
   11ef0:	4b0c      	ldr	r3, [pc, #48]	; (11f24 <update_melty_config+0x60>)
   11ef2:	78e2      	ldrb	r2, [r4, #3]
   11ef4:	701a      	strb	r2, [r3, #0]
    translate_direction = ((int8_t *)buf)[4];
   11ef6:	4b0c      	ldr	r3, [pc, #48]	; (11f28 <update_melty_config+0x64>)
   11ef8:	7922      	ldrb	r2, [r4, #4]
   11efa:	701a      	strb	r2, [r3, #0]
    heart_beat = ((int8_t *)buf)[5];
   11efc:	4b0b      	ldr	r3, [pc, #44]	; (11f2c <update_melty_config+0x68>)
   11efe:	7962      	ldrb	r2, [r4, #5]
   11f00:	701a      	strb	r2, [r3, #0]
    //byte 6 reserved

    melty_parameters_initialized = true;
   11f02:	4b0b      	ldr	r3, [pc, #44]	; (11f30 <update_melty_config+0x6c>)
   11f04:	2201      	movs	r2, #1
   11f06:	701a      	strb	r2, [r3, #0]
    LOG_DBG("params updated");

	return len;
   11f08:	4628      	mov	r0, r5
}
   11f0a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   11f0c:	f06f 000c 	mvn.w	r0, #12
   11f10:	e7fb      	b.n	11f0a <update_melty_config+0x46>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11f12:	f06f 0006 	mvn.w	r0, #6
   11f16:	e7f8      	b.n	11f0a <update_melty_config+0x46>
   11f18:	447a0000 	.word	0x447a0000
   11f1c:	20002144 	.word	0x20002144
   11f20:	200036f0 	.word	0x200036f0
   11f24:	200036f3 	.word	0x200036f3
   11f28:	200036f4 	.word	0x200036f4
   11f2c:	200036ef 	.word	0x200036ef
   11f30:	200036f1 	.word	0x200036f1

00011f34 <clear_melty_parameters_initialized>:

void clear_melty_parameters_initialized(void) {
    melty_parameters_initialized = false;
   11f34:	4b01      	ldr	r3, [pc, #4]	; (11f3c <clear_melty_parameters_initialized+0x8>)
   11f36:	2200      	movs	r2, #0
   11f38:	701a      	strb	r2, [r3, #0]
}
   11f3a:	4770      	bx	lr
   11f3c:	200036f1 	.word	0x200036f1

00011f40 <get_melty_parameters_initialized>:

bool get_melty_parameters_initialized(void) {
    return melty_parameters_initialized;
}
   11f40:	4b01      	ldr	r3, [pc, #4]	; (11f48 <get_melty_parameters_initialized+0x8>)
   11f42:	7818      	ldrb	r0, [r3, #0]
   11f44:	4770      	bx	lr
   11f46:	bf00      	nop
   11f48:	200036f1 	.word	0x200036f1

00011f4c <get_radius>:

float get_radius(void) {
    return radius;
}
   11f4c:	4b01      	ldr	r3, [pc, #4]	; (11f54 <get_radius+0x8>)
   11f4e:	6818      	ldr	r0, [r3, #0]
   11f50:	4770      	bx	lr
   11f52:	bf00      	nop
   11f54:	20002144 	.word	0x20002144

00011f58 <get_heart_beat>:


u_int8_t get_heart_beat(void) {
    return heart_beat;
}
   11f58:	4b01      	ldr	r3, [pc, #4]	; (11f60 <get_heart_beat+0x8>)
   11f5a:	7818      	ldrb	r0, [r3, #0]
   11f5c:	4770      	bx	lr
   11f5e:	bf00      	nop
   11f60:	200036ef 	.word	0x200036ef

00011f64 <get_translate_direction>:

u_int8_t get_translate_direction(void) {
    return translate_direction;
}
   11f64:	4b01      	ldr	r3, [pc, #4]	; (11f6c <get_translate_direction+0x8>)
   11f66:	7818      	ldrb	r0, [r3, #0]
   11f68:	4770      	bx	lr
   11f6a:	bf00      	nop
   11f6c:	200036f4 	.word	0x200036f4

00011f70 <get_throttle>:

u_int8_t get_throttle(void) {
    return throttle;
}
   11f70:	4b01      	ldr	r3, [pc, #4]	; (11f78 <get_throttle+0x8>)
   11f72:	7818      	ldrb	r0, [r3, #0]
   11f74:	4770      	bx	lr
   11f76:	bf00      	nop
   11f78:	200036f3 	.word	0x200036f3

00011f7c <get_led_offset>:

u_int8_t get_led_offset(void) {
    return led_offset;
}
   11f7c:	4b01      	ldr	r3, [pc, #4]	; (11f84 <get_led_offset+0x8>)
   11f7e:	7818      	ldrb	r0, [r3, #0]
   11f80:	4770      	bx	lr
   11f82:	bf00      	nop
   11f84:	200036f0 	.word	0x200036f0

00011f88 <bt_send_melty_stats>:
	//nothing to init / placeholder
	return 0;
}

int bt_send_melty_stats(u_int8_t melty_stats[3])
{
   11f88:	b510      	push	{r4, lr}
	if (!notify_enabled) {
   11f8a:	4b0c      	ldr	r3, [pc, #48]	; (11fbc <bt_send_melty_stats+0x34>)
   11f8c:	781b      	ldrb	r3, [r3, #0]
{
   11f8e:	b086      	sub	sp, #24
   11f90:	4604      	mov	r4, r0
	if (!notify_enabled) {
   11f92:	b183      	cbz	r3, 11fb6 <bt_send_melty_stats+0x2e>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   11f94:	2100      	movs	r1, #0
   11f96:	2218      	movs	r2, #24
   11f98:	4668      	mov	r0, sp
   11f9a:	f01a f913 	bl	2c1c4 <memset>

	params.attr = attr;
   11f9e:	4b08      	ldr	r3, [pc, #32]	; (11fc0 <bt_send_melty_stats+0x38>)
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   11fa0:	4669      	mov	r1, sp
	params.data = data;
   11fa2:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
   11fa6:	2000      	movs	r0, #0
	params.len = len;
   11fa8:	2303      	movs	r3, #3
   11faa:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   11fae:	f008 fd9b 	bl	1aae8 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &meltyble_svc.attrs[2],
			      melty_stats,
			      3);
}
   11fb2:	b006      	add	sp, #24
   11fb4:	bd10      	pop	{r4, pc}
		return -EACCES;
   11fb6:	f06f 000c 	mvn.w	r0, #12
   11fba:	e7fa      	b.n	11fb2 <bt_send_melty_stats+0x2a>
   11fbc:	200036f2 	.word	0x200036f2
   11fc0:	0002c8b8 	.word	0x0002c8b8

00011fc4 <gpio_pin_configure.constprop.0.isra.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
   11fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fc8:	4604      	mov	r4, r0
   11fca:	460d      	mov	r5, r1
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11fcc:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
   11fce:	f8d0 8008 	ldr.w	r8, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11fd2:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   11fd4:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   11fd6:	2601      	movs	r6, #1
   11fd8:	408e      	lsls	r6, r1
   11fda:	421e      	tst	r6, r3
   11fdc:	d10a      	bne.n	11ff4 <gpio_pin_configure.constprop.0.isra.0+0x30>
   11fde:	490c      	ldr	r1, [pc, #48]	; (12010 <gpio_pin_configure.constprop.0.isra.0+0x4c>)
   11fe0:	480c      	ldr	r0, [pc, #48]	; (12014 <gpio_pin_configure.constprop.0.isra.0+0x50>)
   11fe2:	f240 22da 	movw	r2, #730	; 0x2da
   11fe6:	f016 fbcd 	bl	28784 <assert_print>
   11fea:	4809      	ldr	r0, [pc, #36]	; (12010 <gpio_pin_configure.constprop.0.isra.0+0x4c>)
   11fec:	f240 21da 	movw	r1, #730	; 0x2da
   11ff0:	f016 fbc1 	bl	28776 <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11ff4:	683b      	ldr	r3, [r7, #0]
   11ff6:	ea23 0306 	bic.w	r3, r3, r6
   11ffa:	603b      	str	r3, [r7, #0]
	}

	return api->pin_configure(port, pin, flags);
   11ffc:	4629      	mov	r1, r5
   11ffe:	f8d8 3000 	ldr.w	r3, [r8]
   12002:	4620      	mov	r0, r4
   12004:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
   12008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1200c:	4718      	bx	r3
   1200e:	bf00      	nop
   12010:	0002d4d8 	.word	0x0002d4d8
   12014:	0002d509 	.word	0x0002d509

00012018 <gpio_pin_set.isra.0>:
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12018:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   1201a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1201e:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
   12020:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12022:	2501      	movs	r5, #1
   12024:	408d      	lsls	r5, r1
   12026:	421d      	tst	r5, r3
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   12028:	4604      	mov	r4, r0
   1202a:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1202c:	d10a      	bne.n	12044 <gpio_pin_set.isra.0+0x2c>
   1202e:	4915      	ldr	r1, [pc, #84]	; (12084 <gpio_pin_set.isra.0+0x6c>)
   12030:	4815      	ldr	r0, [pc, #84]	; (12088 <gpio_pin_set.isra.0+0x70>)
   12032:	f240 5225 	movw	r2, #1317	; 0x525
   12036:	f016 fba5 	bl	28784 <assert_print>
   1203a:	4812      	ldr	r0, [pc, #72]	; (12084 <gpio_pin_set.isra.0+0x6c>)
   1203c:	f240 5125 	movw	r1, #1317	; 0x525
   12040:	f016 fb99 	bl	28776 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12044:	683b      	ldr	r3, [r7, #0]
   12046:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   12048:	6863      	ldr	r3, [r4, #4]
   1204a:	681b      	ldr	r3, [r3, #0]
   1204c:	bf18      	it	ne
   1204e:	f086 0601 	eorne.w	r6, r6, #1
   12052:	421d      	tst	r5, r3
   12054:	d10a      	bne.n	1206c <gpio_pin_set.isra.0+0x54>
   12056:	490b      	ldr	r1, [pc, #44]	; (12084 <gpio_pin_set.isra.0+0x6c>)
   12058:	480b      	ldr	r0, [pc, #44]	; (12088 <gpio_pin_set.isra.0+0x70>)
   1205a:	f240 42fc 	movw	r2, #1276	; 0x4fc
   1205e:	f016 fb91 	bl	28784 <assert_print>
   12062:	4808      	ldr	r0, [pc, #32]	; (12084 <gpio_pin_set.isra.0+0x6c>)
   12064:	f240 41fc 	movw	r1, #1276	; 0x4fc
   12068:	f016 fb85 	bl	28776 <assert_post_action>
	if (value != 0)	{
   1206c:	b136      	cbz	r6, 1207c <gpio_pin_set.isra.0+0x64>
	return api->port_set_bits_raw(port, pins);
   1206e:	68a3      	ldr	r3, [r4, #8]
   12070:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   12072:	4629      	mov	r1, r5
   12074:	4620      	mov	r0, r4
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   12076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   1207a:	4718      	bx	r3
   1207c:	68a3      	ldr	r3, [r4, #8]
   1207e:	691b      	ldr	r3, [r3, #16]
   12080:	e7f7      	b.n	12072 <gpio_pin_set.isra.0+0x5a>
   12082:	bf00      	nop
   12084:	0002d4d8 	.word	0x0002d4d8
   12088:	0002d509 	.word	0x0002d509

0001208c <get_accel_force>:
	gpio_pin_set(dev, MOTOR_PIN1, 0);
	gpio_pin_set(dev, MOTOR_PIN2, 0);
}


static float get_accel_force(void){
   1208c:	b510      	push	{r4, lr}

	float relative_adc_read = adc_multi_sample(ADC_READS, ACCEL_ADC_CHANNEL) - zero_g_accel;
   1208e:	2104      	movs	r1, #4
   12090:	2001      	movs	r0, #1
   12092:	f016 f919 	bl	282c8 <adc_multi_sample>
   12096:	4b07      	ldr	r3, [pc, #28]	; (120b4 <get_accel_force+0x28>)
   12098:	6819      	ldr	r1, [r3, #0]
   1209a:	f7ee fc53 	bl	944 <__aeabi_fsub>
	
	float g_force = relative_adc_read / G_PER_ADC;
   1209e:	4906      	ldr	r1, [pc, #24]	; (120b8 <get_accel_force+0x2c>)
   120a0:	f7ee fe0e 	bl	cc0 <__aeabi_fdiv>
	if (g_force < 0) g_force = 0;
   120a4:	2100      	movs	r1, #0
	float g_force = relative_adc_read / G_PER_ADC;
   120a6:	4604      	mov	r4, r0
	if (g_force < 0) g_force = 0;
   120a8:	f7ee fef4 	bl	e94 <__aeabi_fcmplt>
   120ac:	b100      	cbz	r0, 120b0 <get_accel_force+0x24>
   120ae:	2400      	movs	r4, #0

	return g_force;
}
   120b0:	4620      	mov	r0, r4
   120b2:	bd10      	pop	{r4, pc}
   120b4:	20002154 	.word	0x20002154
   120b8:	bc03126f 	.word	0xbc03126f

000120bc <get_melty_parameters>:
float get_battery_voltage(void) {
	float voltage = adc_multi_sample(BATTERY_ADC_READS, BATTERY_V_ADC_CHANNEL);
	return voltage * BATTERY_VOLTAGE_DIVIDER_RATIO;
}

static struct melty_parameters_t get_melty_parameters(void) {
   120bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120c0:	4605      	mov	r5, r0

	float led_offset_portion = get_led_offset() / 100.0f;
   120c2:	f7ff ff5b 	bl	11f7c <get_led_offset>
   120c6:	f7ee fcf3 	bl	ab0 <__aeabi_i2f>
   120ca:	4953      	ldr	r1, [pc, #332]	; (12218 <get_melty_parameters+0x15c>)
    if (smoothed_accel == 0) {
   120cc:	4c53      	ldr	r4, [pc, #332]	; (1221c <get_melty_parameters+0x160>)
	float led_offset_portion = get_led_offset() / 100.0f;
   120ce:	f7ee fdf7 	bl	cc0 <__aeabi_fdiv>
   120d2:	4680      	mov	r8, r0
	float motor_on_portion = get_throttle() / 100.0f;	
   120d4:	f7ff ff4c 	bl	11f70 <get_throttle>
   120d8:	f7ee fcea 	bl	ab0 <__aeabi_i2f>
   120dc:	494e      	ldr	r1, [pc, #312]	; (12218 <get_melty_parameters+0x15c>)
   120de:	f7ee fdef 	bl	cc0 <__aeabi_fdiv>
	float led_on_portion = .4f * (1.1f - motor_on_portion);     //LED width changed with throttle
   120e2:	4601      	mov	r1, r0
	float motor_on_portion = get_throttle() / 100.0f;	
   120e4:	4606      	mov	r6, r0
	float led_on_portion = .4f * (1.1f - motor_on_portion);     //LED width changed with throttle
   120e6:	484e      	ldr	r0, [pc, #312]	; (12220 <get_melty_parameters+0x164>)
   120e8:	f7ee fc2c 	bl	944 <__aeabi_fsub>
   120ec:	494d      	ldr	r1, [pc, #308]	; (12224 <get_melty_parameters+0x168>)
   120ee:	f7ee fd33 	bl	b58 <__aeabi_fmul>
   120f2:	4681      	mov	r9, r0
	float radius_in_cm = get_radius();
   120f4:	f7ff ff2a 	bl	11f4c <get_radius>
    if (smoothed_accel == 0) {
   120f8:	f8d4 a000 	ldr.w	sl, [r4]
	float radius_in_cm = get_radius();
   120fc:	4607      	mov	r7, r0
    if (smoothed_accel == 0) {
   120fe:	2100      	movs	r1, #0
   12100:	4650      	mov	r0, sl
   12102:	f7ee febd 	bl	e80 <__aeabi_fcmpeq>
   12106:	2800      	cmp	r0, #0
   12108:	d073      	beq.n	121f2 <get_melty_parameters+0x136>
        smoothed_accel = get_accel_force();
   1210a:	f7ff ffbf 	bl	1208c <get_accel_force>
        smoothed_accel = (smoothed_accel * ACCEL_SMOOTHING_FACTOR) + (get_accel_force() * (1.0f - ACCEL_SMOOTHING_FACTOR));
   1210e:	6020      	str	r0, [r4, #0]
	rpm = get_smoothed_accel_force() * 89445.0f;                               
   12110:	6820      	ldr	r0, [r4, #0]
   12112:	4945      	ldr	r1, [pc, #276]	; (12228 <get_melty_parameters+0x16c>)
   12114:	f7ee fd20 	bl	b58 <__aeabi_fmul>
	rpm = rpm / radius_in_cm;
   12118:	4639      	mov	r1, r7
   1211a:	f7ee fdd1 	bl	cc0 <__aeabi_fdiv>
	rpm = sqrt(rpm);	
   1211e:	f7ee f953 	bl	3c8 <__aeabi_f2d>
   12122:	f013 fabf 	bl	256a4 <sqrt>
   12126:	f7ee fbb9 	bl	89c <__aeabi_d2f>
   1212a:	4601      	mov	r1, r0
	float rotation_interval = (1.0f / rpm) * 60 * 1000;
   1212c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   12130:	f7ee fdc6 	bl	cc0 <__aeabi_fdiv>
   12134:	493d      	ldr	r1, [pc, #244]	; (1222c <get_melty_parameters+0x170>)
   12136:	f7ee fd0f 	bl	b58 <__aeabi_fmul>
   1213a:	493d      	ldr	r1, [pc, #244]	; (12230 <get_melty_parameters+0x174>)
   1213c:	f7ee fd0c 	bl	b58 <__aeabi_fmul>
	if (rotation_interval > 250) rotation_interval = 250;
   12140:	493c      	ldr	r1, [pc, #240]	; (12234 <get_melty_parameters+0x178>)
	float rotation_interval = (1.0f / rpm) * 60 * 1000;
   12142:	4604      	mov	r4, r0
	if (rotation_interval > 250) rotation_interval = 250;
   12144:	f7ee fec4 	bl	ed0 <__aeabi_fcmpgt>
   12148:	2800      	cmp	r0, #0
   1214a:	d163      	bne.n	12214 <get_melty_parameters+0x158>
	if (rotation_interval < 0) rotation_interval = 250;
   1214c:	2100      	movs	r1, #0
   1214e:	4620      	mov	r0, r4
   12150:	f7ee fea0 	bl	e94 <__aeabi_fcmplt>
   12154:	2800      	cmp	r0, #0
   12156:	d15d      	bne.n	12214 <get_melty_parameters+0x158>

	struct melty_parameters_t melty_parameters;
	melty_parameters.rotation_interval_us = get_rotation_interval_ms() * 1000;
   12158:	4935      	ldr	r1, [pc, #212]	; (12230 <get_melty_parameters+0x174>)
   1215a:	4620      	mov	r0, r4
   1215c:	f7ee fcfc 	bl	b58 <__aeabi_fmul>
   12160:	f7ee fee6 	bl	f30 <__aeabi_f2uiz>
   12164:	4604      	mov	r4, r0

	//if under defined RPM - just try to spin up
    if (melty_parameters.rotation_interval_us > MAX_TRANSLATION_ROTATION_INTERVAL_US) motor_on_portion = 1;
   12166:	f7ee fc9f 	bl	aa8 <__aeabi_ui2f>
   1216a:	4933      	ldr	r1, [pc, #204]	; (12238 <get_melty_parameters+0x17c>)
   1216c:	4607      	mov	r7, r0
   1216e:	f7ee feaf 	bl	ed0 <__aeabi_fcmpgt>
   12172:	b108      	cbz	r0, 12178 <get_melty_parameters+0xbc>
   12174:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000

    //if we are too slow - don't even try to track heading
	if (melty_parameters.rotation_interval_us > MAX_TRACKING_ROTATION_INTERVAL_US) {
   12178:	4930      	ldr	r1, [pc, #192]	; (1223c <get_melty_parameters+0x180>)
   1217a:	4638      	mov	r0, r7
   1217c:	f7ee fea8 	bl	ed0 <__aeabi_fcmpgt>
        melty_parameters.rotation_interval_us = MAX_TRACKING_ROTATION_INTERVAL_US;
   12180:	4b2f      	ldr	r3, [pc, #188]	; (12240 <get_melty_parameters+0x184>)
   12182:	2800      	cmp	r0, #0
   12184:	bf18      	it	ne
   12186:	461c      	movne	r4, r3
    }

	u_int32_t motor_on_us = motor_on_portion * melty_parameters.rotation_interval_us;
   12188:	4620      	mov	r0, r4
   1218a:	f7ee fc8d 	bl	aa8 <__aeabi_ui2f>
   1218e:	4631      	mov	r1, r6
   12190:	4682      	mov	sl, r0
   12192:	f7ee fce1 	bl	b58 <__aeabi_fmul>
   12196:	f7ee fecb 	bl	f30 <__aeabi_f2uiz>
	
    u_int32_t led_on_us = led_on_portion * melty_parameters.rotation_interval_us;
   1219a:	4649      	mov	r1, r9
	u_int32_t motor_on_us = motor_on_portion * melty_parameters.rotation_interval_us;
   1219c:	4607      	mov	r7, r0
    u_int32_t led_on_us = led_on_portion * melty_parameters.rotation_interval_us;
   1219e:	4650      	mov	r0, sl
   121a0:	f7ee fcda 	bl	b58 <__aeabi_fmul>
   121a4:	f7ee fec4 	bl	f30 <__aeabi_f2uiz>
	u_int32_t led_offset_us = led_offset_portion * melty_parameters.rotation_interval_us;
   121a8:	4641      	mov	r1, r8
    u_int32_t led_on_us = led_on_portion * melty_parameters.rotation_interval_us;
   121aa:	4606      	mov	r6, r0
	u_int32_t led_offset_us = led_offset_portion * melty_parameters.rotation_interval_us;
   121ac:	4650      	mov	r0, sl
   121ae:	f7ee fcd3 	bl	b58 <__aeabi_fmul>
   121b2:	f7ee febd 	bl	f30 <__aeabi_f2uiz>

    //center LED on offset
	if (led_on_us / 2 <= led_offset_us) {
   121b6:	ebb0 0f56 	cmp.w	r0, r6, lsr #1
        melty_parameters.led_start = led_offset_us - (led_on_us / 2);
    } else {
       melty_parameters.led_start =  (melty_parameters.rotation_interval_us + led_offset_us) - (led_on_us / 2); 
   121ba:	bf38      	it	cc
   121bc:	1823      	addcc	r3, r4, r0
	if (led_on_us / 2 <= led_offset_us) {
   121be:	ea4f 0256 	mov.w	r2, r6, lsr #1
        melty_parameters.led_start = led_offset_us - (led_on_us / 2);
   121c2:	bf2c      	ite	cs
   121c4:	1a80      	subcs	r0, r0, r2
       melty_parameters.led_start =  (melty_parameters.rotation_interval_us + led_offset_us) - (led_on_us / 2); 
   121c6:	1a98      	subcc	r0, r3, r2
    }

 	melty_parameters.led_stop = melty_parameters.led_start + led_on_us;
   121c8:	4406      	add	r6, r0
	
	if (melty_parameters.led_stop > melty_parameters.rotation_interval_us)
   121ca:	42a6      	cmp	r6, r4
		melty_parameters.led_stop = melty_parameters.led_stop - melty_parameters.rotation_interval_us;

	melty_parameters.motor_start1 = (melty_parameters.rotation_interval_us - motor_on_us) / 2;
   121cc:	eba4 0207 	sub.w	r2, r4, r7
		melty_parameters.led_stop = melty_parameters.led_stop - melty_parameters.rotation_interval_us;
   121d0:	bf88      	it	hi
   121d2:	1b36      	subhi	r6, r6, r4
	melty_parameters.motor_start1 = (melty_parameters.rotation_interval_us - motor_on_us) / 2;
   121d4:	0852      	lsrs	r2, r2, #1
	melty_parameters.motor_stop1 = melty_parameters.motor_start1 + motor_on_us;

	melty_parameters.motor_start2 = melty_parameters.rotation_interval_us - (motor_on_us / 2);
	melty_parameters.motor_stop2 = motor_on_us / 2;

	return melty_parameters;
   121d6:	e9c5 4000 	strd	r4, r0, [r5]
   121da:	e9c5 6202 	strd	r6, r2, [r5, #8]
	melty_parameters.motor_start2 = melty_parameters.rotation_interval_us - (motor_on_us / 2);
   121de:	0879      	lsrs	r1, r7, #1
	melty_parameters.motor_stop1 = melty_parameters.motor_start1 + motor_on_us;
   121e0:	443a      	add	r2, r7
	melty_parameters.motor_start2 = melty_parameters.rotation_interval_us - (motor_on_us / 2);
   121e2:	eba4 0457 	sub.w	r4, r4, r7, lsr #1
	return melty_parameters;
   121e6:	e9c5 4105 	strd	r4, r1, [r5, #20]
   121ea:	612a      	str	r2, [r5, #16]

}
   121ec:	4628      	mov	r0, r5
   121ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        smoothed_accel = (smoothed_accel * ACCEL_SMOOTHING_FACTOR) + (get_accel_force() * (1.0f - ACCEL_SMOOTHING_FACTOR));
   121f2:	f7ff ff4b 	bl	1208c <get_accel_force>
   121f6:	4913      	ldr	r1, [pc, #76]	; (12244 <get_melty_parameters+0x188>)
   121f8:	4683      	mov	fp, r0
   121fa:	4650      	mov	r0, sl
   121fc:	f7ee fcac 	bl	b58 <__aeabi_fmul>
   12200:	4911      	ldr	r1, [pc, #68]	; (12248 <get_melty_parameters+0x18c>)
   12202:	4682      	mov	sl, r0
   12204:	4658      	mov	r0, fp
   12206:	f7ee fca7 	bl	b58 <__aeabi_fmul>
   1220a:	4601      	mov	r1, r0
   1220c:	4650      	mov	r0, sl
   1220e:	f7ee fb9b 	bl	948 <__addsf3>
   12212:	e77c      	b.n	1210e <get_melty_parameters+0x52>
	if (rotation_interval < 0) rotation_interval = 250;
   12214:	4c07      	ldr	r4, [pc, #28]	; (12234 <get_melty_parameters+0x178>)
   12216:	e79f      	b.n	12158 <get_melty_parameters+0x9c>
   12218:	42c80000 	.word	0x42c80000
   1221c:	20002150 	.word	0x20002150
   12220:	3f8ccccd 	.word	0x3f8ccccd
   12224:	3ecccccd 	.word	0x3ecccccd
   12228:	47aeb280 	.word	0x47aeb280
   1222c:	42700000 	.word	0x42700000
   12230:	447a0000 	.word	0x447a0000
   12234:	437a0000 	.word	0x437a0000
   12238:	48023556 	.word	0x48023556
   1223c:	48823556 	.word	0x48823556
   12240:	000411aa 	.word	0x000411aa
   12244:	3f7ae148 	.word	0x3f7ae148
   12248:	3ca3d700 	.word	0x3ca3d700

0001224c <init_melty>:
void init_melty(void){
   1224c:	b510      	push	{r4, lr}
   1224e:	480b      	ldr	r0, [pc, #44]	; (1227c <init_melty+0x30>)
	dev = device_get_binding("GPIO_0");
   12250:	4c0b      	ldr	r4, [pc, #44]	; (12280 <init_melty+0x34>)
   12252:	f00f fafd 	bl	21850 <z_impl_device_get_binding>
	gpio_pin_configure(dev, MELTY_LED_PIN, GPIO_OUTPUT); 
   12256:	2102      	movs	r1, #2
	dev = device_get_binding("GPIO_0");
   12258:	6020      	str	r0, [r4, #0]
	gpio_pin_configure(dev, MELTY_LED_PIN, GPIO_OUTPUT); 
   1225a:	f7ff feb3 	bl	11fc4 <gpio_pin_configure.constprop.0.isra.0>
	gpio_pin_configure(dev, MOTOR_PIN1, GPIO_OUTPUT); 
   1225e:	6820      	ldr	r0, [r4, #0]
   12260:	2104      	movs	r1, #4
   12262:	f7ff feaf 	bl	11fc4 <gpio_pin_configure.constprop.0.isra.0>
	gpio_pin_configure(dev, MOTOR_PIN2, GPIO_OUTPUT); 
   12266:	6820      	ldr	r0, [r4, #0]
   12268:	2103      	movs	r1, #3
   1226a:	f7ff feab 	bl	11fc4 <gpio_pin_configure.constprop.0.isra.0>
	zero_g_accel = adc_multi_sample(INIT_ADC_READS, ACCEL_ADC_CHANNEL);
   1226e:	2104      	movs	r1, #4
   12270:	20c8      	movs	r0, #200	; 0xc8
   12272:	f016 f829 	bl	282c8 <adc_multi_sample>
   12276:	4b03      	ldr	r3, [pc, #12]	; (12284 <init_melty+0x38>)
   12278:	6018      	str	r0, [r3, #0]
}
   1227a:	bd10      	pop	{r4, pc}
   1227c:	0002d521 	.word	0x0002d521
   12280:	2000214c 	.word	0x2000214c
   12284:	20002154 	.word	0x20002154

00012288 <motors_safe>:
void motors_safe(void) {
   12288:	b510      	push	{r4, lr}
	gpio_pin_set(dev, MOTOR_PIN1, 0);
   1228a:	4c06      	ldr	r4, [pc, #24]	; (122a4 <motors_safe+0x1c>)
   1228c:	2200      	movs	r2, #0
   1228e:	6820      	ldr	r0, [r4, #0]
   12290:	2104      	movs	r1, #4
   12292:	f7ff fec1 	bl	12018 <gpio_pin_set.isra.0>
	gpio_pin_set(dev, MOTOR_PIN2, 0);
   12296:	6820      	ldr	r0, [r4, #0]
   12298:	2200      	movs	r2, #0
}
   1229a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_pin_set(dev, MOTOR_PIN2, 0);
   1229e:	2103      	movs	r1, #3
   122a0:	f7ff beba 	b.w	12018 <gpio_pin_set.isra.0>
   122a4:	2000214c 	.word	0x2000214c

000122a8 <get_battery_voltage>:
float get_battery_voltage(void) {
   122a8:	b508      	push	{r3, lr}
	float voltage = adc_multi_sample(BATTERY_ADC_READS, BATTERY_V_ADC_CHANNEL);
   122aa:	2105      	movs	r1, #5
   122ac:	2001      	movs	r0, #1
   122ae:	f016 f80b 	bl	282c8 <adc_multi_sample>
	return voltage * BATTERY_VOLTAGE_DIVIDER_RATIO;
   122b2:	4902      	ldr	r1, [pc, #8]	; (122bc <get_battery_voltage+0x14>)
   122b4:	f7ee fc50 	bl	b58 <__aeabi_fmul>
}
   122b8:	bd08      	pop	{r3, pc}
   122ba:	bf00      	nop
   122bc:	41300000 	.word	0x41300000

000122c0 <update_melty_stats>:

void update_melty_stats(int rotation_interval_ms, float battery_voltage) {
   122c0:	b507      	push	{r0, r1, r2, lr}
	u_int8_t melty_stats[3] = {0, 0, 0};
   122c2:	4a0a      	ldr	r2, [pc, #40]	; (122ec <update_melty_stats+0x2c>)
void update_melty_stats(int rotation_interval_ms, float battery_voltage) {
   122c4:	460b      	mov	r3, r1
	u_int8_t melty_stats[3] = {0, 0, 0};
   122c6:	8812      	ldrh	r2, [r2, #0]
   122c8:	f8ad 2004 	strh.w	r2, [sp, #4]
	melty_stats[0] = rotation_interval_ms;
	melty_stats[2] = battery_voltage * 10.0f;
   122cc:	4908      	ldr	r1, [pc, #32]	; (122f0 <update_melty_stats+0x30>)
	melty_stats[0] = rotation_interval_ms;
   122ce:	f88d 0004 	strb.w	r0, [sp, #4]
	melty_stats[2] = battery_voltage * 10.0f;
   122d2:	4618      	mov	r0, r3
   122d4:	f7ee fc40 	bl	b58 <__aeabi_fmul>
   122d8:	f7ee fe2a 	bl	f30 <__aeabi_f2uiz>
   122dc:	f88d 0006 	strb.w	r0, [sp, #6]
	bt_send_melty_stats(melty_stats);
   122e0:	a801      	add	r0, sp, #4
   122e2:	f7ff fe51 	bl	11f88 <bt_send_melty_stats>
}
   122e6:	b003      	add	sp, #12
   122e8:	f85d fb04 	ldr.w	pc, [sp], #4
   122ec:	0002c814 	.word	0x0002c814
   122f0:	41200000 	.word	0x41200000

000122f4 <do_melty>:

void do_melty(void){
   122f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122f8:	b08d      	sub	sp, #52	; 0x34
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   122fa:	f019 fa81 	bl	2b800 <sys_clock_cycle_get_32>
   122fe:	4682      	mov	sl, r0

	/* capture initial time stamp */
	u_int32_t start_time;
	start_time = k_cycle_get_32();

	struct melty_parameters_t melty_parameters = get_melty_parameters();
   12300:	a805      	add	r0, sp, #20
   12302:	f7ff fedb 	bl	120bc <get_melty_parameters>
   12306:	9f05      	ldr	r7, [sp, #20]

	update_melty_stats(melty_parameters.rotation_interval_us / 1000, get_battery_voltage());

	cycle_count++;
   12308:	4e4a      	ldr	r6, [pc, #296]	; (12434 <do_melty+0x140>)
   1230a:	4d4b      	ldr	r5, [pc, #300]	; (12438 <do_melty+0x144>)
	update_melty_stats(melty_parameters.rotation_interval_us / 1000, get_battery_voltage());
   1230c:	f7ff ffcc 	bl	122a8 <get_battery_voltage>
   12310:	4601      	mov	r1, r0
   12312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   12316:	fbb7 f0f0 	udiv	r0, r7, r0
   1231a:	f7ff ffd1 	bl	122c0 <update_melty_stats>
	cycle_count++;
   1231e:	6833      	ldr	r3, [r6, #0]
   12320:	3301      	adds	r3, #1
   12322:	6033      	str	r3, [r6, #0]
	u_int32_t time_spent_this_rotation_us = 0;
   12324:	2400      	movs	r4, #0

	while(time_spent_this_rotation_us < melty_parameters.rotation_interval_us) {
   12326:	42bc      	cmp	r4, r7
   12328:	d302      	bcc.n	12330 <do_melty+0x3c>
		if (cycles_spent < 0) cycles_spent = cycles_spent + UINT32_MAX;
		time_spent_this_rotation_us += SYS_CLOCK_HW_CYCLES_TO_NS_AVG(cycles_spent, 1) / 1000;
		start_time = k_cycle_get_32();
	}

}
   1232a:	b00d      	add	sp, #52	; 0x34
   1232c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        melty_parameters = get_melty_parameters();
   12330:	a805      	add	r0, sp, #20
   12332:	f7ff fec3 	bl	120bc <get_melty_parameters>
   12336:	e9dd 8307 	ldrd	r8, r3, [sp, #28]
   1233a:	9302      	str	r3, [sp, #8]
   1233c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1233e:	9301      	str	r3, [sp, #4]
   12340:	e9dd b30a 	ldrd	fp, r3, [sp, #40]	; 0x28
		k_sleep(K_USEC(sleep_time_us));
   12344:	2001      	movs	r0, #1
   12346:	2100      	movs	r1, #0
        melty_parameters = get_melty_parameters();
   12348:	9303      	str	r3, [sp, #12]
   1234a:	e9dd 7905 	ldrd	r7, r9, [sp, #20]
		k_sleep(K_USEC(sleep_time_us));
   1234e:	f015 ffb9 	bl	282c4 <k_sleep.isra.0>
		if (get_translate_direction() == TRANSLATE_FORWARD || (get_translate_direction() == TRANSLATE_IDLE && cycle_count % 2 == 0)) {
   12352:	f7ff fe07 	bl	11f64 <get_translate_direction>
   12356:	2801      	cmp	r0, #1
   12358:	d105      	bne.n	12366 <do_melty+0x72>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   1235a:	9b02      	ldr	r3, [sp, #8]
					gpio_pin_set(dev, MOTOR_PIN1, 1);
   1235c:	6828      	ldr	r0, [r5, #0]
			if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   1235e:	429c      	cmp	r4, r3
   12360:	d21e      	bcs.n	123a0 <do_melty+0xac>
					gpio_pin_set(dev, MOTOR_PIN1, 0);
   12362:	2200      	movs	r2, #0
   12364:	e020      	b.n	123a8 <do_melty+0xb4>
		if (get_translate_direction() == TRANSLATE_FORWARD || (get_translate_direction() == TRANSLATE_IDLE && cycle_count % 2 == 0)) {
   12366:	f7ff fdfd 	bl	11f64 <get_translate_direction>
   1236a:	b910      	cbnz	r0, 12372 <do_melty+0x7e>
   1236c:	6833      	ldr	r3, [r6, #0]
   1236e:	07da      	lsls	r2, r3, #31
   12370:	d5f3      	bpl.n	1235a <do_melty+0x66>
		if (get_translate_direction() == TRANSLATE_REVERSE || (get_translate_direction() == TRANSLATE_IDLE && cycle_count %2 == 1)) {
   12372:	f7ff fdf7 	bl	11f64 <get_translate_direction>
   12376:	2802      	cmp	r0, #2
   12378:	d126      	bne.n	123c8 <do_melty+0xd4>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start2 || 
   1237a:	455c      	cmp	r4, fp
   1237c:	d34e      	bcc.n	1241c <do_melty+0x128>
					gpio_pin_set(dev, MOTOR_PIN1, 1);
   1237e:	2201      	movs	r2, #1
					gpio_pin_set(dev, MOTOR_PIN1, 0);
   12380:	6828      	ldr	r0, [r5, #0]
   12382:	2104      	movs	r1, #4
   12384:	f7ff fe48 	bl	12018 <gpio_pin_set.isra.0>
		if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   12388:	9b02      	ldr	r3, [sp, #8]
					gpio_pin_set(dev, MOTOR_PIN2, 1);
   1238a:	6828      	ldr	r0, [r5, #0]
		if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   1238c:	429c      	cmp	r4, r3
   1238e:	d34a      	bcc.n	12426 <do_melty+0x132>
   12390:	9b01      	ldr	r3, [sp, #4]
   12392:	429c      	cmp	r4, r3
   12394:	d847      	bhi.n	12426 <do_melty+0x132>
					gpio_pin_set(dev, MOTOR_PIN2, 1);
   12396:	2201      	movs	r2, #1
					gpio_pin_set(dev, MOTOR_PIN2, 0);
   12398:	2103      	movs	r1, #3
   1239a:	f7ff fe3d 	bl	12018 <gpio_pin_set.isra.0>
   1239e:	e019      	b.n	123d4 <do_melty+0xe0>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start1 && 
   123a0:	9b01      	ldr	r3, [sp, #4]
   123a2:	429c      	cmp	r4, r3
   123a4:	d8dd      	bhi.n	12362 <do_melty+0x6e>
					gpio_pin_set(dev, MOTOR_PIN1, 1);
   123a6:	2201      	movs	r2, #1
					gpio_pin_set(dev, MOTOR_PIN1, 0);
   123a8:	2104      	movs	r1, #4
   123aa:	f7ff fe35 	bl	12018 <gpio_pin_set.isra.0>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start2 || 
   123ae:	455c      	cmp	r4, fp
   123b0:	d202      	bcs.n	123b8 <do_melty+0xc4>
   123b2:	9b03      	ldr	r3, [sp, #12]
   123b4:	429c      	cmp	r4, r3
   123b6:	d805      	bhi.n	123c4 <do_melty+0xd0>
					gpio_pin_set(dev, MOTOR_PIN2, 1);
   123b8:	2201      	movs	r2, #1
					gpio_pin_set(dev, MOTOR_PIN2, 0);
   123ba:	6828      	ldr	r0, [r5, #0]
   123bc:	2103      	movs	r1, #3
   123be:	f7ff fe2b 	bl	12018 <gpio_pin_set.isra.0>
   123c2:	e7d6      	b.n	12372 <do_melty+0x7e>
   123c4:	2200      	movs	r2, #0
   123c6:	e7f8      	b.n	123ba <do_melty+0xc6>
		if (get_translate_direction() == TRANSLATE_REVERSE || (get_translate_direction() == TRANSLATE_IDLE && cycle_count %2 == 1)) {
   123c8:	f7ff fdcc 	bl	11f64 <get_translate_direction>
   123cc:	b910      	cbnz	r0, 123d4 <do_melty+0xe0>
   123ce:	6833      	ldr	r3, [r6, #0]
   123d0:	07db      	lsls	r3, r3, #31
   123d2:	d4d2      	bmi.n	1237a <do_melty+0x86>
		if (melty_parameters.led_start > melty_parameters.led_stop) {
   123d4:	45c8      	cmp	r8, r9
				gpio_pin_set(dev, MELTY_LED_PIN, 0);
   123d6:	6828      	ldr	r0, [r5, #0]
		if (melty_parameters.led_start > melty_parameters.led_stop) {
   123d8:	d227      	bcs.n	1242a <do_melty+0x136>
    		if (time_spent_this_rotation_us >= melty_parameters.led_start || time_spent_this_rotation_us <= melty_parameters.led_stop) {
   123da:	454c      	cmp	r4, r9
   123dc:	d201      	bcs.n	123e2 <do_melty+0xee>
			if (time_spent_this_rotation_us >= melty_parameters.led_start && time_spent_this_rotation_us <= melty_parameters.led_stop) {
   123de:	4544      	cmp	r4, r8
   123e0:	d825      	bhi.n	1242e <do_melty+0x13a>
				gpio_pin_set(dev, MELTY_LED_PIN, 1);
   123e2:	2201      	movs	r2, #1
				gpio_pin_set(dev, MELTY_LED_PIN, 0);
   123e4:	2102      	movs	r1, #2
   123e6:	f7ff fe17 	bl	12018 <gpio_pin_set.isra.0>
   123ea:	f019 fa09 	bl	2b800 <sys_clock_cycle_get_32>
		} else {
			/* Slower algorithm but input is first divided before being multiplied
			 * which prevents overflow of intermediate value.
			 */
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
   123ee:	4913      	ldr	r1, [pc, #76]	; (1243c <do_melty+0x148>)
		cycles_spent = stop_time - start_time;
   123f0:	eba0 000a 	sub.w	r0, r0, sl
   123f4:	f3c0 030e 	ubfx	r3, r0, #0, #15
   123f8:	fba3 3201 	umull	r3, r2, r3, r1
   123fc:	0bdb      	lsrs	r3, r3, #15
   123fe:	0bc0      	lsrs	r0, r0, #15
   12400:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   12404:	fba0 0201 	umull	r0, r2, r0, r1
   12408:	181b      	adds	r3, r3, r0
		time_spent_this_rotation_us += SYS_CLOCK_HW_CYCLES_TO_NS_AVG(cycles_spent, 1) / 1000;
   1240a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1240e:	fbb3 f3f2 	udiv	r3, r3, r2
   12412:	441c      	add	r4, r3
   12414:	f019 f9f4 	bl	2b800 <sys_clock_cycle_get_32>
   12418:	4682      	mov	sl, r0
   1241a:	e784      	b.n	12326 <do_melty+0x32>
			if (time_spent_this_rotation_us >= melty_parameters.motor_start2 || 
   1241c:	9b03      	ldr	r3, [sp, #12]
   1241e:	429c      	cmp	r4, r3
   12420:	d9ad      	bls.n	1237e <do_melty+0x8a>
					gpio_pin_set(dev, MOTOR_PIN1, 0);
   12422:	2200      	movs	r2, #0
   12424:	e7ac      	b.n	12380 <do_melty+0x8c>
					gpio_pin_set(dev, MOTOR_PIN2, 0);
   12426:	2200      	movs	r2, #0
   12428:	e7b6      	b.n	12398 <do_melty+0xa4>
			if (time_spent_this_rotation_us >= melty_parameters.led_start && time_spent_this_rotation_us <= melty_parameters.led_stop) {
   1242a:	454c      	cmp	r4, r9
   1242c:	d2d7      	bcs.n	123de <do_melty+0xea>
				gpio_pin_set(dev, MELTY_LED_PIN, 0);
   1242e:	2200      	movs	r2, #0
   12430:	e7d8      	b.n	123e4 <do_melty+0xf0>
   12432:	bf00      	nop
   12434:	20002148 	.word	0x20002148
   12438:	2000214c 	.word	0x2000214c
   1243c:	3b9aca00 	.word	0x3b9aca00

00012440 <status_led_flash>:

void status_led_flash(int connected) {
   12440:	b570      	push	{r4, r5, r6, lr}

	gpio_pin_set(dev, MELTY_LED_PIN, 0);
   12442:	4e1d      	ldr	r6, [pc, #116]	; (124b8 <status_led_flash+0x78>)
void status_led_flash(int connected) {
   12444:	4604      	mov	r4, r0
	gpio_pin_set(dev, MELTY_LED_PIN, 0);
   12446:	2200      	movs	r2, #0
   12448:	6830      	ldr	r0, [r6, #0]
   1244a:	2102      	movs	r1, #2
   1244c:	f7ff fde4 	bl	12018 <gpio_pin_set.isra.0>
	
    //do accel dependent flash if not connected (provides easy way to verify accelerometer is working)
	//fast flash if connected
    if (connected == 0) {
   12450:	bb1c      	cbnz	r4, 1249a <status_led_flash+0x5a>
        k_sleep(K_MSEC(200));
   12452:	2100      	movs	r1, #0
   12454:	f641 109a 	movw	r0, #6554	; 0x199a
   12458:	f015 ff34 	bl	282c4 <k_sleep.isra.0>
        int on_time = 1 + (int)(get_accel_force() * 50.0f);
   1245c:	f7ff fe16 	bl	1208c <get_accel_force>
   12460:	4916      	ldr	r1, [pc, #88]	; (124bc <status_led_flash+0x7c>)
   12462:	f7ee fb79 	bl	b58 <__aeabi_fmul>
   12466:	f7ee fd3d 	bl	ee4 <__aeabi_f2iz>
   1246a:	1c45      	adds	r5, r0, #1

        if (on_time > 0) {
   1246c:	2d00      	cmp	r5, #0
   1246e:	dd22      	ble.n	124b6 <status_led_flash+0x76>
            gpio_pin_set(dev, MELTY_LED_PIN, 1);
   12470:	6830      	ldr	r0, [r6, #0]
   12472:	2201      	movs	r2, #1
   12474:	2102      	movs	r1, #2
   12476:	f7ff fdcf 	bl	12018 <gpio_pin_set.isra.0>
			return ((t * to_hz + off) / from_hz);
   1247a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1247e:	f240 30e7 	movw	r0, #999	; 0x3e7
   12482:	4621      	mov	r1, r4
   12484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12488:	2300      	movs	r3, #0
   1248a:	fbc5 0106 	smlal	r0, r1, r5, r6
   1248e:	f7ee fd6f 	bl	f70 <__aeabi_uldivmod>
        k_sleep(K_MSEC(50));
        gpio_pin_set(dev, MELTY_LED_PIN, 1);
        k_sleep(K_MSEC(50));
    }

}
   12492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        k_sleep(K_MSEC(50));
   12496:	f015 bf15 	b.w	282c4 <k_sleep.isra.0>
        k_sleep(K_MSEC(50));
   1249a:	f240 6067 	movw	r0, #1639	; 0x667
   1249e:	2100      	movs	r1, #0
   124a0:	f015 ff10 	bl	282c4 <k_sleep.isra.0>
        gpio_pin_set(dev, MELTY_LED_PIN, 1);
   124a4:	6830      	ldr	r0, [r6, #0]
   124a6:	2102      	movs	r1, #2
   124a8:	2201      	movs	r2, #1
   124aa:	f7ff fdb5 	bl	12018 <gpio_pin_set.isra.0>
        k_sleep(K_MSEC(50));
   124ae:	f240 6067 	movw	r0, #1639	; 0x667
   124b2:	2100      	movs	r1, #0
   124b4:	e7ed      	b.n	12492 <status_led_flash+0x52>
}
   124b6:	bd70      	pop	{r4, r5, r6, pc}
   124b8:	2000214c 	.word	0x2000214c
   124bc:	42480000 	.word	0x42480000

000124c0 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   124c0:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   124c2:	4c0a      	ldr	r4, [pc, #40]	; (124ec <crc8_ccitt+0x2c>)
   124c4:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   124c6:	4291      	cmp	r1, r2
   124c8:	d100      	bne.n	124cc <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   124ca:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   124cc:	f811 3b01 	ldrb.w	r3, [r1], #1
   124d0:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   124d2:	0903      	lsrs	r3, r0, #4
   124d4:	5ce3      	ldrb	r3, [r4, r3]
   124d6:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   124da:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   124dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
   124e0:	5ce0      	ldrb	r0, [r4, r3]
   124e2:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   124e6:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   124e8:	e7ed      	b.n	124c6 <crc8_ccitt+0x6>
   124ea:	bf00      	nop
   124ec:	0002d528 	.word	0x0002d528

000124f0 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   124f0:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   124f2:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   124f6:	2b02      	cmp	r3, #2
{
   124f8:	b570      	push	{r4, r5, r6, lr}
   124fa:	4604      	mov	r4, r0
   124fc:	460e      	mov	r6, r1
	notify->result = res;
   124fe:	6081      	str	r1, [r0, #8]
	switch (method) {
   12500:	d010      	beq.n	12524 <sys_notify_finalize+0x34>
   12502:	2b03      	cmp	r3, #3
   12504:	d004      	beq.n	12510 <sys_notify_finalize+0x20>
   12506:	2b01      	cmp	r3, #1
   12508:	d10f      	bne.n	1252a <sys_notify_finalize+0x3a>
   1250a:	2500      	movs	r5, #0
   1250c:	4628      	mov	r0, r5
   1250e:	e001      	b.n	12514 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   12510:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   12512:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12514:	2300      	movs	r3, #0
   12516:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   12518:	b110      	cbz	r0, 12520 <sys_notify_finalize+0x30>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1251a:	4631      	mov	r1, r6
   1251c:	f012 fcd6 	bl	24ecc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   12520:	4628      	mov	r0, r5
   12522:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   12524:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   12526:	2500      	movs	r5, #0
		break;
   12528:	e7f4      	b.n	12514 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   1252a:	4905      	ldr	r1, [pc, #20]	; (12540 <sys_notify_finalize+0x50>)
   1252c:	4805      	ldr	r0, [pc, #20]	; (12544 <sys_notify_finalize+0x54>)
   1252e:	2245      	movs	r2, #69	; 0x45
   12530:	f016 f928 	bl	28784 <assert_print>
   12534:	4802      	ldr	r0, [pc, #8]	; (12540 <sys_notify_finalize+0x50>)
   12536:	2145      	movs	r1, #69	; 0x45
   12538:	f016 f91d 	bl	28776 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   1253c:	2500      	movs	r5, #0
   1253e:	e7e8      	b.n	12512 <sys_notify_finalize+0x22>
   12540:	0002d538 	.word	0x0002d538
   12544:	0002d509 	.word	0x0002d509

00012548 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   12548:	4b01      	ldr	r3, [pc, #4]	; (12550 <char_out+0x8>)
   1254a:	681b      	ldr	r3, [r3, #0]
   1254c:	4718      	bx	r3
   1254e:	bf00      	nop
   12550:	200005b8 	.word	0x200005b8

00012554 <__printk_hook_install>:
	_char_out = fn;
   12554:	4b01      	ldr	r3, [pc, #4]	; (1255c <__printk_hook_install+0x8>)
   12556:	6018      	str	r0, [r3, #0]
}
   12558:	4770      	bx	lr
   1255a:	bf00      	nop
   1255c:	200005b8 	.word	0x200005b8

00012560 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   12560:	b507      	push	{r0, r1, r2, lr}
   12562:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12564:	2100      	movs	r1, #0
   12566:	4602      	mov	r2, r0
   12568:	9100      	str	r1, [sp, #0]
   1256a:	4803      	ldr	r0, [pc, #12]	; (12578 <vprintk+0x18>)
   1256c:	f000 fc0e 	bl	12d8c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   12570:	b003      	add	sp, #12
   12572:	f85d fb04 	ldr.w	pc, [sp], #4
   12576:	bf00      	nop
   12578:	00012549 	.word	0x00012549

0001257c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1257c:	b530      	push	{r4, r5, lr}
   1257e:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   12580:	2500      	movs	r5, #0
   12582:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   12586:	4604      	mov	r4, r0
   12588:	9500      	str	r5, [sp, #0]
   1258a:	a903      	add	r1, sp, #12
   1258c:	4805      	ldr	r0, [pc, #20]	; (125a4 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   1258e:	9505      	str	r5, [sp, #20]
   12590:	f000 fbfc 	bl	12d8c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12594:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   12598:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1259a:	bfb8      	it	lt
   1259c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1259e:	b007      	add	sp, #28
   125a0:	bd30      	pop	{r4, r5, pc}
   125a2:	bf00      	nop
   125a4:	00028409 	.word	0x00028409

000125a8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   125a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   125ac:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   125b0:	f01a 0f08 	tst.w	sl, #8
{
   125b4:	4604      	mov	r4, r0
   125b6:	4693      	mov	fp, r2
	if (processing) {
   125b8:	d01c      	beq.n	125f4 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
   125ba:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   125bc:	bf0c      	ite	eq
   125be:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   125c2:	f04a 0a20 	orrne.w	sl, sl, #32
   125c6:	f8a0 a01c 	strh.w	sl, [r0, #28]
   125ca:	f104 0014 	add.w	r0, r4, #20
   125ce:	f00f fd89 	bl	220e4 <z_spin_unlock_valid>
   125d2:	b940      	cbnz	r0, 125e6 <process_event+0x3e>
   125d4:	4992      	ldr	r1, [pc, #584]	; (12820 <process_event+0x278>)
   125d6:	4893      	ldr	r0, [pc, #588]	; (12824 <process_event+0x27c>)
   125d8:	22b9      	movs	r2, #185	; 0xb9
   125da:	f016 f8d3 	bl	28784 <assert_print>
   125de:	4890      	ldr	r0, [pc, #576]	; (12820 <process_event+0x278>)
   125e0:	21b9      	movs	r1, #185	; 0xb9
   125e2:	f016 f8c8 	bl	28776 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   125e6:	f38b 8811 	msr	BASEPRI, fp
   125ea:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   125ee:	b003      	add	sp, #12
   125f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   125f4:	4f8c      	ldr	r7, [pc, #560]	; (12828 <process_event+0x280>)
   125f6:	f8df 822c 	ldr.w	r8, [pc, #556]	; 12824 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   125fa:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   125fe:	2902      	cmp	r1, #2
   12600:	d106      	bne.n	12610 <process_event+0x68>
			evt = process_recheck(mgr);
   12602:	4620      	mov	r0, r4
   12604:	f015 ff2d 	bl	28462 <process_recheck>
		if (evt == EVT_NOP) {
   12608:	2800      	cmp	r0, #0
   1260a:	d0de      	beq.n	125ca <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1260c:	2801      	cmp	r0, #1
   1260e:	d163      	bne.n	126d8 <process_event+0x130>
			res = mgr->last_res;
   12610:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12614:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   12616:	f1b9 0f00 	cmp.w	r9, #0
   1261a:	da19      	bge.n	12650 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1261c:	2600      	movs	r6, #0
		*clients = mgr->clients;
   1261e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12620:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   12624:	e9c4 6600 	strd	r6, r6, [r4]
   12628:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1262c:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1262e:	8ba3      	ldrh	r3, [r4, #28]
   12630:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12634:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12636:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
   12638:	d003      	beq.n	12642 <process_event+0x9a>
		if (do_monitors
   1263a:	68a2      	ldr	r2, [r4, #8]
   1263c:	2a00      	cmp	r2, #0
   1263e:	f040 80f5 	bne.w	1282c <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
   12642:	b915      	cbnz	r5, 1264a <process_event+0xa2>
		    || (transit != NULL)) {
   12644:	2e00      	cmp	r6, #0
   12646:	f000 812f 	beq.w	128a8 <process_event+0x300>
   1264a:	f04f 0a00 	mov.w	sl, #0
   1264e:	e0ef      	b.n	12830 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12650:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12654:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12656:	2901      	cmp	r1, #1
   12658:	d820      	bhi.n	1269c <process_event+0xf4>
	list->head = NULL;
   1265a:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1265c:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   12660:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   12662:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12664:	b29b      	uxth	r3, r3
	list->tail = NULL;
   12666:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1266a:	d10a      	bne.n	12682 <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1266c:	b13d      	cbz	r5, 1267e <process_event+0xd6>
   1266e:	8be2      	ldrh	r2, [r4, #30]
   12670:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   12672:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   12674:	3201      	adds	r2, #1
   12676:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12678:	2900      	cmp	r1, #0
   1267a:	d1fa      	bne.n	12672 <process_event+0xca>
   1267c:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1267e:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12682:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   12684:	4620      	mov	r0, r4
   12686:	f015 feec 	bl	28462 <process_recheck>
   1268a:	4606      	mov	r6, r0
   1268c:	2800      	cmp	r0, #0
   1268e:	d0ce      	beq.n	1262e <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12690:	8ba3      	ldrh	r3, [r4, #28]
   12692:	f043 0320 	orr.w	r3, r3, #32
   12696:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   12698:	2600      	movs	r6, #0
   1269a:	e7c8      	b.n	1262e <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1269c:	2a04      	cmp	r2, #4
   1269e:	d10d      	bne.n	126bc <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126a0:	f023 0307 	bic.w	r3, r3, #7
   126a4:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   126a6:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   126a8:	4620      	mov	r0, r4
   126aa:	f015 feda 	bl	28462 <process_recheck>
   126ae:	4605      	mov	r5, r0
   126b0:	b180      	cbz	r0, 126d4 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   126b2:	f042 0220 	orr.w	r2, r2, #32
   126b6:	83a2      	strh	r2, [r4, #28]
   126b8:	2500      	movs	r5, #0
   126ba:	e7ed      	b.n	12698 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
   126bc:	f240 121b 	movw	r2, #283	; 0x11b
   126c0:	4639      	mov	r1, r7
   126c2:	4640      	mov	r0, r8
   126c4:	f016 f85e 	bl	28784 <assert_print>
   126c8:	f240 111b 	movw	r1, #283	; 0x11b
   126cc:	4638      	mov	r0, r7
   126ce:	f016 f852 	bl	28776 <assert_post_action>
   126d2:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   126d4:	462e      	mov	r6, r5
   126d6:	e7aa      	b.n	1262e <process_event+0x86>
		} else if (evt == EVT_START) {
   126d8:	2803      	cmp	r0, #3
   126da:	d131      	bne.n	12740 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   126dc:	f1ba 0f00 	cmp.w	sl, #0
   126e0:	d00a      	beq.n	126f8 <process_event+0x150>
   126e2:	4639      	mov	r1, r7
   126e4:	4640      	mov	r0, r8
   126e6:	f44f 72ab 	mov.w	r2, #342	; 0x156
   126ea:	f016 f84b 	bl	28784 <assert_print>
   126ee:	f44f 71ab 	mov.w	r1, #342	; 0x156
   126f2:	4638      	mov	r0, r7
   126f4:	f016 f83f 	bl	28776 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   126f8:	6823      	ldr	r3, [r4, #0]
   126fa:	b953      	cbnz	r3, 12712 <process_event+0x16a>
   126fc:	4639      	mov	r1, r7
   126fe:	4640      	mov	r0, r8
   12700:	f240 1257 	movw	r2, #343	; 0x157
   12704:	f016 f83e 	bl	28784 <assert_print>
   12708:	f240 1157 	movw	r1, #343	; 0x157
   1270c:	4638      	mov	r0, r7
   1270e:	f016 f832 	bl	28776 <assert_post_action>
			transit = mgr->transitions->start;
   12712:	6923      	ldr	r3, [r4, #16]
   12714:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   12716:	b956      	cbnz	r6, 1272e <process_event+0x186>
   12718:	4639      	mov	r1, r7
   1271a:	4640      	mov	r0, r8
   1271c:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   12720:	f016 f830 	bl	28784 <assert_print>
   12724:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   12728:	4638      	mov	r0, r7
   1272a:	f016 f824 	bl	28776 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1272e:	8ba3      	ldrh	r3, [r4, #28]
   12730:	f023 0307 	bic.w	r3, r3, #7
   12734:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12738:	83a3      	strh	r3, [r4, #28]
}
   1273a:	2500      	movs	r5, #0
		res = 0;
   1273c:	46a9      	mov	r9, r5
}
   1273e:	e776      	b.n	1262e <process_event+0x86>
		} else if (evt == EVT_STOP) {
   12740:	2804      	cmp	r0, #4
   12742:	d12e      	bne.n	127a2 <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   12744:	f1ba 0f02 	cmp.w	sl, #2
   12748:	d00a      	beq.n	12760 <process_event+0x1b8>
   1274a:	4639      	mov	r1, r7
   1274c:	4640      	mov	r0, r8
   1274e:	f240 125d 	movw	r2, #349	; 0x15d
   12752:	f016 f817 	bl	28784 <assert_print>
   12756:	f240 115d 	movw	r1, #349	; 0x15d
   1275a:	4638      	mov	r0, r7
   1275c:	f016 f80b 	bl	28776 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   12760:	8be3      	ldrh	r3, [r4, #30]
   12762:	b153      	cbz	r3, 1277a <process_event+0x1d2>
   12764:	4639      	mov	r1, r7
   12766:	4640      	mov	r0, r8
   12768:	f44f 72af 	mov.w	r2, #350	; 0x15e
   1276c:	f016 f80a 	bl	28784 <assert_print>
   12770:	f44f 71af 	mov.w	r1, #350	; 0x15e
   12774:	4638      	mov	r0, r7
   12776:	f015 fffe 	bl	28776 <assert_post_action>
			transit = mgr->transitions->stop;
   1277a:	6923      	ldr	r3, [r4, #16]
   1277c:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1277e:	b956      	cbnz	r6, 12796 <process_event+0x1ee>
   12780:	4639      	mov	r1, r7
   12782:	4640      	mov	r0, r8
   12784:	f240 1261 	movw	r2, #353	; 0x161
   12788:	f015 fffc 	bl	28784 <assert_print>
   1278c:	f240 1161 	movw	r1, #353	; 0x161
   12790:	4638      	mov	r0, r7
   12792:	f015 fff0 	bl	28776 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12796:	8ba3      	ldrh	r3, [r4, #28]
   12798:	f023 0307 	bic.w	r3, r3, #7
   1279c:	f043 0304 	orr.w	r3, r3, #4
   127a0:	e7ca      	b.n	12738 <process_event+0x190>
		} else if (evt == EVT_RESET) {
   127a2:	2805      	cmp	r0, #5
   127a4:	d12e      	bne.n	12804 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   127a6:	f1ba 0f01 	cmp.w	sl, #1
   127aa:	d00a      	beq.n	127c2 <process_event+0x21a>
   127ac:	4639      	mov	r1, r7
   127ae:	4640      	mov	r0, r8
   127b0:	f44f 72b2 	mov.w	r2, #356	; 0x164
   127b4:	f015 ffe6 	bl	28784 <assert_print>
   127b8:	f44f 71b2 	mov.w	r1, #356	; 0x164
   127bc:	4638      	mov	r0, r7
   127be:	f015 ffda 	bl	28776 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   127c2:	6823      	ldr	r3, [r4, #0]
   127c4:	b953      	cbnz	r3, 127dc <process_event+0x234>
   127c6:	4639      	mov	r1, r7
   127c8:	4640      	mov	r0, r8
   127ca:	f240 1265 	movw	r2, #357	; 0x165
   127ce:	f015 ffd9 	bl	28784 <assert_print>
   127d2:	f240 1165 	movw	r1, #357	; 0x165
   127d6:	4638      	mov	r0, r7
   127d8:	f015 ffcd 	bl	28776 <assert_post_action>
			transit = mgr->transitions->reset;
   127dc:	6923      	ldr	r3, [r4, #16]
   127de:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   127e0:	b956      	cbnz	r6, 127f8 <process_event+0x250>
   127e2:	4639      	mov	r1, r7
   127e4:	4640      	mov	r0, r8
   127e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
   127ea:	f015 ffcb 	bl	28784 <assert_print>
   127ee:	f44f 71b4 	mov.w	r1, #360	; 0x168
   127f2:	4638      	mov	r0, r7
   127f4:	f015 ffbf 	bl	28776 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   127f8:	8ba3      	ldrh	r3, [r4, #28]
   127fa:	f023 0307 	bic.w	r3, r3, #7
   127fe:	f043 0305 	orr.w	r3, r3, #5
   12802:	e799      	b.n	12738 <process_event+0x190>
			__ASSERT_NO_MSG(false);
   12804:	f240 126b 	movw	r2, #363	; 0x16b
   12808:	4639      	mov	r1, r7
   1280a:	4640      	mov	r0, r8
   1280c:	f015 ffba 	bl	28784 <assert_print>
   12810:	2500      	movs	r5, #0
   12812:	f240 116b 	movw	r1, #363	; 0x16b
   12816:	4638      	mov	r0, r7
   12818:	f015 ffad 	bl	28776 <assert_post_action>
		onoff_transition_fn transit = NULL;
   1281c:	462e      	mov	r6, r5
   1281e:	e78d      	b.n	1273c <process_event+0x194>
   12820:	0002d57d 	.word	0x0002d57d
   12824:	0002d509 	.word	0x0002d509
   12828:	0002d55b 	.word	0x0002d55b
				   && !sys_slist_is_empty(&mgr->monitors);
   1282c:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12830:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   12834:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   12836:	f104 0314 	add.w	r3, r4, #20
   1283a:	4618      	mov	r0, r3
   1283c:	9301      	str	r3, [sp, #4]
   1283e:	f00f fc51 	bl	220e4 <z_spin_unlock_valid>
   12842:	b940      	cbnz	r0, 12856 <process_event+0x2ae>
   12844:	4931      	ldr	r1, [pc, #196]	; (1290c <process_event+0x364>)
   12846:	4640      	mov	r0, r8
   12848:	22b9      	movs	r2, #185	; 0xb9
   1284a:	f015 ff9b 	bl	28784 <assert_print>
   1284e:	482f      	ldr	r0, [pc, #188]	; (1290c <process_event+0x364>)
   12850:	21b9      	movs	r1, #185	; 0xb9
   12852:	f015 ff90 	bl	28776 <assert_post_action>
   12856:	f38b 8811 	msr	BASEPRI, fp
   1285a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1285e:	f1ba 0f00 	cmp.w	sl, #0
   12862:	d130      	bne.n	128c6 <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
   12864:	2d00      	cmp	r5, #0
   12866:	d140      	bne.n	128ea <process_event+0x342>
			if (transit != NULL) {
   12868:	b116      	cbz	r6, 12870 <process_event+0x2c8>
				transit(mgr, transition_complete);
   1286a:	4929      	ldr	r1, [pc, #164]	; (12910 <process_event+0x368>)
   1286c:	4620      	mov	r0, r4
   1286e:	47b0      	blx	r6
	__asm__ volatile(
   12870:	f04f 0340 	mov.w	r3, #64	; 0x40
   12874:	f3ef 8b11 	mrs	fp, BASEPRI
   12878:	f383 8812 	msr	BASEPRI_MAX, r3
   1287c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12880:	9801      	ldr	r0, [sp, #4]
   12882:	f00f fc21 	bl	220c8 <z_spin_lock_valid>
   12886:	b940      	cbnz	r0, 1289a <process_event+0x2f2>
   12888:	4920      	ldr	r1, [pc, #128]	; (1290c <process_event+0x364>)
   1288a:	4640      	mov	r0, r8
   1288c:	228e      	movs	r2, #142	; 0x8e
   1288e:	f015 ff79 	bl	28784 <assert_print>
   12892:	481e      	ldr	r0, [pc, #120]	; (1290c <process_event+0x364>)
   12894:	218e      	movs	r1, #142	; 0x8e
   12896:	f015 ff6e 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   1289a:	9801      	ldr	r0, [sp, #4]
   1289c:	f00f fc32 	bl	22104 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   128a0:	8ba3      	ldrh	r3, [r4, #28]
   128a2:	f023 0308 	bic.w	r3, r3, #8
   128a6:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   128a8:	8ba3      	ldrh	r3, [r4, #28]
   128aa:	06da      	lsls	r2, r3, #27
   128ac:	d525      	bpl.n	128fa <process_event+0x352>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   128ae:	f023 0310 	bic.w	r3, r3, #16
   128b2:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   128b4:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   128b6:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   128ba:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
   128be:	2900      	cmp	r1, #0
   128c0:	f47f ae9d 	bne.w	125fe <process_event+0x56>
out:
   128c4:	e681      	b.n	125ca <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   128c6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   128c8:	2900      	cmp	r1, #0
   128ca:	d0cb      	beq.n	12864 <process_event+0x2bc>
	return node->next;
   128cc:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
   128d0:	f8d1 b004 	ldr.w	fp, [r1, #4]
   128d4:	9a00      	ldr	r2, [sp, #0]
   128d6:	464b      	mov	r3, r9
   128d8:	4620      	mov	r0, r4
   128da:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   128dc:	f1ba 0f00 	cmp.w	sl, #0
   128e0:	d0c0      	beq.n	12864 <process_event+0x2bc>
   128e2:	4651      	mov	r1, sl
   128e4:	f8da a000 	ldr.w	sl, [sl]
   128e8:	e7f2      	b.n	128d0 <process_event+0x328>
   128ea:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   128ec:	9a00      	ldr	r2, [sp, #0]
   128ee:	682d      	ldr	r5, [r5, #0]
   128f0:	464b      	mov	r3, r9
   128f2:	4620      	mov	r0, r4
   128f4:	f015 fdd1 	bl	2849a <notify_one>
   128f8:	e7b4      	b.n	12864 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   128fa:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   128fe:	bf1e      	ittt	ne
   12900:	f023 0320 	bicne.w	r3, r3, #32
   12904:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   12906:	2102      	movne	r1, #2
   12908:	e7d5      	b.n	128b6 <process_event+0x30e>
   1290a:	bf00      	nop
   1290c:	0002d57d 	.word	0x0002d57d
   12910:	00012915 	.word	0x00012915

00012914 <transition_complete>:
{
   12914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12916:	4604      	mov	r4, r0
   12918:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1291a:	f100 0614 	add.w	r6, r0, #20
   1291e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12922:	f3ef 8711 	mrs	r7, BASEPRI
   12926:	f383 8812 	msr	BASEPRI_MAX, r3
   1292a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1292e:	4630      	mov	r0, r6
   12930:	f00f fbca 	bl	220c8 <z_spin_lock_valid>
   12934:	b940      	cbnz	r0, 12948 <transition_complete+0x34>
   12936:	490a      	ldr	r1, [pc, #40]	; (12960 <transition_complete+0x4c>)
   12938:	480a      	ldr	r0, [pc, #40]	; (12964 <transition_complete+0x50>)
   1293a:	228e      	movs	r2, #142	; 0x8e
   1293c:	f015 ff22 	bl	28784 <assert_print>
   12940:	4807      	ldr	r0, [pc, #28]	; (12960 <transition_complete+0x4c>)
   12942:	218e      	movs	r1, #142	; 0x8e
   12944:	f015 ff17 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   12948:	4630      	mov	r0, r6
   1294a:	f00f fbdb 	bl	22104 <z_spin_lock_set_owner>
	mgr->last_res = res;
   1294e:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   12950:	463a      	mov	r2, r7
   12952:	4620      	mov	r0, r4
   12954:	2101      	movs	r1, #1
}
   12956:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1295a:	f7ff be25 	b.w	125a8 <process_event>
   1295e:	bf00      	nop
   12960:	0002d57d 	.word	0x0002d57d
   12964:	0002d509 	.word	0x0002d509

00012968 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1296c:	4604      	mov	r4, r0
   1296e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   12970:	f015 fda9 	bl	284c6 <validate_args>

	if (rv < 0) {
   12974:	1e05      	subs	r5, r0, #0
   12976:	db54      	blt.n	12a22 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12978:	f104 0914 	add.w	r9, r4, #20
   1297c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12980:	f3ef 8a11 	mrs	sl, BASEPRI
   12984:	f383 8812 	msr	BASEPRI_MAX, r3
   12988:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1298c:	4648      	mov	r0, r9
   1298e:	f00f fb9b 	bl	220c8 <z_spin_lock_valid>
   12992:	b940      	cbnz	r0, 129a6 <onoff_request+0x3e>
   12994:	4933      	ldr	r1, [pc, #204]	; (12a64 <onoff_request+0xfc>)
   12996:	4834      	ldr	r0, [pc, #208]	; (12a68 <onoff_request+0x100>)
   12998:	228e      	movs	r2, #142	; 0x8e
   1299a:	f015 fef3 	bl	28784 <assert_print>
   1299e:	4831      	ldr	r0, [pc, #196]	; (12a64 <onoff_request+0xfc>)
   129a0:	218e      	movs	r1, #142	; 0x8e
   129a2:	f015 fee8 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   129a6:	4648      	mov	r0, r9
   129a8:	f00f fbac 	bl	22104 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   129ac:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   129ae:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   129b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   129b4:	428b      	cmp	r3, r1
   129b6:	f002 0607 	and.w	r6, r2, #7
   129ba:	d04a      	beq.n	12a52 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   129bc:	2e02      	cmp	r6, #2
   129be:	d11f      	bne.n	12a00 <onoff_request+0x98>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   129c0:	3301      	adds	r3, #1
   129c2:	83e3      	strh	r3, [r4, #30]
	rv = state;
   129c4:	4635      	mov	r5, r6
		notify = true;
   129c6:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   129ca:	4648      	mov	r0, r9
   129cc:	f00f fb8a 	bl	220e4 <z_spin_unlock_valid>
   129d0:	b940      	cbnz	r0, 129e4 <onoff_request+0x7c>
   129d2:	4924      	ldr	r1, [pc, #144]	; (12a64 <onoff_request+0xfc>)
   129d4:	4824      	ldr	r0, [pc, #144]	; (12a68 <onoff_request+0x100>)
   129d6:	22b9      	movs	r2, #185	; 0xb9
   129d8:	f015 fed4 	bl	28784 <assert_print>
   129dc:	4821      	ldr	r0, [pc, #132]	; (12a64 <onoff_request+0xfc>)
   129de:	21b9      	movs	r1, #185	; 0xb9
   129e0:	f015 fec9 	bl	28776 <assert_post_action>
	__asm__ volatile(
   129e4:	f38a 8811 	msr	BASEPRI, sl
   129e8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   129ec:	f1b8 0f00 	cmp.w	r8, #0
   129f0:	d017      	beq.n	12a22 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   129f2:	2300      	movs	r3, #0
   129f4:	4632      	mov	r2, r6
   129f6:	4639      	mov	r1, r7
   129f8:	4620      	mov	r0, r4
   129fa:	f015 fd4e 	bl	2849a <notify_one>
   129fe:	e010      	b.n	12a22 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   12a00:	0793      	lsls	r3, r2, #30
   12a02:	d001      	beq.n	12a08 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   12a04:	2e06      	cmp	r6, #6
   12a06:	d10f      	bne.n	12a28 <onoff_request+0xc0>
	parent->next = child;
   12a08:	2300      	movs	r3, #0
   12a0a:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   12a0c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   12a0e:	b9eb      	cbnz	r3, 12a4c <onoff_request+0xe4>
	list->head = node;
   12a10:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   12a14:	4635      	mov	r5, r6
   12a16:	b9f6      	cbnz	r6, 12a56 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   12a18:	4652      	mov	r2, sl
   12a1a:	2102      	movs	r1, #2
   12a1c:	4620      	mov	r0, r4
   12a1e:	f7ff fdc3 	bl	125a8 <process_event>
		}
	}

	return rv;
}
   12a22:	4628      	mov	r0, r5
   12a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   12a28:	2e05      	cmp	r6, #5
   12a2a:	d017      	beq.n	12a5c <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   12a2c:	2e01      	cmp	r6, #1
   12a2e:	d00a      	beq.n	12a46 <onoff_request+0xde>
   12a30:	490e      	ldr	r1, [pc, #56]	; (12a6c <onoff_request+0x104>)
   12a32:	480d      	ldr	r0, [pc, #52]	; (12a68 <onoff_request+0x100>)
   12a34:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   12a38:	f015 fea4 	bl	28784 <assert_print>
   12a3c:	480b      	ldr	r0, [pc, #44]	; (12a6c <onoff_request+0x104>)
   12a3e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   12a42:	f015 fe98 	bl	28776 <assert_post_action>
		rv = -EIO;
   12a46:	f06f 0504 	mvn.w	r5, #4
   12a4a:	e004      	b.n	12a56 <onoff_request+0xee>
	parent->next = child;
   12a4c:	601f      	str	r7, [r3, #0]
	list->tail = node;
   12a4e:	6067      	str	r7, [r4, #4]
}
   12a50:	e7e0      	b.n	12a14 <onoff_request+0xac>
		rv = -EAGAIN;
   12a52:	f06f 050a 	mvn.w	r5, #10
   12a56:	f04f 0800 	mov.w	r8, #0
   12a5a:	e7b6      	b.n	129ca <onoff_request+0x62>
		rv = -ENOTSUP;
   12a5c:	f06f 0585 	mvn.w	r5, #133	; 0x85
   12a60:	e7f9      	b.n	12a56 <onoff_request+0xee>
   12a62:	bf00      	nop
   12a64:	0002d57d 	.word	0x0002d57d
   12a68:	0002d509 	.word	0x0002d509
   12a6c:	0002d55b 	.word	0x0002d55b

00012a70 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12a70:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   12a72:	b379      	cbz	r1, 12ad4 <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   12a74:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12a76:	1f0c      	subs	r4, r1, #4
   12a78:	1b64      	subs	r4, r4, r5
   12a7a:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   12a7c:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   12a80:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   12a82:	8863      	ldrh	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   12a84:	07db      	lsls	r3, r3, #31
   12a86:	d408      	bmi.n	12a9a <sys_heap_free+0x2a>
   12a88:	4913      	ldr	r1, [pc, #76]	; (12ad8 <sys_heap_free+0x68>)
   12a8a:	4814      	ldr	r0, [pc, #80]	; (12adc <sys_heap_free+0x6c>)
   12a8c:	22ac      	movs	r2, #172	; 0xac
   12a8e:	f015 fe79 	bl	28784 <assert_print>
   12a92:	4811      	ldr	r0, [pc, #68]	; (12ad8 <sys_heap_free+0x68>)
   12a94:	21ac      	movs	r1, #172	; 0xac
   12a96:	f015 fe6e 	bl	28776 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   12a9a:	4631      	mov	r1, r6
   12a9c:	4628      	mov	r0, r5
   12a9e:	f015 fd3e 	bl	2851e <chunk_size>
   12aa2:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   12aa4:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   12aa8:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   12aaa:	4286      	cmp	r6, r0
   12aac:	d008      	beq.n	12ac0 <sys_heap_free+0x50>
   12aae:	490a      	ldr	r1, [pc, #40]	; (12ad8 <sys_heap_free+0x68>)
   12ab0:	480a      	ldr	r0, [pc, #40]	; (12adc <sys_heap_free+0x6c>)
   12ab2:	22b4      	movs	r2, #180	; 0xb4
   12ab4:	f015 fe66 	bl	28784 <assert_print>
   12ab8:	4807      	ldr	r0, [pc, #28]	; (12ad8 <sys_heap_free+0x68>)
   12aba:	21b4      	movs	r1, #180	; 0xb4
   12abc:	f015 fe5b 	bl	28776 <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   12ac0:	8863      	ldrh	r3, [r4, #2]
   12ac2:	f023 0301 	bic.w	r3, r3, #1
   12ac6:	8063      	strh	r3, [r4, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   12ac8:	4631      	mov	r1, r6
   12aca:	4628      	mov	r0, r5
}
   12acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   12ad0:	f015 bde1 	b.w	28696 <free_chunk>
}
   12ad4:	bd70      	pop	{r4, r5, r6, pc}
   12ad6:	bf00      	nop
   12ad8:	0002d5aa 	.word	0x0002d5aa
   12adc:	0002d509 	.word	0x0002d509

00012ae0 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   12ae0:	424b      	negs	r3, r1
{
   12ae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   12ae6:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   12aea:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   12aee:	6806      	ldr	r6, [r0, #0]
{
   12af0:	4614      	mov	r4, r2
	if (align != rew) {
   12af2:	d01b      	beq.n	12b2c <sys_heap_aligned_alloc+0x4c>
		return false;
   12af4:	2f04      	cmp	r7, #4
   12af6:	463d      	mov	r5, r7
   12af8:	46b9      	mov	r9, r7
   12afa:	bf28      	it	cs
   12afc:	2504      	movcs	r5, #4
		align -= rew;
   12afe:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12b00:	f107 3aff 	add.w	sl, r7, #4294967295	; 0xffffffff
   12b04:	ea1a 0f07 	tst.w	sl, r7
   12b08:	d00a      	beq.n	12b20 <sys_heap_aligned_alloc+0x40>
   12b0a:	4931      	ldr	r1, [pc, #196]	; (12bd0 <sys_heap_aligned_alloc+0xf0>)
   12b0c:	4831      	ldr	r0, [pc, #196]	; (12bd4 <sys_heap_aligned_alloc+0xf4>)
   12b0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12b12:	f015 fe37 	bl	28784 <assert_print>
   12b16:	482e      	ldr	r0, [pc, #184]	; (12bd0 <sys_heap_aligned_alloc+0xf0>)
   12b18:	f44f 71a0 	mov.w	r1, #320	; 0x140
   12b1c:	f015 fe2b 	bl	28776 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   12b20:	b97c      	cbnz	r4, 12b42 <sys_heap_aligned_alloc+0x62>
		return NULL;
   12b22:	f04f 0900 	mov.w	r9, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   12b26:	4648      	mov	r0, r9
   12b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   12b2c:	2904      	cmp	r1, #4
   12b2e:	d804      	bhi.n	12b3a <sys_heap_aligned_alloc+0x5a>
}
   12b30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   12b34:	4611      	mov	r1, r2
   12b36:	f015 bddf 	b.w	286f8 <sys_heap_alloc>
		rew = 0;
   12b3a:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   12b3e:	2504      	movs	r5, #4
   12b40:	e7de      	b.n	12b00 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   12b42:	68b3      	ldr	r3, [r6, #8]
   12b44:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   12b48:	d9eb      	bls.n	12b22 <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12b4a:	f104 010b 	add.w	r1, r4, #11
   12b4e:	4439      	add	r1, r7
   12b50:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   12b52:	08c9      	lsrs	r1, r1, #3
   12b54:	4630      	mov	r0, r6
   12b56:	f015 fd38 	bl	285ca <alloc_chunk>
	if (c0 == 0) {
   12b5a:	4680      	mov	r8, r0
   12b5c:	2800      	cmp	r0, #0
   12b5e:	d0e0      	beq.n	12b22 <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   12b60:	f109 0504 	add.w	r5, r9, #4
   12b64:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   12b68:	4435      	add	r5, r6
   12b6a:	4455      	add	r5, sl
   12b6c:	427f      	negs	r7, r7
   12b6e:	402f      	ands	r7, r5
   12b70:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12b74:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12b76:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12b7a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12b7c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12b7e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   12b82:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   12b84:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12b88:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   12b8c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   12b90:	d208      	bcs.n	12ba4 <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   12b92:	4601      	mov	r1, r0
   12b94:	463a      	mov	r2, r7
   12b96:	4630      	mov	r0, r6
   12b98:	f015 fd63 	bl	28662 <split_chunks>
		free_list_add(h, c0);
   12b9c:	4641      	mov	r1, r8
   12b9e:	4630      	mov	r0, r6
   12ba0:	f015 fcc2 	bl	28528 <free_list_add>
	return c + chunk_size(h, c);
   12ba4:	4639      	mov	r1, r7
   12ba6:	4630      	mov	r0, r6
   12ba8:	f015 fcb9 	bl	2851e <chunk_size>
   12bac:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   12bae:	4284      	cmp	r4, r0
   12bb0:	d207      	bcs.n	12bc2 <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c, c_end);
   12bb2:	4630      	mov	r0, r6
   12bb4:	4622      	mov	r2, r4
   12bb6:	f015 fd54 	bl	28662 <split_chunks>
		free_list_add(h, c_end);
   12bba:	4621      	mov	r1, r4
   12bbc:	4630      	mov	r0, r6
   12bbe:	f015 fcb3 	bl	28528 <free_list_add>
	void *cmem = &buf[c];
   12bc2:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12bc6:	8873      	ldrh	r3, [r6, #2]
   12bc8:	f043 0301 	orr.w	r3, r3, #1
   12bcc:	8073      	strh	r3, [r6, #2]
   12bce:	e7aa      	b.n	12b26 <sys_heap_aligned_alloc+0x46>
   12bd0:	0002d5aa 	.word	0x0002d5aa
   12bd4:	0002d509 	.word	0x0002d509

00012bd8 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   12bd8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   12bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12be0:	4604      	mov	r4, r0
   12be2:	460e      	mov	r6, r1
   12be4:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   12be6:	d35e      	bcc.n	12ca6 <sys_heap_init+0xce>
   12be8:	4936      	ldr	r1, [pc, #216]	; (12cc4 <sys_heap_init+0xec>)
   12bea:	4837      	ldr	r0, [pc, #220]	; (12cc8 <sys_heap_init+0xf0>)
   12bec:	f240 12e3 	movw	r2, #483	; 0x1e3
   12bf0:	f015 fdc8 	bl	28784 <assert_print>
   12bf4:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12bf8:	4832      	ldr	r0, [pc, #200]	; (12cc4 <sys_heap_init+0xec>)
   12bfa:	f015 fdbc 	bl	28776 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   12bfe:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12c00:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12c02:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12c04:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12c08:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12c0c:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12c0e:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12c10:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12c14:	d80a      	bhi.n	12c2c <sys_heap_init+0x54>
   12c16:	492b      	ldr	r1, [pc, #172]	; (12cc4 <sys_heap_init+0xec>)
   12c18:	482b      	ldr	r0, [pc, #172]	; (12cc8 <sys_heap_init+0xf0>)
   12c1a:	f240 12f3 	movw	r2, #499	; 0x1f3
   12c1e:	f015 fdb1 	bl	28784 <assert_print>
   12c22:	4828      	ldr	r0, [pc, #160]	; (12cc4 <sys_heap_init+0xec>)
   12c24:	f240 11f3 	movw	r1, #499	; 0x1f3
   12c28:	f015 fda5 	bl	28776 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   12c2c:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   12c2e:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   12c32:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12c36:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
   12c3a:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12c3c:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   12c3e:	2300      	movs	r3, #0
   12c40:	08e4      	lsrs	r4, r4, #3
   12c42:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12c44:	1c63      	adds	r3, r4, #1
   12c46:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   12c48:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12c4a:	d90a      	bls.n	12c62 <sys_heap_init+0x8a>
   12c4c:	491d      	ldr	r1, [pc, #116]	; (12cc4 <sys_heap_init+0xec>)
   12c4e:	481e      	ldr	r0, [pc, #120]	; (12cc8 <sys_heap_init+0xf0>)
   12c50:	f44f 7201 	mov.w	r2, #516	; 0x204
   12c54:	f015 fd96 	bl	28784 <assert_print>
   12c58:	481a      	ldr	r0, [pc, #104]	; (12cc4 <sys_heap_init+0xec>)
   12c5a:	f44f 7101 	mov.w	r1, #516	; 0x204
   12c5e:	f015 fd8a 	bl	28776 <assert_post_action>
   12c62:	f105 0310 	add.w	r3, r5, #16
   12c66:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   12c6a:	2200      	movs	r2, #0

	for (int i = 0; i < nb_buckets; i++) {
   12c6c:	4598      	cmp	r8, r3
   12c6e:	d125      	bne.n	12cbc <sys_heap_init+0xe4>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12c70:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12c72:	f043 0301 	orr.w	r3, r3, #1
   12c76:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
   12c78:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   12c7c:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12c7e:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
   12c80:	802a      	strh	r2, [r5, #0]
   12c82:	8048      	strh	r0, [r1, #2]
   12c84:	19a9      	adds	r1, r5, r6
   12c86:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
   12c8a:	804a      	strh	r2, [r1, #2]
   12c8c:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
   12c8e:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   12c92:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12c94:	885a      	ldrh	r2, [r3, #2]
   12c96:	f042 0201 	orr.w	r2, r2, #1
   12c9a:	4628      	mov	r0, r5
   12c9c:	805a      	strh	r2, [r3, #2]
}
   12c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   12ca2:	f015 bc41 	b.w	28528 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12ca6:	2a04      	cmp	r2, #4
   12ca8:	d8a9      	bhi.n	12bfe <sys_heap_init+0x26>
   12caa:	4906      	ldr	r1, [pc, #24]	; (12cc4 <sys_heap_init+0xec>)
   12cac:	4806      	ldr	r0, [pc, #24]	; (12cc8 <sys_heap_init+0xf0>)
   12cae:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   12cb2:	f015 fd67 	bl	28784 <assert_print>
   12cb6:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   12cba:	e79d      	b.n	12bf8 <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   12cbc:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
   12cc0:	e7d4      	b.n	12c6c <sys_heap_init+0x94>
   12cc2:	bf00      	nop
   12cc4:	0002d5aa 	.word	0x0002d5aa
   12cc8:	0002d509 	.word	0x0002d509

00012ccc <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   12ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   12cce:	4e08      	ldr	r6, [pc, #32]	; (12cf0 <extract_decimal+0x24>)
   12cd0:	6802      	ldr	r2, [r0, #0]
{
   12cd2:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
   12cd4:	270a      	movs	r7, #10
	size_t val = 0;
   12cd6:	2000      	movs	r0, #0
   12cd8:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
   12cda:	3201      	adds	r2, #1
   12cdc:	780c      	ldrb	r4, [r1, #0]
   12cde:	5da5      	ldrb	r5, [r4, r6]
   12ce0:	076d      	lsls	r5, r5, #29
   12ce2:	d401      	bmi.n	12ce8 <extract_decimal+0x1c>
	}
	*str = sp;
   12ce4:	6019      	str	r1, [r3, #0]
	return val;
}
   12ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   12ce8:	fb07 4000 	mla	r0, r7, r0, r4
   12cec:	3830      	subs	r0, #48	; 0x30
   12cee:	e7f3      	b.n	12cd8 <extract_decimal+0xc>
   12cf0:	000306b1 	.word	0x000306b1

00012cf4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   12cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cf8:	4615      	mov	r5, r2
   12cfa:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   12cfc:	78d3      	ldrb	r3, [r2, #3]
   12cfe:	4a22      	ldr	r2, [pc, #136]	; (12d88 <encode_uint+0x94>)
   12d00:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
   12d04:	2b6f      	cmp	r3, #111	; 0x6f
{
   12d06:	4680      	mov	r8, r0
   12d08:	460f      	mov	r7, r1
   12d0a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   12d0e:	d029      	beq.n	12d64 <encode_uint+0x70>
   12d10:	d824      	bhi.n	12d5c <encode_uint+0x68>
		return 16;
   12d12:	2b58      	cmp	r3, #88	; 0x58
   12d14:	bf14      	ite	ne
   12d16:	260a      	movne	r6, #10
   12d18:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   12d1a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   12d1e:	4632      	mov	r2, r6
   12d20:	2300      	movs	r3, #0
   12d22:	4640      	mov	r0, r8
   12d24:	4639      	mov	r1, r7
   12d26:	f7ee f923 	bl	f70 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   12d2a:	2a09      	cmp	r2, #9
   12d2c:	b2d4      	uxtb	r4, r2
   12d2e:	d81e      	bhi.n	12d6e <encode_uint+0x7a>
   12d30:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   12d32:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12d34:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   12d36:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12d3a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   12d3e:	d301      	bcc.n	12d44 <encode_uint+0x50>
   12d40:	45d1      	cmp	r9, sl
   12d42:	d811      	bhi.n	12d68 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   12d44:	782b      	ldrb	r3, [r5, #0]
   12d46:	069b      	lsls	r3, r3, #26
   12d48:	d505      	bpl.n	12d56 <encode_uint+0x62>
		if (radix == 8) {
   12d4a:	2e08      	cmp	r6, #8
   12d4c:	d115      	bne.n	12d7a <encode_uint+0x86>
			conv->altform_0 = true;
   12d4e:	78ab      	ldrb	r3, [r5, #2]
   12d50:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   12d54:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   12d56:	4648      	mov	r0, r9
   12d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   12d5c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   12d60:	2b70      	cmp	r3, #112	; 0x70
   12d62:	e7d7      	b.n	12d14 <encode_uint+0x20>
	switch (specifier) {
   12d64:	2608      	movs	r6, #8
   12d66:	e7d8      	b.n	12d1a <encode_uint+0x26>
		value /= radix;
   12d68:	4680      	mov	r8, r0
   12d6a:	460f      	mov	r7, r1
   12d6c:	e7d7      	b.n	12d1e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12d6e:	f1bb 0f01 	cmp.w	fp, #1
   12d72:	bf0c      	ite	eq
   12d74:	3437      	addeq	r4, #55	; 0x37
   12d76:	3457      	addne	r4, #87	; 0x57
   12d78:	e7db      	b.n	12d32 <encode_uint+0x3e>
		} else if (radix == 16) {
   12d7a:	2e10      	cmp	r6, #16
   12d7c:	d1eb      	bne.n	12d56 <encode_uint+0x62>
			conv->altform_0c = true;
   12d7e:	78ab      	ldrb	r3, [r5, #2]
   12d80:	f043 0310 	orr.w	r3, r3, #16
   12d84:	e7e6      	b.n	12d54 <encode_uint+0x60>
   12d86:	bf00      	nop
   12d88:	000306b1 	.word	0x000306b1

00012d8c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   12d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d90:	4682      	mov	sl, r0
   12d92:	b093      	sub	sp, #76	; 0x4c
   12d94:	468b      	mov	fp, r1
   12d96:	4691      	mov	r9, r2
   12d98:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   12d9a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12d9c:	f899 0000 	ldrb.w	r0, [r9]
   12da0:	b908      	cbnz	r0, 12da6 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   12da2:	4628      	mov	r0, r5
   12da4:	e341      	b.n	1342a <z_cbvprintf_impl+0x69e>
			OUTC(*fp++);
   12da6:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
   12daa:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   12dac:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
   12dae:	d006      	beq.n	12dbe <z_cbvprintf_impl+0x32>
			OUTC('%');
   12db0:	4659      	mov	r1, fp
   12db2:	47d0      	blx	sl
   12db4:	2800      	cmp	r0, #0
   12db6:	f2c0 8338 	blt.w	1342a <z_cbvprintf_impl+0x69e>
   12dba:	3501      	adds	r5, #1
			break;
   12dbc:	e1f5      	b.n	131aa <z_cbvprintf_impl+0x41e>
		} state = {
   12dbe:	2218      	movs	r2, #24
   12dc0:	2100      	movs	r1, #0
   12dc2:	a80c      	add	r0, sp, #48	; 0x30
   12dc4:	f019 f9fe 	bl	2c1c4 <memset>
	if (*sp == '%') {
   12dc8:	f899 3001 	ldrb.w	r3, [r9, #1]
   12dcc:	2b25      	cmp	r3, #37	; 0x25
   12dce:	d05a      	beq.n	12e86 <z_cbvprintf_impl+0xfa>
   12dd0:	f109 0201 	add.w	r2, r9, #1
   12dd4:	4616      	mov	r6, r2
		switch (*sp) {
   12dd6:	f812 3b01 	ldrb.w	r3, [r2], #1
   12dda:	2b2b      	cmp	r3, #43	; 0x2b
   12ddc:	f000 808b 	beq.w	12ef6 <z_cbvprintf_impl+0x16a>
   12de0:	d879      	bhi.n	12ed6 <z_cbvprintf_impl+0x14a>
   12de2:	2b20      	cmp	r3, #32
   12de4:	f000 808c 	beq.w	12f00 <z_cbvprintf_impl+0x174>
   12de8:	2b23      	cmp	r3, #35	; 0x23
   12dea:	f000 808e 	beq.w	12f0a <z_cbvprintf_impl+0x17e>
	if (conv->flag_zero && conv->flag_dash) {
   12dee:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12df2:	f003 0244 	and.w	r2, r3, #68	; 0x44
   12df6:	2a44      	cmp	r2, #68	; 0x44
   12df8:	d103      	bne.n	12e02 <z_cbvprintf_impl+0x76>
		conv->flag_zero = false;
   12dfa:	f36f 1386 	bfc	r3, #6, #1
   12dfe:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   12e02:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12e06:	9605      	str	r6, [sp, #20]
   12e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12e0c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   12e10:	7833      	ldrb	r3, [r6, #0]
   12e12:	2b2a      	cmp	r3, #42	; 0x2a
   12e14:	d17e      	bne.n	12f14 <z_cbvprintf_impl+0x188>
		conv->width_star = true;
   12e16:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12e1a:	f043 0301 	orr.w	r3, r3, #1
   12e1e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   12e22:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   12e24:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   12e26:	781a      	ldrb	r2, [r3, #0]
   12e28:	2a2e      	cmp	r2, #46	; 0x2e
   12e2a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12e2e:	bf0c      	ite	eq
   12e30:	2101      	moveq	r1, #1
   12e32:	2100      	movne	r1, #0
   12e34:	f361 0241 	bfi	r2, r1, #1, #1
   12e38:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   12e3c:	d10b      	bne.n	12e56 <z_cbvprintf_impl+0xca>
	++sp;
   12e3e:	1c5a      	adds	r2, r3, #1
   12e40:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   12e42:	785a      	ldrb	r2, [r3, #1]
   12e44:	2a2a      	cmp	r2, #42	; 0x2a
   12e46:	d17b      	bne.n	12f40 <z_cbvprintf_impl+0x1b4>
		conv->prec_star = true;
   12e48:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12e4c:	f042 0204 	orr.w	r2, r2, #4
   12e50:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   12e54:	3302      	adds	r3, #2
	switch (*sp) {
   12e56:	4619      	mov	r1, r3
   12e58:	f811 0b01 	ldrb.w	r0, [r1], #1
   12e5c:	286c      	cmp	r0, #108	; 0x6c
   12e5e:	f000 80b6 	beq.w	12fce <z_cbvprintf_impl+0x242>
   12e62:	d87d      	bhi.n	12f60 <z_cbvprintf_impl+0x1d4>
   12e64:	2868      	cmp	r0, #104	; 0x68
   12e66:	f000 8084 	beq.w	12f72 <z_cbvprintf_impl+0x1e6>
   12e6a:	286a      	cmp	r0, #106	; 0x6a
   12e6c:	f000 80b9 	beq.w	12fe2 <z_cbvprintf_impl+0x256>
   12e70:	284c      	cmp	r0, #76	; 0x4c
   12e72:	f000 80bd 	beq.w	12ff0 <z_cbvprintf_impl+0x264>
		conv->length_mod = LENGTH_NONE;
   12e76:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12e7a:	f36f 02c6 	bfc	r2, #3, #4
   12e7e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   12e82:	4619      	mov	r1, r3
   12e84:	e080      	b.n	12f88 <z_cbvprintf_impl+0x1fc>
		conv->specifier = *sp++;
   12e86:	f109 0202 	add.w	r2, r9, #2
   12e8a:	9202      	str	r2, [sp, #8]
   12e8c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   12e90:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12e94:	07d9      	lsls	r1, r3, #31
   12e96:	f140 814a 	bpl.w	1312e <z_cbvprintf_impl+0x3a2>
			width = va_arg(ap, int);
   12e9a:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   12e9e:	f1b8 0f00 	cmp.w	r8, #0
   12ea2:	da07      	bge.n	12eb4 <z_cbvprintf_impl+0x128>
				conv->flag_dash = true;
   12ea4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   12ea8:	f042 0204 	orr.w	r2, r2, #4
   12eac:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   12eb0:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   12eb4:	075a      	lsls	r2, r3, #29
   12eb6:	f140 8143 	bpl.w	13140 <z_cbvprintf_impl+0x3b4>
			int arg = va_arg(ap, int);
   12eba:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   12ebe:	2f00      	cmp	r7, #0
   12ec0:	f280 8142 	bge.w	13148 <z_cbvprintf_impl+0x3bc>
				conv->prec_present = false;
   12ec4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12ec8:	f36f 0341 	bfc	r3, #1, #1
   12ecc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   12ed0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12ed4:	e138      	b.n	13148 <z_cbvprintf_impl+0x3bc>
		switch (*sp) {
   12ed6:	2b2d      	cmp	r3, #45	; 0x2d
   12ed8:	d006      	beq.n	12ee8 <z_cbvprintf_impl+0x15c>
   12eda:	2b30      	cmp	r3, #48	; 0x30
   12edc:	d187      	bne.n	12dee <z_cbvprintf_impl+0x62>
			conv->flag_zero = true;
   12ede:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12ee6:	e003      	b.n	12ef0 <z_cbvprintf_impl+0x164>
			conv->flag_dash = true;
   12ee8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12eec:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   12ef0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   12ef4:	e76e      	b.n	12dd4 <z_cbvprintf_impl+0x48>
			conv->flag_plus = true;
   12ef6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12efa:	f043 0308 	orr.w	r3, r3, #8
   12efe:	e7f7      	b.n	12ef0 <z_cbvprintf_impl+0x164>
			conv->flag_space = true;
   12f00:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12f04:	f043 0310 	orr.w	r3, r3, #16
   12f08:	e7f2      	b.n	12ef0 <z_cbvprintf_impl+0x164>
			conv->flag_hash = true;
   12f0a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12f0e:	f043 0320 	orr.w	r3, r3, #32
   12f12:	e7ed      	b.n	12ef0 <z_cbvprintf_impl+0x164>
	size_t width = extract_decimal(&sp);
   12f14:	a805      	add	r0, sp, #20
   12f16:	f7ff fed9 	bl	12ccc <extract_decimal>
	if (sp != wp) {
   12f1a:	9b05      	ldr	r3, [sp, #20]
   12f1c:	42b3      	cmp	r3, r6
   12f1e:	d081      	beq.n	12e24 <z_cbvprintf_impl+0x98>
		conv->unsupported |= ((conv->width_value < 0)
   12f20:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   12f24:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   12f26:	f3c1 0240 	ubfx	r2, r1, #1, #1
   12f2a:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   12f2e:	0052      	lsls	r2, r2, #1
   12f30:	f062 027f 	orn	r2, r2, #127	; 0x7f
   12f34:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   12f38:	430a      	orrs	r2, r1
   12f3a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   12f3e:	e771      	b.n	12e24 <z_cbvprintf_impl+0x98>
	size_t prec = extract_decimal(&sp);
   12f40:	a805      	add	r0, sp, #20
   12f42:	f7ff fec3 	bl	12ccc <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   12f46:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   12f4a:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   12f4c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   12f50:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   12f54:	f360 0341 	bfi	r3, r0, #1, #1
   12f58:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   12f5c:	9b05      	ldr	r3, [sp, #20]
   12f5e:	e77a      	b.n	12e56 <z_cbvprintf_impl+0xca>
	switch (*sp) {
   12f60:	2874      	cmp	r0, #116	; 0x74
   12f62:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12f66:	d040      	beq.n	12fea <z_cbvprintf_impl+0x25e>
   12f68:	287a      	cmp	r0, #122	; 0x7a
   12f6a:	d184      	bne.n	12e76 <z_cbvprintf_impl+0xea>
		conv->length_mod = LENGTH_Z;
   12f6c:	4613      	mov	r3, r2
   12f6e:	2206      	movs	r2, #6
   12f70:	e028      	b.n	12fc4 <z_cbvprintf_impl+0x238>
		if (*++sp == 'h') {
   12f72:	785a      	ldrb	r2, [r3, #1]
   12f74:	2a68      	cmp	r2, #104	; 0x68
   12f76:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12f7a:	d121      	bne.n	12fc0 <z_cbvprintf_impl+0x234>
			conv->length_mod = LENGTH_HH;
   12f7c:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12f7e:	f361 02c6 	bfi	r2, r1, #3, #4
   12f82:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   12f86:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   12f88:	460b      	mov	r3, r1
   12f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
   12f8e:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   12f90:	2a78      	cmp	r2, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   12f92:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
   12f96:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   12f9a:	f200 80c0 	bhi.w	1311e <z_cbvprintf_impl+0x392>
   12f9e:	2a57      	cmp	r2, #87	; 0x57
   12fa0:	d833      	bhi.n	1300a <z_cbvprintf_impl+0x27e>
   12fa2:	2a41      	cmp	r2, #65	; 0x41
   12fa4:	d003      	beq.n	12fae <z_cbvprintf_impl+0x222>
   12fa6:	3a45      	subs	r2, #69	; 0x45
   12fa8:	2a02      	cmp	r2, #2
   12faa:	f200 80b8 	bhi.w	1311e <z_cbvprintf_impl+0x392>
		conv->specifier_cat = SPECIFIER_FP;
   12fae:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12fb2:	2204      	movs	r2, #4
   12fb4:	f362 0302 	bfi	r3, r2, #0, #3
   12fb8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   12fbc:	2301      	movs	r3, #1
			break;
   12fbe:	e085      	b.n	130cc <z_cbvprintf_impl+0x340>
			conv->length_mod = LENGTH_H;
   12fc0:	4613      	mov	r3, r2
   12fc2:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   12fc4:	f362 03c6 	bfi	r3, r2, #3, #4
   12fc8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   12fcc:	e7dc      	b.n	12f88 <z_cbvprintf_impl+0x1fc>
		if (*++sp == 'l') {
   12fce:	785a      	ldrb	r2, [r3, #1]
   12fd0:	2a6c      	cmp	r2, #108	; 0x6c
   12fd2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12fd6:	d101      	bne.n	12fdc <z_cbvprintf_impl+0x250>
			conv->length_mod = LENGTH_LL;
   12fd8:	2104      	movs	r1, #4
   12fda:	e7d0      	b.n	12f7e <z_cbvprintf_impl+0x1f2>
			conv->length_mod = LENGTH_L;
   12fdc:	4613      	mov	r3, r2
   12fde:	2203      	movs	r2, #3
   12fe0:	e7f0      	b.n	12fc4 <z_cbvprintf_impl+0x238>
		conv->length_mod = LENGTH_J;
   12fe2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12fe6:	2205      	movs	r2, #5
   12fe8:	e7ec      	b.n	12fc4 <z_cbvprintf_impl+0x238>
		conv->length_mod = LENGTH_T;
   12fea:	4613      	mov	r3, r2
   12fec:	2207      	movs	r2, #7
   12fee:	e7e9      	b.n	12fc4 <z_cbvprintf_impl+0x238>
		conv->unsupported = true;
   12ff0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   12ff4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   12ff8:	f023 0302 	bic.w	r3, r3, #2
   12ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   13000:	f043 0302 	orr.w	r3, r3, #2
   13004:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   13008:	e7be      	b.n	12f88 <z_cbvprintf_impl+0x1fc>
	switch (conv->specifier) {
   1300a:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   1300e:	2920      	cmp	r1, #32
   13010:	f200 8085 	bhi.w	1311e <z_cbvprintf_impl+0x392>
   13014:	a001      	add	r0, pc, #4	; (adr r0, 1301c <z_cbvprintf_impl+0x290>)
   13016:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1301a:	bf00      	nop
   1301c:	000130e1 	.word	0x000130e1
   13020:	0001311f 	.word	0x0001311f
   13024:	0001311f 	.word	0x0001311f
   13028:	0001311f 	.word	0x0001311f
   1302c:	0001311f 	.word	0x0001311f
   13030:	0001311f 	.word	0x0001311f
   13034:	0001311f 	.word	0x0001311f
   13038:	0001311f 	.word	0x0001311f
   1303c:	0001311f 	.word	0x0001311f
   13040:	00012faf 	.word	0x00012faf
   13044:	0001311f 	.word	0x0001311f
   13048:	000130e1 	.word	0x000130e1
   1304c:	000130a1 	.word	0x000130a1
   13050:	00012faf 	.word	0x00012faf
   13054:	00012faf 	.word	0x00012faf
   13058:	00012faf 	.word	0x00012faf
   1305c:	0001311f 	.word	0x0001311f
   13060:	000130a1 	.word	0x000130a1
   13064:	0001311f 	.word	0x0001311f
   13068:	0001311f 	.word	0x0001311f
   1306c:	0001311f 	.word	0x0001311f
   13070:	0001311f 	.word	0x0001311f
   13074:	000130e9 	.word	0x000130e9
   13078:	000130e1 	.word	0x000130e1
   1307c:	00013105 	.word	0x00013105
   13080:	0001311f 	.word	0x0001311f
   13084:	0001311f 	.word	0x0001311f
   13088:	00013105 	.word	0x00013105
   1308c:	0001311f 	.word	0x0001311f
   13090:	000130e1 	.word	0x000130e1
   13094:	0001311f 	.word	0x0001311f
   13098:	0001311f 	.word	0x0001311f
   1309c:	000130e1 	.word	0x000130e1
		conv->specifier_cat = SPECIFIER_SINT;
   130a0:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   130a4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   130a6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   130aa:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   130ae:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   130b0:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   130b4:	bf02      	ittt	eq
   130b6:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   130ba:	f041 0101 	orreq.w	r1, r1, #1
   130be:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   130c2:	2a63      	cmp	r2, #99	; 0x63
   130c4:	d131      	bne.n	1312a <z_cbvprintf_impl+0x39e>
			unsupported = (conv->length_mod != LENGTH_NONE);
   130c6:	3b00      	subs	r3, #0
   130c8:	bf18      	it	ne
   130ca:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   130cc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   130d0:	f3c2 0140 	ubfx	r1, r2, #1, #1
   130d4:	430b      	orrs	r3, r1
   130d6:	f363 0241 	bfi	r2, r3, #1, #1
   130da:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   130de:	e6d7      	b.n	12e90 <z_cbvprintf_impl+0x104>
		conv->specifier_cat = SPECIFIER_UINT;
   130e0:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   130e4:	2002      	movs	r0, #2
   130e6:	e7de      	b.n	130a6 <z_cbvprintf_impl+0x31a>
		conv->specifier_cat = SPECIFIER_PTR;
   130e8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   130ec:	f003 0378 	and.w	r3, r3, #120	; 0x78
   130f0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   130f4:	2103      	movs	r1, #3
   130f6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   130fa:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   130fc:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   13100:	4143      	adcs	r3, r0
   13102:	e7e3      	b.n	130cc <z_cbvprintf_impl+0x340>
		conv->specifier_cat = SPECIFIER_PTR;
   13104:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   13108:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   1310a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1310e:	f361 0202 	bfi	r2, r1, #0, #3
   13112:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   13116:	bf14      	ite	ne
   13118:	2301      	movne	r3, #1
   1311a:	2300      	moveq	r3, #0
   1311c:	e7d6      	b.n	130cc <z_cbvprintf_impl+0x340>
		conv->invalid = true;
   1311e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13122:	f043 0301 	orr.w	r3, r3, #1
   13126:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   1312a:	2300      	movs	r3, #0
   1312c:	e7ce      	b.n	130cc <z_cbvprintf_impl+0x340>
		} else if (conv->width_present) {
   1312e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   13132:	2a00      	cmp	r2, #0
			width = conv->width_value;
   13134:	bfb4      	ite	lt
   13136:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
   1313a:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
   1313e:	e6b9      	b.n	12eb4 <z_cbvprintf_impl+0x128>
		} else if (conv->prec_present) {
   13140:	079f      	lsls	r7, r3, #30
   13142:	f57f aec5 	bpl.w	12ed0 <z_cbvprintf_impl+0x144>
			precision = conv->prec_value;
   13146:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
   13148:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
   1314c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1314e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   13152:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
   13156:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1315a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1315c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   13160:	d136      	bne.n	131d0 <z_cbvprintf_impl+0x444>
			switch (length_mod) {
   13162:	1ecb      	subs	r3, r1, #3
   13164:	2b04      	cmp	r3, #4
   13166:	d823      	bhi.n	131b0 <z_cbvprintf_impl+0x424>
   13168:	e8df f003 	tbb	[pc, r3]
   1316c:	22090903 	.word	0x22090903
   13170:	22          	.byte	0x22
   13171:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   13172:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   13176:	17da      	asrs	r2, r3, #31
   13178:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   1317c:	e006      	b.n	1318c <z_cbvprintf_impl+0x400>
					(sint_value_type)va_arg(ap, intmax_t);
   1317e:	3407      	adds	r4, #7
   13180:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   13184:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   13188:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   1318c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   13190:	f013 0603 	ands.w	r6, r3, #3
   13194:	d05a      	beq.n	1324c <z_cbvprintf_impl+0x4c0>
			OUTS(sp, fp);
   13196:	9b02      	ldr	r3, [sp, #8]
   13198:	464a      	mov	r2, r9
   1319a:	4659      	mov	r1, fp
   1319c:	4650      	mov	r0, sl
   1319e:	f015 fad4 	bl	2874a <outs>
   131a2:	2800      	cmp	r0, #0
   131a4:	f2c0 8141 	blt.w	1342a <z_cbvprintf_impl+0x69e>
   131a8:	4405      	add	r5, r0
			OUTS(bps, bpe);
   131aa:	f8dd 9008 	ldr.w	r9, [sp, #8]
   131ae:	e5f5      	b.n	12d9c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   131b0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   131b4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   131b6:	ea4f 72e3 	mov.w	r2, r3, asr #31
   131ba:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   131be:	d102      	bne.n	131c6 <z_cbvprintf_impl+0x43a>
				value->sint = (signed char)value->sint;
   131c0:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   131c4:	e7d7      	b.n	13176 <z_cbvprintf_impl+0x3ea>
			} else if (length_mod == LENGTH_H) {
   131c6:	2902      	cmp	r1, #2
   131c8:	d1e0      	bne.n	1318c <z_cbvprintf_impl+0x400>
				value->sint = (short)value->sint;
   131ca:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   131ce:	e7d2      	b.n	13176 <z_cbvprintf_impl+0x3ea>
		} else if (specifier_cat == SPECIFIER_UINT) {
   131d0:	2b02      	cmp	r3, #2
   131d2:	d129      	bne.n	13228 <z_cbvprintf_impl+0x49c>
			switch (length_mod) {
   131d4:	1ecb      	subs	r3, r1, #3
   131d6:	2b04      	cmp	r3, #4
   131d8:	d813      	bhi.n	13202 <z_cbvprintf_impl+0x476>
   131da:	e8df f003 	tbb	[pc, r3]
   131de:	0a03      	.short	0x0a03
   131e0:	120a      	.short	0x120a
   131e2:	12          	.byte	0x12
   131e3:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   131e4:	6822      	ldr	r2, [r4, #0]
   131e6:	920c      	str	r2, [sp, #48]	; 0x30
   131e8:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   131ea:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   131ec:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   131ee:	4604      	mov	r4, r0
   131f0:	e7cc      	b.n	1318c <z_cbvprintf_impl+0x400>
					(uint_value_type)va_arg(ap,
   131f2:	1de0      	adds	r0, r4, #7
   131f4:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   131f8:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   131fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   13200:	e7f5      	b.n	131ee <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap, size_t);
   13202:	f854 3b04 	ldr.w	r3, [r4], #4
   13206:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   13208:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1320a:	f04f 0300 	mov.w	r3, #0
   1320e:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   13210:	d105      	bne.n	1321e <z_cbvprintf_impl+0x492>
				value->uint = (unsigned char)value->uint;
   13212:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   13216:	930c      	str	r3, [sp, #48]	; 0x30
   13218:	2300      	movs	r3, #0
   1321a:	930d      	str	r3, [sp, #52]	; 0x34
   1321c:	e7b6      	b.n	1318c <z_cbvprintf_impl+0x400>
			} else if (length_mod == LENGTH_H) {
   1321e:	2902      	cmp	r1, #2
   13220:	d1b4      	bne.n	1318c <z_cbvprintf_impl+0x400>
				value->uint = (unsigned short)value->uint;
   13222:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   13226:	e7f6      	b.n	13216 <z_cbvprintf_impl+0x48a>
		} else if (specifier_cat == SPECIFIER_FP) {
   13228:	2b04      	cmp	r3, #4
   1322a:	d109      	bne.n	13240 <z_cbvprintf_impl+0x4b4>
					(sint_value_type)va_arg(ap, long long);
   1322c:	1de3      	adds	r3, r4, #7
   1322e:	f023 0307 	bic.w	r3, r3, #7
   13232:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   13236:	e9d3 2300 	ldrd	r2, r3, [r3]
   1323a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1323e:	e7a5      	b.n	1318c <z_cbvprintf_impl+0x400>
		} else if (specifier_cat == SPECIFIER_PTR) {
   13240:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   13242:	bf04      	itt	eq
   13244:	f854 3b04 	ldreq.w	r3, [r4], #4
   13248:	930c      	streq	r3, [sp, #48]	; 0x30
   1324a:	e79f      	b.n	1318c <z_cbvprintf_impl+0x400>
		switch (conv->specifier) {
   1324c:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   13250:	2878      	cmp	r0, #120	; 0x78
   13252:	d8aa      	bhi.n	131aa <z_cbvprintf_impl+0x41e>
   13254:	2862      	cmp	r0, #98	; 0x62
   13256:	d820      	bhi.n	1329a <z_cbvprintf_impl+0x50e>
   13258:	2825      	cmp	r0, #37	; 0x25
   1325a:	f43f ada9 	beq.w	12db0 <z_cbvprintf_impl+0x24>
   1325e:	2858      	cmp	r0, #88	; 0x58
   13260:	d1a3      	bne.n	131aa <z_cbvprintf_impl+0x41e>
			bps = encode_uint(value->uint, conv, buf, bpe);
   13262:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   13266:	9300      	str	r3, [sp, #0]
   13268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1326c:	ab06      	add	r3, sp, #24
   1326e:	aa0e      	add	r2, sp, #56	; 0x38
   13270:	f7ff fd40 	bl	12cf4 <encode_uint>
   13274:	4681      	mov	r9, r0
			if (precision >= 0) {
   13276:	2f00      	cmp	r7, #0
   13278:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1327c:	db0b      	blt.n	13296 <z_cbvprintf_impl+0x50a>
				conv->flag_zero = false;
   1327e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   13282:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   13286:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1328a:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   1328c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   13290:	d901      	bls.n	13296 <z_cbvprintf_impl+0x50a>
					conv->pad0_value = precision - (int)len;
   13292:	1afb      	subs	r3, r7, r3
   13294:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   13296:	4607      	mov	r7, r0
   13298:	e03d      	b.n	13316 <z_cbvprintf_impl+0x58a>
		switch (conv->specifier) {
   1329a:	3863      	subs	r0, #99	; 0x63
   1329c:	2815      	cmp	r0, #21
   1329e:	d884      	bhi.n	131aa <z_cbvprintf_impl+0x41e>
   132a0:	a201      	add	r2, pc, #4	; (adr r2, 132a8 <z_cbvprintf_impl+0x51c>)
   132a2:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   132a6:	bf00      	nop
   132a8:	00013327 	.word	0x00013327
   132ac:	00013389 	.word	0x00013389
   132b0:	000131ab 	.word	0x000131ab
   132b4:	000131ab 	.word	0x000131ab
   132b8:	000131ab 	.word	0x000131ab
   132bc:	000131ab 	.word	0x000131ab
   132c0:	00013389 	.word	0x00013389
   132c4:	000131ab 	.word	0x000131ab
   132c8:	000131ab 	.word	0x000131ab
   132cc:	000131ab 	.word	0x000131ab
   132d0:	000131ab 	.word	0x000131ab
   132d4:	000133e3 	.word	0x000133e3
   132d8:	000133b1 	.word	0x000133b1
   132dc:	000133b5 	.word	0x000133b5
   132e0:	000131ab 	.word	0x000131ab
   132e4:	000131ab 	.word	0x000131ab
   132e8:	00013301 	.word	0x00013301
   132ec:	000131ab 	.word	0x000131ab
   132f0:	000133b1 	.word	0x000133b1
   132f4:	000131ab 	.word	0x000131ab
   132f8:	000131ab 	.word	0x000131ab
   132fc:	000133b1 	.word	0x000133b1
			if (precision >= 0) {
   13300:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   13302:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   13306:	db0a      	blt.n	1331e <z_cbvprintf_impl+0x592>
				len = strnlen(bps, precision);
   13308:	4639      	mov	r1, r7
   1330a:	4648      	mov	r0, r9
   1330c:	f018 ff87 	bl	2c21e <strnlen>
			bpe = bps + len;
   13310:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   13314:	2600      	movs	r6, #0
		if (bps == NULL) {
   13316:	f1b9 0f00 	cmp.w	r9, #0
   1331a:	d10c      	bne.n	13336 <z_cbvprintf_impl+0x5aa>
   1331c:	e745      	b.n	131aa <z_cbvprintf_impl+0x41e>
				len = strlen(bps);
   1331e:	4648      	mov	r0, r9
   13320:	f7f9 fe87 	bl	d032 <strlen>
   13324:	e7f4      	b.n	13310 <z_cbvprintf_impl+0x584>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   13326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13328:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   1332c:	2600      	movs	r6, #0
			bpe = buf + 1;
   1332e:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   13332:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   13336:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   1333a:	b106      	cbz	r6, 1333e <z_cbvprintf_impl+0x5b2>
			nj_len += 1U;
   1333c:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1333e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   13342:	06d0      	lsls	r0, r2, #27
   13344:	d566      	bpl.n	13414 <z_cbvprintf_impl+0x688>
			nj_len += 2U;
   13346:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   13348:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   1334a:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   1334c:	bf48      	it	mi
   1334e:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   13350:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   13352:	bf48      	it	mi
   13354:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   13356:	f1b8 0f00 	cmp.w	r8, #0
   1335a:	dd73      	ble.n	13444 <z_cbvprintf_impl+0x6b8>
			if (!conv->flag_dash) {
   1335c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   13360:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   13364:	f3c2 0380 	ubfx	r3, r2, #2, #1
   13368:	9303      	str	r3, [sp, #12]
   1336a:	0753      	lsls	r3, r2, #29
   1336c:	d46a      	bmi.n	13444 <z_cbvprintf_impl+0x6b8>
				if (conv->flag_zero) {
   1336e:	0650      	lsls	r0, r2, #25
   13370:	d55e      	bpl.n	13430 <z_cbvprintf_impl+0x6a4>
					if (sign != 0) {
   13372:	b13e      	cbz	r6, 13384 <z_cbvprintf_impl+0x5f8>
						OUTC(sign);
   13374:	4659      	mov	r1, fp
   13376:	4630      	mov	r0, r6
   13378:	47d0      	blx	sl
   1337a:	2800      	cmp	r0, #0
   1337c:	db55      	blt.n	1342a <z_cbvprintf_impl+0x69e>
						sign = 0;
   1337e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   13380:	3501      	adds	r5, #1
						sign = 0;
   13382:	461e      	mov	r6, r3
					pad = '0';
   13384:	2330      	movs	r3, #48	; 0x30
   13386:	e054      	b.n	13432 <z_cbvprintf_impl+0x6a6>
			if (conv->flag_plus) {
   13388:	071e      	lsls	r6, r3, #28
   1338a:	d40f      	bmi.n	133ac <z_cbvprintf_impl+0x620>
				sign = ' ';
   1338c:	f013 0610 	ands.w	r6, r3, #16
   13390:	bf18      	it	ne
   13392:	2620      	movne	r6, #32
			sint = value->sint;
   13394:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   13398:	2b00      	cmp	r3, #0
   1339a:	f6bf af62 	bge.w	13262 <z_cbvprintf_impl+0x4d6>
				value->uint = (uint_value_type)-sint;
   1339e:	4252      	negs	r2, r2
   133a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   133a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   133a8:	262d      	movs	r6, #45	; 0x2d
   133aa:	e75a      	b.n	13262 <z_cbvprintf_impl+0x4d6>
				sign = '+';
   133ac:	262b      	movs	r6, #43	; 0x2b
   133ae:	e7f1      	b.n	13394 <z_cbvprintf_impl+0x608>
		switch (conv->specifier) {
   133b0:	2600      	movs	r6, #0
   133b2:	e756      	b.n	13262 <z_cbvprintf_impl+0x4d6>
			if (value->ptr != NULL) {
   133b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   133b6:	b340      	cbz	r0, 1340a <z_cbvprintf_impl+0x67e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   133b8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   133bc:	9300      	str	r3, [sp, #0]
   133be:	aa0e      	add	r2, sp, #56	; 0x38
   133c0:	ab06      	add	r3, sp, #24
   133c2:	2100      	movs	r1, #0
   133c4:	f7ff fc96 	bl	12cf4 <encode_uint>
				conv->altform_0c = true;
   133c8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   133cc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   133d0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   133d4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   133d8:	4681      	mov	r9, r0
				conv->altform_0c = true;
   133da:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   133de:	2600      	movs	r6, #0
				goto prec_int_pad0;
   133e0:	e749      	b.n	13276 <z_cbvprintf_impl+0x4ea>
				store_count(conv, value->ptr, count);
   133e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   133e4:	2907      	cmp	r1, #7
   133e6:	f63f aee0 	bhi.w	131aa <z_cbvprintf_impl+0x41e>
   133ea:	e8df f001 	tbb	[pc, r1]
   133ee:	040c      	.short	0x040c
   133f0:	08080c06 	.word	0x08080c06
   133f4:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   133f6:	701d      	strb	r5, [r3, #0]
		break;
   133f8:	e6d7      	b.n	131aa <z_cbvprintf_impl+0x41e>
		*(short *)dp = (short)count;
   133fa:	801d      	strh	r5, [r3, #0]
		break;
   133fc:	e6d5      	b.n	131aa <z_cbvprintf_impl+0x41e>
		*(intmax_t *)dp = (intmax_t)count;
   133fe:	17ea      	asrs	r2, r5, #31
   13400:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   13404:	e6d1      	b.n	131aa <z_cbvprintf_impl+0x41e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   13406:	601d      	str	r5, [r3, #0]
		break;
   13408:	e6cf      	b.n	131aa <z_cbvprintf_impl+0x41e>
			bpe = bps + 5;
   1340a:	4f2e      	ldr	r7, [pc, #184]	; (134c4 <z_cbvprintf_impl+0x738>)
   1340c:	4606      	mov	r6, r0
			bps = "(nil)";
   1340e:	f1a7 0905 	sub.w	r9, r7, #5
   13412:	e790      	b.n	13336 <z_cbvprintf_impl+0x5aa>
		} else if (conv->altform_0) {
   13414:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   13416:	bf48      	it	mi
   13418:	3301      	addmi	r3, #1
   1341a:	e795      	b.n	13348 <z_cbvprintf_impl+0x5bc>
					OUTC(pad);
   1341c:	4618      	mov	r0, r3
   1341e:	4659      	mov	r1, fp
   13420:	9303      	str	r3, [sp, #12]
   13422:	47d0      	blx	sl
   13424:	2800      	cmp	r0, #0
   13426:	9b03      	ldr	r3, [sp, #12]
   13428:	da04      	bge.n	13434 <z_cbvprintf_impl+0x6a8>
#undef OUTS
#undef OUTC
}
   1342a:	b013      	add	sp, #76	; 0x4c
   1342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   13430:	2320      	movs	r3, #32
   13432:	4445      	add	r5, r8
   13434:	4642      	mov	r2, r8
				while (width-- > 0) {
   13436:	2a00      	cmp	r2, #0
   13438:	eba5 0108 	sub.w	r1, r5, r8
   1343c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   13440:	dcec      	bgt.n	1341c <z_cbvprintf_impl+0x690>
   13442:	460d      	mov	r5, r1
		if (sign != 0) {
   13444:	b12e      	cbz	r6, 13452 <z_cbvprintf_impl+0x6c6>
			OUTC(sign);
   13446:	4659      	mov	r1, fp
   13448:	4630      	mov	r0, r6
   1344a:	47d0      	blx	sl
   1344c:	2800      	cmp	r0, #0
   1344e:	dbec      	blt.n	1342a <z_cbvprintf_impl+0x69e>
   13450:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   13452:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   13456:	06d9      	lsls	r1, r3, #27
   13458:	d401      	bmi.n	1345e <z_cbvprintf_impl+0x6d2>
   1345a:	071a      	lsls	r2, r3, #28
   1345c:	d505      	bpl.n	1346a <z_cbvprintf_impl+0x6de>
				OUTC('0');
   1345e:	4659      	mov	r1, fp
   13460:	2030      	movs	r0, #48	; 0x30
   13462:	47d0      	blx	sl
   13464:	2800      	cmp	r0, #0
   13466:	dbe0      	blt.n	1342a <z_cbvprintf_impl+0x69e>
   13468:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1346a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1346e:	06db      	lsls	r3, r3, #27
   13470:	d506      	bpl.n	13480 <z_cbvprintf_impl+0x6f4>
				OUTC(conv->specifier);
   13472:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   13476:	4659      	mov	r1, fp
   13478:	47d0      	blx	sl
   1347a:	2800      	cmp	r0, #0
   1347c:	dbd5      	blt.n	1342a <z_cbvprintf_impl+0x69e>
   1347e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   13480:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   13482:	442e      	add	r6, r5
   13484:	1b73      	subs	r3, r6, r5
   13486:	2b00      	cmp	r3, #0
   13488:	dc15      	bgt.n	134b6 <z_cbvprintf_impl+0x72a>
			OUTS(bps, bpe);
   1348a:	463b      	mov	r3, r7
   1348c:	464a      	mov	r2, r9
   1348e:	4659      	mov	r1, fp
   13490:	4650      	mov	r0, sl
   13492:	f015 f95a 	bl	2874a <outs>
   13496:	2800      	cmp	r0, #0
   13498:	dbc7      	blt.n	1342a <z_cbvprintf_impl+0x69e>
   1349a:	4405      	add	r5, r0
		while (width > 0) {
   1349c:	44a8      	add	r8, r5
   1349e:	eba8 0305 	sub.w	r3, r8, r5
   134a2:	2b00      	cmp	r3, #0
   134a4:	f77f ae81 	ble.w	131aa <z_cbvprintf_impl+0x41e>
			OUTC(' ');
   134a8:	4659      	mov	r1, fp
   134aa:	2020      	movs	r0, #32
   134ac:	47d0      	blx	sl
   134ae:	2800      	cmp	r0, #0
   134b0:	dbbb      	blt.n	1342a <z_cbvprintf_impl+0x69e>
   134b2:	3501      	adds	r5, #1
			--width;
   134b4:	e7f3      	b.n	1349e <z_cbvprintf_impl+0x712>
				OUTC('0');
   134b6:	4659      	mov	r1, fp
   134b8:	2030      	movs	r0, #48	; 0x30
   134ba:	47d0      	blx	sl
   134bc:	2800      	cmp	r0, #0
   134be:	dbb4      	blt.n	1342a <z_cbvprintf_impl+0x69e>
   134c0:	3501      	adds	r5, #1
   134c2:	e7df      	b.n	13484 <z_cbvprintf_impl+0x6f8>
   134c4:	0002d5d0 	.word	0x0002d5d0

000134c8 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   134c8:	b508      	push	{r3, lr}
	__asm__ volatile(
   134ca:	f04f 0240 	mov.w	r2, #64	; 0x40
   134ce:	f3ef 8311 	mrs	r3, BASEPRI
   134d2:	f382 8812 	msr	BASEPRI_MAX, r2
   134d6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   134da:	f001 fe77 	bl	151cc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   134de:	4803      	ldr	r0, [pc, #12]	; (134ec <sys_reboot+0x24>)
   134e0:	f014 ffa5 	bl	2842e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   134e4:	f001 f882 	bl	145ec <arch_cpu_idle>
   134e8:	e7fc      	b.n	134e4 <sys_reboot+0x1c>
   134ea:	bf00      	nop
   134ec:	0002d5d1 	.word	0x0002d5d1

000134f0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   134f0:	f00d b81e 	b.w	20530 <SystemInit>

000134f4 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   134f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134f8:	4607      	mov	r7, r0
   134fa:	4688      	mov	r8, r1
   134fc:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   134fe:	4614      	mov	r4, r2
   13500:	eb08 0506 	add.w	r5, r8, r6
   13504:	1b2d      	subs	r5, r5, r4
   13506:	b90c      	cbnz	r4, 1350c <z_log_minimal_hexdump_print+0x18>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   13508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   1350c:	1e7b      	subs	r3, r7, #1
   1350e:	2b03      	cmp	r3, #3
   13510:	bf98      	it	ls
   13512:	4a22      	ldrls	r2, [pc, #136]	; (1359c <z_log_minimal_hexdump_print+0xa8>)
		printk("%c: ", z_log_minimal_level_to_char(level));
   13514:	4822      	ldr	r0, [pc, #136]	; (135a0 <z_log_minimal_hexdump_print+0xac>)
   13516:	bf98      	it	ls
   13518:	5cd1      	ldrbls	r1, [r2, r3]
			printk("   ");
   1351a:	f8df a088 	ldr.w	sl, [pc, #136]	; 135a4 <z_log_minimal_hexdump_print+0xb0>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   1351e:	f8df b088 	ldr.w	fp, [pc, #136]	; 135a8 <z_log_minimal_hexdump_print+0xb4>
   13522:	bf88      	it	hi
   13524:	213f      	movhi	r1, #63	; 0x3f
		printk("%c: ", z_log_minimal_level_to_char(level));
   13526:	f014 ff82 	bl	2842e <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1352a:	f04f 0900 	mov.w	r9, #0
		if (i < length) {
   1352e:	454c      	cmp	r4, r9
   13530:	d92b      	bls.n	1358a <z_log_minimal_hexdump_print+0x96>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   13532:	f815 1009 	ldrb.w	r1, [r5, r9]
   13536:	4658      	mov	r0, fp
   13538:	f014 ff79 	bl	2842e <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1353c:	f109 0901 	add.w	r9, r9, #1
   13540:	f1b9 0f08 	cmp.w	r9, #8
   13544:	d1f3      	bne.n	1352e <z_log_minimal_hexdump_print+0x3a>
	printk("|");
   13546:	4819      	ldr	r0, [pc, #100]	; (135ac <z_log_minimal_hexdump_print+0xb8>)
			printk(" ");
   13548:	f8df a064 	ldr.w	sl, [pc, #100]	; 135b0 <z_log_minimal_hexdump_print+0xbc>
			printk("%c", isprint((int)c) != 0 ? c : '.');
   1354c:	f8df b064 	ldr.w	fp, [pc, #100]	; 135b4 <z_log_minimal_hexdump_print+0xc0>
	printk("|");
   13550:	f014 ff6d 	bl	2842e <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13554:	f04f 0900 	mov.w	r9, #0
		if (i < length) {
   13558:	454c      	cmp	r4, r9
   1355a:	d91a      	bls.n	13592 <z_log_minimal_hexdump_print+0x9e>
			unsigned char c = data[i];
   1355c:	f815 1009 	ldrb.w	r1, [r5, r9]
			printk("%c", isprint((int)c) != 0 ? c : '.');
   13560:	4b15      	ldr	r3, [pc, #84]	; (135b8 <z_log_minimal_hexdump_print+0xc4>)
   13562:	5cca      	ldrb	r2, [r1, r3]
   13564:	f012 0f97 	tst.w	r2, #151	; 0x97
   13568:	bf08      	it	eq
   1356a:	212e      	moveq	r1, #46	; 0x2e
   1356c:	4658      	mov	r0, fp
   1356e:	f014 ff5e 	bl	2842e <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13572:	f109 0901 	add.w	r9, r9, #1
   13576:	f1b9 0f08 	cmp.w	r9, #8
   1357a:	d1ed      	bne.n	13558 <z_log_minimal_hexdump_print+0x64>
	printk("\n");
   1357c:	480f      	ldr	r0, [pc, #60]	; (135bc <z_log_minimal_hexdump_print+0xc8>)
   1357e:	f014 ff56 	bl	2842e <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   13582:	2c07      	cmp	r4, #7
   13584:	d9c0      	bls.n	13508 <z_log_minimal_hexdump_print+0x14>
		size -= HEXDUMP_BYTES_IN_LINE;
   13586:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   13588:	e7ba      	b.n	13500 <z_log_minimal_hexdump_print+0xc>
			printk("   ");
   1358a:	4650      	mov	r0, sl
   1358c:	f014 ff4f 	bl	2842e <printk>
   13590:	e7d4      	b.n	1353c <z_log_minimal_hexdump_print+0x48>
			printk(" ");
   13592:	4650      	mov	r0, sl
   13594:	f014 ff4b 	bl	2842e <printk>
   13598:	e7eb      	b.n	13572 <z_log_minimal_hexdump_print+0x7e>
   1359a:	bf00      	nop
   1359c:	0002d60e 	.word	0x0002d60e
   135a0:	0002d5fa 	.word	0x0002d5fa
   135a4:	0002d605 	.word	0x0002d605
   135a8:	0002d5ff 	.word	0x0002d5ff
   135ac:	0002d609 	.word	0x0002d609
   135b0:	0002d607 	.word	0x0002d607
   135b4:	0002d60b 	.word	0x0002d60b
   135b8:	000306b1 	.word	0x000306b1
   135bc:	0003043c 	.word	0x0003043c

000135c0 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   135c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   135c4:	460f      	mov	r7, r1
   135c6:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   135c8:	2108      	movs	r1, #8
   135ca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   135cc:	f8df 9050 	ldr.w	r9, [pc, #80]	; 13620 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   135d0:	f015 f97f 	bl	288d2 <nvs_al_size.isra.0>
	*addr -= ate_size;
   135d4:	683c      	ldr	r4, [r7, #0]
   135d6:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   135d8:	4680      	mov	r8, r0
	*addr -= ate_size;
   135da:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   135dc:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   135e0:	42ac      	cmp	r4, r5
   135e2:	d803      	bhi.n	135ec <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   135e4:	2000      	movs	r0, #0
}
   135e6:	b003      	add	sp, #12
   135e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   135ec:	2308      	movs	r3, #8
   135ee:	466a      	mov	r2, sp
   135f0:	4621      	mov	r1, r4
   135f2:	4630      	mov	r0, r6
   135f4:	f015 f8e1 	bl	287ba <nvs_flash_rd>
		if (rc) {
   135f8:	2800      	cmp	r0, #0
   135fa:	d1f4      	bne.n	135e6 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   135fc:	4669      	mov	r1, sp
   135fe:	4630      	mov	r0, r6
   13600:	f015 f971 	bl	288e6 <nvs_ate_valid>
   13604:	b140      	cbz	r0, 13618 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   13606:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1360a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   1360e:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   13610:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   13614:	4413      	add	r3, r2
   13616:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   13618:	eba4 0408 	sub.w	r4, r4, r8
   1361c:	e7e0      	b.n	135e0 <nvs_recover_last_ate+0x20>
   1361e:	bf00      	nop
   13620:	ffff0000 	.word	0xffff0000

00013624 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   13624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13628:	4604      	mov	r4, r0
   1362a:	b089      	sub	sp, #36	; 0x24

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   1362c:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   13630:	4638      	mov	r0, r7
   13632:	f018 fba5 	bl	2bd80 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   13636:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   13638:	6883      	ldr	r3, [r0, #8]
   1363a:	68db      	ldr	r3, [r3, #12]
   1363c:	4798      	blx	r3
   1363e:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   13640:	b948      	cbnz	r0, 13656 <nvs_mount+0x32>
		LOG_ERR("Could not obtain flash parameters");
   13642:	48a8      	ldr	r0, [pc, #672]	; (138e4 <nvs_mount+0x2c0>)
   13644:	2145      	movs	r1, #69	; 0x45
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
   13646:	f015 f8ab 	bl	287a0 <z_log_minimal_printk>
		return -EINVAL;
   1364a:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1364e:	4628      	mov	r0, r5
   13650:	b009      	add	sp, #36	; 0x24
   13652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   13656:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   13658:	6883      	ldr	r3, [r0, #8]
   1365a:	68db      	ldr	r3, [r3, #12]
   1365c:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   1365e:	6803      	ldr	r3, [r0, #0]
   13660:	3b01      	subs	r3, #1
   13662:	2b1f      	cmp	r3, #31
   13664:	d902      	bls.n	1366c <nvs_mount+0x48>
		LOG_ERR("Unsupported write block size");
   13666:	48a0      	ldr	r0, [pc, #640]	; (138e8 <nvs_mount+0x2c4>)
   13668:	2145      	movs	r1, #69	; 0x45
   1366a:	e7ec      	b.n	13646 <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   1366c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1366e:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   13670:	aa05      	add	r2, sp, #20
   13672:	f017 ffee 	bl	2b652 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   13676:	b110      	cbz	r0, 1367e <nvs_mount+0x5a>
		LOG_ERR("Unable to get page info");
   13678:	489c      	ldr	r0, [pc, #624]	; (138ec <nvs_mount+0x2c8>)
   1367a:	2145      	movs	r1, #69	; 0x45
   1367c:	e7e3      	b.n	13646 <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
   1367e:	89a5      	ldrh	r5, [r4, #12]
   13680:	b12d      	cbz	r5, 1368e <nvs_mount+0x6a>
   13682:	9b06      	ldr	r3, [sp, #24]
   13684:	fbb5 f2f3 	udiv	r2, r5, r3
   13688:	fb03 5512 	mls	r5, r3, r2, r5
   1368c:	b115      	cbz	r5, 13694 <nvs_mount+0x70>
		LOG_ERR("Invalid sector size");
   1368e:	4898      	ldr	r0, [pc, #608]	; (138f0 <nvs_mount+0x2cc>)
   13690:	2145      	movs	r1, #69	; 0x45
   13692:	e7d8      	b.n	13646 <nvs_mount+0x22>
	if (fs->sector_count < 2) {
   13694:	89e3      	ldrh	r3, [r4, #14]
   13696:	2b01      	cmp	r3, #1
   13698:	d802      	bhi.n	136a0 <nvs_mount+0x7c>
		LOG_ERR("Configuration error - sector count");
   1369a:	4896      	ldr	r0, [pc, #600]	; (138f4 <nvs_mount+0x2d0>)
   1369c:	2145      	movs	r1, #69	; 0x45
   1369e:	e7d2      	b.n	13646 <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   136a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   136a2:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   136a4:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   136a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   136b0:	4638      	mov	r0, r7
   136b2:	f00e fd5d 	bl	22170 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   136b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   136b8:	2108      	movs	r1, #8
   136ba:	f015 f90a 	bl	288d2 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   136be:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   136c0:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   136c2:	89e3      	ldrh	r3, [r4, #14]
   136c4:	fa1f fa85 	uxth.w	sl, r5
   136c8:	4553      	cmp	r3, sl
   136ca:	d845      	bhi.n	13758 <nvs_mount+0x134>
	if (closed_sectors == fs->sector_count) {
   136cc:	89e3      	ldrh	r3, [r4, #14]
   136ce:	454b      	cmp	r3, r9
   136d0:	f000 80d7 	beq.w	13882 <nvs_mount+0x25e>
	if (i == fs->sector_count) {
   136d4:	4553      	cmp	r3, sl
   136d6:	d10b      	bne.n	136f0 <nvs_mount+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   136d8:	9900      	ldr	r1, [sp, #0]
   136da:	2308      	movs	r3, #8
   136dc:	4642      	mov	r2, r8
   136de:	1b89      	subs	r1, r1, r6
   136e0:	4620      	mov	r0, r4
   136e2:	f015 f8a2 	bl	2882a <nvs_flash_cmp_const>
		if (!rc) {
   136e6:	b918      	cbnz	r0, 136f0 <nvs_mount+0xcc>
			nvs_sector_advance(fs, &addr);
   136e8:	89e0      	ldrh	r0, [r4, #14]
   136ea:	4669      	mov	r1, sp
   136ec:	f015 f8e6 	bl	288bc <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   136f0:	4669      	mov	r1, sp
   136f2:	4620      	mov	r0, r4
   136f4:	f7ff ff64 	bl	135c0 <nvs_recover_last_ate>
	if (rc) {
   136f8:	4605      	mov	r5, r0
   136fa:	2800      	cmp	r0, #0
   136fc:	f040 80c3 	bne.w	13886 <nvs_mount+0x262>
	fs->ate_wra = addr;
   13700:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   13702:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 138f8 <nvs_mount+0x2d4>
	fs->ate_wra = addr;
   13706:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   13708:	ea03 0309 	and.w	r3, r3, r9
   1370c:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   1370e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   13712:	4299      	cmp	r1, r3
   13714:	d30e      	bcc.n	13734 <nvs_mount+0x110>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13716:	2308      	movs	r3, #8
   13718:	aa01      	add	r2, sp, #4
   1371a:	4620      	mov	r0, r4
   1371c:	f015 f84d 	bl	287ba <nvs_flash_rd>
		if (rc) {
   13720:	b9c0      	cbnz	r0, 13754 <nvs_mount+0x130>
   13722:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   13724:	f813 2b01 	ldrb.w	r2, [r3], #1
   13728:	4590      	cmp	r8, r2
   1372a:	f040 80f1 	bne.w	13910 <nvs_mount+0x2ec>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1372e:	3001      	adds	r0, #1
   13730:	2808      	cmp	r0, #8
   13732:	d1f7      	bne.n	13724 <nvs_mount+0x100>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13734:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   13736:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13738:	0c1b      	lsrs	r3, r3, #16
   1373a:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   1373c:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1373e:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   13740:	f015 f8bc 	bl	288bc <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   13744:	89a3      	ldrh	r3, [r4, #12]
   13746:	9900      	ldr	r1, [sp, #0]
   13748:	4642      	mov	r2, r8
   1374a:	4620      	mov	r0, r4
   1374c:	f015 f86d 	bl	2882a <nvs_flash_cmp_const>
	if (rc < 0) {
   13750:	2800      	cmp	r0, #0
   13752:	da26      	bge.n	137a2 <nvs_mount+0x17e>
   13754:	4605      	mov	r5, r0
   13756:	e096      	b.n	13886 <nvs_mount+0x262>
		       (uint16_t)(fs->sector_size - ate_size);
   13758:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   1375a:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   1375c:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   1375e:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13762:	4642      	mov	r2, r8
   13764:	2308      	movs	r3, #8
   13766:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   13768:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1376a:	f015 f85e 	bl	2882a <nvs_flash_cmp_const>
		if (rc) {
   1376e:	b178      	cbz	r0, 13790 <nvs_mount+0x16c>
			nvs_sector_advance(fs, &addr);
   13770:	89e0      	ldrh	r0, [r4, #14]
   13772:	4669      	mov	r1, sp
   13774:	f015 f8a2 	bl	288bc <nvs_sector_advance.isra.0>
			closed_sectors++;
   13778:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1377c:	9900      	ldr	r1, [sp, #0]
   1377e:	2308      	movs	r3, #8
   13780:	4642      	mov	r2, r8
   13782:	4620      	mov	r0, r4
			closed_sectors++;
   13784:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13788:	f015 f84f 	bl	2882a <nvs_flash_cmp_const>
			if (!rc) {
   1378c:	2800      	cmp	r0, #0
   1378e:	d09d      	beq.n	136cc <nvs_mount+0xa8>
	for (i = 0; i < fs->sector_count; i++) {
   13790:	3501      	adds	r5, #1
   13792:	e796      	b.n	136c2 <nvs_mount+0x9e>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13794:	f1ba 0f00 	cmp.w	sl, #0
   13798:	f000 80d2 	beq.w	13940 <nvs_mount+0x31c>
				rc = -ESPIPE;
   1379c:	f06f 051c 	mvn.w	r5, #28
   137a0:	e071      	b.n	13886 <nvs_mount+0x262>
	if (rc) {
   137a2:	d049      	beq.n	13838 <nvs_mount+0x214>
		addr = fs->ate_wra + ate_size;
   137a4:	6863      	ldr	r3, [r4, #4]
   137a6:	4433      	add	r3, r6
   137a8:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   137aa:	f64f 78ff 	movw	r8, #65535	; 0xffff
   137ae:	9900      	ldr	r1, [sp, #0]
   137b0:	89a3      	ldrh	r3, [r4, #12]
   137b2:	b28a      	uxth	r2, r1
   137b4:	1b9b      	subs	r3, r3, r6
   137b6:	429a      	cmp	r2, r3
   137b8:	d319      	bcc.n	137ee <nvs_mount+0x1ca>
		LOG_INF("No GC Done marker found: restarting gc");
   137ba:	4850      	ldr	r0, [pc, #320]	; (138fc <nvs_mount+0x2d8>)
   137bc:	2149      	movs	r1, #73	; 0x49
   137be:	f014 ffef 	bl	287a0 <z_log_minimal_printk>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   137c2:	6861      	ldr	r1, [r4, #4]
   137c4:	4620      	mov	r0, r4
   137c6:	f015 f856 	bl	28876 <nvs_flash_erase_sector>
		if (rc) {
   137ca:	2800      	cmp	r0, #0
   137cc:	d1c2      	bne.n	13754 <nvs_mount+0x130>
		fs->ate_wra &= ADDR_SECT_MASK;
   137ce:	6863      	ldr	r3, [r4, #4]
   137d0:	4a49      	ldr	r2, [pc, #292]	; (138f8 <nvs_mount+0x2d4>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   137d2:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   137d4:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   137d6:	440b      	add	r3, r1
   137d8:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   137dc:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   137de:	4013      	ands	r3, r2
   137e0:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   137e2:	4620      	mov	r0, r4
   137e4:	f015 f974 	bl	28ad0 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   137e8:	2800      	cmp	r0, #0
   137ea:	d040      	beq.n	1386e <nvs_mount+0x24a>
   137ec:	e7b2      	b.n	13754 <nvs_mount+0x130>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   137ee:	2308      	movs	r3, #8
   137f0:	aa03      	add	r2, sp, #12
   137f2:	4620      	mov	r0, r4
   137f4:	f014 ffe1 	bl	287ba <nvs_flash_rd>
			if (rc) {
   137f8:	2800      	cmp	r0, #0
   137fa:	d1ab      	bne.n	13754 <nvs_mount+0x130>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   137fc:	a903      	add	r1, sp, #12
   137fe:	4620      	mov	r0, r4
   13800:	f015 f871 	bl	288e6 <nvs_ate_valid>
   13804:	b138      	cbz	r0, 13816 <nvs_mount+0x1f2>
   13806:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1380a:	4543      	cmp	r3, r8
   1380c:	d103      	bne.n	13816 <nvs_mount+0x1f2>
			    (gc_done_ate.id == 0xffff) &&
   1380e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   13812:	2b00      	cmp	r3, #0
   13814:	d054      	beq.n	138c0 <nvs_mount+0x29c>
			addr += ate_size;
   13816:	9b00      	ldr	r3, [sp, #0]
   13818:	4433      	add	r3, r6
   1381a:	9300      	str	r3, [sp, #0]
   1381c:	e7c7      	b.n	137ae <nvs_mount+0x18a>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   1381e:	1a5b      	subs	r3, r3, r1
   13820:	4642      	mov	r2, r8
   13822:	4620      	mov	r0, r4
   13824:	f015 f801 	bl	2882a <nvs_flash_cmp_const>
		if (rc < 0) {
   13828:	2800      	cmp	r0, #0
   1382a:	db93      	blt.n	13754 <nvs_mount+0x130>
		if (!rc) {
   1382c:	d008      	beq.n	13840 <nvs_mount+0x21c>
		fs->data_wra += fs->flash_parameters->write_block_size;
   1382e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13830:	68a3      	ldr	r3, [r4, #8]
   13832:	6812      	ldr	r2, [r2, #0]
   13834:	4413      	add	r3, r2
   13836:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   13838:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1383c:	428b      	cmp	r3, r1
   1383e:	d8ee      	bhi.n	1381e <nvs_mount+0x1fa>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13840:	6861      	ldr	r1, [r4, #4]
   13842:	89a3      	ldrh	r3, [r4, #12]
   13844:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   13848:	429a      	cmp	r2, r3
   1384a:	d1cd      	bne.n	137e8 <nvs_mount+0x1c4>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1384c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 138f8 <nvs_mount+0x2d4>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13850:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13852:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13856:	4293      	cmp	r3, r2
   13858:	d0c6      	beq.n	137e8 <nvs_mount+0x1c4>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1385a:	4620      	mov	r0, r4
   1385c:	f015 f80b 	bl	28876 <nvs_flash_erase_sector>
		if (rc) {
   13860:	2800      	cmp	r0, #0
   13862:	f47f af77 	bne.w	13754 <nvs_mount+0x130>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13866:	6863      	ldr	r3, [r4, #4]
   13868:	ea03 0308 	and.w	r3, r3, r8
   1386c:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   1386e:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13870:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   13872:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13876:	42b3      	cmp	r3, r6
   13878:	d105      	bne.n	13886 <nvs_mount+0x262>
		rc = nvs_add_gc_done_ate(fs);
   1387a:	4620      	mov	r0, r4
   1387c:	f015 f913 	bl	28aa6 <nvs_add_gc_done_ate>
   13880:	e768      	b.n	13754 <nvs_mount+0x130>
		rc = -EDEADLK;
   13882:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   13886:	4638      	mov	r0, r7
   13888:	f00e fd44 	bl	22314 <z_impl_k_mutex_unlock>
	if (rc) {
   1388c:	2d00      	cmp	r5, #0
   1388e:	f47f aede 	bne.w	1364e <nvs_mount+0x2a>
	fs->ready = true;
   13892:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13894:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
   13896:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13898:	4819      	ldr	r0, [pc, #100]	; (13900 <nvs_mount+0x2dc>)
   1389a:	89a3      	ldrh	r3, [r4, #12]
   1389c:	2149      	movs	r1, #73	; 0x49
   1389e:	f014 ff7f 	bl	287a0 <z_log_minimal_printk>
	LOG_INF("alloc wra: %d, %x",
   138a2:	6862      	ldr	r2, [r4, #4]
   138a4:	4817      	ldr	r0, [pc, #92]	; (13904 <nvs_mount+0x2e0>)
   138a6:	b293      	uxth	r3, r2
   138a8:	2149      	movs	r1, #73	; 0x49
   138aa:	0c12      	lsrs	r2, r2, #16
   138ac:	f014 ff78 	bl	287a0 <z_log_minimal_printk>
	LOG_INF("data wra: %d, %x",
   138b0:	68a2      	ldr	r2, [r4, #8]
   138b2:	4815      	ldr	r0, [pc, #84]	; (13908 <nvs_mount+0x2e4>)
   138b4:	b293      	uxth	r3, r2
   138b6:	2149      	movs	r1, #73	; 0x49
   138b8:	0c12      	lsrs	r2, r2, #16
   138ba:	f014 ff71 	bl	287a0 <z_log_minimal_printk>
	return 0;
   138be:	e6c6      	b.n	1364e <nvs_mount+0x2a>
			LOG_INF("GC Done marker found");
   138c0:	4812      	ldr	r0, [pc, #72]	; (1390c <nvs_mount+0x2e8>)
   138c2:	2149      	movs	r1, #73	; 0x49
   138c4:	f014 ff6c 	bl	287a0 <z_log_minimal_printk>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   138c8:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   138ca:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   138cc:	0c1b      	lsrs	r3, r3, #16
   138ce:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   138d0:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   138d2:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   138d4:	f014 fff2 	bl	288bc <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   138d8:	9900      	ldr	r1, [sp, #0]
   138da:	4620      	mov	r0, r4
   138dc:	f014 ffcb 	bl	28876 <nvs_flash_erase_sector>
			goto end;
   138e0:	e782      	b.n	137e8 <nvs_mount+0x1c4>
   138e2:	bf00      	nop
   138e4:	0002d62b 	.word	0x0002d62b
   138e8:	0002d652 	.word	0x0002d652
   138ec:	0002d674 	.word	0x0002d674
   138f0:	0002d691 	.word	0x0002d691
   138f4:	0002d6aa 	.word	0x0002d6aa
   138f8:	ffff0000 	.word	0xffff0000
   138fc:	0002d735 	.word	0x0002d735
   13900:	0002d6d2 	.word	0x0002d6d2
   13904:	0002d6ee 	.word	0x0002d6ee
   13908:	0002d705 	.word	0x0002d705
   1390c:	0002d71b 	.word	0x0002d71b
		if (nvs_ate_valid(fs, &last_ate)) {
   13910:	a901      	add	r1, sp, #4
   13912:	4620      	mov	r0, r4
   13914:	f014 ffe7 	bl	288e6 <nvs_ate_valid>
   13918:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1391c:	b180      	cbz	r0, 13940 <nvs_mount+0x31c>
			fs->data_wra = addr & ADDR_SECT_MASK;
   1391e:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13920:	f8bd a008 	ldrh.w	sl, [sp, #8]
   13924:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   13928:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   1392a:	ea02 0209 	and.w	r2, r2, r9
   1392e:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13930:	4451      	add	r1, sl
   13932:	f014 ffce 	bl	288d2 <nvs_al_size.isra.0>
   13936:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13938:	455a      	cmp	r2, fp
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1393a:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1393c:	f43f af2a 	beq.w	13794 <nvs_mount+0x170>
		fs->ate_wra -= ate_size;
   13940:	ebab 0306 	sub.w	r3, fp, r6
   13944:	6063      	str	r3, [r4, #4]
   13946:	e6e2      	b.n	1370e <nvs_mount+0xea>

00013948 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   13948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1394c:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   1394e:	7c03      	ldrb	r3, [r0, #16]
{
   13950:	b089      	sub	sp, #36	; 0x24
   13952:	4604      	mov	r4, r0
   13954:	4689      	mov	r9, r1
   13956:	4690      	mov	r8, r2
	if (!fs->ready) {
   13958:	b94b      	cbnz	r3, 1396e <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
   1395a:	485e      	ldr	r0, [pc, #376]	; (13ad4 <nvs_write+0x18c>)
   1395c:	2145      	movs	r1, #69	; 0x45
   1395e:	f014 ff1f 	bl	287a0 <z_log_minimal_printk>
		return -EACCES;
   13962:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   13966:	4628      	mov	r0, r5
   13968:	b009      	add	sp, #36	; 0x24
   1396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1396e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   13970:	2108      	movs	r1, #8
   13972:	4610      	mov	r0, r2
   13974:	f014 ffad 	bl	288d2 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   13978:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1397a:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   1397c:	4610      	mov	r0, r2
   1397e:	f014 ffa8 	bl	288d2 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   13982:	89a3      	ldrh	r3, [r4, #12]
   13984:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   13988:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   1398a:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   1398c:	f200 809e 	bhi.w	13acc <nvs_write+0x184>
   13990:	b11e      	cbz	r6, 1399a <nvs_write+0x52>
	    ((len > 0) && (data == NULL))) {
   13992:	f1b8 0f00 	cmp.w	r8, #0
   13996:	f000 8099 	beq.w	13acc <nvs_write+0x184>
	wlk_addr = fs->ate_wra;
   1399a:	6863      	ldr	r3, [r4, #4]
   1399c:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1399e:	aa04      	add	r2, sp, #16
   139a0:	a903      	add	r1, sp, #12
   139a2:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   139a4:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   139a8:	f014 ffd5 	bl	28956 <nvs_prev_ate>
		if (rc) {
   139ac:	4605      	mov	r5, r0
   139ae:	2800      	cmp	r0, #0
   139b0:	d1d9      	bne.n	13966 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   139b2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   139b6:	454b      	cmp	r3, r9
   139b8:	d005      	beq.n	139c6 <nvs_write+0x7e>
		if (wlk_addr == fs->ate_wra) {
   139ba:	6862      	ldr	r2, [r4, #4]
   139bc:	9b03      	ldr	r3, [sp, #12]
   139be:	429a      	cmp	r2, r3
   139c0:	d1ed      	bne.n	1399e <nvs_write+0x56>
		if (len == 0) {
   139c2:	b9e6      	cbnz	r6, 139fe <nvs_write+0xb6>
   139c4:	e7cf      	b.n	13966 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   139c6:	a904      	add	r1, sp, #16
   139c8:	4620      	mov	r0, r4
   139ca:	f014 ff8c 	bl	288e6 <nvs_ate_valid>
   139ce:	2800      	cmp	r0, #0
   139d0:	d0f3      	beq.n	139ba <nvs_write+0x72>
			if (wlk_ate.len == 0U) {
   139d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   139d6:	b186      	cbz	r6, 139fa <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
   139d8:	429e      	cmp	r6, r3
   139da:	d110      	bne.n	139fe <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
   139dc:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   139e0:	ea4f 411b 	mov.w	r1, fp, lsr #16
   139e4:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   139e6:	4401      	add	r1, r0
   139e8:	4633      	mov	r3, r6
   139ea:	4642      	mov	r2, r8
   139ec:	4620      	mov	r0, r4
   139ee:	f014 fef2 	bl	287d6 <nvs_flash_block_cmp>
			if (rc <= 0) {
   139f2:	2800      	cmp	r0, #0
   139f4:	dc03      	bgt.n	139fe <nvs_write+0xb6>
   139f6:	4605      	mov	r5, r0
   139f8:	e7b5      	b.n	13966 <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
   139fa:	2b00      	cmp	r3, #0
   139fc:	d0b3      	beq.n	13966 <nvs_write+0x1e>
	if (data_size) {
   139fe:	bba7      	cbnz	r7, 13a6a <nvs_write+0x122>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   13a00:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   13a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a0c:	4650      	mov	r0, sl
   13a0e:	f00e fbaf 	bl	22170 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   13a12:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 13ad8 <nvs_write+0x190>
		if (gc_count == fs->sector_count) {
   13a16:	89e3      	ldrh	r3, [r4, #14]
   13a18:	429d      	cmp	r5, r3
   13a1a:	d054      	beq.n	13ac6 <nvs_write+0x17e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   13a1c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   13a20:	18f9      	adds	r1, r7, r3
   13a22:	428a      	cmp	r2, r1
   13a24:	d324      	bcc.n	13a70 <nvs_write+0x128>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   13a26:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   13a2a:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   13a2c:	23ff      	movs	r3, #255	; 0xff
   13a2e:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   13a32:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   13a36:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
   13a3a:	f014 ff36 	bl	288aa <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   13a3e:	4632      	mov	r2, r6
   13a40:	4641      	mov	r1, r8
   13a42:	4620      	mov	r0, r4
   13a44:	f015 f80b 	bl	28a5e <nvs_flash_data_wrt>
	if (rc) {
   13a48:	4603      	mov	r3, r0
   13a4a:	b938      	cbnz	r0, 13a5c <nvs_write+0x114>
	rc = nvs_flash_ate_wrt(fs, &entry);
   13a4c:	a906      	add	r1, sp, #24
   13a4e:	4620      	mov	r0, r4
   13a50:	f015 f818 	bl	28a84 <nvs_flash_ate_wrt>
	rc = len;
   13a54:	2800      	cmp	r0, #0
   13a56:	bf14      	ite	ne
   13a58:	4603      	movne	r3, r0
   13a5a:	4633      	moveq	r3, r6
   13a5c:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   13a5e:	4650      	mov	r0, sl
   13a60:	f00e fc58 	bl	22314 <z_impl_k_mutex_unlock>
	return rc;
   13a64:	9b01      	ldr	r3, [sp, #4]
   13a66:	461d      	mov	r5, r3
   13a68:	e77d      	b.n	13966 <nvs_write+0x1e>
		required_space = data_size + ate_size;
   13a6a:	4457      	add	r7, sl
   13a6c:	b2bf      	uxth	r7, r7
   13a6e:	e7c7      	b.n	13a00 <nvs_write+0xb8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13a70:	2108      	movs	r1, #8
   13a72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13a74:	f014 ff2d 	bl	288d2 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   13a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13a7c:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   13a80:	2300      	movs	r3, #0
   13a82:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   13a86:	1813      	adds	r3, r2, r0
   13a88:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   13a8c:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   13a8e:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   13a92:	441a      	add	r2, r3
   13a94:	1a12      	subs	r2, r2, r0
   13a96:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   13a98:	a806      	add	r0, sp, #24
   13a9a:	f014 ff06 	bl	288aa <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   13a9e:	a906      	add	r1, sp, #24
   13aa0:	4620      	mov	r0, r4
   13aa2:	f014 ffef 	bl	28a84 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   13aa6:	89e0      	ldrh	r0, [r4, #14]
   13aa8:	1d21      	adds	r1, r4, #4
   13aaa:	f014 ff07 	bl	288bc <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13aae:	6863      	ldr	r3, [r4, #4]
   13ab0:	ea03 030b 	and.w	r3, r3, fp
   13ab4:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   13ab6:	4620      	mov	r0, r4
   13ab8:	f015 f80a 	bl	28ad0 <nvs_gc>
		if (rc) {
   13abc:	4603      	mov	r3, r0
   13abe:	2800      	cmp	r0, #0
   13ac0:	d1cc      	bne.n	13a5c <nvs_write+0x114>
		gc_count++;
   13ac2:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   13ac4:	e7a7      	b.n	13a16 <nvs_write+0xce>
			rc = -ENOSPC;
   13ac6:	f06f 031b 	mvn.w	r3, #27
   13aca:	e7c7      	b.n	13a5c <nvs_write+0x114>
		return -EINVAL;
   13acc:	f06f 0515 	mvn.w	r5, #21
   13ad0:	e749      	b.n	13966 <nvs_write+0x1e>
   13ad2:	bf00      	nop
   13ad4:	0002d612 	.word	0x0002d612
   13ad8:	ffff0000 	.word	0xffff0000

00013adc <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   13adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13ae0:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   13ae2:	7c03      	ldrb	r3, [r0, #16]
{
   13ae4:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   13ae8:	4604      	mov	r4, r0
   13aea:	460f      	mov	r7, r1
   13aec:	4690      	mov	r8, r2
	if (!fs->ready) {
   13aee:	b943      	cbnz	r3, 13b02 <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
   13af0:	4828      	ldr	r0, [pc, #160]	; (13b94 <nvs_read_hist+0xb8>)
   13af2:	2145      	movs	r1, #69	; 0x45
   13af4:	f014 fe54 	bl	287a0 <z_log_minimal_printk>
		return -EACCES;
   13af8:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   13afc:	b004      	add	sp, #16
   13afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13b02:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   13b04:	2108      	movs	r1, #8
   13b06:	f014 fee4 	bl	288d2 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   13b0a:	89a3      	ldrh	r3, [r4, #12]
   13b0c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   13b10:	429e      	cmp	r6, r3
   13b12:	d83c      	bhi.n	13b8e <nvs_read_hist+0xb2>
	wlk_addr = fs->ate_wra;
   13b14:	6863      	ldr	r3, [r4, #4]
   13b16:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   13b18:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13b1c:	aa02      	add	r2, sp, #8
   13b1e:	a901      	add	r1, sp, #4
   13b20:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   13b22:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13b24:	f014 ff17 	bl	28956 <nvs_prev_ate>
		if (rc) {
   13b28:	2800      	cmp	r0, #0
   13b2a:	d1e7      	bne.n	13afc <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   13b2c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13b30:	42bb      	cmp	r3, r7
   13b32:	d108      	bne.n	13b46 <nvs_read_hist+0x6a>
   13b34:	a902      	add	r1, sp, #8
   13b36:	4620      	mov	r0, r4
   13b38:	f014 fed5 	bl	288e6 <nvs_ate_valid>
   13b3c:	b118      	cbz	r0, 13b46 <nvs_read_hist+0x6a>
			cnt_his++;
   13b3e:	f10a 0a01 	add.w	sl, sl, #1
   13b42:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   13b46:	6862      	ldr	r2, [r4, #4]
   13b48:	9b01      	ldr	r3, [sp, #4]
   13b4a:	429a      	cmp	r2, r3
   13b4c:	d018      	beq.n	13b80 <nvs_read_hist+0xa4>
	while (cnt_his <= cnt) {
   13b4e:	45d1      	cmp	r9, sl
   13b50:	d2e4      	bcs.n	13b1c <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   13b52:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13b56:	b1bb      	cbz	r3, 13b88 <nvs_read_hist+0xac>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   13b58:	45d1      	cmp	r9, sl
   13b5a:	d815      	bhi.n	13b88 <nvs_read_hist+0xac>
	rd_addr += wlk_ate.offset;
   13b5c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   13b60:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   13b62:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   13b64:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   13b68:	bf28      	it	cs
   13b6a:	4633      	movcs	r3, r6
   13b6c:	4642      	mov	r2, r8
   13b6e:	4429      	add	r1, r5
   13b70:	4620      	mov	r0, r4
   13b72:	f014 fe22 	bl	287ba <nvs_flash_rd>
	if (rc) {
   13b76:	2800      	cmp	r0, #0
   13b78:	d1c0      	bne.n	13afc <nvs_read_hist+0x20>
	return wlk_ate.len;
   13b7a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   13b7e:	e7bd      	b.n	13afc <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13b80:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13b84:	42bb      	cmp	r3, r7
   13b86:	d0e4      	beq.n	13b52 <nvs_read_hist+0x76>
		return -ENOENT;
   13b88:	f06f 0001 	mvn.w	r0, #1
   13b8c:	e7b6      	b.n	13afc <nvs_read_hist+0x20>
		return -EINVAL;
   13b8e:	f06f 0015 	mvn.w	r0, #21
   13b92:	e7b3      	b.n	13afc <nvs_read_hist+0x20>
   13b94:	0002d612 	.word	0x0002d612

00013b98 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   13b98:	4b11      	ldr	r3, [pc, #68]	; (13be0 <flash_area_open+0x48>)
   13b9a:	681b      	ldr	r3, [r3, #0]
{
   13b9c:	b570      	push	{r4, r5, r6, lr}
   13b9e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   13ba0:	b18b      	cbz	r3, 13bc6 <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   13ba2:	4a10      	ldr	r2, [pc, #64]	; (13be4 <flash_area_open+0x4c>)
   13ba4:	6811      	ldr	r1, [r2, #0]
   13ba6:	2200      	movs	r2, #0
   13ba8:	428a      	cmp	r2, r1
   13baa:	db02      	blt.n	13bb2 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   13bac:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   13bb0:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   13bb2:	461d      	mov	r5, r3
   13bb4:	f813 6b10 	ldrb.w	r6, [r3], #16
   13bb8:	4286      	cmp	r6, r0
   13bba:	d007      	beq.n	13bcc <flash_area_open+0x34>
	for (int i = 0; i < flash_map_entries; i++) {
   13bbc:	3201      	adds	r2, #1
   13bbe:	e7f3      	b.n	13ba8 <flash_area_open+0x10>
	*fap = area;
   13bc0:	6025      	str	r5, [r4, #0]
	return 0;
   13bc2:	2000      	movs	r0, #0
   13bc4:	e7f4      	b.n	13bb0 <flash_area_open+0x18>
		return -EACCES;
   13bc6:	f06f 000c 	mvn.w	r0, #12
   13bca:	e7f1      	b.n	13bb0 <flash_area_open+0x18>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   13bcc:	68e8      	ldr	r0, [r5, #12]
   13bce:	b118      	cbz	r0, 13bd8 <flash_area_open+0x40>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   13bd0:	f018 f888 	bl	2bce4 <z_device_is_ready>
   13bd4:	2800      	cmp	r0, #0
   13bd6:	d1f3      	bne.n	13bc0 <flash_area_open+0x28>
		return -ENODEV;
   13bd8:	f06f 0012 	mvn.w	r0, #18
   13bdc:	e7e8      	b.n	13bb0 <flash_area_open+0x18>
   13bde:	bf00      	nop
   13be0:	200005bc 	.word	0x200005bc
   13be4:	0002c958 	.word	0x0002c958

00013be8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   13be8:	b570      	push	{r4, r5, r6, lr}
   13bea:	b088      	sub	sp, #32
   13bec:	4605      	mov	r5, r0
   13bee:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   13bf0:	b2c0      	uxtb	r0, r0
   13bf2:	4669      	mov	r1, sp
{
   13bf4:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   13bf6:	f7ff ffcf 	bl	13b98 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   13bfa:	2800      	cmp	r0, #0
   13bfc:	db1b      	blt.n	13c36 <flash_area_get_sectors+0x4e>
   13bfe:	9800      	ldr	r0, [sp, #0]
   13c00:	b1c8      	cbz	r0, 13c36 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   13c02:	6843      	ldr	r3, [r0, #4]
   13c04:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   13c06:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   13c08:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   13c0a:	9501      	str	r5, [sp, #4]
	flash_dev = fa->fa_dev;
   13c0c:	68c5      	ldr	r5, [r0, #12]
	cb_data->ret = ret;
   13c0e:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   13c12:	2300      	movs	r3, #0
	cb_data->status = 0;
   13c14:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   13c18:	9305      	str	r3, [sp, #20]
	flash_area_close(fa);
   13c1a:	f015 f819 	bl	28c50 <flash_area_close>
	if (flash_dev == NULL) {
   13c1e:	b16d      	cbz	r5, 13c3c <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   13c20:	4628      	mov	r0, r5
   13c22:	4908      	ldr	r1, [pc, #32]	; (13c44 <flash_area_get_sectors+0x5c>)
   13c24:	aa01      	add	r2, sp, #4
   13c26:	f017 fd18 	bl	2b65a <flash_page_foreach>
	if (cb_data->status == 0) {
   13c2a:	9807      	ldr	r0, [sp, #28]
   13c2c:	b908      	cbnz	r0, 13c32 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   13c2e:	9b05      	ldr	r3, [sp, #20]
   13c30:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   13c32:	b008      	add	sp, #32
   13c34:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   13c36:	f06f 0015 	mvn.w	r0, #21
   13c3a:	e7fa      	b.n	13c32 <flash_area_get_sectors+0x4a>
		return -ENODEV;
   13c3c:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   13c40:	e7f7      	b.n	13c32 <flash_area_get_sectors+0x4a>
   13c42:	bf00      	nop
   13c44:	00028c53 	.word	0x00028c53

00013c48 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   13c48:	4b10      	ldr	r3, [pc, #64]	; (13c8c <settings_save_one+0x44>)
{
   13c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   13c4e:	681c      	ldr	r4, [r3, #0]
{
   13c50:	4605      	mov	r5, r0
   13c52:	460e      	mov	r6, r1
   13c54:	4617      	mov	r7, r2
	if (!cs) {
   13c56:	b1ac      	cbz	r4, 13c84 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   13c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c60:	480b      	ldr	r0, [pc, #44]	; (13c90 <settings_save_one+0x48>)
   13c62:	f00e fa85 	bl	22170 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   13c66:	6863      	ldr	r3, [r4, #4]
   13c68:	4632      	mov	r2, r6
   13c6a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   13c6e:	4629      	mov	r1, r5
   13c70:	463b      	mov	r3, r7
   13c72:	4620      	mov	r0, r4
   13c74:	47c0      	blx	r8
   13c76:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13c78:	4805      	ldr	r0, [pc, #20]	; (13c90 <settings_save_one+0x48>)
   13c7a:	f00e fb4b 	bl	22314 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   13c7e:	4620      	mov	r0, r4
   13c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   13c84:	f06f 0401 	mvn.w	r4, #1
   13c88:	e7f9      	b.n	13c7e <settings_save_one+0x36>
   13c8a:	bf00      	nop
   13c8c:	20002160 	.word	0x20002160
   13c90:	20000a98 	.word	0x20000a98

00013c94 <settings_src_register>:
	parent->next = child;
   13c94:	2300      	movs	r3, #0
   13c96:	6003      	str	r3, [r0, #0]
	return list->tail;
   13c98:	4b04      	ldr	r3, [pc, #16]	; (13cac <settings_src_register+0x18>)
   13c9a:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   13c9c:	b912      	cbnz	r2, 13ca4 <settings_src_register+0x10>
	list->head = node;
   13c9e:	e9c3 0000 	strd	r0, r0, [r3]
}
   13ca2:	4770      	bx	lr
	parent->next = child;
   13ca4:	6010      	str	r0, [r2, #0]
	list->tail = node;
   13ca6:	6058      	str	r0, [r3, #4]
}
   13ca8:	4770      	bx	lr
   13caa:	bf00      	nop
   13cac:	20002158 	.word	0x20002158

00013cb0 <settings_dst_register>:
	settings_save_dst = cs;
   13cb0:	4b01      	ldr	r3, [pc, #4]	; (13cb8 <settings_dst_register+0x8>)
   13cb2:	6018      	str	r0, [r3, #0]
}
   13cb4:	4770      	bx	lr
   13cb6:	bf00      	nop
   13cb8:	20002160 	.word	0x20002160

00013cbc <settings_load_subtree>:
{
   13cbc:	b530      	push	{r4, r5, lr}
   13cbe:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   13cc0:	2300      	movs	r3, #0
{
   13cc2:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   13cc4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   13cc8:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   13cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13cce:	480c      	ldr	r0, [pc, #48]	; (13d00 <settings_load_subtree+0x44>)
   13cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13cd4:	f00e fa4c 	bl	22170 <z_impl_k_mutex_lock>
	return list->head;
   13cd8:	4b0a      	ldr	r3, [pc, #40]	; (13d04 <settings_load_subtree+0x48>)
   13cda:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13cdc:	b134      	cbz	r4, 13cec <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   13cde:	6863      	ldr	r3, [r4, #4]
   13ce0:	4620      	mov	r0, r4
   13ce2:	681b      	ldr	r3, [r3, #0]
   13ce4:	a901      	add	r1, sp, #4
   13ce6:	4798      	blx	r3
	return node->next;
   13ce8:	6824      	ldr	r4, [r4, #0]
   13cea:	e7f7      	b.n	13cdc <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   13cec:	4628      	mov	r0, r5
   13cee:	f000 f8d1 	bl	13e94 <settings_commit_subtree>
   13cf2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13cf4:	4802      	ldr	r0, [pc, #8]	; (13d00 <settings_load_subtree+0x44>)
   13cf6:	f00e fb0d 	bl	22314 <z_impl_k_mutex_unlock>
}
   13cfa:	4620      	mov	r0, r4
   13cfc:	b005      	add	sp, #20
   13cfe:	bd30      	pop	{r4, r5, pc}
   13d00:	20000a98 	.word	0x20000a98
   13d04:	20002158 	.word	0x20002158

00013d08 <settings_load_subtree_direct>:
{
   13d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   13d0a:	e9cd 0101 	strd	r0, r1, [sp, #4]
   13d0e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   13d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d14:	480a      	ldr	r0, [pc, #40]	; (13d40 <settings_load_subtree_direct+0x38>)
   13d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13d1a:	f00e fa29 	bl	22170 <z_impl_k_mutex_lock>
	return list->head;
   13d1e:	4b09      	ldr	r3, [pc, #36]	; (13d44 <settings_load_subtree_direct+0x3c>)
   13d20:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13d22:	b134      	cbz	r4, 13d32 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   13d24:	6863      	ldr	r3, [r4, #4]
   13d26:	4620      	mov	r0, r4
   13d28:	681b      	ldr	r3, [r3, #0]
   13d2a:	a901      	add	r1, sp, #4
   13d2c:	4798      	blx	r3
	return node->next;
   13d2e:	6824      	ldr	r4, [r4, #0]
   13d30:	e7f7      	b.n	13d22 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   13d32:	4803      	ldr	r0, [pc, #12]	; (13d40 <settings_load_subtree_direct+0x38>)
   13d34:	f00e faee 	bl	22314 <z_impl_k_mutex_unlock>
}
   13d38:	2000      	movs	r0, #0
   13d3a:	b004      	add	sp, #16
   13d3c:	bd10      	pop	{r4, pc}
   13d3e:	bf00      	nop
   13d40:	20000a98 	.word	0x20000a98
   13d44:	20002158 	.word	0x20002158

00013d48 <settings_store_init>:
	list->head = NULL;
   13d48:	4b02      	ldr	r3, [pc, #8]	; (13d54 <settings_store_init+0xc>)
   13d4a:	2200      	movs	r2, #0
	list->tail = NULL;
   13d4c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   13d50:	4770      	bx	lr
   13d52:	bf00      	nop
   13d54:	20002158 	.word	0x20002158

00013d58 <settings_init>:
	list->head = NULL;
   13d58:	4b02      	ldr	r3, [pc, #8]	; (13d64 <settings_init+0xc>)
   13d5a:	2200      	movs	r2, #0
	list->tail = NULL;
   13d5c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   13d60:	f7ff bff2 	b.w	13d48 <settings_store_init>
   13d64:	20002164 	.word	0x20002164

00013d68 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   13d68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13d6c:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   13d6e:	460e      	mov	r6, r1
   13d70:	b109      	cbz	r1, 13d76 <settings_parse_and_lookup+0xe>
		*next = NULL;
   13d72:	2300      	movs	r3, #0
   13d74:	600b      	str	r3, [r1, #0]
   13d76:	4c23      	ldr	r4, [pc, #140]	; (13e04 <settings_parse_and_lookup+0x9c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13d78:	f8df 808c 	ldr.w	r8, [pc, #140]	; 13e08 <settings_parse_and_lookup+0xa0>
   13d7c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 13e0c <settings_parse_and_lookup+0xa4>
   13d80:	2500      	movs	r5, #0
   13d82:	4544      	cmp	r4, r8
   13d84:	d908      	bls.n	13d98 <settings_parse_and_lookup+0x30>
   13d86:	4822      	ldr	r0, [pc, #136]	; (13e10 <settings_parse_and_lookup+0xa8>)
   13d88:	4649      	mov	r1, r9
   13d8a:	2294      	movs	r2, #148	; 0x94
   13d8c:	f014 fcfa 	bl	28784 <assert_print>
   13d90:	2194      	movs	r1, #148	; 0x94
   13d92:	4648      	mov	r0, r9
   13d94:	f014 fcef 	bl	28776 <assert_post_action>
   13d98:	4544      	cmp	r4, r8
   13d9a:	d310      	bcc.n	13dbe <settings_parse_and_lookup+0x56>
	return list->head;
   13d9c:	4b1d      	ldr	r3, [pc, #116]	; (13e14 <settings_parse_and_lookup+0xac>)
   13d9e:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13da0:	b35c      	cbz	r4, 13dfa <settings_parse_and_lookup+0x92>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13da2:	aa01      	add	r2, sp, #4
   13da4:	4638      	mov	r0, r7
   13da6:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13daa:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13dac:	f014 ff76 	bl	28c9c <settings_name_steq>
   13db0:	b308      	cbz	r0, 13df6 <settings_parse_and_lookup+0x8e>
			continue;
		}
		if (!bestmatch) {
   13db2:	b9cd      	cbnz	r5, 13de8 <settings_parse_and_lookup+0x80>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   13db4:	b10e      	cbz	r6, 13dba <settings_parse_and_lookup+0x52>
				*next = tmpnext;
   13db6:	9b01      	ldr	r3, [sp, #4]
   13db8:	6033      	str	r3, [r6, #0]
   13dba:	4625      	mov	r5, r4
   13dbc:	e01b      	b.n	13df6 <settings_parse_and_lookup+0x8e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13dbe:	6821      	ldr	r1, [r4, #0]
   13dc0:	aa01      	add	r2, sp, #4
   13dc2:	4638      	mov	r0, r7
   13dc4:	f014 ff6a 	bl	28c9c <settings_name_steq>
   13dc8:	b160      	cbz	r0, 13de4 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   13dca:	b925      	cbnz	r5, 13dd6 <settings_parse_and_lookup+0x6e>
			if (next) {
   13dcc:	b10e      	cbz	r6, 13dd2 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   13dce:	9b01      	ldr	r3, [sp, #4]
   13dd0:	6033      	str	r3, [r6, #0]
   13dd2:	4625      	mov	r5, r4
   13dd4:	e006      	b.n	13de4 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13dd6:	6829      	ldr	r1, [r5, #0]
   13dd8:	6820      	ldr	r0, [r4, #0]
   13dda:	2200      	movs	r2, #0
   13ddc:	f014 ff5e 	bl	28c9c <settings_name_steq>
   13de0:	2800      	cmp	r0, #0
   13de2:	d1f3      	bne.n	13dcc <settings_parse_and_lookup+0x64>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13de4:	3414      	adds	r4, #20
   13de6:	e7cc      	b.n	13d82 <settings_parse_and_lookup+0x1a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13de8:	6829      	ldr	r1, [r5, #0]
   13dea:	6820      	ldr	r0, [r4, #0]
   13dec:	2200      	movs	r2, #0
   13dee:	f014 ff55 	bl	28c9c <settings_name_steq>
   13df2:	2800      	cmp	r0, #0
   13df4:	d1de      	bne.n	13db4 <settings_parse_and_lookup+0x4c>
	return node->next;
   13df6:	6964      	ldr	r4, [r4, #20]
   13df8:	e7d2      	b.n	13da0 <settings_parse_and_lookup+0x38>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   13dfa:	4628      	mov	r0, r5
   13dfc:	b003      	add	sp, #12
   13dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13e02:	bf00      	nop
   13e04:	0002c744 	.word	0x0002c744
   13e08:	0002c7bc 	.word	0x0002c7bc
   13e0c:	0002d768 	.word	0x0002d768
   13e10:	0002d509 	.word	0x0002d509
   13e14:	20002164 	.word	0x20002164

00013e18 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   13e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13e1c:	b085      	sub	sp, #20
   13e1e:	4604      	mov	r4, r0
   13e20:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   13e24:	9003      	str	r0, [sp, #12]
{
   13e26:	460d      	mov	r5, r1
   13e28:	4616      	mov	r6, r2
   13e2a:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   13e2c:	f1b8 0f00 	cmp.w	r8, #0
   13e30:	d018      	beq.n	13e64 <settings_call_set_handler+0x4c>
   13e32:	f8d8 1000 	ldr.w	r1, [r8]
   13e36:	b181      	cbz	r1, 13e5a <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   13e38:	aa03      	add	r2, sp, #12
   13e3a:	f014 ff2f 	bl	28c9c <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   13e3e:	b960      	cbnz	r0, 13e5a <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				name, rc);
			/* Ignoring the error */
			rc = 0;
   13e40:	2000      	movs	r0, #0
   13e42:	e007      	b.n	13e54 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   13e44:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13e48:	9300      	str	r3, [sp, #0]
   13e4a:	9803      	ldr	r0, [sp, #12]
   13e4c:	463b      	mov	r3, r7
   13e4e:	4632      	mov	r2, r6
   13e50:	4629      	mov	r1, r5
   13e52:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   13e54:	b005      	add	sp, #20
   13e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   13e5a:	f8d8 9004 	ldr.w	r9, [r8, #4]
   13e5e:	f1b9 0f00 	cmp.w	r9, #0
   13e62:	d1ef      	bne.n	13e44 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   13e64:	a903      	add	r1, sp, #12
   13e66:	4620      	mov	r0, r4
   13e68:	f7ff ff7e 	bl	13d68 <settings_parse_and_lookup>
		if (!ch) {
   13e6c:	2800      	cmp	r0, #0
   13e6e:	d0e7      	beq.n	13e40 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   13e70:	f8d0 8008 	ldr.w	r8, [r0, #8]
   13e74:	9803      	ldr	r0, [sp, #12]
   13e76:	463b      	mov	r3, r7
   13e78:	4632      	mov	r2, r6
   13e7a:	4629      	mov	r1, r5
   13e7c:	47c0      	blx	r8
		if (rc != 0) {
   13e7e:	4603      	mov	r3, r0
   13e80:	2800      	cmp	r0, #0
   13e82:	d0dd      	beq.n	13e40 <settings_call_set_handler+0x28>
			LOG_ERR("set-value failure. key: %s error(%d)",
   13e84:	4802      	ldr	r0, [pc, #8]	; (13e90 <settings_call_set_handler+0x78>)
   13e86:	4622      	mov	r2, r4
   13e88:	2145      	movs	r1, #69	; 0x45
   13e8a:	f014 fc89 	bl	287a0 <z_log_minimal_printk>
   13e8e:	e7d7      	b.n	13e40 <settings_call_set_handler+0x28>
   13e90:	0002d79a 	.word	0x0002d79a

00013e94 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   13e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13e98:	4c1e      	ldr	r4, [pc, #120]	; (13f14 <settings_commit_subtree+0x80>)
   13e9a:	4f1f      	ldr	r7, [pc, #124]	; (13f18 <settings_commit_subtree+0x84>)
   13e9c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 13f1c <settings_commit_subtree+0x88>
{
   13ea0:	4606      	mov	r6, r0
	rc = 0;
   13ea2:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13ea4:	42bc      	cmp	r4, r7
   13ea6:	d908      	bls.n	13eba <settings_commit_subtree+0x26>
   13ea8:	481d      	ldr	r0, [pc, #116]	; (13f20 <settings_commit_subtree+0x8c>)
   13eaa:	4641      	mov	r1, r8
   13eac:	22f4      	movs	r2, #244	; 0xf4
   13eae:	f014 fc69 	bl	28784 <assert_print>
   13eb2:	21f4      	movs	r1, #244	; 0xf4
   13eb4:	4640      	mov	r0, r8
   13eb6:	f014 fc5e 	bl	28776 <assert_post_action>
   13eba:	42bc      	cmp	r4, r7
   13ebc:	d308      	bcc.n	13ed0 <settings_commit_subtree+0x3c>
	return list->head;
   13ebe:	4b19      	ldr	r3, [pc, #100]	; (13f24 <settings_commit_subtree+0x90>)
   13ec0:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13ec2:	b324      	cbz	r4, 13f0e <settings_commit_subtree+0x7a>
   13ec4:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13ec6:	b9ae      	cbnz	r6, 13ef4 <settings_commit_subtree+0x60>
			continue;
		}
		if (ch->h_commit) {
   13ec8:	68e3      	ldr	r3, [r4, #12]
   13eca:	b9db      	cbnz	r3, 13f04 <settings_commit_subtree+0x70>
	return node->next;
   13ecc:	6964      	ldr	r4, [r4, #20]
   13ece:	e7f8      	b.n	13ec2 <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13ed0:	b91e      	cbnz	r6, 13eda <settings_commit_subtree+0x46>
		if (ch->h_commit) {
   13ed2:	68e3      	ldr	r3, [r4, #12]
   13ed4:	b94b      	cbnz	r3, 13eea <settings_commit_subtree+0x56>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13ed6:	3414      	adds	r4, #20
   13ed8:	e7e4      	b.n	13ea4 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13eda:	6820      	ldr	r0, [r4, #0]
   13edc:	2200      	movs	r2, #0
   13ede:	4631      	mov	r1, r6
   13ee0:	f014 fedc 	bl	28c9c <settings_name_steq>
   13ee4:	2800      	cmp	r0, #0
   13ee6:	d1f4      	bne.n	13ed2 <settings_commit_subtree+0x3e>
   13ee8:	e7f5      	b.n	13ed6 <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
   13eea:	4798      	blx	r3
				rc = rc2;
   13eec:	2d00      	cmp	r5, #0
   13eee:	bf08      	it	eq
   13ef0:	4605      	moveq	r5, r0
   13ef2:	e7f0      	b.n	13ed6 <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13ef4:	6820      	ldr	r0, [r4, #0]
   13ef6:	2200      	movs	r2, #0
   13ef8:	4631      	mov	r1, r6
   13efa:	f014 fecf 	bl	28c9c <settings_name_steq>
   13efe:	2800      	cmp	r0, #0
   13f00:	d1e2      	bne.n	13ec8 <settings_commit_subtree+0x34>
   13f02:	e7e3      	b.n	13ecc <settings_commit_subtree+0x38>
			rc2 = ch->h_commit();
   13f04:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   13f06:	2d00      	cmp	r5, #0
   13f08:	bf08      	it	eq
   13f0a:	4605      	moveq	r5, r0
   13f0c:	e7de      	b.n	13ecc <settings_commit_subtree+0x38>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   13f0e:	4628      	mov	r0, r5
   13f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f14:	0002c744 	.word	0x0002c744
   13f18:	0002c7bc 	.word	0x0002c7bc
   13f1c:	0002d768 	.word	0x0002d768
   13f20:	0002d509 	.word	0x0002d509
   13f24:	20002164 	.word	0x20002164

00013f28 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   13f28:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   13f2a:	4c06      	ldr	r4, [pc, #24]	; (13f44 <settings_subsys_init+0x1c>)
   13f2c:	7823      	ldrb	r3, [r4, #0]
   13f2e:	b93b      	cbnz	r3, 13f40 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   13f30:	f7ff ff12 	bl	13d58 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   13f34:	f000 f864 	bl	14000 <settings_backend_init>

	if (!err) {
   13f38:	b908      	cbnz	r0, 13f3e <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   13f3a:	2301      	movs	r3, #1
   13f3c:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   13f3e:	bd10      	pop	{r4, pc}
		return 0;
   13f40:	2000      	movs	r0, #0
   13f42:	e7fc      	b.n	13f3e <settings_subsys_init+0x16>
   13f44:	200036f5 	.word	0x200036f5

00013f48 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   13f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   13f4c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   13f4e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 13ffc <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   13f52:	3401      	adds	r4, #1
{
   13f54:	b098      	sub	sp, #96	; 0x60
   13f56:	4680      	mov	r8, r0
   13f58:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   13f5a:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13f5c:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   13f60:	1e65      	subs	r5, r4, #1
   13f62:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   13f64:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   13f68:	d045      	beq.n	13ff6 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13f6a:	234a      	movs	r3, #74	; 0x4a
   13f6c:	aa05      	add	r2, sp, #20
   13f6e:	4629      	mov	r1, r5
   13f70:	4630      	mov	r0, r6
   13f72:	f014 fe66 	bl	28c42 <nvs_read>
   13f76:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   13f7a:	343f      	adds	r4, #63	; 0x3f
   13f7c:	b2a4      	uxth	r4, r4
   13f7e:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13f80:	4621      	mov	r1, r4
   13f82:	2301      	movs	r3, #1
   13f84:	f10d 020b 	add.w	r2, sp, #11
   13f88:	4630      	mov	r0, r6
   13f8a:	f014 fe5a 	bl	28c42 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13f8e:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13f90:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13f92:	dc03      	bgt.n	13f9c <settings_nvs_load+0x54>
   13f94:	2800      	cmp	r0, #0
   13f96:	dc03      	bgt.n	13fa0 <settings_nvs_load+0x58>
{
   13f98:	462c      	mov	r4, r5
   13f9a:	e7e1      	b.n	13f60 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   13f9c:	2800      	cmp	r0, #0
   13f9e:	dc16      	bgt.n	13fce <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   13fa0:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   13fa4:	42ab      	cmp	r3, r5
   13fa6:	d109      	bne.n	13fbc <settings_nvs_load+0x74>
				cf->last_name_id--;
   13fa8:	4642      	mov	r2, r8
   13faa:	1e6b      	subs	r3, r5, #1
   13fac:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   13fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13fb4:	2302      	movs	r3, #2
   13fb6:	4630      	mov	r0, r6
   13fb8:	f7ff fcc6 	bl	13948 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   13fbc:	4629      	mov	r1, r5
   13fbe:	4630      	mov	r0, r6
   13fc0:	f014 fe3b 	bl	28c3a <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   13fc4:	4621      	mov	r1, r4
   13fc6:	4630      	mov	r0, r6
   13fc8:	f014 fe37 	bl	28c3a <nvs_delete>
			continue;
   13fcc:	e7e4      	b.n	13f98 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   13fce:	ab18      	add	r3, sp, #96	; 0x60
   13fd0:	441f      	add	r7, r3
   13fd2:	2300      	movs	r3, #0
   13fd4:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   13fd8:	4652      	mov	r2, sl
   13fda:	f8cd 9000 	str.w	r9, [sp]
   13fde:	ab03      	add	r3, sp, #12
   13fe0:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   13fe2:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   13fe4:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   13fe8:	f7ff ff16 	bl	13e18 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   13fec:	2800      	cmp	r0, #0
   13fee:	d0d3      	beq.n	13f98 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   13ff0:	b018      	add	sp, #96	; 0x60
   13ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13ff6:	2000      	movs	r0, #0
	return ret;
   13ff8:	e7fa      	b.n	13ff0 <settings_nvs_load+0xa8>
   13ffa:	bf00      	nop
   13ffc:	00028d13 	.word	0x00028d13

00014000 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   14000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   14002:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   14004:	4669      	mov	r1, sp
   14006:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   14008:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   1400a:	f7ff fdc5 	bl	13b98 <flash_area_open>
	if (rc) {
   1400e:	4604      	mov	r4, r0
   14010:	2800      	cmp	r0, #0
   14012:	d136      	bne.n	14082 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   14014:	aa02      	add	r2, sp, #8
   14016:	a901      	add	r1, sp, #4
   14018:	2004      	movs	r0, #4
   1401a:	f7ff fde5 	bl	13be8 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   1401e:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   14022:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   14024:	d02d      	beq.n	14082 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   14026:	b138      	cbz	r0, 14038 <settings_backend_init+0x38>
   14028:	340c      	adds	r4, #12
   1402a:	d005      	beq.n	14038 <settings_backend_init+0x38>
		k_panic();
   1402c:	4040      	eors	r0, r0
   1402e:	f380 8811 	msr	BASEPRI, r0
   14032:	f04f 0004 	mov.w	r0, #4
   14036:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   14038:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   1403a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   1403e:	d223      	bcs.n	14088 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   14040:	9a00      	ldr	r2, [sp, #0]
   14042:	2300      	movs	r3, #0
   14044:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   14046:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   14048:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   1404a:	4285      	cmp	r5, r0
   1404c:	b29c      	uxth	r4, r3
   1404e:	d303      	bcc.n	14058 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   14050:	3301      	adds	r3, #1
   14052:	2b08      	cmp	r3, #8
   14054:	d1f8      	bne.n	14048 <settings_backend_init+0x48>
   14056:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   14058:	4d0d      	ldr	r5, [pc, #52]	; (14090 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   1405a:	6853      	ldr	r3, [r2, #4]
   1405c:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   1405e:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   14060:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   14062:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   14064:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev = fa->fa_dev;
   14066:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   14068:	f014 feea 	bl	28e40 <settings_nvs_backend_init>
	if (rc) {
   1406c:	4604      	mov	r4, r0
   1406e:	b940      	cbnz	r0, 14082 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   14070:	4e08      	ldr	r6, [pc, #32]	; (14094 <settings_backend_init+0x94>)
   14072:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   14074:	4628      	mov	r0, r5
   14076:	f7ff fe0d 	bl	13c94 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   1407a:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1407c:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   1407e:	f7ff fe17 	bl	13cb0 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   14082:	4620      	mov	r0, r4
   14084:	b004      	add	sp, #16
   14086:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   14088:	f06f 0420 	mvn.w	r4, #32
   1408c:	e7f9      	b.n	14082 <settings_backend_init+0x82>
   1408e:	bf00      	nop
   14090:	2000216c 	.word	0x2000216c
   14094:	200005c0 	.word	0x200005c0

00014098 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   14098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1409c:	4605      	mov	r5, r0
   1409e:	f04f 0340 	mov.w	r3, #64	; 0x40
   140a2:	f3ef 8611 	mrs	r6, BASEPRI
   140a6:	f383 8812 	msr	BASEPRI_MAX, r3
   140aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   140ae:	481d      	ldr	r0, [pc, #116]	; (14124 <pm_state_notify+0x8c>)
   140b0:	f00e f80a 	bl	220c8 <z_spin_lock_valid>
   140b4:	b940      	cbnz	r0, 140c8 <pm_state_notify+0x30>
   140b6:	491c      	ldr	r1, [pc, #112]	; (14128 <pm_state_notify+0x90>)
   140b8:	481c      	ldr	r0, [pc, #112]	; (1412c <pm_state_notify+0x94>)
   140ba:	228e      	movs	r2, #142	; 0x8e
   140bc:	f014 fb62 	bl	28784 <assert_print>
   140c0:	4819      	ldr	r0, [pc, #100]	; (14128 <pm_state_notify+0x90>)
   140c2:	218e      	movs	r1, #142	; 0x8e
   140c4:	f014 fb57 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   140c8:	4816      	ldr	r0, [pc, #88]	; (14124 <pm_state_notify+0x8c>)
   140ca:	f00e f81b 	bl	22104 <z_spin_lock_set_owner>
	return list->head;
   140ce:	4b18      	ldr	r3, [pc, #96]	; (14130 <pm_state_notify+0x98>)
   140d0:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   140d2:	b19c      	cbz	r4, 140fc <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   140d4:	4f17      	ldr	r7, [pc, #92]	; (14134 <pm_state_notify+0x9c>)
   140d6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 14138 <pm_state_notify+0xa0>
   140da:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   140de:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   140e2:	2d00      	cmp	r5, #0
   140e4:	bf08      	it	eq
   140e6:	4613      	moveq	r3, r2
		if (callback) {
   140e8:	b12b      	cbz	r3, 140f6 <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   140ea:	f898 2014 	ldrb.w	r2, [r8, #20]
   140ee:	fb09 f202 	mul.w	r2, r9, r2
   140f2:	5cb8      	ldrb	r0, [r7, r2]
   140f4:	4798      	blx	r3
	return node->next;
   140f6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   140f8:	2c00      	cmp	r4, #0
   140fa:	d1f0      	bne.n	140de <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   140fc:	4809      	ldr	r0, [pc, #36]	; (14124 <pm_state_notify+0x8c>)
   140fe:	f00d fff1 	bl	220e4 <z_spin_unlock_valid>
   14102:	b940      	cbnz	r0, 14116 <pm_state_notify+0x7e>
   14104:	4908      	ldr	r1, [pc, #32]	; (14128 <pm_state_notify+0x90>)
   14106:	4809      	ldr	r0, [pc, #36]	; (1412c <pm_state_notify+0x94>)
   14108:	22b9      	movs	r2, #185	; 0xb9
   1410a:	f014 fb3b 	bl	28784 <assert_print>
   1410e:	4806      	ldr	r0, [pc, #24]	; (14128 <pm_state_notify+0x90>)
   14110:	21b9      	movs	r1, #185	; 0xb9
   14112:	f014 fb30 	bl	28776 <assert_post_action>
	__asm__ volatile(
   14116:	f386 8811 	msr	BASEPRI, r6
   1411a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1411e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14122:	bf00      	nop
   14124:	200021b0 	.word	0x200021b0
   14128:	0002d57d 	.word	0x0002d57d
   1412c:	0002d509 	.word	0x0002d509
   14130:	200021b4 	.word	0x200021b4
   14134:	200021c8 	.word	0x200021c8
   14138:	20002ba0 	.word	0x20002ba0

0001413c <pm_system_resume>:

void pm_system_resume(void)
{
   1413c:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
   1413e:	4b1a      	ldr	r3, [pc, #104]	; (141a8 <pm_system_resume+0x6c>)
   14140:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14142:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   14146:	f004 031f 	and.w	r3, r4, #31
   1414a:	2201      	movs	r2, #1
   1414c:	409a      	lsls	r2, r3
   1414e:	4b17      	ldr	r3, [pc, #92]	; (141ac <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14150:	0961      	lsrs	r1, r4, #5
   14152:	43d0      	mvns	r0, r2
   14154:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14158:	e853 1f00 	ldrex	r1, [r3]
   1415c:	ea01 0500 	and.w	r5, r1, r0
   14160:	e843 5c00 	strex	ip, r5, [r3]
   14164:	f1bc 0f00 	cmp.w	ip, #0
   14168:	d1f6      	bne.n	14158 <pm_system_resume+0x1c>
   1416a:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1416e:	4211      	tst	r1, r2
   14170:	d013      	beq.n	1419a <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   14172:	4b0f      	ldr	r3, [pc, #60]	; (141b0 <pm_system_resume+0x74>)
   14174:	4d0f      	ldr	r5, [pc, #60]	; (141b4 <pm_system_resume+0x78>)
   14176:	b18b      	cbz	r3, 1419c <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   14178:	230c      	movs	r3, #12
   1417a:	4363      	muls	r3, r4
   1417c:	18ea      	adds	r2, r5, r3
   1417e:	5ce8      	ldrb	r0, [r5, r3]
   14180:	7851      	ldrb	r1, [r2, #1]
   14182:	f015 f8cc 	bl	2931e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   14186:	2000      	movs	r0, #0
   14188:	f7ff ff86 	bl	14098 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1418c:	230c      	movs	r3, #12
   1418e:	435c      	muls	r4, r3
   14190:	192a      	adds	r2, r5, r4
   14192:	2300      	movs	r3, #0
   14194:	512b      	str	r3, [r5, r4]
   14196:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1419a:	bd38      	pop	{r3, r4, r5, pc}
   1419c:	f383 8811 	msr	BASEPRI, r3
   141a0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   141a4:	e7ef      	b.n	14186 <pm_system_resume+0x4a>
   141a6:	bf00      	nop
   141a8:	20002ba0 	.word	0x20002ba0
   141ac:	200021d4 	.word	0x200021d4
   141b0:	0002931f 	.word	0x0002931f
   141b4:	200021c8 	.word	0x200021c8

000141b8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   141b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   141bc:	4b42      	ldr	r3, [pc, #264]	; (142c8 <pm_system_suspend+0x110>)
{
   141be:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   141c0:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   141c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   141c6:	f3ef 8811 	mrs	r8, BASEPRI
   141ca:	f383 8812 	msr	BASEPRI_MAX, r3
   141ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   141d2:	483e      	ldr	r0, [pc, #248]	; (142cc <pm_system_suspend+0x114>)
   141d4:	f00d ff78 	bl	220c8 <z_spin_lock_valid>
   141d8:	b940      	cbnz	r0, 141ec <pm_system_suspend+0x34>
   141da:	493d      	ldr	r1, [pc, #244]	; (142d0 <pm_system_suspend+0x118>)
   141dc:	483d      	ldr	r0, [pc, #244]	; (142d4 <pm_system_suspend+0x11c>)
   141de:	228e      	movs	r2, #142	; 0x8e
   141e0:	f014 fad0 	bl	28784 <assert_print>
   141e4:	483a      	ldr	r0, [pc, #232]	; (142d0 <pm_system_suspend+0x118>)
   141e6:	218e      	movs	r1, #142	; 0x8e
   141e8:	f014 fac5 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   141ec:	4837      	ldr	r0, [pc, #220]	; (142cc <pm_system_suspend+0x114>)
   141ee:	4e3a      	ldr	r6, [pc, #232]	; (142d8 <pm_system_suspend+0x120>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   141f0:	240c      	movs	r4, #12
   141f2:	f00d ff87 	bl	22104 <z_spin_lock_set_owner>
   141f6:	436c      	muls	r4, r5
   141f8:	4b38      	ldr	r3, [pc, #224]	; (142dc <pm_system_suspend+0x124>)
   141fa:	5d19      	ldrb	r1, [r3, r4]
   141fc:	191a      	adds	r2, r3, r4
   141fe:	2900      	cmp	r1, #0
   14200:	d056      	beq.n	142b0 <pm_system_suspend+0xf8>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   14202:	ca07      	ldmia	r2, {r0, r1, r2}
   14204:	eb06 0c04 	add.w	ip, r6, r4
   14208:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   1420c:	2200      	movs	r2, #0
   1420e:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14210:	482e      	ldr	r0, [pc, #184]	; (142cc <pm_system_suspend+0x114>)
   14212:	f00d ff67 	bl	220e4 <z_spin_unlock_valid>
   14216:	b940      	cbnz	r0, 1422a <pm_system_suspend+0x72>
   14218:	492d      	ldr	r1, [pc, #180]	; (142d0 <pm_system_suspend+0x118>)
   1421a:	482e      	ldr	r0, [pc, #184]	; (142d4 <pm_system_suspend+0x11c>)
   1421c:	22b9      	movs	r2, #185	; 0xb9
   1421e:	f014 fab1 	bl	28784 <assert_print>
   14222:	482b      	ldr	r0, [pc, #172]	; (142d0 <pm_system_suspend+0x118>)
   14224:	21b9      	movs	r1, #185	; 0xb9
   14226:	f014 faa6 	bl	28776 <assert_post_action>
	__asm__ volatile(
   1422a:	f388 8811 	msr	BASEPRI, r8
   1422e:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14232:	230c      	movs	r3, #12
   14234:	436b      	muls	r3, r5
   14236:	18f2      	adds	r2, r6, r3
   14238:	5cf0      	ldrb	r0, [r6, r3]
   1423a:	b3b8      	cbz	r0, 142ac <pm_system_suspend+0xf4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1423c:	1c7b      	adds	r3, r7, #1
   1423e:	d00f      	beq.n	14260 <pm_system_suspend+0xa8>
			return (uint32_t)((t * to_hz + off) / from_hz);
   14240:	f8d2 c008 	ldr.w	ip, [r2, #8]
   14244:	4826      	ldr	r0, [pc, #152]	; (142e0 <pm_system_suspend+0x128>)
   14246:	4a27      	ldr	r2, [pc, #156]	; (142e4 <pm_system_suspend+0x12c>)
   14248:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1424c:	2100      	movs	r1, #0
   1424e:	2300      	movs	r3, #0
   14250:	fbec 0104 	umlal	r0, r1, ip, r4
   14254:	f7ec fe8c 	bl	f70 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   14258:	2101      	movs	r1, #1
   1425a:	1a38      	subs	r0, r7, r0
   1425c:	f010 f97c 	bl	24558 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14260:	f00f f862 	bl	23328 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   14264:	2001      	movs	r0, #1
   14266:	f7ff ff17 	bl	14098 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1426a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   1426e:	f005 021f 	and.w	r2, r5, #31
   14272:	2101      	movs	r1, #1
   14274:	4091      	lsls	r1, r2
   14276:	4a1c      	ldr	r2, [pc, #112]	; (142e8 <pm_system_suspend+0x130>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14278:	096b      	lsrs	r3, r5, #5
   1427a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1427e:	e853 2f00 	ldrex	r2, [r3]
   14282:	430a      	orrs	r2, r1
   14284:	e843 2000 	strex	r0, r2, [r3]
   14288:	2800      	cmp	r0, #0
   1428a:	d1f8      	bne.n	1427e <pm_system_suspend+0xc6>
   1428c:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   14290:	4b16      	ldr	r3, [pc, #88]	; (142ec <pm_system_suspend+0x134>)
   14292:	b133      	cbz	r3, 142a2 <pm_system_suspend+0xea>
		pm_state_set(info->state, info->substate_id);
   14294:	200c      	movs	r0, #12
   14296:	4368      	muls	r0, r5
   14298:	1833      	adds	r3, r6, r0
   1429a:	5c30      	ldrb	r0, [r6, r0]
   1429c:	7859      	ldrb	r1, [r3, #1]
   1429e:	f015 f832 	bl	29306 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   142a2:	f7ff ff4b 	bl	1413c <pm_system_resume>
	k_sched_unlock();
   142a6:	f00f fc9d 	bl	23be4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   142aa:	2001      	movs	r0, #1
}
   142ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   142b0:	4639      	mov	r1, r7
   142b2:	4628      	mov	r0, r5
   142b4:	f000 f81c 	bl	142f0 <pm_policy_next_state>
		if (info != NULL) {
   142b8:	2800      	cmp	r0, #0
   142ba:	d0a9      	beq.n	14210 <pm_system_suspend+0x58>
			z_cpus_pm_state[id] = *info;
   142bc:	c807      	ldmia	r0, {r0, r1, r2}
   142be:	4434      	add	r4, r6
   142c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   142c4:	e7a4      	b.n	14210 <pm_system_suspend+0x58>
   142c6:	bf00      	nop
   142c8:	20002ba0 	.word	0x20002ba0
   142cc:	200021ac 	.word	0x200021ac
   142d0:	0002d57d 	.word	0x0002d57d
   142d4:	0002d509 	.word	0x0002d509
   142d8:	200021c8 	.word	0x200021c8
   142dc:	200021bc 	.word	0x200021bc
   142e0:	000f423f 	.word	0x000f423f
   142e4:	000f4240 	.word	0x000f4240
   142e8:	200021d4 	.word	0x200021d4
   142ec:	00029307 	.word	0x00029307

000142f0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   142f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142f4:	b085      	sub	sp, #20
   142f6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   142f8:	a903      	add	r1, sp, #12
   142fa:	f000 f841 	bl	14380 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
   142fe:	9b03      	ldr	r3, [sp, #12]
   14300:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14302:	4b1c      	ldr	r3, [pc, #112]	; (14374 <pm_policy_next_state+0x84>)
   14304:	f8df 8070 	ldr.w	r8, [pc, #112]	; 14378 <pm_policy_next_state+0x88>
   14308:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1430c:	1e44      	subs	r4, r0, #1
   1430e:	b224      	sxth	r4, r4
   14310:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   14314:	f04f 0b00 	mov.w	fp, #0
   14318:	1c63      	adds	r3, r4, #1
   1431a:	d104      	bne.n	14326 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1431c:	2500      	movs	r5, #0
}
   1431e:	4628      	mov	r0, r5
   14320:	b005      	add	sp, #20
   14322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   14326:	9b01      	ldr	r3, [sp, #4]
   14328:	4a14      	ldr	r2, [pc, #80]	; (1437c <pm_policy_next_state+0x8c>)
   1432a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1432e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   14332:	46c4      	mov	ip, r8
   14334:	6868      	ldr	r0, [r5, #4]
   14336:	4659      	mov	r1, fp
   14338:	fbe0 c107 	umlal	ip, r1, r0, r7
   1433c:	2300      	movs	r3, #0
   1433e:	4660      	mov	r0, ip
   14340:	f7ec fe16 	bl	f70 <__aeabi_uldivmod>
   14344:	4681      	mov	r9, r0
   14346:	68a8      	ldr	r0, [r5, #8]
   14348:	4a0c      	ldr	r2, [pc, #48]	; (1437c <pm_policy_next_state+0x8c>)
   1434a:	46c4      	mov	ip, r8
   1434c:	4659      	mov	r1, fp
   1434e:	fbe0 c107 	umlal	ip, r1, r0, r7
   14352:	2300      	movs	r3, #0
   14354:	4660      	mov	r0, ip
   14356:	f7ec fe0b 	bl	f70 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1435a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   1435e:	d001      	beq.n	14364 <pm_policy_next_state+0x74>
   14360:	4582      	cmp	sl, r0
   14362:	d904      	bls.n	1436e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   14364:	1c72      	adds	r2, r6, #1
   14366:	d0da      	beq.n	1431e <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
   14368:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
   1436a:	42b0      	cmp	r0, r6
   1436c:	d9d7      	bls.n	1431e <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1436e:	3c01      	subs	r4, #1
   14370:	b224      	sxth	r4, r4
   14372:	e7d1      	b.n	14318 <pm_policy_next_state+0x28>
   14374:	200005d4 	.word	0x200005d4
   14378:	000f423f 	.word	0x000f423f
   1437c:	000f4240 	.word	0x000f4240

00014380 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14380:	b908      	cbnz	r0, 14386 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   14382:	4b02      	ldr	r3, [pc, #8]	; (1438c <pm_state_cpu_get_all+0xc>)
   14384:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   14386:	2000      	movs	r0, #0
   14388:	4770      	bx	lr
   1438a:	bf00      	nop
   1438c:	0002c95c 	.word	0x0002c95c

00014390 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   14390:	4904      	ldr	r1, [pc, #16]	; (143a4 <sub_bytes+0x14>)
   14392:	1e43      	subs	r3, r0, #1
   14394:	300f      	adds	r0, #15
   14396:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1439a:	5c8a      	ldrb	r2, [r1, r2]
   1439c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1439e:	4283      	cmp	r3, r0
   143a0:	d1f9      	bne.n	14396 <sub_bytes+0x6>
	}
}
   143a2:	4770      	bx	lr
   143a4:	0002d7c7 	.word	0x0002d7c7

000143a8 <tc_aes128_set_encrypt_key>:
{
   143a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   143aa:	4e26      	ldr	r6, [pc, #152]	; (14444 <tc_aes128_set_encrypt_key+0x9c>)
{
   143ac:	4607      	mov	r7, r0
   143ae:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   143b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   143b2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   143b4:	ad01      	add	r5, sp, #4
   143b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   143b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   143ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   143bc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   143c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   143c4:	4638      	mov	r0, r7
   143c6:	2f00      	cmp	r7, #0
   143c8:	d038      	beq.n	1443c <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   143ca:	2c00      	cmp	r4, #0
   143cc:	d038      	beq.n	14440 <tc_aes128_set_encrypt_key+0x98>
   143ce:	1f38      	subs	r0, r7, #4
   143d0:	4621      	mov	r1, r4
   143d2:	4602      	mov	r2, r0
   143d4:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   143d6:	784b      	ldrb	r3, [r1, #1]
   143d8:	780d      	ldrb	r5, [r1, #0]
   143da:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   143dc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   143e0:	78cd      	ldrb	r5, [r1, #3]
   143e2:	432b      	orrs	r3, r5
   143e4:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   143e6:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   143e8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   143ec:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   143ee:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   143f2:	d1f0      	bne.n	143d6 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   143f4:	4c14      	ldr	r4, [pc, #80]	; (14448 <tc_aes128_set_encrypt_key+0xa0>)
   143f6:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   143f8:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   143fa:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   143fc:	d116      	bne.n	1442c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   143fe:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14402:	5ca5      	ldrb	r5, [r4, r2]
   14404:	0e1a      	lsrs	r2, r3, #24
   14406:	5ca2      	ldrb	r2, [r4, r2]
   14408:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1440c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14410:	b2db      	uxtb	r3, r3
   14412:	5d65      	ldrb	r5, [r4, r5]
   14414:	5ce3      	ldrb	r3, [r4, r3]
   14416:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1441a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1441e:	ad0c      	add	r5, sp, #48	; 0x30
   14420:	f021 0303 	bic.w	r3, r1, #3
   14424:	442b      	add	r3, r5
   14426:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1442a:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   1442c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   14430:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   14432:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14434:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   14436:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14438:	d1de      	bne.n	143f8 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   1443a:	2001      	movs	r0, #1
}
   1443c:	b00d      	add	sp, #52	; 0x34
   1443e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   14440:	4620      	mov	r0, r4
   14442:	e7fb      	b.n	1443c <tc_aes128_set_encrypt_key+0x94>
   14444:	0002c7d4 	.word	0x0002c7d4
   14448:	0002d7c7 	.word	0x0002d7c7

0001444c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   1444c:	4801      	ldr	r0, [pc, #4]	; (14454 <nrf_cc3xx_platform_abort_init+0x8>)
   1444e:	f011 bacd 	b.w	259ec <nrf_cc3xx_platform_set_abort>
   14452:	bf00      	nop
   14454:	0002c95c 	.word	0x0002c95c

00014458 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14458:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   1445a:	4604      	mov	r4, r0
   1445c:	b918      	cbnz	r0, 14466 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   1445e:	4b0d      	ldr	r3, [pc, #52]	; (14494 <mutex_free_platform+0x3c>)
   14460:	480d      	ldr	r0, [pc, #52]	; (14498 <mutex_free_platform+0x40>)
   14462:	685b      	ldr	r3, [r3, #4]
   14464:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14466:	6861      	ldr	r1, [r4, #4]
   14468:	2908      	cmp	r1, #8
   1446a:	d00d      	beq.n	14488 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1446c:	f031 0304 	bics.w	r3, r1, #4
   14470:	d00a      	beq.n	14488 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   14472:	f011 0102 	ands.w	r1, r1, #2
   14476:	d008      	beq.n	1448a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   14478:	4808      	ldr	r0, [pc, #32]	; (1449c <mutex_free_platform+0x44>)
   1447a:	4621      	mov	r1, r4
   1447c:	f00d fcb6 	bl	21dec <k_mem_slab_free>
        mutex->mutex = NULL;
   14480:	2300      	movs	r3, #0
   14482:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   14484:	2300      	movs	r3, #0
   14486:	6063      	str	r3, [r4, #4]
}
   14488:	bd10      	pop	{r4, pc}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   1448a:	6820      	ldr	r0, [r4, #0]
   1448c:	2214      	movs	r2, #20
   1448e:	f017 fe99 	bl	2c1c4 <memset>
   14492:	e7f7      	b.n	14484 <mutex_free_platform+0x2c>
   14494:	2000086c 	.word	0x2000086c
   14498:	0002d8c7 	.word	0x0002d8c7
   1449c:	200021d8 	.word	0x200021d8

000144a0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   144a0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   144a2:	b308      	cbz	r0, 144e8 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   144a4:	6843      	ldr	r3, [r0, #4]
   144a6:	2b04      	cmp	r3, #4
   144a8:	d110      	bne.n	144cc <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   144aa:	2201      	movs	r2, #1
   144ac:	6803      	ldr	r3, [r0, #0]
   144ae:	f3bf 8f5b 	dmb	ish
   144b2:	e853 1f00 	ldrex	r1, [r3]
   144b6:	2900      	cmp	r1, #0
   144b8:	d103      	bne.n	144c2 <mutex_lock_platform+0x22>
   144ba:	e843 2000 	strex	r0, r2, [r3]
   144be:	2800      	cmp	r0, #0
   144c0:	d1f7      	bne.n	144b2 <mutex_lock_platform+0x12>
   144c2:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   144c6:	d10b      	bne.n	144e0 <mutex_lock_platform+0x40>
   144c8:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   144ca:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   144cc:	b153      	cbz	r3, 144e4 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   144ce:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   144d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   144d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   144d8:	f00d fe4a 	bl	22170 <z_impl_k_mutex_lock>
        if (ret == 0) {
   144dc:	2800      	cmp	r0, #0
   144de:	d0f3      	beq.n	144c8 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   144e0:	4803      	ldr	r0, [pc, #12]	; (144f0 <mutex_lock_platform+0x50>)
   144e2:	e7f2      	b.n	144ca <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   144e4:	4803      	ldr	r0, [pc, #12]	; (144f4 <mutex_lock_platform+0x54>)
   144e6:	e7f0      	b.n	144ca <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   144e8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   144ec:	e7ed      	b.n	144ca <mutex_lock_platform+0x2a>
   144ee:	bf00      	nop
   144f0:	ffff8fe9 	.word	0xffff8fe9
   144f4:	ffff8fea 	.word	0xffff8fea

000144f8 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   144f8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   144fa:	b1d0      	cbz	r0, 14532 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   144fc:	6843      	ldr	r3, [r0, #4]
   144fe:	2b04      	cmp	r3, #4
   14500:	d111      	bne.n	14526 <mutex_unlock_platform+0x2e>
   14502:	2200      	movs	r2, #0
   14504:	6803      	ldr	r3, [r0, #0]
   14506:	f3bf 8f5b 	dmb	ish
   1450a:	e853 1f00 	ldrex	r1, [r3]
   1450e:	2901      	cmp	r1, #1
   14510:	d103      	bne.n	1451a <mutex_unlock_platform+0x22>
   14512:	e843 2000 	strex	r0, r2, [r3]
   14516:	2800      	cmp	r0, #0
   14518:	d1f7      	bne.n	1450a <mutex_unlock_platform+0x12>
   1451a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1451e:	4807      	ldr	r0, [pc, #28]	; (1453c <mutex_unlock_platform+0x44>)
   14520:	bf08      	it	eq
   14522:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   14524:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14526:	b13b      	cbz	r3, 14538 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14528:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   1452a:	f00d fef3 	bl	22314 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1452e:	2000      	movs	r0, #0
   14530:	e7f8      	b.n	14524 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14532:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14536:	e7f5      	b.n	14524 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14538:	4801      	ldr	r0, [pc, #4]	; (14540 <mutex_unlock_platform+0x48>)
   1453a:	e7f3      	b.n	14524 <mutex_unlock_platform+0x2c>
   1453c:	ffff8fe9 	.word	0xffff8fe9
   14540:	ffff8fea 	.word	0xffff8fea

00014544 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14544:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14546:	4604      	mov	r4, r0
   14548:	b918      	cbnz	r0, 14552 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   1454a:	4b16      	ldr	r3, [pc, #88]	; (145a4 <mutex_init_platform+0x60>)
   1454c:	4816      	ldr	r0, [pc, #88]	; (145a8 <mutex_init_platform+0x64>)
   1454e:	685b      	ldr	r3, [r3, #4]
   14550:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14552:	6863      	ldr	r3, [r4, #4]
   14554:	2b04      	cmp	r3, #4
   14556:	d023      	beq.n	145a0 <mutex_init_platform+0x5c>
   14558:	2b08      	cmp	r3, #8
   1455a:	d021      	beq.n	145a0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   1455c:	b9cb      	cbnz	r3, 14592 <mutex_init_platform+0x4e>
   1455e:	6823      	ldr	r3, [r4, #0]
   14560:	b9bb      	cbnz	r3, 14592 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   14562:	4812      	ldr	r0, [pc, #72]	; (145ac <mutex_init_platform+0x68>)
   14564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1456c:	4621      	mov	r1, r4
   1456e:	f00d fbe3 	bl	21d38 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   14572:	b908      	cbnz	r0, 14578 <mutex_init_platform+0x34>
   14574:	6823      	ldr	r3, [r4, #0]
   14576:	b91b      	cbnz	r3, 14580 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   14578:	4b0a      	ldr	r3, [pc, #40]	; (145a4 <mutex_init_platform+0x60>)
   1457a:	480d      	ldr	r0, [pc, #52]	; (145b0 <mutex_init_platform+0x6c>)
   1457c:	685b      	ldr	r3, [r3, #4]
   1457e:	4798      	blx	r3
   14580:	6820      	ldr	r0, [r4, #0]
   14582:	2214      	movs	r2, #20
   14584:	2100      	movs	r1, #0
   14586:	f017 fe1d 	bl	2c1c4 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   1458a:	6863      	ldr	r3, [r4, #4]
   1458c:	f043 0302 	orr.w	r3, r3, #2
   14590:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   14592:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   14594:	f017 fbf4 	bl	2bd80 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   14598:	6863      	ldr	r3, [r4, #4]
   1459a:	f043 0301 	orr.w	r3, r3, #1
   1459e:	6063      	str	r3, [r4, #4]
}
   145a0:	bd10      	pop	{r4, pc}
   145a2:	bf00      	nop
   145a4:	2000086c 	.word	0x2000086c
   145a8:	0002d8c7 	.word	0x0002d8c7
   145ac:	200021d8 	.word	0x200021d8
   145b0:	0002d8ed 	.word	0x0002d8ed

000145b4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   145b4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   145b6:	4906      	ldr	r1, [pc, #24]	; (145d0 <nrf_cc3xx_platform_mutex_init+0x1c>)
   145b8:	4806      	ldr	r0, [pc, #24]	; (145d4 <nrf_cc3xx_platform_mutex_init+0x20>)
   145ba:	2340      	movs	r3, #64	; 0x40
   145bc:	2214      	movs	r2, #20
   145be:	f017 fba7 	bl	2bd10 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   145c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   145c6:	4904      	ldr	r1, [pc, #16]	; (145d8 <nrf_cc3xx_platform_mutex_init+0x24>)
   145c8:	4804      	ldr	r0, [pc, #16]	; (145dc <nrf_cc3xx_platform_mutex_init+0x28>)
   145ca:	f011 bac3 	b.w	25b54 <nrf_cc3xx_platform_set_mutexes>
   145ce:	bf00      	nop
   145d0:	200021f8 	.word	0x200021f8
   145d4:	200021d8 	.word	0x200021d8
   145d8:	0002c974 	.word	0x0002c974
   145dc:	0002c964 	.word	0x0002c964

000145e0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   145e0:	4901      	ldr	r1, [pc, #4]	; (145e8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   145e2:	2210      	movs	r2, #16
	str	r2, [r1]
   145e4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   145e6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   145e8:	e000ed10 	.word	0xe000ed10

000145ec <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   145ec:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   145ee:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   145f0:	f380 8811 	msr	BASEPRI, r0
	isb
   145f4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   145f8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   145fc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   145fe:	b662      	cpsie	i
	isb
   14600:	f3bf 8f6f 	isb	sy

	bx	lr
   14604:	4770      	bx	lr
   14606:	bf00      	nop

00014608 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14608:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1460a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1460c:	f381 8811 	msr	BASEPRI, r1

	wfe
   14610:	bf20      	wfe

	msr	BASEPRI, r0
   14612:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14616:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14618:	4770      	bx	lr
   1461a:	bf00      	nop

0001461c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1461c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1461e:	4605      	mov	r5, r0

	if (esf != NULL) {
   14620:	460c      	mov	r4, r1
   14622:	b1c9      	cbz	r1, 14658 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14624:	688b      	ldr	r3, [r1, #8]
   14626:	9300      	str	r3, [sp, #0]
   14628:	e9d1 2300 	ldrd	r2, r3, [r1]
   1462c:	480e      	ldr	r0, [pc, #56]	; (14668 <z_arm_fatal_error+0x4c>)
   1462e:	2145      	movs	r1, #69	; 0x45
   14630:	f014 f8b6 	bl	287a0 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14634:	6963      	ldr	r3, [r4, #20]
   14636:	9300      	str	r3, [sp, #0]
   14638:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   1463c:	480b      	ldr	r0, [pc, #44]	; (1466c <z_arm_fatal_error+0x50>)
   1463e:	2145      	movs	r1, #69	; 0x45
   14640:	f014 f8ae 	bl	287a0 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14644:	69e2      	ldr	r2, [r4, #28]
   14646:	480a      	ldr	r0, [pc, #40]	; (14670 <z_arm_fatal_error+0x54>)
   14648:	2145      	movs	r1, #69	; 0x45
   1464a:	f014 f8a9 	bl	287a0 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1464e:	69a2      	ldr	r2, [r4, #24]
   14650:	4808      	ldr	r0, [pc, #32]	; (14674 <z_arm_fatal_error+0x58>)
   14652:	2145      	movs	r1, #69	; 0x45
   14654:	f014 f8a4 	bl	287a0 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14658:	4621      	mov	r1, r4
   1465a:	4628      	mov	r0, r5
}
   1465c:	b003      	add	sp, #12
   1465e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   14662:	f00d b925 	b.w	218b0 <z_fatal_error>
   14666:	bf00      	nop
   14668:	0002d91a 	.word	0x0002d91a
   1466c:	0002d94e 	.word	0x0002d94e
   14670:	0002d982 	.word	0x0002d982
   14674:	0002d996 	.word	0x0002d996

00014678 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14678:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1467a:	2b00      	cmp	r3, #0
   1467c:	db08      	blt.n	14690 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1467e:	2201      	movs	r2, #1
   14680:	f000 001f 	and.w	r0, r0, #31
   14684:	fa02 f000 	lsl.w	r0, r2, r0
   14688:	095b      	lsrs	r3, r3, #5
   1468a:	4a02      	ldr	r2, [pc, #8]	; (14694 <arch_irq_enable+0x1c>)
   1468c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   14690:	4770      	bx	lr
   14692:	bf00      	nop
   14694:	e000e100 	.word	0xe000e100

00014698 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14698:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1469a:	2b00      	cmp	r3, #0
   1469c:	db0d      	blt.n	146ba <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1469e:	2201      	movs	r2, #1
   146a0:	095b      	lsrs	r3, r3, #5
   146a2:	f000 001f 	and.w	r0, r0, #31
   146a6:	fa02 f000 	lsl.w	r0, r2, r0
   146aa:	3320      	adds	r3, #32
   146ac:	4a03      	ldr	r2, [pc, #12]	; (146bc <arch_irq_disable+0x24>)
   146ae:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   146b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   146b6:	f3bf 8f6f 	isb	sy
}
   146ba:	4770      	bx	lr
   146bc:	e000e100 	.word	0xe000e100

000146c0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   146c0:	4b05      	ldr	r3, [pc, #20]	; (146d8 <arch_irq_is_enabled+0x18>)
   146c2:	0942      	lsrs	r2, r0, #5
   146c4:	f000 001f 	and.w	r0, r0, #31
   146c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   146cc:	2301      	movs	r3, #1
   146ce:	fa03 f000 	lsl.w	r0, r3, r0
}
   146d2:	4010      	ands	r0, r2
   146d4:	4770      	bx	lr
   146d6:	bf00      	nop
   146d8:	e000e100 	.word	0xe000e100

000146dc <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   146dc:	b538      	push	{r3, r4, r5, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   146de:	07d3      	lsls	r3, r2, #31
{
   146e0:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   146e2:	d41e      	bmi.n	14722 <z_arm_irq_priority_set+0x46>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   146e4:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   146e6:	2c07      	cmp	r4, #7
   146e8:	d908      	bls.n	146fc <z_arm_irq_priority_set+0x20>
   146ea:	490f      	ldr	r1, [pc, #60]	; (14728 <z_arm_irq_priority_set+0x4c>)
   146ec:	480f      	ldr	r0, [pc, #60]	; (1472c <z_arm_irq_priority_set+0x50>)
   146ee:	225b      	movs	r2, #91	; 0x5b
   146f0:	f014 f848 	bl	28784 <assert_print>
   146f4:	480c      	ldr	r0, [pc, #48]	; (14728 <z_arm_irq_priority_set+0x4c>)
   146f6:	215b      	movs	r1, #91	; 0x5b
   146f8:	f014 f83d 	bl	28776 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   146fc:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   146fe:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14700:	bfac      	ite	ge
   14702:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14706:	4b0a      	ldrlt	r3, [pc, #40]	; (14730 <z_arm_irq_priority_set+0x54>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14708:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1470c:	bfb8      	it	lt
   1470e:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14712:	b2e4      	uxtb	r4, r4
   14714:	bfaa      	itet	ge
   14716:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1471a:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1471c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   14720:	bd38      	pop	{r3, r4, r5, pc}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14722:	2400      	movs	r4, #0
   14724:	e7ea      	b.n	146fc <z_arm_irq_priority_set+0x20>
   14726:	bf00      	nop
   14728:	0002d9c9 	.word	0x0002d9c9
   1472c:	0002d509 	.word	0x0002d509
   14730:	e000ed14 	.word	0xe000ed14

00014734 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14734:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14736:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14738:	4b04      	ldr	r3, [pc, #16]	; (1474c <_arch_isr_direct_pm+0x18>)
   1473a:	699a      	ldr	r2, [r3, #24]
   1473c:	b11a      	cbz	r2, 14746 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1473e:	2200      	movs	r2, #0
   14740:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   14742:	f017 fb0e 	bl	2bd62 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14746:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14748:	bd08      	pop	{r3, pc}
   1474a:	bf00      	nop
   1474c:	20002ba0 	.word	0x20002ba0

00014750 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14750:	bf30      	wfi
    b z_SysNmiOnReset
   14752:	f7ff bffd 	b.w	14750 <z_SysNmiOnReset>
   14756:	bf00      	nop

00014758 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14758:	4a0b      	ldr	r2, [pc, #44]	; (14788 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1475a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1475c:	4b0b      	ldr	r3, [pc, #44]	; (1478c <z_arm_prep_c+0x34>)
   1475e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14762:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14764:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14768:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1476c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14770:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14778:	f00d f910 	bl	2199c <z_bss_zero>
	z_data_copy();
   1477c:	f00f fd68 	bl	24250 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14780:	f000 fb04 	bl	14d8c <z_arm_interrupt_init>
	z_cstart();
   14784:	f00d f94e 	bl	21a24 <z_cstart>
   14788:	00000000 	.word	0x00000000
   1478c:	e000ed00 	.word	0xe000ed00

00014790 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14790:	4a09      	ldr	r2, [pc, #36]	; (147b8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14792:	490a      	ldr	r1, [pc, #40]	; (147bc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14794:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14796:	6809      	ldr	r1, [r1, #0]
   14798:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1479a:	4909      	ldr	r1, [pc, #36]	; (147c0 <arch_swap+0x30>)
	_current->arch.basepri = key;
   1479c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1479e:	684b      	ldr	r3, [r1, #4]
   147a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   147a4:	604b      	str	r3, [r1, #4]
   147a6:	2300      	movs	r3, #0
   147a8:	f383 8811 	msr	BASEPRI, r3
   147ac:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   147b0:	6893      	ldr	r3, [r2, #8]
}
   147b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   147b4:	4770      	bx	lr
   147b6:	bf00      	nop
   147b8:	20002ba0 	.word	0x20002ba0
   147bc:	0002cf3c 	.word	0x0002cf3c
   147c0:	e000ed00 	.word	0xe000ed00

000147c4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   147c4:	4912      	ldr	r1, [pc, #72]	; (14810 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   147c6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   147c8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   147cc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   147ce:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   147d2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   147d6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   147d8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   147dc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   147e0:	4f0c      	ldr	r7, [pc, #48]	; (14814 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   147e2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   147e6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   147e8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   147ea:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   147ec:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   147ee:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   147f0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   147f2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   147f6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   147f8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   147fa:	f000 fb63 	bl	14ec4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   147fe:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14802:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14806:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1480a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1480e:	4770      	bx	lr
    ldr r1, =_kernel
   14810:	20002ba0 	.word	0x20002ba0
    ldr v4, =_SCS_ICSR
   14814:	e000ed04 	.word	0xe000ed04

00014818 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14818:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1481c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1481e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14822:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14826:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14828:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1482c:	2902      	cmp	r1, #2
    beq _oops
   1482e:	d0ff      	beq.n	14830 <_oops>

00014830 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14830:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14832:	f014 fd54 	bl	292de <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14836:	bd01      	pop	{r0, pc}

00014838 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14838:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1483c:	9b00      	ldr	r3, [sp, #0]
   1483e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14842:	490a      	ldr	r1, [pc, #40]	; (1486c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14844:	9b01      	ldr	r3, [sp, #4]
   14846:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1484a:	9b02      	ldr	r3, [sp, #8]
   1484c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14850:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14858:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   1485c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14860:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14862:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   14864:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14866:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14868:	4770      	bx	lr
   1486a:	bf00      	nop
   1486c:	0002850b 	.word	0x0002850b

00014870 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14870:	4a09      	ldr	r2, [pc, #36]	; (14898 <z_check_thread_stack_fail+0x28>)
{
   14872:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   14874:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   14876:	b170      	cbz	r0, 14896 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14878:	f113 0f16 	cmn.w	r3, #22
   1487c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1487e:	d005      	beq.n	1488c <z_check_thread_stack_fail+0x1c>
   14880:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   14884:	429a      	cmp	r2, r3
   14886:	d805      	bhi.n	14894 <z_check_thread_stack_fail+0x24>
   14888:	4283      	cmp	r3, r0
   1488a:	d203      	bcs.n	14894 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1488c:	4281      	cmp	r1, r0
   1488e:	bf28      	it	cs
   14890:	2000      	movcs	r0, #0
   14892:	4770      	bx	lr
   14894:	2000      	movs	r0, #0
}
   14896:	4770      	bx	lr
   14898:	20002ba0 	.word	0x20002ba0

0001489c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1489c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1489e:	4b09      	ldr	r3, [pc, #36]	; (148c4 <arch_switch_to_main_thread+0x28>)
   148a0:	6098      	str	r0, [r3, #8]
{
   148a2:	460d      	mov	r5, r1
   148a4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   148a6:	f000 fb0d 	bl	14ec4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   148aa:	4620      	mov	r0, r4
   148ac:	f385 8809 	msr	PSP, r5
   148b0:	2100      	movs	r1, #0
   148b2:	b663      	cpsie	if
   148b4:	f381 8811 	msr	BASEPRI, r1
   148b8:	f3bf 8f6f 	isb	sy
   148bc:	2200      	movs	r2, #0
   148be:	2300      	movs	r3, #0
   148c0:	f013 fe23 	bl	2850a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   148c4:	20002ba0 	.word	0x20002ba0

000148c8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   148c8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   148ca:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   148cc:	4a0b      	ldr	r2, [pc, #44]	; (148fc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   148ce:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   148d0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   148d2:	bf1e      	ittt	ne
	movne	r1, #0
   148d4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   148d6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   148d8:	f017 fa43 	blne	2bd62 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   148dc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   148de:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   148e2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   148e6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   148ea:	4905      	ldr	r1, [pc, #20]	; (14900 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   148ec:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   148ee:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   148f0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   148f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   148f6:	4903      	ldr	r1, [pc, #12]	; (14904 <_isr_wrapper+0x3c>)
	bx r1
   148f8:	4708      	bx	r1
   148fa:	0000      	.short	0x0000
	ldr r2, =_kernel
   148fc:	20002ba0 	.word	0x20002ba0
	ldr r1, =_sw_isr_table
   14900:	0002c418 	.word	0x0002c418
	ldr r1, =z_arm_int_exit
   14904:	00014909 	.word	0x00014909

00014908 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14908:	4b04      	ldr	r3, [pc, #16]	; (1491c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1490a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1490c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1490e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14910:	d003      	beq.n	1491a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14912:	4903      	ldr	r1, [pc, #12]	; (14920 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14918:	600a      	str	r2, [r1, #0]

0001491a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1491a:	4770      	bx	lr
	ldr r3, =_kernel
   1491c:	20002ba0 	.word	0x20002ba0
	ldr r1, =_SCS_ICSR
   14920:	e000ed04 	.word	0xe000ed04

00014924 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   14924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14928:	4c39      	ldr	r4, [pc, #228]	; (14a10 <mem_manage_fault+0xec>)
{
   1492a:	4680      	mov	r8, r0
   1492c:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1492e:	4839      	ldr	r0, [pc, #228]	; (14a14 <mem_manage_fault+0xf0>)
   14930:	2145      	movs	r1, #69	; 0x45
{
   14932:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   14934:	f013 ff34 	bl	287a0 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14938:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1493a:	06da      	lsls	r2, r3, #27
   1493c:	d503      	bpl.n	14946 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1493e:	4836      	ldr	r0, [pc, #216]	; (14a18 <mem_manage_fault+0xf4>)
   14940:	2145      	movs	r1, #69	; 0x45
   14942:	f013 ff2d 	bl	287a0 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14946:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14948:	071b      	lsls	r3, r3, #28
   1494a:	d503      	bpl.n	14954 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   1494c:	4833      	ldr	r0, [pc, #204]	; (14a1c <mem_manage_fault+0xf8>)
   1494e:	2145      	movs	r1, #69	; 0x45
   14950:	f013 ff26 	bl	287a0 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14954:	4c2e      	ldr	r4, [pc, #184]	; (14a10 <mem_manage_fault+0xec>)
   14956:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14958:	079f      	lsls	r7, r3, #30
   1495a:	d429      	bmi.n	149b0 <mem_manage_fault+0x8c>
	uint32_t mmfar = -EINVAL;
   1495c:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14960:	4c2b      	ldr	r4, [pc, #172]	; (14a10 <mem_manage_fault+0xec>)
   14962:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14964:	07d9      	lsls	r1, r3, #31
   14966:	d503      	bpl.n	14970 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
   14968:	482d      	ldr	r0, [pc, #180]	; (14a20 <mem_manage_fault+0xfc>)
   1496a:	2145      	movs	r1, #69	; 0x45
   1496c:	f013 ff18 	bl	287a0 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14970:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14972:	069a      	lsls	r2, r3, #26
   14974:	d503      	bpl.n	1497e <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
   14976:	482b      	ldr	r0, [pc, #172]	; (14a24 <mem_manage_fault+0x100>)
   14978:	2145      	movs	r1, #69	; 0x45
   1497a:	f013 ff11 	bl	287a0 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1497e:	4d24      	ldr	r5, [pc, #144]	; (14a10 <mem_manage_fault+0xec>)
   14980:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14982:	06db      	lsls	r3, r3, #27
   14984:	d428      	bmi.n	149d8 <mem_manage_fault+0xb4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   14986:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14988:	079c      	lsls	r4, r3, #30
   1498a:	d425      	bmi.n	149d8 <mem_manage_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1498c:	2400      	movs	r4, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1498e:	4b20      	ldr	r3, [pc, #128]	; (14a10 <mem_manage_fault+0xec>)
   14990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14992:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   14994:	bf42      	ittt	mi
   14996:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   14998:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1499c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1499e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   149a0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   149a4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   149a6:	2300      	movs	r3, #0
   149a8:	7033      	strb	r3, [r6, #0]

	return reason;
}
   149aa:	4620      	mov	r0, r4
   149ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   149b0:	481d      	ldr	r0, [pc, #116]	; (14a28 <mem_manage_fault+0x104>)
   149b2:	2145      	movs	r1, #69	; 0x45
   149b4:	f013 fef4 	bl	287a0 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   149b8:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   149ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   149bc:	0618      	lsls	r0, r3, #24
   149be:	d5cd      	bpl.n	1495c <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   149c0:	481a      	ldr	r0, [pc, #104]	; (14a2c <mem_manage_fault+0x108>)
   149c2:	463a      	mov	r2, r7
   149c4:	2145      	movs	r1, #69	; 0x45
   149c6:	f013 feeb 	bl	287a0 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   149ca:	2d00      	cmp	r5, #0
   149cc:	d0c8      	beq.n	14960 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   149ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   149d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   149d4:	62a3      	str	r3, [r4, #40]	; 0x28
   149d6:	e7c3      	b.n	14960 <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   149d8:	686b      	ldr	r3, [r5, #4]
   149da:	0518      	lsls	r0, r3, #20
   149dc:	d5d6      	bpl.n	1498c <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   149de:	4641      	mov	r1, r8
   149e0:	4638      	mov	r0, r7
   149e2:	f7ff ff45 	bl	14870 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   149e6:	4604      	mov	r4, r0
   149e8:	b118      	cbz	r0, 149f2 <mem_manage_fault+0xce>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   149ea:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   149ee:	2402      	movs	r4, #2
   149f0:	e7cd      	b.n	1498e <mem_manage_fault+0x6a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   149f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   149f4:	06d9      	lsls	r1, r3, #27
   149f6:	d5c9      	bpl.n	1498c <mem_manage_fault+0x68>
   149f8:	490d      	ldr	r1, [pc, #52]	; (14a30 <mem_manage_fault+0x10c>)
   149fa:	480e      	ldr	r0, [pc, #56]	; (14a34 <mem_manage_fault+0x110>)
   149fc:	f240 1253 	movw	r2, #339	; 0x153
   14a00:	f013 fec0 	bl	28784 <assert_print>
   14a04:	480a      	ldr	r0, [pc, #40]	; (14a30 <mem_manage_fault+0x10c>)
   14a06:	f240 1153 	movw	r1, #339	; 0x153
   14a0a:	f013 feb4 	bl	28776 <assert_post_action>
   14a0e:	e7be      	b.n	1498e <mem_manage_fault+0x6a>
   14a10:	e000ed00 	.word	0xe000ed00
   14a14:	0002d9ff 	.word	0x0002d9ff
   14a18:	0002da1a 	.word	0x0002da1a
   14a1c:	0002da52 	.word	0x0002da52
   14a20:	0002daa2 	.word	0x0002daa2
   14a24:	0002dac6 	.word	0x0002dac6
   14a28:	0002da6a 	.word	0x0002da6a
   14a2c:	0002da87 	.word	0x0002da87
   14a30:	0002dafa 	.word	0x0002dafa
   14a34:	0002d509 	.word	0x0002d509

00014a38 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14a38:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14a3a:	4c1d      	ldr	r4, [pc, #116]	; (14ab0 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   14a3c:	481d      	ldr	r0, [pc, #116]	; (14ab4 <usage_fault.constprop.0+0x7c>)
   14a3e:	2145      	movs	r1, #69	; 0x45
   14a40:	f013 feae 	bl	287a0 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14a44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a46:	019b      	lsls	r3, r3, #6
   14a48:	d503      	bpl.n	14a52 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   14a4a:	481b      	ldr	r0, [pc, #108]	; (14ab8 <usage_fault.constprop.0+0x80>)
   14a4c:	2145      	movs	r1, #69	; 0x45
   14a4e:	f013 fea7 	bl	287a0 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a54:	01dc      	lsls	r4, r3, #7
   14a56:	d503      	bpl.n	14a60 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   14a58:	4818      	ldr	r0, [pc, #96]	; (14abc <usage_fault.constprop.0+0x84>)
   14a5a:	2145      	movs	r1, #69	; 0x45
   14a5c:	f013 fea0 	bl	287a0 <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14a60:	4c13      	ldr	r4, [pc, #76]	; (14ab0 <usage_fault.constprop.0+0x78>)
   14a62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a64:	0318      	lsls	r0, r3, #12
   14a66:	d503      	bpl.n	14a70 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   14a68:	4815      	ldr	r0, [pc, #84]	; (14ac0 <usage_fault.constprop.0+0x88>)
   14a6a:	2145      	movs	r1, #69	; 0x45
   14a6c:	f013 fe98 	bl	287a0 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14a70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a72:	0359      	lsls	r1, r3, #13
   14a74:	d503      	bpl.n	14a7e <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14a76:	4813      	ldr	r0, [pc, #76]	; (14ac4 <usage_fault.constprop.0+0x8c>)
   14a78:	2145      	movs	r1, #69	; 0x45
   14a7a:	f013 fe91 	bl	287a0 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14a7e:	4c0c      	ldr	r4, [pc, #48]	; (14ab0 <usage_fault.constprop.0+0x78>)
   14a80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a82:	039a      	lsls	r2, r3, #14
   14a84:	d503      	bpl.n	14a8e <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14a86:	4810      	ldr	r0, [pc, #64]	; (14ac8 <usage_fault.constprop.0+0x90>)
   14a88:	2145      	movs	r1, #69	; 0x45
   14a8a:	f013 fe89 	bl	287a0 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14a8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a90:	03db      	lsls	r3, r3, #15
   14a92:	d503      	bpl.n	14a9c <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14a94:	480d      	ldr	r0, [pc, #52]	; (14acc <usage_fault.constprop.0+0x94>)
   14a96:	2145      	movs	r1, #69	; 0x45
   14a98:	f013 fe82 	bl	287a0 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14a9c:	4a04      	ldr	r2, [pc, #16]	; (14ab0 <usage_fault.constprop.0+0x78>)
   14a9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14aa0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14aa4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   14aa8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   14aaa:	2000      	movs	r0, #0
   14aac:	bd10      	pop	{r4, pc}
   14aae:	bf00      	nop
   14ab0:	e000ed00 	.word	0xe000ed00
   14ab4:	0002db34 	.word	0x0002db34
   14ab8:	0002db51 	.word	0x0002db51
   14abc:	0002db69 	.word	0x0002db69
   14ac0:	0002db88 	.word	0x0002db88
   14ac4:	0002dbab 	.word	0x0002dbab
   14ac8:	0002dbd5 	.word	0x0002dbd5
   14acc:	0002dbf4 	.word	0x0002dbf4

00014ad0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14ad0:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14ad2:	4c23      	ldr	r4, [pc, #140]	; (14b60 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14ad4:	4606      	mov	r6, r0
   14ad6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   14ad8:	4822      	ldr	r0, [pc, #136]	; (14b64 <bus_fault.constprop.0+0x94>)
   14ada:	2145      	movs	r1, #69	; 0x45
   14adc:	f013 fe60 	bl	287a0 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14ae0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14ae2:	04d9      	lsls	r1, r3, #19
   14ae4:	d503      	bpl.n	14aee <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   14ae6:	4820      	ldr	r0, [pc, #128]	; (14b68 <bus_fault.constprop.0+0x98>)
   14ae8:	2145      	movs	r1, #69	; 0x45
   14aea:	f013 fe59 	bl	287a0 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14af0:	051a      	lsls	r2, r3, #20
   14af2:	d503      	bpl.n	14afc <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   14af4:	481d      	ldr	r0, [pc, #116]	; (14b6c <bus_fault.constprop.0+0x9c>)
   14af6:	2145      	movs	r1, #69	; 0x45
   14af8:	f013 fe52 	bl	287a0 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14afc:	4c18      	ldr	r4, [pc, #96]	; (14b60 <bus_fault.constprop.0+0x90>)
   14afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b00:	059b      	lsls	r3, r3, #22
   14b02:	d510      	bpl.n	14b26 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   14b04:	481a      	ldr	r0, [pc, #104]	; (14b70 <bus_fault.constprop.0+0xa0>)
   14b06:	2145      	movs	r1, #69	; 0x45
   14b08:	f013 fe4a 	bl	287a0 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   14b0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14b0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b10:	0418      	lsls	r0, r3, #16
   14b12:	d508      	bpl.n	14b26 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14b14:	4817      	ldr	r0, [pc, #92]	; (14b74 <bus_fault.constprop.0+0xa4>)
   14b16:	2145      	movs	r1, #69	; 0x45
   14b18:	f013 fe42 	bl	287a0 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   14b1c:	b11e      	cbz	r6, 14b26 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14b1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14b24:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14b26:	4c0e      	ldr	r4, [pc, #56]	; (14b60 <bus_fault.constprop.0+0x90>)
   14b28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b2a:	0559      	lsls	r1, r3, #21
   14b2c:	d503      	bpl.n	14b36 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   14b2e:	4812      	ldr	r0, [pc, #72]	; (14b78 <bus_fault.constprop.0+0xa8>)
   14b30:	2145      	movs	r1, #69	; 0x45
   14b32:	f013 fe35 	bl	287a0 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b38:	05da      	lsls	r2, r3, #23
   14b3a:	d50b      	bpl.n	14b54 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   14b3c:	480f      	ldr	r0, [pc, #60]	; (14b7c <bus_fault.constprop.0+0xac>)
   14b3e:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14b40:	f013 fe2e 	bl	287a0 <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14b44:	4a06      	ldr	r2, [pc, #24]	; (14b60 <bus_fault.constprop.0+0x90>)
   14b46:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14b48:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14b4a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14b4e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   14b50:	7028      	strb	r0, [r5, #0]
}
   14b52:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14b54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14b56:	049b      	lsls	r3, r3, #18
   14b58:	d5f4      	bpl.n	14b44 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14b5a:	4809      	ldr	r0, [pc, #36]	; (14b80 <bus_fault.constprop.0+0xb0>)
   14b5c:	2145      	movs	r1, #69	; 0x45
   14b5e:	e7ef      	b.n	14b40 <bus_fault.constprop.0+0x70>
   14b60:	e000ed00 	.word	0xe000ed00
   14b64:	0002dc24 	.word	0x0002dc24
   14b68:	0002dc3f 	.word	0x0002dc3f
   14b6c:	0002da52 	.word	0x0002da52
   14b70:	0002dc55 	.word	0x0002dc55
   14b74:	0002dc73 	.word	0x0002dc73
   14b78:	0002dc8d 	.word	0x0002dc8d
   14b7c:	0002dcad 	.word	0x0002dcad
   14b80:	0002dac6 	.word	0x0002dac6

00014b84 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14b88:	4b6a      	ldr	r3, [pc, #424]	; (14d34 <z_arm_fault+0x1b0>)
   14b8a:	685f      	ldr	r7, [r3, #4]
{
   14b8c:	b08a      	sub	sp, #40	; 0x28
   14b8e:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14b90:	f3c7 0408 	ubfx	r4, r7, #0, #9
   14b94:	2600      	movs	r6, #0
   14b96:	f386 8811 	msr	BASEPRI, r6
   14b9a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14b9e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14ba2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14ba6:	d107      	bne.n	14bb8 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   14ba8:	f002 030c 	and.w	r3, r2, #12
   14bac:	2b08      	cmp	r3, #8
   14bae:	d110      	bne.n	14bd2 <z_arm_fault+0x4e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   14bb0:	4861      	ldr	r0, [pc, #388]	; (14d38 <z_arm_fault+0x1b4>)
   14bb2:	2145      	movs	r1, #69	; 0x45
   14bb4:	f013 fdf4 	bl	287a0 <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   14bb8:	4960      	ldr	r1, [pc, #384]	; (14d3c <z_arm_fault+0x1b8>)
   14bba:	4861      	ldr	r0, [pc, #388]	; (14d40 <z_arm_fault+0x1bc>)
   14bbc:	f240 4205 	movw	r2, #1029	; 0x405
   14bc0:	f013 fde0 	bl	28784 <assert_print>
   14bc4:	485d      	ldr	r0, [pc, #372]	; (14d3c <z_arm_fault+0x1b8>)
   14bc6:	f240 4105 	movw	r1, #1029	; 0x405
   14bca:	f013 fdd4 	bl	28776 <assert_post_action>
   14bce:	2500      	movs	r5, #0
   14bd0:	e005      	b.n	14bde <z_arm_fault+0x5a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14bd2:	0713      	lsls	r3, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   14bd4:	bf5c      	itt	pl
   14bd6:	4605      	movpl	r5, r0
			*nested_exc = true;
   14bd8:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   14bda:	2d00      	cmp	r5, #0
   14bdc:	d0ec      	beq.n	14bb8 <z_arm_fault+0x34>
	*recoverable = false;
   14bde:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
   14be2:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
   14be4:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
   14be8:	2b09      	cmp	r3, #9
   14bea:	f200 8091 	bhi.w	14d10 <z_arm_fault+0x18c>
   14bee:	e8df f003 	tbb	[pc, r3]
   14bf2:	8405      	.short	0x8405
   14bf4:	8f8f6c88 	.word	0x8f8f6c88
   14bf8:	8c8f8f8f 	.word	0x8c8f8f8f
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14bfc:	4f4d      	ldr	r7, [pc, #308]	; (14d34 <z_arm_fault+0x1b0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   14bfe:	4851      	ldr	r0, [pc, #324]	; (14d44 <z_arm_fault+0x1c0>)
   14c00:	2145      	movs	r1, #69	; 0x45
   14c02:	f013 fdcd 	bl	287a0 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14c06:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	*recoverable = false;
   14c08:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14c0c:	f014 0402 	ands.w	r4, r4, #2
   14c10:	d005      	beq.n	14c1e <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
   14c12:	484d      	ldr	r0, [pc, #308]	; (14d48 <z_arm_fault+0x1c4>)
   14c14:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   14c16:	f013 fdc3 	bl	287a0 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14c1a:	2400      	movs	r4, #0
}
   14c1c:	e006      	b.n	14c2c <z_arm_fault+0xa8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   14c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c20:	2b00      	cmp	r3, #0
   14c22:	da23      	bge.n	14c6c <z_arm_fault+0xe8>
		PR_EXC("  Debug event");
   14c24:	4849      	ldr	r0, [pc, #292]	; (14d4c <z_arm_fault+0x1c8>)
   14c26:	2145      	movs	r1, #69	; 0x45
   14c28:	f013 fdba 	bl	287a0 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14c2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14c30:	b9cb      	cbnz	r3, 14c66 <z_arm_fault+0xe2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14c32:	aa02      	add	r2, sp, #8
   14c34:	f105 0720 	add.w	r7, r5, #32
   14c38:	6828      	ldr	r0, [r5, #0]
   14c3a:	6869      	ldr	r1, [r5, #4]
   14c3c:	4613      	mov	r3, r2
   14c3e:	c303      	stmia	r3!, {r0, r1}
   14c40:	3508      	adds	r5, #8
   14c42:	42bd      	cmp	r5, r7
   14c44:	461a      	mov	r2, r3
   14c46:	d1f7      	bne.n	14c38 <z_arm_fault+0xb4>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   14c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14c4a:	2e00      	cmp	r6, #0
   14c4c:	d06d      	beq.n	14d2a <z_arm_fault+0x1a6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14c52:	b922      	cbnz	r2, 14c5e <z_arm_fault+0xda>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14c54:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14c58:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14c5c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14c5e:	a902      	add	r1, sp, #8
   14c60:	4620      	mov	r0, r4
   14c62:	f7ff fcdb 	bl	1461c <z_arm_fatal_error>
}
   14c66:	b00a      	add	sp, #40	; 0x28
   14c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14c6c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   14c6e:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   14c72:	d039      	beq.n	14ce8 <z_arm_fault+0x164>
		PR_EXC("  Fault escalation (see below)");
   14c74:	4836      	ldr	r0, [pc, #216]	; (14d50 <z_arm_fault+0x1cc>)
   14c76:	2145      	movs	r1, #69	; 0x45
   14c78:	f013 fd92 	bl	287a0 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   14c7c:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   14c7e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   14c82:	f64d 7302 	movw	r3, #57090	; 0xdf02
   14c86:	429a      	cmp	r2, r3
   14c88:	d106      	bne.n	14c98 <z_arm_fault+0x114>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   14c8a:	682a      	ldr	r2, [r5, #0]
   14c8c:	4831      	ldr	r0, [pc, #196]	; (14d54 <z_arm_fault+0x1d0>)
   14c8e:	2145      	movs	r1, #69	; 0x45
   14c90:	f013 fd86 	bl	287a0 <z_log_minimal_printk>
			reason = esf->basic.r0;
   14c94:	682c      	ldr	r4, [r5, #0]
   14c96:	e7c9      	b.n	14c2c <z_arm_fault+0xa8>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   14c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14c9a:	b2db      	uxtb	r3, r3
   14c9c:	b13b      	cbz	r3, 14cae <z_arm_fault+0x12a>
			reason = mem_manage_fault(esf, 1, recoverable);
   14c9e:	f10d 0207 	add.w	r2, sp, #7
   14ca2:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   14ca4:	4628      	mov	r0, r5
   14ca6:	f7ff fe3d 	bl	14924 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   14caa:	4604      	mov	r4, r0
		break;
   14cac:	e7be      	b.n	14c2c <z_arm_fault+0xa8>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   14cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14cb0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   14cb4:	d005      	beq.n	14cc2 <z_arm_fault+0x13e>
			reason = bus_fault(esf, 1, recoverable);
   14cb6:	f10d 0107 	add.w	r1, sp, #7
   14cba:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   14cbc:	f7ff ff08 	bl	14ad0 <bus_fault.constprop.0>
   14cc0:	e7f3      	b.n	14caa <z_arm_fault+0x126>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   14cc2:	6abc      	ldr	r4, [r7, #40]	; 0x28
   14cc4:	0c24      	lsrs	r4, r4, #16
   14cc6:	0424      	lsls	r4, r4, #16
   14cc8:	b114      	cbz	r4, 14cd0 <z_arm_fault+0x14c>
		reason = usage_fault(esf);
   14cca:	f7ff feb5 	bl	14a38 <usage_fault.constprop.0>
   14cce:	e7ec      	b.n	14caa <z_arm_fault+0x126>
			__ASSERT(0,
   14cd0:	491a      	ldr	r1, [pc, #104]	; (14d3c <z_arm_fault+0x1b8>)
   14cd2:	481b      	ldr	r0, [pc, #108]	; (14d40 <z_arm_fault+0x1bc>)
   14cd4:	f240 22d7 	movw	r2, #727	; 0x2d7
   14cd8:	f013 fd54 	bl	28784 <assert_print>
   14cdc:	f240 21d7 	movw	r1, #727	; 0x2d7
		__ASSERT(0,
   14ce0:	4816      	ldr	r0, [pc, #88]	; (14d3c <z_arm_fault+0x1b8>)
   14ce2:	f013 fd48 	bl	28776 <assert_post_action>
   14ce6:	e7a1      	b.n	14c2c <z_arm_fault+0xa8>
   14ce8:	4914      	ldr	r1, [pc, #80]	; (14d3c <z_arm_fault+0x1b8>)
   14cea:	4815      	ldr	r0, [pc, #84]	; (14d40 <z_arm_fault+0x1bc>)
   14cec:	f240 22db 	movw	r2, #731	; 0x2db
   14cf0:	f013 fd48 	bl	28784 <assert_print>
   14cf4:	f240 21db 	movw	r1, #731	; 0x2db
   14cf8:	e7f2      	b.n	14ce0 <z_arm_fault+0x15c>
		reason = mem_manage_fault(esf, 0, recoverable);
   14cfa:	f10d 0207 	add.w	r2, sp, #7
   14cfe:	2100      	movs	r1, #0
   14d00:	e7d0      	b.n	14ca4 <z_arm_fault+0x120>
		reason = bus_fault(esf, 0, recoverable);
   14d02:	f10d 0107 	add.w	r1, sp, #7
   14d06:	2000      	movs	r0, #0
   14d08:	e7d8      	b.n	14cbc <z_arm_fault+0x138>
	PR_FAULT_INFO(
   14d0a:	4813      	ldr	r0, [pc, #76]	; (14d58 <z_arm_fault+0x1d4>)
   14d0c:	2145      	movs	r1, #69	; 0x45
   14d0e:	e782      	b.n	14c16 <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
   14d10:	4912      	ldr	r1, [pc, #72]	; (14d5c <z_arm_fault+0x1d8>)
   14d12:	4a13      	ldr	r2, [pc, #76]	; (14d60 <z_arm_fault+0x1dc>)
   14d14:	4813      	ldr	r0, [pc, #76]	; (14d64 <z_arm_fault+0x1e0>)
   14d16:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
   14d1a:	bf08      	it	eq
   14d1c:	460a      	moveq	r2, r1
   14d1e:	f1a4 0310 	sub.w	r3, r4, #16
   14d22:	2145      	movs	r1, #69	; 0x45
   14d24:	f013 fd3c 	bl	287a0 <z_log_minimal_printk>
   14d28:	e777      	b.n	14c1a <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14d2a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14d2e:	f023 0301 	bic.w	r3, r3, #1
   14d32:	e793      	b.n	14c5c <z_arm_fault+0xd8>
   14d34:	e000ed00 	.word	0xe000ed00
   14d38:	0002dcf8 	.word	0x0002dcf8
   14d3c:	0002dafa 	.word	0x0002dafa
   14d40:	0002d509 	.word	0x0002d509
   14d44:	0002dd28 	.word	0x0002dd28
   14d48:	0002dd44 	.word	0x0002dd44
   14d4c:	0002dd6a 	.word	0x0002dd6a
   14d50:	0002dd7d 	.word	0x0002dd7d
   14d54:	0002dda1 	.word	0x0002dda1
   14d58:	0002ddc2 	.word	0x0002ddc2
   14d5c:	0002dcca 	.word	0x0002dcca
   14d60:	0002dcdf 	.word	0x0002dcdf
   14d64:	0002ddeb 	.word	0x0002ddeb

00014d68 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14d68:	4a02      	ldr	r2, [pc, #8]	; (14d74 <z_arm_fault_init+0xc>)
   14d6a:	6953      	ldr	r3, [r2, #20]
   14d6c:	f043 0310 	orr.w	r3, r3, #16
   14d70:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   14d72:	4770      	bx	lr
   14d74:	e000ed00 	.word	0xe000ed00

00014d78 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   14d78:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14d7c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14d80:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   14d82:	4672      	mov	r2, lr
	bl z_arm_fault
   14d84:	f7ff fefe 	bl	14b84 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   14d88:	bd01      	pop	{r0, pc}
   14d8a:	bf00      	nop

00014d8c <z_arm_interrupt_init>:
   14d8c:	4804      	ldr	r0, [pc, #16]	; (14da0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14d8e:	2300      	movs	r3, #0
   14d90:	2140      	movs	r1, #64	; 0x40
   14d92:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14d94:	3301      	adds	r3, #1
   14d96:	2b30      	cmp	r3, #48	; 0x30
   14d98:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14d9c:	d1f9      	bne.n	14d92 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14d9e:	4770      	bx	lr
   14da0:	e000e100 	.word	0xe000e100

00014da4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   14da4:	2000      	movs	r0, #0
    msr CONTROL, r0
   14da6:	f380 8814 	msr	CONTROL, r0
    isb
   14daa:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   14dae:	f7fe fb9f 	bl	134f0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   14db2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   14db4:	490d      	ldr	r1, [pc, #52]	; (14dec <__start+0x48>)
    str r0, [r1]
   14db6:	6008      	str	r0, [r1, #0]
    dsb
   14db8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14dbc:	480c      	ldr	r0, [pc, #48]	; (14df0 <__start+0x4c>)
    msr msp, r0
   14dbe:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   14dc2:	f000 f82b 	bl	14e1c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14dc6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   14dc8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   14dcc:	4809      	ldr	r0, [pc, #36]	; (14df4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   14dce:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   14dd2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14dd4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14dd8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   14ddc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   14dde:	4308      	orrs	r0, r1
    msr CONTROL, r0
   14de0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14de4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14de8:	f7ff fcb6 	bl	14758 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   14dec:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14df0:	20006900 	.word	0x20006900
    ldr r0, =z_interrupt_stacks
   14df4:	20006ac0 	.word	0x20006ac0

00014df8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   14df8:	4907      	ldr	r1, [pc, #28]	; (14e18 <z_arm_clear_arm_mpu_config+0x20>)
   14dfa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   14dfe:	2300      	movs	r3, #0
	int num_regions =
   14e00:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   14e04:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   14e06:	4293      	cmp	r3, r2
   14e08:	d100      	bne.n	14e0c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   14e0a:	4770      	bx	lr
  MPU->RNR = rnr;
   14e0c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   14e10:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   14e14:	3301      	adds	r3, #1
   14e16:	e7f6      	b.n	14e06 <z_arm_clear_arm_mpu_config+0xe>
   14e18:	e000ed00 	.word	0xe000ed00

00014e1c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   14e1c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   14e1e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   14e20:	2300      	movs	r3, #0
   14e22:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   14e26:	f7ff ffe7 	bl	14df8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   14e2a:	4b14      	ldr	r3, [pc, #80]	; (14e7c <z_arm_init_arch_hw_at_boot+0x60>)
   14e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   14e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   14e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   14e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   14e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   14e44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   14e48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   14e4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   14e50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14e54:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14e58:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   14e5c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   14e60:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   14e64:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   14e68:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   14e6c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   14e70:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   14e72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14e76:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   14e7a:	bd08      	pop	{r3, pc}
   14e7c:	e000e100 	.word	0xe000e100

00014e80 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   14e80:	4b08      	ldr	r3, [pc, #32]	; (14ea4 <z_impl_k_thread_abort+0x24>)
   14e82:	689b      	ldr	r3, [r3, #8]
   14e84:	4283      	cmp	r3, r0
   14e86:	d10b      	bne.n	14ea0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14e88:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14e8c:	b143      	cbz	r3, 14ea0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14e8e:	4b06      	ldr	r3, [pc, #24]	; (14ea8 <z_impl_k_thread_abort+0x28>)
   14e90:	685a      	ldr	r2, [r3, #4]
   14e92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   14e96:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   14e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   14e9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   14e9e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   14ea0:	f00f b8c4 	b.w	2402c <z_thread_abort>
   14ea4:	20002ba0 	.word	0x20002ba0
   14ea8:	e000ed00 	.word	0xe000ed00

00014eac <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14eac:	4b02      	ldr	r3, [pc, #8]	; (14eb8 <z_arm_configure_static_mpu_regions+0xc>)
   14eae:	4a03      	ldr	r2, [pc, #12]	; (14ebc <z_arm_configure_static_mpu_regions+0x10>)
   14eb0:	4803      	ldr	r0, [pc, #12]	; (14ec0 <z_arm_configure_static_mpu_regions+0x14>)
   14eb2:	2101      	movs	r1, #1
   14eb4:	f000 b87c 	b.w	14fb0 <arm_core_mpu_configure_static_mpu_regions>
   14eb8:	20040000 	.word	0x20040000
   14ebc:	20000000 	.word	0x20000000
   14ec0:	0002c988 	.word	0x0002c988

00014ec4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   14ec4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   14ec6:	4b05      	ldr	r3, [pc, #20]	; (14edc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   14ec8:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   14eca:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   14ecc:	4a04      	ldr	r2, [pc, #16]	; (14ee0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   14ece:	2140      	movs	r1, #64	; 0x40
   14ed0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   14ed4:	4618      	mov	r0, r3
   14ed6:	2101      	movs	r1, #1
   14ed8:	f000 b888 	b.w	14fec <arm_core_mpu_configure_dynamic_mpu_regions>
   14edc:	200026f8 	.word	0x200026f8
   14ee0:	150b0000 	.word	0x150b0000

00014ee4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   14ee6:	4f24      	ldr	r7, [pc, #144]	; (14f78 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;
   14ee8:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   14eea:	2200      	movs	r2, #0
   14eec:	428a      	cmp	r2, r1
   14eee:	da0e      	bge.n	14f0e <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
   14ef0:	6844      	ldr	r4, [r0, #4]
   14ef2:	2c00      	cmp	r4, #0
   14ef4:	d03c      	beq.n	14f70 <mpu_configure_regions+0x8c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   14ef6:	b193      	cbz	r3, 14f1e <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   14ef8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   14efc:	ea14 0f0c 	tst.w	r4, ip
   14f00:	d007      	beq.n	14f12 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   14f02:	481e      	ldr	r0, [pc, #120]	; (14f7c <mpu_configure_regions+0x98>)
   14f04:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14f06:	f013 fc4b 	bl	287a0 <z_log_minimal_printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14f0a:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   14f0e:	4628      	mov	r0, r5
   14f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   14f12:	2c1f      	cmp	r4, #31
   14f14:	d9f5      	bls.n	14f02 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   14f16:	6806      	ldr	r6, [r0, #0]
		&&
   14f18:	ea1c 0f06 	tst.w	ip, r6
   14f1c:	d1f1      	bne.n	14f02 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   14f1e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   14f20:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14f22:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14f26:	b2ed      	uxtb	r5, r5
	if (size <= 32U) {
   14f28:	d910      	bls.n	14f4c <mpu_configure_regions+0x68>
	if (size > (1UL << 31)) {
   14f2a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   14f2e:	d80f      	bhi.n	14f50 <mpu_configure_regions+0x6c>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14f30:	3c01      	subs	r4, #1
   14f32:	fab4 f484 	clz	r4, r4
   14f36:	f1c4 041f 	rsb	r4, r4, #31
   14f3a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   14f3c:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14f3e:	ea4c 0404 	orr.w	r4, ip, r4
   14f42:	d907      	bls.n	14f54 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14f44:	480e      	ldr	r0, [pc, #56]	; (14f80 <mpu_configure_regions+0x9c>)
   14f46:	462a      	mov	r2, r5
   14f48:	2145      	movs	r1, #69	; 0x45
   14f4a:	e7dc      	b.n	14f06 <mpu_configure_regions+0x22>
		return REGION_32B;
   14f4c:	2408      	movs	r4, #8
   14f4e:	e7f5      	b.n	14f3c <mpu_configure_regions+0x58>
		return REGION_4G;
   14f50:	243e      	movs	r4, #62	; 0x3e
   14f52:	e7f3      	b.n	14f3c <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14f54:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
   14f58:	432e      	orrs	r6, r5
   14f5a:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14f5e:	f044 0401 	orr.w	r4, r4, #1
   14f62:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14f66:	f8c7 609c 	str.w	r6, [r7, #156]	; 0x9c
		reg_index++;
   14f6a:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14f6c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   14f70:	3201      	adds	r2, #1
   14f72:	300c      	adds	r0, #12
   14f74:	e7ba      	b.n	14eec <mpu_configure_regions+0x8>
   14f76:	bf00      	nop
   14f78:	e000ed00 	.word	0xe000ed00
   14f7c:	0002de07 	.word	0x0002de07
   14f80:	0002de2f 	.word	0x0002de2f

00014f84 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14f84:	4b04      	ldr	r3, [pc, #16]	; (14f98 <arm_core_mpu_enable+0x14>)
   14f86:	2205      	movs	r2, #5
   14f88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   14f8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14f90:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14f94:	4770      	bx	lr
   14f96:	bf00      	nop
   14f98:	e000ed00 	.word	0xe000ed00

00014f9c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14f9c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14fa0:	4b02      	ldr	r3, [pc, #8]	; (14fac <arm_core_mpu_disable+0x10>)
   14fa2:	2200      	movs	r2, #0
   14fa4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   14fa8:	4770      	bx	lr
   14faa:	bf00      	nop
   14fac:	e000ed00 	.word	0xe000ed00

00014fb0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14fb0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14fb2:	4c0b      	ldr	r4, [pc, #44]	; (14fe0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14fb4:	2301      	movs	r3, #1
   14fb6:	7822      	ldrb	r2, [r4, #0]
   14fb8:	f7ff ff94 	bl	14ee4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14fbc:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14fbe:	3016      	adds	r0, #22
   14fc0:	d10c      	bne.n	14fdc <arm_core_mpu_configure_static_mpu_regions+0x2c>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14fc2:	4908      	ldr	r1, [pc, #32]	; (14fe4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   14fc4:	4808      	ldr	r0, [pc, #32]	; (14fe8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   14fc6:	f44f 728b 	mov.w	r2, #278	; 0x116
   14fca:	f013 fbdb 	bl	28784 <assert_print>
			regions_num);
	}
}
   14fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14fd2:	4804      	ldr	r0, [pc, #16]	; (14fe4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   14fd4:	f44f 718b 	mov.w	r1, #278	; 0x116
   14fd8:	f013 bbcd 	b.w	28776 <assert_post_action>
}
   14fdc:	bd10      	pop	{r4, pc}
   14fde:	bf00      	nop
   14fe0:	200036f6 	.word	0x200036f6
   14fe4:	0002de5a 	.word	0x0002de5a
   14fe8:	0002d509 	.word	0x0002d509

00014fec <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14fec:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14fee:	4a10      	ldr	r2, [pc, #64]	; (15030 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
   14ff0:	2300      	movs	r3, #0
   14ff2:	7812      	ldrb	r2, [r2, #0]
   14ff4:	f7ff ff76 	bl	14ee4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14ff8:	f110 0f16 	cmn.w	r0, #22
   14ffc:	d00a      	beq.n	15014 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>
  MPU->RNR = rnr;
   14ffe:	4b0d      	ldr	r3, [pc, #52]	; (15034 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
  MPU->RASR = 0U;
   15000:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15002:	2807      	cmp	r0, #7
   15004:	dd00      	ble.n	15008 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   15006:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   15008:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   1500c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   15010:	3001      	adds	r0, #1
   15012:	e7f6      	b.n	15002 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   15014:	4908      	ldr	r1, [pc, #32]	; (15038 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   15016:	4809      	ldr	r0, [pc, #36]	; (1503c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
   15018:	f240 1235 	movw	r2, #309	; 0x135
   1501c:	f013 fbb2 	bl	28784 <assert_print>
}
   15020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   15024:	4804      	ldr	r0, [pc, #16]	; (15038 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   15026:	f240 1135 	movw	r1, #309	; 0x135
   1502a:	f013 bba4 	b.w	28776 <assert_post_action>
   1502e:	bf00      	nop
   15030:	200036f6 	.word	0x200036f6
   15034:	e000ed00 	.word	0xe000ed00
   15038:	0002de5a 	.word	0x0002de5a
   1503c:	0002d509 	.word	0x0002d509

00015040 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15040:	4922      	ldr	r1, [pc, #136]	; (150cc <z_arm_mpu_init+0x8c>)
{
   15042:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   15044:	680c      	ldr	r4, [r1, #0]
   15046:	2c08      	cmp	r4, #8
   15048:	d90d      	bls.n	15066 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1504a:	4921      	ldr	r1, [pc, #132]	; (150d0 <z_arm_mpu_init+0x90>)
   1504c:	4821      	ldr	r0, [pc, #132]	; (150d4 <z_arm_mpu_init+0x94>)
   1504e:	f240 124d 	movw	r2, #333	; 0x14d
   15052:	f013 fb97 	bl	28784 <assert_print>
   15056:	481e      	ldr	r0, [pc, #120]	; (150d0 <z_arm_mpu_init+0x90>)
   15058:	f240 114d 	movw	r1, #333	; 0x14d
   1505c:	f013 fb8b 	bl	28776 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   15060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   15064:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   15066:	f7ff ff99 	bl	14f9c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1506a:	6848      	ldr	r0, [r1, #4]
   1506c:	491a      	ldr	r1, [pc, #104]	; (150d8 <z_arm_mpu_init+0x98>)
   1506e:	2200      	movs	r2, #0
   15070:	4294      	cmp	r4, r2
   15072:	f100 000c 	add.w	r0, r0, #12
   15076:	d116      	bne.n	150a6 <z_arm_mpu_init+0x66>
	static_regions_num = mpu_config.num_regions;
   15078:	4b18      	ldr	r3, [pc, #96]	; (150dc <z_arm_mpu_init+0x9c>)
   1507a:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1507c:	f7ff ff82 	bl	14f84 <arm_core_mpu_enable>
	__ASSERT(
   15080:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   15084:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15088:	2b08      	cmp	r3, #8
   1508a:	d00a      	beq.n	150a2 <z_arm_mpu_init+0x62>
   1508c:	4910      	ldr	r1, [pc, #64]	; (150d0 <z_arm_mpu_init+0x90>)
   1508e:	4811      	ldr	r0, [pc, #68]	; (150d4 <z_arm_mpu_init+0x94>)
   15090:	f240 12ad 	movw	r2, #429	; 0x1ad
   15094:	f013 fb76 	bl	28784 <assert_print>
   15098:	480d      	ldr	r0, [pc, #52]	; (150d0 <z_arm_mpu_init+0x90>)
   1509a:	f240 11ad 	movw	r1, #429	; 0x1ad
   1509e:	f013 fb6a 	bl	28776 <assert_post_action>
	return 0;
   150a2:	2000      	movs	r0, #0
   150a4:	e7de      	b.n	15064 <z_arm_mpu_init+0x24>
   150a6:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   150aa:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   150ae:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   150b2:	4313      	orrs	r3, r2
   150b4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   150b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   150bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
   150c0:	f043 0301 	orr.w	r3, r3, #1
   150c4:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   150c8:	3201      	adds	r2, #1
   150ca:	e7d1      	b.n	15070 <z_arm_mpu_init+0x30>
   150cc:	0002c994 	.word	0x0002c994
   150d0:	0002de5a 	.word	0x0002de5a
   150d4:	0002d509 	.word	0x0002d509
   150d8:	e000ed00 	.word	0xe000ed00
   150dc:	200036f6 	.word	0x200036f6

000150e0 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   150e0:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   150e2:	4b09      	ldr	r3, [pc, #36]	; (15108 <malloc_prepare+0x28>)
   150e4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   150e8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   150ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   150f0:	d208      	bcs.n	15104 <malloc_prepare+0x24>
   150f2:	4906      	ldr	r1, [pc, #24]	; (1510c <malloc_prepare+0x2c>)
   150f4:	4806      	ldr	r0, [pc, #24]	; (15110 <malloc_prepare+0x30>)
   150f6:	2281      	movs	r2, #129	; 0x81
   150f8:	f013 fb44 	bl	28784 <assert_print>
   150fc:	4803      	ldr	r0, [pc, #12]	; (1510c <malloc_prepare+0x2c>)
   150fe:	2181      	movs	r1, #129	; 0x81
   15100:	f013 fb39 	bl	28776 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   15104:	2000      	movs	r0, #0
   15106:	bd08      	pop	{r3, pc}
   15108:	20008409 	.word	0x20008409
   1510c:	0002de91 	.word	0x0002de91
   15110:	0002d509 	.word	0x0002d509

00015114 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   15114:	4b01      	ldr	r3, [pc, #4]	; (1511c <__stdout_hook_install+0x8>)
   15116:	6018      	str	r0, [r3, #0]
}
   15118:	4770      	bx	lr
   1511a:	bf00      	nop
   1511c:	200005f8 	.word	0x200005f8

00015120 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   15120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15122:	4f0a      	ldr	r7, [pc, #40]	; (1514c <z_impl_zephyr_write_stdout+0x2c>)
   15124:	460d      	mov	r5, r1
   15126:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   15128:	f1c0 0401 	rsb	r4, r0, #1
   1512c:	19a3      	adds	r3, r4, r6
   1512e:	429d      	cmp	r5, r3
   15130:	dc01      	bgt.n	15136 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   15132:	4628      	mov	r0, r5
   15134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   15136:	7873      	ldrb	r3, [r6, #1]
   15138:	2b0a      	cmp	r3, #10
   1513a:	d102      	bne.n	15142 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   1513c:	683b      	ldr	r3, [r7, #0]
   1513e:	200d      	movs	r0, #13
   15140:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   15142:	683b      	ldr	r3, [r7, #0]
   15144:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   15148:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1514a:	e7ef      	b.n	1512c <z_impl_zephyr_write_stdout+0xc>
   1514c:	200005f8 	.word	0x200005f8

00015150 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   15150:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   15152:	211d      	movs	r1, #29
   15154:	4804      	ldr	r0, [pc, #16]	; (15168 <__chk_fail+0x18>)
   15156:	f7ff ffe3 	bl	15120 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   1515a:	4040      	eors	r0, r0
   1515c:	f380 8811 	msr	BASEPRI, r0
   15160:	f04f 0003 	mov.w	r0, #3
   15164:	df02      	svc	2
	CODE_UNREACHABLE;
   15166:	bf00      	nop
   15168:	0002dec1 	.word	0x0002dec1

0001516c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   1516c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1516e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15172:	f3ef 8011 	mrs	r0, BASEPRI
   15176:	f383 8812 	msr	BASEPRI_MAX, r3
   1517a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1517e:	4a11      	ldr	r2, [pc, #68]	; (151c4 <nordicsemi_nrf52_init+0x58>)
   15180:	2301      	movs	r3, #1
   15182:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1518a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1518e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   15192:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   15196:	2c08      	cmp	r4, #8
   15198:	d108      	bne.n	151ac <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1519a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   1519e:	2905      	cmp	r1, #5
   151a0:	d804      	bhi.n	151ac <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   151a2:	4c09      	ldr	r4, [pc, #36]	; (151c8 <nordicsemi_nrf52_init+0x5c>)
   151a4:	5c61      	ldrb	r1, [r4, r1]
   151a6:	b109      	cbz	r1, 151ac <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   151a8:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   151ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   151b0:	2201      	movs	r2, #1
   151b2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   151b6:	f380 8811 	msr	BASEPRI, r0
   151ba:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   151be:	2000      	movs	r0, #0
   151c0:	bd10      	pop	{r4, pc}
   151c2:	bf00      	nop
   151c4:	4001e000 	.word	0x4001e000
   151c8:	0002def2 	.word	0x0002def2

000151cc <sys_arch_reboot>:
    *p_gpregret = val;
   151cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   151d0:	b2c0      	uxtb	r0, r0
   151d2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   151d6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   151da:	4905      	ldr	r1, [pc, #20]	; (151f0 <sys_arch_reboot+0x24>)
   151dc:	4b05      	ldr	r3, [pc, #20]	; (151f4 <sys_arch_reboot+0x28>)
   151de:	68ca      	ldr	r2, [r1, #12]
   151e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   151e4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   151e6:	60cb      	str	r3, [r1, #12]
   151e8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   151ec:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   151ee:	e7fd      	b.n	151ec <sys_arch_reboot+0x20>
   151f0:	e000ed00 	.word	0xe000ed00
   151f4:	05fa0004 	.word	0x05fa0004

000151f8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   151f8:	b120      	cbz	r0, 15204 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   151fa:	4b03      	ldr	r3, [pc, #12]	; (15208 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   151fc:	0180      	lsls	r0, r0, #6
   151fe:	f043 0301 	orr.w	r3, r3, #1
   15202:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   15204:	4770      	bx	lr
   15206:	bf00      	nop
   15208:	0002c870 	.word	0x0002c870

0001520c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   1520c:	4b0e      	ldr	r3, [pc, #56]	; (15248 <bt_hex_real+0x3c>)
   1520e:	2940      	cmp	r1, #64	; 0x40
{
   15210:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   15212:	bf28      	it	cs
   15214:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   15216:	4c0d      	ldr	r4, [pc, #52]	; (1524c <bt_hex_real+0x40>)
   15218:	1846      	adds	r6, r0, r1
   1521a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   1521c:	42b0      	cmp	r0, r6
   1521e:	f103 0302 	add.w	r3, r3, #2
   15222:	d104      	bne.n	1522e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   15224:	2300      	movs	r3, #0
   15226:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   1522a:	4807      	ldr	r0, [pc, #28]	; (15248 <bt_hex_real+0x3c>)
   1522c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   1522e:	7802      	ldrb	r2, [r0, #0]
   15230:	0912      	lsrs	r2, r2, #4
   15232:	5ca2      	ldrb	r2, [r4, r2]
   15234:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15238:	f810 2b01 	ldrb.w	r2, [r0], #1
   1523c:	f002 020f 	and.w	r2, r2, #15
   15240:	5ca2      	ldrb	r2, [r4, r2]
   15242:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   15246:	e7e9      	b.n	1521c <bt_hex_real+0x10>
   15248:	20003715 	.word	0x20003715
   1524c:	0002def8 	.word	0x0002def8

00015250 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   15250:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   15252:	7803      	ldrb	r3, [r0, #0]
   15254:	b08b      	sub	sp, #44	; 0x2c
   15256:	4604      	mov	r4, r0
   15258:	ad07      	add	r5, sp, #28
   1525a:	2b03      	cmp	r3, #3
   1525c:	d821      	bhi.n	152a2 <bt_addr_le_str_real+0x52>
   1525e:	e8df f003 	tbb	[pc, r3]
   15262:	1a02      	.short	0x1a02
   15264:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   15266:	4912      	ldr	r1, [pc, #72]	; (152b0 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   15268:	4628      	mov	r0, r5
   1526a:	f016 ffbc 	bl	2c1e6 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1526e:	7863      	ldrb	r3, [r4, #1]
   15270:	9304      	str	r3, [sp, #16]
   15272:	78a3      	ldrb	r3, [r4, #2]
   15274:	9303      	str	r3, [sp, #12]
   15276:	78e3      	ldrb	r3, [r4, #3]
   15278:	9302      	str	r3, [sp, #8]
   1527a:	7923      	ldrb	r3, [r4, #4]
   1527c:	9301      	str	r3, [sp, #4]
   1527e:	7963      	ldrb	r3, [r4, #5]
   15280:	9300      	str	r3, [sp, #0]
   15282:	4a0c      	ldr	r2, [pc, #48]	; (152b4 <bt_addr_le_str_real+0x64>)
   15284:	79a3      	ldrb	r3, [r4, #6]
   15286:	9505      	str	r5, [sp, #20]
   15288:	211e      	movs	r1, #30
   1528a:	480b      	ldr	r0, [pc, #44]	; (152b8 <bt_addr_le_str_real+0x68>)
   1528c:	f013 f8dc 	bl	28448 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15290:	4809      	ldr	r0, [pc, #36]	; (152b8 <bt_addr_le_str_real+0x68>)
   15292:	b00b      	add	sp, #44	; 0x2c
   15294:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   15296:	4909      	ldr	r1, [pc, #36]	; (152bc <bt_addr_le_str_real+0x6c>)
   15298:	e7e6      	b.n	15268 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   1529a:	4909      	ldr	r1, [pc, #36]	; (152c0 <bt_addr_le_str_real+0x70>)
   1529c:	e7e4      	b.n	15268 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   1529e:	4909      	ldr	r1, [pc, #36]	; (152c4 <bt_addr_le_str_real+0x74>)
   152a0:	e7e2      	b.n	15268 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   152a2:	4a09      	ldr	r2, [pc, #36]	; (152c8 <bt_addr_le_str_real+0x78>)
   152a4:	210a      	movs	r1, #10
   152a6:	4628      	mov	r0, r5
   152a8:	f013 f8ce 	bl	28448 <snprintk>
		break;
   152ac:	e7df      	b.n	1526e <bt_addr_le_str_real+0x1e>
   152ae:	bf00      	nop
   152b0:	0002d293 	.word	0x0002d293
   152b4:	0002d2bc 	.word	0x0002d2bc
   152b8:	200036f7 	.word	0x200036f7
   152bc:	0002d29a 	.word	0x0002d29a
   152c0:	0002d2a1 	.word	0x0002d2a1
   152c4:	0002d2ab 	.word	0x0002d2ab
   152c8:	0002d2b5 	.word	0x0002d2b5

000152cc <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   152cc:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
   152ce:	480a      	ldr	r0, [pc, #40]	; (152f8 <save_id+0x2c>)
   152d0:	2149      	movs	r1, #73	; 0x49
   152d2:	f013 fa65 	bl	287a0 <z_log_minimal_printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   152d6:	4909      	ldr	r1, [pc, #36]	; (152fc <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   152d8:	4809      	ldr	r0, [pc, #36]	; (15300 <save_id+0x34>)
   152da:	79ca      	ldrb	r2, [r1, #7]
   152dc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   152e0:	f7fe fcb2 	bl	13c48 <settings_save_one>
	if (err) {
   152e4:	4602      	mov	r2, r0
   152e6:	b128      	cbz	r0, 152f4 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   152e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   152ec:	4805      	ldr	r0, [pc, #20]	; (15304 <save_id+0x38>)
   152ee:	2145      	movs	r1, #69	; 0x45
   152f0:	f013 ba56 	b.w	287a0 <z_log_minimal_printk>
}
   152f4:	bd08      	pop	{r3, pc}
   152f6:	bf00      	nop
   152f8:	0002df10 	.word	0x0002df10
   152fc:	20000350 	.word	0x20000350
   15300:	0002df1f 	.word	0x0002df1f
   15304:	0002df25 	.word	0x0002df25

00015308 <set>:
{
   15308:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1530c:	4e22      	ldr	r6, [pc, #136]	; (15398 <set+0x90>)
   1530e:	f3bf 8f5b 	dmb	ish
   15312:	6834      	ldr	r4, [r6, #0]
   15314:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15318:	f014 0401 	ands.w	r4, r4, #1
{
   1531c:	4605      	mov	r5, r0
   1531e:	4617      	mov	r7, r2
   15320:	4698      	mov	r8, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15322:	d01d      	beq.n	15360 <set+0x58>
	if (!name) {
   15324:	b930      	cbnz	r0, 15334 <set+0x2c>
		BT_ERR("Insufficient number of arguments");
   15326:	481d      	ldr	r0, [pc, #116]	; (1539c <set+0x94>)
   15328:	2145      	movs	r1, #69	; 0x45
   1532a:	f013 fa39 	bl	287a0 <z_log_minimal_printk>
	return -ENOENT;
   1532e:	f06f 0401 	mvn.w	r4, #1
   15332:	e015      	b.n	15360 <set+0x58>
	len = settings_name_next(name, &next);
   15334:	a901      	add	r1, sp, #4
   15336:	f013 fcd4 	bl	28ce2 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   1533a:	4919      	ldr	r1, [pc, #100]	; (153a0 <set+0x98>)
	len = settings_name_next(name, &next);
   1533c:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   1533e:	4628      	mov	r0, r5
   15340:	f016 ff59 	bl	2c1f6 <strncmp>
   15344:	4604      	mov	r4, r0
   15346:	2800      	cmp	r0, #0
   15348:	d1f1      	bne.n	1532e <set+0x26>
   1534a:	f3bf 8f5b 	dmb	ish
   1534e:	6833      	ldr	r3, [r6, #0]
   15350:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   15354:	071b      	lsls	r3, r3, #28
   15356:	d507      	bpl.n	15368 <set+0x60>
			BT_WARN("Ignoring identities stored in flash");
   15358:	4812      	ldr	r0, [pc, #72]	; (153a4 <set+0x9c>)
   1535a:	2157      	movs	r1, #87	; 0x57
   1535c:	f013 fa20 	bl	287a0 <z_log_minimal_printk>
}
   15360:	4620      	mov	r0, r4
   15362:	b002      	add	sp, #8
   15364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   15368:	f1a6 05cc 	sub.w	r5, r6, #204	; 0xcc
   1536c:	2207      	movs	r2, #7
   1536e:	4629      	mov	r1, r5
   15370:	4640      	mov	r0, r8
   15372:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   15374:	2806      	cmp	r0, #6
   15376:	d809      	bhi.n	1538c <set+0x84>
				BT_ERR("Invalid length ID address in storage");
   15378:	480b      	ldr	r0, [pc, #44]	; (153a8 <set+0xa0>)
   1537a:	2145      	movs	r1, #69	; 0x45
   1537c:	f013 fa10 	bl	287a0 <z_log_minimal_printk>
			(void)memset(bt_dev.id_addr, 0,
   15380:	f846 4ccc 	str.w	r4, [r6, #-204]
			bt_dev.id_count = 0U;
   15384:	71ec      	strb	r4, [r5, #7]
			(void)memset(bt_dev.id_addr, 0,
   15386:	f8c5 4003 	str.w	r4, [r5, #3]
			bt_dev.id_count = 0U;
   1538a:	e7e9      	b.n	15360 <set+0x58>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   1538c:	2307      	movs	r3, #7
   1538e:	fbb0 f0f3 	udiv	r0, r0, r3
   15392:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   15394:	e7e4      	b.n	15360 <set+0x58>
   15396:	bf00      	nop
   15398:	2000041c 	.word	0x2000041c
   1539c:	0002df45 	.word	0x0002df45
   153a0:	0002d2a8 	.word	0x0002d2a8
   153a4:	0002df6b 	.word	0x0002df6b
   153a8:	0002df94 	.word	0x0002df94

000153ac <bt_settings_encode_key>:
{
   153ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   153b0:	b088      	sub	sp, #32
		snprintk(path, path_size,
   153b2:	799c      	ldrb	r4, [r3, #6]
{
   153b4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   153b8:	795d      	ldrb	r5, [r3, #5]
   153ba:	791e      	ldrb	r6, [r3, #4]
   153bc:	78df      	ldrb	r7, [r3, #3]
   153be:	f893 c002 	ldrb.w	ip, [r3, #2]
   153c2:	f893 e001 	ldrb.w	lr, [r3, #1]
   153c6:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   153c8:	f1b8 0f00 	cmp.w	r8, #0
   153cc:	d00e      	beq.n	153ec <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   153ce:	e9cd 3806 	strd	r3, r8, [sp, #24]
   153d2:	e9cd ce04 	strd	ip, lr, [sp, #16]
   153d6:	4613      	mov	r3, r2
   153d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   153dc:	e9cd 4500 	strd	r4, r5, [sp]
   153e0:	4a08      	ldr	r2, [pc, #32]	; (15404 <bt_settings_encode_key+0x58>)
   153e2:	f013 f831 	bl	28448 <snprintk>
}
   153e6:	b008      	add	sp, #32
   153e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   153ec:	e9cd e305 	strd	lr, r3, [sp, #20]
   153f0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   153f4:	4613      	mov	r3, r2
   153f6:	e9cd 5601 	strd	r5, r6, [sp, #4]
   153fa:	4a03      	ldr	r2, [pc, #12]	; (15408 <bt_settings_encode_key+0x5c>)
   153fc:	9400      	str	r4, [sp, #0]
   153fe:	f013 f823 	bl	28448 <snprintk>
}
   15402:	e7f0      	b.n	153e6 <bt_settings_encode_key+0x3a>
   15404:	0002dfbe 	.word	0x0002dfbe
   15408:	0002dfe2 	.word	0x0002dfe2

0001540c <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   1540c:	4801      	ldr	r0, [pc, #4]	; (15414 <bt_settings_save_id+0x8>)
   1540e:	f00d bc71 	b.w	22cf4 <k_work_submit>
   15412:	bf00      	nop
   15414:	200005fc 	.word	0x200005fc

00015418 <commit>:
}

static int commit(void)
{
   15418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1541a:	4d1e      	ldr	r5, [pc, #120]	; (15494 <commit+0x7c>)
   1541c:	f3bf 8f5b 	dmb	ish
   15420:	682b      	ldr	r3, [r5, #0]
   15422:	f3bf 8f5b 	dmb	ish
	int err;

	BT_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15426:	f013 0f01 	tst.w	r3, #1
   1542a:	462e      	mov	r6, r5
   1542c:	d101      	bne.n	15432 <commit+0x1a>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
   1542e:	2400      	movs	r4, #0
   15430:	e00c      	b.n	1544c <commit+0x34>
	if (!bt_dev.id_count) {
   15432:	f815 3cc5 	ldrb.w	r3, [r5, #-197]
   15436:	f1a5 07cc 	sub.w	r7, r5, #204	; 0xcc
   1543a:	b983      	cbnz	r3, 1545e <commit+0x46>
		err = bt_setup_public_id_addr();
   1543c:	f001 fc54 	bl	16ce8 <bt_setup_public_id_addr>
		if (err) {
   15440:	4604      	mov	r4, r0
   15442:	b128      	cbz	r0, 15450 <commit+0x38>
			BT_ERR("Unable to setup an identity address");
   15444:	4814      	ldr	r0, [pc, #80]	; (15498 <commit+0x80>)
   15446:	2145      	movs	r1, #69	; 0x45
   15448:	f013 f9aa 	bl	287a0 <z_log_minimal_printk>
}
   1544c:	4620      	mov	r0, r4
   1544e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_dev.id_count) {
   15450:	79fb      	ldrb	r3, [r7, #7]
   15452:	b923      	cbnz	r3, 1545e <commit+0x46>
		err = bt_setup_random_id_addr();
   15454:	f001 fc9e 	bl	16d94 <bt_setup_random_id_addr>
		if (err) {
   15458:	4604      	mov	r4, r0
   1545a:	2800      	cmp	r0, #0
   1545c:	d1f2      	bne.n	15444 <commit+0x2c>
   1545e:	f3bf 8f5b 	dmb	ish
   15462:	682b      	ldr	r3, [r5, #0]
   15464:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15468:	075a      	lsls	r2, r3, #29
   1546a:	d401      	bmi.n	15470 <commit+0x58>
		bt_finalize_init();
   1546c:	f001 f92a 	bl	166c4 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15470:	f3bf 8f5b 	dmb	ish
   15474:	e856 3f00 	ldrex	r3, [r6]
   15478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   1547c:	e846 2100 	strex	r1, r2, [r6]
   15480:	2900      	cmp	r1, #0
   15482:	d1f7      	bne.n	15474 <commit+0x5c>
   15484:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   15488:	03db      	lsls	r3, r3, #15
   1548a:	d5d0      	bpl.n	1542e <commit+0x16>
		bt_settings_save_id();
   1548c:	f7ff ffbe 	bl	1540c <bt_settings_save_id>
   15490:	e7cd      	b.n	1542e <commit+0x16>
   15492:	bf00      	nop
   15494:	2000041c 	.word	0x2000041c
   15498:	0002e003 	.word	0x0002e003

0001549c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   1549c:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   1549e:	f7fe fd43 	bl	13f28 <settings_subsys_init>
	if (err) {
   154a2:	4604      	mov	r4, r0
   154a4:	b120      	cbz	r0, 154b0 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
   154a6:	4602      	mov	r2, r0
   154a8:	2145      	movs	r1, #69	; 0x45
   154aa:	4802      	ldr	r0, [pc, #8]	; (154b4 <bt_settings_init+0x18>)
   154ac:	f013 f978 	bl	287a0 <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   154b0:	4620      	mov	r0, r4
   154b2:	bd10      	pop	{r4, pc}
   154b4:	0002e02c 	.word	0x0002e02c

000154b8 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   154b8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   154ba:	4d0a      	ldr	r5, [pc, #40]	; (154e4 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   154bc:	4b0a      	ldr	r3, [pc, #40]	; (154e8 <long_wq_init+0x30>)
{
   154be:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   154c0:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   154c2:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   154c4:	9302      	str	r3, [sp, #8]
   154c6:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   154c8:	f00d fc1a 	bl	22d00 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   154cc:	ab02      	add	r3, sp, #8
   154ce:	9300      	str	r3, [sp, #0]
   154d0:	4628      	mov	r0, r5
   154d2:	4906      	ldr	r1, [pc, #24]	; (154ec <long_wq_init+0x34>)
   154d4:	230a      	movs	r3, #10
   154d6:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   154da:	f00d fc29 	bl	22d30 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   154de:	4620      	mov	r0, r4
   154e0:	b005      	add	sp, #20
   154e2:	bd30      	pop	{r4, r5, pc}
   154e4:	20001910 	.word	0x20001910
   154e8:	0002e065 	.word	0x0002e065
   154ec:	20004400 	.word	0x20004400

000154f0 <bt_long_wq_schedule>:
{
   154f0:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   154f2:	4801      	ldr	r0, [pc, #4]	; (154f8 <bt_long_wq_schedule+0x8>)
   154f4:	f00d bcb0 	b.w	22e58 <k_work_schedule_for_queue>
   154f8:	20001910 	.word	0x20001910

000154fc <bt_long_wq_reschedule>:
{
   154fc:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   154fe:	4801      	ldr	r0, [pc, #4]	; (15504 <bt_long_wq_reschedule+0x8>)
   15500:	f00d bd14 	b.w	22f2c <k_work_reschedule_for_queue>
   15504:	20001910 	.word	0x20001910

00015508 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   15508:	7803      	ldrb	r3, [r0, #0]
   1550a:	2b01      	cmp	r3, #1
{
   1550c:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   1550e:	d013      	beq.n	15538 <uuid_to_uuid128+0x30>
   15510:	2b02      	cmp	r3, #2
   15512:	d027      	beq.n	15564 <uuid_to_uuid128+0x5c>
   15514:	b97b      	cbnz	r3, 15536 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15516:	4b19      	ldr	r3, [pc, #100]	; (1557c <uuid_to_uuid128+0x74>)
   15518:	460a      	mov	r2, r1
   1551a:	f103 0410 	add.w	r4, r3, #16
   1551e:	f853 5b04 	ldr.w	r5, [r3], #4
   15522:	f842 5b04 	str.w	r5, [r2], #4
   15526:	42a3      	cmp	r3, r4
   15528:	d1f9      	bne.n	1551e <uuid_to_uuid128+0x16>
   1552a:	781b      	ldrb	r3, [r3, #0]
   1552c:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1552e:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   15530:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   15532:	0a1b      	lsrs	r3, r3, #8
   15534:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15536:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   15538:	4b10      	ldr	r3, [pc, #64]	; (1557c <uuid_to_uuid128+0x74>)
   1553a:	460a      	mov	r2, r1
   1553c:	f103 0410 	add.w	r4, r3, #16
   15540:	f853 5b04 	ldr.w	r5, [r3], #4
   15544:	f842 5b04 	str.w	r5, [r2], #4
   15548:	42a3      	cmp	r3, r4
   1554a:	d1f9      	bne.n	15540 <uuid_to_uuid128+0x38>
   1554c:	781b      	ldrb	r3, [r3, #0]
   1554e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15550:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
   15552:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   15554:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   15558:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1555a:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   1555c:	0a1b      	lsrs	r3, r3, #8
   1555e:	738a      	strb	r2, [r1, #14]
   15560:	740b      	strb	r3, [r1, #16]
}
   15562:	e7e8      	b.n	15536 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15564:	f100 0310 	add.w	r3, r0, #16
   15568:	f850 2b04 	ldr.w	r2, [r0], #4
   1556c:	f841 2b04 	str.w	r2, [r1], #4
   15570:	4298      	cmp	r0, r3
   15572:	d1f9      	bne.n	15568 <uuid_to_uuid128+0x60>
   15574:	7803      	ldrb	r3, [r0, #0]
   15576:	700b      	strb	r3, [r1, #0]
   15578:	e7dd      	b.n	15536 <uuid_to_uuid128+0x2e>
   1557a:	bf00      	nop
   1557c:	0002e06e 	.word	0x0002e06e

00015580 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15580:	b570      	push	{r4, r5, r6, lr}
   15582:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15584:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   15588:	2b01      	cmp	r3, #1
{
   1558a:	4605      	mov	r5, r0
   1558c:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1558e:	d00a      	beq.n	155a6 <bt_buf_get_rx+0x26>
   15590:	2805      	cmp	r0, #5
   15592:	d008      	beq.n	155a6 <bt_buf_get_rx+0x26>
   15594:	490b      	ldr	r1, [pc, #44]	; (155c4 <bt_buf_get_rx+0x44>)
   15596:	480c      	ldr	r0, [pc, #48]	; (155c8 <bt_buf_get_rx+0x48>)
   15598:	2241      	movs	r2, #65	; 0x41
   1559a:	f013 f8f3 	bl	28784 <assert_print>
   1559e:	4809      	ldr	r0, [pc, #36]	; (155c4 <bt_buf_get_rx+0x44>)
   155a0:	2141      	movs	r1, #65	; 0x41
   155a2:	f013 f8e8 	bl	28776 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   155a6:	4623      	mov	r3, r4
   155a8:	4808      	ldr	r0, [pc, #32]	; (155cc <bt_buf_get_rx+0x4c>)
   155aa:	4632      	mov	r2, r6
   155ac:	f015 feec 	bl	2b388 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   155b0:	4604      	mov	r4, r0
   155b2:	b120      	cbz	r0, 155be <bt_buf_get_rx+0x3e>
	net_buf_simple_reserve(&buf->b, reserve);
   155b4:	2100      	movs	r1, #0
   155b6:	3008      	adds	r0, #8
   155b8:	f007 fb5e 	bl	1cc78 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   155bc:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   155be:	4620      	mov	r0, r4
   155c0:	bd70      	pop	{r4, r5, r6, pc}
   155c2:	bf00      	nop
   155c4:	0002e07f 	.word	0x0002e07f
   155c8:	0002d509 	.word	0x0002d509
   155cc:	20000be0 	.word	0x20000be0

000155d0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   155d0:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   155d2:	490b      	ldr	r1, [pc, #44]	; (15600 <bt_buf_get_cmd_complete+0x30>)
{
   155d4:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   155d6:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   155da:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   155dc:	b920      	cbnz	r0, 155e8 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   155de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   155e2:	2001      	movs	r0, #1
   155e4:	f7ff bfcc 	b.w	15580 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   155e8:	f007 fcaa 	bl	1cf40 <net_buf_ref>
   155ec:	2301      	movs	r3, #1
		buf->len = 0U;
   155ee:	2100      	movs	r1, #0
   155f0:	7503      	strb	r3, [r0, #20]
   155f2:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   155f4:	4604      	mov	r4, r0
   155f6:	3008      	adds	r0, #8
   155f8:	f007 fb3e 	bl	1cc78 <net_buf_simple_reserve>
}
   155fc:	4620      	mov	r0, r4
   155fe:	bd10      	pop	{r4, pc}
   15600:	20000350 	.word	0x20000350

00015604 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15604:	b570      	push	{r4, r5, r6, lr}
   15606:	4604      	mov	r4, r0
	switch (evt) {
   15608:	2c0f      	cmp	r4, #15
{
   1560a:	460d      	mov	r5, r1
   1560c:	4610      	mov	r0, r2
   1560e:	4619      	mov	r1, r3
	switch (evt) {
   15610:	d805      	bhi.n	1561e <bt_buf_get_evt+0x1a>
   15612:	2c0d      	cmp	r4, #13
   15614:	d912      	bls.n	1563c <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1561a:	f7ff bfd9 	b.w	155d0 <bt_buf_get_cmd_complete>
	switch (evt) {
   1561e:	2c13      	cmp	r4, #19
   15620:	d10c      	bne.n	1563c <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   15622:	480b      	ldr	r0, [pc, #44]	; (15650 <bt_buf_get_evt+0x4c>)
   15624:	f015 feb0 	bl	2b388 <net_buf_alloc_fixed>
			if (buf) {
   15628:	4604      	mov	r4, r0
   1562a:	b128      	cbz	r0, 15638 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   1562c:	2100      	movs	r1, #0
   1562e:	3008      	adds	r0, #8
   15630:	f007 fb22 	bl	1cc78 <net_buf_simple_reserve>
   15634:	2301      	movs	r3, #1
   15636:	7523      	strb	r3, [r4, #20]
}
   15638:	4620      	mov	r0, r4
   1563a:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   1563c:	4602      	mov	r2, r0
   1563e:	460b      	mov	r3, r1
		if (discardable) {
   15640:	b10d      	cbz	r5, 15646 <bt_buf_get_evt+0x42>
   15642:	4804      	ldr	r0, [pc, #16]	; (15654 <bt_buf_get_evt+0x50>)
   15644:	e7ee      	b.n	15624 <bt_buf_get_evt+0x20>
}
   15646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1564a:	2001      	movs	r0, #1
   1564c:	f7ff bf98 	b.w	15580 <bt_buf_get_rx>
   15650:	20000c14 	.word	0x20000c14
   15654:	20000b44 	.word	0x20000b44

00015658 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15658:	6883      	ldr	r3, [r0, #8]
   1565a:	4802      	ldr	r0, [pc, #8]	; (15664 <hci_data_buf_overflow+0xc>)
   1565c:	781a      	ldrb	r2, [r3, #0]
   1565e:	2157      	movs	r1, #87	; 0x57
   15660:	f013 b89e 	b.w	287a0 <z_log_minimal_printk>
   15664:	0002e0b5 	.word	0x0002e0b5

00015668 <hci_disconn_complete_prio>:
{
   15668:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1566a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1566c:	781a      	ldrb	r2, [r3, #0]
   1566e:	b972      	cbnz	r2, 1568e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15670:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15674:	4620      	mov	r0, r4
   15676:	f002 fae9 	bl	17c4c <bt_conn_lookup_handle>
	if (!conn) {
   1567a:	4605      	mov	r5, r0
   1567c:	b940      	cbnz	r0, 15690 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1567e:	4b08      	ldr	r3, [pc, #32]	; (156a0 <hci_disconn_complete_prio+0x38>)
   15680:	881a      	ldrh	r2, [r3, #0]
   15682:	b922      	cbnz	r2, 1568e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   15684:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   15688:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1568c:	8018      	strh	r0, [r3, #0]
}
   1568e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15690:	2101      	movs	r1, #1
   15692:	f002 fae3 	bl	17c5c <bt_conn_set_state>
	bt_conn_unref(conn);
   15696:	4628      	mov	r0, r5
}
   15698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1569c:	f002 baa6 	b.w	17bec <bt_conn_unref>
   156a0:	200036d0 	.word	0x200036d0

000156a4 <hci_disconn_complete>:
{
   156a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   156a6:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   156a8:	782e      	ldrb	r6, [r5, #0]
   156aa:	b9be      	cbnz	r6, 156dc <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   156ac:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   156b0:	4638      	mov	r0, r7
   156b2:	f002 facb 	bl	17c4c <bt_conn_lookup_handle>
	if (!conn) {
   156b6:	4604      	mov	r4, r0
   156b8:	b930      	cbnz	r0, 156c8 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
   156ba:	463a      	mov	r2, r7
   156bc:	4808      	ldr	r0, [pc, #32]	; (156e0 <hci_disconn_complete+0x3c>)
}
   156be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   156c2:	2145      	movs	r1, #69	; 0x45
   156c4:	f013 b86c 	b.w	287a0 <z_log_minimal_printk>
	conn->err = evt->reason;
   156c8:	78eb      	ldrb	r3, [r5, #3]
   156ca:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   156cc:	4631      	mov	r1, r6
   156ce:	f002 fac5 	bl	17c5c <bt_conn_set_state>
		bt_conn_unref(conn);
   156d2:	4620      	mov	r0, r4
}
   156d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   156d8:	f002 ba88 	b.w	17bec <bt_conn_unref>
}
   156dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   156de:	bf00      	nop
   156e0:	0002e0e2 	.word	0x0002e0e2

000156e4 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   156e4:	6883      	ldr	r3, [r0, #8]
{
   156e6:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   156e8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   156ec:	4620      	mov	r0, r4
   156ee:	f002 faad 	bl	17c4c <bt_conn_lookup_handle>
	if (!conn) {
   156f2:	b930      	cbnz	r0, 15702 <le_phy_update_complete+0x1e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   156f4:	4622      	mov	r2, r4
   156f6:	4805      	ldr	r0, [pc, #20]	; (1570c <le_phy_update_complete+0x28>)
}
   156f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   156fc:	2145      	movs	r1, #69	; 0x45
   156fe:	f013 b84f 	b.w	287a0 <z_log_minimal_printk>
}
   15702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   15706:	f002 ba71 	b.w	17bec <bt_conn_unref>
   1570a:	bf00      	nop
   1570c:	0002e10d 	.word	0x0002e10d

00015710 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15710:	6883      	ldr	r3, [r0, #8]
{
   15712:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15714:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   15716:	4620      	mov	r0, r4
   15718:	f002 fa98 	bl	17c4c <bt_conn_lookup_handle>
	if (!conn) {
   1571c:	b930      	cbnz	r0, 1572c <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1571e:	4622      	mov	r2, r4
   15720:	4804      	ldr	r0, [pc, #16]	; (15734 <le_data_len_change+0x24>)
}
   15722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15726:	2145      	movs	r1, #69	; 0x45
   15728:	f013 b83a 	b.w	287a0 <z_log_minimal_printk>
}
   1572c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   15730:	f002 ba5c 	b.w	17bec <bt_conn_unref>
   15734:	0002e10d 	.word	0x0002e10d

00015738 <hci_hardware_error>:
{
   15738:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1573a:	2101      	movs	r1, #1
   1573c:	3008      	adds	r0, #8
   1573e:	f007 fcb3 	bl	1d0a8 <net_buf_simple_pull_mem>
}
   15742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   15746:	7802      	ldrb	r2, [r0, #0]
   15748:	4801      	ldr	r0, [pc, #4]	; (15750 <hci_hardware_error+0x18>)
   1574a:	2145      	movs	r1, #69	; 0x45
   1574c:	f013 b828 	b.w	287a0 <z_log_minimal_printk>
   15750:	0002e136 	.word	0x0002e136

00015754 <rx_queue_put>:
{
   15754:	4601      	mov	r1, r0
   15756:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   15758:	4807      	ldr	r0, [pc, #28]	; (15778 <rx_queue_put+0x24>)
   1575a:	f007 fab1 	bl	1ccc0 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1575e:	4907      	ldr	r1, [pc, #28]	; (1577c <rx_queue_put+0x28>)
   15760:	4807      	ldr	r0, [pc, #28]	; (15780 <rx_queue_put+0x2c>)
   15762:	f016 fba3 	bl	2beac <k_work_submit_to_queue>
	if (err < 0) {
   15766:	1e02      	subs	r2, r0, #0
   15768:	da05      	bge.n	15776 <rx_queue_put+0x22>
}
   1576a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Could not submit rx_work: %d", err);
   1576e:	4805      	ldr	r0, [pc, #20]	; (15784 <rx_queue_put+0x30>)
   15770:	2145      	movs	r1, #69	; 0x45
   15772:	f013 b815 	b.w	287a0 <z_log_minimal_printk>
}
   15776:	bd08      	pop	{r3, pc}
   15778:	2000048c 	.word	0x2000048c
   1577c:	20000648 	.word	0x20000648
   15780:	200019b0 	.word	0x200019b0
   15784:	0002e15d 	.word	0x0002e15d

00015788 <le_conn_update_complete>:
{
   15788:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1578a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1578c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15790:	4630      	mov	r0, r6
   15792:	f002 fa5b 	bl	17c4c <bt_conn_lookup_handle>
	if (!conn) {
   15796:	4604      	mov	r4, r0
   15798:	b938      	cbnz	r0, 157aa <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1579a:	4822      	ldr	r0, [pc, #136]	; (15824 <le_conn_update_complete+0x9c>)
   1579c:	4632      	mov	r2, r6
   1579e:	2145      	movs	r1, #69	; 0x45
}
   157a0:	b002      	add	sp, #8
   157a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   157a6:	f012 bffb 	b.w	287a0 <z_log_minimal_printk>
	if (!evt->status) {
   157aa:	782b      	ldrb	r3, [r5, #0]
   157ac:	b9cb      	cbnz	r3, 157e2 <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   157ae:	792a      	ldrb	r2, [r5, #4]
   157b0:	78eb      	ldrb	r3, [r5, #3]
   157b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   157b6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   157ba:	79aa      	ldrb	r2, [r5, #6]
   157bc:	796b      	ldrb	r3, [r5, #5]
   157be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   157c2:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   157c6:	79eb      	ldrb	r3, [r5, #7]
   157c8:	7a2a      	ldrb	r2, [r5, #8]
   157ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   157ce:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   157d2:	f002 fb69 	bl	17ea8 <notify_le_param_updated>
	bt_conn_unref(conn);
   157d6:	4620      	mov	r0, r4
}
   157d8:	b002      	add	sp, #8
   157da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   157de:	f002 ba05 	b.w	17bec <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   157e2:	2b1a      	cmp	r3, #26
   157e4:	d1f7      	bne.n	157d6 <le_conn_update_complete+0x4e>
   157e6:	78c3      	ldrb	r3, [r0, #3]
   157e8:	2b01      	cmp	r3, #1
   157ea:	d1f4      	bne.n	157d6 <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   157ec:	f44f 7100 	mov.w	r1, #512	; 0x200
   157f0:	3004      	adds	r0, #4
   157f2:	f013 fe6e 	bl	294d2 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   157f6:	0583      	lsls	r3, r0, #22
   157f8:	d4ed      	bmi.n	157d6 <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
   157fa:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   157fe:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   15802:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   15806:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   1580a:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
   1580e:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   15812:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   15814:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
   15818:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   1581c:	4620      	mov	r0, r4
   1581e:	f002 ff93 	bl	18748 <bt_l2cap_update_conn_param>
   15822:	e7d8      	b.n	157d6 <le_conn_update_complete+0x4e>
   15824:	0002e10d 	.word	0x0002e10d

00015828 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15828:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1582a:	4c0c      	ldr	r4, [pc, #48]	; (1585c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1582c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1582e:	2205      	movs	r2, #5
   15830:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   15834:	f002 fcb0 	bl	18198 <bt_conn_lookup_state_le>
		if (!conn) {
   15838:	b970      	cbnz	r0, 15858 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   1583a:	4b09      	ldr	r3, [pc, #36]	; (15860 <find_pending_connect.part.0+0x38>)
   1583c:	6818      	ldr	r0, [r3, #0]
   1583e:	889a      	ldrh	r2, [r3, #4]
   15840:	9000      	str	r0, [sp, #0]
   15842:	799b      	ldrb	r3, [r3, #6]
   15844:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15848:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   1584c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15850:	2204      	movs	r2, #4
   15852:	4669      	mov	r1, sp
   15854:	f002 fca0 	bl	18198 <bt_conn_lookup_state_le>
}
   15858:	b002      	add	sp, #8
   1585a:	bd10      	pop	{r4, pc}
   1585c:	20000350 	.word	0x20000350
   15860:	0002c817 	.word	0x0002c817

00015864 <handle_event>:
{
   15864:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15866:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1586a:	4605      	mov	r5, r0
   1586c:	4614      	mov	r4, r2
   1586e:	4608      	mov	r0, r1
		if (handler->event != event) {
   15870:	7822      	ldrb	r2, [r4, #0]
   15872:	42aa      	cmp	r2, r5
   15874:	d010      	beq.n	15898 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
   15876:	3408      	adds	r4, #8
   15878:	429c      	cmp	r4, r3
   1587a:	d1f9      	bne.n	15870 <handle_event+0xc>
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1587c:	8984      	ldrh	r4, [r0, #12]
   1587e:	6880      	ldr	r0, [r0, #8]
   15880:	4621      	mov	r1, r4
   15882:	f7ff fcc3 	bl	1520c <bt_hex_real>
   15886:	4623      	mov	r3, r4
   15888:	9000      	str	r0, [sp, #0]
   1588a:	462a      	mov	r2, r5
   1588c:	480b      	ldr	r0, [pc, #44]	; (158bc <handle_event+0x58>)
   1588e:	2157      	movs	r1, #87	; 0x57
   15890:	f012 ff86 	bl	287a0 <z_log_minimal_printk>
}
   15894:	b003      	add	sp, #12
   15896:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
   15898:	8982      	ldrh	r2, [r0, #12]
   1589a:	7863      	ldrb	r3, [r4, #1]
   1589c:	4293      	cmp	r3, r2
   1589e:	d907      	bls.n	158b0 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   158a0:	4807      	ldr	r0, [pc, #28]	; (158c0 <handle_event+0x5c>)
   158a2:	462b      	mov	r3, r5
   158a4:	2145      	movs	r1, #69	; 0x45
}
   158a6:	b003      	add	sp, #12
   158a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   158ac:	f012 bf78 	b.w	287a0 <z_log_minimal_printk>
		handler->handler(buf);
   158b0:	6863      	ldr	r3, [r4, #4]
}
   158b2:	b003      	add	sp, #12
   158b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   158b8:	4718      	bx	r3
   158ba:	bf00      	nop
   158bc:	0002e1a6 	.word	0x0002e1a6
   158c0:	0002e17f 	.word	0x0002e17f

000158c4 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   158c4:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   158c6:	4844      	ldr	r0, [pc, #272]	; (159d8 <rx_work_handler+0x114>)
   158c8:	f007 fa58 	bl	1cd7c <net_buf_slist_get>
	if (!buf) {
   158cc:	4604      	mov	r4, r0
   158ce:	2800      	cmp	r0, #0
   158d0:	f000 8081 	beq.w	159d6 <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   158d4:	7d02      	ldrb	r2, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   158d6:	2a01      	cmp	r2, #1
   158d8:	d04d      	beq.n	15976 <rx_work_handler+0xb2>
   158da:	2a03      	cmp	r2, #3
   158dc:	d178      	bne.n	159d0 <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   158de:	8983      	ldrh	r3, [r0, #12]
   158e0:	2b03      	cmp	r3, #3
   158e2:	d80b      	bhi.n	158fc <rx_work_handler+0x38>
   158e4:	493d      	ldr	r1, [pc, #244]	; (159dc <rx_work_handler+0x118>)
   158e6:	483e      	ldr	r0, [pc, #248]	; (159e0 <rx_work_handler+0x11c>)
   158e8:	f240 12eb 	movw	r2, #491	; 0x1eb
   158ec:	f012 ff4a 	bl	28784 <assert_print>
   158f0:	4040      	eors	r0, r0
   158f2:	f380 8811 	msr	BASEPRI, r0
   158f6:	f04f 0003 	mov.w	r0, #3
   158fa:	df02      	svc	2
   158fc:	2104      	movs	r1, #4
   158fe:	f104 0008 	add.w	r0, r4, #8
   15902:	f007 fbd1 	bl	1d0a8 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15906:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   15908:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1590a:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1590c:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   1590e:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   15910:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   15914:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   15916:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   15918:	d007      	beq.n	1592a <rx_work_handler+0x66>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1591a:	4832      	ldr	r0, [pc, #200]	; (159e4 <rx_work_handler+0x120>)
   1591c:	2145      	movs	r1, #69	; 0x45
   1591e:	f012 ff3f 	bl	287a0 <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   15922:	4620      	mov	r0, r4
   15924:	f007 fac8 	bl	1ceb8 <net_buf_unref>
		break;
   15928:	e014      	b.n	15954 <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1592a:	f002 f98f 	bl	17c4c <bt_conn_lookup_handle>
	if (!conn) {
   1592e:	4605      	mov	r5, r0
   15930:	b928      	cbnz	r0, 1593e <rx_work_handler+0x7a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   15932:	8ae2      	ldrh	r2, [r4, #22]
   15934:	482c      	ldr	r0, [pc, #176]	; (159e8 <rx_work_handler+0x124>)
   15936:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15938:	f012 ff32 	bl	287a0 <z_log_minimal_printk>
   1593c:	e7f1      	b.n	15922 <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
   1593e:	f002 fa65 	bl	17e0c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   15942:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   15944:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   15946:	4621      	mov	r1, r4
   15948:	4628      	mov	r0, r5
   1594a:	f002 f855 	bl	179f8 <bt_conn_recv>
	bt_conn_unref(conn);
   1594e:	4628      	mov	r0, r5
   15950:	f002 f94c 	bl	17bec <bt_conn_unref>
	return list->head;
   15954:	4b25      	ldr	r3, [pc, #148]	; (159ec <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   15956:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   1595a:	2b00      	cmp	r3, #0
   1595c:	d03b      	beq.n	159d6 <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1595e:	4924      	ldr	r1, [pc, #144]	; (159f0 <rx_work_handler+0x12c>)
   15960:	4824      	ldr	r0, [pc, #144]	; (159f4 <rx_work_handler+0x130>)
   15962:	f016 faa3 	bl	2beac <k_work_submit_to_queue>
#endif
		if (err < 0) {
   15966:	1e02      	subs	r2, r0, #0
   15968:	da35      	bge.n	159d6 <rx_work_handler+0x112>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   1596a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Could not submit rx_work: %d", err);
   1596e:	4822      	ldr	r0, [pc, #136]	; (159f8 <rx_work_handler+0x134>)
   15970:	2145      	movs	r1, #69	; 0x45
   15972:	f012 bf15 	b.w	287a0 <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15976:	8983      	ldrh	r3, [r0, #12]
   15978:	2b01      	cmp	r3, #1
   1597a:	d80b      	bhi.n	15994 <rx_work_handler+0xd0>
   1597c:	4917      	ldr	r1, [pc, #92]	; (159dc <rx_work_handler+0x118>)
   1597e:	4818      	ldr	r0, [pc, #96]	; (159e0 <rx_work_handler+0x11c>)
   15980:	f640 1259 	movw	r2, #2393	; 0x959
   15984:	f012 fefe 	bl	28784 <assert_print>
   15988:	4040      	eors	r0, r0
   1598a:	f380 8811 	msr	BASEPRI, r0
   1598e:	f04f 0003 	mov.w	r0, #3
   15992:	df02      	svc	2
   15994:	2102      	movs	r1, #2
   15996:	f104 0008 	add.w	r0, r4, #8
   1599a:	f007 fb85 	bl	1d0a8 <net_buf_simple_pull_mem>
   1599e:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   159a0:	7800      	ldrb	r0, [r0, #0]
   159a2:	f013 fd6b 	bl	2947c <bt_hci_evt_get_flags>
   159a6:	0783      	lsls	r3, r0, #30
   159a8:	d40b      	bmi.n	159c2 <rx_work_handler+0xfe>
   159aa:	490c      	ldr	r1, [pc, #48]	; (159dc <rx_work_handler+0x118>)
   159ac:	480c      	ldr	r0, [pc, #48]	; (159e0 <rx_work_handler+0x11c>)
   159ae:	f640 125d 	movw	r2, #2397	; 0x95d
   159b2:	f012 fee7 	bl	28784 <assert_print>
   159b6:	4040      	eors	r0, r0
   159b8:	f380 8811 	msr	BASEPRI, r0
   159bc:	f04f 0003 	mov.w	r0, #3
   159c0:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   159c2:	4a0e      	ldr	r2, [pc, #56]	; (159fc <rx_work_handler+0x138>)
   159c4:	7828      	ldrb	r0, [r5, #0]
   159c6:	2306      	movs	r3, #6
   159c8:	4621      	mov	r1, r4
   159ca:	f7ff ff4b 	bl	15864 <handle_event>
	net_buf_unref(buf);
   159ce:	e7a8      	b.n	15922 <rx_work_handler+0x5e>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   159d0:	480b      	ldr	r0, [pc, #44]	; (15a00 <rx_work_handler+0x13c>)
   159d2:	2145      	movs	r1, #69	; 0x45
   159d4:	e7b0      	b.n	15938 <rx_work_handler+0x74>
}
   159d6:	bd70      	pop	{r4, r5, r6, pc}
   159d8:	2000048c 	.word	0x2000048c
   159dc:	0002e1cd 	.word	0x0002e1cd
   159e0:	0002d509 	.word	0x0002d509
   159e4:	0002e201 	.word	0x0002e201
   159e8:	0002e22a 	.word	0x0002e22a
   159ec:	20000350 	.word	0x20000350
   159f0:	20000648 	.word	0x20000648
   159f4:	200019b0 	.word	0x200019b0
   159f8:	0002e15d 	.word	0x0002e15d
   159fc:	0002ca44 	.word	0x0002ca44
   15a00:	0002e251 	.word	0x0002e251

00015a04 <hci_le_meta_event>:
{
   15a04:	b510      	push	{r4, lr}
   15a06:	2101      	movs	r1, #1
   15a08:	4604      	mov	r4, r0
   15a0a:	3008      	adds	r0, #8
   15a0c:	f007 fb4c 	bl	1d0a8 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15a10:	4621      	mov	r1, r4
   15a12:	4a03      	ldr	r2, [pc, #12]	; (15a20 <hci_le_meta_event+0x1c>)
   15a14:	7800      	ldrb	r0, [r0, #0]
}
   15a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15a1a:	230a      	movs	r3, #10
   15a1c:	f7ff bf22 	b.w	15864 <handle_event>
   15a20:	0002c9e4 	.word	0x0002c9e4

00015a24 <le_remote_feat_complete>:
{
   15a24:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   15a26:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15a28:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15a2c:	4630      	mov	r0, r6
   15a2e:	f002 f90d 	bl	17c4c <bt_conn_lookup_handle>
	if (!conn) {
   15a32:	4604      	mov	r4, r0
   15a34:	b930      	cbnz	r0, 15a44 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15a36:	4632      	mov	r2, r6
   15a38:	480c      	ldr	r0, [pc, #48]	; (15a6c <le_remote_feat_complete+0x48>)
}
   15a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15a3e:	2145      	movs	r1, #69	; 0x45
   15a40:	f012 beae 	b.w	287a0 <z_log_minimal_printk>
	if (!evt->status) {
   15a44:	782b      	ldrb	r3, [r5, #0]
   15a46:	b93b      	cbnz	r3, 15a58 <le_remote_feat_complete+0x34>
   15a48:	f8d5 3003 	ldr.w	r3, [r5, #3]
   15a4c:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   15a50:	f8d5 3007 	ldr.w	r3, [r5, #7]
   15a54:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15a58:	1d20      	adds	r0, r4, #4
   15a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   15a5e:	f013 fd38 	bl	294d2 <atomic_or>
	bt_conn_unref(conn);
   15a62:	4620      	mov	r0, r4
}
   15a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15a68:	f002 b8c0 	b.w	17bec <bt_conn_unref>
   15a6c:	0002e10d 	.word	0x0002e10d

00015a70 <hci_cmd_done>:
{
   15a70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15a74:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15a76:	7990      	ldrb	r0, [r2, #6]
   15a78:	4d39      	ldr	r5, [pc, #228]	; (15b60 <hci_cmd_done+0xf0>)
{
   15a7a:	460f      	mov	r7, r1
   15a7c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15a7e:	f006 ff89 	bl	1c994 <net_buf_pool_get>
   15a82:	4285      	cmp	r5, r0
   15a84:	d00e      	beq.n	15aa4 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   15a86:	79a4      	ldrb	r4, [r4, #6]
   15a88:	4620      	mov	r0, r4
   15a8a:	f006 ff83 	bl	1c994 <net_buf_pool_get>
   15a8e:	4623      	mov	r3, r4
   15a90:	e9cd 0500 	strd	r0, r5, [sp]
   15a94:	4632      	mov	r2, r6
   15a96:	4833      	ldr	r0, [pc, #204]	; (15b64 <hci_cmd_done+0xf4>)
   15a98:	2157      	movs	r1, #87	; 0x57
   15a9a:	f012 fe81 	bl	287a0 <z_log_minimal_printk>
}
   15a9e:	b002      	add	sp, #8
   15aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   15aa4:	4620      	mov	r0, r4
   15aa6:	f006 ff7d 	bl	1c9a4 <net_buf_id>
   15aaa:	4d2f      	ldr	r5, [pc, #188]	; (15b68 <hci_cmd_done+0xf8>)
   15aac:	f04f 080c 	mov.w	r8, #12
   15ab0:	fb08 5000 	mla	r0, r8, r0, r5
   15ab4:	8843      	ldrh	r3, [r0, #2]
   15ab6:	42b3      	cmp	r3, r6
   15ab8:	d00d      	beq.n	15ad6 <hci_cmd_done+0x66>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   15aba:	4620      	mov	r0, r4
   15abc:	f006 ff72 	bl	1c9a4 <net_buf_id>
   15ac0:	fb08 5500 	mla	r5, r8, r0, r5
   15ac4:	4829      	ldr	r0, [pc, #164]	; (15b6c <hci_cmd_done+0xfc>)
   15ac6:	886b      	ldrh	r3, [r5, #2]
   15ac8:	4632      	mov	r2, r6
   15aca:	2157      	movs	r1, #87	; 0x57
}
   15acc:	b002      	add	sp, #8
   15ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   15ad2:	f012 be65 	b.w	287a0 <z_log_minimal_printk>
	if (bt_dev.sent_cmd) {
   15ad6:	4e26      	ldr	r6, [pc, #152]	; (15b70 <hci_cmd_done+0x100>)
   15ad8:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   15adc:	b120      	cbz	r0, 15ae8 <hci_cmd_done+0x78>
		net_buf_unref(bt_dev.sent_cmd);
   15ade:	f007 f9eb 	bl	1ceb8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15ae2:	2300      	movs	r3, #0
   15ae4:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   15ae8:	4620      	mov	r0, r4
   15aea:	f006 ff5b 	bl	1c9a4 <net_buf_id>
   15aee:	260c      	movs	r6, #12
   15af0:	fb06 5000 	mla	r0, r6, r0, r5
   15af4:	6843      	ldr	r3, [r0, #4]
   15af6:	b19b      	cbz	r3, 15b20 <hci_cmd_done+0xb0>
   15af8:	b997      	cbnz	r7, 15b20 <hci_cmd_done+0xb0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   15afa:	4620      	mov	r0, r4
   15afc:	f006 ff52 	bl	1c9a4 <net_buf_id>
   15b00:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   15b04:	2101      	movs	r1, #1
   15b06:	6842      	ldr	r2, [r0, #4]
   15b08:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   15b0c:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   15b0e:	f003 061f 	and.w	r6, r3, #31
   15b12:	40b1      	lsls	r1, r6
	if (val) {
   15b14:	095b      	lsrs	r3, r3, #5
   15b16:	b1e2      	cbz	r2, 15b52 <hci_cmd_done+0xe2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15b18:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15b1c:	f013 fcd9 	bl	294d2 <atomic_or>
	if (cmd(buf)->sync) {
   15b20:	4620      	mov	r0, r4
   15b22:	f006 ff3f 	bl	1c9a4 <net_buf_id>
   15b26:	260c      	movs	r6, #12
   15b28:	fb06 5000 	mla	r0, r6, r0, r5
   15b2c:	6883      	ldr	r3, [r0, #8]
   15b2e:	2b00      	cmp	r3, #0
   15b30:	d0b5      	beq.n	15a9e <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
   15b32:	4620      	mov	r0, r4
   15b34:	f006 ff36 	bl	1c9a4 <net_buf_id>
   15b38:	4370      	muls	r0, r6
   15b3a:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   15b3c:	4620      	mov	r0, r4
   15b3e:	f006 ff31 	bl	1c9a4 <net_buf_id>
   15b42:	fb06 5500 	mla	r5, r6, r0, r5
   15b46:	68a8      	ldr	r0, [r5, #8]
}
   15b48:	b002      	add	sp, #8
   15b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   15b4e:	f00c bd8f 	b.w	22670 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15b52:	43c9      	mvns	r1, r1
   15b54:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15b58:	f013 fcd6 	bl	29508 <atomic_and.isra.0>
   15b5c:	e7e0      	b.n	15b20 <hci_cmd_done+0xb0>
   15b5e:	bf00      	nop
   15b60:	20000bac 	.word	0x20000bac
   15b64:	0002e26a 	.word	0x0002e26a
   15b68:	20002704 	.word	0x20002704
   15b6c:	0002e2a4 	.word	0x0002e2a4
   15b70:	20000350 	.word	0x20000350

00015b74 <hci_cmd_status>:
{
   15b74:	b538      	push	{r3, r4, r5, lr}
   15b76:	2104      	movs	r1, #4
   15b78:	4604      	mov	r4, r0
   15b7a:	3008      	adds	r0, #8
   15b7c:	f007 fa94 	bl	1d0a8 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   15b80:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   15b82:	7801      	ldrb	r1, [r0, #0]
   15b84:	8840      	ldrh	r0, [r0, #2]
   15b86:	4622      	mov	r2, r4
   15b88:	f7ff ff72 	bl	15a70 <hci_cmd_done>
	if (ncmd) {
   15b8c:	b125      	cbz	r5, 15b98 <hci_cmd_status+0x24>
   15b8e:	4803      	ldr	r0, [pc, #12]	; (15b9c <hci_cmd_status+0x28>)
}
   15b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15b94:	f00c bd6c 	b.w	22670 <z_impl_k_sem_give>
   15b98:	bd38      	pop	{r3, r4, r5, pc}
   15b9a:	bf00      	nop
   15b9c:	20000470 	.word	0x20000470

00015ba0 <hci_cmd_complete>:
{
   15ba0:	b538      	push	{r3, r4, r5, lr}
   15ba2:	2103      	movs	r1, #3
   15ba4:	4604      	mov	r4, r0
   15ba6:	3008      	adds	r0, #8
   15ba8:	f007 fa7e 	bl	1d0a8 <net_buf_simple_pull_mem>
	status = buf->data[0];
   15bac:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   15bae:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   15bb0:	7819      	ldrb	r1, [r3, #0]
   15bb2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   15bb6:	4622      	mov	r2, r4
   15bb8:	f7ff ff5a 	bl	15a70 <hci_cmd_done>
	if (ncmd) {
   15bbc:	b125      	cbz	r5, 15bc8 <hci_cmd_complete+0x28>
   15bbe:	4803      	ldr	r0, [pc, #12]	; (15bcc <hci_cmd_complete+0x2c>)
}
   15bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15bc4:	f00c bd54 	b.w	22670 <z_impl_k_sem_give>
   15bc8:	bd38      	pop	{r3, r4, r5, pc}
   15bca:	bf00      	nop
   15bcc:	20000470 	.word	0x20000470

00015bd0 <hci_num_completed_packets>:
{
   15bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   15bd4:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   15bd6:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
   15bd8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 15ca8 <hci_num_completed_packets+0xd8>
			tx->pending_no_cb = 0U;
   15bdc:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   15bde:	783b      	ldrb	r3, [r7, #0]
   15be0:	429d      	cmp	r5, r3
   15be2:	db01      	blt.n	15be8 <hci_num_completed_packets+0x18>
}
   15be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   15be8:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   15bec:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   15bf0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   15bf4:	4650      	mov	r0, sl
   15bf6:	f002 f829 	bl	17c4c <bt_conn_lookup_handle>
		if (!conn) {
   15bfa:	4604      	mov	r4, r0
   15bfc:	b1d0      	cbz	r0, 15c34 <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
   15bfe:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   15c02:	b37e      	cbz	r6, 15c64 <hci_num_completed_packets+0x94>
	__asm__ volatile(
   15c04:	f04f 0340 	mov.w	r3, #64	; 0x40
   15c08:	f3ef 8211 	mrs	r2, BASEPRI
   15c0c:	f383 8812 	msr	BASEPRI_MAX, r3
   15c10:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   15c14:	69e3      	ldr	r3, [r4, #28]
   15c16:	b1a3      	cbz	r3, 15c42 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
   15c18:	3b01      	subs	r3, #1
   15c1a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15c1c:	f382 8811 	msr	BASEPRI, r2
   15c20:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   15c24:	4620      	mov	r0, r4
   15c26:	f001 fe6d 	bl	17904 <bt_conn_get_pkts>
   15c2a:	3e01      	subs	r6, #1
   15c2c:	f00c fd20 	bl	22670 <z_impl_k_sem_give>
   15c30:	b2b6      	uxth	r6, r6
   15c32:	e7e6      	b.n	15c02 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
   15c34:	481d      	ldr	r0, [pc, #116]	; (15cac <hci_num_completed_packets+0xdc>)
   15c36:	4652      	mov	r2, sl
   15c38:	2145      	movs	r1, #69	; 0x45
   15c3a:	f012 fdb1 	bl	287a0 <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
   15c3e:	3501      	adds	r5, #1
   15c40:	e7cd      	b.n	15bde <hci_num_completed_packets+0xe>
   15c42:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   15c44:	b12b      	cbz	r3, 15c52 <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15c46:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   15c48:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   15c4a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15c4c:	428b      	cmp	r3, r1
	list->tail = node;
   15c4e:	bf08      	it	eq
   15c50:	61a0      	streq	r0, [r4, #24]
   15c52:	f382 8811 	msr	BASEPRI, r2
   15c56:	f3bf 8f6f 	isb	sy
			if (!node) {
   15c5a:	b93b      	cbnz	r3, 15c6c <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
   15c5c:	2145      	movs	r1, #69	; 0x45
   15c5e:	4648      	mov	r0, r9
   15c60:	f012 fd9e 	bl	287a0 <z_log_minimal_printk>
		bt_conn_unref(conn);
   15c64:	4620      	mov	r0, r4
   15c66:	f001 ffc1 	bl	17bec <bt_conn_unref>
   15c6a:	e7e8      	b.n	15c3e <hci_num_completed_packets+0x6e>
	__asm__ volatile(
   15c6c:	f04f 0240 	mov.w	r2, #64	; 0x40
   15c70:	f3ef 8111 	mrs	r1, BASEPRI
   15c74:	f382 8812 	msr	BASEPRI_MAX, r2
   15c78:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   15c7c:	68da      	ldr	r2, [r3, #12]
   15c7e:	61e2      	str	r2, [r4, #28]
	return list->tail;
   15c80:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   15c82:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   15c86:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   15c8a:	b94a      	cbnz	r2, 15ca0 <hci_num_completed_packets+0xd0>
	list->head = node;
   15c8c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   15c90:	f381 8811 	msr	BASEPRI, r1
   15c94:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   15c98:	4650      	mov	r0, sl
   15c9a:	f00d f82b 	bl	22cf4 <k_work_submit>
   15c9e:	e7c1      	b.n	15c24 <hci_num_completed_packets+0x54>
	parent->next = child;
   15ca0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15ca2:	6263      	str	r3, [r4, #36]	; 0x24
}
   15ca4:	e7f4      	b.n	15c90 <hci_num_completed_packets+0xc0>
   15ca6:	bf00      	nop
   15ca8:	0002e2fd 	.word	0x0002e2fd
   15cac:	0002e2dc 	.word	0x0002e2dc

00015cb0 <bt_hci_cmd_state_set_init>:
{
   15cb0:	b510      	push	{r4, lr}
	state->bit = bit;
   15cb2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   15cb6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15cba:	720b      	strb	r3, [r1, #8]
{
   15cbc:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   15cbe:	f006 fe71 	bl	1c9a4 <net_buf_id>
   15cc2:	4b03      	ldr	r3, [pc, #12]	; (15cd0 <bt_hci_cmd_state_set_init+0x20>)
   15cc4:	220c      	movs	r2, #12
   15cc6:	fb02 3300 	mla	r3, r2, r0, r3
   15cca:	605c      	str	r4, [r3, #4]
}
   15ccc:	bd10      	pop	{r4, pc}
   15cce:	bf00      	nop
   15cd0:	20002704 	.word	0x20002704

00015cd4 <bt_hci_cmd_create>:
{
   15cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   15cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15cdc:	4606      	mov	r6, r0
   15cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15ce2:	481c      	ldr	r0, [pc, #112]	; (15d54 <bt_hci_cmd_create+0x80>)
   15ce4:	460f      	mov	r7, r1
   15ce6:	f015 fb4f 	bl	2b388 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   15cea:	4604      	mov	r4, r0
   15cec:	b940      	cbnz	r0, 15d00 <bt_hci_cmd_create+0x2c>
   15cee:	491a      	ldr	r1, [pc, #104]	; (15d58 <bt_hci_cmd_create+0x84>)
   15cf0:	481a      	ldr	r0, [pc, #104]	; (15d5c <bt_hci_cmd_create+0x88>)
   15cf2:	22ff      	movs	r2, #255	; 0xff
   15cf4:	f012 fd46 	bl	28784 <assert_print>
   15cf8:	4817      	ldr	r0, [pc, #92]	; (15d58 <bt_hci_cmd_create+0x84>)
   15cfa:	21ff      	movs	r1, #255	; 0xff
   15cfc:	f012 fd3b 	bl	28776 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   15d00:	f104 0a08 	add.w	sl, r4, #8
   15d04:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15d06:	f04f 0800 	mov.w	r8, #0
   15d0a:	4650      	mov	r0, sl
   15d0c:	f006 ffb4 	bl	1cc78 <net_buf_simple_reserve>
   15d10:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   15d14:	4620      	mov	r0, r4
   15d16:	f006 fe45 	bl	1c9a4 <net_buf_id>
   15d1a:	4d11      	ldr	r5, [pc, #68]	; (15d60 <bt_hci_cmd_create+0x8c>)
   15d1c:	f04f 090c 	mov.w	r9, #12
   15d20:	fb09 5000 	mla	r0, r9, r0, r5
   15d24:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   15d26:	4620      	mov	r0, r4
   15d28:	f006 fe3c 	bl	1c9a4 <net_buf_id>
   15d2c:	fb09 5000 	mla	r0, r9, r0, r5
   15d30:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   15d34:	4620      	mov	r0, r4
   15d36:	f006 fe35 	bl	1c9a4 <net_buf_id>
   15d3a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   15d3e:	2103      	movs	r1, #3
   15d40:	f8c5 8004 	str.w	r8, [r5, #4]
   15d44:	4650      	mov	r0, sl
   15d46:	f007 f9cd 	bl	1d0e4 <net_buf_simple_add>
	hdr->param_len = param_len;
   15d4a:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   15d4c:	8006      	strh	r6, [r0, #0]
}
   15d4e:	4620      	mov	r0, r4
   15d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d54:	20000bac 	.word	0x20000bac
   15d58:	0002e1cd 	.word	0x0002e1cd
   15d5c:	0002d509 	.word	0x0002d509
   15d60:	20002704 	.word	0x20002704

00015d64 <bt_hci_cmd_send_sync>:
{
   15d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d66:	4607      	mov	r7, r0
   15d68:	b087      	sub	sp, #28
   15d6a:	4615      	mov	r5, r2
	if (!buf) {
   15d6c:	460c      	mov	r4, r1
   15d6e:	b921      	cbnz	r1, 15d7a <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
   15d70:	f7ff ffb0 	bl	15cd4 <bt_hci_cmd_create>
		if (!buf) {
   15d74:	4604      	mov	r4, r0
   15d76:	2800      	cmp	r0, #0
   15d78:	d048      	beq.n	15e0c <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   15d7a:	2201      	movs	r2, #1
   15d7c:	2100      	movs	r1, #0
   15d7e:	4668      	mov	r0, sp
   15d80:	f016 f833 	bl	2bdea <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   15d84:	4620      	mov	r0, r4
   15d86:	f006 fe0d 	bl	1c9a4 <net_buf_id>
   15d8a:	4e22      	ldr	r6, [pc, #136]	; (15e14 <bt_hci_cmd_send_sync+0xb0>)
   15d8c:	230c      	movs	r3, #12
   15d8e:	fb03 6000 	mla	r0, r3, r0, r6
   15d92:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   15d96:	4620      	mov	r0, r4
   15d98:	f007 f8d2 	bl	1cf40 <net_buf_ref>
   15d9c:	4601      	mov	r1, r0
   15d9e:	481e      	ldr	r0, [pc, #120]	; (15e18 <bt_hci_cmd_send_sync+0xb4>)
   15da0:	f007 f85c 	bl	1ce5c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   15da4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   15da8:	2300      	movs	r3, #0
   15daa:	4668      	mov	r0, sp
   15dac:	f00c fc9a 	bl	226e4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   15db0:	b158      	cbz	r0, 15dca <bt_hci_cmd_send_sync+0x66>
   15db2:	491a      	ldr	r1, [pc, #104]	; (15e1c <bt_hci_cmd_send_sync+0xb8>)
   15db4:	481a      	ldr	r0, [pc, #104]	; (15e20 <bt_hci_cmd_send_sync+0xbc>)
   15db6:	f240 1247 	movw	r2, #327	; 0x147
   15dba:	f012 fce3 	bl	28784 <assert_print>
   15dbe:	4040      	eors	r0, r0
   15dc0:	f380 8811 	msr	BASEPRI, r0
   15dc4:	f04f 0003 	mov.w	r0, #3
   15dc8:	df02      	svc	2
	status = cmd(buf)->status;
   15dca:	4620      	mov	r0, r4
   15dcc:	f006 fdea 	bl	1c9a4 <net_buf_id>
   15dd0:	230c      	movs	r3, #12
   15dd2:	4358      	muls	r0, r3
   15dd4:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   15dd6:	b186      	cbz	r6, 15dfa <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   15dd8:	4812      	ldr	r0, [pc, #72]	; (15e24 <bt_hci_cmd_send_sync+0xc0>)
   15dda:	4633      	mov	r3, r6
   15ddc:	463a      	mov	r2, r7
   15dde:	2157      	movs	r1, #87	; 0x57
   15de0:	f012 fcde 	bl	287a0 <z_log_minimal_printk>
		net_buf_unref(buf);
   15de4:	4620      	mov	r0, r4
   15de6:	f007 f867 	bl	1ceb8 <net_buf_unref>
			return -EIO;
   15dea:	2e09      	cmp	r6, #9
   15dec:	bf0c      	ite	eq
   15dee:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   15df2:	f06f 0004 	mvnne.w	r0, #4
}
   15df6:	b007      	add	sp, #28
   15df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   15dfa:	b115      	cbz	r5, 15e02 <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
   15dfc:	602c      	str	r4, [r5, #0]
	return 0;
   15dfe:	4630      	mov	r0, r6
   15e00:	e7f9      	b.n	15df6 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
   15e02:	4620      	mov	r0, r4
   15e04:	f007 f858 	bl	1ceb8 <net_buf_unref>
	return 0;
   15e08:	4628      	mov	r0, r5
   15e0a:	e7f4      	b.n	15df6 <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
   15e0c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15e10:	e7f1      	b.n	15df6 <bt_hci_cmd_send_sync+0x92>
   15e12:	bf00      	nop
   15e14:	20002704 	.word	0x20002704
   15e18:	20000494 	.word	0x20000494
   15e1c:	0002e1cd 	.word	0x0002e1cd
   15e20:	0002d509 	.word	0x0002d509
   15e24:	0002e319 	.word	0x0002e319

00015e28 <hci_le_read_max_data_len>:
{
   15e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15e2a:	4606      	mov	r6, r0
   15e2c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   15e2e:	aa01      	add	r2, sp, #4
   15e30:	2100      	movs	r1, #0
   15e32:	f242 002f 	movw	r0, #8239	; 0x202f
   15e36:	f7ff ff95 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   15e3a:	4604      	mov	r4, r0
   15e3c:	b130      	cbz	r0, 15e4c <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
   15e3e:	4809      	ldr	r0, [pc, #36]	; (15e64 <hci_le_read_max_data_len+0x3c>)
   15e40:	2145      	movs	r1, #69	; 0x45
   15e42:	f012 fcad 	bl	287a0 <z_log_minimal_printk>
}
   15e46:	4620      	mov	r0, r4
   15e48:	b002      	add	sp, #8
   15e4a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   15e4c:	9801      	ldr	r0, [sp, #4]
   15e4e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15e50:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15e54:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   15e56:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   15e5a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   15e5c:	f007 f82c 	bl	1ceb8 <net_buf_unref>
	return 0;
   15e60:	e7f1      	b.n	15e46 <hci_le_read_max_data_len+0x1e>
   15e62:	bf00      	nop
   15e64:	0002e33a 	.word	0x0002e33a

00015e68 <bt_hci_le_rand>:
{
   15e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   15e6a:	4b14      	ldr	r3, [pc, #80]	; (15ebc <bt_hci_le_rand+0x54>)
   15e6c:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   15e70:	2b00      	cmp	r3, #0
{
   15e72:	4605      	mov	r5, r0
   15e74:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   15e76:	da1d      	bge.n	15eb4 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   15e78:	b914      	cbnz	r4, 15e80 <bt_hci_le_rand+0x18>
	return 0;
   15e7a:	4620      	mov	r0, r4
}
   15e7c:	b003      	add	sp, #12
   15e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   15e80:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   15e82:	aa01      	add	r2, sp, #4
   15e84:	f04f 0100 	mov.w	r1, #0
   15e88:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   15e8c:	4626      	mov	r6, r4
   15e8e:	bf28      	it	cs
   15e90:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   15e92:	f7ff ff67 	bl	15d64 <bt_hci_cmd_send_sync>
		if (err) {
   15e96:	2800      	cmp	r0, #0
   15e98:	d1f0      	bne.n	15e7c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   15e9a:	9f01      	ldr	r7, [sp, #4]
   15e9c:	68b9      	ldr	r1, [r7, #8]
   15e9e:	4632      	mov	r2, r6
   15ea0:	3101      	adds	r1, #1
   15ea2:	4628      	mov	r0, r5
   15ea4:	f016 f953 	bl	2c14e <memcpy>
		net_buf_unref(rsp);
   15ea8:	4638      	mov	r0, r7
   15eaa:	f007 f805 	bl	1ceb8 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   15eae:	4435      	add	r5, r6
		len -= count;
   15eb0:	1ba4      	subs	r4, r4, r6
   15eb2:	e7e1      	b.n	15e78 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   15eb4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15eb8:	e7e0      	b.n	15e7c <bt_hci_le_rand+0x14>
   15eba:	bf00      	nop
   15ebc:	20000350 	.word	0x20000350

00015ec0 <bt_hci_le_enh_conn_complete>:
{
   15ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15ec4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   15ec8:	4a96      	ldr	r2, [pc, #600]	; (16124 <bt_hci_le_enh_conn_complete+0x264>)
	handle |= ~BT_ACL_HANDLE_MASK;
   15eca:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   15ece:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   15ed0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   15ed4:	b29b      	uxth	r3, r3
   15ed6:	4299      	cmp	r1, r3
{
   15ed8:	4605      	mov	r5, r0
   15eda:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   15ede:	bf08      	it	eq
   15ee0:	8016      	strheq	r6, [r2, #0]
{
   15ee2:	b088      	sub	sp, #32
			return true;
   15ee4:	bf08      	it	eq
   15ee6:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   15ee8:	f000 fd10 	bl	1690c <bt_id_pending_keys_update>
	if (evt->status) {
   15eec:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15eee:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   15ef2:	b334      	cbz	r4, 15f42 <bt_hci_le_enh_conn_complete+0x82>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15ef4:	2c3c      	cmp	r4, #60	; 0x3c
   15ef6:	d11c      	bne.n	15f32 <bt_hci_le_enh_conn_complete+0x72>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15ef8:	f001 f8c0 	bl	1707c <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15efc:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15f00:	3010      	adds	r0, #16
   15f02:	f013 fb01 	bl	29508 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   15f06:	2000      	movs	r0, #0
   15f08:	f7ff fc8e 	bl	15828 <find_pending_connect.part.0>
		if (!conn) {
   15f0c:	4605      	mov	r5, r0
   15f0e:	b930      	cbnz	r0, 15f1e <bt_hci_le_enh_conn_complete+0x5e>
			BT_ERR("No pending peripheral connection");
   15f10:	4885      	ldr	r0, [pc, #532]	; (16128 <bt_hci_le_enh_conn_complete+0x268>)
   15f12:	2145      	movs	r1, #69	; 0x45
}
   15f14:	b008      	add	sp, #32
   15f16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			BT_ERR("No pending peripheral connection");
   15f1a:	f012 bc41 	b.w	287a0 <z_log_minimal_printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   15f1e:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15f20:	2100      	movs	r1, #0
   15f22:	f001 fe9b 	bl	17c5c <bt_conn_set_state>
		bt_conn_unref(conn);
   15f26:	4628      	mov	r0, r5
}
   15f28:	b008      	add	sp, #32
   15f2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   15f2e:	f001 be5d 	b.w	17bec <bt_conn_unref>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   15f32:	487e      	ldr	r0, [pc, #504]	; (1612c <bt_hci_le_enh_conn_complete+0x26c>)
   15f34:	4622      	mov	r2, r4
   15f36:	2157      	movs	r1, #87	; 0x57
}
   15f38:	b008      	add	sp, #32
   15f3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   15f3e:	f012 bc2f 	b.w	287a0 <z_log_minimal_printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   15f42:	792b      	ldrb	r3, [r5, #4]
   15f44:	3b02      	subs	r3, #2
   15f46:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   15f48:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   15f4c:	d836      	bhi.n	15fbc <bt_hci_le_enh_conn_complete+0xfc>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   15f4e:	4649      	mov	r1, r9
   15f50:	a806      	add	r0, sp, #24
   15f52:	f013 fad2 	bl	294fa <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15f56:	f89d 3018 	ldrb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   15f5a:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15f5e:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   15f60:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15f64:	f88d 3018 	strb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   15f68:	f013 fac2 	bl	294f0 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   15f6c:	2301      	movs	r3, #1
   15f6e:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   15f72:	78eb      	ldrb	r3, [r5, #3]
   15f74:	2b01      	cmp	r3, #1
   15f76:	d112      	bne.n	15f9e <bt_hci_le_enh_conn_complete+0xde>
   15f78:	a806      	add	r0, sp, #24
   15f7a:	f7ff fc55 	bl	15828 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15f7e:	78eb      	ldrb	r3, [r5, #3]
   15f80:	2b01      	cmp	r3, #1
   15f82:	4604      	mov	r4, r0
   15f84:	d10a      	bne.n	15f9c <bt_hci_le_enh_conn_complete+0xdc>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15f86:	f001 f879 	bl	1707c <bt_le_adv_lookup_legacy>
   15f8a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15f8e:	4682      	mov	sl, r0
   15f90:	3010      	adds	r0, #16
   15f92:	f013 fab9 	bl	29508 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   15f96:	4650      	mov	r0, sl
   15f98:	f013 fd4b 	bl	29a32 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   15f9c:	bb0c      	cbnz	r4, 15fe2 <bt_hci_le_enh_conn_complete+0x122>
		BT_ERR("No pending conn for peer %s",
   15f9e:	4648      	mov	r0, r9
   15fa0:	f7ff f956 	bl	15250 <bt_addr_le_str_real>
   15fa4:	2145      	movs	r1, #69	; 0x45
   15fa6:	4602      	mov	r2, r0
   15fa8:	4861      	ldr	r0, [pc, #388]	; (16130 <bt_hci_le_enh_conn_complete+0x270>)
   15faa:	f012 fbf9 	bl	287a0 <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15fae:	211f      	movs	r1, #31
   15fb0:	4640      	mov	r0, r8
   15fb2:	f013 fac5 	bl	29540 <bt_hci_disconnect>
}
   15fb6:	b008      	add	sp, #32
   15fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   15fbc:	78eb      	ldrb	r3, [r5, #3]
   15fbe:	2b01      	cmp	r3, #1
   15fc0:	bf04      	itt	eq
   15fc2:	4b5c      	ldreq	r3, [pc, #368]	; (16134 <bt_hci_le_enh_conn_complete+0x274>)
   15fc4:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   15fc8:	4649      	mov	r1, r9
   15fca:	4620      	mov	r0, r4
   15fcc:	f013 fc13 	bl	297f6 <bt_lookup_id_addr>
   15fd0:	4601      	mov	r1, r0
   15fd2:	a806      	add	r0, sp, #24
   15fd4:	f013 fa91 	bl	294fa <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   15fd8:	4649      	mov	r1, r9
   15fda:	a804      	add	r0, sp, #16
   15fdc:	f013 fa8d 	bl	294fa <bt_addr_le_copy>
   15fe0:	e7c7      	b.n	15f72 <bt_hci_le_enh_conn_complete+0xb2>
	conn->handle = handle;
   15fe2:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15fe4:	a906      	add	r1, sp, #24
	conn->handle = handle;
   15fe6:	f820 7b90 	strh.w	r7, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15fea:	f013 fa86 	bl	294fa <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   15fee:	7e2a      	ldrb	r2, [r5, #24]
   15ff0:	7deb      	ldrb	r3, [r5, #23]
   15ff2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15ff6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   15ffa:	7eaa      	ldrb	r2, [r5, #26]
   15ffc:	7e6b      	ldrb	r3, [r5, #25]
   15ffe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16002:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16006:	7f2a      	ldrb	r2, [r5, #28]
   16008:	7eeb      	ldrb	r3, [r5, #27]
   1600a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1600e:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   16012:	78eb      	ldrb	r3, [r5, #3]
   16014:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   16016:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16018:	2b01      	cmp	r3, #1
	conn->err = 0U;
   1601a:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1601c:	d115      	bne.n	1604a <bt_hci_le_enh_conn_complete+0x18a>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   1601e:	a904      	add	r1, sp, #16
   16020:	f104 0097 	add.w	r0, r4, #151	; 0x97
   16024:	f013 fa69 	bl	294fa <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16028:	f001 f828 	bl	1707c <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   1602c:	7a21      	ldrb	r1, [r4, #8]
   1602e:	4a41      	ldr	r2, [pc, #260]	; (16134 <bt_hci_le_enh_conn_complete+0x274>)
   16030:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   16034:	4411      	add	r1, r2
   16036:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   1603a:	f013 fa5e 	bl	294fa <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1603e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   16042:	065d      	lsls	r5, r3, #25
   16044:	d501      	bpl.n	1604a <bt_hci_le_enh_conn_complete+0x18a>
			bt_le_adv_resume();
   16046:	f001 f9d1 	bl	173ec <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1604a:	2107      	movs	r1, #7
   1604c:	4620      	mov	r0, r4
   1604e:	f001 fe05 	bl	17c5c <bt_conn_set_state>
	if (is_disconnected) {
   16052:	b11e      	cbz	r6, 1605c <bt_hci_le_enh_conn_complete+0x19c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16054:	2101      	movs	r1, #1
   16056:	4620      	mov	r0, r4
   16058:	f001 fe00 	bl	17c5c <bt_conn_set_state>
	bt_conn_connected(conn);
   1605c:	4620      	mov	r0, r4
   1605e:	f013 fd5d 	bl	29b1c <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   16062:	7b63      	ldrb	r3, [r4, #13]
   16064:	2b07      	cmp	r3, #7
   16066:	d155      	bne.n	16114 <bt_hci_le_enh_conn_complete+0x254>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16068:	f3bf 8f5b 	dmb	ish
   1606c:	6863      	ldr	r3, [r4, #4]
   1606e:	4e31      	ldr	r6, [pc, #196]	; (16134 <bt_hci_le_enh_conn_complete+0x274>)
   16070:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16074:	f413 6f00 	tst.w	r3, #2048	; 0x800
   16078:	d11f      	bne.n	160ba <bt_hci_le_enh_conn_complete+0x1fa>
   1607a:	78e3      	ldrb	r3, [r4, #3]
   1607c:	b11b      	cbz	r3, 16086 <bt_hci_le_enh_conn_complete+0x1c6>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1607e:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   16082:	0718      	lsls	r0, r3, #28
   16084:	d519      	bpl.n	160ba <bt_hci_le_enh_conn_complete+0x1fa>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   16086:	2102      	movs	r1, #2
   16088:	f242 0016 	movw	r0, #8214	; 0x2016
   1608c:	f7ff fe22 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   16090:	4605      	mov	r5, r0
   16092:	2800      	cmp	r0, #0
   16094:	d042      	beq.n	1611c <bt_hci_le_enh_conn_complete+0x25c>
   16096:	2102      	movs	r1, #2
   16098:	3008      	adds	r0, #8
   1609a:	f007 f823 	bl	1d0e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1609e:	8823      	ldrh	r3, [r4, #0]
   160a0:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   160a2:	2200      	movs	r2, #0
   160a4:	4629      	mov	r1, r5
   160a6:	f242 0016 	movw	r0, #8214	; 0x2016
   160aa:	f7ff fe5b 	bl	15d64 <bt_hci_cmd_send_sync>
		if (err) {
   160ae:	4602      	mov	r2, r0
   160b0:	b118      	cbz	r0, 160ba <bt_hci_le_enh_conn_complete+0x1fa>
			BT_ERR("Failed read remote features (%d)", err);
   160b2:	4821      	ldr	r0, [pc, #132]	; (16138 <bt_hci_le_enh_conn_complete+0x278>)
   160b4:	2145      	movs	r1, #69	; 0x45
   160b6:	f012 fb73 	bl	287a0 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   160ba:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   160be:	07d9      	lsls	r1, r3, #31
   160c0:	d50c      	bpl.n	160dc <bt_hci_le_enh_conn_complete+0x21c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   160c2:	2100      	movs	r1, #0
   160c4:	2302      	movs	r3, #2
   160c6:	461a      	mov	r2, r3
   160c8:	9100      	str	r1, [sp, #0]
   160ca:	4620      	mov	r0, r4
   160cc:	f013 fa71 	bl	295b2 <bt_le_set_phy>
		if (err) {
   160d0:	4602      	mov	r2, r0
   160d2:	b118      	cbz	r0, 160dc <bt_hci_le_enh_conn_complete+0x21c>
			BT_ERR("Failed LE Set PHY (%d)", err);
   160d4:	4819      	ldr	r0, [pc, #100]	; (1613c <bt_hci_le_enh_conn_complete+0x27c>)
   160d6:	2145      	movs	r1, #69	; 0x45
   160d8:	f012 fb62 	bl	287a0 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   160dc:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   160e0:	069a      	lsls	r2, r3, #26
   160e2:	d517      	bpl.n	16114 <bt_hci_le_enh_conn_complete+0x254>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   160e4:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   160e8:	689b      	ldr	r3, [r3, #8]
   160ea:	079b      	lsls	r3, r3, #30
   160ec:	d512      	bpl.n	16114 <bt_hci_le_enh_conn_complete+0x254>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   160ee:	f10d 010e 	add.w	r1, sp, #14
   160f2:	a803      	add	r0, sp, #12
   160f4:	f7ff fe98 	bl	15e28 <hci_le_read_max_data_len>
			if (!err) {
   160f8:	b960      	cbnz	r0, 16114 <bt_hci_le_enh_conn_complete+0x254>
				err = bt_le_set_data_len(conn,
   160fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   160fe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   16102:	4620      	mov	r0, r4
   16104:	f013 fa37 	bl	29576 <bt_le_set_data_len>
				if (err) {
   16108:	4602      	mov	r2, r0
   1610a:	b118      	cbz	r0, 16114 <bt_hci_le_enh_conn_complete+0x254>
					BT_ERR("Failed to set data len (%d)", err);
   1610c:	480c      	ldr	r0, [pc, #48]	; (16140 <bt_hci_le_enh_conn_complete+0x280>)
   1610e:	2145      	movs	r1, #69	; 0x45
   16110:	f012 fb46 	bl	287a0 <z_log_minimal_printk>
	bt_conn_unref(conn);
   16114:	4620      	mov	r0, r4
   16116:	f001 fd69 	bl	17bec <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1611a:	e74c      	b.n	15fb6 <bt_hci_le_enh_conn_complete+0xf6>
		return -ENOBUFS;
   1611c:	f06f 0268 	mvn.w	r2, #104	; 0x68
   16120:	e7c7      	b.n	160b2 <bt_hci_le_enh_conn_complete+0x1f2>
   16122:	bf00      	nop
   16124:	200036d0 	.word	0x200036d0
   16128:	0002e35f 	.word	0x0002e35f
   1612c:	0002e385 	.word	0x0002e385
   16130:	0002e3a3 	.word	0x0002e3a3
   16134:	20000350 	.word	0x20000350
   16138:	0002e3c4 	.word	0x0002e3c4
   1613c:	0002e3ea 	.word	0x0002e3ea
   16140:	0002e406 	.word	0x0002e406

00016144 <bt_security_err_get>:
	switch (hci_err) {
   16144:	2829      	cmp	r0, #41	; 0x29
   16146:	bf9a      	itte	ls
   16148:	4b01      	ldrls	r3, [pc, #4]	; (16150 <bt_security_err_get+0xc>)
   1614a:	5c18      	ldrbls	r0, [r3, r0]
{
   1614c:	2009      	movhi	r0, #9
}
   1614e:	4770      	bx	lr
   16150:	0002e672 	.word	0x0002e672

00016154 <hci_encrypt_key_refresh_complete>:
{
   16154:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   16156:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16158:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   1615c:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1615e:	4630      	mov	r0, r6
   16160:	f001 fd74 	bl	17c4c <bt_conn_lookup_handle>
	if (!conn) {
   16164:	4604      	mov	r4, r0
   16166:	b930      	cbnz	r0, 16176 <hci_encrypt_key_refresh_complete+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   16168:	4632      	mov	r2, r6
   1616a:	4819      	ldr	r0, [pc, #100]	; (161d0 <hci_encrypt_key_refresh_complete+0x7c>)
}
   1616c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   16170:	2145      	movs	r1, #69	; 0x45
   16172:	f012 bb15 	b.w	287a0 <z_log_minimal_printk>
	if (status) {
   16176:	b165      	cbz	r5, 16192 <hci_encrypt_key_refresh_complete+0x3e>
		bt_conn_security_changed(conn, status,
   16178:	4628      	mov	r0, r5
   1617a:	f7ff ffe3 	bl	16144 <bt_security_err_get>
   1617e:	4629      	mov	r1, r5
   16180:	4602      	mov	r2, r0
   16182:	4620      	mov	r0, r4
   16184:	f001 ff76 	bl	18074 <bt_conn_security_changed>
	bt_conn_unref(conn);
   16188:	4620      	mov	r0, r4
}
   1618a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1618e:	f001 bd2d 	b.w	17bec <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   16192:	7883      	ldrb	r3, [r0, #2]
   16194:	2b01      	cmp	r3, #1
   16196:	d107      	bne.n	161a8 <hci_encrypt_key_refresh_complete+0x54>
		bt_smp_update_keys(conn);
   16198:	f006 f9f6 	bl	1c588 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1619c:	4620      	mov	r0, r4
   1619e:	f013 f97f 	bl	294a0 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   161a2:	2800      	cmp	r0, #0
   161a4:	bf08      	it	eq
   161a6:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   161a8:	4628      	mov	r0, r5
   161aa:	f7ff ffcb 	bl	16144 <bt_security_err_get>
   161ae:	4629      	mov	r1, r5
   161b0:	4602      	mov	r2, r0
   161b2:	4620      	mov	r0, r4
   161b4:	f001 ff5e 	bl	18074 <bt_conn_security_changed>
	if (status) {
   161b8:	2d00      	cmp	r5, #0
   161ba:	d0e5      	beq.n	16188 <hci_encrypt_key_refresh_complete+0x34>
		BT_ERR("Failed to set required security level");
   161bc:	4805      	ldr	r0, [pc, #20]	; (161d4 <hci_encrypt_key_refresh_complete+0x80>)
   161be:	2145      	movs	r1, #69	; 0x45
   161c0:	f012 faee 	bl	287a0 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   161c4:	4629      	mov	r1, r5
   161c6:	4620      	mov	r0, r4
   161c8:	f013 fcb1 	bl	29b2e <bt_conn_disconnect>
   161cc:	e7dc      	b.n	16188 <hci_encrypt_key_refresh_complete+0x34>
   161ce:	bf00      	nop
   161d0:	0002e0e2 	.word	0x0002e0e2
   161d4:	0002e427 	.word	0x0002e427

000161d8 <hci_encrypt_change>:
{
   161d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   161da:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   161dc:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   161e0:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   161e2:	4638      	mov	r0, r7
   161e4:	f001 fd32 	bl	17c4c <bt_conn_lookup_handle>
	if (!conn) {
   161e8:	4604      	mov	r4, r0
   161ea:	b930      	cbnz	r0, 161fa <hci_encrypt_change+0x22>
		BT_ERR("Unable to look up conn with handle %u", handle);
   161ec:	463a      	mov	r2, r7
   161ee:	481a      	ldr	r0, [pc, #104]	; (16258 <hci_encrypt_change+0x80>)
}
   161f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   161f4:	2145      	movs	r1, #69	; 0x45
   161f6:	f012 bad3 	b.w	287a0 <z_log_minimal_printk>
	if (status) {
   161fa:	b165      	cbz	r5, 16216 <hci_encrypt_change+0x3e>
		bt_conn_security_changed(conn, status,
   161fc:	4628      	mov	r0, r5
   161fe:	f7ff ffa1 	bl	16144 <bt_security_err_get>
   16202:	4629      	mov	r1, r5
   16204:	4602      	mov	r2, r0
   16206:	4620      	mov	r0, r4
   16208:	f001 ff34 	bl	18074 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1620c:	4620      	mov	r0, r4
}
   1620e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   16212:	f001 bceb 	b.w	17bec <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   16216:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   16218:	78f3      	ldrb	r3, [r6, #3]
   1621a:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1621c:	2a01      	cmp	r2, #1
   1621e:	d108      	bne.n	16232 <hci_encrypt_change+0x5a>
		if (conn->encrypt) {
   16220:	b10b      	cbz	r3, 16226 <hci_encrypt_change+0x4e>
			bt_smp_update_keys(conn);
   16222:	f006 f9b1 	bl	1c588 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   16226:	4620      	mov	r0, r4
   16228:	f013 f93a 	bl	294a0 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   1622c:	2800      	cmp	r0, #0
   1622e:	bf08      	it	eq
   16230:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16232:	4628      	mov	r0, r5
   16234:	f7ff ff86 	bl	16144 <bt_security_err_get>
   16238:	4629      	mov	r1, r5
   1623a:	4602      	mov	r2, r0
   1623c:	4620      	mov	r0, r4
   1623e:	f001 ff19 	bl	18074 <bt_conn_security_changed>
	if (status) {
   16242:	2d00      	cmp	r5, #0
   16244:	d0e2      	beq.n	1620c <hci_encrypt_change+0x34>
		BT_ERR("Failed to set required security level");
   16246:	4805      	ldr	r0, [pc, #20]	; (1625c <hci_encrypt_change+0x84>)
   16248:	2145      	movs	r1, #69	; 0x45
   1624a:	f012 faa9 	bl	287a0 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   1624e:	4629      	mov	r1, r5
   16250:	4620      	mov	r0, r4
   16252:	f013 fc6c 	bl	29b2e <bt_conn_disconnect>
   16256:	e7d9      	b.n	1620c <hci_encrypt_change+0x34>
   16258:	0002e0e2 	.word	0x0002e0e2
   1625c:	0002e427 	.word	0x0002e427

00016260 <bt_send>:
	return bt_dev.drv->send(buf);
   16260:	4b02      	ldr	r3, [pc, #8]	; (1626c <bt_send+0xc>)
   16262:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   16266:	695b      	ldr	r3, [r3, #20]
   16268:	4718      	bx	r3
   1626a:	bf00      	nop
   1626c:	20000350 	.word	0x20000350

00016270 <bt_hci_cmd_send>:
{
   16270:	b538      	push	{r3, r4, r5, lr}
   16272:	4605      	mov	r5, r0
	if (!buf) {
   16274:	460c      	mov	r4, r1
   16276:	b919      	cbnz	r1, 16280 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   16278:	f7ff fd2c 	bl	15cd4 <bt_hci_cmd_create>
		if (!buf) {
   1627c:	4604      	mov	r4, r0
   1627e:	b1c0      	cbz	r0, 162b2 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16280:	f640 4335 	movw	r3, #3125	; 0xc35
   16284:	429d      	cmp	r5, r3
   16286:	d10e      	bne.n	162a6 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
   16288:	4620      	mov	r0, r4
   1628a:	f7ff ffe9 	bl	16260 <bt_send>
		if (err) {
   1628e:	4605      	mov	r5, r0
   16290:	b138      	cbz	r0, 162a2 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
   16292:	4602      	mov	r2, r0
   16294:	2145      	movs	r1, #69	; 0x45
   16296:	4808      	ldr	r0, [pc, #32]	; (162b8 <bt_hci_cmd_send+0x48>)
   16298:	f012 fa82 	bl	287a0 <z_log_minimal_printk>
			net_buf_unref(buf);
   1629c:	4620      	mov	r0, r4
   1629e:	f006 fe0b 	bl	1ceb8 <net_buf_unref>
}
   162a2:	4628      	mov	r0, r5
   162a4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   162a6:	4805      	ldr	r0, [pc, #20]	; (162bc <bt_hci_cmd_send+0x4c>)
   162a8:	4621      	mov	r1, r4
   162aa:	f006 fdd7 	bl	1ce5c <net_buf_put>
	return 0;
   162ae:	2500      	movs	r5, #0
   162b0:	e7f7      	b.n	162a2 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   162b2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   162b6:	e7f4      	b.n	162a2 <bt_hci_cmd_send+0x32>
   162b8:	0002e452 	.word	0x0002e452
   162bc:	20000494 	.word	0x20000494

000162c0 <le_ltk_request>:
{
   162c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   162c2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   162c4:	882f      	ldrh	r7, [r5, #0]
   162c6:	b2bc      	uxth	r4, r7
{
   162c8:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   162ca:	4620      	mov	r0, r4
   162cc:	f001 fcbe 	bl	17c4c <bt_conn_lookup_handle>
	if (!conn) {
   162d0:	4606      	mov	r6, r0
   162d2:	b938      	cbnz	r0, 162e4 <le_ltk_request+0x24>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   162d4:	4825      	ldr	r0, [pc, #148]	; (1636c <le_ltk_request+0xac>)
   162d6:	4622      	mov	r2, r4
   162d8:	2145      	movs	r1, #69	; 0x45
}
   162da:	b007      	add	sp, #28
   162dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   162e0:	f012 ba5e 	b.w	287a0 <z_log_minimal_printk>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   162e4:	ac02      	add	r4, sp, #8
   162e6:	f8d5 2002 	ldr.w	r2, [r5, #2]
   162ea:	f8d5 3006 	ldr.w	r3, [r5, #6]
   162ee:	9401      	str	r4, [sp, #4]
   162f0:	8969      	ldrh	r1, [r5, #10]
   162f2:	9100      	str	r1, [sp, #0]
   162f4:	f014 fedd 	bl	2b0b2 <bt_smp_request_ltk>
   162f8:	b338      	cbz	r0, 1634a <le_ltk_request+0x8a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   162fa:	2112      	movs	r1, #18
   162fc:	f242 001a 	movw	r0, #8218	; 0x201a
   16300:	f7ff fce8 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   16304:	4605      	mov	r5, r0
   16306:	b940      	cbnz	r0, 1631a <le_ltk_request+0x5a>
		BT_ERR("Out of command buffers");
   16308:	4819      	ldr	r0, [pc, #100]	; (16370 <le_ltk_request+0xb0>)
   1630a:	2145      	movs	r1, #69	; 0x45
   1630c:	f012 fa48 	bl	287a0 <z_log_minimal_printk>
	bt_conn_unref(conn);
   16310:	4630      	mov	r0, r6
   16312:	f001 fc6b 	bl	17bec <bt_conn_unref>
}
   16316:	b007      	add	sp, #28
   16318:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1631a:	2112      	movs	r1, #18
   1631c:	3008      	adds	r0, #8
   1631e:	f006 fee1 	bl	1d0e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   16322:	4603      	mov	r3, r0
   16324:	4622      	mov	r2, r4
   16326:	f823 7b02 	strh.w	r7, [r3], #2
   1632a:	af06      	add	r7, sp, #24
   1632c:	4614      	mov	r4, r2
   1632e:	cc03      	ldmia	r4!, {r0, r1}
   16330:	42bc      	cmp	r4, r7
   16332:	6018      	str	r0, [r3, #0]
   16334:	6059      	str	r1, [r3, #4]
   16336:	4622      	mov	r2, r4
   16338:	f103 0308 	add.w	r3, r3, #8
   1633c:	d1f6      	bne.n	1632c <le_ltk_request+0x6c>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1633e:	4629      	mov	r1, r5
   16340:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16344:	f7ff ff94 	bl	16270 <bt_hci_cmd_send>
   16348:	e7e2      	b.n	16310 <le_ltk_request+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1634a:	2102      	movs	r1, #2
   1634c:	f242 001b 	movw	r0, #8219	; 0x201b
   16350:	f7ff fcc0 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   16354:	4604      	mov	r4, r0
   16356:	2800      	cmp	r0, #0
   16358:	d0d6      	beq.n	16308 <le_ltk_request+0x48>
   1635a:	2102      	movs	r1, #2
   1635c:	3008      	adds	r0, #8
   1635e:	f006 fec1 	bl	1d0e4 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16362:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   16364:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16366:	f242 001b 	movw	r0, #8219	; 0x201b
   1636a:	e7eb      	b.n	16344 <le_ltk_request+0x84>
   1636c:	0002e10d 	.word	0x0002e10d
   16370:	0002e479 	.word	0x0002e479

00016374 <le_conn_param_neg_reply>:
{
   16374:	b570      	push	{r4, r5, r6, lr}
   16376:	4606      	mov	r6, r0
   16378:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1637a:	f242 0021 	movw	r0, #8225	; 0x2021
   1637e:	2103      	movs	r1, #3
   16380:	f7ff fca8 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   16384:	4604      	mov	r4, r0
   16386:	b928      	cbnz	r0, 16394 <le_conn_param_neg_reply+0x20>
}
   16388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   1638c:	4808      	ldr	r0, [pc, #32]	; (163b0 <le_conn_param_neg_reply+0x3c>)
   1638e:	2145      	movs	r1, #69	; 0x45
   16390:	f012 ba06 	b.w	287a0 <z_log_minimal_printk>
   16394:	2103      	movs	r1, #3
   16396:	3008      	adds	r0, #8
   16398:	f006 fea4 	bl	1d0e4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1639c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1639e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   163a0:	4621      	mov	r1, r4
   163a2:	f242 0021 	movw	r0, #8225	; 0x2021
}
   163a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   163aa:	f7ff bf61 	b.w	16270 <bt_hci_cmd_send>
   163ae:	bf00      	nop
   163b0:	0002e495 	.word	0x0002e495

000163b4 <le_conn_param_req>:
{
   163b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   163b6:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   163b8:	78d9      	ldrb	r1, [r3, #3]
   163ba:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   163bc:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   163be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   163c2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   163c6:	7959      	ldrb	r1, [r3, #5]
   163c8:	791a      	ldrb	r2, [r3, #4]
   163ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   163ce:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   163d2:	799a      	ldrb	r2, [r3, #6]
   163d4:	79d9      	ldrb	r1, [r3, #7]
   163d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   163da:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   163de:	7a1a      	ldrb	r2, [r3, #8]
   163e0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   163e2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   163e4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   163e8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   163ea:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   163ee:	f001 fc2d 	bl	17c4c <bt_conn_lookup_handle>
	if (!conn) {
   163f2:	4606      	mov	r6, r0
   163f4:	b950      	cbnz	r0, 1640c <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   163f6:	481d      	ldr	r0, [pc, #116]	; (1646c <le_conn_param_req+0xb8>)
   163f8:	2145      	movs	r1, #69	; 0x45
   163fa:	4622      	mov	r2, r4
   163fc:	f012 f9d0 	bl	287a0 <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16400:	2102      	movs	r1, #2
   16402:	4620      	mov	r0, r4
   16404:	f7ff ffb6 	bl	16374 <le_conn_param_neg_reply>
}
   16408:	b003      	add	sp, #12
   1640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1640c:	4669      	mov	r1, sp
   1640e:	f001 fda5 	bl	17f5c <le_param_req>
   16412:	b938      	cbnz	r0, 16424 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16414:	211e      	movs	r1, #30
   16416:	4620      	mov	r0, r4
   16418:	f7ff ffac 	bl	16374 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1641c:	4630      	mov	r0, r6
   1641e:	f001 fbe5 	bl	17bec <bt_conn_unref>
   16422:	e7f1      	b.n	16408 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16424:	210e      	movs	r1, #14
   16426:	f242 0020 	movw	r0, #8224	; 0x2020
   1642a:	f7ff fc53 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   1642e:	4605      	mov	r5, r0
   16430:	2800      	cmp	r0, #0
   16432:	d0f3      	beq.n	1641c <le_conn_param_req+0x68>
   16434:	210e      	movs	r1, #14
   16436:	3008      	adds	r0, #8
   16438:	f006 fe54 	bl	1d0e4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1643c:	220e      	movs	r2, #14
   1643e:	4604      	mov	r4, r0
   16440:	2100      	movs	r1, #0
   16442:	f015 febf 	bl	2c1c4 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16446:	f8bd 3000 	ldrh.w	r3, [sp]
   1644a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1644c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   16450:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16452:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   16456:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16458:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1645c:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1645e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16460:	4629      	mov	r1, r5
   16462:	f242 0020 	movw	r0, #8224	; 0x2020
   16466:	f7ff ff03 	bl	16270 <bt_hci_cmd_send>
   1646a:	e7d7      	b.n	1641c <le_conn_param_req+0x68>
   1646c:	0002e10d 	.word	0x0002e10d

00016470 <hci_tx_thread>:
{
   16470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   16474:	f8df 8118 	ldr.w	r8, [pc, #280]	; 16590 <hci_tx_thread+0x120>
		BT_ASSERT(err == 0);
   16478:	f8df 9118 	ldr.w	r9, [pc, #280]	; 16594 <hci_tx_thread+0x124>
			ev_count += bt_conn_prepare_events(&events[1]);
   1647c:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   16480:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16484:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   16486:	f36f 3352 	bfc	r3, #13, #6
   1648a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1648e:	f001 fb75 	bl	17b7c <bt_conn_prepare_events>
   16492:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   16494:	483e      	ldr	r0, [pc, #248]	; (16590 <hci_tx_thread+0x120>)
   16496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1649a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1649e:	4629      	mov	r1, r5
   164a0:	f00e fc3e 	bl	24d20 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   164a4:	b158      	cbz	r0, 164be <hci_tx_thread+0x4e>
   164a6:	483c      	ldr	r0, [pc, #240]	; (16598 <hci_tx_thread+0x128>)
   164a8:	f640 12d3 	movw	r2, #2515	; 0x9d3
   164ac:	4649      	mov	r1, r9
   164ae:	f012 f969 	bl	28784 <assert_print>
   164b2:	4040      	eors	r0, r0
   164b4:	f380 8811 	msr	BASEPRI, r0
   164b8:	f04f 0003 	mov.w	r0, #3
   164bc:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   164be:	4f37      	ldr	r7, [pc, #220]	; (1659c <hci_tx_thread+0x12c>)
{
   164c0:	4e33      	ldr	r6, [pc, #204]	; (16590 <hci_tx_thread+0x120>)
   164c2:	f507 7b90 	add.w	fp, r7, #288	; 0x120
	for (; count; ev++, count--) {
   164c6:	b915      	cbnz	r5, 164ce <hci_tx_thread+0x5e>
	z_impl_k_yield();
   164c8:	f00d fc6c 	bl	23da4 <z_impl_k_yield>
	while (1) {
   164cc:	e7d8      	b.n	16480 <hci_tx_thread+0x10>
		switch (ev->state) {
   164ce:	68f2      	ldr	r2, [r6, #12]
   164d0:	f3c2 3245 	ubfx	r2, r2, #13, #6
   164d4:	2a01      	cmp	r2, #1
   164d6:	d94c      	bls.n	16572 <hci_tx_thread+0x102>
   164d8:	2a04      	cmp	r2, #4
   164da:	d154      	bne.n	16586 <hci_tx_thread+0x116>
			if (ev->tag == BT_EVENT_CMD_TX) {
   164dc:	7b33      	ldrb	r3, [r6, #12]
   164de:	2b00      	cmp	r3, #0
   164e0:	d14a      	bne.n	16578 <hci_tx_thread+0x108>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   164e2:	482f      	ldr	r0, [pc, #188]	; (165a0 <hci_tx_thread+0x130>)
   164e4:	2200      	movs	r2, #0
   164e6:	2300      	movs	r3, #0
   164e8:	f006 fb96 	bl	1cc18 <net_buf_get>
	BT_ASSERT(buf);
   164ec:	4604      	mov	r4, r0
   164ee:	b958      	cbnz	r0, 16508 <hci_tx_thread+0x98>
   164f0:	4829      	ldr	r0, [pc, #164]	; (16598 <hci_tx_thread+0x128>)
   164f2:	f640 126c 	movw	r2, #2412	; 0x96c
   164f6:	4649      	mov	r1, r9
   164f8:	f012 f944 	bl	28784 <assert_print>
   164fc:	4040      	eors	r0, r0
   164fe:	f380 8811 	msr	BASEPRI, r0
   16502:	f04f 0003 	mov.w	r0, #3
   16506:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   16508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1650c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16510:	4658      	mov	r0, fp
   16512:	f00c f8e7 	bl	226e4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   16516:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   1651a:	b153      	cbz	r3, 16532 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
   1651c:	4821      	ldr	r0, [pc, #132]	; (165a4 <hci_tx_thread+0x134>)
   1651e:	2145      	movs	r1, #69	; 0x45
   16520:	f012 f93e 	bl	287a0 <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   16524:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   16528:	f006 fcc6 	bl	1ceb8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1652c:	2300      	movs	r3, #0
   1652e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   16532:	4620      	mov	r0, r4
   16534:	f006 fd04 	bl	1cf40 <net_buf_ref>
   16538:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   1653c:	4620      	mov	r0, r4
   1653e:	f7ff fe8f 	bl	16260 <bt_send>
	if (err) {
   16542:	4602      	mov	r2, r0
   16544:	b1a8      	cbz	r0, 16572 <hci_tx_thread+0x102>
		BT_ERR("Unable to send to driver (err %d)", err);
   16546:	4818      	ldr	r0, [pc, #96]	; (165a8 <hci_tx_thread+0x138>)
   16548:	2145      	movs	r1, #69	; 0x45
   1654a:	f012 f929 	bl	287a0 <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   1654e:	4817      	ldr	r0, [pc, #92]	; (165ac <hci_tx_thread+0x13c>)
   16550:	f00c f88e 	bl	22670 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16554:	4620      	mov	r0, r4
   16556:	f006 fa25 	bl	1c9a4 <net_buf_id>
   1655a:	4b15      	ldr	r3, [pc, #84]	; (165b0 <hci_tx_thread+0x140>)
   1655c:	220c      	movs	r2, #12
   1655e:	fb02 3000 	mla	r0, r2, r0, r3
   16562:	211f      	movs	r1, #31
   16564:	8840      	ldrh	r0, [r0, #2]
   16566:	4622      	mov	r2, r4
   16568:	f7ff fa82 	bl	15a70 <hci_cmd_done>
		net_buf_unref(buf);
   1656c:	4620      	mov	r0, r4
   1656e:	f006 fca3 	bl	1ceb8 <net_buf_unref>
	for (; count; ev++, count--) {
   16572:	3614      	adds	r6, #20
   16574:	3d01      	subs	r5, #1
   16576:	e7a6      	b.n	164c6 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   16578:	2b01      	cmp	r3, #1
   1657a:	d1fa      	bne.n	16572 <hci_tx_thread+0x102>
					conn = CONTAINER_OF(ev->fifo,
   1657c:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1657e:	3838      	subs	r0, #56	; 0x38
   16580:	f001 ff18 	bl	183b4 <bt_conn_process_tx>
   16584:	e7f5      	b.n	16572 <hci_tx_thread+0x102>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   16586:	480b      	ldr	r0, [pc, #44]	; (165b4 <hci_tx_thread+0x144>)
   16588:	2157      	movs	r1, #87	; 0x57
   1658a:	f012 f909 	bl	287a0 <z_log_minimal_printk>
   1658e:	e7f0      	b.n	16572 <hci_tx_thread+0x102>
   16590:	2000060c 	.word	0x2000060c
   16594:	0002e1cd 	.word	0x0002e1cd
   16598:	0002d509 	.word	0x0002d509
   1659c:	20000350 	.word	0x20000350
   165a0:	20000494 	.word	0x20000494
   165a4:	0002e4b4 	.word	0x0002e4b4
   165a8:	0002e452 	.word	0x0002e452
   165ac:	20000470 	.word	0x20000470
   165b0:	20002704 	.word	0x20002704
   165b4:	0002e4d4 	.word	0x0002e4d4

000165b8 <hci_event_prio>:
{
   165b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   165bc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   165be:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   165c2:	4630      	mov	r0, r6
   165c4:	f014 feed 	bl	2b3a2 <net_buf_simple_headroom>
	state->len = buf->len;
   165c8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   165cc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   165d0:	4605      	mov	r5, r0
   165d2:	d80b      	bhi.n	165ec <hci_event_prio+0x34>
   165d4:	491b      	ldr	r1, [pc, #108]	; (16644 <hci_event_prio+0x8c>)
   165d6:	481c      	ldr	r0, [pc, #112]	; (16648 <hci_event_prio+0x90>)
   165d8:	f640 526f 	movw	r2, #3439	; 0xd6f
   165dc:	f012 f8d2 	bl	28784 <assert_print>
   165e0:	4040      	eors	r0, r0
   165e2:	f380 8811 	msr	BASEPRI, r0
   165e6:	f04f 0003 	mov.w	r0, #3
   165ea:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   165ec:	4630      	mov	r0, r6
   165ee:	2102      	movs	r1, #2
   165f0:	f006 fd5a 	bl	1d0a8 <net_buf_simple_pull_mem>
   165f4:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   165f6:	7800      	ldrb	r0, [r0, #0]
   165f8:	f012 ff40 	bl	2947c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   165fc:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   165fe:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16600:	d40b      	bmi.n	1661a <hci_event_prio+0x62>
   16602:	4910      	ldr	r1, [pc, #64]	; (16644 <hci_event_prio+0x8c>)
   16604:	4810      	ldr	r0, [pc, #64]	; (16648 <hci_event_prio+0x90>)
   16606:	f640 5273 	movw	r2, #3443	; 0xd73
   1660a:	f012 f8bb 	bl	28784 <assert_print>
   1660e:	4040      	eors	r0, r0
   16610:	f380 8811 	msr	BASEPRI, r0
   16614:	f04f 0003 	mov.w	r0, #3
   16618:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1661a:	2305      	movs	r3, #5
   1661c:	4a0b      	ldr	r2, [pc, #44]	; (1664c <hci_event_prio+0x94>)
   1661e:	7838      	ldrb	r0, [r7, #0]
   16620:	4621      	mov	r1, r4
   16622:	f7ff f91f 	bl	15864 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16626:	07b3      	lsls	r3, r6, #30
   16628:	d507      	bpl.n	1663a <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   1662a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1662c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16630:	fa10 f585 	uxtah	r5, r0, r5
   16634:	60a5      	str	r5, [r4, #8]
}
   16636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1663a:	4620      	mov	r0, r4
}
   1663c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16640:	f006 bc3a 	b.w	1ceb8 <net_buf_unref>
   16644:	0002e1cd 	.word	0x0002e1cd
   16648:	0002d509 	.word	0x0002d509
   1664c:	0002ca74 	.word	0x0002ca74

00016650 <bt_recv>:
{
   16650:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16652:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   16654:	2a01      	cmp	r2, #1
{
   16656:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   16658:	d005      	beq.n	16666 <bt_recv+0x16>
   1665a:	2a03      	cmp	r2, #3
   1665c:	d112      	bne.n	16684 <bt_recv+0x34>
			rx_queue_put(buf);
   1665e:	f7ff f879 	bl	15754 <rx_queue_put>
		return 0;
   16662:	2000      	movs	r0, #0
}
   16664:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16666:	6883      	ldr	r3, [r0, #8]
   16668:	7818      	ldrb	r0, [r3, #0]
   1666a:	f012 ff07 	bl	2947c <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1666e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16670:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16672:	d502      	bpl.n	1667a <bt_recv+0x2a>
			hci_event_prio(buf);
   16674:	4628      	mov	r0, r5
   16676:	f7ff ff9f 	bl	165b8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1667a:	f014 0002 	ands.w	r0, r4, #2
   1667e:	d0f1      	beq.n	16664 <bt_recv+0x14>
			rx_queue_put(buf);
   16680:	4628      	mov	r0, r5
   16682:	e7ec      	b.n	1665e <bt_recv+0xe>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16684:	4804      	ldr	r0, [pc, #16]	; (16698 <bt_recv+0x48>)
   16686:	2145      	movs	r1, #69	; 0x45
   16688:	f012 f88a 	bl	287a0 <z_log_minimal_printk>
		net_buf_unref(buf);
   1668c:	4628      	mov	r0, r5
   1668e:	f006 fc13 	bl	1ceb8 <net_buf_unref>
		return -EINVAL;
   16692:	f06f 0015 	mvn.w	r0, #21
   16696:	e7e5      	b.n	16664 <bt_recv+0x14>
   16698:	0002e4fa 	.word	0x0002e4fa

0001669c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1669c:	4a08      	ldr	r2, [pc, #32]	; (166c0 <bt_hci_driver_register+0x24>)
{
   1669e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   166a0:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   166a4:	b930      	cbnz	r0, 166b4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   166a6:	68d9      	ldr	r1, [r3, #12]
   166a8:	b139      	cbz	r1, 166ba <bt_hci_driver_register+0x1e>
   166aa:	6959      	ldr	r1, [r3, #20]
   166ac:	b129      	cbz	r1, 166ba <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   166ae:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   166b2:	4770      	bx	lr
		return -EALREADY;
   166b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   166b8:	4770      	bx	lr
		return -EINVAL;
   166ba:	f06f 0015 	mvn.w	r0, #21
}
   166be:	4770      	bx	lr
   166c0:	20000350 	.word	0x20000350

000166c4 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   166c4:	4801      	ldr	r0, [pc, #4]	; (166cc <bt_finalize_init+0x8>)
   166c6:	2104      	movs	r1, #4
   166c8:	f012 bf03 	b.w	294d2 <atomic_or>
   166cc:	2000041c 	.word	0x2000041c

000166d0 <init_work>:
{
   166d0:	b510      	push	{r4, lr}
	err = bt_init();
   166d2:	f7fb f841 	bl	11758 <bt_init>
	if (ready_cb) {
   166d6:	4b03      	ldr	r3, [pc, #12]	; (166e4 <init_work+0x14>)
   166d8:	681b      	ldr	r3, [r3, #0]
   166da:	b113      	cbz	r3, 166e2 <init_work+0x12>
}
   166dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   166e0:	4718      	bx	r3
}
   166e2:	bd10      	pop	{r4, pc}
   166e4:	2000271c 	.word	0x2000271c

000166e8 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   166e8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   166ea:	4d34      	ldr	r5, [pc, #208]	; (167bc <bt_enable+0xd4>)
   166ec:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   166f0:	b088      	sub	sp, #32
   166f2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   166f4:	b943      	cbnz	r3, 16708 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
   166f6:	4832      	ldr	r0, [pc, #200]	; (167c0 <bt_enable+0xd8>)
   166f8:	2145      	movs	r1, #69	; 0x45
   166fa:	f012 f851 	bl	287a0 <z_log_minimal_printk>
		return -ENODEV;
   166fe:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   16702:	4620      	mov	r0, r4
   16704:	b008      	add	sp, #32
   16706:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16708:	f06f 0102 	mvn.w	r1, #2
   1670c:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   16710:	f012 fefa 	bl	29508 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16714:	2101      	movs	r1, #1
   16716:	f012 fedc 	bl	294d2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1671a:	07c3      	lsls	r3, r0, #31
   1671c:	d44a      	bmi.n	167b4 <bt_enable+0xcc>
		err = bt_settings_init();
   1671e:	f7fe febd 	bl	1549c <bt_settings_init>
		if (err) {
   16722:	4604      	mov	r4, r0
   16724:	2800      	cmp	r0, #0
   16726:	d1ec      	bne.n	16702 <bt_enable+0x1a>
	ready_cb = cb;
   16728:	4b26      	ldr	r3, [pc, #152]	; (167c4 <bt_enable+0xdc>)
   1672a:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1672c:	2201      	movs	r2, #1
   1672e:	4611      	mov	r1, r2
   16730:	f505 7090 	add.w	r0, r5, #288	; 0x120
   16734:	f015 fb59 	bl	2bdea <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   16738:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   1673c:	f015 fb33 	bl	2bda6 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16740:	2200      	movs	r2, #0
   16742:	2300      	movs	r3, #0
   16744:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16748:	f06f 0308 	mvn.w	r3, #8
   1674c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16750:	e9cd 4400 	strd	r4, r4, [sp]
   16754:	4b1c      	ldr	r3, [pc, #112]	; (167c8 <bt_enable+0xe0>)
   16756:	491d      	ldr	r1, [pc, #116]	; (167cc <bt_enable+0xe4>)
   16758:	9404      	str	r4, [sp, #16]
   1675a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1675e:	481c      	ldr	r0, [pc, #112]	; (167d0 <bt_enable+0xe8>)
   16760:	f00b fbee 	bl	21f40 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16764:	491b      	ldr	r1, [pc, #108]	; (167d4 <bt_enable+0xec>)
   16766:	481a      	ldr	r0, [pc, #104]	; (167d0 <bt_enable+0xe8>)
   16768:	f015 faf4 	bl	2bd54 <z_impl_k_thread_name_set>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1676c:	491a      	ldr	r1, [pc, #104]	; (167d8 <bt_enable+0xf0>)
   1676e:	481b      	ldr	r0, [pc, #108]	; (167dc <bt_enable+0xf4>)
   16770:	9400      	str	r4, [sp, #0]
   16772:	f06f 0307 	mvn.w	r3, #7
   16776:	f640 0298 	movw	r2, #2200	; 0x898
   1677a:	f00c fad9 	bl	22d30 <k_work_queue_start>
   1677e:	4918      	ldr	r1, [pc, #96]	; (167e0 <bt_enable+0xf8>)
   16780:	4816      	ldr	r0, [pc, #88]	; (167dc <bt_enable+0xf4>)
   16782:	f015 fae7 	bl	2bd54 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   16786:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   1678a:	68db      	ldr	r3, [r3, #12]
   1678c:	4798      	blx	r3
	if (err) {
   1678e:	4604      	mov	r4, r0
   16790:	b128      	cbz	r0, 1679e <bt_enable+0xb6>
		BT_ERR("HCI driver open failed (%d)", err);
   16792:	4602      	mov	r2, r0
   16794:	2145      	movs	r1, #69	; 0x45
   16796:	4813      	ldr	r0, [pc, #76]	; (167e4 <bt_enable+0xfc>)
   16798:	f012 f802 	bl	287a0 <z_log_minimal_printk>
		return err;
   1679c:	e7b1      	b.n	16702 <bt_enable+0x1a>
	if (!cb) {
   1679e:	b926      	cbnz	r6, 167aa <bt_enable+0xc2>
}
   167a0:	b008      	add	sp, #32
   167a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   167a6:	f7fa bfd7 	b.w	11758 <bt_init>
	k_work_submit(&bt_dev.init);
   167aa:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   167ae:	f00c faa1 	bl	22cf4 <k_work_submit>
	return 0;
   167b2:	e7a6      	b.n	16702 <bt_enable+0x1a>
		return -EALREADY;
   167b4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   167b8:	e7a3      	b.n	16702 <bt_enable+0x1a>
   167ba:	bf00      	nop
   167bc:	20000350 	.word	0x20000350
   167c0:	0002e61b 	.word	0x0002e61b
   167c4:	2000271c 	.word	0x2000271c
   167c8:	00016471 	.word	0x00016471
   167cc:	20005280 	.word	0x20005280
   167d0:	20001a50 	.word	0x20001a50
   167d4:	0002e639 	.word	0x0002e639
   167d8:	20004980 	.word	0x20004980
   167dc:	200019b0 	.word	0x200019b0
   167e0:	0002e63f 	.word	0x0002e63f
   167e4:	0002e645 	.word	0x0002e645

000167e8 <bt_is_ready>:
   167e8:	4b04      	ldr	r3, [pc, #16]	; (167fc <bt_is_ready+0x14>)
   167ea:	f3bf 8f5b 	dmb	ish
   167ee:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
   167f2:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   167f6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   167fa:	4770      	bx	lr
   167fc:	20000350 	.word	0x20000350

00016800 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   16800:	4800      	ldr	r0, [pc, #0]	; (16804 <bt_get_name+0x4>)
   16802:	4770      	bx	lr
   16804:	0002d4bd 	.word	0x0002d4bd

00016808 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   16808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1680a:	4f0b      	ldr	r7, [pc, #44]	; (16838 <id_find+0x30>)
{
   1680c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1680e:	2500      	movs	r5, #0
   16810:	79fb      	ldrb	r3, [r7, #7]
   16812:	b2ec      	uxtb	r4, r5
   16814:	42a3      	cmp	r3, r4
   16816:	d802      	bhi.n	1681e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   16818:	f06f 0401 	mvn.w	r4, #1
   1681c:	e009      	b.n	16832 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1681e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   16822:	2207      	movs	r2, #7
   16824:	4439      	add	r1, r7
   16826:	4630      	mov	r0, r6
   16828:	f015 fc81 	bl	2c12e <memcmp>
   1682c:	3501      	adds	r5, #1
   1682e:	2800      	cmp	r0, #0
   16830:	d1ee      	bne.n	16810 <id_find+0x8>
}
   16832:	4620      	mov	r0, r4
   16834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16836:	bf00      	nop
   16838:	20000350 	.word	0x20000350

0001683c <set_random_address>:
{
   1683c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1683e:	2206      	movs	r2, #6
   16840:	4912      	ldr	r1, [pc, #72]	; (1688c <set_random_address+0x50>)
   16842:	4605      	mov	r5, r0
   16844:	f015 fc73 	bl	2c12e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   16848:	4602      	mov	r2, r0
   1684a:	b1d0      	cbz	r0, 16882 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1684c:	2106      	movs	r1, #6
   1684e:	f242 0005 	movw	r0, #8197	; 0x2005
   16852:	f7ff fa3f 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   16856:	4604      	mov	r4, r0
   16858:	b1a8      	cbz	r0, 16886 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1685a:	2206      	movs	r2, #6
   1685c:	4629      	mov	r1, r5
   1685e:	3008      	adds	r0, #8
   16860:	f014 fdab 	bl	2b3ba <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   16864:	2200      	movs	r2, #0
   16866:	4621      	mov	r1, r4
   16868:	f242 0005 	movw	r0, #8197	; 0x2005
   1686c:	f7ff fa7a 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   16870:	4602      	mov	r2, r0
   16872:	b930      	cbnz	r0, 16882 <set_random_address+0x46>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   16874:	4805      	ldr	r0, [pc, #20]	; (1688c <set_random_address+0x50>)
   16876:	4629      	mov	r1, r5
   16878:	f012 ff41 	bl	296fe <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1687c:	2301      	movs	r3, #1
   1687e:	f800 3c01 	strb.w	r3, [r0, #-1]
}
   16882:	4610      	mov	r0, r2
   16884:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   16886:	f06f 0268 	mvn.w	r2, #104	; 0x68
   1688a:	e7fa      	b.n	16882 <set_random_address+0x46>
   1688c:	200003b1 	.word	0x200003b1

00016890 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   16890:	b530      	push	{r4, r5, lr}
   16892:	4604      	mov	r4, r0
   16894:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16896:	460d      	mov	r5, r1
   16898:	b1e1      	cbz	r1, 168d4 <id_create.constprop.0+0x44>
   1689a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1689c:	2207      	movs	r2, #7
   1689e:	a902      	add	r1, sp, #8
   168a0:	4628      	mov	r0, r5
   168a2:	9302      	str	r3, [sp, #8]
   168a4:	f8cd 300b 	str.w	r3, [sp, #11]
   168a8:	f015 fc41 	bl	2c12e <memcmp>
   168ac:	b190      	cbz	r0, 168d4 <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   168ae:	4815      	ldr	r0, [pc, #84]	; (16904 <id_create.constprop.0+0x74>)
   168b0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   168b4:	4629      	mov	r1, r5
   168b6:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   168b8:	f012 ff26 	bl	29708 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   168bc:	4812      	ldr	r0, [pc, #72]	; (16908 <id_create.constprop.0+0x78>)
   168be:	f012 ff03 	bl	296c8 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   168c2:	0742      	lsls	r2, r0, #29
   168c4:	f3c0 0380 	ubfx	r3, r0, #2, #1
   168c8:	d51a      	bpl.n	16900 <id_create.constprop.0+0x70>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   168ca:	f7fe fd9f 	bl	1540c <bt_settings_save_id>
	}

	return 0;
   168ce:	2000      	movs	r0, #0
}
   168d0:	b005      	add	sp, #20
   168d2:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   168d4:	4668      	mov	r0, sp
   168d6:	f012 fdc3 	bl	29460 <bt_addr_le_create_static>
			if (err) {
   168da:	2800      	cmp	r0, #0
   168dc:	d1f8      	bne.n	168d0 <id_create.constprop.0+0x40>
		} while (id_find(&new_addr) >= 0);
   168de:	4668      	mov	r0, sp
   168e0:	f7ff ff92 	bl	16808 <id_find>
   168e4:	2800      	cmp	r0, #0
   168e6:	daf5      	bge.n	168d4 <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   168e8:	4806      	ldr	r0, [pc, #24]	; (16904 <id_create.constprop.0+0x74>)
   168ea:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   168ee:	4420      	add	r0, r4
   168f0:	4669      	mov	r1, sp
   168f2:	f012 ff09 	bl	29708 <bt_addr_le_copy>
		if (addr) {
   168f6:	2d00      	cmp	r5, #0
   168f8:	d0e0      	beq.n	168bc <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   168fa:	4601      	mov	r1, r0
   168fc:	4628      	mov	r0, r5
   168fe:	e7db      	b.n	168b8 <id_create.constprop.0+0x28>
	return 0;
   16900:	4618      	mov	r0, r3
   16902:	e7e5      	b.n	168d0 <id_create.constprop.0+0x40>
   16904:	20000350 	.word	0x20000350
   16908:	2000041c 	.word	0x2000041c

0001690c <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1690c:	4b0a      	ldr	r3, [pc, #40]	; (16938 <bt_id_pending_keys_update+0x2c>)
   1690e:	f3bf 8f5b 	dmb	ish
   16912:	e853 2f00 	ldrex	r2, [r3]
   16916:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1691a:	e843 1000 	strex	r0, r1, [r3]
   1691e:	2800      	cmp	r0, #0
   16920:	d1f7      	bne.n	16912 <bt_id_pending_keys_update+0x6>
   16922:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   16926:	0413      	lsls	r3, r2, #16
   16928:	d504      	bpl.n	16934 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   1692a:	4904      	ldr	r1, [pc, #16]	; (1693c <bt_id_pending_keys_update+0x30>)
   1692c:	2200      	movs	r2, #0
   1692e:	2002      	movs	r0, #2
   16930:	f005 beec 	b.w	1c70c <bt_keys_foreach>
}
   16934:	4770      	bx	lr
   16936:	bf00      	nop
   16938:	2000041c 	.word	0x2000041c
   1693c:	0002982f 	.word	0x0002982f

00016940 <bt_id_add>:
{
   16940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16942:	4c50      	ldr	r4, [pc, #320]	; (16a84 <bt_id_add+0x144>)
   16944:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   16948:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   1694c:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1694e:	b10a      	cbz	r2, 16954 <bt_id_add+0x14>
   16950:	429a      	cmp	r2, r3
   16952:	d208      	bcs.n	16966 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   16954:	3301      	adds	r3, #1
   16956:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1695a:	7a2b      	ldrb	r3, [r5, #8]
   1695c:	f043 0304 	orr.w	r3, r3, #4
   16960:	722b      	strb	r3, [r5, #8]
}
   16962:	b003      	add	sp, #12
   16964:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16966:	2100      	movs	r1, #0
   16968:	2206      	movs	r2, #6
   1696a:	4608      	mov	r0, r1
   1696c:	f001 fc14 	bl	18198 <bt_conn_lookup_state_le>
	if (conn) {
   16970:	4606      	mov	r6, r0
   16972:	b1a8      	cbz	r0, 169a0 <bt_id_add+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16974:	f3bf 8f5b 	dmb	ish
   16978:	34cc      	adds	r4, #204	; 0xcc
   1697a:	e854 3f00 	ldrex	r3, [r4]
   1697e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   16982:	e844 3200 	strex	r2, r3, [r4]
   16986:	2a00      	cmp	r2, #0
   16988:	d1f7      	bne.n	1697a <bt_id_add+0x3a>
   1698a:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   1698e:	7a2b      	ldrb	r3, [r5, #8]
   16990:	f043 0301 	orr.w	r3, r3, #1
   16994:	722b      	strb	r3, [r5, #8]
}
   16996:	b003      	add	sp, #12
   16998:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1699c:	f001 b926 	b.w	17bec <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   169a0:	4601      	mov	r1, r0
   169a2:	4839      	ldr	r0, [pc, #228]	; (16a88 <bt_id_add+0x148>)
   169a4:	f000 fb64 	bl	17070 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   169a8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   169ac:	b143      	cbz	r3, 169c0 <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   169ae:	4630      	mov	r0, r6
   169b0:	f012 feed 	bl	2978e <addr_res_enable>
		if (err) {
   169b4:	b120      	cbz	r0, 169c0 <bt_id_add+0x80>
			BT_WARN("Failed to disable address resolution");
   169b6:	4835      	ldr	r0, [pc, #212]	; (16a8c <bt_id_add+0x14c>)
   169b8:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Set privacy mode command is not supported");
   169ba:	f011 fef1 	bl	287a0 <z_log_minimal_printk>
	if (err) {
   169be:	e01c      	b.n	169fa <bt_id_add+0xba>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   169c0:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   169c4:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   169c8:	429a      	cmp	r2, r3
   169ca:	d120      	bne.n	16a0e <bt_id_add+0xce>
		BT_WARN("Resolving list size exceeded. Switching to host.");
   169cc:	4830      	ldr	r0, [pc, #192]	; (16a90 <bt_id_add+0x150>)
   169ce:	2157      	movs	r1, #87	; 0x57
   169d0:	f011 fee6 	bl	287a0 <z_log_minimal_printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   169d4:	2200      	movs	r2, #0
   169d6:	4611      	mov	r1, r2
   169d8:	f242 0029 	movw	r0, #8233	; 0x2029
   169dc:	f7ff f9c2 	bl	15d64 <bt_hci_cmd_send_sync>
		if (err) {
   169e0:	b110      	cbz	r0, 169e8 <bt_id_add+0xa8>
			BT_ERR("Failed to clear resolution list");
   169e2:	482c      	ldr	r0, [pc, #176]	; (16a94 <bt_id_add+0x154>)
   169e4:	2145      	movs	r1, #69	; 0x45
   169e6:	e7e8      	b.n	169ba <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
   169e8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   169ec:	3301      	adds	r3, #1
   169ee:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   169f2:	7a2b      	ldrb	r3, [r5, #8]
   169f4:	f043 0304 	orr.w	r3, r3, #4
   169f8:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   169fa:	2001      	movs	r0, #1
   169fc:	f012 fec7 	bl	2978e <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16a00:	4825      	ldr	r0, [pc, #148]	; (16a98 <bt_id_add+0x158>)
   16a02:	2100      	movs	r1, #0
}
   16a04:	b003      	add	sp, #12
   16a06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16a0a:	f000 bb31 	b.w	17070 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   16a0e:	462a      	mov	r2, r5
   16a10:	1c6f      	adds	r7, r5, #1
   16a12:	f812 0b2a 	ldrb.w	r0, [r2], #42
   16a16:	4639      	mov	r1, r7
   16a18:	f012 fe7d 	bl	29716 <hci_id_add>
	if (err) {
   16a1c:	4606      	mov	r6, r0
   16a1e:	b110      	cbz	r0, 16a26 <bt_id_add+0xe6>
		BT_ERR("Failed to add IRK to controller");
   16a20:	481e      	ldr	r0, [pc, #120]	; (16a9c <bt_id_add+0x15c>)
   16a22:	2145      	movs	r1, #69	; 0x45
   16a24:	e7c9      	b.n	169ba <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
   16a26:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   16a2a:	3301      	adds	r3, #1
   16a2c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   16a30:	7a2b      	ldrb	r3, [r5, #8]
   16a32:	f043 0304 	orr.w	r3, r3, #4
   16a36:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   16a38:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   16a3c:	075b      	lsls	r3, r3, #29
   16a3e:	d402      	bmi.n	16a46 <bt_id_add+0x106>
		BT_WARN("Set privacy mode command is not supported");
   16a40:	4817      	ldr	r0, [pc, #92]	; (16aa0 <bt_id_add+0x160>)
   16a42:	2157      	movs	r1, #87	; 0x57
   16a44:	e7b9      	b.n	169ba <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
   16a46:	4639      	mov	r1, r7
   16a48:	4668      	mov	r0, sp
   16a4a:	f012 fe5d 	bl	29708 <bt_addr_le_copy>
	cp.mode = mode;
   16a4e:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   16a50:	2108      	movs	r1, #8
   16a52:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   16a56:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   16a5a:	f7ff f93b 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   16a5e:	4604      	mov	r4, r0
   16a60:	b910      	cbnz	r0, 16a68 <bt_id_add+0x128>
		BT_ERR("Failed to set privacy mode");
   16a62:	4810      	ldr	r0, [pc, #64]	; (16aa4 <bt_id_add+0x164>)
   16a64:	2145      	movs	r1, #69	; 0x45
   16a66:	e7a8      	b.n	169ba <bt_id_add+0x7a>
   16a68:	2208      	movs	r2, #8
   16a6a:	4669      	mov	r1, sp
   16a6c:	4410      	add	r0, r2
   16a6e:	f014 fca4 	bl	2b3ba <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   16a72:	4632      	mov	r2, r6
   16a74:	4621      	mov	r1, r4
   16a76:	f242 004e 	movw	r0, #8270	; 0x204e
   16a7a:	f7ff f973 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   16a7e:	2800      	cmp	r0, #0
   16a80:	d0bb      	beq.n	169fa <bt_id_add+0xba>
   16a82:	e7ee      	b.n	16a62 <bt_id_add+0x122>
   16a84:	20000350 	.word	0x20000350
   16a88:	000297bf 	.word	0x000297bf
   16a8c:	0002e69c 	.word	0x0002e69c
   16a90:	0002e6c6 	.word	0x0002e6c6
   16a94:	0002e6fc 	.word	0x0002e6fc
   16a98:	000296d5 	.word	0x000296d5
   16a9c:	0002e721 	.word	0x0002e721
   16aa0:	0002e746 	.word	0x0002e746
   16aa4:	0002e775 	.word	0x0002e775

00016aa8 <bt_id_del>:
{
   16aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   16aac:	4c41      	ldr	r4, [pc, #260]	; (16bb4 <bt_id_del+0x10c>)
   16aae:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   16ab2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   16ab6:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
   16ab8:	b112      	cbz	r2, 16ac0 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   16aba:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   16abc:	4293      	cmp	r3, r2
   16abe:	dd08      	ble.n	16ad2 <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   16ac0:	3b01      	subs	r3, #1
   16ac2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   16ac6:	7a2b      	ldrb	r3, [r5, #8]
   16ac8:	f023 0304 	bic.w	r3, r3, #4
   16acc:	722b      	strb	r3, [r5, #8]
}
   16ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16ad2:	2100      	movs	r1, #0
   16ad4:	2206      	movs	r2, #6
   16ad6:	4608      	mov	r0, r1
   16ad8:	f001 fb5e 	bl	18198 <bt_conn_lookup_state_le>
	if (conn) {
   16adc:	4606      	mov	r6, r0
   16ade:	b1a0      	cbz	r0, 16b0a <bt_id_del+0x62>
   16ae0:	f3bf 8f5b 	dmb	ish
   16ae4:	34cc      	adds	r4, #204	; 0xcc
   16ae6:	e854 3f00 	ldrex	r3, [r4]
   16aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   16aee:	e844 3200 	strex	r2, r3, [r4]
   16af2:	2a00      	cmp	r2, #0
   16af4:	d1f7      	bne.n	16ae6 <bt_id_del+0x3e>
   16af6:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   16afa:	7a2b      	ldrb	r3, [r5, #8]
   16afc:	f043 0302 	orr.w	r3, r3, #2
   16b00:	722b      	strb	r3, [r5, #8]
}
   16b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   16b06:	f001 b871 	b.w	17bec <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   16b0a:	4601      	mov	r1, r0
   16b0c:	482a      	ldr	r0, [pc, #168]	; (16bb8 <bt_id_del+0x110>)
   16b0e:	f000 faaf 	bl	17070 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16b12:	4630      	mov	r0, r6
   16b14:	f012 fe3b 	bl	2978e <addr_res_enable>
	if (err) {
   16b18:	4606      	mov	r6, r0
   16b1a:	b180      	cbz	r0, 16b3e <bt_id_del+0x96>
		BT_ERR("Disabling address resolution failed (err %d)", err);
   16b1c:	4602      	mov	r2, r0
   16b1e:	2145      	movs	r1, #69	; 0x45
   16b20:	4826      	ldr	r0, [pc, #152]	; (16bbc <bt_id_del+0x114>)
   16b22:	f011 fe3d 	bl	287a0 <z_log_minimal_printk>
	if (bt_dev.le.rl_entries) {
   16b26:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   16b2a:	b113      	cbz	r3, 16b32 <bt_id_del+0x8a>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   16b2c:	2001      	movs	r0, #1
   16b2e:	f012 fe2e 	bl	2978e <addr_res_enable>
}
   16b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16b36:	4822      	ldr	r0, [pc, #136]	; (16bc0 <bt_id_del+0x118>)
   16b38:	2100      	movs	r1, #0
   16b3a:	f000 ba99 	b.w	17070 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16b3e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   16b42:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   16b46:	429a      	cmp	r2, r3
   16b48:	d20c      	bcs.n	16b64 <bt_id_del+0xbc>
		bt_dev.le.rl_entries--;
   16b4a:	3b01      	subs	r3, #1
   16b4c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   16b50:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16b52:	491c      	ldr	r1, [pc, #112]	; (16bc4 <bt_id_del+0x11c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   16b54:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16b58:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   16b5a:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   16b5c:	2002      	movs	r0, #2
   16b5e:	f005 fdd5 	bl	1c70c <bt_keys_foreach>
		goto done;
   16b62:	e7e0      	b.n	16b26 <bt_id_del+0x7e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   16b64:	2107      	movs	r1, #7
   16b66:	f242 0028 	movw	r0, #8232	; 0x2028
   16b6a:	f7ff f8b3 	bl	15cd4 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   16b6e:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   16b72:	4607      	mov	r7, r0
   16b74:	b920      	cbnz	r0, 16b80 <bt_id_del+0xd8>
		BT_ERR("Failed to remove IRK from controller");
   16b76:	4814      	ldr	r0, [pc, #80]	; (16bc8 <bt_id_del+0x120>)
   16b78:	2145      	movs	r1, #69	; 0x45
   16b7a:	f011 fe11 	bl	287a0 <z_log_minimal_printk>
		goto done;
   16b7e:	e7d2      	b.n	16b26 <bt_id_del+0x7e>
	return net_buf_simple_add(&buf->b, len);
   16b80:	2107      	movs	r1, #7
   16b82:	3008      	adds	r0, #8
   16b84:	f006 faae 	bl	1d0e4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   16b88:	4641      	mov	r1, r8
   16b8a:	f012 fdbd 	bl	29708 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   16b8e:	4632      	mov	r2, r6
   16b90:	4639      	mov	r1, r7
   16b92:	f242 0028 	movw	r0, #8232	; 0x2028
   16b96:	f7ff f8e5 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   16b9a:	2800      	cmp	r0, #0
   16b9c:	d1eb      	bne.n	16b76 <bt_id_del+0xce>
	bt_dev.le.rl_entries--;
   16b9e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   16ba2:	3b01      	subs	r3, #1
   16ba4:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   16ba8:	7a2b      	ldrb	r3, [r5, #8]
   16baa:	f023 0304 	bic.w	r3, r3, #4
   16bae:	722b      	strb	r3, [r5, #8]
   16bb0:	e7b9      	b.n	16b26 <bt_id_del+0x7e>
   16bb2:	bf00      	nop
   16bb4:	20000350 	.word	0x20000350
   16bb8:	000297bf 	.word	0x000297bf
   16bbc:	0002e795 	.word	0x0002e795
   16bc0:	000296d5 	.word	0x000296d5
   16bc4:	00029779 	.word	0x00029779
   16bc8:	0002e7c7 	.word	0x0002e7c7

00016bcc <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   16bcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16bce:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16bd0:	4605      	mov	r5, r0
   16bd2:	b918      	cbnz	r0, 16bdc <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   16bd4:	b314      	cbz	r4, 16c1c <bt_id_create+0x50>
		return -EINVAL;
   16bd6:	f06f 0015 	mvn.w	r0, #21
   16bda:	e01d      	b.n	16c18 <bt_id_create+0x4c>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16bdc:	2300      	movs	r3, #0
   16bde:	2207      	movs	r2, #7
   16be0:	4669      	mov	r1, sp
   16be2:	9300      	str	r3, [sp, #0]
   16be4:	f8cd 3003 	str.w	r3, [sp, #3]
   16be8:	f015 faa1 	bl	2c12e <memcmp>
   16bec:	2800      	cmp	r0, #0
   16bee:	d0f1      	beq.n	16bd4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16bf0:	782b      	ldrb	r3, [r5, #0]
   16bf2:	2b01      	cmp	r3, #1
   16bf4:	d104      	bne.n	16c00 <bt_id_create+0x34>
   16bf6:	79ab      	ldrb	r3, [r5, #6]
   16bf8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16bfc:	2bc0      	cmp	r3, #192	; 0xc0
   16bfe:	d004      	beq.n	16c0a <bt_id_create+0x3e>
			BT_ERR("Only static random identity address supported");
   16c00:	4818      	ldr	r0, [pc, #96]	; (16c64 <bt_id_create+0x98>)
   16c02:	2145      	movs	r1, #69	; 0x45
   16c04:	f011 fdcc 	bl	287a0 <z_log_minimal_printk>
			return -EINVAL;
   16c08:	e7e5      	b.n	16bd6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   16c0a:	4628      	mov	r0, r5
   16c0c:	f7ff fdfc 	bl	16808 <id_find>
   16c10:	2800      	cmp	r0, #0
   16c12:	dbdf      	blt.n	16bd4 <bt_id_create+0x8>
			return -EALREADY;
   16c14:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   16c18:	b002      	add	sp, #8
   16c1a:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   16c1c:	4e12      	ldr	r6, [pc, #72]	; (16c68 <bt_id_create+0x9c>)
   16c1e:	79f3      	ldrb	r3, [r6, #7]
   16c20:	2b01      	cmp	r3, #1
   16c22:	d01c      	beq.n	16c5e <bt_id_create+0x92>
   16c24:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   16c28:	f012 fd4e 	bl	296c8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16c2c:	07c3      	lsls	r3, r0, #31
   16c2e:	d40b      	bmi.n	16c48 <bt_id_create+0x7c>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   16c30:	2d00      	cmp	r5, #0
   16c32:	d0d0      	beq.n	16bd6 <bt_id_create+0xa>
   16c34:	2207      	movs	r2, #7
   16c36:	4669      	mov	r1, sp
   16c38:	4628      	mov	r0, r5
   16c3a:	9400      	str	r4, [sp, #0]
   16c3c:	f8cd 4003 	str.w	r4, [sp, #3]
   16c40:	f015 fa75 	bl	2c12e <memcmp>
   16c44:	2800      	cmp	r0, #0
   16c46:	d0c6      	beq.n	16bd6 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   16c48:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   16c4a:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   16c4c:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   16c4e:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   16c50:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   16c52:	f7ff fe1d 	bl	16890 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   16c56:	2800      	cmp	r0, #0
   16c58:	bf08      	it	eq
   16c5a:	4620      	moveq	r0, r4
   16c5c:	e7dc      	b.n	16c18 <bt_id_create+0x4c>
		return -ENOMEM;
   16c5e:	f06f 000b 	mvn.w	r0, #11
   16c62:	e7d9      	b.n	16c18 <bt_id_create+0x4c>
   16c64:	0002e7f1 	.word	0x0002e7f1
   16c68:	20000350 	.word	0x20000350

00016c6c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   16c6c:	b570      	push	{r4, r5, r6, lr}
   16c6e:	b086      	sub	sp, #24
   16c70:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   16c72:	aa01      	add	r2, sp, #4
   16c74:	2100      	movs	r1, #0
   16c76:	f241 0009 	movw	r0, #4105	; 0x1009
   16c7a:	f7ff f873 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   16c7e:	4604      	mov	r4, r0
   16c80:	b130      	cbz	r0, 16c90 <bt_id_read_public_addr+0x24>
		BT_WARN("Failed to read public address");
   16c82:	4817      	ldr	r0, [pc, #92]	; (16ce0 <bt_id_read_public_addr+0x74>)
   16c84:	2157      	movs	r1, #87	; 0x57
   16c86:	f011 fd8b 	bl	287a0 <z_log_minimal_printk>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   16c8a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   16c8c:	b006      	add	sp, #24
   16c8e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16c90:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16c92:	9002      	str	r0, [sp, #8]
   16c94:	689d      	ldr	r5, [r3, #8]
   16c96:	f8ad 000c 	strh.w	r0, [sp, #12]
   16c9a:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   16c9c:	2206      	movs	r2, #6
   16c9e:	a902      	add	r1, sp, #8
   16ca0:	4628      	mov	r0, r5
   16ca2:	f015 fa44 	bl	2c12e <memcmp>
   16ca6:	b918      	cbnz	r0, 16cb0 <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
   16ca8:	9801      	ldr	r0, [sp, #4]
   16caa:	f006 f905 	bl	1ceb8 <net_buf_unref>
   16cae:	e7ec      	b.n	16c8a <bt_id_read_public_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   16cb0:	4b0c      	ldr	r3, [pc, #48]	; (16ce4 <bt_id_read_public_addr+0x78>)
   16cb2:	6818      	ldr	r0, [r3, #0]
   16cb4:	9004      	str	r0, [sp, #16]
   16cb6:	889b      	ldrh	r3, [r3, #4]
   16cb8:	f8ad 3014 	strh.w	r3, [sp, #20]
   16cbc:	2206      	movs	r2, #6
   16cbe:	a904      	add	r1, sp, #16
   16cc0:	4628      	mov	r0, r5
   16cc2:	f015 fa34 	bl	2c12e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16cc6:	2800      	cmp	r0, #0
   16cc8:	d0ee      	beq.n	16ca8 <bt_id_read_public_addr+0x3c>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   16cca:	4629      	mov	r1, r5
   16ccc:	1c70      	adds	r0, r6, #1
   16cce:	f012 fd16 	bl	296fe <bt_addr_copy>
	net_buf_unref(rsp);
   16cd2:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   16cd4:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   16cd6:	f006 f8ef 	bl	1ceb8 <net_buf_unref>
	return 1U;
   16cda:	2001      	movs	r0, #1
   16cdc:	e7d6      	b.n	16c8c <bt_id_read_public_addr+0x20>
   16cde:	bf00      	nop
   16ce0:	0002e824 	.word	0x0002e824
   16ce4:	0002c81e 	.word	0x0002c81e

00016ce8 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   16ce8:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   16cea:	4668      	mov	r0, sp
   16cec:	f7ff ffbe 	bl	16c6c <bt_id_read_public_addr>
   16cf0:	4b04      	ldr	r3, [pc, #16]	; (16d04 <bt_setup_public_id_addr+0x1c>)
   16cf2:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   16cf4:	b118      	cbz	r0, 16cfe <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   16cf6:	4669      	mov	r1, sp
   16cf8:	2000      	movs	r0, #0
   16cfa:	f7ff fdc9 	bl	16890 <id_create.constprop.0>
}
   16cfe:	b003      	add	sp, #12
   16d00:	f85d fb04 	ldr.w	pc, [sp], #4
   16d04:	20000350 	.word	0x20000350

00016d08 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   16d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16d0a:	4b1e      	ldr	r3, [pc, #120]	; (16d84 <bt_read_static_addr+0x7c>)
   16d0c:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   16d10:	f014 0401 	ands.w	r4, r4, #1
{
   16d14:	4605      	mov	r5, r0
   16d16:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16d18:	d104      	bne.n	16d24 <bt_read_static_addr+0x1c>
		BT_WARN("Read Static Addresses command not available");
   16d1a:	481b      	ldr	r0, [pc, #108]	; (16d88 <bt_read_static_addr+0x80>)
   16d1c:	2157      	movs	r1, #87	; 0x57
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   16d1e:	f011 fd3f 	bl	287a0 <z_log_minimal_printk>
   16d22:	e00c      	b.n	16d3e <bt_read_static_addr+0x36>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   16d24:	aa01      	add	r2, sp, #4
   16d26:	2100      	movs	r1, #0
   16d28:	f64f 4009 	movw	r0, #64521	; 0xfc09
   16d2c:	f7ff f81a 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   16d30:	4603      	mov	r3, r0
   16d32:	b138      	cbz	r0, 16d44 <bt_read_static_addr+0x3c>
		BT_WARN("Failed to read static addresses");
   16d34:	4815      	ldr	r0, [pc, #84]	; (16d8c <bt_read_static_addr+0x84>)
   16d36:	2157      	movs	r1, #87	; 0x57
   16d38:	f011 fd32 	bl	287a0 <z_log_minimal_printk>
		return 0;
   16d3c:	2400      	movs	r4, #0
	}

	return cnt;
}
   16d3e:	4620      	mov	r0, r4
   16d40:	b003      	add	sp, #12
   16d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
   16d44:	9801      	ldr	r0, [sp, #4]
   16d46:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   16d48:	7854      	ldrb	r4, [r2, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16d4a:	f04f 0c16 	mov.w	ip, #22
   16d4e:	42b4      	cmp	r4, r6
   16d50:	bf28      	it	cs
   16d52:	4634      	movcs	r4, r6
   16d54:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
   16d58:	42a3      	cmp	r3, r4
   16d5a:	db06      	blt.n	16d6a <bt_read_static_addr+0x62>
	net_buf_unref(rsp);
   16d5c:	f006 f8ac 	bl	1ceb8 <net_buf_unref>
	if (!cnt) {
   16d60:	2c00      	cmp	r4, #0
   16d62:	d1ec      	bne.n	16d3e <bt_read_static_addr+0x36>
		BT_WARN("No static addresses stored in controller");
   16d64:	480a      	ldr	r0, [pc, #40]	; (16d90 <bt_read_static_addr+0x88>)
   16d66:	2157      	movs	r1, #87	; 0x57
   16d68:	e7d9      	b.n	16d1e <bt_read_static_addr+0x16>
   16d6a:	1c96      	adds	r6, r2, #2
   16d6c:	fb0c 5103 	mla	r1, ip, r3, r5
   16d70:	f856 eb04 	ldr.w	lr, [r6], #4
   16d74:	f841 eb04 	str.w	lr, [r1], #4
   16d78:	42be      	cmp	r6, r7
   16d7a:	d1f9      	bne.n	16d70 <bt_read_static_addr+0x68>
   16d7c:	883e      	ldrh	r6, [r7, #0]
   16d7e:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   16d80:	3301      	adds	r3, #1
   16d82:	e7e9      	b.n	16d58 <bt_read_static_addr+0x50>
   16d84:	20000350 	.word	0x20000350
   16d88:	0002e847 	.word	0x0002e847
   16d8c:	0002e878 	.word	0x0002e878
   16d90:	0002e89d 	.word	0x0002e89d

00016d94 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   16d94:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   16d96:	4d14      	ldr	r5, [pc, #80]	; (16de8 <bt_setup_random_id_addr+0x54>)
   16d98:	79ec      	ldrb	r4, [r5, #7]
{
   16d9a:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   16d9c:	b9ec      	cbnz	r4, 16dda <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   16d9e:	2101      	movs	r1, #1
   16da0:	a802      	add	r0, sp, #8
   16da2:	f7ff ffb1 	bl	16d08 <bt_read_static_addr>
   16da6:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   16da8:	b1b8      	cbz	r0, 16dda <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   16daa:	2616      	movs	r6, #22
   16dac:	ab02      	add	r3, sp, #8
   16dae:	b2e2      	uxtb	r2, r4
   16db0:	fb06 3102 	mla	r1, r6, r2, r3
   16db4:	f10d 0001 	add.w	r0, sp, #1
   16db8:	f012 fca1 	bl	296fe <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   16dbc:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   16dbe:	4669      	mov	r1, sp
   16dc0:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   16dc2:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   16dc6:	f7ff fd63 	bl	16890 <id_create.constprop.0>
				if (err) {
   16dca:	b920      	cbnz	r0, 16dd6 <bt_setup_random_id_addr+0x42>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   16dcc:	79ea      	ldrb	r2, [r5, #7]
   16dce:	3401      	adds	r4, #1
   16dd0:	b2e3      	uxtb	r3, r4
   16dd2:	429a      	cmp	r2, r3
   16dd4:	d8ea      	bhi.n	16dac <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   16dd6:	b008      	add	sp, #32
   16dd8:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
   16dda:	2100      	movs	r1, #0
   16ddc:	4608      	mov	r0, r1
}
   16dde:	b008      	add	sp, #32
   16de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   16de4:	f7ff bef2 	b.w	16bcc <bt_id_create>
   16de8:	20000350 	.word	0x20000350

00016dec <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   16dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16df0:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   16df4:	7805      	ldrb	r5, [r0, #0]
{
   16df6:	460e      	mov	r6, r1
   16df8:	4690      	mov	r8, r2
   16dfa:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16dfc:	d026      	beq.n	16e4c <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   16dfe:	4c23      	ldr	r4, [pc, #140]	; (16e8c <bt_id_set_adv_own_addr+0xa0>)
   16e00:	b12a      	cbz	r2, 16e0e <bt_id_set_adv_own_addr+0x22>
   16e02:	0688      	lsls	r0, r1, #26
   16e04:	d503      	bpl.n	16e0e <bt_id_set_adv_own_addr+0x22>
   16e06:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   16e0a:	0659      	lsls	r1, r3, #25
   16e0c:	d53a      	bpl.n	16e84 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16e0e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   16e12:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   16e16:	5ce3      	ldrb	r3, [r4, r3]
   16e18:	2b01      	cmp	r3, #1
   16e1a:	d008      	beq.n	16e2e <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   16e1c:	eba9 0505 	sub.w	r5, r9, r5
   16e20:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16e22:	f1b8 0f00 	cmp.w	r8, #0
   16e26:	d10c      	bne.n	16e42 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   16e28:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   16e2a:	2000      	movs	r0, #0
   16e2c:	e007      	b.n	16e3e <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   16e2e:	2007      	movs	r0, #7
   16e30:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   16e34:	4420      	add	r0, r4
   16e36:	f7ff fd01 	bl	1683c <set_random_address>
				if (err) {
   16e3a:	2800      	cmp	r0, #0
   16e3c:	d0ee      	beq.n	16e1c <bt_id_set_adv_own_addr+0x30>
}
   16e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16e42:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   16e44:	bf48      	it	mi
   16e46:	f043 0302 	orrmi.w	r3, r3, #2
   16e4a:	e7ed      	b.n	16e28 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   16e4c:	074b      	lsls	r3, r1, #29
   16e4e:	d515      	bpl.n	16e7c <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16e50:	f8df 8038 	ldr.w	r8, [pc, #56]	; 16e8c <bt_id_set_adv_own_addr+0xa0>
   16e54:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   16e58:	00ee      	lsls	r6, r5, #3
   16e5a:	f818 3003 	ldrb.w	r3, [r8, r3]
   16e5e:	2b01      	cmp	r3, #1
   16e60:	d10a      	bne.n	16e78 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   16e62:	2007      	movs	r0, #7
   16e64:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   16e68:	4440      	add	r0, r8
   16e6a:	f7ff fce7 	bl	1683c <set_random_address>
			*own_addr_type = id_addr->type;
   16e6e:	1b75      	subs	r5, r6, r5
   16e70:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   16e74:	703b      	strb	r3, [r7, #0]
		if (err) {
   16e76:	e7e2      	b.n	16e3e <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   16e78:	4620      	mov	r0, r4
   16e7a:	e7f8      	b.n	16e6e <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   16e7c:	f012 fcc3 	bl	29806 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   16e80:	2301      	movs	r3, #1
   16e82:	e7f7      	b.n	16e74 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
   16e84:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16e88:	e7d9      	b.n	16e3e <bt_id_set_adv_own_addr+0x52>
   16e8a:	bf00      	nop
   16e8c:	20000350 	.word	0x20000350

00016e90 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   16e90:	6843      	ldr	r3, [r0, #4]
{
   16e92:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16e94:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   16e96:	0558      	lsls	r0, r3, #21
   16e98:	d502      	bpl.n	16ea0 <valid_adv_param+0x10>
		return false;
   16e9a:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   16e9c:	b003      	add	sp, #12
   16e9e:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16ea0:	6922      	ldr	r2, [r4, #16]
   16ea2:	b10a      	cbz	r2, 16ea8 <valid_adv_param+0x18>
   16ea4:	07d9      	lsls	r1, r3, #31
   16ea6:	d5f8      	bpl.n	16e9a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   16ea8:	4d1a      	ldr	r5, [pc, #104]	; (16f14 <valid_adv_param+0x84>)
   16eaa:	7820      	ldrb	r0, [r4, #0]
   16eac:	79eb      	ldrb	r3, [r5, #7]
   16eae:	4283      	cmp	r3, r0
   16eb0:	d9f3      	bls.n	16e9a <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   16eb2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16eb6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   16eb8:	2207      	movs	r2, #7
   16eba:	4669      	mov	r1, sp
   16ebc:	4428      	add	r0, r5
   16ebe:	9300      	str	r3, [sp, #0]
   16ec0:	f8cd 3003 	str.w	r3, [sp, #3]
   16ec4:	f015 f933 	bl	2c12e <memcmp>
	if (param->id >= bt_dev.id_count ||
   16ec8:	2800      	cmp	r0, #0
   16eca:	d0e6      	beq.n	16e9a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16ecc:	6860      	ldr	r0, [r4, #4]
   16ece:	07c2      	lsls	r2, r0, #31
   16ed0:	d406      	bmi.n	16ee0 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   16ed2:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   16ed6:	2b08      	cmp	r3, #8
   16ed8:	d802      	bhi.n	16ee0 <valid_adv_param+0x50>
   16eda:	68a3      	ldr	r3, [r4, #8]
   16edc:	2b9f      	cmp	r3, #159	; 0x9f
   16ede:	d9dc      	bls.n	16e9a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   16ee0:	f010 0f30 	tst.w	r0, #48	; 0x30
   16ee4:	d002      	beq.n	16eec <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   16ee6:	6923      	ldr	r3, [r4, #16]
   16ee8:	2b00      	cmp	r3, #0
   16eea:	d0d6      	beq.n	16e9a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   16eec:	06c3      	lsls	r3, r0, #27
   16eee:	d401      	bmi.n	16ef4 <valid_adv_param+0x64>
   16ef0:	6923      	ldr	r3, [r4, #16]
   16ef2:	b943      	cbnz	r3, 16f06 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   16ef4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   16ef8:	429a      	cmp	r2, r3
   16efa:	d8ce      	bhi.n	16e9a <valid_adv_param+0xa>
   16efc:	2a1f      	cmp	r2, #31
   16efe:	d9cc      	bls.n	16e9a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   16f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   16f04:	d8c9      	bhi.n	16e9a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   16f06:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   16f0a:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   16f0e:	bf18      	it	ne
   16f10:	2001      	movne	r0, #1
   16f12:	e7c3      	b.n	16e9c <valid_adv_param+0xc>
   16f14:	20000350 	.word	0x20000350

00016f18 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   16f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f1c:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   16f1e:	2120      	movs	r1, #32
{
   16f20:	4682      	mov	sl, r0
   16f22:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   16f24:	f7fe fed6 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   16f28:	4605      	mov	r5, r0
   16f2a:	2800      	cmp	r0, #0
   16f2c:	d056      	beq.n	16fdc <hci_set_ad+0xc4>
   16f2e:	2120      	movs	r1, #32
   16f30:	3008      	adds	r0, #8
   16f32:	f006 f8d7 	bl	1d0e4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   16f36:	2220      	movs	r2, #32
   16f38:	2100      	movs	r1, #0
   16f3a:	4681      	mov	r9, r0
   16f3c:	f015 f942 	bl	2c1c4 <memset>
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   16f40:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   16f44:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   16f48:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   16f4a:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   16f4c:	f8d4 8000 	ldr.w	r8, [r4]
   16f50:	2300      	movs	r3, #0
   16f52:	6862      	ldr	r2, [r4, #4]
   16f54:	4293      	cmp	r3, r2
   16f56:	d30d      	bcc.n	16f74 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   16f58:	9b00      	ldr	r3, [sp, #0]
   16f5a:	3408      	adds	r4, #8
   16f5c:	429c      	cmp	r4, r3
   16f5e:	d1f5      	bne.n	16f4c <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   16f60:	2200      	movs	r2, #0
   16f62:	4629      	mov	r1, r5
   16f64:	4650      	mov	r0, sl
	*data_len = set_data_len;
   16f66:	f889 6000 	strb.w	r6, [r9]
}
   16f6a:	b003      	add	sp, #12
   16f6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   16f70:	f7fe bef8 	b.w	15d64 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   16f74:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   16f78:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   16f7c:	1cb0      	adds	r0, r6, #2
   16f7e:	1811      	adds	r1, r2, r0
   16f80:	291f      	cmp	r1, #31
   16f82:	d914      	bls.n	16fae <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   16f84:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   16f88:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   16f8c:	d101      	bne.n	16f92 <hci_set_ad+0x7a>
   16f8e:	2a00      	cmp	r2, #0
   16f90:	dc0b      	bgt.n	16faa <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
   16f92:	4814      	ldr	r0, [pc, #80]	; (16fe4 <hci_set_ad+0xcc>)
   16f94:	2145      	movs	r1, #69	; 0x45
   16f96:	f011 fc03 	bl	287a0 <z_log_minimal_printk>
		net_buf_unref(buf);
   16f9a:	4628      	mov	r0, r5
   16f9c:	f005 ff8c 	bl	1ceb8 <net_buf_unref>
					return -EINVAL;
   16fa0:	f06f 0015 	mvn.w	r0, #21
}
   16fa4:	b003      	add	sp, #12
   16fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   16faa:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   16fae:	b2d7      	uxtb	r7, r2
   16fb0:	1c79      	adds	r1, r7, #1
   16fb2:	f80b 1006 	strb.w	r1, [fp, r6]
   16fb6:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   16fb8:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16fba:	fa5b f080 	uxtab	r0, fp, r0
   16fbe:	f80b c001 	strb.w	ip, [fp, r1]
   16fc2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   16fc6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   16fc8:	3702      	adds	r7, #2
   16fca:	f015 f8c0 	bl	2c14e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   16fce:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   16fd0:	443e      	add	r6, r7
   16fd2:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   16fd4:	3301      	adds	r3, #1
   16fd6:	f108 0808 	add.w	r8, r8, #8
   16fda:	e7ba      	b.n	16f52 <hci_set_ad+0x3a>
		return -ENOBUFS;
   16fdc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16fe0:	e7e0      	b.n	16fa4 <hci_set_ad+0x8c>
   16fe2:	bf00      	nop
   16fe4:	0002e8d1 	.word	0x0002e8d1

00016fe8 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   16fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   16fea:	4606      	mov	r6, r0
   16fec:	4b1e      	ldr	r3, [pc, #120]	; (17068 <le_adv_start_add_conn+0x80>)
   16fee:	f816 2b09 	ldrb.w	r2, [r6], #9
   16ff2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   16ff6:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16ff8:	2300      	movs	r3, #0
{
   16ffa:	4605      	mov	r5, r0
   16ffc:	2207      	movs	r2, #7
   16ffe:	460f      	mov	r7, r1
   17000:	4630      	mov	r0, r6
   17002:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17004:	9300      	str	r3, [sp, #0]
   17006:	f8cd 3003 	str.w	r3, [sp, #3]
   1700a:	f015 f890 	bl	2c12e <memcmp>
   1700e:	782a      	ldrb	r2, [r5, #0]
   17010:	4604      	mov	r4, r0
   17012:	b9a8      	cbnz	r0, 17040 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   17014:	4b15      	ldr	r3, [pc, #84]	; (1706c <le_adv_start_add_conn+0x84>)
   17016:	6818      	ldr	r0, [r3, #0]
   17018:	8899      	ldrh	r1, [r3, #4]
   1701a:	9002      	str	r0, [sp, #8]
   1701c:	799b      	ldrb	r3, [r3, #6]
   1701e:	f8ad 100c 	strh.w	r1, [sp, #12]
   17022:	4610      	mov	r0, r2
   17024:	a902      	add	r1, sp, #8
   17026:	f88d 300e 	strb.w	r3, [sp, #14]
   1702a:	f001 f85d 	bl	180e8 <bt_conn_add_le>
		if (!conn) {
   1702e:	4605      	mov	r5, r0
   17030:	b1b8      	cbz	r0, 17062 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   17032:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   17034:	f000 fe12 	bl	17c5c <bt_conn_set_state>
	*out_conn = conn;
   17038:	603d      	str	r5, [r7, #0]
	return 0;
}
   1703a:	4620      	mov	r0, r4
   1703c:	b005      	add	sp, #20
   1703e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   17040:	4631      	mov	r1, r6
   17042:	4610      	mov	r0, r2
   17044:	f001 f88c 	bl	18160 <bt_conn_exists_le>
   17048:	4604      	mov	r4, r0
   1704a:	b938      	cbnz	r0, 1705c <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1704c:	7828      	ldrb	r0, [r5, #0]
   1704e:	4631      	mov	r1, r6
   17050:	f001 f84a 	bl	180e8 <bt_conn_add_le>
	if (!conn) {
   17054:	4605      	mov	r5, r0
   17056:	b120      	cbz	r0, 17062 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   17058:	2105      	movs	r1, #5
   1705a:	e7eb      	b.n	17034 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   1705c:	f06f 0415 	mvn.w	r4, #21
   17060:	e7eb      	b.n	1703a <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   17062:	f06f 040b 	mvn.w	r4, #11
   17066:	e7e8      	b.n	1703a <le_adv_start_add_conn+0x52>
   17068:	20000350 	.word	0x20000350
   1706c:	0002c824 	.word	0x0002c824

00017070 <bt_le_ext_adv_foreach>:
{
   17070:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   17072:	4801      	ldr	r0, [pc, #4]	; (17078 <bt_le_ext_adv_foreach+0x8>)
   17074:	4718      	bx	r3
   17076:	bf00      	nop
   17078:	20000368 	.word	0x20000368

0001707c <bt_le_adv_lookup_legacy>:
}
   1707c:	4800      	ldr	r0, [pc, #0]	; (17080 <bt_le_adv_lookup_legacy+0x4>)
   1707e:	4770      	bx	lr
   17080:	20000368 	.word	0x20000368

00017084 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   17084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   17088:	690e      	ldr	r6, [r1, #16]
{
   1708a:	b08f      	sub	sp, #60	; 0x3c
   1708c:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   1708e:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   17090:	ebb6 0903 	subs.w	r9, r6, r3
{
   17094:	4605      	mov	r5, r0
   17096:	488b      	ldr	r0, [pc, #556]	; (172c4 <bt_le_adv_start_legacy+0x240>)
   17098:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   1709a:	bf18      	it	ne
   1709c:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   170a0:	9307      	str	r3, [sp, #28]
   170a2:	f012 fbe5 	bl	29870 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   170a6:	0747      	lsls	r7, r0, #29
{
   170a8:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   170aa:	f140 8100 	bpl.w	172ae <bt_le_adv_start_legacy+0x22a>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   170ae:	4608      	mov	r0, r1
   170b0:	f7ff feee 	bl	16e90 <valid_adv_param>
   170b4:	b928      	cbnz	r0, 170c2 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   170b6:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   170ba:	4658      	mov	r0, fp
   170bc:	b00f      	add	sp, #60	; 0x3c
   170be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   170c2:	4620      	mov	r0, r4
   170c4:	f012 fbb1 	bl	2982a <bt_id_adv_random_addr_check>
   170c8:	4680      	mov	r8, r0
   170ca:	2800      	cmp	r0, #0
   170cc:	d0f3      	beq.n	170b6 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   170ce:	f105 0710 	add.w	r7, r5, #16
   170d2:	4638      	mov	r0, r7
   170d4:	f012 fbcc 	bl	29870 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   170d8:	f3c0 1380 	ubfx	r3, r0, #6, #1
   170dc:	0640      	lsls	r0, r0, #25
   170de:	f100 80e9 	bmi.w	172b4 <bt_le_adv_start_legacy+0x230>
	(void)memset(&set_param, 0, sizeof(set_param));
   170e2:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   170e6:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   170ea:	68a3      	ldr	r3, [r4, #8]
   170ec:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   170f0:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   170f2:	68e3      	ldr	r3, [r4, #12]
   170f4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   170f8:	f012 fbab 	bl	29852 <get_adv_channel_map>
	if (adv->id != param->id) {
   170fc:	782a      	ldrb	r2, [r5, #0]
   170fe:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17100:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   17104:	429a      	cmp	r2, r3
   17106:	d004      	beq.n	17112 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17108:	486e      	ldr	r0, [pc, #440]	; (172c4 <bt_le_adv_start_legacy+0x240>)
   1710a:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1710e:	f012 fbb5 	bl	2987c <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   17112:	4a6d      	ldr	r2, [pc, #436]	; (172c8 <bt_le_adv_start_legacy+0x244>)
	adv->id = param->id;
   17114:	7823      	ldrb	r3, [r4, #0]
   17116:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   17118:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1711c:	6861      	ldr	r1, [r4, #4]
   1711e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   17122:	464a      	mov	r2, r9
   17124:	4628      	mov	r0, r5
   17126:	f7ff fe61 	bl	16dec <bt_id_set_adv_own_addr>
	if (err) {
   1712a:	4683      	mov	fp, r0
   1712c:	2800      	cmp	r0, #0
   1712e:	d1c4      	bne.n	170ba <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   17130:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   17134:	2e00      	cmp	r6, #0
   17136:	d04a      	beq.n	171ce <bt_le_adv_start_legacy+0x14a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   17138:	6921      	ldr	r1, [r4, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1713a:	f012 fbae 	bl	2989a <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   1713e:	4620      	mov	r0, r4
   17140:	f012 fc40 	bl	299c4 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17144:	6863      	ldr	r3, [r4, #4]
   17146:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   17148:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1714a:	d548      	bpl.n	171de <bt_le_adv_start_legacy+0x15a>
		if (dir_adv) {
   1714c:	2e00      	cmp	r6, #0
   1714e:	d043      	beq.n	171d8 <bt_le_adv_start_legacy+0x154>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   17150:	f013 0f10 	tst.w	r3, #16
   17154:	bf14      	ite	ne
   17156:	2304      	movne	r3, #4
   17158:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1715a:	6921      	ldr	r1, [r4, #16]
   1715c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   17160:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   17164:	f012 fb99 	bl	2989a <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   17168:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1716c:	210f      	movs	r1, #15
   1716e:	f242 0006 	movw	r0, #8198	; 0x2006
   17172:	f7fe fdaf 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   17176:	4683      	mov	fp, r0
   17178:	2800      	cmp	r0, #0
   1717a:	f000 809e 	beq.w	172ba <bt_le_adv_start_legacy+0x236>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1717e:	220f      	movs	r2, #15
   17180:	a90a      	add	r1, sp, #40	; 0x28
   17182:	3008      	adds	r0, #8
   17184:	f014 f919 	bl	2b3ba <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   17188:	2200      	movs	r2, #0
   1718a:	4659      	mov	r1, fp
   1718c:	f242 0006 	movw	r0, #8198	; 0x2006
   17190:	f7fe fde8 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   17194:	2800      	cmp	r0, #0
   17196:	f040 8093 	bne.w	172c0 <bt_le_adv_start_legacy+0x23c>
	if (!dir_adv) {
   1719a:	b386      	cbz	r6, 171fe <bt_le_adv_start_legacy+0x17a>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1719c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1719e:	07db      	lsls	r3, r3, #31
   171a0:	d43b      	bmi.n	1721a <bt_le_adv_start_legacy+0x196>
	return bt_le_adv_set_enable_legacy(adv, enable);
   171a2:	2101      	movs	r1, #1
   171a4:	4628      	mov	r0, r5
   171a6:	f012 fc1d 	bl	299e4 <bt_le_adv_set_enable_legacy>
	if (err) {
   171aa:	4683      	mov	fp, r0
   171ac:	2800      	cmp	r0, #0
   171ae:	d077      	beq.n	172a0 <bt_le_adv_start_legacy+0x21c>
		BT_ERR("Failed to start advertiser");
   171b0:	4846      	ldr	r0, [pc, #280]	; (172cc <bt_le_adv_start_legacy+0x248>)
   171b2:	2145      	movs	r1, #69	; 0x45
   171b4:	f011 faf4 	bl	287a0 <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   171b8:	9807      	ldr	r0, [sp, #28]
   171ba:	2800      	cmp	r0, #0
   171bc:	f43f af7d 	beq.w	170ba <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   171c0:	2100      	movs	r1, #0
   171c2:	f000 fd4b 	bl	17c5c <bt_conn_set_state>
			bt_conn_unref(conn);
   171c6:	9807      	ldr	r0, [sp, #28]
   171c8:	f000 fd10 	bl	17bec <bt_conn_unref>
   171cc:	e775      	b.n	170ba <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   171ce:	9608      	str	r6, [sp, #32]
   171d0:	a908      	add	r1, sp, #32
   171d2:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   171d6:	e7b0      	b.n	1713a <bt_le_adv_start_legacy+0xb6>
			set_param.type = BT_HCI_ADV_IND;
   171d8:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   171dc:	e7c6      	b.n	1716c <bt_le_adv_start_legacy+0xe8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   171de:	059a      	lsls	r2, r3, #22
   171e0:	d403      	bmi.n	171ea <bt_le_adv_start_legacy+0x166>
   171e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   171e4:	b90b      	cbnz	r3, 171ea <bt_le_adv_start_legacy+0x166>
   171e6:	2802      	cmp	r0, #2
   171e8:	d103      	bne.n	171f2 <bt_le_adv_start_legacy+0x16e>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   171ea:	2302      	movs	r3, #2
   171ec:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   171f0:	e7bc      	b.n	1716c <bt_le_adv_start_legacy+0xe8>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   171f2:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   171f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   171f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   171fc:	e7b6      	b.n	1716c <bt_le_adv_start_legacy+0xe8>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   171fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17200:	9300      	str	r3, [sp, #0]
   17202:	e9cd 8901 	strd	r8, r9, [sp, #4]
   17206:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17208:	9905      	ldr	r1, [sp, #20]
   1720a:	4652      	mov	r2, sl
   1720c:	4628      	mov	r0, r5
   1720e:	f012 fb62 	bl	298d6 <le_adv_update.constprop.0>
		if (err) {
   17212:	4683      	mov	fp, r0
   17214:	2800      	cmp	r0, #0
   17216:	d0c1      	beq.n	1719c <bt_le_adv_start_legacy+0x118>
   17218:	e74f      	b.n	170ba <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1721a:	a907      	add	r1, sp, #28
   1721c:	4628      	mov	r0, r5
   1721e:	f7ff fee3 	bl	16fe8 <le_adv_start_add_conn>
		if (err) {
   17222:	4683      	mov	fp, r0
   17224:	2800      	cmp	r0, #0
   17226:	d0bc      	beq.n	171a2 <bt_le_adv_start_legacy+0x11e>
			if (err == -ENOMEM && !dir_adv &&
   17228:	f110 0f0c 	cmn.w	r0, #12
   1722c:	f47f af45 	bne.w	170ba <bt_le_adv_start_legacy+0x36>
   17230:	2e00      	cmp	r6, #0
   17232:	f47f af42 	bne.w	170ba <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   17236:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   17238:	0798      	lsls	r0, r3, #30
   1723a:	f53f af3e 	bmi.w	170ba <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1723e:	6862      	ldr	r2, [r4, #4]
   17240:	f082 0202 	eor.w	r2, r2, #2
   17244:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   17248:	f00b 0201 	and.w	r2, fp, #1
   1724c:	210d      	movs	r1, #13
   1724e:	4638      	mov	r0, r7
   17250:	f012 fb2a 	bl	298a8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   17254:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   17258:	425a      	negs	r2, r3
   1725a:	415a      	adcs	r2, r3
   1725c:	2107      	movs	r1, #7
   1725e:	4638      	mov	r0, r7
   17260:	f012 fb22 	bl	298a8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   17264:	f1a9 0102 	sub.w	r1, r9, #2
   17268:	424a      	negs	r2, r1
   1726a:	414a      	adcs	r2, r1
   1726c:	4638      	mov	r0, r7
   1726e:	2108      	movs	r1, #8
   17270:	f012 fb1a 	bl	298a8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   17274:	6862      	ldr	r2, [r4, #4]
   17276:	2109      	movs	r1, #9
   17278:	f002 0201 	and.w	r2, r2, #1
   1727c:	4638      	mov	r0, r7
   1727e:	f012 fb13 	bl	298a8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   17282:	4642      	mov	r2, r8
   17284:	210a      	movs	r1, #10
   17286:	4638      	mov	r0, r7
   17288:	f012 fb0e 	bl	298a8 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1728c:	6862      	ldr	r2, [r4, #4]
   1728e:	210c      	movs	r1, #12
   17290:	f3c2 0280 	ubfx	r2, r2, #2, #1
   17294:	4638      	mov	r0, r7
   17296:	f012 fb07 	bl	298a8 <atomic_set_bit_to>
	return 0;
   1729a:	f04f 0b00 	mov.w	fp, #0
   1729e:	e70c      	b.n	170ba <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   172a0:	9807      	ldr	r0, [sp, #28]
   172a2:	b108      	cbz	r0, 172a8 <bt_le_adv_start_legacy+0x224>
		bt_conn_unref(conn);
   172a4:	f000 fca2 	bl	17bec <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   172a8:	2e00      	cmp	r6, #0
   172aa:	d1cd      	bne.n	17248 <bt_le_adv_start_legacy+0x1c4>
   172ac:	e7c7      	b.n	1723e <bt_le_adv_start_legacy+0x1ba>
		return -EAGAIN;
   172ae:	f06f 0b0a 	mvn.w	fp, #10
   172b2:	e702      	b.n	170ba <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   172b4:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   172b8:	e6ff      	b.n	170ba <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   172ba:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   172be:	e6fc      	b.n	170ba <bt_le_adv_start_legacy+0x36>
   172c0:	4683      	mov	fp, r0
   172c2:	e6fa      	b.n	170ba <bt_le_adv_start_legacy+0x36>
   172c4:	2000041c 	.word	0x2000041c
   172c8:	20000350 	.word	0x20000350
   172cc:	0002e8ef 	.word	0x0002e8ef

000172d0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   172d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   172d2:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   172d4:	9a06      	ldr	r2, [sp, #24]
{
   172d6:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   172d8:	e9cd 3200 	strd	r3, r2, [sp]
   172dc:	462b      	mov	r3, r5
   172de:	460a      	mov	r2, r1
   172e0:	4601      	mov	r1, r0
   172e2:	4811      	ldr	r0, [pc, #68]	; (17328 <bt_le_adv_start+0x58>)
   172e4:	f7ff fece 	bl	17084 <bt_le_adv_start_legacy>
   172e8:	4621      	mov	r1, r4
   172ea:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   172ec:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   172ee:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   172f2:	429d      	cmp	r5, r3
   172f4:	d102      	bne.n	172fc <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   172f6:	4630      	mov	r0, r6
   172f8:	b002      	add	sp, #8
   172fa:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   172fc:	880a      	ldrh	r2, [r1, #0]
   172fe:	4282      	cmp	r2, r0
   17300:	d104      	bne.n	1730c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   17302:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   17304:	b112      	cbz	r2, 1730c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   17306:	7812      	ldrb	r2, [r2, #0]
   17308:	07d2      	lsls	r2, r2, #31
   1730a:	d402      	bmi.n	17312 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   1730c:	3301      	adds	r3, #1
   1730e:	3108      	adds	r1, #8
   17310:	e7ef      	b.n	172f2 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   17312:	4906      	ldr	r1, [pc, #24]	; (1732c <bt_le_adv_start+0x5c>)
   17314:	4806      	ldr	r0, [pc, #24]	; (17330 <bt_le_adv_start+0x60>)
   17316:	f00b fd75 	bl	22e04 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1731a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1731e:	2300      	movs	r3, #0
   17320:	4803      	ldr	r0, [pc, #12]	; (17330 <bt_le_adv_start+0x60>)
   17322:	f00b fe65 	bl	22ff0 <k_work_reschedule>
   17326:	e7e6      	b.n	172f6 <bt_le_adv_start+0x26>
   17328:	20000368 	.word	0x20000368
   1732c:	000173d5 	.word	0x000173d5
   17330:	20000380 	.word	0x20000380

00017334 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   17334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   17336:	4822      	ldr	r0, [pc, #136]	; (173c0 <bt_le_adv_stop+0x8c>)
   17338:	f012 fb7b 	bl	29a32 <bt_le_lim_adv_cancel_timeout>
   1733c:	4821      	ldr	r0, [pc, #132]	; (173c4 <bt_le_adv_stop+0x90>)
   1733e:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   17342:	f012 fa9b 	bl	2987c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17346:	481f      	ldr	r0, [pc, #124]	; (173c4 <bt_le_adv_stop+0x90>)
   17348:	f012 fa92 	bl	29870 <atomic_get>
   1734c:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1734e:	065a      	lsls	r2, r3, #25
   17350:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17354:	d531      	bpl.n	173ba <bt_le_adv_stop+0x86>
   17356:	481b      	ldr	r0, [pc, #108]	; (173c4 <bt_le_adv_stop+0x90>)
   17358:	f012 fa8a 	bl	29870 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1735c:	0583      	lsls	r3, r0, #22
   1735e:	d521      	bpl.n	173a4 <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17360:	2300      	movs	r3, #0
   17362:	4819      	ldr	r0, [pc, #100]	; (173c8 <bt_le_adv_stop+0x94>)
   17364:	9300      	str	r3, [sp, #0]
   17366:	2207      	movs	r2, #7
   17368:	4669      	mov	r1, sp
   1736a:	f8cd 3003 	str.w	r3, [sp, #3]
   1736e:	f014 fede 	bl	2c12e <memcmp>
   17372:	4b16      	ldr	r3, [pc, #88]	; (173cc <bt_le_adv_stop+0x98>)
   17374:	b9e8      	cbnz	r0, 173b2 <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   17376:	4a16      	ldr	r2, [pc, #88]	; (173d0 <bt_le_adv_stop+0x9c>)
   17378:	8891      	ldrh	r1, [r2, #4]
   1737a:	6810      	ldr	r0, [r2, #0]
   1737c:	7992      	ldrb	r2, [r2, #6]
   1737e:	f8ad 100c 	strh.w	r1, [sp, #12]
   17382:	f88d 200e 	strb.w	r2, [sp, #14]
   17386:	9002      	str	r0, [sp, #8]
   17388:	2204      	movs	r2, #4
   1738a:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1738c:	7e18      	ldrb	r0, [r3, #24]
   1738e:	f000 ff03 	bl	18198 <bt_conn_lookup_state_le>
   17392:	4604      	mov	r4, r0
	if (conn) {
   17394:	b130      	cbz	r0, 173a4 <bt_le_adv_stop+0x70>
		conn->err = status;
   17396:	2100      	movs	r1, #0
   17398:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1739a:	f000 fc5f 	bl	17c5c <bt_conn_set_state>
		bt_conn_unref(conn);
   1739e:	4620      	mov	r0, r4
   173a0:	f000 fc24 	bl	17bec <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   173a4:	4806      	ldr	r0, [pc, #24]	; (173c0 <bt_le_adv_stop+0x8c>)
   173a6:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   173a8:	b004      	add	sp, #16
   173aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   173ae:	f012 bb19 	b.w	299e4 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   173b2:	2205      	movs	r2, #5
   173b4:	f103 0121 	add.w	r1, r3, #33	; 0x21
   173b8:	e7e8      	b.n	1738c <bt_le_adv_stop+0x58>
}
   173ba:	b004      	add	sp, #16
   173bc:	bd10      	pop	{r4, pc}
   173be:	bf00      	nop
   173c0:	20000368 	.word	0x20000368
   173c4:	20000378 	.word	0x20000378
   173c8:	20000371 	.word	0x20000371
   173cc:	20000350 	.word	0x20000350
   173d0:	0002c824 	.word	0x0002c824

000173d4 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   173d4:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   173d6:	f7ff ffad 	bl	17334 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
}
   173da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = bt_le_adv_stop();
   173de:	4602      	mov	r2, r0
	BT_WARN("Failed to stop advertising: %d", err);
   173e0:	2157      	movs	r1, #87	; 0x57
   173e2:	4801      	ldr	r0, [pc, #4]	; (173e8 <adv_timeout+0x14>)
   173e4:	f011 b9dc 	b.w	287a0 <z_log_minimal_printk>
   173e8:	0002e90f 	.word	0x0002e90f

000173ec <bt_le_adv_resume>:
{
   173ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   173ee:	481e      	ldr	r0, [pc, #120]	; (17468 <bt_le_adv_resume+0x7c>)
   173f0:	4c1d      	ldr	r4, [pc, #116]	; (17468 <bt_le_adv_resume+0x7c>)
   173f2:	f012 fa3d 	bl	29870 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   173f6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   173fa:	d032      	beq.n	17462 <bt_le_adv_resume+0x76>
   173fc:	4620      	mov	r0, r4
   173fe:	f012 fa37 	bl	29870 <atomic_get>
   17402:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17404:	f3c0 1580 	ubfx	r5, r0, #6, #1
   17408:	d42b      	bmi.n	17462 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1740a:	4620      	mov	r0, r4
   1740c:	f012 fa30 	bl	29870 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17410:	0583      	lsls	r3, r0, #22
   17412:	d526      	bpl.n	17462 <bt_le_adv_resume+0x76>
	err = le_adv_start_add_conn(adv, &conn);
   17414:	a901      	add	r1, sp, #4
   17416:	f1a4 0010 	sub.w	r0, r4, #16
   1741a:	f7ff fde5 	bl	16fe8 <le_adv_start_add_conn>
	if (err) {
   1741e:	bb00      	cbnz	r0, 17462 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   17420:	2101      	movs	r1, #1
   17422:	f1a4 0010 	sub.w	r0, r4, #16
   17426:	f012 fadd 	bl	299e4 <bt_le_adv_set_enable_legacy>
	if (err) {
   1742a:	b150      	cbz	r0, 17442 <bt_le_adv_resume+0x56>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1742c:	4629      	mov	r1, r5
   1742e:	9801      	ldr	r0, [sp, #4]
   17430:	f000 fc14 	bl	17c5c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17434:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   17438:	4620      	mov	r0, r4
   1743a:	f012 fa1f 	bl	2987c <atomic_and>
	return (old & mask) != 0;
   1743e:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
   17442:	9801      	ldr	r0, [sp, #4]
   17444:	f000 fbd2 	bl	17bec <bt_conn_unref>
	if (persist_paused) {
   17448:	b15d      	cbz	r5, 17462 <bt_le_adv_resume+0x76>
   1744a:	f3bf 8f5b 	dmb	ish
   1744e:	e854 3f00 	ldrex	r3, [r4]
   17452:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   17456:	e844 3200 	strex	r2, r3, [r4]
   1745a:	2a00      	cmp	r2, #0
   1745c:	d1f7      	bne.n	1744e <bt_le_adv_resume+0x62>
   1745e:	f3bf 8f5b 	dmb	ish
}
   17462:	b003      	add	sp, #12
   17464:	bd30      	pop	{r4, r5, pc}
   17466:	bf00      	nop
   17468:	20000378 	.word	0x20000378

0001746c <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   1746c:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1746e:	4904      	ldr	r1, [pc, #16]	; (17480 <bt_pub_key_is_debug+0x14>)
   17470:	2240      	movs	r2, #64	; 0x40
   17472:	f014 fe5c 	bl	2c12e <memcmp>
}
   17476:	fab0 f080 	clz	r0, r0
   1747a:	0940      	lsrs	r0, r0, #5
   1747c:	bd08      	pop	{r3, pc}
   1747e:	bf00      	nop
   17480:	0002e9dc 	.word	0x0002e9dc

00017484 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   17484:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   17486:	4b37      	ldr	r3, [pc, #220]	; (17564 <bt_pub_key_gen+0xe0>)
   17488:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1748c:	f003 0306 	and.w	r3, r3, #6
   17490:	2b06      	cmp	r3, #6
   17492:	d007      	beq.n	174a4 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   17494:	4834      	ldr	r0, [pc, #208]	; (17568 <bt_pub_key_gen+0xe4>)
   17496:	2157      	movs	r1, #87	; 0x57
   17498:	f011 f982 	bl	287a0 <z_log_minimal_printk>
		return -ENOTSUP;
   1749c:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   174a0:	4628      	mov	r0, r5
   174a2:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   174a4:	2800      	cmp	r0, #0
   174a6:	d05a      	beq.n	1755e <bt_pub_key_gen+0xda>
	return list->head;
   174a8:	4e30      	ldr	r6, [pc, #192]	; (1756c <bt_pub_key_gen+0xe8>)
   174aa:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   174ac:	b16a      	cbz	r2, 174ca <bt_pub_key_gen+0x46>
   174ae:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   174b0:	4298      	cmp	r0, r3
   174b2:	d106      	bne.n	174c2 <bt_pub_key_gen+0x3e>
			BT_WARN("Callback already registered");
   174b4:	482e      	ldr	r0, [pc, #184]	; (17570 <bt_pub_key_gen+0xec>)
   174b6:	2157      	movs	r1, #87	; 0x57
   174b8:	f011 f972 	bl	287a0 <z_log_minimal_printk>
			return -EALREADY;
   174bc:	f06f 0577 	mvn.w	r5, #119	; 0x77
   174c0:	e7ee      	b.n	174a0 <bt_pub_key_gen+0x1c>
	return node->next;
   174c2:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   174c4:	b10b      	cbz	r3, 174ca <bt_pub_key_gen+0x46>
   174c6:	3b04      	subs	r3, #4
   174c8:	e7f2      	b.n	174b0 <bt_pub_key_gen+0x2c>
	parent->next = child;
   174ca:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   174cc:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   174ce:	1d03      	adds	r3, r0, #4
	list->head = node;
   174d0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   174d2:	b902      	cbnz	r2, 174d6 <bt_pub_key_gen+0x52>
	list->tail = node;
   174d4:	6073      	str	r3, [r6, #4]
   174d6:	4c27      	ldr	r4, [pc, #156]	; (17574 <bt_pub_key_gen+0xf0>)
   174d8:	f3bf 8f5b 	dmb	ish
   174dc:	e854 2f00 	ldrex	r2, [r4]
   174e0:	f042 0320 	orr.w	r3, r2, #32
   174e4:	e844 3100 	strex	r1, r3, [r4]
   174e8:	2900      	cmp	r1, #0
   174ea:	d1f7      	bne.n	174dc <bt_pub_key_gen+0x58>
   174ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   174f0:	f012 0220 	ands.w	r2, r2, #32
   174f4:	d001      	beq.n	174fa <bt_pub_key_gen+0x76>
		return 0;
   174f6:	2500      	movs	r5, #0
   174f8:	e7d2      	b.n	174a0 <bt_pub_key_gen+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   174fa:	f3bf 8f5b 	dmb	ish
   174fe:	e854 3f00 	ldrex	r3, [r4]
   17502:	f023 0310 	bic.w	r3, r3, #16
   17506:	e844 3100 	strex	r1, r3, [r4]
   1750a:	2900      	cmp	r1, #0
   1750c:	d1f7      	bne.n	174fe <bt_pub_key_gen+0x7a>
   1750e:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   17512:	4611      	mov	r1, r2
   17514:	f242 0025 	movw	r0, #8229	; 0x2025
   17518:	f7fe fc24 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   1751c:	4605      	mov	r5, r0
   1751e:	2800      	cmp	r0, #0
   17520:	d0e9      	beq.n	174f6 <bt_pub_key_gen+0x72>
		BT_ERR("Sending LE P256 Public Key command failed");
   17522:	4815      	ldr	r0, [pc, #84]	; (17578 <bt_pub_key_gen+0xf4>)
   17524:	2145      	movs	r1, #69	; 0x45
   17526:	f011 f93b 	bl	287a0 <z_log_minimal_printk>
   1752a:	f3bf 8f5b 	dmb	ish
   1752e:	e854 3f00 	ldrex	r3, [r4]
   17532:	f023 0320 	bic.w	r3, r3, #32
   17536:	e844 3200 	strex	r2, r3, [r4]
   1753a:	2a00      	cmp	r2, #0
   1753c:	d1f7      	bne.n	1752e <bt_pub_key_gen+0xaa>
   1753e:	f3bf 8f5b 	dmb	ish
	return list->head;
   17542:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17544:	b13c      	cbz	r4, 17556 <bt_pub_key_gen+0xd2>
			if (cb->func) {
   17546:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1754a:	3c04      	subs	r4, #4
			if (cb->func) {
   1754c:	b10b      	cbz	r3, 17552 <bt_pub_key_gen+0xce>
				cb->func(NULL);
   1754e:	2000      	movs	r0, #0
   17550:	4798      	blx	r3
	return node->next;
   17552:	6864      	ldr	r4, [r4, #4]
   17554:	e7f6      	b.n	17544 <bt_pub_key_gen+0xc0>
	list->head = NULL;
   17556:	2300      	movs	r3, #0
	list->tail = NULL;
   17558:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   1755c:	e7a0      	b.n	174a0 <bt_pub_key_gen+0x1c>
		return -EINVAL;
   1755e:	f06f 0515 	mvn.w	r5, #21
   17562:	e79d      	b.n	174a0 <bt_pub_key_gen+0x1c>
   17564:	20000350 	.word	0x20000350
   17568:	0002e93a 	.word	0x0002e93a
   1756c:	20002724 	.word	0x20002724
   17570:	0002e95e 	.word	0x0002e95e
   17574:	2000041c 	.word	0x2000041c
   17578:	0002e97f 	.word	0x0002e97f

0001757c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1757c:	4b05      	ldr	r3, [pc, #20]	; (17594 <bt_pub_key_get+0x18>)
   1757e:	f3bf 8f5b 	dmb	ish
   17582:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   17584:	4804      	ldr	r0, [pc, #16]	; (17598 <bt_pub_key_get+0x1c>)
   17586:	f3bf 8f5b 	dmb	ish
		return pub_key;
   1758a:	f013 0f10 	tst.w	r3, #16
}
   1758e:	bf08      	it	eq
   17590:	2000      	moveq	r0, #0
   17592:	4770      	bx	lr
   17594:	2000041c 	.word	0x2000041c
   17598:	20003796 	.word	0x20003796

0001759c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   1759c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
   1759e:	4e24      	ldr	r6, [pc, #144]	; (17630 <bt_dh_key_gen+0x94>)
   175a0:	6833      	ldr	r3, [r6, #0]
   175a2:	428b      	cmp	r3, r1
{
   175a4:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   175a6:	d03c      	beq.n	17622 <bt_dh_key_gen+0x86>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   175a8:	b11b      	cbz	r3, 175b2 <bt_dh_key_gen+0x16>
		return -EBUSY;
   175aa:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   175ae:	4620      	mov	r0, r4
   175b0:	bd70      	pop	{r4, r5, r6, pc}
   175b2:	4b20      	ldr	r3, [pc, #128]	; (17634 <bt_dh_key_gen+0x98>)
   175b4:	f3bf 8f5b 	dmb	ish
   175b8:	681a      	ldr	r2, [r3, #0]
   175ba:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   175be:	0692      	lsls	r2, r2, #26
   175c0:	d4f3      	bmi.n	175aa <bt_dh_key_gen+0xe>
   175c2:	f3bf 8f5b 	dmb	ish
   175c6:	681b      	ldr	r3, [r3, #0]
   175c8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   175cc:	06db      	lsls	r3, r3, #27
   175ce:	d52b      	bpl.n	17628 <bt_dh_key_gen+0x8c>
	dh_key_cb = cb;
   175d0:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   175d2:	f242 0026 	movw	r0, #8230	; 0x2026
   175d6:	2140      	movs	r1, #64	; 0x40
   175d8:	f7fe fb7c 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   175dc:	4605      	mov	r5, r0
   175de:	b1e8      	cbz	r0, 1761c <bt_dh_key_gen+0x80>
	return net_buf_simple_add(&buf->b, len);
   175e0:	2140      	movs	r1, #64	; 0x40
   175e2:	3008      	adds	r0, #8
   175e4:	f005 fd7e 	bl	1d0e4 <net_buf_simple_add>
   175e8:	4623      	mov	r3, r4
   175ea:	f104 0240 	add.w	r2, r4, #64	; 0x40
   175ee:	f853 1b04 	ldr.w	r1, [r3], #4
   175f2:	f840 1b04 	str.w	r1, [r0], #4
   175f6:	4293      	cmp	r3, r2
   175f8:	d1f9      	bne.n	175ee <bt_dh_key_gen+0x52>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   175fa:	2200      	movs	r2, #0
   175fc:	4629      	mov	r1, r5
   175fe:	f242 0026 	movw	r0, #8230	; 0x2026
   17602:	f7fe fbaf 	bl	15d64 <bt_hci_cmd_send_sync>
	if (err) {
   17606:	4604      	mov	r4, r0
   17608:	2800      	cmp	r0, #0
   1760a:	d0d0      	beq.n	175ae <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   1760c:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
   1760e:	480a      	ldr	r0, [pc, #40]	; (17638 <bt_dh_key_gen+0x9c>)
		dh_key_cb = NULL;
   17610:	6033      	str	r3, [r6, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
   17612:	4622      	mov	r2, r4
   17614:	2157      	movs	r1, #87	; 0x57
   17616:	f011 f8c3 	bl	287a0 <z_log_minimal_printk>
		return err;
   1761a:	e7c8      	b.n	175ae <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   1761c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17620:	e7f4      	b.n	1760c <bt_dh_key_gen+0x70>
		return -EALREADY;
   17622:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17626:	e7c2      	b.n	175ae <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   17628:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1762c:	e7bf      	b.n	175ae <bt_dh_key_gen+0x12>
   1762e:	bf00      	nop
   17630:	20002720 	.word	0x20002720
   17634:	2000041c 	.word	0x2000041c
   17638:	0002e9ae 	.word	0x0002e9ae

0001763c <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   1763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1763e:	4b1d      	ldr	r3, [pc, #116]	; (176b4 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   17640:	6885      	ldr	r5, [r0, #8]
   17642:	f3bf 8f5b 	dmb	ish
   17646:	e853 2f00 	ldrex	r2, [r3]
   1764a:	f022 0220 	bic.w	r2, r2, #32
   1764e:	e843 2100 	strex	r1, r2, [r3]
   17652:	2900      	cmp	r1, #0
   17654:	d1f7      	bne.n	17646 <bt_hci_evt_le_pkey_complete+0xa>
   17656:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1765a:	782a      	ldrb	r2, [r5, #0]
   1765c:	b9aa      	cbnz	r2, 1768a <bt_hci_evt_le_pkey_complete+0x4e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   1765e:	4916      	ldr	r1, [pc, #88]	; (176b8 <bt_hci_evt_le_pkey_complete+0x7c>)
   17660:	1c6a      	adds	r2, r5, #1
   17662:	f105 0041 	add.w	r0, r5, #65	; 0x41
   17666:	f852 4b04 	ldr.w	r4, [r2], #4
   1766a:	f841 4b04 	str.w	r4, [r1], #4
   1766e:	4282      	cmp	r2, r0
   17670:	d1f9      	bne.n	17666 <bt_hci_evt_le_pkey_complete+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17672:	f3bf 8f5b 	dmb	ish
   17676:	e853 2f00 	ldrex	r2, [r3]
   1767a:	f042 0210 	orr.w	r2, r2, #16
   1767e:	e843 2100 	strex	r1, r2, [r3]
   17682:	2900      	cmp	r1, #0
   17684:	d1f7      	bne.n	17676 <bt_hci_evt_le_pkey_complete+0x3a>
   17686:	f3bf 8f5b 	dmb	ish
	return list->head;
   1768a:	4e0c      	ldr	r6, [pc, #48]	; (176bc <bt_hci_evt_le_pkey_complete+0x80>)
   1768c:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1768e:	b16c      	cbz	r4, 176ac <bt_hci_evt_le_pkey_complete+0x70>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   17690:	4f09      	ldr	r7, [pc, #36]	; (176b8 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17692:	3c04      	subs	r4, #4
		if (cb->func) {
   17694:	6823      	ldr	r3, [r4, #0]
   17696:	b12b      	cbz	r3, 176a4 <bt_hci_evt_le_pkey_complete+0x68>
			cb->func(evt->status ? NULL : pub_key);
   17698:	782a      	ldrb	r2, [r5, #0]
   1769a:	2a00      	cmp	r2, #0
   1769c:	bf0c      	ite	eq
   1769e:	4638      	moveq	r0, r7
   176a0:	2000      	movne	r0, #0
   176a2:	4798      	blx	r3
	return node->next;
   176a4:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   176a6:	b10c      	cbz	r4, 176ac <bt_hci_evt_le_pkey_complete+0x70>
   176a8:	3c04      	subs	r4, #4
   176aa:	e7f3      	b.n	17694 <bt_hci_evt_le_pkey_complete+0x58>
	list->head = NULL;
   176ac:	2300      	movs	r3, #0
	list->tail = NULL;
   176ae:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   176b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   176b4:	2000041c 	.word	0x2000041c
   176b8:	20003796 	.word	0x20003796
   176bc:	20002724 	.word	0x20002724

000176c0 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   176c0:	4905      	ldr	r1, [pc, #20]	; (176d8 <bt_hci_evt_le_dhkey_complete+0x18>)
   176c2:	680b      	ldr	r3, [r1, #0]
   176c4:	b133      	cbz	r3, 176d4 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   176c6:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   176c8:	2000      	movs	r0, #0
   176ca:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   176cc:	7811      	ldrb	r1, [r2, #0]
   176ce:	b901      	cbnz	r1, 176d2 <bt_hci_evt_le_dhkey_complete+0x12>
   176d0:	1c50      	adds	r0, r2, #1
   176d2:	4718      	bx	r3
	}
}
   176d4:	4770      	bx	lr
   176d6:	bf00      	nop
   176d8:	20002720 	.word	0x20002720

000176dc <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   176dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   176de:	4b12      	ldr	r3, [pc, #72]	; (17728 <notify_connected+0x4c>)
   176e0:	681d      	ldr	r5, [r3, #0]
{
   176e2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   176e4:	b995      	cbnz	r5, 1770c <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   176e6:	4d11      	ldr	r5, [pc, #68]	; (1772c <notify_connected+0x50>)
   176e8:	4e11      	ldr	r6, [pc, #68]	; (17730 <notify_connected+0x54>)
   176ea:	4f12      	ldr	r7, [pc, #72]	; (17734 <notify_connected+0x58>)
   176ec:	42b5      	cmp	r5, r6
   176ee:	d90a      	bls.n	17706 <notify_connected+0x2a>
   176f0:	4811      	ldr	r0, [pc, #68]	; (17738 <notify_connected+0x5c>)
   176f2:	4639      	mov	r1, r7
   176f4:	f240 5241 	movw	r2, #1345	; 0x541
   176f8:	f011 f844 	bl	28784 <assert_print>
   176fc:	f240 5141 	movw	r1, #1345	; 0x541
   17700:	4638      	mov	r0, r7
   17702:	f011 f838 	bl	28776 <assert_post_action>
   17706:	42b5      	cmp	r5, r6
   17708:	d307      	bcc.n	1771a <notify_connected+0x3e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->connected) {
   1770c:	682b      	ldr	r3, [r5, #0]
   1770e:	b113      	cbz	r3, 17716 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   17710:	7b21      	ldrb	r1, [r4, #12]
   17712:	4620      	mov	r0, r4
   17714:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17716:	69ad      	ldr	r5, [r5, #24]
   17718:	e7e4      	b.n	176e4 <notify_connected+0x8>
		if (cb->connected) {
   1771a:	682b      	ldr	r3, [r5, #0]
   1771c:	b113      	cbz	r3, 17724 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   1771e:	7b21      	ldrb	r1, [r4, #12]
   17720:	4620      	mov	r0, r4
   17722:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17724:	351c      	adds	r5, #28
   17726:	e7e1      	b.n	176ec <notify_connected+0x10>
   17728:	20002738 	.word	0x20002738
   1772c:	0002c600 	.word	0x0002c600
   17730:	0002c61c 	.word	0x0002c61c
   17734:	0002ea1c 	.word	0x0002ea1c
   17738:	0002d509 	.word	0x0002d509

0001773c <tx_notify>:
{
   1773c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   17740:	f8df 804c 	ldr.w	r8, [pc, #76]	; 17790 <tx_notify+0x54>
{
   17744:	4604      	mov	r4, r0
	tx->cb = NULL;
   17746:	2700      	movs	r7, #0
	__asm__ volatile(
   17748:	f04f 0340 	mov.w	r3, #64	; 0x40
   1774c:	f3ef 8211 	mrs	r2, BASEPRI
   17750:	f383 8812 	msr	BASEPRI_MAX, r3
   17754:	f3bf 8f6f 	isb	sy
	return list->head;
   17758:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1775a:	b129      	cbz	r1, 17768 <tx_notify+0x2c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1775c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1775e:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   17760:	6223      	str	r3, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17762:	4281      	cmp	r1, r0
	list->tail = node;
   17764:	bf08      	it	eq
   17766:	6263      	streq	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   17768:	f382 8811 	msr	BASEPRI, r2
   1776c:	f3bf 8f6f 	isb	sy
		if (!tx) {
   17770:	b161      	cbz	r1, 1778c <tx_notify+0x50>
		user_data = tx->user_data;
   17772:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   17776:	60cf      	str	r7, [r1, #12]
	tx->user_data = NULL;
   17778:	e9c1 7701 	strd	r7, r7, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1777c:	4640      	mov	r0, r8
   1777e:	f014 fb1f 	bl	2bdc0 <k_queue_append>
		cb(conn, user_data, 0);
   17782:	2200      	movs	r2, #0
   17784:	4631      	mov	r1, r6
   17786:	4620      	mov	r0, r4
   17788:	47a8      	blx	r5
	while (1) {
   1778a:	e7dd      	b.n	17748 <tx_notify+0xc>
}
   1778c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17790:	20000af4 	.word	0x20000af4

00017794 <conn_tx_destroy>:
{
   17794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17798:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(tx);
   1779a:	460c      	mov	r4, r1
   1779c:	b941      	cbnz	r1, 177b0 <conn_tx_destroy+0x1c>
   1779e:	490d      	ldr	r1, [pc, #52]	; (177d4 <conn_tx_destroy+0x40>)
   177a0:	480d      	ldr	r0, [pc, #52]	; (177d8 <conn_tx_destroy+0x44>)
   177a2:	2237      	movs	r2, #55	; 0x37
   177a4:	f010 ffee 	bl	28784 <assert_print>
   177a8:	480a      	ldr	r0, [pc, #40]	; (177d4 <conn_tx_destroy+0x40>)
   177aa:	2137      	movs	r1, #55	; 0x37
   177ac:	f010 ffe3 	bl	28776 <assert_post_action>
	void *user_data = tx->user_data;
   177b0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
	tx->cb = NULL;
   177b4:	2300      	movs	r3, #0
	tx->user_data = NULL;
   177b6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	tx->pending_no_cb = 0U;
   177ba:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   177bc:	4621      	mov	r1, r4
   177be:	4807      	ldr	r0, [pc, #28]	; (177dc <conn_tx_destroy+0x48>)
   177c0:	f014 fafe 	bl	2bdc0 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   177c4:	4639      	mov	r1, r7
   177c6:	4628      	mov	r0, r5
   177c8:	4633      	mov	r3, r6
   177ca:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   177ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cb(conn, user_data, -ESHUTDOWN);
   177d2:	4718      	bx	r3
   177d4:	0002ea1c 	.word	0x0002ea1c
   177d8:	0002d509 	.word	0x0002d509
   177dc:	20000af4 	.word	0x20000af4

000177e0 <send_frag>:
{
   177e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   177e4:	694d      	ldr	r5, [r1, #20]
{
   177e6:	4604      	mov	r4, r0
   177e8:	460e      	mov	r6, r1
   177ea:	4691      	mov	r9, r2
   177ec:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   177ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   177f2:	4840      	ldr	r0, [pc, #256]	; (178f4 <send_frag+0x114>)
   177f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   177f8:	f00a ff74 	bl	226e4 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   177fc:	7b63      	ldrb	r3, [r4, #13]
   177fe:	2b07      	cmp	r3, #7
   17800:	d141      	bne.n	17886 <send_frag+0xa6>
	__asm__ volatile(
   17802:	f04f 0340 	mov.w	r3, #64	; 0x40
   17806:	f3ef 8211 	mrs	r2, BASEPRI
   1780a:	f383 8812 	msr	BASEPRI_MAX, r3
   1780e:	f3bf 8f6f 	isb	sy
	if (tx) {
   17812:	69a3      	ldr	r3, [r4, #24]
   17814:	2d00      	cmp	r5, #0
   17816:	d04b      	beq.n	178b0 <send_frag+0xd0>
	parent->next = child;
   17818:	2100      	movs	r1, #0
   1781a:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1781c:	2b00      	cmp	r3, #0
   1781e:	d144      	bne.n	178aa <send_frag+0xca>
	list->head = node;
   17820:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   17824:	f382 8811 	msr	BASEPRI, r2
   17828:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1782c:	2104      	movs	r1, #4
   1782e:	f106 0008 	add.w	r0, r6, #8
   17832:	f005 fbff 	bl	1d034 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   17836:	8823      	ldrh	r3, [r4, #0]
   17838:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   1783c:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17840:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   17842:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17846:	3b04      	subs	r3, #4
   17848:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1784a:	2302      	movs	r3, #2
   1784c:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1784e:	4630      	mov	r0, r6
   17850:	f7fe fd06 	bl	16260 <bt_send>
	if (err) {
   17854:	4602      	mov	r2, r0
   17856:	2800      	cmp	r0, #0
   17858:	d04a      	beq.n	178f0 <send_frag+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
   1785a:	4827      	ldr	r0, [pc, #156]	; (178f8 <send_frag+0x118>)
   1785c:	2145      	movs	r1, #69	; 0x45
   1785e:	f010 ff9f 	bl	287a0 <z_log_minimal_printk>
	__asm__ volatile(
   17862:	f04f 0340 	mov.w	r3, #64	; 0x40
   17866:	f3ef 8911 	mrs	r9, BASEPRI
   1786a:	f383 8812 	msr	BASEPRI_MAX, r3
   1786e:	f3bf 8f6f 	isb	sy
		if (tx) {
   17872:	b34d      	cbz	r5, 178c8 <send_frag+0xe8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   17874:	4629      	mov	r1, r5
   17876:	f104 0014 	add.w	r0, r4, #20
   1787a:	f012 f8dd 	bl	29a38 <sys_slist_find_and_remove>
	__asm__ volatile(
   1787e:	f389 8811 	msr	BASEPRI, r9
   17882:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   17886:	481b      	ldr	r0, [pc, #108]	; (178f4 <send_frag+0x114>)
   17888:	f00a fef2 	bl	22670 <z_impl_k_sem_give>
	if (tx) {
   1788c:	b12d      	cbz	r5, 1789a <send_frag+0xba>
		tx_data(buf)->tx = NULL;
   1788e:	2300      	movs	r3, #0
   17890:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   17892:	4629      	mov	r1, r5
   17894:	4620      	mov	r0, r4
   17896:	f7ff ff7d 	bl	17794 <conn_tx_destroy>
	if (always_consume) {
   1789a:	b11f      	cbz	r7, 178a4 <send_frag+0xc4>
		net_buf_unref(buf);
   1789c:	4630      	mov	r0, r6
   1789e:	f005 fb0b 	bl	1ceb8 <net_buf_unref>
	return false;
   178a2:	2700      	movs	r7, #0
}
   178a4:	4638      	mov	r0, r7
   178a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
   178aa:	601d      	str	r5, [r3, #0]
	list->tail = node;
   178ac:	61a5      	str	r5, [r4, #24]
}
   178ae:	e7b9      	b.n	17824 <send_frag+0x44>
		if (tail_tx) {
   178b0:	b133      	cbz	r3, 178c0 <send_frag+0xe0>
			pending_no_cb = &tail_tx->pending_no_cb;
   178b2:	f103 080c 	add.w	r8, r3, #12
   178b6:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   178b8:	3301      	adds	r3, #1
   178ba:	f8c8 3000 	str.w	r3, [r8]
   178be:	e7b1      	b.n	17824 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   178c0:	69e3      	ldr	r3, [r4, #28]
   178c2:	f104 081c 	add.w	r8, r4, #28
   178c6:	e7f7      	b.n	178b8 <send_frag+0xd8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   178c8:	f8d8 3000 	ldr.w	r3, [r8]
   178cc:	b953      	cbnz	r3, 178e4 <send_frag+0x104>
   178ce:	490b      	ldr	r1, [pc, #44]	; (178fc <send_frag+0x11c>)
   178d0:	480b      	ldr	r0, [pc, #44]	; (17900 <send_frag+0x120>)
   178d2:	f44f 720a 	mov.w	r2, #552	; 0x228
   178d6:	f010 ff55 	bl	28784 <assert_print>
   178da:	4808      	ldr	r0, [pc, #32]	; (178fc <send_frag+0x11c>)
   178dc:	f44f 710a 	mov.w	r1, #552	; 0x228
   178e0:	f010 ff49 	bl	28776 <assert_post_action>
			(*pending_no_cb)--;
   178e4:	f8d8 3000 	ldr.w	r3, [r8]
   178e8:	3b01      	subs	r3, #1
   178ea:	f8c8 3000 	str.w	r3, [r8]
   178ee:	e7c6      	b.n	1787e <send_frag+0x9e>
	return true;
   178f0:	2701      	movs	r7, #1
   178f2:	e7d7      	b.n	178a4 <send_frag+0xc4>
   178f4:	20000450 	.word	0x20000450
   178f8:	0002e452 	.word	0x0002e452
   178fc:	0002ea1c 	.word	0x0002ea1c
   17900:	0002d509 	.word	0x0002d509

00017904 <bt_conn_get_pkts>:
}
   17904:	4800      	ldr	r0, [pc, #0]	; (17908 <bt_conn_get_pkts+0x4>)
   17906:	4770      	bx	lr
   17908:	20000450 	.word	0x20000450

0001790c <bt_conn_new>:
{
   1790c:	b538      	push	{r3, r4, r5, lr}
   1790e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   17910:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17912:	2501      	movs	r5, #1
   17914:	428b      	cmp	r3, r1
   17916:	d102      	bne.n	1791e <bt_conn_new+0x12>
		return NULL;
   17918:	2400      	movs	r4, #0
}
   1791a:	4620      	mov	r0, r4
   1791c:	bd38      	pop	{r3, r4, r5, pc}
   1791e:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   17922:	f3bf 8f5b 	dmb	ish
   17926:	e852 0f00 	ldrex	r0, [r2]
   1792a:	2800      	cmp	r0, #0
   1792c:	d104      	bne.n	17938 <bt_conn_new+0x2c>
   1792e:	e842 5c00 	strex	ip, r5, [r2]
   17932:	f1bc 0f00 	cmp.w	ip, #0
   17936:	d1f6      	bne.n	17926 <bt_conn_new+0x1a>
   17938:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1793c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   17940:	d002      	beq.n	17948 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   17942:	3301      	adds	r3, #1
   17944:	4604      	mov	r4, r0
   17946:	e7e5      	b.n	17914 <bt_conn_new+0x8>
	if (!conn) {
   17948:	2c00      	cmp	r4, #0
   1794a:	d0e6      	beq.n	1791a <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   1794c:	22c0      	movs	r2, #192	; 0xc0
   1794e:	2100      	movs	r1, #0
   17950:	4620      	mov	r0, r4
   17952:	f014 fc37 	bl	2c1c4 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   17956:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1795a:	4904      	ldr	r1, [pc, #16]	; (1796c <bt_conn_new+0x60>)
   1795c:	f00b fa52 	bl	22e04 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   17960:	4903      	ldr	r1, [pc, #12]	; (17970 <bt_conn_new+0x64>)
   17962:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17966:	f00b f925 	bl	22bb4 <k_work_init>
	return conn;
   1796a:	e7d6      	b.n	1791a <bt_conn_new+0xe>
   1796c:	00018249 	.word	0x00018249
   17970:	00029a8b 	.word	0x00029a8b

00017974 <conn_cleanup>:
{
   17974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17978:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1797a:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1797c:	f104 0638 	add.w	r6, r4, #56	; 0x38
   17980:	2300      	movs	r3, #0
   17982:	2200      	movs	r2, #0
   17984:	4630      	mov	r0, r6
   17986:	f005 f947 	bl	1cc18 <net_buf_get>
   1798a:	4603      	mov	r3, r0
   1798c:	bb20      	cbnz	r0, 179d8 <conn_cleanup+0x64>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1798e:	6963      	ldr	r3, [r4, #20]
   17990:	b153      	cbz	r3, 179a8 <conn_cleanup+0x34>
   17992:	4917      	ldr	r1, [pc, #92]	; (179f0 <conn_cleanup+0x7c>)
   17994:	4817      	ldr	r0, [pc, #92]	; (179f4 <conn_cleanup+0x80>)
   17996:	f240 22b5 	movw	r2, #693	; 0x2b5
   1799a:	f010 fef3 	bl	28784 <assert_print>
   1799e:	4814      	ldr	r0, [pc, #80]	; (179f0 <conn_cleanup+0x7c>)
   179a0:	f240 21b5 	movw	r1, #693	; 0x2b5
   179a4:	f010 fee7 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   179a8:	69e3      	ldr	r3, [r4, #28]
   179aa:	b153      	cbz	r3, 179c2 <conn_cleanup+0x4e>
   179ac:	4910      	ldr	r1, [pc, #64]	; (179f0 <conn_cleanup+0x7c>)
   179ae:	4811      	ldr	r0, [pc, #68]	; (179f4 <conn_cleanup+0x80>)
   179b0:	f240 22b6 	movw	r2, #694	; 0x2b6
   179b4:	f010 fee6 	bl	28784 <assert_print>
   179b8:	480d      	ldr	r0, [pc, #52]	; (179f0 <conn_cleanup+0x7c>)
   179ba:	f240 21b6 	movw	r1, #694	; 0x2b6
   179be:	f010 feda 	bl	28776 <assert_post_action>
	bt_conn_reset_rx_state(conn);
   179c2:	4620      	mov	r0, r4
   179c4:	f012 f864 	bl	29a90 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   179c8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   179cc:	2200      	movs	r2, #0
}
   179ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   179d2:	2300      	movs	r3, #0
   179d4:	f00b bb0c 	b.w	22ff0 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   179d8:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   179da:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   179dc:	f005 fa6c 	bl	1ceb8 <net_buf_unref>
		if (tx) {
   179e0:	2d00      	cmp	r5, #0
   179e2:	d0cd      	beq.n	17980 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   179e4:	4629      	mov	r1, r5
   179e6:	4620      	mov	r0, r4
   179e8:	f7ff fed4 	bl	17794 <conn_tx_destroy>
   179ec:	e7c6      	b.n	1797c <conn_cleanup+0x8>
   179ee:	bf00      	nop
   179f0:	0002ea1c 	.word	0x0002ea1c
   179f4:	0002d509 	.word	0x0002d509

000179f8 <bt_conn_recv>:
{
   179f8:	b570      	push	{r4, r5, r6, lr}
   179fa:	4616      	mov	r6, r2
   179fc:	4604      	mov	r4, r0
   179fe:	460d      	mov	r5, r1
	tx_notify(conn);
   17a00:	f7ff fe9c 	bl	1773c <tx_notify>
	switch (flags) {
   17a04:	2e01      	cmp	r6, #1
   17a06:	d01f      	beq.n	17a48 <bt_conn_recv+0x50>
   17a08:	2e02      	cmp	r6, #2
   17a0a:	d149      	bne.n	17aa0 <bt_conn_recv+0xa8>
		if (conn->rx) {
   17a0c:	6923      	ldr	r3, [r4, #16]
   17a0e:	b133      	cbz	r3, 17a1e <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   17a10:	482b      	ldr	r0, [pc, #172]	; (17ac0 <bt_conn_recv+0xc8>)
   17a12:	2145      	movs	r1, #69	; 0x45
   17a14:	f010 fec4 	bl	287a0 <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   17a18:	4620      	mov	r0, r4
   17a1a:	f012 f839 	bl	29a90 <bt_conn_reset_rx_state>
		conn->rx = buf;
   17a1e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   17a20:	6921      	ldr	r1, [r4, #16]
   17a22:	898a      	ldrh	r2, [r1, #12]
   17a24:	2a01      	cmp	r2, #1
   17a26:	d949      	bls.n	17abc <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   17a28:	688b      	ldr	r3, [r1, #8]
   17a2a:	881b      	ldrh	r3, [r3, #0]
   17a2c:	3304      	adds	r3, #4
   17a2e:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   17a30:	429a      	cmp	r2, r3
   17a32:	d343      	bcc.n	17abc <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
   17a34:	d93a      	bls.n	17aac <bt_conn_recv+0xb4>
		BT_ERR("ACL len mismatch (%u > %u)",
   17a36:	4823      	ldr	r0, [pc, #140]	; (17ac4 <bt_conn_recv+0xcc>)
   17a38:	2145      	movs	r1, #69	; 0x45
   17a3a:	f010 feb1 	bl	287a0 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   17a3e:	4620      	mov	r0, r4
}
   17a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   17a44:	f012 b824 	b.w	29a90 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   17a48:	6920      	ldr	r0, [r4, #16]
   17a4a:	b938      	cbnz	r0, 17a5c <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   17a4c:	481e      	ldr	r0, [pc, #120]	; (17ac8 <bt_conn_recv+0xd0>)
   17a4e:	2145      	movs	r1, #69	; 0x45
   17a50:	f010 fea6 	bl	287a0 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   17a54:	4620      	mov	r0, r4
   17a56:	f012 f81b 	bl	29a90 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   17a5a:	e001      	b.n	17a60 <bt_conn_recv+0x68>
		if (!buf->len) {
   17a5c:	89ae      	ldrh	r6, [r5, #12]
   17a5e:	b926      	cbnz	r6, 17a6a <bt_conn_recv+0x72>
			net_buf_unref(buf);
   17a60:	4628      	mov	r0, r5
}
   17a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   17a66:	f005 ba27 	b.w	1ceb8 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   17a6a:	3008      	adds	r0, #8
   17a6c:	f013 fc9d 	bl	2b3aa <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   17a70:	4286      	cmp	r6, r0
   17a72:	d90b      	bls.n	17a8c <bt_conn_recv+0x94>
			BT_ERR("Not enough buffer space for L2CAP data");
   17a74:	4815      	ldr	r0, [pc, #84]	; (17acc <bt_conn_recv+0xd4>)
   17a76:	2145      	movs	r1, #69	; 0x45
   17a78:	f010 fe92 	bl	287a0 <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   17a7c:	6921      	ldr	r1, [r4, #16]
   17a7e:	2200      	movs	r2, #0
   17a80:	4620      	mov	r0, r4
   17a82:	f000 fe39 	bl	186f8 <bt_l2cap_recv>
			conn->rx = NULL;
   17a86:	2300      	movs	r3, #0
   17a88:	6123      	str	r3, [r4, #16]
   17a8a:	e7e9      	b.n	17a60 <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17a8c:	6920      	ldr	r0, [r4, #16]
   17a8e:	89aa      	ldrh	r2, [r5, #12]
   17a90:	68a9      	ldr	r1, [r5, #8]
   17a92:	3008      	adds	r0, #8
   17a94:	f013 fc91 	bl	2b3ba <net_buf_simple_add_mem>
		net_buf_unref(buf);
   17a98:	4628      	mov	r0, r5
   17a9a:	f005 fa0d 	bl	1ceb8 <net_buf_unref>
		break;
   17a9e:	e7bf      	b.n	17a20 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   17aa0:	480b      	ldr	r0, [pc, #44]	; (17ad0 <bt_conn_recv+0xd8>)
   17aa2:	4632      	mov	r2, r6
   17aa4:	2145      	movs	r1, #69	; 0x45
   17aa6:	f010 fe7b 	bl	287a0 <z_log_minimal_printk>
   17aaa:	e7d3      	b.n	17a54 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   17aac:	2300      	movs	r3, #0
   17aae:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   17ab0:	4620      	mov	r0, r4
   17ab2:	2201      	movs	r2, #1
}
   17ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   17ab8:	f000 be1e 	b.w	186f8 <bt_l2cap_recv>
}
   17abc:	bd70      	pop	{r4, r5, r6, pc}
   17abe:	bf00      	nop
   17ac0:	0002ea4c 	.word	0x0002ea4c
   17ac4:	0002eae0 	.word	0x0002eae0
   17ac8:	0002ea6e 	.word	0x0002ea6e
   17acc:	0002ea91 	.word	0x0002ea91
   17ad0:	0002eabd 	.word	0x0002eabd

00017ad4 <bt_conn_send_cb>:
{
   17ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17ad8:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   17ada:	7b43      	ldrb	r3, [r0, #13]
   17adc:	2b07      	cmp	r3, #7
{
   17ade:	4605      	mov	r5, r0
   17ae0:	460e      	mov	r6, r1
   17ae2:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   17ae4:	d006      	beq.n	17af4 <bt_conn_send_cb+0x20>
		BT_ERR("not connected!");
   17ae6:	4820      	ldr	r0, [pc, #128]	; (17b68 <bt_conn_send_cb+0x94>)
   17ae8:	2145      	movs	r1, #69	; 0x45
   17aea:	f010 fe59 	bl	287a0 <z_log_minimal_printk>
			return -ENOTCONN;
   17aee:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   17af2:	e017      	b.n	17b24 <bt_conn_send_cb+0x50>
	if (cb) {
   17af4:	2a00      	cmp	r2, #0
   17af6:	d035      	beq.n	17b64 <bt_conn_send_cb+0x90>
	return z_impl_z_current_get();
   17af8:	f00c fa92 	bl	24020 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   17afc:	4b1b      	ldr	r3, [pc, #108]	; (17b6c <bt_conn_send_cb+0x98>)
   17afe:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   17b00:	481b      	ldr	r0, [pc, #108]	; (17b70 <bt_conn_send_cb+0x9c>)
   17b02:	bf07      	ittee	eq
   17b04:	2200      	moveq	r2, #0
   17b06:	2300      	moveq	r3, #0
   17b08:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   17b0c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   17b10:	f00a fd54 	bl	225bc <z_impl_k_queue_get>
   17b14:	4604      	mov	r4, r0
		if (!tx) {
   17b16:	b938      	cbnz	r0, 17b28 <bt_conn_send_cb+0x54>
			BT_ERR("Unable to allocate TX context");
   17b18:	4816      	ldr	r0, [pc, #88]	; (17b74 <bt_conn_send_cb+0xa0>)
   17b1a:	2145      	movs	r1, #69	; 0x45
   17b1c:	f010 fe40 	bl	287a0 <z_log_minimal_printk>
			return -ENOBUFS;
   17b20:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   17b28:	7b6b      	ldrb	r3, [r5, #13]
   17b2a:	2b07      	cmp	r3, #7
   17b2c:	f04f 0800 	mov.w	r8, #0
   17b30:	d00c      	beq.n	17b4c <bt_conn_send_cb+0x78>
			BT_WARN("Disconnected while allocating context");
   17b32:	4811      	ldr	r0, [pc, #68]	; (17b78 <bt_conn_send_cb+0xa4>)
   17b34:	2157      	movs	r1, #87	; 0x57
   17b36:	f010 fe33 	bl	287a0 <z_log_minimal_printk>
	tx->user_data = NULL;
   17b3a:	e9c4 8801 	strd	r8, r8, [r4, #4]
	k_fifo_put(&free_tx, tx);
   17b3e:	480c      	ldr	r0, [pc, #48]	; (17b70 <bt_conn_send_cb+0x9c>)
	tx->pending_no_cb = 0U;
   17b40:	f8c4 800c 	str.w	r8, [r4, #12]
	k_fifo_put(&free_tx, tx);
   17b44:	4621      	mov	r1, r4
   17b46:	f014 f93b 	bl	2bdc0 <k_queue_append>
   17b4a:	e7d0      	b.n	17aee <bt_conn_send_cb+0x1a>
		tx->user_data = user_data;
   17b4c:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   17b50:	f8c0 800c 	str.w	r8, [r0, #12]
		tx_data(buf)->tx = tx;
   17b54:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   17b56:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17b5a:	4631      	mov	r1, r6
   17b5c:	f005 f97e 	bl	1ce5c <net_buf_put>
	return 0;
   17b60:	2000      	movs	r0, #0
   17b62:	e7df      	b.n	17b24 <bt_conn_send_cb+0x50>
		tx_data(buf)->tx = NULL;
   17b64:	614a      	str	r2, [r1, #20]
   17b66:	e7f6      	b.n	17b56 <bt_conn_send_cb+0x82>
   17b68:	0002eb00 	.word	0x0002eb00
   17b6c:	20002098 	.word	0x20002098
   17b70:	20000af4 	.word	0x20000af4
   17b74:	0002eb14 	.word	0x0002eb14
   17b78:	0002eb37 	.word	0x0002eb37

00017b7c <bt_conn_prepare_events>:
{
   17b7c:	b570      	push	{r4, r5, r6, lr}
   17b7e:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   17b80:	4817      	ldr	r0, [pc, #92]	; (17be0 <bt_conn_prepare_events+0x64>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17b82:	4d18      	ldr	r5, [pc, #96]	; (17be4 <bt_conn_prepare_events+0x68>)
   17b84:	f014 fac3 	bl	2c10e <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   17b88:	4b15      	ldr	r3, [pc, #84]	; (17be0 <bt_conn_prepare_events+0x64>)
   17b8a:	2200      	movs	r2, #0
   17b8c:	2101      	movs	r1, #1
   17b8e:	4620      	mov	r0, r4
   17b90:	f00d f890 	bl	24cb4 <k_poll_event_init>
   17b94:	f3bf 8f5b 	dmb	ish
   17b98:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   17b9c:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   17ba0:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   17ba4:	b90b      	cbnz	r3, 17baa <bt_conn_prepare_events+0x2e>
		conn_cleanup(conn);
   17ba6:	2001      	movs	r0, #1
}
   17ba8:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17baa:	7b6b      	ldrb	r3, [r5, #13]
   17bac:	b953      	cbnz	r3, 17bc4 <bt_conn_prepare_events+0x48>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17bae:	f06f 0140 	mvn.w	r1, #64	; 0x40
   17bb2:	1d28      	adds	r0, r5, #4
   17bb4:	f011 ff5a 	bl	29a6c <atomic_and>
   17bb8:	0643      	lsls	r3, r0, #25
   17bba:	d503      	bpl.n	17bc4 <bt_conn_prepare_events+0x48>
		conn_cleanup(conn);
   17bbc:	4628      	mov	r0, r5
   17bbe:	f7ff fed9 	bl	17974 <conn_cleanup>
   17bc2:	e7f0      	b.n	17ba6 <bt_conn_prepare_events+0x2a>
	if (conn->state != BT_CONN_CONNECTED) {
   17bc4:	7b6b      	ldrb	r3, [r5, #13]
   17bc6:	2b07      	cmp	r3, #7
   17bc8:	d1ed      	bne.n	17ba6 <bt_conn_prepare_events+0x2a>
	k_poll_event_init(&events[0],
   17bca:	4b07      	ldr	r3, [pc, #28]	; (17be8 <bt_conn_prepare_events+0x6c>)
   17bcc:	4630      	mov	r0, r6
   17bce:	2200      	movs	r2, #0
   17bd0:	2104      	movs	r1, #4
   17bd2:	f00d f86f 	bl	24cb4 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   17bd6:	2301      	movs	r3, #1
   17bd8:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   17bdc:	2002      	movs	r0, #2
	return ev_count;
   17bde:	e7e3      	b.n	17ba8 <bt_conn_prepare_events+0x2c>
   17be0:	20000658 	.word	0x20000658
   17be4:	20001ad0 	.word	0x20001ad0
   17be8:	20001b08 	.word	0x20001b08

00017bec <bt_conn_unref>:
{
   17bec:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   17bee:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
{
   17bf2:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   17bf4:	f3bf 8f5b 	dmb	ish
   17bf8:	e853 2f00 	ldrex	r2, [r3]
   17bfc:	1e51      	subs	r1, r2, #1
   17bfe:	e843 1000 	strex	r0, r1, [r3]
   17c02:	2800      	cmp	r0, #0
   17c04:	d1f8      	bne.n	17bf8 <bt_conn_unref+0xc>
   17c06:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   17c0a:	2a00      	cmp	r2, #0
   17c0c:	dc0a      	bgt.n	17c24 <bt_conn_unref+0x38>
   17c0e:	490d      	ldr	r1, [pc, #52]	; (17c44 <bt_conn_unref+0x58>)
   17c10:	480d      	ldr	r0, [pc, #52]	; (17c48 <bt_conn_unref+0x5c>)
   17c12:	f240 427e 	movw	r2, #1150	; 0x47e
   17c16:	f010 fdb5 	bl	28784 <assert_print>
   17c1a:	480a      	ldr	r0, [pc, #40]	; (17c44 <bt_conn_unref+0x58>)
   17c1c:	f240 417e 	movw	r1, #1150	; 0x47e
   17c20:	f010 fda9 	bl	28776 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   17c24:	78a3      	ldrb	r3, [r4, #2]
   17c26:	2b01      	cmp	r3, #1
   17c28:	d10a      	bne.n	17c40 <bt_conn_unref+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17c2a:	f3bf 8f5b 	dmb	ish
   17c2e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   17c32:	f3bf 8f5b 	dmb	ish
   17c36:	b91b      	cbnz	r3, 17c40 <bt_conn_unref+0x54>
}
   17c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   17c3c:	f7ff bbd6 	b.w	173ec <bt_le_adv_resume>
}
   17c40:	bd10      	pop	{r4, pc}
   17c42:	bf00      	nop
   17c44:	0002ea1c 	.word	0x0002ea1c
   17c48:	0002d509 	.word	0x0002d509

00017c4c <bt_conn_lookup_handle>:
{
   17c4c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   17c4e:	2101      	movs	r1, #1
   17c50:	4801      	ldr	r0, [pc, #4]	; (17c58 <bt_conn_lookup_handle+0xc>)
   17c52:	f011 bf41 	b.w	29ad8 <conn_lookup_handle>
   17c56:	bf00      	nop
   17c58:	20001ad0 	.word	0x20001ad0

00017c5c <bt_conn_set_state>:
{
   17c5c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   17c5e:	7b46      	ldrb	r6, [r0, #13]
   17c60:	428e      	cmp	r6, r1
{
   17c62:	4604      	mov	r4, r0
   17c64:	460d      	mov	r5, r1
	if (conn->state == state) {
   17c66:	d10b      	bne.n	17c80 <bt_conn_set_state+0x24>
	switch (state) {
   17c68:	2e08      	cmp	r6, #8
   17c6a:	bf96      	itet	ls
   17c6c:	4b60      	ldrls	r3, [pc, #384]	; (17df0 <bt_conn_set_state+0x194>)
	if (conn->state == state) {
   17c6e:	4a61      	ldrhi	r2, [pc, #388]	; (17df4 <bt_conn_set_state+0x198>)
   17c70:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   17c74:	4860      	ldr	r0, [pc, #384]	; (17df8 <bt_conn_set_state+0x19c>)
   17c76:	2157      	movs	r1, #87	; 0x57
}
   17c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   17c7c:	f010 bd90 	b.w	287a0 <z_log_minimal_printk>
	conn->state = state;
   17c80:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   17c82:	b926      	cbnz	r6, 17c8e <bt_conn_set_state+0x32>
		if (conn->type != BT_CONN_TYPE_ISO) {
   17c84:	7883      	ldrb	r3, [r0, #2]
   17c86:	2b08      	cmp	r3, #8
   17c88:	d001      	beq.n	17c8e <bt_conn_set_state+0x32>
			bt_conn_ref(conn);
   17c8a:	f011 ff0a 	bl	29aa2 <bt_conn_ref>
	switch (conn->state) {
   17c8e:	7b63      	ldrb	r3, [r4, #13]
   17c90:	2b08      	cmp	r3, #8
   17c92:	f200 80a8 	bhi.w	17de6 <bt_conn_set_state+0x18a>
   17c96:	e8df f003 	tbb	[pc, r3]
   17c9a:	0537      	.short	0x0537
   17c9c:	aaaaaaaa 	.word	0xaaaaaaaa
   17ca0:	1caa      	.short	0x1caa
   17ca2:	aa          	.byte	0xaa
   17ca3:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   17ca4:	4d55      	ldr	r5, [pc, #340]	; (17dfc <bt_conn_set_state+0x1a0>)
		tx->pending_no_cb = 0U;
   17ca6:	2600      	movs	r6, #0
	__asm__ volatile(
   17ca8:	f04f 0340 	mov.w	r3, #64	; 0x40
   17cac:	f3ef 8211 	mrs	r2, BASEPRI
   17cb0:	f383 8812 	msr	BASEPRI_MAX, r3
   17cb4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   17cb8:	69e3      	ldr	r3, [r4, #28]
   17cba:	2b00      	cmp	r3, #0
   17cbc:	d073      	beq.n	17da6 <bt_conn_set_state+0x14a>
			conn->pending_no_cb--;
   17cbe:	3b01      	subs	r3, #1
   17cc0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   17cc2:	f382 8811 	msr	BASEPRI, r2
   17cc6:	f3bf 8f6f 	isb	sy
   17cca:	4628      	mov	r0, r5
   17ccc:	f00a fcd0 	bl	22670 <z_impl_k_sem_give>
}
   17cd0:	e7ea      	b.n	17ca8 <bt_conn_set_state+0x4c>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17cd2:	78a3      	ldrb	r3, [r4, #2]
   17cd4:	2b04      	cmp	r3, #4
   17cd6:	f000 808a 	beq.w	17dee <bt_conn_set_state+0x192>
	z_impl_k_queue_init(queue);
   17cda:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17cde:	f014 f862 	bl	2bda6 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   17ce2:	4847      	ldr	r0, [pc, #284]	; (17e00 <bt_conn_set_state+0x1a4>)
   17ce4:	2100      	movs	r1, #0
   17ce6:	f00d f8f1 	bl	24ecc <z_impl_k_poll_signal_raise>
	list->head = NULL;
   17cea:	2300      	movs	r3, #0
	list->tail = NULL;
   17cec:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17cf0:	78e3      	ldrb	r3, [r4, #3]
   17cf2:	2b01      	cmp	r3, #1
   17cf4:	d17b      	bne.n	17dee <bt_conn_set_state+0x192>
			k_work_schedule(&conn->deferred_work,
   17cf6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17cfa:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   17cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   17d02:	2300      	movs	r3, #0
   17d04:	f00b b90c 	b.w	22f20 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17d08:	78a3      	ldrb	r3, [r4, #2]
   17d0a:	2b04      	cmp	r3, #4
   17d0c:	d104      	bne.n	17d18 <bt_conn_set_state+0xbc>
			bt_conn_unref(conn);
   17d0e:	4620      	mov	r0, r4
}
   17d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   17d14:	f7ff bf6a 	b.w	17bec <bt_conn_unref>
		switch (old_state) {
   17d18:	2e08      	cmp	r6, #8
   17d1a:	d868      	bhi.n	17dee <bt_conn_set_state+0x192>
   17d1c:	a301      	add	r3, pc, #4	; (adr r3, 17d24 <bt_conn_set_state+0xc8>)
   17d1e:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   17d22:	bf00      	nop
   17d24:	00017d9f 	.word	0x00017d9f
   17d28:	00017d49 	.word	0x00017d49
   17d2c:	00017d91 	.word	0x00017d91
   17d30:	00017d0f 	.word	0x00017d0f
   17d34:	00017d0f 	.word	0x00017d0f
   17d38:	00017d91 	.word	0x00017d91
   17d3c:	00017d91 	.word	0x00017d91
   17d40:	00017d9f 	.word	0x00017d9f
   17d44:	00017d9f 	.word	0x00017d9f
			tx_notify(conn);
   17d48:	4620      	mov	r0, r4
   17d4a:	f7ff fcf7 	bl	1773c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   17d4e:	78a3      	ldrb	r3, [r4, #2]
   17d50:	2b01      	cmp	r3, #1
   17d52:	d10a      	bne.n	17d6a <bt_conn_set_state+0x10e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   17d54:	f104 0560 	add.w	r5, r4, #96	; 0x60
   17d58:	4628      	mov	r0, r5
   17d5a:	f014 f8b8 	bl	2bece <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   17d5e:	f010 0f0c 	tst.w	r0, #12
   17d62:	d002      	beq.n	17d6a <bt_conn_set_state+0x10e>
				k_work_cancel_delayable(&conn->deferred_work);
   17d64:	4628      	mov	r0, r5
   17d66:	f00b f949 	bl	22ffc <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17d6a:	f3bf 8f5b 	dmb	ish
   17d6e:	3404      	adds	r4, #4
   17d70:	e854 3f00 	ldrex	r3, [r4]
   17d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17d78:	e844 3200 	strex	r2, r3, [r4]
   17d7c:	2a00      	cmp	r2, #0
   17d7e:	d1f7      	bne.n	17d70 <bt_conn_set_state+0x114>
   17d80:	f3bf 8f5b 	dmb	ish
   17d84:	481e      	ldr	r0, [pc, #120]	; (17e00 <bt_conn_set_state+0x1a4>)
}
   17d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17d8a:	2100      	movs	r1, #0
   17d8c:	f00d b89e 	b.w	24ecc <z_impl_k_poll_signal_raise>
			if (conn->err) {
   17d90:	7b23      	ldrb	r3, [r4, #12]
   17d92:	2b00      	cmp	r3, #0
   17d94:	d0bb      	beq.n	17d0e <bt_conn_set_state+0xb2>
				notify_connected(conn);
   17d96:	4620      	mov	r0, r4
   17d98:	f7ff fca0 	bl	176dc <notify_connected>
   17d9c:	e7b7      	b.n	17d0e <bt_conn_set_state+0xb2>
			BT_WARN("Invalid (%u) old state", state);
   17d9e:	4819      	ldr	r0, [pc, #100]	; (17e04 <bt_conn_set_state+0x1a8>)
   17da0:	462a      	mov	r2, r5
   17da2:	2157      	movs	r1, #87	; 0x57
   17da4:	e768      	b.n	17c78 <bt_conn_set_state+0x1c>
	return list->head;
   17da6:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   17da8:	b129      	cbz	r1, 17db6 <bt_conn_set_state+0x15a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17daa:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   17dac:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   17dae:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17db0:	4281      	cmp	r1, r0
	list->tail = node;
   17db2:	bf08      	it	eq
   17db4:	61a3      	streq	r3, [r4, #24]
   17db6:	f382 8811 	msr	BASEPRI, r2
   17dba:	f3bf 8f6f 	isb	sy
		if (!node) {
   17dbe:	b1b1      	cbz	r1, 17dee <bt_conn_set_state+0x192>
	__asm__ volatile(
   17dc0:	f04f 0240 	mov.w	r2, #64	; 0x40
   17dc4:	f3ef 8311 	mrs	r3, BASEPRI
   17dc8:	f382 8812 	msr	BASEPRI_MAX, r2
   17dcc:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   17dd0:	68ca      	ldr	r2, [r1, #12]
   17dd2:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   17dd4:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   17dd6:	f383 8811 	msr	BASEPRI, r3
   17dda:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   17dde:	4620      	mov	r0, r4
   17de0:	f7ff fcd8 	bl	17794 <conn_tx_destroy>
   17de4:	e771      	b.n	17cca <bt_conn_set_state+0x6e>
		BT_WARN("no valid (%u) state was set", state);
   17de6:	4808      	ldr	r0, [pc, #32]	; (17e08 <bt_conn_set_state+0x1ac>)
   17de8:	462a      	mov	r2, r5
   17dea:	2157      	movs	r1, #87	; 0x57
   17dec:	e744      	b.n	17c78 <bt_conn_set_state+0x1c>
}
   17dee:	bd70      	pop	{r4, r5, r6, pc}
   17df0:	0002ca9c 	.word	0x0002ca9c
   17df4:	0002eb62 	.word	0x0002eb62
   17df8:	0002eb6c 	.word	0x0002eb6c
   17dfc:	20000450 	.word	0x20000450
   17e00:	20000658 	.word	0x20000658
   17e04:	0002eb82 	.word	0x0002eb82
   17e08:	0002eb9e 	.word	0x0002eb9e

00017e0c <bt_conn_index>:
		index = conn - acl_conns;
   17e0c:	4b0a      	ldr	r3, [pc, #40]	; (17e38 <bt_conn_index+0x2c>)
   17e0e:	4a0b      	ldr	r2, [pc, #44]	; (17e3c <bt_conn_index+0x30>)
{
   17e10:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   17e12:	1ac4      	subs	r4, r0, r3
   17e14:	10e4      	asrs	r4, r4, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   17e16:	4298      	cmp	r0, r3
		index = conn - acl_conns;
   17e18:	fb02 f404 	mul.w	r4, r2, r4
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   17e1c:	d00a      	beq.n	17e34 <bt_conn_index+0x28>
   17e1e:	4908      	ldr	r1, [pc, #32]	; (17e40 <bt_conn_index+0x34>)
   17e20:	4808      	ldr	r0, [pc, #32]	; (17e44 <bt_conn_index+0x38>)
   17e22:	f240 429c 	movw	r2, #1180	; 0x49c
   17e26:	f010 fcad 	bl	28784 <assert_print>
   17e2a:	4805      	ldr	r0, [pc, #20]	; (17e40 <bt_conn_index+0x34>)
   17e2c:	f240 419c 	movw	r1, #1180	; 0x49c
   17e30:	f010 fca1 	bl	28776 <assert_post_action>
}
   17e34:	b2e0      	uxtb	r0, r4
   17e36:	bd10      	pop	{r4, pc}
   17e38:	20001ad0 	.word	0x20001ad0
   17e3c:	c28f5c29 	.word	0xc28f5c29
   17e40:	0002ea1c 	.word	0x0002ea1c
   17e44:	0002d509 	.word	0x0002d509

00017e48 <bt_conn_create_pdu_timeout>:
{
   17e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e4a:	4604      	mov	r4, r0
   17e4c:	460d      	mov	r5, r1
   17e4e:	4617      	mov	r7, r2
   17e50:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   17e52:	f013 ff79 	bl	2bd48 <k_is_in_isr>
   17e56:	b150      	cbz	r0, 17e6e <bt_conn_create_pdu_timeout+0x26>
   17e58:	490f      	ldr	r1, [pc, #60]	; (17e98 <bt_conn_create_pdu_timeout+0x50>)
   17e5a:	4810      	ldr	r0, [pc, #64]	; (17e9c <bt_conn_create_pdu_timeout+0x54>)
   17e5c:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
   17e60:	f010 fc90 	bl	28784 <assert_print>
   17e64:	480c      	ldr	r0, [pc, #48]	; (17e98 <bt_conn_create_pdu_timeout+0x50>)
   17e66:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
   17e6a:	f010 fc84 	bl	28776 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   17e6e:	480c      	ldr	r0, [pc, #48]	; (17ea0 <bt_conn_create_pdu_timeout+0x58>)
   17e70:	463a      	mov	r2, r7
   17e72:	2c00      	cmp	r4, #0
   17e74:	bf18      	it	ne
   17e76:	4620      	movne	r0, r4
   17e78:	4633      	mov	r3, r6
   17e7a:	f013 fa85 	bl	2b388 <net_buf_alloc_fixed>
	if (!buf) {
   17e7e:	4604      	mov	r4, r0
   17e80:	b928      	cbnz	r0, 17e8e <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   17e82:	4808      	ldr	r0, [pc, #32]	; (17ea4 <bt_conn_create_pdu_timeout+0x5c>)
   17e84:	2157      	movs	r1, #87	; 0x57
   17e86:	f010 fc8b 	bl	287a0 <z_log_minimal_printk>
}
   17e8a:	4620      	mov	r0, r4
   17e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   17e8e:	1d29      	adds	r1, r5, #4
   17e90:	3008      	adds	r0, #8
   17e92:	f004 fef1 	bl	1cc78 <net_buf_simple_reserve>
	return buf;
   17e96:	e7f8      	b.n	17e8a <bt_conn_create_pdu_timeout+0x42>
   17e98:	0002ea1c 	.word	0x0002ea1c
   17e9c:	0002d509 	.word	0x0002d509
   17ea0:	20000b10 	.word	0x20000b10
   17ea4:	0002ebbf 	.word	0x0002ebbf

00017ea8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   17ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17eac:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17eae:	f3bf 8f5b 	dmb	ish
   17eb2:	6863      	ldr	r3, [r4, #4]
   17eb4:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17eb8:	05db      	lsls	r3, r3, #23
   17eba:	f100 0004 	add.w	r0, r0, #4
   17ebe:	d511      	bpl.n	17ee4 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   17ec0:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17ec4:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   17ec8:	429a      	cmp	r2, r3
   17eca:	d80b      	bhi.n	17ee4 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   17ecc:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   17ed0:	429a      	cmp	r2, r3
   17ed2:	d307      	bcc.n	17ee4 <notify_le_param_updated+0x3c>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   17ed4:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   17ed8:	429a      	cmp	r2, r3
   17eda:	d103      	bne.n	17ee4 <notify_le_param_updated+0x3c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17edc:	f46f 7180 	mvn.w	r1, #256	; 0x100
   17ee0:	f011 fdc4 	bl	29a6c <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   17ee4:	4b18      	ldr	r3, [pc, #96]	; (17f48 <notify_le_param_updated+0xa0>)
   17ee6:	681d      	ldr	r5, [r3, #0]
   17ee8:	b99d      	cbnz	r5, 17f12 <notify_le_param_updated+0x6a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17eea:	4d18      	ldr	r5, [pc, #96]	; (17f4c <notify_le_param_updated+0xa4>)
   17eec:	4e18      	ldr	r6, [pc, #96]	; (17f50 <notify_le_param_updated+0xa8>)
   17eee:	4f19      	ldr	r7, [pc, #100]	; (17f54 <notify_le_param_updated+0xac>)
   17ef0:	42b5      	cmp	r5, r6
   17ef2:	d90a      	bls.n	17f0a <notify_le_param_updated+0x62>
   17ef4:	4818      	ldr	r0, [pc, #96]	; (17f58 <notify_le_param_updated+0xb0>)
   17ef6:	4639      	mov	r1, r7
   17ef8:	f240 528b 	movw	r2, #1419	; 0x58b
   17efc:	f010 fc42 	bl	28784 <assert_print>
   17f00:	f240 518b 	movw	r1, #1419	; 0x58b
   17f04:	4638      	mov	r0, r7
   17f06:	f010 fc36 	bl	28776 <assert_post_action>
   17f0a:	42b5      	cmp	r5, r6
   17f0c:	d30d      	bcc.n	17f2a <notify_le_param_updated+0x82>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   17f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->le_param_updated) {
   17f12:	68ee      	ldr	r6, [r5, #12]
   17f14:	b13e      	cbz	r6, 17f26 <notify_le_param_updated+0x7e>
			cb->le_param_updated(conn, conn->le.interval,
   17f16:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   17f1a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   17f1e:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   17f22:	4620      	mov	r0, r4
   17f24:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   17f26:	69ad      	ldr	r5, [r5, #24]
   17f28:	e7de      	b.n	17ee8 <notify_le_param_updated+0x40>
		if (cb->le_param_updated) {
   17f2a:	f8d5 800c 	ldr.w	r8, [r5, #12]
   17f2e:	f1b8 0f00 	cmp.w	r8, #0
   17f32:	d007      	beq.n	17f44 <notify_le_param_updated+0x9c>
			cb->le_param_updated(conn, conn->le.interval,
   17f34:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   17f38:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   17f3c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   17f40:	4620      	mov	r0, r4
   17f42:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17f44:	351c      	adds	r5, #28
   17f46:	e7d3      	b.n	17ef0 <notify_le_param_updated+0x48>
   17f48:	20002738 	.word	0x20002738
   17f4c:	0002c600 	.word	0x0002c600
   17f50:	0002c61c 	.word	0x0002c61c
   17f54:	0002ea1c 	.word	0x0002ea1c
   17f58:	0002d509 	.word	0x0002d509

00017f5c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   17f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17f60:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   17f62:	4608      	mov	r0, r1
{
   17f64:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   17f66:	f011 fb83 	bl	29670 <bt_le_conn_params_valid>
   17f6a:	4605      	mov	r5, r0
   17f6c:	b918      	cbnz	r0, 17f76 <le_param_req+0x1a>
		return false;
   17f6e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   17f70:	4628      	mov	r0, r5
   17f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   17f76:	4b1a      	ldr	r3, [pc, #104]	; (17fe0 <le_param_req+0x84>)
   17f78:	681e      	ldr	r6, [r3, #0]
   17f7a:	b9be      	cbnz	r6, 17fac <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17f7c:	4e19      	ldr	r6, [pc, #100]	; (17fe4 <le_param_req+0x88>)
   17f7e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 17fe8 <le_param_req+0x8c>
   17f82:	f8df 9068 	ldr.w	r9, [pc, #104]	; 17fec <le_param_req+0x90>
   17f86:	4546      	cmp	r6, r8
   17f88:	d90a      	bls.n	17fa0 <le_param_req+0x44>
   17f8a:	4819      	ldr	r0, [pc, #100]	; (17ff0 <le_param_req+0x94>)
   17f8c:	4649      	mov	r1, r9
   17f8e:	f240 52d3 	movw	r2, #1491	; 0x5d3
   17f92:	f010 fbf7 	bl	28784 <assert_print>
   17f96:	f240 51d3 	movw	r1, #1491	; 0x5d3
   17f9a:	4648      	mov	r0, r9
   17f9c:	f010 fbeb 	bl	28776 <assert_post_action>
   17fa0:	4546      	cmp	r6, r8
   17fa2:	d2e5      	bcs.n	17f70 <le_param_req+0x14>
		if (!cb->le_param_req) {
   17fa4:	68b3      	ldr	r3, [r6, #8]
   17fa6:	b983      	cbnz	r3, 17fca <le_param_req+0x6e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17fa8:	361c      	adds	r6, #28
   17faa:	e7ec      	b.n	17f86 <le_param_req+0x2a>
		if (!cb->le_param_req) {
   17fac:	68b3      	ldr	r3, [r6, #8]
   17fae:	b90b      	cbnz	r3, 17fb4 <le_param_req+0x58>
	for (cb = callback_list; cb; cb = cb->_next) {
   17fb0:	69b6      	ldr	r6, [r6, #24]
   17fb2:	e7e2      	b.n	17f7a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   17fb4:	4621      	mov	r1, r4
   17fb6:	4638      	mov	r0, r7
   17fb8:	4798      	blx	r3
   17fba:	2800      	cmp	r0, #0
   17fbc:	d0d7      	beq.n	17f6e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   17fbe:	4620      	mov	r0, r4
   17fc0:	f011 fb56 	bl	29670 <bt_le_conn_params_valid>
   17fc4:	2800      	cmp	r0, #0
   17fc6:	d1f3      	bne.n	17fb0 <le_param_req+0x54>
   17fc8:	e7d1      	b.n	17f6e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   17fca:	4621      	mov	r1, r4
   17fcc:	4638      	mov	r0, r7
   17fce:	4798      	blx	r3
   17fd0:	2800      	cmp	r0, #0
   17fd2:	d0cc      	beq.n	17f6e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   17fd4:	4620      	mov	r0, r4
   17fd6:	f011 fb4b 	bl	29670 <bt_le_conn_params_valid>
   17fda:	2800      	cmp	r0, #0
   17fdc:	d1e4      	bne.n	17fa8 <le_param_req+0x4c>
   17fde:	e7c6      	b.n	17f6e <le_param_req+0x12>
   17fe0:	20002738 	.word	0x20002738
   17fe4:	0002c600 	.word	0x0002c600
   17fe8:	0002c61c 	.word	0x0002c61c
   17fec:	0002ea1c 	.word	0x0002ea1c
   17ff0:	0002d509 	.word	0x0002d509

00017ff4 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   17ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   17ff8:	78c3      	ldrb	r3, [r0, #3]
{
   17ffa:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   17ffc:	b9db      	cbnz	r3, 18036 <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   17ffe:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18002:	4b17      	ldr	r3, [pc, #92]	; (18060 <bt_conn_identity_resolved+0x6c>)
   18004:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18006:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   1800a:	b9bd      	cbnz	r5, 1803c <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1800c:	4d15      	ldr	r5, [pc, #84]	; (18064 <bt_conn_identity_resolved+0x70>)
   1800e:	4f16      	ldr	r7, [pc, #88]	; (18068 <bt_conn_identity_resolved+0x74>)
   18010:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1806c <bt_conn_identity_resolved+0x78>
   18014:	42bd      	cmp	r5, r7
   18016:	d90a      	bls.n	1802e <bt_conn_identity_resolved+0x3a>
   18018:	4815      	ldr	r0, [pc, #84]	; (18070 <bt_conn_identity_resolved+0x7c>)
   1801a:	4641      	mov	r1, r8
   1801c:	f44f 62f2 	mov.w	r2, #1936	; 0x790
   18020:	f010 fbb0 	bl	28784 <assert_print>
   18024:	f44f 61f2 	mov.w	r1, #1936	; 0x790
   18028:	4640      	mov	r0, r8
   1802a:	f010 fba4 	bl	28776 <assert_post_action>
   1802e:	42bd      	cmp	r5, r7
   18030:	d30c      	bcc.n	1804c <bt_conn_identity_resolved+0x58>
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
		}
	}
}
   18032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   18036:	f100 0697 	add.w	r6, r0, #151	; 0x97
   1803a:	e7e2      	b.n	18002 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   1803c:	692b      	ldr	r3, [r5, #16]
   1803e:	b11b      	cbz	r3, 18048 <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18040:	463a      	mov	r2, r7
   18042:	4631      	mov	r1, r6
   18044:	4620      	mov	r0, r4
   18046:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18048:	69ad      	ldr	r5, [r5, #24]
   1804a:	e7de      	b.n	1800a <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   1804c:	692b      	ldr	r3, [r5, #16]
   1804e:	b123      	cbz	r3, 1805a <bt_conn_identity_resolved+0x66>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18050:	f104 0290 	add.w	r2, r4, #144	; 0x90
   18054:	4631      	mov	r1, r6
   18056:	4620      	mov	r0, r4
   18058:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1805a:	351c      	adds	r5, #28
   1805c:	e7da      	b.n	18014 <bt_conn_identity_resolved+0x20>
   1805e:	bf00      	nop
   18060:	20002738 	.word	0x20002738
   18064:	0002c600 	.word	0x0002c600
   18068:	0002c61c 	.word	0x0002c61c
   1806c:	0002ea1c 	.word	0x0002ea1c
   18070:	0002d509 	.word	0x0002d509

00018074 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   18074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn->required_sec_level = conn->sec_level;
   18078:	7a43      	ldrb	r3, [r0, #9]
   1807a:	7283      	strb	r3, [r0, #10]
{
   1807c:	4604      	mov	r4, r0
   1807e:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   18080:	f011 fe1d 	bl	29cbe <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18084:	4b13      	ldr	r3, [pc, #76]	; (180d4 <bt_conn_security_changed+0x60>)
   18086:	681d      	ldr	r5, [r3, #0]
   18088:	b9a5      	cbnz	r5, 180b4 <bt_conn_security_changed+0x40>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1808a:	4d13      	ldr	r5, [pc, #76]	; (180d8 <bt_conn_security_changed+0x64>)
   1808c:	4f13      	ldr	r7, [pc, #76]	; (180dc <bt_conn_security_changed+0x68>)
   1808e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 180e0 <bt_conn_security_changed+0x6c>
   18092:	42bd      	cmp	r5, r7
   18094:	d90a      	bls.n	180ac <bt_conn_security_changed+0x38>
   18096:	4813      	ldr	r0, [pc, #76]	; (180e4 <bt_conn_security_changed+0x70>)
   18098:	4641      	mov	r1, r8
   1809a:	f240 72fc 	movw	r2, #2044	; 0x7fc
   1809e:	f010 fb71 	bl	28784 <assert_print>
   180a2:	f240 71fc 	movw	r1, #2044	; 0x7fc
   180a6:	4640      	mov	r0, r8
   180a8:	f010 fb65 	bl	28776 <assert_post_action>
   180ac:	42bd      	cmp	r5, r7
   180ae:	d309      	bcc.n	180c4 <bt_conn_security_changed+0x50>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   180b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->security_changed) {
   180b4:	696b      	ldr	r3, [r5, #20]
   180b6:	b11b      	cbz	r3, 180c0 <bt_conn_security_changed+0x4c>
			cb->security_changed(conn, conn->sec_level, err);
   180b8:	7a61      	ldrb	r1, [r4, #9]
   180ba:	4632      	mov	r2, r6
   180bc:	4620      	mov	r0, r4
   180be:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   180c0:	69ad      	ldr	r5, [r5, #24]
   180c2:	e7e1      	b.n	18088 <bt_conn_security_changed+0x14>
		if (cb->security_changed) {
   180c4:	696b      	ldr	r3, [r5, #20]
   180c6:	b11b      	cbz	r3, 180d0 <bt_conn_security_changed+0x5c>
			cb->security_changed(conn, conn->sec_level, err);
   180c8:	7a61      	ldrb	r1, [r4, #9]
   180ca:	4632      	mov	r2, r6
   180cc:	4620      	mov	r0, r4
   180ce:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   180d0:	351c      	adds	r5, #28
   180d2:	e7de      	b.n	18092 <bt_conn_security_changed+0x1e>
   180d4:	20002738 	.word	0x20002738
   180d8:	0002c600 	.word	0x0002c600
   180dc:	0002c61c 	.word	0x0002c61c
   180e0:	0002ea1c 	.word	0x0002ea1c
   180e4:	0002d509 	.word	0x0002d509

000180e8 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   180e8:	b538      	push	{r3, r4, r5, lr}
   180ea:	4605      	mov	r5, r0
   180ec:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   180ee:	480b      	ldr	r0, [pc, #44]	; (1811c <bt_conn_add_le+0x34>)
   180f0:	2101      	movs	r1, #1
   180f2:	f7ff fc0b 	bl	1790c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   180f6:	b180      	cbz	r0, 1811a <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   180f8:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   180fa:	6823      	ldr	r3, [r4, #0]
   180fc:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   18100:	88a3      	ldrh	r3, [r4, #4]
   18102:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   18106:	79a3      	ldrb	r3, [r4, #6]
   18108:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1810c:	2301      	movs	r3, #1
   1810e:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   18110:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   18112:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   18114:	4b02      	ldr	r3, [pc, #8]	; (18120 <bt_conn_add_le+0x38>)
   18116:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1811a:	bd38      	pop	{r3, r4, r5, pc}
   1811c:	20001ad0 	.word	0x20001ad0
   18120:	00280018 	.word	0x00280018

00018124 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   18124:	b570      	push	{r4, r5, r6, lr}
   18126:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18128:	480c      	ldr	r0, [pc, #48]	; (1815c <bt_conn_lookup_addr_le+0x38>)
{
   1812a:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1812c:	f011 fcb9 	bl	29aa2 <bt_conn_ref>

		if (!conn) {
   18130:	4604      	mov	r4, r0
   18132:	b128      	cbz	r0, 18140 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18134:	7883      	ldrb	r3, [r0, #2]
   18136:	2b01      	cmp	r3, #1
   18138:	d004      	beq.n	18144 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   1813a:	f7ff fd57 	bl	17bec <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1813e:	2400      	movs	r4, #0
}
   18140:	4620      	mov	r0, r4
   18142:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   18144:	4629      	mov	r1, r5
   18146:	4632      	mov	r2, r6
   18148:	f011 fd47 	bl	29bda <bt_conn_is_peer_addr_le>
   1814c:	4605      	mov	r5, r0
   1814e:	2800      	cmp	r0, #0
   18150:	d1f6      	bne.n	18140 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   18152:	4620      	mov	r0, r4
   18154:	f7ff fd4a 	bl	17bec <bt_conn_unref>
	return NULL;
   18158:	462c      	mov	r4, r5
			continue;
   1815a:	e7f1      	b.n	18140 <bt_conn_lookup_addr_le+0x1c>
   1815c:	20001ad0 	.word	0x20001ad0

00018160 <bt_conn_exists_le>:
{
   18160:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   18162:	f7ff ffdf 	bl	18124 <bt_conn_lookup_addr_le>
	if (conn) {
   18166:	4604      	mov	r4, r0
   18168:	b170      	cbz	r0, 18188 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   1816a:	7b43      	ldrb	r3, [r0, #13]
   1816c:	4807      	ldr	r0, [pc, #28]	; (1818c <bt_conn_exists_le+0x2c>)
   1816e:	2b08      	cmp	r3, #8
   18170:	bf96      	itet	ls
   18172:	4a07      	ldrls	r2, [pc, #28]	; (18190 <bt_conn_exists_le+0x30>)
   18174:	4a07      	ldrhi	r2, [pc, #28]	; (18194 <bt_conn_exists_le+0x34>)
   18176:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   1817a:	2157      	movs	r1, #87	; 0x57
   1817c:	f010 fb10 	bl	287a0 <z_log_minimal_printk>
		bt_conn_unref(conn);
   18180:	4620      	mov	r0, r4
   18182:	f7ff fd33 	bl	17bec <bt_conn_unref>
		return true;
   18186:	2001      	movs	r0, #1
}
   18188:	bd10      	pop	{r4, pc}
   1818a:	bf00      	nop
   1818c:	0002ebed 	.word	0x0002ebed
   18190:	0002ca9c 	.word	0x0002ca9c
   18194:	0002eb62 	.word	0x0002eb62

00018198 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   18198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1819a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1819c:	480e      	ldr	r0, [pc, #56]	; (181d8 <bt_conn_lookup_state_le+0x40>)
{
   1819e:	460e      	mov	r6, r1
   181a0:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   181a2:	f011 fc7e 	bl	29aa2 <bt_conn_ref>

		if (!conn) {
   181a6:	4604      	mov	r4, r0
   181a8:	b1a0      	cbz	r0, 181d4 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   181aa:	7883      	ldrb	r3, [r0, #2]
   181ac:	2b01      	cmp	r3, #1
   181ae:	d003      	beq.n	181b8 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   181b0:	f7ff fd1c 	bl	17bec <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   181b4:	2400      	movs	r4, #0
			continue;
   181b6:	e00d      	b.n	181d4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   181b8:	b136      	cbz	r6, 181c8 <bt_conn_lookup_state_le+0x30>
   181ba:	4632      	mov	r2, r6
   181bc:	4629      	mov	r1, r5
   181be:	f011 fd0c 	bl	29bda <bt_conn_is_peer_addr_le>
   181c2:	b908      	cbnz	r0, 181c8 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   181c4:	4620      	mov	r0, r4
   181c6:	e7f3      	b.n	181b0 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   181c8:	7b63      	ldrb	r3, [r4, #13]
   181ca:	42bb      	cmp	r3, r7
   181cc:	d1fa      	bne.n	181c4 <bt_conn_lookup_state_le+0x2c>
   181ce:	7a23      	ldrb	r3, [r4, #8]
   181d0:	42ab      	cmp	r3, r5
   181d2:	d1f7      	bne.n	181c4 <bt_conn_lookup_state_le+0x2c>
}
   181d4:	4620      	mov	r0, r4
   181d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   181d8:	20001ad0 	.word	0x20001ad0

000181dc <send_conn_le_param_update>:
{
   181dc:	b538      	push	{r3, r4, r5, lr}
   181de:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   181e0:	4608      	mov	r0, r1
{
   181e2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   181e4:	f011 fa44 	bl	29670 <bt_le_conn_params_valid>
   181e8:	b348      	cbz	r0, 1823e <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   181ea:	4b16      	ldr	r3, [pc, #88]	; (18244 <send_conn_le_param_update+0x68>)
   181ec:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   181f0:	0799      	lsls	r1, r3, #30
   181f2:	d407      	bmi.n	18204 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   181f4:	78e3      	ldrb	r3, [r4, #3]
   181f6:	b183      	cbz	r3, 1821a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   181f8:	4629      	mov	r1, r5
   181fa:	4620      	mov	r0, r4
}
   181fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   18200:	f000 baa2 	b.w	18748 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18204:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   18208:	079a      	lsls	r2, r3, #30
   1820a:	d5f3      	bpl.n	181f4 <send_conn_le_param_update+0x18>
   1820c:	f3bf 8f5b 	dmb	ish
   18210:	6863      	ldr	r3, [r4, #4]
   18212:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   18216:	059b      	lsls	r3, r3, #22
   18218:	d4ec      	bmi.n	181f4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1821a:	4629      	mov	r1, r5
   1821c:	4620      	mov	r0, r4
   1821e:	f011 fcfe 	bl	29c1e <bt_conn_le_conn_update>
		if (rc == 0) {
   18222:	b958      	cbnz	r0, 1823c <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   18224:	882b      	ldrh	r3, [r5, #0]
   18226:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1822a:	886b      	ldrh	r3, [r5, #2]
   1822c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   18230:	88ab      	ldrh	r3, [r5, #4]
   18232:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   18236:	88eb      	ldrh	r3, [r5, #6]
   18238:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   1823c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1823e:	f06f 0015 	mvn.w	r0, #21
   18242:	e7fb      	b.n	1823c <send_conn_le_param_update+0x60>
   18244:	20000350 	.word	0x20000350

00018248 <deferred_work>:
{
   18248:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1824c:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   18250:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   18252:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   18256:	bb73      	cbnz	r3, 182b6 <deferred_work+0x6e>
		bt_l2cap_disconnected(conn);
   18258:	4628      	mov	r0, r5
   1825a:	f011 fd1f 	bl	29c9c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1825e:	4b31      	ldr	r3, [pc, #196]	; (18324 <deferred_work+0xdc>)
   18260:	681e      	ldr	r6, [r3, #0]
   18262:	b9c6      	cbnz	r6, 18296 <deferred_work+0x4e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18264:	4e30      	ldr	r6, [pc, #192]	; (18328 <deferred_work+0xe0>)
   18266:	4f31      	ldr	r7, [pc, #196]	; (1832c <deferred_work+0xe4>)
   18268:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 18330 <deferred_work+0xe8>
   1826c:	42be      	cmp	r6, r7
   1826e:	d90a      	bls.n	18286 <deferred_work+0x3e>
   18270:	4830      	ldr	r0, [pc, #192]	; (18334 <deferred_work+0xec>)
   18272:	4641      	mov	r1, r8
   18274:	f240 5252 	movw	r2, #1362	; 0x552
   18278:	f010 fa84 	bl	28784 <assert_print>
   1827c:	f240 5152 	movw	r1, #1362	; 0x552
   18280:	4640      	mov	r0, r8
   18282:	f010 fa78 	bl	28776 <assert_post_action>
   18286:	42be      	cmp	r6, r7
   18288:	d30d      	bcc.n	182a6 <deferred_work+0x5e>
		bt_conn_unref(conn);
   1828a:	4628      	mov	r0, r5
}
   1828c:	b002      	add	sp, #8
   1828e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   18292:	f7ff bcab 	b.w	17bec <bt_conn_unref>
		if (cb->disconnected) {
   18296:	6873      	ldr	r3, [r6, #4]
   18298:	b11b      	cbz	r3, 182a2 <deferred_work+0x5a>
			cb->disconnected(conn, conn->err);
   1829a:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   1829e:	4628      	mov	r0, r5
   182a0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   182a2:	69b6      	ldr	r6, [r6, #24]
   182a4:	e7dd      	b.n	18262 <deferred_work+0x1a>
		if (cb->disconnected) {
   182a6:	6873      	ldr	r3, [r6, #4]
   182a8:	b11b      	cbz	r3, 182b2 <deferred_work+0x6a>
			cb->disconnected(conn, conn->err);
   182aa:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   182ae:	4628      	mov	r0, r5
   182b0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   182b2:	361c      	adds	r6, #28
   182b4:	e7da      	b.n	1826c <deferred_work+0x24>
	if (conn->type != BT_CONN_TYPE_LE) {
   182b6:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   182ba:	2b01      	cmp	r3, #1
   182bc:	d128      	bne.n	18310 <deferred_work+0xc8>
	if (atomic_test_and_clear_bit(conn->flags,
   182be:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   182c2:	f46f 7180 	mvn.w	r1, #256	; 0x100
   182c6:	4630      	mov	r0, r6
   182c8:	f011 fbd0 	bl	29a6c <atomic_and>
   182cc:	05c3      	lsls	r3, r0, #23
   182ce:	d522      	bpl.n	18316 <deferred_work+0xce>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   182d0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   182d4:	f8ad 3000 	strh.w	r3, [sp]
   182d8:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   182dc:	f8ad 3002 	strh.w	r3, [sp, #2]
   182e0:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   182e4:	f8ad 3004 	strh.w	r3, [sp, #4]
   182e8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   182ec:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   182f0:	4669      	mov	r1, sp
   182f2:	4628      	mov	r0, r5
   182f4:	f7ff ff72 	bl	181dc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   182f8:	f3bf 8f5b 	dmb	ish
   182fc:	e856 3f00 	ldrex	r3, [r6]
   18300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18304:	e846 3200 	strex	r2, r3, [r6]
   18308:	2a00      	cmp	r2, #0
   1830a:	d1f7      	bne.n	182fc <deferred_work+0xb4>
   1830c:	f3bf 8f5b 	dmb	ish
}
   18310:	b002      	add	sp, #8
   18312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		param = BT_LE_CONN_PARAM(
   18316:	4a08      	ldr	r2, [pc, #32]	; (18338 <deferred_work+0xf0>)
   18318:	6810      	ldr	r0, [r2, #0]
   1831a:	6851      	ldr	r1, [r2, #4]
   1831c:	466b      	mov	r3, sp
   1831e:	c303      	stmia	r3!, {r0, r1}
   18320:	e7e6      	b.n	182f0 <deferred_work+0xa8>
   18322:	bf00      	nop
   18324:	20002738 	.word	0x20002738
   18328:	0002c600 	.word	0x0002c600
   1832c:	0002c61c 	.word	0x0002c61c
   18330:	0002ea1c 	.word	0x0002ea1c
   18334:	0002d509 	.word	0x0002d509
   18338:	0002c80c 	.word	0x0002c80c

0001833c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1833c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1833e:	4801      	ldr	r0, [pc, #4]	; (18344 <bt_conn_create_frag_timeout+0x8>)
   18340:	f7ff bd82 	b.w	17e48 <bt_conn_create_pdu_timeout>
   18344:	20000b78 	.word	0x20000b78

00018348 <create_frag>:
{
   18348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1834c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1834e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18356:	2000      	movs	r0, #0
{
   18358:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1835a:	f7ff ffef 	bl	1833c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1835e:	7b73      	ldrb	r3, [r6, #13]
   18360:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   18362:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   18364:	f04f 0600 	mov.w	r6, #0
   18368:	d005      	beq.n	18376 <create_frag+0x2e>
		net_buf_unref(frag);
   1836a:	f004 fda5 	bl	1ceb8 <net_buf_unref>
		return NULL;
   1836e:	4635      	mov	r5, r6
}
   18370:	4628      	mov	r0, r5
   18372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   18376:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   18378:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   1837c:	4e0c      	ldr	r6, [pc, #48]	; (183b0 <create_frag+0x68>)
   1837e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18380:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   18384:	f013 f811 	bl	2b3aa <net_buf_simple_tailroom>
   18388:	4580      	cmp	r8, r0
   1838a:	d20c      	bcs.n	183a6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   1838c:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18390:	f854 1f08 	ldr.w	r1, [r4, #8]!
   18394:	4632      	mov	r2, r6
   18396:	4638      	mov	r0, r7
   18398:	f013 f80f 	bl	2b3ba <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1839c:	4631      	mov	r1, r6
   1839e:	4620      	mov	r0, r4
   183a0:	f004 fe66 	bl	1d070 <net_buf_simple_pull>
   183a4:	e7e4      	b.n	18370 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   183a6:	4638      	mov	r0, r7
   183a8:	f012 ffff 	bl	2b3aa <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   183ac:	b286      	uxth	r6, r0
   183ae:	e7ef      	b.n	18390 <create_frag+0x48>
   183b0:	20000350 	.word	0x20000350

000183b4 <bt_conn_process_tx>:
{
   183b4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   183b6:	7b43      	ldrb	r3, [r0, #13]
{
   183b8:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   183ba:	b95b      	cbnz	r3, 183d4 <bt_conn_process_tx+0x20>
   183bc:	f06f 0140 	mvn.w	r1, #64	; 0x40
   183c0:	3004      	adds	r0, #4
   183c2:	f011 fb53 	bl	29a6c <atomic_and>
   183c6:	0643      	lsls	r3, r0, #25
   183c8:	d504      	bpl.n	183d4 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   183ca:	4620      	mov	r0, r4
}
   183cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   183d0:	f7ff bad0 	b.w	17974 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   183d4:	2200      	movs	r2, #0
   183d6:	2300      	movs	r3, #0
   183d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   183dc:	f004 fc1c 	bl	1cc18 <net_buf_get>
	BT_ASSERT(buf);
   183e0:	4605      	mov	r5, r0
   183e2:	b958      	cbnz	r0, 183fc <bt_conn_process_tx+0x48>
   183e4:	4923      	ldr	r1, [pc, #140]	; (18474 <bt_conn_process_tx+0xc0>)
   183e6:	4824      	ldr	r0, [pc, #144]	; (18478 <bt_conn_process_tx+0xc4>)
   183e8:	f240 320b 	movw	r2, #779	; 0x30b
   183ec:	f010 f9ca 	bl	28784 <assert_print>
   183f0:	4040      	eors	r0, r0
   183f2:	f380 8811 	msr	BASEPRI, r0
   183f6:	f04f 0003 	mov.w	r0, #3
   183fa:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   183fc:	4e1f      	ldr	r6, [pc, #124]	; (1847c <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   183fe:	89aa      	ldrh	r2, [r5, #12]
   18400:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   18404:	429a      	cmp	r2, r3
   18406:	d807      	bhi.n	18418 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   18408:	2300      	movs	r3, #0
   1840a:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1840c:	4629      	mov	r1, r5
   1840e:	4620      	mov	r0, r4
   18410:	f7ff f9e6 	bl	177e0 <send_frag>
	if (!send_buf(conn, buf)) {
   18414:	b968      	cbnz	r0, 18432 <bt_conn_process_tx+0x7e>
   18416:	e005      	b.n	18424 <bt_conn_process_tx+0x70>
	frag = create_frag(conn, buf);
   18418:	4629      	mov	r1, r5
   1841a:	4620      	mov	r0, r4
   1841c:	f7ff ff94 	bl	18348 <create_frag>
	if (!frag) {
   18420:	4601      	mov	r1, r0
   18422:	b938      	cbnz	r0, 18434 <bt_conn_process_tx+0x80>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   18424:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   18426:	2300      	movs	r3, #0
   18428:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   1842a:	4628      	mov	r0, r5
   1842c:	f004 fd44 	bl	1ceb8 <net_buf_unref>
		if (tx) {
   18430:	b9ce      	cbnz	r6, 18466 <bt_conn_process_tx+0xb2>
}
   18432:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   18434:	2301      	movs	r3, #1
   18436:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   18438:	4620      	mov	r0, r4
   1843a:	f7ff f9d1 	bl	177e0 <send_frag>
   1843e:	2800      	cmp	r0, #0
   18440:	d0f0      	beq.n	18424 <bt_conn_process_tx+0x70>
	while (buf->len > conn_mtu(conn)) {
   18442:	89aa      	ldrh	r2, [r5, #12]
   18444:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   18448:	429a      	cmp	r2, r3
   1844a:	d802      	bhi.n	18452 <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   1844c:	2300      	movs	r3, #0
   1844e:	2203      	movs	r2, #3
   18450:	e7dc      	b.n	1840c <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
   18452:	4629      	mov	r1, r5
   18454:	4620      	mov	r0, r4
   18456:	f7ff ff77 	bl	18348 <create_frag>
		if (!frag) {
   1845a:	4601      	mov	r1, r0
   1845c:	2800      	cmp	r0, #0
   1845e:	d0e1      	beq.n	18424 <bt_conn_process_tx+0x70>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   18460:	2301      	movs	r3, #1
   18462:	461a      	mov	r2, r3
   18464:	e7e8      	b.n	18438 <bt_conn_process_tx+0x84>
			conn_tx_destroy(conn, tx);
   18466:	4631      	mov	r1, r6
   18468:	4620      	mov	r0, r4
}
   1846a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   1846e:	f7ff b991 	b.w	17794 <conn_tx_destroy>
   18472:	bf00      	nop
   18474:	0002ea1c 	.word	0x0002ea1c
   18478:	0002d509 	.word	0x0002d509
   1847c:	20000350 	.word	0x20000350

00018480 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   18480:	4b0c      	ldr	r3, [pc, #48]	; (184b4 <bt_conn_auth_cb_register+0x34>)
   18482:	b908      	cbnz	r0, 18488 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   18484:	6018      	str	r0, [r3, #0]
		return 0;
   18486:	4770      	bx	lr
	}

	if (bt_auth) {
   18488:	681a      	ldr	r2, [r3, #0]
   1848a:	b962      	cbnz	r2, 184a6 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1848c:	6902      	ldr	r2, [r0, #16]
   1848e:	b93a      	cbnz	r2, 184a0 <bt_conn_auth_cb_register+0x20>
   18490:	6802      	ldr	r2, [r0, #0]
   18492:	b95a      	cbnz	r2, 184ac <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   18494:	6842      	ldr	r2, [r0, #4]
   18496:	b94a      	cbnz	r2, 184ac <bt_conn_auth_cb_register+0x2c>
   18498:	6882      	ldr	r2, [r0, #8]
   1849a:	b93a      	cbnz	r2, 184ac <bt_conn_auth_cb_register+0x2c>
   1849c:	6942      	ldr	r2, [r0, #20]
   1849e:	b92a      	cbnz	r2, 184ac <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   184a0:	6018      	str	r0, [r3, #0]
	return 0;
   184a2:	2000      	movs	r0, #0
   184a4:	4770      	bx	lr
		return -EALREADY;
   184a6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   184aa:	4770      	bx	lr
		return -EINVAL;
   184ac:	f06f 0015 	mvn.w	r0, #21
}
   184b0:	4770      	bx	lr
   184b2:	bf00      	nop
   184b4:	2000272c 	.word	0x2000272c

000184b8 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   184b8:	4603      	mov	r3, r0
   184ba:	b168      	cbz	r0, 184d8 <bt_conn_auth_info_cb_register+0x20>
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   184bc:	f100 020c 	add.w	r2, r0, #12
	parent->next = child;
   184c0:	2000      	movs	r0, #0
   184c2:	60d8      	str	r0, [r3, #12]
	return list->tail;
   184c4:	4b06      	ldr	r3, [pc, #24]	; (184e0 <bt_conn_auth_info_cb_register+0x28>)
   184c6:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   184c8:	b919      	cbnz	r1, 184d2 <bt_conn_auth_info_cb_register+0x1a>
	list->head = node;
   184ca:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   184ce:	4608      	mov	r0, r1
}
   184d0:	4770      	bx	lr
	parent->next = child;
   184d2:	600a      	str	r2, [r1, #0]
	list->tail = node;
   184d4:	605a      	str	r2, [r3, #4]
}
   184d6:	4770      	bx	lr
		return -EINVAL;
   184d8:	f06f 0015 	mvn.w	r0, #21
}
   184dc:	4770      	bx	lr
   184de:	bf00      	nop
   184e0:	20002730 	.word	0x20002730

000184e4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   184e4:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   184e6:	490b      	ldr	r1, [pc, #44]	; (18514 <bt_conn_init+0x30>)
   184e8:	480b      	ldr	r0, [pc, #44]	; (18518 <bt_conn_init+0x34>)
   184ea:	f013 fc69 	bl	2bdc0 <k_queue_append>
   184ee:	490b      	ldr	r1, [pc, #44]	; (1851c <bt_conn_init+0x38>)
   184f0:	4809      	ldr	r0, [pc, #36]	; (18518 <bt_conn_init+0x34>)
   184f2:	f013 fc65 	bl	2bdc0 <k_queue_append>
   184f6:	490a      	ldr	r1, [pc, #40]	; (18520 <bt_conn_init+0x3c>)
   184f8:	4807      	ldr	r0, [pc, #28]	; (18518 <bt_conn_init+0x34>)
   184fa:	f013 fc61 	bl	2bdc0 <k_queue_append>
	}

	bt_att_init();
   184fe:	f001 f82d 	bl	1955c <bt_att_init>

	err = bt_smp_init();
   18502:	f004 f8bd 	bl	1c680 <bt_smp_init>
	if (err) {
   18506:	4604      	mov	r4, r0
   18508:	b908      	cbnz	r0, 1850e <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   1850a:	f011 fc1d 	bl	29d48 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1850e:	4620      	mov	r0, r4
   18510:	bd10      	pop	{r4, pc}
   18512:	bf00      	nop
   18514:	2000273c 	.word	0x2000273c
   18518:	20000af4 	.word	0x20000af4
   1851c:	2000274c 	.word	0x2000274c
   18520:	2000275c 	.word	0x2000275c

00018524 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   18524:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   18526:	4b07      	ldr	r3, [pc, #28]	; (18544 <l2cap_accept+0x20>)
{
   18528:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
   1852a:	6818      	ldr	r0, [r3, #0]
   1852c:	b918      	cbnz	r0, 18536 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1852e:	4a06      	ldr	r2, [pc, #24]	; (18548 <l2cap_accept+0x24>)
   18530:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   18532:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   18534:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   18536:	4805      	ldr	r0, [pc, #20]	; (1854c <l2cap_accept+0x28>)
   18538:	2145      	movs	r1, #69	; 0x45
   1853a:	f010 f931 	bl	287a0 <z_log_minimal_printk>
   1853e:	f06f 000b 	mvn.w	r0, #11
   18542:	e7f7      	b.n	18534 <l2cap_accept+0x10>
   18544:	2000276c 	.word	0x2000276c
   18548:	0002cae0 	.word	0x0002cae0
   1854c:	0002ec8e 	.word	0x0002ec8e

00018550 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   18550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18552:	4605      	mov	r5, r0
   18554:	460f      	mov	r7, r1
   18556:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   18558:	2300      	movs	r3, #0
   1855a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1855e:	2104      	movs	r1, #4
   18560:	2000      	movs	r0, #0
   18562:	f7ff fc71 	bl	17e48 <bt_conn_create_pdu_timeout>
	if (!buf) {
   18566:	4604      	mov	r4, r0
   18568:	b930      	cbnz	r0, 18578 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1856a:	4807      	ldr	r0, [pc, #28]	; (18588 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   1856c:	462a      	mov	r2, r5
   1856e:	2145      	movs	r1, #69	; 0x45
   18570:	f010 f916 	bl	287a0 <z_log_minimal_printk>
}
   18574:	4620      	mov	r0, r4
   18576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   18578:	2104      	movs	r1, #4
   1857a:	3008      	adds	r0, #8
   1857c:	f004 fdb2 	bl	1d0e4 <net_buf_simple_add>
	hdr->code = code;
   18580:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   18582:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   18584:	8046      	strh	r6, [r0, #2]
	return buf;
   18586:	e7f5      	b.n	18574 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   18588:	0002ecba 	.word	0x0002ecba

0001858c <bt_l2cap_connected>:
{
   1858c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1858e:	4d2b      	ldr	r5, [pc, #172]	; (1863c <bt_l2cap_connected+0xb0>)
   18590:	4e2b      	ldr	r6, [pc, #172]	; (18640 <bt_l2cap_connected+0xb4>)
   18592:	4f2c      	ldr	r7, [pc, #176]	; (18644 <bt_l2cap_connected+0xb8>)
{
   18594:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18596:	42b5      	cmp	r5, r6
   18598:	d90a      	bls.n	185b0 <bt_l2cap_connected+0x24>
   1859a:	482b      	ldr	r0, [pc, #172]	; (18648 <bt_l2cap_connected+0xbc>)
   1859c:	4639      	mov	r1, r7
   1859e:	f240 1281 	movw	r2, #385	; 0x181
   185a2:	f010 f8ef 	bl	28784 <assert_print>
   185a6:	f240 1181 	movw	r1, #385	; 0x181
   185aa:	4638      	mov	r0, r7
   185ac:	f010 f8e3 	bl	28776 <assert_post_action>
   185b0:	42b5      	cmp	r5, r6
   185b2:	d301      	bcc.n	185b8 <bt_l2cap_connected+0x2c>
}
   185b4:	b003      	add	sp, #12
   185b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   185b8:	686b      	ldr	r3, [r5, #4]
   185ba:	a901      	add	r1, sp, #4
   185bc:	4620      	mov	r0, r4
   185be:	4798      	blx	r3
   185c0:	2800      	cmp	r0, #0
   185c2:	db35      	blt.n	18630 <bt_l2cap_connected+0xa4>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   185c4:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   185c6:	882a      	ldrh	r2, [r5, #0]
   185c8:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   185ca:	849a      	strh	r2, [r3, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   185cc:	2100      	movs	r1, #0
   185ce:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   185d2:	68a8      	ldr	r0, [r5, #8]
   185d4:	f3bf 8f5b 	dmb	ish
   185d8:	e852 cf00 	ldrex	ip, [r2]
   185dc:	e842 1e00 	strex	lr, r1, [r2]
   185e0:	f1be 0f00 	cmp.w	lr, #0
   185e4:	d1f8      	bne.n	185d8 <bt_l2cap_connected+0x4c>
   185e6:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   185ea:	6099      	str	r1, [r3, #8]
	return list->tail;
   185ec:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   185ee:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   185f2:	b9f9      	cbnz	r1, 18634 <bt_l2cap_connected+0xa8>
	list->head = node;
   185f4:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->destroy = destroy;
   185f8:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   185fa:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   185fc:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   185fe:	6843      	ldr	r3, [r0, #4]
   18600:	681b      	ldr	r3, [r3, #0]
   18602:	b103      	cbz	r3, 18606 <bt_l2cap_connected+0x7a>
			chan->ops->connected(chan);
   18604:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18606:	9b01      	ldr	r3, [sp, #4]
   18608:	f3bf 8f5b 	dmb	ish
   1860c:	3310      	adds	r3, #16
   1860e:	e853 2f00 	ldrex	r2, [r3]
   18612:	f042 0201 	orr.w	r2, r2, #1
   18616:	e843 2100 	strex	r1, r2, [r3]
   1861a:	2900      	cmp	r1, #0
   1861c:	d1f7      	bne.n	1860e <bt_l2cap_connected+0x82>
   1861e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18622:	9801      	ldr	r0, [sp, #4]
   18624:	6843      	ldr	r3, [r0, #4]
   18626:	699b      	ldr	r3, [r3, #24]
   18628:	b113      	cbz	r3, 18630 <bt_l2cap_connected+0xa4>
			chan->ops->status(chan, chan->status);
   1862a:	f100 0110 	add.w	r1, r0, #16
   1862e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18630:	350c      	adds	r5, #12
   18632:	e7b0      	b.n	18596 <bt_l2cap_connected+0xa>
	parent->next = child;
   18634:	600a      	str	r2, [r1, #0]
	list->tail = node;
   18636:	65a2      	str	r2, [r4, #88]	; 0x58
}
   18638:	e7de      	b.n	185f8 <bt_l2cap_connected+0x6c>
   1863a:	bf00      	nop
   1863c:	0002c5dc 	.word	0x0002c5dc
   18640:	0002c600 	.word	0x0002c600
   18644:	0002ece7 	.word	0x0002ece7
   18648:	0002d509 	.word	0x0002d509

0001864c <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1864c:	898b      	ldrh	r3, [r1, #12]
   1864e:	2b03      	cmp	r3, #3
{
   18650:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18652:	4606      	mov	r6, r0
   18654:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   18656:	d804      	bhi.n	18662 <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
   18658:	4822      	ldr	r0, [pc, #136]	; (186e4 <l2cap_recv+0x98>)
   1865a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
   1865c:	f010 f8a0 	bl	287a0 <z_log_minimal_printk>
		return 0;
   18660:	e00d      	b.n	1867e <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   18662:	2104      	movs	r1, #4
   18664:	f105 0008 	add.w	r0, r5, #8
   18668:	f004 fd1e 	bl	1d0a8 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1866c:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1866e:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   18670:	4293      	cmp	r3, r2
   18672:	4604      	mov	r4, r0
   18674:	d006      	beq.n	18684 <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   18676:	481c      	ldr	r0, [pc, #112]	; (186e8 <l2cap_recv+0x9c>)
   18678:	2145      	movs	r1, #69	; 0x45
   1867a:	f010 f891 	bl	287a0 <z_log_minimal_printk>
}
   1867e:	2000      	movs	r0, #0
   18680:	b002      	add	sp, #8
   18682:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   18684:	7842      	ldrb	r2, [r0, #1]
   18686:	b912      	cbnz	r2, 1868e <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
   18688:	4818      	ldr	r0, [pc, #96]	; (186ec <l2cap_recv+0xa0>)
   1868a:	2145      	movs	r1, #69	; 0x45
   1868c:	e7e6      	b.n	1865c <l2cap_recv+0x10>
	switch (hdr->code) {
   1868e:	7802      	ldrb	r2, [r0, #0]
   18690:	2a01      	cmp	r2, #1
   18692:	d0f4      	beq.n	1867e <l2cap_recv+0x32>
   18694:	2a13      	cmp	r2, #19
   18696:	d104      	bne.n	186a2 <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
   18698:	2b01      	cmp	r3, #1
   1869a:	d8f0      	bhi.n	1867e <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
   1869c:	4814      	ldr	r0, [pc, #80]	; (186f0 <l2cap_recv+0xa4>)
   1869e:	2145      	movs	r1, #69	; 0x45
   186a0:	e7dc      	b.n	1865c <l2cap_recv+0x10>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   186a2:	4814      	ldr	r0, [pc, #80]	; (186f4 <l2cap_recv+0xa8>)
   186a4:	2157      	movs	r1, #87	; 0x57
   186a6:	f010 f87b 	bl	287a0 <z_log_minimal_printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   186aa:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   186ac:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   186ae:	2202      	movs	r2, #2
   186b0:	2001      	movs	r0, #1
   186b2:	f7ff ff4d 	bl	18550 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   186b6:	4604      	mov	r4, r0
   186b8:	2800      	cmp	r0, #0
   186ba:	d0e0      	beq.n	1867e <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
   186bc:	2102      	movs	r1, #2
   186be:	3008      	adds	r0, #8
   186c0:	f004 fd10 	bl	1d0e4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   186c4:	2300      	movs	r3, #0
   186c6:	7003      	strb	r3, [r0, #0]
   186c8:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   186ca:	4622      	mov	r2, r4
   186cc:	9300      	str	r3, [sp, #0]
   186ce:	2105      	movs	r1, #5
   186d0:	4628      	mov	r0, r5
   186d2:	f011 fb0c 	bl	29cee <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   186d6:	2800      	cmp	r0, #0
   186d8:	d0d1      	beq.n	1867e <l2cap_recv+0x32>
		net_buf_unref(buf);
   186da:	4620      	mov	r0, r4
   186dc:	f004 fbec 	bl	1ceb8 <net_buf_unref>
   186e0:	e7cd      	b.n	1867e <l2cap_recv+0x32>
   186e2:	bf00      	nop
   186e4:	0002ed18 	.word	0x0002ed18
   186e8:	0002ed3b 	.word	0x0002ed3b
   186ec:	0002ed61 	.word	0x0002ed61
   186f0:	0002ed87 	.word	0x0002ed87
   186f4:	0002eda8 	.word	0x0002eda8

000186f8 <bt_l2cap_recv>:
{
   186f8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   186fa:	898b      	ldrh	r3, [r1, #12]
   186fc:	2b03      	cmp	r3, #3
{
   186fe:	4605      	mov	r5, r0
   18700:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18702:	d808      	bhi.n	18716 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   18704:	480e      	ldr	r0, [pc, #56]	; (18740 <bt_l2cap_recv+0x48>)
   18706:	2145      	movs	r1, #69	; 0x45
   18708:	f010 f84a 	bl	287a0 <z_log_minimal_printk>
	net_buf_unref(buf);
   1870c:	4620      	mov	r0, r4
}
   1870e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   18712:	f004 bbd1 	b.w	1ceb8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   18716:	2104      	movs	r1, #4
   18718:	f104 0008 	add.w	r0, r4, #8
   1871c:	f004 fcc4 	bl	1d0a8 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   18720:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   18722:	4628      	mov	r0, r5
   18724:	4611      	mov	r1, r2
   18726:	f011 fb05 	bl	29d34 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1872a:	b920      	cbnz	r0, 18736 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1872c:	4805      	ldr	r0, [pc, #20]	; (18744 <bt_l2cap_recv+0x4c>)
   1872e:	2157      	movs	r1, #87	; 0x57
   18730:	f010 f836 	bl	287a0 <z_log_minimal_printk>
		net_buf_unref(buf);
   18734:	e7ea      	b.n	1870c <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   18736:	6843      	ldr	r3, [r0, #4]
   18738:	4621      	mov	r1, r4
   1873a:	691b      	ldr	r3, [r3, #16]
   1873c:	4798      	blx	r3
   1873e:	e7e5      	b.n	1870c <bt_l2cap_recv+0x14>
   18740:	0002edcb 	.word	0x0002edcb
   18744:	0002eded 	.word	0x0002eded

00018748 <bt_l2cap_update_conn_param>:
{
   18748:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1874a:	460d      	mov	r5, r1
	ident++;
   1874c:	4916      	ldr	r1, [pc, #88]	; (187a8 <bt_l2cap_update_conn_param+0x60>)
   1874e:	780b      	ldrb	r3, [r1, #0]
   18750:	3301      	adds	r3, #1
	if (!ident) {
   18752:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   18756:	bf08      	it	eq
   18758:	2301      	moveq	r3, #1
   1875a:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1875c:	7809      	ldrb	r1, [r1, #0]
{
   1875e:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18760:	2208      	movs	r2, #8
   18762:	2012      	movs	r0, #18
   18764:	f7ff fef4 	bl	18550 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18768:	4604      	mov	r4, r0
   1876a:	b1d0      	cbz	r0, 187a2 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1876c:	2108      	movs	r1, #8
   1876e:	4408      	add	r0, r1
   18770:	f004 fcb8 	bl	1d0e4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   18774:	882b      	ldrh	r3, [r5, #0]
   18776:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   18778:	886b      	ldrh	r3, [r5, #2]
   1877a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1877c:	88ab      	ldrh	r3, [r5, #4]
   1877e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   18780:	88eb      	ldrh	r3, [r5, #6]
   18782:	80c3      	strh	r3, [r0, #6]
   18784:	2300      	movs	r3, #0
   18786:	9300      	str	r3, [sp, #0]
   18788:	4622      	mov	r2, r4
   1878a:	2105      	movs	r1, #5
   1878c:	4630      	mov	r0, r6
   1878e:	f011 faae 	bl	29cee <bt_l2cap_send_cb>
	if (err) {
   18792:	4605      	mov	r5, r0
   18794:	b110      	cbz	r0, 1879c <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   18796:	4620      	mov	r0, r4
   18798:	f004 fb8e 	bl	1ceb8 <net_buf_unref>
}
   1879c:	4628      	mov	r0, r5
   1879e:	b002      	add	sp, #8
   187a0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   187a2:	f06f 050b 	mvn.w	r5, #11
   187a6:	e7f9      	b.n	1879c <bt_l2cap_update_conn_param+0x54>
   187a8:	200037d6 	.word	0x200037d6

000187ac <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   187ac:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   187ae:	7b43      	ldrb	r3, [r0, #13]
   187b0:	2b07      	cmp	r3, #7
   187b2:	d006      	beq.n	187c2 <att_get+0x16>
		BT_WARN("Not connected");
   187b4:	4811      	ldr	r0, [pc, #68]	; (187fc <att_get+0x50>)
   187b6:	2157      	movs	r1, #87	; 0x57
   187b8:	f00f fff2 	bl	287a0 <z_log_minimal_printk>
		return NULL;
   187bc:	2400      	movs	r4, #0
	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
}
   187be:	4620      	mov	r0, r4
   187c0:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   187c2:	2104      	movs	r1, #4
   187c4:	f011 fab6 	bl	29d34 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   187c8:	4604      	mov	r4, r0
   187ca:	b920      	cbnz	r0, 187d6 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   187cc:	480c      	ldr	r0, [pc, #48]	; (18800 <att_get+0x54>)
   187ce:	2145      	movs	r1, #69	; 0x45
   187d0:	f00f ffe6 	bl	287a0 <z_log_minimal_printk>
		return NULL;
   187d4:	e7f3      	b.n	187be <att_get+0x12>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   187d6:	2102      	movs	r1, #2
   187d8:	3094      	adds	r0, #148	; 0x94
   187da:	f011 fb1f 	bl	29e1c <atomic_test_bit>
   187de:	b950      	cbnz	r0, 187f6 <att_get+0x4a>
   187e0:	4908      	ldr	r1, [pc, #32]	; (18804 <att_get+0x58>)
   187e2:	4809      	ldr	r0, [pc, #36]	; (18808 <att_get+0x5c>)
   187e4:	f640 322d 	movw	r2, #2861	; 0xb2d
   187e8:	f00f ffcc 	bl	28784 <assert_print>
   187ec:	4805      	ldr	r0, [pc, #20]	; (18804 <att_get+0x58>)
   187ee:	f640 312d 	movw	r1, #2861	; 0xb2d
   187f2:	f00f ffc0 	bl	28776 <assert_post_action>
	return att_chan->att;
   187f6:	f854 4c04 	ldr.w	r4, [r4, #-4]
   187fa:	e7e0      	b.n	187be <att_get+0x12>
   187fc:	0002ee2e 	.word	0x0002ee2e
   18800:	0002ee41 	.word	0x0002ee41
   18804:	0002ee61 	.word	0x0002ee61
   18808:	0002d509 	.word	0x0002d509

0001880c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1880c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1880e:	3804      	subs	r0, #4
   18810:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   18812:	a901      	add	r1, sp, #4
   18814:	4802      	ldr	r0, [pc, #8]	; (18820 <bt_att_released+0x14>)
   18816:	f009 fae9 	bl	21dec <k_mem_slab_free>
}
   1881a:	b003      	add	sp, #12
   1881c:	f85d fb04 	ldr.w	pc, [sp], #4
   18820:	20000a08 	.word	0x20000a08

00018824 <tx_meta_data_free>:
{
   18824:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   18826:	4604      	mov	r4, r0
   18828:	b940      	cbnz	r0, 1883c <tx_meta_data_free+0x18>
   1882a:	490a      	ldr	r1, [pc, #40]	; (18854 <tx_meta_data_free+0x30>)
   1882c:	480a      	ldr	r0, [pc, #40]	; (18858 <tx_meta_data_free+0x34>)
   1882e:	22a4      	movs	r2, #164	; 0xa4
   18830:	f00f ffa8 	bl	28784 <assert_print>
   18834:	4807      	ldr	r0, [pc, #28]	; (18854 <tx_meta_data_free+0x30>)
   18836:	21a4      	movs	r1, #164	; 0xa4
   18838:	f00f ff9d 	bl	28776 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   1883c:	2100      	movs	r1, #0
   1883e:	4620      	mov	r0, r4
   18840:	2214      	movs	r2, #20
   18842:	f013 fcbf 	bl	2c1c4 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   18846:	4621      	mov	r1, r4
   18848:	4804      	ldr	r0, [pc, #16]	; (1885c <tx_meta_data_free+0x38>)
}
   1884a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1884e:	f013 bab7 	b.w	2bdc0 <k_queue_append>
   18852:	bf00      	nop
   18854:	0002ee61 	.word	0x0002ee61
   18858:	0002d509 	.word	0x0002d509
   1885c:	20000ad8 	.word	0x20000ad8

00018860 <find_type_cb>:
{
   18860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   18864:	f8d2 9000 	ldr.w	r9, [r2]
{
   18868:	b091      	sub	sp, #68	; 0x44
   1886a:	4607      	mov	r7, r0
   1886c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1886e:	2500      	movs	r5, #0
   18870:	f642 0301 	movw	r3, #10241	; 0x2801
   18874:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   18876:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1887a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1887e:	a90b      	add	r1, sp, #44	; 0x2c
{
   18880:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18882:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18886:	f010 fd9d 	bl	293c4 <bt_uuid_cmp>
   1888a:	2800      	cmp	r0, #0
   1888c:	d060      	beq.n	18950 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1888e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18892:	6838      	ldr	r0, [r7, #0]
   18894:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18898:	a90b      	add	r1, sp, #44	; 0x2c
   1889a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1889e:	f010 fd91 	bl	293c4 <bt_uuid_cmp>
   188a2:	b138      	cbz	r0, 188b4 <find_type_cb+0x54>
		if (data->group &&
   188a4:	68a3      	ldr	r3, [r4, #8]
   188a6:	b11b      	cbz	r3, 188b0 <find_type_cb+0x50>
   188a8:	885a      	ldrh	r2, [r3, #2]
   188aa:	42b2      	cmp	r2, r6
   188ac:	d200      	bcs.n	188b0 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   188ae:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   188b0:	2001      	movs	r0, #1
   188b2:	e009      	b.n	188c8 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   188b4:	6861      	ldr	r1, [r4, #4]
   188b6:	4608      	mov	r0, r1
   188b8:	f011 fa51 	bl	29d5e <net_buf_frags_len>
   188bc:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   188c0:	1a1b      	subs	r3, r3, r0
   188c2:	2b03      	cmp	r3, #3
   188c4:	d803      	bhi.n	188ce <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   188c6:	2000      	movs	r0, #0
}
   188c8:	b011      	add	sp, #68	; 0x44
   188ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   188ce:	4608      	mov	r0, r1
   188d0:	f004 fb4e 	bl	1cf70 <net_buf_frag_last>
   188d4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   188d6:	6860      	ldr	r0, [r4, #4]
   188d8:	f011 fa41 	bl	29d5e <net_buf_frags_len>
   188dc:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   188e0:	f105 0b08 	add.w	fp, r5, #8
   188e4:	ebaa 0a00 	sub.w	sl, sl, r0
   188e8:	4658      	mov	r0, fp
   188ea:	f012 fd5e 	bl	2b3aa <net_buf_simple_tailroom>
   188ee:	4582      	cmp	sl, r0
   188f0:	d231      	bcs.n	18956 <find_type_cb+0xf6>
   188f2:	6860      	ldr	r0, [r4, #4]
   188f4:	f011 fa33 	bl	29d5e <net_buf_frags_len>
   188f8:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   188fc:	1a18      	subs	r0, r3, r0
	if (!len) {
   188fe:	b970      	cbnz	r0, 1891e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   18900:	6863      	ldr	r3, [r4, #4]
   18902:	7998      	ldrb	r0, [r3, #6]
   18904:	f004 f846 	bl	1c994 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18908:	2200      	movs	r2, #0
   1890a:	2300      	movs	r3, #0
   1890c:	f012 fd3c 	bl	2b388 <net_buf_alloc_fixed>
		if (!frag) {
   18910:	4605      	mov	r5, r0
   18912:	2800      	cmp	r0, #0
   18914:	d0d7      	beq.n	188c6 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   18916:	4601      	mov	r1, r0
   18918:	6860      	ldr	r0, [r4, #4]
   1891a:	f004 fb69 	bl	1cff0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1891e:	2300      	movs	r3, #0
   18920:	9300      	str	r3, [sp, #0]
   18922:	f8d7 9004 	ldr.w	r9, [r7, #4]
   18926:	4639      	mov	r1, r7
   18928:	2310      	movs	r3, #16
   1892a:	aa02      	add	r2, sp, #8
   1892c:	4640      	mov	r0, r8
   1892e:	47c8      	blx	r9
	if (read < 0) {
   18930:	1e07      	subs	r7, r0, #0
   18932:	db0d      	blt.n	18950 <find_type_cb+0xf0>
	if (read != data->value_len) {
   18934:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18936:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   18938:	42ba      	cmp	r2, r7
   1893a:	d02b      	beq.n	18994 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1893c:	4601      	mov	r1, r0
   1893e:	a80b      	add	r0, sp, #44	; 0x2c
   18940:	f010 fd6e 	bl	29420 <bt_uuid_create>
   18944:	b958      	cbnz	r0, 1895e <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   18946:	7c22      	ldrb	r2, [r4, #16]
   18948:	4814      	ldr	r0, [pc, #80]	; (1899c <find_type_cb+0x13c>)
   1894a:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
   1894c:	f00f ff28 	bl	287a0 <z_log_minimal_printk>
	data->group = NULL;
   18950:	2300      	movs	r3, #0
   18952:	60a3      	str	r3, [r4, #8]
   18954:	e7ac      	b.n	188b0 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   18956:	4658      	mov	r0, fp
   18958:	f012 fd27 	bl	2b3aa <net_buf_simple_tailroom>
   1895c:	e7cf      	b.n	188fe <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1895e:	b2fa      	uxtb	r2, r7
   18960:	a902      	add	r1, sp, #8
   18962:	a806      	add	r0, sp, #24
   18964:	f010 fd5c 	bl	29420 <bt_uuid_create>
   18968:	b918      	cbnz	r0, 18972 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   1896a:	480d      	ldr	r0, [pc, #52]	; (189a0 <find_type_cb+0x140>)
   1896c:	463a      	mov	r2, r7
   1896e:	2157      	movs	r1, #87	; 0x57
   18970:	e7ec      	b.n	1894c <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18972:	a906      	add	r1, sp, #24
   18974:	a80b      	add	r0, sp, #44	; 0x2c
   18976:	f010 fd25 	bl	293c4 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1897a:	2800      	cmp	r0, #0
   1897c:	d1e8      	bne.n	18950 <find_type_cb+0xf0>
	data->err = 0x00;
   1897e:	2300      	movs	r3, #0
   18980:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18982:	2104      	movs	r1, #4
   18984:	f105 0008 	add.w	r0, r5, #8
   18988:	f004 fbac 	bl	1d0e4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1898c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1898e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18990:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   18992:	e78d      	b.n	188b0 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   18994:	a902      	add	r1, sp, #8
   18996:	f013 fbca 	bl	2c12e <memcmp>
   1899a:	e7ee      	b.n	1897a <find_type_cb+0x11a>
   1899c:	0002ee90 	.word	0x0002ee90
   189a0:	0002eeb4 	.word	0x0002eeb4

000189a4 <bt_att_connected>:
{
   189a4:	b510      	push	{r4, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   189a6:	1f02      	subs	r2, r0, #4
{
   189a8:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   189aa:	3094      	adds	r0, #148	; 0x94
   189ac:	f3bf 8f5b 	dmb	ish
   189b0:	e850 3f00 	ldrex	r3, [r0]
   189b4:	f043 0304 	orr.w	r3, r3, #4
   189b8:	e840 3100 	strex	r1, r3, [r0]
   189bc:	2900      	cmp	r1, #0
   189be:	d1f7      	bne.n	189b0 <bt_att_connected+0xc>
   189c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   189c4:	2103      	movs	r1, #3
   189c6:	f011 fa29 	bl	29e1c <atomic_test_bit>
   189ca:	b910      	cbnz	r0, 189d2 <bt_att_connected+0x2e>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   189cc:	2317      	movs	r3, #23
   189ce:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   189d0:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   189d2:	4610      	mov	r0, r2
   189d4:	f011 fa36 	bl	29e44 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   189d8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   189dc:	4903      	ldr	r1, [pc, #12]	; (189ec <bt_att_connected+0x48>)
   189de:	f00a fa11 	bl	22e04 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   189e2:	6820      	ldr	r0, [r4, #0]
}
   189e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   189e8:	f002 b99e 	b.w	1ad28 <bt_gatt_connected>
   189ec:	0001973d 	.word	0x0001973d

000189f0 <read_group_cb>:
{
   189f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   189f4:	4605      	mov	r5, r0
   189f6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   189f8:	f04f 0800 	mov.w	r8, #0
   189fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18a00:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   18a02:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18a04:	f88d 8008 	strb.w	r8, [sp, #8]
   18a08:	a902      	add	r1, sp, #8
{
   18a0a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18a0c:	f8ad 300a 	strh.w	r3, [sp, #10]
   18a10:	f010 fcd8 	bl	293c4 <bt_uuid_cmp>
   18a14:	b1a0      	cbz	r0, 18a40 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18a16:	f642 0301 	movw	r3, #10241	; 0x2801
   18a1a:	6828      	ldr	r0, [r5, #0]
   18a1c:	f88d 800c 	strb.w	r8, [sp, #12]
   18a20:	a903      	add	r1, sp, #12
   18a22:	f8ad 300e 	strh.w	r3, [sp, #14]
   18a26:	f010 fccd 	bl	293c4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18a2a:	b148      	cbz	r0, 18a40 <read_group_cb+0x50>
		if (data->group &&
   18a2c:	6923      	ldr	r3, [r4, #16]
   18a2e:	b11b      	cbz	r3, 18a38 <read_group_cb+0x48>
   18a30:	885a      	ldrh	r2, [r3, #2]
   18a32:	42b2      	cmp	r2, r6
   18a34:	d200      	bcs.n	18a38 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18a36:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   18a38:	2001      	movs	r0, #1
}
   18a3a:	b004      	add	sp, #16
   18a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18a40:	6861      	ldr	r1, [r4, #4]
   18a42:	6828      	ldr	r0, [r5, #0]
   18a44:	f010 fcbe 	bl	293c4 <bt_uuid_cmp>
   18a48:	b110      	cbz	r0, 18a50 <read_group_cb+0x60>
		data->group = NULL;
   18a4a:	2300      	movs	r3, #0
   18a4c:	6123      	str	r3, [r4, #16]
   18a4e:	e7f3      	b.n	18a38 <read_group_cb+0x48>
	if (data->rsp->len &&
   18a50:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18a52:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   18a54:	781a      	ldrb	r2, [r3, #0]
   18a56:	b132      	cbz	r2, 18a66 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18a58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   18a5a:	8981      	ldrh	r1, [r0, #12]
   18a5c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   18a5e:	4293      	cmp	r3, r2
   18a60:	da01      	bge.n	18a66 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   18a62:	2000      	movs	r0, #0
   18a64:	e7e9      	b.n	18a3a <read_group_cb+0x4a>
   18a66:	2104      	movs	r1, #4
   18a68:	3008      	adds	r0, #8
   18a6a:	f004 fb3b 	bl	1d0e4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18a6e:	4b09      	ldr	r3, [pc, #36]	; (18a94 <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   18a70:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18a72:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18a74:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18a76:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18a78:	4629      	mov	r1, r5
   18a7a:	9300      	str	r3, [sp, #0]
   18a7c:	9401      	str	r4, [sp, #4]
   18a7e:	2300      	movs	r3, #0
   18a80:	4638      	mov	r0, r7
   18a82:	f011 faa1 	bl	29fc8 <att_chan_read>
	if (read < 0) {
   18a86:	2800      	cmp	r0, #0
   18a88:	dbeb      	blt.n	18a62 <read_group_cb+0x72>
	if (!data->group) {
   18a8a:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   18a8c:	3800      	subs	r0, #0
   18a8e:	bf18      	it	ne
   18a90:	2001      	movne	r0, #1
   18a92:	e7d2      	b.n	18a3a <read_group_cb+0x4a>
   18a94:	00029ea5 	.word	0x00029ea5

00018a98 <chan_send>:
{
   18a98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   18a9c:	688b      	ldr	r3, [r1, #8]
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   18a9e:	f8d1 8014 	ldr.w	r8, [r1, #20]
{
   18aa2:	4606      	mov	r6, r0
   18aa4:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   18aa6:	3098      	adds	r0, #152	; 0x98
   18aa8:	2102      	movs	r1, #2
   18aaa:	f011 f9b7 	bl	29e1c <atomic_test_bit>
   18aae:	2800      	cmp	r0, #0
   18ab0:	d049      	beq.n	18b46 <chan_send+0xae>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18ab2:	781b      	ldrb	r3, [r3, #0]
   18ab4:	2bd2      	cmp	r3, #210	; 0xd2
   18ab6:	d114      	bne.n	18ae2 <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
   18ab8:	6833      	ldr	r3, [r6, #0]
   18aba:	4621      	mov	r1, r4
   18abc:	6818      	ldr	r0, [r3, #0]
   18abe:	f012 fb97 	bl	2b1f0 <bt_smp_sign>
		if (err) {
   18ac2:	4605      	mov	r5, r0
   18ac4:	b168      	cbz	r0, 18ae2 <chan_send+0x4a>
			BT_ERR("Error signing data");
   18ac6:	4821      	ldr	r0, [pc, #132]	; (18b4c <chan_send+0xb4>)
   18ac8:	2145      	movs	r1, #69	; 0x45
   18aca:	f00f fe69 	bl	287a0 <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   18ace:	6960      	ldr	r0, [r4, #20]
   18ad0:	f7ff fea8 	bl	18824 <tx_meta_data_free>
			net_buf_unref(buf);
   18ad4:	4620      	mov	r0, r4
   18ad6:	f004 f9ef 	bl	1ceb8 <net_buf_unref>
}
   18ada:	4628      	mov	r0, r5
   18adc:	b003      	add	sp, #12
   18ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   18ae2:	f104 0008 	add.w	r0, r4, #8
   18ae6:	f012 fc5c 	bl	2b3a2 <net_buf_simple_headroom>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18aea:	6833      	ldr	r3, [r6, #0]
	state->len = buf->len;
   18aec:	f8b4 900c 	ldrh.w	r9, [r4, #12]
   18af0:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   18af2:	68a3      	ldr	r3, [r4, #8]
	data->att_chan = chan;
   18af4:	f8c8 6000 	str.w	r6, [r8]
	state->offset = net_buf_simple_headroom(buf);
   18af8:	4607      	mov	r7, r0
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   18afa:	7818      	ldrb	r0, [r3, #0]
   18afc:	f011 f949 	bl	29d92 <att_op_get_type>
	switch (op_type) {
   18b00:	2805      	cmp	r0, #5
   18b02:	d813      	bhi.n	18b2c <chan_send+0x94>
   18b04:	4b12      	ldr	r3, [pc, #72]	; (18b50 <chan_send+0xb8>)
   18b06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18b0a:	f8cd 8000 	str.w	r8, [sp]
   18b0e:	4628      	mov	r0, r5
   18b10:	4622      	mov	r2, r4
   18b12:	2104      	movs	r1, #4
   18b14:	f011 f8eb 	bl	29cee <bt_l2cap_send_cb>
	if (err) {
   18b18:	4605      	mov	r5, r0
   18b1a:	2800      	cmp	r0, #0
   18b1c:	d0dd      	beq.n	18ada <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
   18b1e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   18b20:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   18b24:	fa10 f787 	uxtah	r7, r0, r7
   18b28:	60a7      	str	r7, [r4, #8]
}
   18b2a:	e7d6      	b.n	18ada <chan_send+0x42>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   18b2c:	4909      	ldr	r1, [pc, #36]	; (18b54 <chan_send+0xbc>)
   18b2e:	480a      	ldr	r0, [pc, #40]	; (18b58 <chan_send+0xc0>)
   18b30:	f240 2256 	movw	r2, #598	; 0x256
   18b34:	f00f fe26 	bl	28784 <assert_print>
   18b38:	4806      	ldr	r0, [pc, #24]	; (18b54 <chan_send+0xbc>)
   18b3a:	f240 2156 	movw	r1, #598	; 0x256
   18b3e:	f00f fe1a 	bl	28776 <assert_post_action>
	return att_unknown;
   18b42:	4b06      	ldr	r3, [pc, #24]	; (18b5c <chan_send+0xc4>)
   18b44:	e7e1      	b.n	18b0a <chan_send+0x72>
		return -EINVAL;
   18b46:	f06f 0515 	mvn.w	r5, #21
   18b4a:	e7c6      	b.n	18ada <chan_send+0x42>
   18b4c:	0002eed8 	.word	0x0002eed8
   18b50:	0002cb04 	.word	0x0002cb04
   18b54:	0002ee61 	.word	0x0002ee61
   18b58:	0002d509 	.word	0x0002d509
   18b5c:	0002a3bd 	.word	0x0002a3bd

00018b60 <bt_att_chan_req_send>:
{
   18b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b62:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   18b64:	4604      	mov	r4, r0
   18b66:	b950      	cbnz	r0, 18b7e <bt_att_chan_req_send+0x1e>
   18b68:	4924      	ldr	r1, [pc, #144]	; (18bfc <bt_att_chan_req_send+0x9c>)
   18b6a:	4825      	ldr	r0, [pc, #148]	; (18c00 <bt_att_chan_req_send+0xa0>)
   18b6c:	f240 3217 	movw	r2, #791	; 0x317
   18b70:	f00f fe08 	bl	28784 <assert_print>
   18b74:	4821      	ldr	r0, [pc, #132]	; (18bfc <bt_att_chan_req_send+0x9c>)
   18b76:	f240 3117 	movw	r1, #791	; 0x317
   18b7a:	f00f fdfc 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(req);
   18b7e:	b955      	cbnz	r5, 18b96 <bt_att_chan_req_send+0x36>
   18b80:	491e      	ldr	r1, [pc, #120]	; (18bfc <bt_att_chan_req_send+0x9c>)
   18b82:	481f      	ldr	r0, [pc, #124]	; (18c00 <bt_att_chan_req_send+0xa0>)
   18b84:	f44f 7246 	mov.w	r2, #792	; 0x318
   18b88:	f00f fdfc 	bl	28784 <assert_print>
   18b8c:	481b      	ldr	r0, [pc, #108]	; (18bfc <bt_att_chan_req_send+0x9c>)
   18b8e:	f44f 7146 	mov.w	r1, #792	; 0x318
   18b92:	f00f fdf0 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   18b96:	686b      	ldr	r3, [r5, #4]
   18b98:	b953      	cbnz	r3, 18bb0 <bt_att_chan_req_send+0x50>
   18b9a:	4918      	ldr	r1, [pc, #96]	; (18bfc <bt_att_chan_req_send+0x9c>)
   18b9c:	4818      	ldr	r0, [pc, #96]	; (18c00 <bt_att_chan_req_send+0xa0>)
   18b9e:	f240 3219 	movw	r2, #793	; 0x319
   18ba2:	f00f fdef 	bl	28784 <assert_print>
   18ba6:	4815      	ldr	r0, [pc, #84]	; (18bfc <bt_att_chan_req_send+0x9c>)
   18ba8:	f240 3119 	movw	r1, #793	; 0x319
   18bac:	f00f fde3 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   18bb0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   18bb4:	b153      	cbz	r3, 18bcc <bt_att_chan_req_send+0x6c>
   18bb6:	4911      	ldr	r1, [pc, #68]	; (18bfc <bt_att_chan_req_send+0x9c>)
   18bb8:	4811      	ldr	r0, [pc, #68]	; (18c00 <bt_att_chan_req_send+0xa0>)
   18bba:	f240 321a 	movw	r2, #794	; 0x31a
   18bbe:	f00f fde1 	bl	28784 <assert_print>
   18bc2:	480e      	ldr	r0, [pc, #56]	; (18bfc <bt_att_chan_req_send+0x9c>)
   18bc4:	f240 311a 	movw	r1, #794	; 0x31a
   18bc8:	f00f fdd5 	bl	28776 <assert_post_action>
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   18bcc:	68ae      	ldr	r6, [r5, #8]
   18bce:	4630      	mov	r0, r6
   18bd0:	f011 f8c5 	bl	29d5e <net_buf_frags_len>
   18bd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   18bd6:	4283      	cmp	r3, r0
   18bd8:	d30c      	bcc.n	18bf4 <bt_att_chan_req_send+0x94>
	req->buf = NULL;
   18bda:	2700      	movs	r7, #0
	chan->req = req;
   18bdc:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	return chan_send(chan, buf);
   18be0:	4631      	mov	r1, r6
	req->buf = NULL;
   18be2:	60af      	str	r7, [r5, #8]
	return chan_send(chan, buf);
   18be4:	4620      	mov	r0, r4
   18be6:	f7ff ff57 	bl	18a98 <chan_send>
	if (err) {
   18bea:	b110      	cbz	r0, 18bf2 <bt_att_chan_req_send+0x92>
		req->buf = buf;
   18bec:	60ae      	str	r6, [r5, #8]
		chan->req = NULL;
   18bee:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
}
   18bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   18bf4:	f06f 0079 	mvn.w	r0, #121	; 0x79
	return chan_req_send(chan, req);
   18bf8:	e7fb      	b.n	18bf2 <bt_att_chan_req_send+0x92>
   18bfa:	bf00      	nop
   18bfc:	0002ee61 	.word	0x0002ee61
   18c00:	0002d509 	.word	0x0002d509

00018c04 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   18c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   18c06:	2300      	movs	r3, #0
{
   18c08:	4607      	mov	r7, r0
   18c0a:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   18c0c:	482d      	ldr	r0, [pc, #180]	; (18cc4 <bt_att_accept+0xc0>)
   18c0e:	2200      	movs	r2, #0
   18c10:	4669      	mov	r1, sp
   18c12:	f009 f891 	bl	21d38 <k_mem_slab_alloc>
   18c16:	4605      	mov	r5, r0
   18c18:	b138      	cbz	r0, 18c2a <bt_att_accept+0x26>
		BT_ERR("No available ATT context for conn %p", conn);
   18c1a:	482b      	ldr	r0, [pc, #172]	; (18cc8 <bt_att_accept+0xc4>)
   18c1c:	463a      	mov	r2, r7
   18c1e:	2145      	movs	r1, #69	; 0x45
		BT_WARN("No available ATT channel for conn %p", att->conn);
   18c20:	f00f fdbe 	bl	287a0 <z_log_minimal_printk>
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   18c24:	f06f 050b 	mvn.w	r5, #11
   18c28:	e048      	b.n	18cbc <bt_att_accept+0xb8>
	return z_impl_z_current_get();
   18c2a:	f00b f9f9 	bl	24020 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   18c2e:	4b27      	ldr	r3, [pc, #156]	; (18ccc <bt_att_accept+0xc8>)
   18c30:	4629      	mov	r1, r5
   18c32:	6018      	str	r0, [r3, #0]
   18c34:	2230      	movs	r2, #48	; 0x30
   18c36:	9800      	ldr	r0, [sp, #0]
   18c38:	f013 fac4 	bl	2c1c4 <memset>
	att->conn = conn;
   18c3c:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18c3e:	4824      	ldr	r0, [pc, #144]	; (18cd0 <bt_att_accept+0xcc>)
	list->tail = NULL;
   18c40:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   18c42:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
   18c46:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   18c4a:	2200      	movs	r2, #0
   18c4c:	2300      	movs	r3, #0
   18c4e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18c50:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18c52:	f009 f871 	bl	21d38 <k_mem_slab_alloc>
   18c56:	4605      	mov	r5, r0
   18c58:	b118      	cbz	r0, 18c62 <bt_att_accept+0x5e>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   18c5a:	6822      	ldr	r2, [r4, #0]
   18c5c:	481d      	ldr	r0, [pc, #116]	; (18cd4 <bt_att_accept+0xd0>)
   18c5e:	2157      	movs	r1, #87	; 0x57
   18c60:	e7de      	b.n	18c20 <bt_att_accept+0x1c>
   18c62:	4601      	mov	r1, r0
   18c64:	22f8      	movs	r2, #248	; 0xf8
   18c66:	9801      	ldr	r0, [sp, #4]
   18c68:	f013 faac 	bl	2c1c4 <memset>
	chan->chan.chan.ops = &ops;
   18c6c:	9801      	ldr	r0, [sp, #4]
   18c6e:	4b1a      	ldr	r3, [pc, #104]	; (18cd8 <bt_att_accept+0xd4>)
   18c70:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   18c72:	30a0      	adds	r0, #160	; 0xa0
   18c74:	f013 f897 	bl	2bda6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18c78:	9b01      	ldr	r3, [sp, #4]
   18c7a:	f3bf 8f5b 	dmb	ish
   18c7e:	3398      	adds	r3, #152	; 0x98
   18c80:	e853 2f00 	ldrex	r2, [r3]
   18c84:	e843 5100 	strex	r1, r5, [r3]
   18c88:	2900      	cmp	r1, #0
   18c8a:	d1f9      	bne.n	18c80 <bt_att_accept+0x7c>
   18c8c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   18c90:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   18c92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	chan->att = att;
   18c94:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
   18c96:	b91b      	cbnz	r3, 18ca0 <bt_att_accept+0x9c>
   18c98:	f104 000c 	add.w	r0, r4, #12
   18c9c:	f013 f883 	bl	2bda6 <z_impl_k_queue_init>
	parent->next = child;
   18ca0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   18ca2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   18ca6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   18ca8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	list->head = node;
   18cac:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   18cae:	b902      	cbnz	r2, 18cb2 <bt_att_accept+0xae>
	list->tail = node;
   18cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   18cb2:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   18cb4:	2b00      	cmp	r3, #0
   18cb6:	d0b5      	beq.n	18c24 <bt_att_accept+0x20>
	}

	*ch = &chan->chan.chan;
   18cb8:	3304      	adds	r3, #4
   18cba:	6033      	str	r3, [r6, #0]

	return 0;
}
   18cbc:	4628      	mov	r0, r5
   18cbe:	b003      	add	sp, #12
   18cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18cc2:	bf00      	nop
   18cc4:	200009e8 	.word	0x200009e8
   18cc8:	0002eef0 	.word	0x0002eef0
   18ccc:	20002800 	.word	0x20002800
   18cd0:	20000a08 	.word	0x20000a08
   18cd4:	0002ef1a 	.word	0x0002ef1a
   18cd8:	20000668 	.word	0x20000668

00018cdc <read_type_cb>:
{
   18cdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   18ce0:	f8d2 8000 	ldr.w	r8, [r2]
{
   18ce4:	4606      	mov	r6, r0
   18ce6:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18ce8:	6800      	ldr	r0, [r0, #0]
   18cea:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   18cec:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   18cf0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18cf2:	f010 fb67 	bl	293c4 <bt_uuid_cmp>
   18cf6:	4607      	mov	r7, r0
   18cf8:	2800      	cmp	r0, #0
   18cfa:	d13e      	bne.n	18d7a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18cfc:	4628      	mov	r0, r5
   18cfe:	2295      	movs	r2, #149	; 0x95
   18d00:	4631      	mov	r1, r6
   18d02:	f011 fee1 	bl	2aac8 <bt_gatt_check_perm>
   18d06:	4605      	mov	r5, r0
   18d08:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   18d0a:	b148      	cbz	r0, 18d20 <read_type_cb+0x44>
		if (data->rsp->len) {
   18d0c:	68e3      	ldr	r3, [r4, #12]
   18d0e:	781b      	ldrb	r3, [r3, #0]
   18d10:	b923      	cbnz	r3, 18d1c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   18d12:	2500      	movs	r5, #0
}
   18d14:	4628      	mov	r0, r5
   18d16:	b003      	add	sp, #12
   18d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   18d1c:	7527      	strb	r7, [r4, #20]
   18d1e:	e7f8      	b.n	18d12 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18d20:	68a0      	ldr	r0, [r4, #8]
   18d22:	f004 f925 	bl	1cf70 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   18d26:	2102      	movs	r1, #2
   18d28:	3008      	adds	r0, #8
   18d2a:	f004 f9db 	bl	1d0e4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18d2e:	4b14      	ldr	r3, [pc, #80]	; (18d80 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18d30:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18d32:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   18d34:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18d38:	4631      	mov	r1, r6
   18d3a:	9300      	str	r3, [sp, #0]
   18d3c:	9401      	str	r4, [sp, #4]
   18d3e:	462b      	mov	r3, r5
   18d40:	4640      	mov	r0, r8
   18d42:	f011 f941 	bl	29fc8 <att_chan_read>
	if (read < 0) {
   18d46:	2800      	cmp	r0, #0
   18d48:	da07      	bge.n	18d5a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   18d4a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   18d4e:	bf26      	itte	cs
   18d50:	4240      	negcs	r0, r0
   18d52:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   18d54:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   18d56:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18d58:	e7dc      	b.n	18d14 <read_type_cb+0x38>
	if (!data->item) {
   18d5a:	6923      	ldr	r3, [r4, #16]
   18d5c:	2b00      	cmp	r3, #0
   18d5e:	d0d8      	beq.n	18d12 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18d60:	68a0      	ldr	r0, [r4, #8]
   18d62:	f010 fffc 	bl	29d5e <net_buf_frags_len>
   18d66:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18d6a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18d6c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18d6e:	7818      	ldrb	r0, [r3, #0]
   18d70:	4285      	cmp	r5, r0
   18d72:	bf94      	ite	ls
   18d74:	2500      	movls	r5, #0
   18d76:	2501      	movhi	r5, #1
   18d78:	e7cc      	b.n	18d14 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   18d7a:	2501      	movs	r5, #1
   18d7c:	e7ca      	b.n	18d14 <read_type_cb+0x38>
   18d7e:	bf00      	nop
   18d80:	00029d6f 	.word	0x00029d6f

00018d84 <bt_att_chan_create_pdu>:
{
   18d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18d86:	1c53      	adds	r3, r2, #1
   18d88:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   18d8a:	4293      	cmp	r3, r2
{
   18d8c:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18d8e:	d906      	bls.n	18d9e <bt_att_chan_create_pdu+0x1a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   18d90:	481c      	ldr	r0, [pc, #112]	; (18e04 <bt_att_chan_create_pdu+0x80>)
   18d92:	2157      	movs	r1, #87	; 0x57
   18d94:	f00f fd04 	bl	287a0 <z_log_minimal_printk>
		return NULL;
   18d98:	2400      	movs	r4, #0
}
   18d9a:	4620      	mov	r0, r4
   18d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   18d9e:	4608      	mov	r0, r1
   18da0:	f010 fff7 	bl	29d92 <att_op_get_type>
   18da4:	2802      	cmp	r0, #2
   18da6:	d001      	beq.n	18dac <bt_att_chan_create_pdu+0x28>
   18da8:	2804      	cmp	r0, #4
   18daa:	d110      	bne.n	18dce <bt_att_chan_create_pdu+0x4a>
   18dac:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   18db0:	2700      	movs	r7, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   18db2:	2100      	movs	r1, #0
   18db4:	4632      	mov	r2, r6
   18db6:	463b      	mov	r3, r7
   18db8:	4608      	mov	r0, r1
   18dba:	f010 ff95 	bl	29ce8 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   18dbe:	4604      	mov	r4, r0
   18dc0:	b950      	cbnz	r0, 18dd8 <bt_att_chan_create_pdu+0x54>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   18dc2:	4811      	ldr	r0, [pc, #68]	; (18e08 <bt_att_chan_create_pdu+0x84>)
   18dc4:	462a      	mov	r2, r5
   18dc6:	2145      	movs	r1, #69	; 0x45
   18dc8:	f00f fcea 	bl	287a0 <z_log_minimal_printk>
		return NULL;
   18dcc:	e7e5      	b.n	18d9a <bt_att_chan_create_pdu+0x16>
		timeout = K_FOREVER;
   18dce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18dd2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   18dd6:	e7ec      	b.n	18db2 <bt_att_chan_create_pdu+0x2e>
	return z_impl_k_queue_get(queue, timeout);
   18dd8:	480c      	ldr	r0, [pc, #48]	; (18e0c <bt_att_chan_create_pdu+0x88>)
   18dda:	4632      	mov	r2, r6
   18ddc:	463b      	mov	r3, r7
   18dde:	f009 fbed 	bl	225bc <z_impl_k_queue_get>
	if (!data) {
   18de2:	b938      	cbnz	r0, 18df4 <bt_att_chan_create_pdu+0x70>
		BT_WARN("Unable to allocate ATT TX meta");
   18de4:	480a      	ldr	r0, [pc, #40]	; (18e10 <bt_att_chan_create_pdu+0x8c>)
   18de6:	2157      	movs	r1, #87	; 0x57
   18de8:	f00f fcda 	bl	287a0 <z_log_minimal_printk>
		net_buf_unref(buf);
   18dec:	4620      	mov	r0, r4
   18dee:	f004 f863 	bl	1ceb8 <net_buf_unref>
		return NULL;
   18df2:	e7d1      	b.n	18d98 <bt_att_chan_create_pdu+0x14>
	bt_att_tx_meta_data(buf) = data;
   18df4:	6160      	str	r0, [r4, #20]
   18df6:	2101      	movs	r1, #1
   18df8:	f104 0008 	add.w	r0, r4, #8
   18dfc:	f004 f972 	bl	1d0e4 <net_buf_simple_add>
	hdr->code = op;
   18e00:	7005      	strb	r5, [r0, #0]
	return buf;
   18e02:	e7ca      	b.n	18d9a <bt_att_chan_create_pdu+0x16>
   18e04:	0002ef44 	.word	0x0002ef44
   18e08:	0002ecba 	.word	0x0002ecba
   18e0c:	20000ad8 	.word	0x20000ad8
   18e10:	0002ef6e 	.word	0x0002ef6e

00018e14 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   18e14:	898b      	ldrh	r3, [r1, #12]
{
   18e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18e1a:	4607      	mov	r7, r0
   18e1c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   18e1e:	b933      	cbnz	r3, 18e2e <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   18e20:	4835      	ldr	r0, [pc, #212]	; (18ef8 <bt_att_recv+0xe4>)
   18e22:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected indication");
   18e24:	f00f fcbc 	bl	287a0 <z_log_minimal_printk>
}
   18e28:	2000      	movs	r0, #0
   18e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   18e2e:	2101      	movs	r1, #1
   18e30:	f105 0008 	add.w	r0, r5, #8
   18e34:	f004 f938 	bl	1d0a8 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   18e38:	f857 3c04 	ldr.w	r3, [r7, #-4]
   18e3c:	4604      	mov	r4, r0
   18e3e:	2b00      	cmp	r3, #0
   18e40:	d0f2      	beq.n	18e28 <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
   18e42:	7802      	ldrb	r2, [r0, #0]
   18e44:	4e2d      	ldr	r6, [pc, #180]	; (18efc <bt_att_recv+0xe8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   18e46:	f1a7 0804 	sub.w	r8, r7, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18e4a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   18e4c:	f816 1033 	ldrb.w	r1, [r6, r3, lsl #3]
   18e50:	4291      	cmp	r1, r2
   18e52:	d111      	bne.n	18e78 <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   18e54:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   18e58:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   18e5c:	f893 a002 	ldrb.w	sl, [r3, #2]
   18e60:	f1ba 0f01 	cmp.w	sl, #1
   18e64:	d11f      	bne.n	18ea6 <bt_att_recv+0x92>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   18e66:	2100      	movs	r1, #0
   18e68:	f107 0094 	add.w	r0, r7, #148	; 0x94
   18e6c:	f011 f978 	bl	2a160 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   18e70:	b328      	cbz	r0, 18ebe <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected request");
   18e72:	4823      	ldr	r0, [pc, #140]	; (18f00 <bt_att_recv+0xec>)
   18e74:	2157      	movs	r1, #87	; 0x57
   18e76:	e7d5      	b.n	18e24 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18e78:	3301      	adds	r3, #1
   18e7a:	2b0e      	cmp	r3, #14
   18e7c:	d1e6      	bne.n	18e4c <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   18e7e:	4821      	ldr	r0, [pc, #132]	; (18f04 <bt_att_recv+0xf0>)
   18e80:	2157      	movs	r1, #87	; 0x57
   18e82:	f00f fc8d 	bl	287a0 <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   18e86:	7821      	ldrb	r1, [r4, #0]
   18e88:	4608      	mov	r0, r1
   18e8a:	f010 ff82 	bl	29d92 <att_op_get_type>
   18e8e:	2800      	cmp	r0, #0
   18e90:	d0ca      	beq.n	18e28 <bt_att_recv+0x14>
   18e92:	2805      	cmp	r0, #5
   18e94:	d0c8      	beq.n	18e28 <bt_att_recv+0x14>
	if (!req) {
   18e96:	2900      	cmp	r1, #0
   18e98:	d0c6      	beq.n	18e28 <bt_att_recv+0x14>
   18e9a:	2306      	movs	r3, #6
   18e9c:	2200      	movs	r2, #0
   18e9e:	4640      	mov	r0, r8
   18ea0:	f011 faf6 	bl	2a490 <send_err_rsp.part.0>
   18ea4:	e7c0      	b.n	18e28 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   18ea6:	f1ba 0f05 	cmp.w	sl, #5
   18eaa:	d108      	bne.n	18ebe <bt_att_recv+0xaa>
			   atomic_test_and_set_bit(att_chan->flags,
   18eac:	2101      	movs	r1, #1
   18eae:	f107 0094 	add.w	r0, r7, #148	; 0x94
   18eb2:	f011 f955 	bl	2a160 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   18eb6:	b110      	cbz	r0, 18ebe <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected indication");
   18eb8:	4813      	ldr	r0, [pc, #76]	; (18f08 <bt_att_recv+0xf4>)
   18eba:	2157      	movs	r1, #87	; 0x57
   18ebc:	e7b2      	b.n	18e24 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   18ebe:	444e      	add	r6, r9
   18ec0:	89aa      	ldrh	r2, [r5, #12]
   18ec2:	7873      	ldrb	r3, [r6, #1]
   18ec4:	4293      	cmp	r3, r2
   18ec6:	d909      	bls.n	18edc <bt_att_recv+0xc8>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   18ec8:	7823      	ldrb	r3, [r4, #0]
   18eca:	4810      	ldr	r0, [pc, #64]	; (18f0c <bt_att_recv+0xf8>)
   18ecc:	2145      	movs	r1, #69	; 0x45
   18ece:	f00f fc67 	bl	287a0 <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
   18ed2:	f1ba 0f01 	cmp.w	sl, #1
   18ed6:	d1a7      	bne.n	18e28 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   18ed8:	2304      	movs	r3, #4
   18eda:	e009      	b.n	18ef0 <bt_att_recv+0xdc>
		err = handler->func(att_chan, buf);
   18edc:	6873      	ldr	r3, [r6, #4]
   18ede:	4629      	mov	r1, r5
   18ee0:	4640      	mov	r0, r8
   18ee2:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   18ee4:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
   18ee8:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   18eea:	d19d      	bne.n	18e28 <bt_att_recv+0x14>
   18eec:	2800      	cmp	r0, #0
   18eee:	d09b      	beq.n	18e28 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   18ef0:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   18ef2:	2900      	cmp	r1, #0
   18ef4:	d098      	beq.n	18e28 <bt_att_recv+0x14>
   18ef6:	e7d1      	b.n	18e9c <bt_att_recv+0x88>
   18ef8:	0002ef92 	.word	0x0002ef92
   18efc:	0002cb1c 	.word	0x0002cb1c
   18f00:	0002efb2 	.word	0x0002efb2
   18f04:	0002f01b 	.word	0x0002f01b
   18f08:	0002efd3 	.word	0x0002efd3
   18f0c:	0002eff7 	.word	0x0002eff7

00018f10 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   18f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18f14:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18f16:	6803      	ldr	r3, [r0, #0]
   18f18:	460e      	mov	r6, r1
   18f1a:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   18f1c:	b087      	sub	sp, #28
   18f1e:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18f20:	bf18      	it	ne
   18f22:	2101      	movne	r1, #1
   18f24:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   18f26:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18f28:	f011 fe01 	bl	2ab2e <bt_gatt_change_aware>
   18f2c:	b958      	cbnz	r0, 18f46 <att_write_rsp.constprop.0+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18f2e:	2105      	movs	r1, #5
   18f30:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18f34:	f011 f914 	bl	2a160 <atomic_test_and_set_bit>
   18f38:	2800      	cmp	r0, #0
   18f3a:	d04e      	beq.n	18fda <att_write_rsp.constprop.0+0xca>
			return 0;
   18f3c:	2500      	movs	r5, #0
}
   18f3e:	4628      	mov	r0, r5
   18f40:	b007      	add	sp, #28
   18f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!handle) {
   18f46:	2f00      	cmp	r7, #0
   18f48:	d049      	beq.n	18fde <att_write_rsp.constprop.0+0xce>
	(void)memset(&data, 0, sizeof(data));
   18f4a:	2218      	movs	r2, #24
   18f4c:	2100      	movs	r1, #0
   18f4e:	4668      	mov	r0, sp
   18f50:	f013 f938 	bl	2c1c4 <memset>
	if (rsp) {
   18f54:	f1b8 0f00 	cmp.w	r8, #0
   18f58:	d12e      	bne.n	18fb8 <att_write_rsp.constprop.0+0xa8>
	data.conn = chan->att->conn;
   18f5a:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18f5c:	4a21      	ldr	r2, [pc, #132]	; (18fe4 <att_write_rsp.constprop.0+0xd4>)
	data.conn = chan->att->conn;
   18f5e:	681b      	ldr	r3, [r3, #0]
   18f60:	9300      	str	r3, [sp, #0]
	data.value = value;
   18f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18f64:	9303      	str	r3, [sp, #12]
	data.len = len;
   18f66:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   18f6a:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18f6e:	2301      	movs	r3, #1
   18f70:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   18f74:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18f78:	466b      	mov	r3, sp
   18f7a:	4639      	mov	r1, r7
   18f7c:	4638      	mov	r0, r7
	data.req = req;
   18f7e:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   18f82:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18f86:	f010 ff52 	bl	29e2e <bt_gatt_foreach_attr>
	if (data.err) {
   18f8a:	f89d 5014 	ldrb.w	r5, [sp, #20]
   18f8e:	b1ed      	cbz	r5, 18fcc <att_write_rsp.constprop.0+0xbc>
		if (rsp) {
   18f90:	f1b8 0f00 	cmp.w	r8, #0
   18f94:	d0d2      	beq.n	18f3c <att_write_rsp.constprop.0+0x2c>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18f96:	9b01      	ldr	r3, [sp, #4]
   18f98:	6958      	ldr	r0, [r3, #20]
   18f9a:	f7ff fc43 	bl	18824 <tx_meta_data_free>
			net_buf_unref(data.buf);
   18f9e:	9801      	ldr	r0, [sp, #4]
   18fa0:	f003 ff8a 	bl	1ceb8 <net_buf_unref>
	if (!req) {
   18fa4:	2e00      	cmp	r6, #0
   18fa6:	d0c9      	beq.n	18f3c <att_write_rsp.constprop.0+0x2c>
   18fa8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   18fac:	463a      	mov	r2, r7
   18fae:	4631      	mov	r1, r6
   18fb0:	4620      	mov	r0, r4
   18fb2:	f011 fa6d 	bl	2a490 <send_err_rsp.part.0>
   18fb6:	e7c1      	b.n	18f3c <att_write_rsp.constprop.0+0x2c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   18fb8:	2200      	movs	r2, #0
   18fba:	4641      	mov	r1, r8
   18fbc:	4620      	mov	r0, r4
   18fbe:	f7ff fee1 	bl	18d84 <bt_att_chan_create_pdu>
   18fc2:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   18fc4:	2800      	cmp	r0, #0
   18fc6:	d1c8      	bne.n	18f5a <att_write_rsp.constprop.0+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   18fc8:	250e      	movs	r5, #14
   18fca:	e7b8      	b.n	18f3e <att_write_rsp.constprop.0+0x2e>
	if (data.buf) {
   18fcc:	9901      	ldr	r1, [sp, #4]
   18fce:	2900      	cmp	r1, #0
   18fd0:	d0b4      	beq.n	18f3c <att_write_rsp.constprop.0+0x2c>
		bt_att_chan_send_rsp(chan, data.buf);
   18fd2:	4620      	mov	r0, r4
   18fd4:	f011 f89c 	bl	2a110 <bt_att_chan_send_rsp>
   18fd8:	e7b1      	b.n	18f3e <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18fda:	2512      	movs	r5, #18
   18fdc:	e7af      	b.n	18f3e <att_write_rsp.constprop.0+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   18fde:	2501      	movs	r5, #1
   18fe0:	e7ad      	b.n	18f3e <att_write_rsp.constprop.0+0x2e>
   18fe2:	bf00      	nop
   18fe4:	00029ec5 	.word	0x00029ec5

00018fe8 <bt_att_create_pdu>:
{
   18fe8:	b570      	push	{r4, r5, r6, lr}
   18fea:	460e      	mov	r6, r1
   18fec:	4615      	mov	r5, r2
	att = att_get(conn);
   18fee:	f7ff fbdd 	bl	187ac <att_get>
	if (!att) {
   18ff2:	b170      	cbz	r0, 19012 <bt_att_create_pdu+0x2a>
	return list->head;
   18ff4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   18ff6:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18ff8:	b138      	cbz	r0, 1900a <bt_att_create_pdu+0x22>
	return node->next;
   18ffa:	f850 39f0 	ldr.w	r3, [r0], #-240
   18ffe:	b103      	cbz	r3, 19002 <bt_att_create_pdu+0x1a>
   19000:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19002:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   19004:	428a      	cmp	r2, r1
   19006:	d906      	bls.n	19016 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19008:	b95b      	cbnz	r3, 19022 <bt_att_create_pdu+0x3a>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1900a:	4809      	ldr	r0, [pc, #36]	; (19030 <bt_att_create_pdu+0x48>)
   1900c:	2157      	movs	r1, #87	; 0x57
   1900e:	f00f fbc7 	bl	287a0 <z_log_minimal_printk>
}
   19012:	2000      	movs	r0, #0
   19014:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   19016:	462a      	mov	r2, r5
   19018:	4631      	mov	r1, r6
}
   1901a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1901e:	f7ff beb1 	b.w	18d84 <bt_att_chan_create_pdu>
   19022:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19026:	b104      	cbz	r4, 1902a <bt_att_create_pdu+0x42>
   19028:	3cf0      	subs	r4, #240	; 0xf0
{
   1902a:	4618      	mov	r0, r3
   1902c:	4623      	mov	r3, r4
   1902e:	e7e8      	b.n	19002 <bt_att_create_pdu+0x1a>
   19030:	0002f03a 	.word	0x0002f03a

00019034 <att_read_group_req>:
{
   19034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19038:	898c      	ldrh	r4, [r1, #12]
   1903a:	3c04      	subs	r4, #4
   1903c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1903e:	2c02      	cmp	r4, #2
{
   19040:	4605      	mov	r5, r0
   19042:	b08c      	sub	sp, #48	; 0x30
   19044:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19046:	d001      	beq.n	1904c <att_read_group_req+0x18>
   19048:	2c10      	cmp	r4, #16
   1904a:	d172      	bne.n	19132 <att_read_group_req+0xfe>
   1904c:	2104      	movs	r1, #4
   1904e:	3008      	adds	r0, #8
   19050:	f004 f82a 	bl	1d0a8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19054:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   19058:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1905a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1905c:	1d01      	adds	r1, r0, #4
   1905e:	4622      	mov	r2, r4
   19060:	4640      	mov	r0, r8
   19062:	f010 f9dd 	bl	29420 <bt_uuid_create>
   19066:	2800      	cmp	r0, #0
   19068:	d065      	beq.n	19136 <att_read_group_req+0x102>
	if (!start || !end) {
   1906a:	2e00      	cmp	r6, #0
   1906c:	d03e      	beq.n	190ec <att_read_group_req+0xb8>
   1906e:	2400      	movs	r4, #0
   19070:	2f00      	cmp	r7, #0
   19072:	d03a      	beq.n	190ea <att_read_group_req+0xb6>
	if (start > end) {
   19074:	42b7      	cmp	r7, r6
   19076:	d339      	bcc.n	190ec <att_read_group_req+0xb8>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19078:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1907c:	a901      	add	r1, sp, #4
   1907e:	4640      	mov	r0, r8
   19080:	f88d 4004 	strb.w	r4, [sp, #4]
   19084:	f8ad 3006 	strh.w	r3, [sp, #6]
   19088:	f010 f99c 	bl	293c4 <bt_uuid_cmp>
   1908c:	2800      	cmp	r0, #0
   1908e:	d138      	bne.n	19102 <att_read_group_req+0xce>
	struct bt_conn *conn = chan->chan.chan.conn;
   19090:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   19092:	2214      	movs	r2, #20
   19094:	2100      	movs	r1, #0
   19096:	a807      	add	r0, sp, #28
   19098:	f013 f894 	bl	2c1c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1909c:	2201      	movs	r2, #1
   1909e:	2111      	movs	r1, #17
   190a0:	4620      	mov	r0, r4
   190a2:	f7ff ffa1 	bl	18fe8 <bt_att_create_pdu>
   190a6:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   190a8:	2800      	cmp	r0, #0
   190aa:	d044      	beq.n	19136 <att_read_group_req+0x102>
	return net_buf_simple_add(&buf->b, len);
   190ac:	2101      	movs	r1, #1
   190ae:	3008      	adds	r0, #8
	data.uuid = uuid;
   190b0:	e9cd 5807 	strd	r5, r8, [sp, #28]
   190b4:	f004 f816 	bl	1d0e4 <net_buf_simple_add>
	data.rsp->len = 0U;
   190b8:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   190bc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   190be:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   190c0:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   190c4:	4a1d      	ldr	r2, [pc, #116]	; (1913c <att_read_group_req+0x108>)
	data.group = NULL;
   190c6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   190ca:	4639      	mov	r1, r7
   190cc:	4630      	mov	r0, r6
   190ce:	f010 feae 	bl	29e2e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   190d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   190d4:	781c      	ldrb	r4, [r3, #0]
   190d6:	bb3c      	cbnz	r4, 19128 <att_read_group_req+0xf4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   190d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   190da:	6958      	ldr	r0, [r3, #20]
   190dc:	f7ff fba2 	bl	18824 <tx_meta_data_free>
		net_buf_unref(data.buf);
   190e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   190e2:	f003 fee9 	bl	1ceb8 <net_buf_unref>
	if (!req) {
   190e6:	230a      	movs	r3, #10
   190e8:	e018      	b.n	1911c <att_read_group_req+0xe8>
			*err = 0U;
   190ea:	463e      	mov	r6, r7
	if (!req) {
   190ec:	2301      	movs	r3, #1
   190ee:	4632      	mov	r2, r6
   190f0:	2110      	movs	r1, #16
   190f2:	4628      	mov	r0, r5
   190f4:	f011 f9cc 	bl	2a490 <send_err_rsp.part.0>
		return 0;
   190f8:	2400      	movs	r4, #0
}
   190fa:	4620      	mov	r0, r4
   190fc:	b00c      	add	sp, #48	; 0x30
   190fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   19102:	f642 0301 	movw	r3, #10241	; 0x2801
   19106:	a907      	add	r1, sp, #28
   19108:	4640      	mov	r0, r8
   1910a:	f88d 401c 	strb.w	r4, [sp, #28]
   1910e:	f8ad 301e 	strh.w	r3, [sp, #30]
   19112:	f010 f957 	bl	293c4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19116:	2800      	cmp	r0, #0
   19118:	d0ba      	beq.n	19090 <att_read_group_req+0x5c>
	if (!req) {
   1911a:	2310      	movs	r3, #16
   1911c:	4632      	mov	r2, r6
   1911e:	2110      	movs	r1, #16
   19120:	4628      	mov	r0, r5
   19122:	f011 f9b5 	bl	2a490 <send_err_rsp.part.0>
		return 0;
   19126:	e7e8      	b.n	190fa <att_read_group_req+0xc6>
	bt_att_chan_send_rsp(chan, data.buf);
   19128:	9909      	ldr	r1, [sp, #36]	; 0x24
   1912a:	4628      	mov	r0, r5
   1912c:	f010 fff0 	bl	2a110 <bt_att_chan_send_rsp>
	return 0;
   19130:	e7e2      	b.n	190f8 <att_read_group_req+0xc4>
		return BT_ATT_ERR_INVALID_PDU;
   19132:	2404      	movs	r4, #4
   19134:	e7e1      	b.n	190fa <att_read_group_req+0xc6>
		return BT_ATT_ERR_UNLIKELY;
   19136:	240e      	movs	r4, #14
   19138:	e7df      	b.n	190fa <att_read_group_req+0xc6>
   1913a:	bf00      	nop
   1913c:	000189f1 	.word	0x000189f1

00019140 <att_read_mult_vl_req>:
{
   19140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19144:	6846      	ldr	r6, [r0, #4]
{
   19146:	b085      	sub	sp, #20
   19148:	4604      	mov	r4, r0
   1914a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1914c:	4630      	mov	r0, r6
   1914e:	2101      	movs	r1, #1
   19150:	f011 fced 	bl	2ab2e <bt_gatt_change_aware>
   19154:	b958      	cbnz	r0, 1916e <att_read_mult_vl_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19156:	2105      	movs	r1, #5
   19158:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1915c:	f011 f800 	bl	2a160 <atomic_test_and_set_bit>
			return 0;
   19160:	2800      	cmp	r0, #0
   19162:	bf0c      	ite	eq
   19164:	2012      	moveq	r0, #18
   19166:	2000      	movne	r0, #0
}
   19168:	b005      	add	sp, #20
   1916a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1916e:	2210      	movs	r2, #16
   19170:	2100      	movs	r1, #0
   19172:	4668      	mov	r0, sp
   19174:	f013 f826 	bl	2c1c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   19178:	2200      	movs	r2, #0
   1917a:	2121      	movs	r1, #33	; 0x21
   1917c:	4630      	mov	r0, r6
   1917e:	f7ff ff33 	bl	18fe8 <bt_att_create_pdu>
   19182:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19184:	b368      	cbz	r0, 191e2 <att_read_mult_vl_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19186:	f8df 9060 	ldr.w	r9, [pc, #96]	; 191e8 <att_read_mult_vl_req+0xa8>
	data.chan = chan;
   1918a:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1918c:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19190:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19194:	89ab      	ldrh	r3, [r5, #12]
   19196:	2b01      	cmp	r3, #1
   19198:	d804      	bhi.n	191a4 <att_read_mult_vl_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   1919a:	9902      	ldr	r1, [sp, #8]
   1919c:	4620      	mov	r0, r4
   1919e:	f010 ffb7 	bl	2a110 <bt_att_chan_send_rsp>
   191a2:	e01c      	b.n	191de <att_read_mult_vl_req+0x9e>
   191a4:	4638      	mov	r0, r7
   191a6:	f012 f8f4 	bl	2b392 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   191aa:	466b      	mov	r3, sp
   191ac:	464a      	mov	r2, r9
   191ae:	4601      	mov	r1, r0
   191b0:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   191b2:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   191b6:	f010 fe3a 	bl	29e2e <bt_gatt_foreach_attr>
		if (data.err) {
   191ba:	f89d 300c 	ldrb.w	r3, [sp, #12]
   191be:	2b00      	cmp	r3, #0
   191c0:	d0e8      	beq.n	19194 <att_read_mult_vl_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   191c2:	9b02      	ldr	r3, [sp, #8]
   191c4:	6958      	ldr	r0, [r3, #20]
   191c6:	f7ff fb2d 	bl	18824 <tx_meta_data_free>
			net_buf_unref(data.buf);
   191ca:	9802      	ldr	r0, [sp, #8]
   191cc:	f003 fe74 	bl	1ceb8 <net_buf_unref>
	if (!req) {
   191d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   191d4:	4632      	mov	r2, r6
   191d6:	2120      	movs	r1, #32
   191d8:	4620      	mov	r0, r4
   191da:	f011 f959 	bl	2a490 <send_err_rsp.part.0>
	return 0;
   191de:	2000      	movs	r0, #0
   191e0:	e7c2      	b.n	19168 <att_read_mult_vl_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   191e2:	200e      	movs	r0, #14
   191e4:	e7c0      	b.n	19168 <att_read_mult_vl_req+0x28>
   191e6:	bf00      	nop
   191e8:	0002a1df 	.word	0x0002a1df

000191ec <att_read_mult_req>:
{
   191ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   191f0:	6846      	ldr	r6, [r0, #4]
{
   191f2:	b085      	sub	sp, #20
   191f4:	4604      	mov	r4, r0
   191f6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   191f8:	4630      	mov	r0, r6
   191fa:	2101      	movs	r1, #1
   191fc:	f011 fc97 	bl	2ab2e <bt_gatt_change_aware>
   19200:	b958      	cbnz	r0, 1921a <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19202:	2105      	movs	r1, #5
   19204:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19208:	f010 ffaa 	bl	2a160 <atomic_test_and_set_bit>
			return 0;
   1920c:	2800      	cmp	r0, #0
   1920e:	bf0c      	ite	eq
   19210:	2012      	moveq	r0, #18
   19212:	2000      	movne	r0, #0
}
   19214:	b005      	add	sp, #20
   19216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1921a:	2210      	movs	r2, #16
   1921c:	2100      	movs	r1, #0
   1921e:	4668      	mov	r0, sp
   19220:	f012 ffd0 	bl	2c1c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19224:	2200      	movs	r2, #0
   19226:	210f      	movs	r1, #15
   19228:	4630      	mov	r0, r6
   1922a:	f7ff fedd 	bl	18fe8 <bt_att_create_pdu>
   1922e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19230:	b368      	cbz	r0, 1928e <att_read_mult_req+0xa2>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19232:	f8df 9060 	ldr.w	r9, [pc, #96]	; 19294 <att_read_mult_req+0xa8>
	data.chan = chan;
   19236:	9400      	str	r4, [sp, #0]
   19238:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1923c:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19240:	89ab      	ldrh	r3, [r5, #12]
   19242:	2b01      	cmp	r3, #1
   19244:	d804      	bhi.n	19250 <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf);
   19246:	9902      	ldr	r1, [sp, #8]
   19248:	4620      	mov	r0, r4
   1924a:	f010 ff61 	bl	2a110 <bt_att_chan_send_rsp>
   1924e:	e01c      	b.n	1928a <att_read_mult_req+0x9e>
   19250:	4638      	mov	r0, r7
   19252:	f012 f89e 	bl	2b392 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19256:	466b      	mov	r3, sp
   19258:	464a      	mov	r2, r9
   1925a:	4601      	mov	r1, r0
   1925c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1925e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19262:	f010 fde4 	bl	29e2e <bt_gatt_foreach_attr>
		if (data.err) {
   19266:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1926a:	2b00      	cmp	r3, #0
   1926c:	d0e8      	beq.n	19240 <att_read_mult_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1926e:	9b02      	ldr	r3, [sp, #8]
   19270:	6958      	ldr	r0, [r3, #20]
   19272:	f7ff fad7 	bl	18824 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19276:	9802      	ldr	r0, [sp, #8]
   19278:	f003 fe1e 	bl	1ceb8 <net_buf_unref>
	if (!req) {
   1927c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19280:	4632      	mov	r2, r6
   19282:	210e      	movs	r1, #14
   19284:	4620      	mov	r0, r4
   19286:	f011 f903 	bl	2a490 <send_err_rsp.part.0>
	return 0;
   1928a:	2000      	movs	r0, #0
   1928c:	e7c2      	b.n	19214 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1928e:	200e      	movs	r0, #14
   19290:	e7c0      	b.n	19214 <att_read_mult_req+0x28>
   19292:	bf00      	nop
   19294:	0002a18b 	.word	0x0002a18b

00019298 <att_read_rsp>:
{
   19298:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1929c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   192a0:	4604      	mov	r4, r0
   192a2:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   192a4:	4640      	mov	r0, r8
   192a6:	2101      	movs	r1, #1
{
   192a8:	4615      	mov	r5, r2
   192aa:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   192ac:	f011 fc3f 	bl	2ab2e <bt_gatt_change_aware>
   192b0:	b960      	cbnz	r0, 192cc <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   192b2:	2105      	movs	r1, #5
   192b4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   192b8:	f010 ff52 	bl	2a160 <atomic_test_and_set_bit>
			return 0;
   192bc:	2800      	cmp	r0, #0
   192be:	bf0c      	ite	eq
   192c0:	2512      	moveq	r5, #18
   192c2:	2500      	movne	r5, #0
}
   192c4:	4628      	mov	r0, r5
   192c6:	b004      	add	sp, #16
   192c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   192cc:	b38e      	cbz	r6, 19332 <att_read_rsp+0x9a>
	(void)memset(&data, 0, sizeof(data));
   192ce:	2210      	movs	r2, #16
   192d0:	2100      	movs	r1, #0
   192d2:	4668      	mov	r0, sp
   192d4:	f012 ff76 	bl	2c1c4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   192d8:	2200      	movs	r2, #0
   192da:	4629      	mov	r1, r5
   192dc:	4640      	mov	r0, r8
   192de:	f7ff fe83 	bl	18fe8 <bt_att_create_pdu>
   192e2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   192e4:	b338      	cbz	r0, 19336 <att_read_rsp+0x9e>
	data.offset = offset;
   192e6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   192ea:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   192ee:	2301      	movs	r3, #1
   192f0:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   192f4:	4a11      	ldr	r2, [pc, #68]	; (1933c <att_read_rsp+0xa4>)
	data.chan = chan;
   192f6:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   192f8:	466b      	mov	r3, sp
   192fa:	4631      	mov	r1, r6
   192fc:	4630      	mov	r0, r6
   192fe:	f010 fd96 	bl	29e2e <bt_gatt_foreach_attr>
	if (data.err) {
   19302:	f89d 500c 	ldrb.w	r5, [sp, #12]
   19306:	b17d      	cbz	r5, 19328 <att_read_rsp+0x90>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19308:	9b02      	ldr	r3, [sp, #8]
   1930a:	6958      	ldr	r0, [r3, #20]
   1930c:	f7ff fa8a 	bl	18824 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19310:	9802      	ldr	r0, [sp, #8]
   19312:	f003 fdd1 	bl	1ceb8 <net_buf_unref>
	if (!req) {
   19316:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1931a:	4632      	mov	r2, r6
   1931c:	4639      	mov	r1, r7
   1931e:	4620      	mov	r0, r4
   19320:	f011 f8b6 	bl	2a490 <send_err_rsp.part.0>
		return 0;
   19324:	2500      	movs	r5, #0
   19326:	e7cd      	b.n	192c4 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf);
   19328:	9902      	ldr	r1, [sp, #8]
   1932a:	4620      	mov	r0, r4
   1932c:	f010 fef0 	bl	2a110 <bt_att_chan_send_rsp>
	return 0;
   19330:	e7c8      	b.n	192c4 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19332:	2501      	movs	r5, #1
   19334:	e7c6      	b.n	192c4 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   19336:	250e      	movs	r5, #14
   19338:	e7c4      	b.n	192c4 <att_read_rsp+0x2c>
   1933a:	bf00      	nop
   1933c:	0002a18b 	.word	0x0002a18b

00019340 <att_read_type_req>:
{
   19340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19344:	898c      	ldrh	r4, [r1, #12]
   19346:	3c04      	subs	r4, #4
   19348:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1934a:	2c02      	cmp	r4, #2
{
   1934c:	4605      	mov	r5, r0
   1934e:	b08c      	sub	sp, #48	; 0x30
   19350:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19352:	d001      	beq.n	19358 <att_read_type_req+0x18>
   19354:	2c10      	cmp	r4, #16
   19356:	d153      	bne.n	19400 <att_read_type_req+0xc0>
	return net_buf_simple_pull_mem(&buf->b, len);
   19358:	2104      	movs	r1, #4
   1935a:	3008      	adds	r0, #8
   1935c:	f003 fea4 	bl	1d0a8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19360:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   19364:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19366:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19368:	1d01      	adds	r1, r0, #4
   1936a:	4622      	mov	r2, r4
   1936c:	4640      	mov	r0, r8
   1936e:	f010 f857 	bl	29420 <bt_uuid_create>
   19372:	b188      	cbz	r0, 19398 <att_read_type_req+0x58>
	if (!start || !end) {
   19374:	b19e      	cbz	r6, 1939e <att_read_type_req+0x5e>
   19376:	b18f      	cbz	r7, 1939c <att_read_type_req+0x5c>
	if (start > end) {
   19378:	42b7      	cmp	r7, r6
   1937a:	d310      	bcc.n	1939e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1937c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1937e:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   19380:	2100      	movs	r1, #0
   19382:	eb0d 0002 	add.w	r0, sp, r2
   19386:	f012 ff1d 	bl	2c1c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1938a:	2201      	movs	r2, #1
   1938c:	2109      	movs	r1, #9
   1938e:	4620      	mov	r0, r4
   19390:	f7ff fe2a 	bl	18fe8 <bt_att_create_pdu>
   19394:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   19396:	b968      	cbnz	r0, 193b4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   19398:	240e      	movs	r4, #14
   1939a:	e007      	b.n	193ac <att_read_type_req+0x6c>
			*err = 0U;
   1939c:	463e      	mov	r6, r7
	if (!req) {
   1939e:	2301      	movs	r3, #1
   193a0:	4632      	mov	r2, r6
   193a2:	2108      	movs	r1, #8
   193a4:	4628      	mov	r0, r5
   193a6:	f011 f873 	bl	2a490 <send_err_rsp.part.0>
		return 0;
   193aa:	2400      	movs	r4, #0
}
   193ac:	4620      	mov	r0, r4
   193ae:	b00c      	add	sp, #48	; 0x30
   193b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   193b4:	2101      	movs	r1, #1
   193b6:	3008      	adds	r0, #8
	data.uuid = uuid;
   193b8:	e9cd 5806 	strd	r5, r8, [sp, #24]
   193bc:	f003 fe92 	bl	1d0e4 <net_buf_simple_add>
	data.rsp->len = 0U;
   193c0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   193c4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   193c6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   193c8:	4a0e      	ldr	r2, [pc, #56]	; (19404 <att_read_type_req+0xc4>)
	data.rsp->len = 0U;
   193ca:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   193ce:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   193d0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   193d4:	4630      	mov	r0, r6
   193d6:	ab06      	add	r3, sp, #24
   193d8:	f010 fd29 	bl	29e2e <bt_gatt_foreach_attr>
	if (data.err) {
   193dc:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   193e0:	b14c      	cbz	r4, 193f6 <att_read_type_req+0xb6>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   193e2:	9b08      	ldr	r3, [sp, #32]
   193e4:	6958      	ldr	r0, [r3, #20]
   193e6:	f7ff fa1d 	bl	18824 <tx_meta_data_free>
		net_buf_unref(data.buf);
   193ea:	9808      	ldr	r0, [sp, #32]
   193ec:	f003 fd64 	bl	1ceb8 <net_buf_unref>
	if (!req) {
   193f0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   193f4:	e7d4      	b.n	193a0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   193f6:	9908      	ldr	r1, [sp, #32]
   193f8:	4628      	mov	r0, r5
   193fa:	f010 fe89 	bl	2a110 <bt_att_chan_send_rsp>
	return 0;
   193fe:	e7d5      	b.n	193ac <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   19400:	2404      	movs	r4, #4
   19402:	e7d3      	b.n	193ac <att_read_type_req+0x6c>
   19404:	00018cdd 	.word	0x00018cdd

00019408 <att_find_type_req>:
{
   19408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1940c:	4688      	mov	r8, r1
   1940e:	b086      	sub	sp, #24
   19410:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   19412:	2106      	movs	r1, #6
   19414:	f108 0008 	add.w	r0, r8, #8
   19418:	f003 fe46 	bl	1d0a8 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1941c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1941e:	b317      	cbz	r7, 19466 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19420:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   19424:	f1b9 0f00 	cmp.w	r9, #0
   19428:	d01c      	beq.n	19464 <att_find_type_req+0x5c>
	if (start > end) {
   1942a:	454f      	cmp	r7, r9
   1942c:	d81b      	bhi.n	19466 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1942e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19430:	f8ad 3002 	strh.w	r3, [sp, #2]
   19434:	2400      	movs	r4, #0
   19436:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1943a:	a901      	add	r1, sp, #4
   1943c:	4668      	mov	r0, sp
	value = buf->data;
   1943e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19442:	f88d 4000 	strb.w	r4, [sp]
   19446:	f88d 4004 	strb.w	r4, [sp, #4]
   1944a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1944e:	f00f ffb9 	bl	293c4 <bt_uuid_cmp>
   19452:	4606      	mov	r6, r0
   19454:	b190      	cbz	r0, 1947c <att_find_type_req+0x74>
	if (!req) {
   19456:	230a      	movs	r3, #10
   19458:	463a      	mov	r2, r7
   1945a:	2106      	movs	r1, #6
   1945c:	4628      	mov	r0, r5
   1945e:	f011 f817 	bl	2a490 <send_err_rsp.part.0>
		return 0;
   19462:	e007      	b.n	19474 <att_find_type_req+0x6c>
			*err = 0U;
   19464:	464f      	mov	r7, r9
	if (!req) {
   19466:	2301      	movs	r3, #1
   19468:	463a      	mov	r2, r7
   1946a:	2106      	movs	r1, #6
   1946c:	4628      	mov	r0, r5
   1946e:	f011 f80f 	bl	2a490 <send_err_rsp.part.0>
		return 0;
   19472:	2400      	movs	r4, #0
}
   19474:	4620      	mov	r0, r4
   19476:	b006      	add	sp, #24
   19478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1947c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   19480:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   19484:	4601      	mov	r1, r0
   19486:	2214      	movs	r2, #20
   19488:	a801      	add	r0, sp, #4
   1948a:	f012 fe9b 	bl	2c1c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1948e:	4632      	mov	r2, r6
   19490:	2107      	movs	r1, #7
   19492:	4640      	mov	r0, r8
   19494:	f7ff fda8 	bl	18fe8 <bt_att_create_pdu>
   19498:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1949a:	b1f8      	cbz	r0, 194dc <att_find_type_req+0xd4>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1949c:	230a      	movs	r3, #10
   1949e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   194a2:	4a0f      	ldr	r2, [pc, #60]	; (194e0 <att_find_type_req+0xd8>)
	data.value_len = value_len;
   194a4:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   194a8:	ab01      	add	r3, sp, #4
   194aa:	4649      	mov	r1, r9
   194ac:	4638      	mov	r0, r7
	data.value = value;
   194ae:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   194b2:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   194b4:	f010 fcbb 	bl	29e2e <bt_gatt_foreach_attr>
	if (data.err) {
   194b8:	f89d 4015 	ldrb.w	r4, [sp, #21]
   194bc:	b14c      	cbz	r4, 194d2 <att_find_type_req+0xca>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   194be:	9b02      	ldr	r3, [sp, #8]
   194c0:	6958      	ldr	r0, [r3, #20]
   194c2:	f7ff f9af 	bl	18824 <tx_meta_data_free>
		net_buf_unref(data.buf);
   194c6:	9802      	ldr	r0, [sp, #8]
   194c8:	f003 fcf6 	bl	1ceb8 <net_buf_unref>
	if (!req) {
   194cc:	f89d 3015 	ldrb.w	r3, [sp, #21]
   194d0:	e7ca      	b.n	19468 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   194d2:	9902      	ldr	r1, [sp, #8]
   194d4:	4628      	mov	r0, r5
   194d6:	f010 fe1b 	bl	2a110 <bt_att_chan_send_rsp>
	return 0;
   194da:	e7cb      	b.n	19474 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   194dc:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   194de:	e7c9      	b.n	19474 <att_find_type_req+0x6c>
   194e0:	00018861 	.word	0x00018861

000194e4 <att_find_info_req>:
{
   194e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   194e6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   194e8:	881e      	ldrh	r6, [r3, #0]
{
   194ea:	b085      	sub	sp, #20
   194ec:	4605      	mov	r5, r0
	if (!start || !end) {
   194ee:	b19e      	cbz	r6, 19518 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   194f0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   194f2:	b184      	cbz	r4, 19516 <att_find_info_req+0x32>
	if (start > end) {
   194f4:	42a6      	cmp	r6, r4
   194f6:	d80f      	bhi.n	19518 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   194f8:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   194fa:	2210      	movs	r2, #16
   194fc:	2100      	movs	r1, #0
   194fe:	4668      	mov	r0, sp
   19500:	f012 fe60 	bl	2c1c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19504:	2200      	movs	r2, #0
   19506:	2105      	movs	r1, #5
   19508:	4638      	mov	r0, r7
   1950a:	f7ff fd6d 	bl	18fe8 <bt_att_create_pdu>
   1950e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   19510:	b958      	cbnz	r0, 1952a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   19512:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   19514:	e007      	b.n	19526 <att_find_info_req+0x42>
			*err = 0U;
   19516:	4626      	mov	r6, r4
	if (!req) {
   19518:	2301      	movs	r3, #1
   1951a:	4632      	mov	r2, r6
   1951c:	2104      	movs	r1, #4
   1951e:	4628      	mov	r0, r5
   19520:	f010 ffb6 	bl	2a490 <send_err_rsp.part.0>
	return 0;
   19524:	2000      	movs	r0, #0
}
   19526:	b005      	add	sp, #20
   19528:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1952a:	4621      	mov	r1, r4
   1952c:	4a0a      	ldr	r2, [pc, #40]	; (19558 <att_find_info_req+0x74>)
	data.chan = chan;
   1952e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19530:	466b      	mov	r3, sp
   19532:	4630      	mov	r0, r6
   19534:	f010 fc7b 	bl	29e2e <bt_gatt_foreach_attr>
	if (!data.rsp) {
   19538:	9c02      	ldr	r4, [sp, #8]
   1953a:	b944      	cbnz	r4, 1954e <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1953c:	9b01      	ldr	r3, [sp, #4]
   1953e:	6958      	ldr	r0, [r3, #20]
   19540:	f7ff f970 	bl	18824 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19544:	9801      	ldr	r0, [sp, #4]
   19546:	f003 fcb7 	bl	1ceb8 <net_buf_unref>
	if (!req) {
   1954a:	230a      	movs	r3, #10
   1954c:	e7e5      	b.n	1951a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1954e:	9901      	ldr	r1, [sp, #4]
   19550:	4628      	mov	r0, r5
   19552:	f010 fddd 	bl	2a110 <bt_att_chan_send_rsp>
   19556:	e7e5      	b.n	19524 <att_find_info_req+0x40>
   19558:	00029f2b 	.word	0x00029f2b

0001955c <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1955c:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1955e:	4d0a      	ldr	r5, [pc, #40]	; (19588 <bt_att_init+0x2c>)
   19560:	4c0a      	ldr	r4, [pc, #40]	; (1958c <bt_att_init+0x30>)
   19562:	4629      	mov	r1, r5
   19564:	4620      	mov	r0, r4
   19566:	f012 fc2b 	bl	2bdc0 <k_queue_append>
   1956a:	f105 0114 	add.w	r1, r5, #20
   1956e:	4620      	mov	r0, r4
   19570:	f012 fc26 	bl	2bdc0 <k_queue_append>
   19574:	f105 0128 	add.w	r1, r5, #40	; 0x28
   19578:	4620      	mov	r0, r4
   1957a:	f012 fc21 	bl	2bdc0 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1957e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   19582:	f000 bd67 	b.w	1a054 <bt_gatt_init>
   19586:	bf00      	nop
   19588:	20002820 	.word	0x20002820
   1958c:	20000ad8 	.word	0x20000ad8

00019590 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19590:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   19592:	2300      	movs	r3, #0
{
   19594:	4605      	mov	r5, r0
   19596:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   19598:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1959a:	f00a fd41 	bl	24020 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1959e:	4b0b      	ldr	r3, [pc, #44]	; (195cc <bt_att_req_alloc+0x3c>)
   195a0:	681b      	ldr	r3, [r3, #0]
   195a2:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   195a4:	bf04      	itt	eq
   195a6:	2500      	moveq	r5, #0
   195a8:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   195aa:	a901      	add	r1, sp, #4
   195ac:	4808      	ldr	r0, [pc, #32]	; (195d0 <bt_att_req_alloc+0x40>)
   195ae:	462a      	mov	r2, r5
   195b0:	4623      	mov	r3, r4
   195b2:	f008 fbc1 	bl	21d38 <k_mem_slab_alloc>
   195b6:	4601      	mov	r1, r0
   195b8:	b930      	cbnz	r0, 195c8 <bt_att_req_alloc+0x38>
   195ba:	9801      	ldr	r0, [sp, #4]
   195bc:	221c      	movs	r2, #28
   195be:	f012 fe01 	bl	2c1c4 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   195c2:	9801      	ldr	r0, [sp, #4]
}
   195c4:	b003      	add	sp, #12
   195c6:	bd30      	pop	{r4, r5, pc}
		return NULL;
   195c8:	2000      	movs	r0, #0
   195ca:	e7fb      	b.n	195c4 <bt_att_req_alloc+0x34>
   195cc:	20002800 	.word	0x20002800
   195d0:	20000a28 	.word	0x20000a28

000195d4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   195d4:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   195d6:	6883      	ldr	r3, [r0, #8]
{
   195d8:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   195da:	b14b      	cbz	r3, 195f0 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   195dc:	6958      	ldr	r0, [r3, #20]
   195de:	f7ff f921 	bl	18824 <tx_meta_data_free>
		net_buf_unref(req->buf);
   195e2:	9b01      	ldr	r3, [sp, #4]
   195e4:	6898      	ldr	r0, [r3, #8]
   195e6:	f003 fc67 	bl	1ceb8 <net_buf_unref>
		req->buf = NULL;
   195ea:	9b01      	ldr	r3, [sp, #4]
   195ec:	2200      	movs	r2, #0
   195ee:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   195f0:	4803      	ldr	r0, [pc, #12]	; (19600 <bt_att_req_free+0x2c>)
   195f2:	a901      	add	r1, sp, #4
   195f4:	f008 fbfa 	bl	21dec <k_mem_slab_free>
}
   195f8:	b003      	add	sp, #12
   195fa:	f85d fb04 	ldr.w	pc, [sp], #4
   195fe:	bf00      	nop
   19600:	20000a28 	.word	0x20000a28

00019604 <att_handle_rsp>:
{
   19604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19608:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1960a:	30c0      	adds	r0, #192	; 0xc0
{
   1960c:	4689      	mov	r9, r1
   1960e:	4692      	mov	sl, r2
   19610:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
   19612:	f009 fcf3 	bl	22ffc <k_work_cancel_delayable>
	if (!chan->req) {
   19616:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
   1961a:	2700      	movs	r7, #0
   1961c:	b9a5      	cbnz	r5, 19648 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   1961e:	4813      	ldr	r0, [pc, #76]	; (1966c <att_handle_rsp+0x68>)
   19620:	2157      	movs	r1, #87	; 0x57
   19622:	f00f f8bd 	bl	287a0 <z_log_minimal_printk>
	bt_att_func_t func = NULL;
   19626:	462e      	mov	r6, r5
	att_req_send_process(chan->att);
   19628:	6820      	ldr	r0, [r4, #0]
   1962a:	f010 fe5b 	bl	2a2e4 <att_req_send_process>
	if (func) {
   1962e:	b13e      	cbz	r6, 19640 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   19630:	6820      	ldr	r0, [r4, #0]
   19632:	f8cd b000 	str.w	fp, [sp]
   19636:	6800      	ldr	r0, [r0, #0]
   19638:	4653      	mov	r3, sl
   1963a:	464a      	mov	r2, r9
   1963c:	4641      	mov	r1, r8
   1963e:	47b0      	blx	r6
}
   19640:	2000      	movs	r0, #0
   19642:	b003      	add	sp, #12
   19644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   19648:	4b09      	ldr	r3, [pc, #36]	; (19670 <att_handle_rsp+0x6c>)
   1964a:	429d      	cmp	r5, r3
   1964c:	d103      	bne.n	19656 <att_handle_rsp+0x52>
		chan->req = NULL;
   1964e:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	bt_att_func_t func = NULL;
   19652:	463e      	mov	r6, r7
		goto process;
   19654:	e7e8      	b.n	19628 <att_handle_rsp+0x24>
	func = chan->req->func;
   19656:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
   19658:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
   1965a:	4628      	mov	r0, r5
	params = chan->req->user_data;
   1965c:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
   19660:	f7ff ffb8 	bl	195d4 <bt_att_req_free>
	chan->req = NULL;
   19664:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
   19668:	e7de      	b.n	19628 <att_handle_rsp+0x24>
   1966a:	bf00      	nop
   1966c:	0002f05a 	.word	0x0002f05a
   19670:	20002804 	.word	0x20002804

00019674 <bt_att_disconnected>:
{
   19674:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   19678:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1967c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1967e:	2e00      	cmp	r6, #0
   19680:	d056      	beq.n	19730 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   19682:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   19686:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1968a:	f010 fd4f 	bl	2a12c <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1968e:	1f27      	subs	r7, r4, #4
   19690:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   19694:	2200      	movs	r2, #0
   19696:	2300      	movs	r3, #0
   19698:	4640      	mov	r0, r8
   1969a:	f003 fabd 	bl	1cc18 <net_buf_get>
   1969e:	4605      	mov	r5, r0
   196a0:	bb28      	cbnz	r0, 196ee <bt_att_disconnected+0x7a>
	if (chan->req) {
   196a2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   196a6:	b12b      	cbz	r3, 196b4 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   196a8:	4602      	mov	r2, r0
   196aa:	4601      	mov	r1, r0
   196ac:	230e      	movs	r3, #14
   196ae:	4638      	mov	r0, r7
   196b0:	f7ff ffa8 	bl	19604 <att_handle_rsp>
	chan->att = NULL;
   196b4:	2300      	movs	r3, #0
   196b6:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   196ba:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   196bc:	2b00      	cmp	r3, #0
   196be:	d137      	bne.n	19730 <bt_att_disconnected+0xbc>
	att_reset(att);
   196c0:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   196c2:	9803      	ldr	r0, [sp, #12]
   196c4:	2200      	movs	r2, #0
   196c6:	2300      	movs	r3, #0
   196c8:	300c      	adds	r0, #12
   196ca:	f003 faa5 	bl	1cc18 <net_buf_get>
   196ce:	4605      	mov	r5, r0
   196d0:	b9a0      	cbnz	r0, 196fc <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   196d2:	9803      	ldr	r0, [sp, #12]
	return list->head;
   196d4:	6845      	ldr	r5, [r0, #4]
   196d6:	b9c5      	cbnz	r5, 1970a <bt_att_disconnected+0x96>
	att->conn = NULL;
   196d8:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   196da:	a903      	add	r1, sp, #12
   196dc:	4816      	ldr	r0, [pc, #88]	; (19738 <bt_att_disconnected+0xc4>)
   196de:	f008 fb85 	bl	21dec <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   196e2:	6820      	ldr	r0, [r4, #0]
}
   196e4:	b004      	add	sp, #16
   196e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   196ea:	f001 bbbf 	b.w	1ae6c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   196ee:	6968      	ldr	r0, [r5, #20]
   196f0:	f7ff f898 	bl	18824 <tx_meta_data_free>
		net_buf_unref(buf);
   196f4:	4628      	mov	r0, r5
   196f6:	f003 fbdf 	bl	1ceb8 <net_buf_unref>
   196fa:	e7cb      	b.n	19694 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   196fc:	6968      	ldr	r0, [r5, #20]
   196fe:	f7ff f891 	bl	18824 <tx_meta_data_free>
		net_buf_unref(buf);
   19702:	4628      	mov	r0, r5
   19704:	f003 fbd8 	bl	1ceb8 <net_buf_unref>
   19708:	e7db      	b.n	196c2 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1970a:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   1970c:	686e      	ldr	r6, [r5, #4]
	return node->next;
   1970e:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   19710:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19712:	4295      	cmp	r5, r2
	list->tail = node;
   19714:	bf08      	it	eq
   19716:	6083      	streq	r3, [r0, #8]
   19718:	b136      	cbz	r6, 19728 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1971a:	69ab      	ldr	r3, [r5, #24]
   1971c:	9300      	str	r3, [sp, #0]
   1971e:	2300      	movs	r3, #0
   19720:	6800      	ldr	r0, [r0, #0]
   19722:	461a      	mov	r2, r3
   19724:	210e      	movs	r1, #14
   19726:	47b0      	blx	r6
		bt_att_req_free(req);
   19728:	4628      	mov	r0, r5
   1972a:	f7ff ff53 	bl	195d4 <bt_att_req_free>
   1972e:	e7d0      	b.n	196d2 <bt_att_disconnected+0x5e>
}
   19730:	b004      	add	sp, #16
   19732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19736:	bf00      	nop
   19738:	200009e8 	.word	0x200009e8

0001973c <att_timeout>:
{
   1973c:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
   1973e:	2145      	movs	r1, #69	; 0x45
{
   19740:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   19742:	4804      	ldr	r0, [pc, #16]	; (19754 <att_timeout+0x18>)
   19744:	f00f f82c 	bl	287a0 <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   19748:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   1974c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   19750:	f7ff bf90 	b.w	19674 <bt_att_disconnected>
   19754:	0002f076 	.word	0x0002f076

00019758 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   19758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1975a:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1975c:	4605      	mov	r5, r0
   1975e:	b950      	cbnz	r0, 19776 <bt_att_send+0x1e>
   19760:	492c      	ldr	r1, [pc, #176]	; (19814 <bt_att_send+0xbc>)
   19762:	482d      	ldr	r0, [pc, #180]	; (19818 <bt_att_send+0xc0>)
   19764:	f640 6288 	movw	r2, #3720	; 0xe88
   19768:	f00f f80c 	bl	28784 <assert_print>
   1976c:	4829      	ldr	r0, [pc, #164]	; (19814 <bt_att_send+0xbc>)
   1976e:	f640 6188 	movw	r1, #3720	; 0xe88
   19772:	f00f f800 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   19776:	b954      	cbnz	r4, 1978e <bt_att_send+0x36>
   19778:	4926      	ldr	r1, [pc, #152]	; (19814 <bt_att_send+0xbc>)
   1977a:	4827      	ldr	r0, [pc, #156]	; (19818 <bt_att_send+0xc0>)
   1977c:	f640 6289 	movw	r2, #3721	; 0xe89
   19780:	f00f f800 	bl	28784 <assert_print>
   19784:	4823      	ldr	r0, [pc, #140]	; (19814 <bt_att_send+0xbc>)
   19786:	f640 6189 	movw	r1, #3721	; 0xe89
   1978a:	f00e fff4 	bl	28776 <assert_post_action>

	att = att_get(conn);
   1978e:	4628      	mov	r0, r5
   19790:	f7ff f80c 	bl	187ac <att_get>
	if (!att) {
   19794:	4605      	mov	r5, r0
   19796:	b940      	cbnz	r0, 197aa <bt_att_send+0x52>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19798:	6960      	ldr	r0, [r4, #20]
   1979a:	f7ff f843 	bl	18824 <tx_meta_data_free>
		net_buf_unref(buf);
   1979e:	4620      	mov	r0, r4
   197a0:	f003 fb8a 	bl	1ceb8 <net_buf_unref>
		return -ENOTCONN;
   197a4:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   197a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   197aa:	f100 060c 	add.w	r6, r0, #12
   197ae:	4621      	mov	r1, r4
   197b0:	4630      	mov	r0, r6
   197b2:	f003 fb53 	bl	1ce5c <net_buf_put>
	return list->head;
   197b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   197b8:	4625      	mov	r5, r4
   197ba:	b11c      	cbz	r4, 197c4 <bt_att_send+0x6c>
	return node->next;
   197bc:	f855 49f0 	ldr.w	r4, [r5], #-240
   197c0:	b104      	cbz	r4, 197c4 <bt_att_send+0x6c>
   197c2:	3cf0      	subs	r4, #240	; 0xf0
   197c4:	2300      	movs	r3, #0
   197c6:	461f      	mov	r7, r3
   197c8:	b13d      	cbz	r5, 197da <bt_att_send+0x82>
		if (err == -ENOENT && prev &&
   197ca:	1c9a      	adds	r2, r3, #2
   197cc:	d007      	beq.n	197de <bt_att_send+0x86>
		err = process_queue(chan, &att->tx_queue);
   197ce:	4631      	mov	r1, r6
   197d0:	4628      	mov	r0, r5
   197d2:	f010 fc84 	bl	2a0de <process_queue>
		if (!err) {
   197d6:	4603      	mov	r3, r0
   197d8:	b980      	cbnz	r0, 197fc <bt_att_send+0xa4>
	return 0;
   197da:	2000      	movs	r0, #0
   197dc:	e7e4      	b.n	197a8 <bt_att_send+0x50>
		if (err == -ENOENT && prev &&
   197de:	2f00      	cmp	r7, #0
   197e0:	d0f5      	beq.n	197ce <bt_att_send+0x76>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   197e2:	2103      	movs	r1, #3
   197e4:	f105 0098 	add.w	r0, r5, #152	; 0x98
   197e8:	f010 fb18 	bl	29e1c <atomic_test_bit>
   197ec:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   197ee:	f107 0098 	add.w	r0, r7, #152	; 0x98
   197f2:	f010 fb13 	bl	29e1c <atomic_test_bit>
		if (err == -ENOENT && prev &&
   197f6:	4282      	cmp	r2, r0
   197f8:	d1e9      	bne.n	197ce <bt_att_send+0x76>
   197fa:	463d      	mov	r5, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   197fc:	b13c      	cbz	r4, 1980e <bt_att_send+0xb6>
   197fe:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   19802:	b102      	cbz	r2, 19806 <bt_att_send+0xae>
   19804:	3af0      	subs	r2, #240	; 0xf0
   19806:	462f      	mov	r7, r5
   19808:	4625      	mov	r5, r4
   1980a:	4614      	mov	r4, r2
   1980c:	e7dc      	b.n	197c8 <bt_att_send+0x70>
   1980e:	4622      	mov	r2, r4
   19810:	e7f9      	b.n	19806 <bt_att_send+0xae>
   19812:	bf00      	nop
   19814:	0002ee61 	.word	0x0002ee61
   19818:	0002d509 	.word	0x0002d509

0001981c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1981c:	b538      	push	{r3, r4, r5, lr}
   1981e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   19820:	4605      	mov	r5, r0
   19822:	b950      	cbnz	r0, 1983a <bt_att_req_send+0x1e>
   19824:	4915      	ldr	r1, [pc, #84]	; (1987c <bt_att_req_send+0x60>)
   19826:	4816      	ldr	r0, [pc, #88]	; (19880 <bt_att_req_send+0x64>)
   19828:	f640 629e 	movw	r2, #3742	; 0xe9e
   1982c:	f00e ffaa 	bl	28784 <assert_print>
   19830:	4812      	ldr	r0, [pc, #72]	; (1987c <bt_att_req_send+0x60>)
   19832:	f640 619e 	movw	r1, #3742	; 0xe9e
   19836:	f00e ff9e 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1983a:	b954      	cbnz	r4, 19852 <bt_att_req_send+0x36>
   1983c:	490f      	ldr	r1, [pc, #60]	; (1987c <bt_att_req_send+0x60>)
   1983e:	4810      	ldr	r0, [pc, #64]	; (19880 <bt_att_req_send+0x64>)
   19840:	f640 629f 	movw	r2, #3743	; 0xe9f
   19844:	f00e ff9e 	bl	28784 <assert_print>
   19848:	480c      	ldr	r0, [pc, #48]	; (1987c <bt_att_req_send+0x60>)
   1984a:	f640 619f 	movw	r1, #3743	; 0xe9f
   1984e:	f00e ff92 	bl	28776 <assert_post_action>

	att = att_get(conn);
   19852:	4628      	mov	r0, r5
   19854:	f7fe ffaa 	bl	187ac <att_get>
	if (!att) {
   19858:	b160      	cbz	r0, 19874 <bt_att_req_send+0x58>
	parent->next = child;
   1985a:	2300      	movs	r3, #0
   1985c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1985e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   19860:	b92b      	cbnz	r3, 1986e <bt_att_req_send+0x52>
	list->head = node;
   19862:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   19866:	f010 fd3d 	bl	2a2e4 <att_req_send_process>

	return 0;
   1986a:	2000      	movs	r0, #0
}
   1986c:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1986e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19870:	6084      	str	r4, [r0, #8]
}
   19872:	e7f8      	b.n	19866 <bt_att_req_send+0x4a>
		return -ENOTCONN;
   19874:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19878:	e7f8      	b.n	1986c <bt_att_req_send+0x50>
   1987a:	bf00      	nop
   1987c:	0002ee61 	.word	0x0002ee61
   19880:	0002d509 	.word	0x0002d509

00019884 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   19884:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   19886:	4908      	ldr	r1, [pc, #32]	; (198a8 <db_hash_set+0x24>)
{
   19888:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1988a:	4618      	mov	r0, r3
   1988c:	2210      	movs	r2, #16
   1988e:	47a0      	blx	r4
	if (len < 0) {
   19890:	1e04      	subs	r4, r0, #0
   19892:	da06      	bge.n	198a2 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   19894:	4805      	ldr	r0, [pc, #20]	; (198ac <db_hash_set+0x28>)
   19896:	4622      	mov	r2, r4
   19898:	2145      	movs	r1, #69	; 0x45
   1989a:	f00e ff81 	bl	287a0 <z_log_minimal_printk>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   1989e:	4620      	mov	r0, r4
   198a0:	bd10      	pop	{r4, pc}
	return 0;
   198a2:	2400      	movs	r4, #0
   198a4:	e7fb      	b.n	1989e <db_hash_set+0x1a>
   198a6:	bf00      	nop
   198a8:	20001ba8 	.word	0x20001ba8
   198ac:	0002f08e 	.word	0x0002f08e

000198b0 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   198b0:	2210      	movs	r2, #16
{
   198b2:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   198b4:	4906      	ldr	r1, [pc, #24]	; (198d0 <db_hash_store+0x20>)
   198b6:	4807      	ldr	r0, [pc, #28]	; (198d4 <db_hash_store+0x24>)
   198b8:	f7fa f9c6 	bl	13c48 <settings_save_one>
	if (err) {
   198bc:	4602      	mov	r2, r0
   198be:	b128      	cbz	r0, 198cc <db_hash_store+0x1c>
}
   198c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   198c4:	4804      	ldr	r0, [pc, #16]	; (198d8 <db_hash_store+0x28>)
   198c6:	2145      	movs	r1, #69	; 0x45
   198c8:	f00e bf6a 	b.w	287a0 <z_log_minimal_printk>
}
   198cc:	bd08      	pop	{r3, pc}
   198ce:	bf00      	nop
   198d0:	20001b98 	.word	0x20001b98
   198d4:	0002f0b4 	.word	0x0002f0b4
   198d8:	0002f0bc 	.word	0x0002f0bc

000198dc <find_cf_cfg>:
{
   198dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   198de:	4d0f      	ldr	r5, [pc, #60]	; (1991c <find_cf_cfg+0x40>)
   198e0:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   198e2:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   198e4:	462e      	mov	r6, r5
		if (!conn) {
   198e6:	1c68      	adds	r0, r5, #1
   198e8:	b964      	cbnz	r4, 19904 <find_cf_cfg+0x28>
   198ea:	2207      	movs	r2, #7
   198ec:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   198ee:	9400      	str	r4, [sp, #0]
   198f0:	f8cd 4003 	str.w	r4, [sp, #3]
   198f4:	f012 fc1b 	bl	2c12e <memcmp>
   198f8:	b958      	cbnz	r0, 19912 <find_cf_cfg+0x36>
}
   198fa:	4630      	mov	r0, r6
   198fc:	b003      	add	sp, #12
   198fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19900:	2701      	movs	r7, #1
   19902:	e7ef      	b.n	198e4 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19904:	4602      	mov	r2, r0
   19906:	7829      	ldrb	r1, [r5, #0]
   19908:	4620      	mov	r0, r4
   1990a:	f010 f966 	bl	29bda <bt_conn_is_peer_addr_le>
   1990e:	2800      	cmp	r0, #0
   19910:	d1f3      	bne.n	198fa <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19912:	3510      	adds	r5, #16
   19914:	2f00      	cmp	r7, #0
   19916:	d0f3      	beq.n	19900 <find_cf_cfg+0x24>
	return NULL;
   19918:	2600      	movs	r6, #0
   1991a:	e7ee      	b.n	198fa <find_cf_cfg+0x1e>
   1991c:	20002864 	.word	0x20002864

00019920 <sc_store>:
{
   19920:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   19922:	4605      	mov	r5, r0
{
   19924:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   19926:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1992a:	4604      	mov	r4, r0
	if (cfg->id) {
   1992c:	b1ca      	cbz	r2, 19962 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1992e:	ae02      	add	r6, sp, #8
   19930:	2104      	movs	r1, #4
   19932:	4630      	mov	r0, r6
   19934:	f00e fce1 	bl	282fa <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   19938:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1993a:	4a0b      	ldr	r2, [pc, #44]	; (19968 <sc_store+0x48>)
   1993c:	462b      	mov	r3, r5
   1993e:	2124      	movs	r1, #36	; 0x24
   19940:	a803      	add	r0, sp, #12
   19942:	f7fb fd33 	bl	153ac <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   19946:	2204      	movs	r2, #4
   19948:	f104 0108 	add.w	r1, r4, #8
   1994c:	a803      	add	r0, sp, #12
   1994e:	f7fa f97b 	bl	13c48 <settings_save_one>
	if (err) {
   19952:	4602      	mov	r2, r0
   19954:	b118      	cbz	r0, 1995e <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   19956:	4805      	ldr	r0, [pc, #20]	; (1996c <sc_store+0x4c>)
   19958:	2145      	movs	r1, #69	; 0x45
   1995a:	f00e ff21 	bl	287a0 <z_log_minimal_printk>
}
   1995e:	b00c      	add	sp, #48	; 0x30
   19960:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   19962:	9200      	str	r2, [sp, #0]
   19964:	e7e9      	b.n	1993a <sc_store+0x1a>
   19966:	bf00      	nop
   19968:	0002f470 	.word	0x0002f470
   1996c:	0002f0e7 	.word	0x0002f0e7

00019970 <db_hash_commit>:

static int db_hash_commit(void)
{
   19970:	b510      	push	{r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19972:	2108      	movs	r1, #8
   19974:	4809      	ldr	r0, [pc, #36]	; (1999c <db_hash_commit+0x2c>)
   19976:	f010 ff0c 	bl	2a792 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1997a:	4809      	ldr	r0, [pc, #36]	; (199a0 <db_hash_commit+0x30>)
   1997c:	2200      	movs	r2, #0
   1997e:	2300      	movs	r3, #0
   19980:	f7fb fdbc 	bl	154fc <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   19984:	1e04      	subs	r4, r0, #0
   19986:	da06      	bge.n	19996 <db_hash_commit+0x26>
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
   19988:	4806      	ldr	r0, [pc, #24]	; (199a4 <db_hash_commit+0x34>)
   1998a:	4622      	mov	r2, r4
   1998c:	2145      	movs	r1, #69	; 0x45
   1998e:	f00e ff07 	bl	287a0 <z_log_minimal_printk>
	}

	return err;
}
   19992:	4620      	mov	r0, r4
   19994:	bd10      	pop	{r4, pc}
	if (err) {
   19996:	2400      	movs	r4, #0
	return err;
   19998:	e7fb      	b.n	19992 <db_hash_commit+0x22>
   1999a:	bf00      	nop
   1999c:	20001c98 	.word	0x20001c98
   199a0:	20001bb8 	.word	0x20001bb8
   199a4:	0002f108 	.word	0x0002f108

000199a8 <cf_write>:
{
   199a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   199ac:	4698      	mov	r8, r3
   199ae:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   199b2:	2b01      	cmp	r3, #1
{
   199b4:	4606      	mov	r6, r0
   199b6:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   199b8:	d837      	bhi.n	19a2a <cf_write+0x82>
	if (offset + len > sizeof(cfg->data)) {
   199ba:	4443      	add	r3, r8
   199bc:	2b01      	cmp	r3, #1
   199be:	4645      	mov	r5, r8
   199c0:	dc36      	bgt.n	19a30 <cf_write+0x88>
	cfg = find_cf_cfg(conn);
   199c2:	f7ff ff8b 	bl	198dc <find_cf_cfg>
	if (!cfg) {
   199c6:	4604      	mov	r4, r0
   199c8:	b918      	cbnz	r0, 199d2 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   199ca:	f7ff ff87 	bl	198dc <find_cf_cfg>
	if (!cfg) {
   199ce:	4604      	mov	r4, r0
   199d0:	b180      	cbz	r0, 199f4 <cf_write+0x4c>
{
   199d2:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   199d4:	f1b8 0f00 	cmp.w	r8, #0
   199d8:	d115      	bne.n	19a06 <cf_write+0x5e>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   199da:	f106 0190 	add.w	r1, r6, #144	; 0x90
   199de:	1c60      	adds	r0, r4, #1
   199e0:	f010 fef5 	bl	2a7ce <bt_addr_le_copy>
	cfg->id = conn->id;
   199e4:	4620      	mov	r0, r4
   199e6:	7a33      	ldrb	r3, [r6, #8]
   199e8:	f800 3b0c 	strb.w	r3, [r0], #12
   199ec:	2101      	movs	r1, #1
   199ee:	f010 fed0 	bl	2a792 <atomic_or>
}
   199f2:	e005      	b.n	19a00 <cf_write+0x58>
		BT_WARN("No space to store Client Supported Features");
   199f4:	4811      	ldr	r0, [pc, #68]	; (19a3c <cf_write+0x94>)
   199f6:	2157      	movs	r1, #87	; 0x57
   199f8:	f00e fed2 	bl	287a0 <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   199fc:	f06f 0510 	mvn.w	r5, #16
}
   19a00:	4628      	mov	r0, r5
   19a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19a06:	7a20      	ldrb	r0, [r4, #8]
   19a08:	fa20 f301 	lsr.w	r3, r0, r1
   19a0c:	07da      	lsls	r2, r3, #31
   19a0e:	d503      	bpl.n	19a18 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   19a10:	783b      	ldrb	r3, [r7, #0]
   19a12:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19a14:	07db      	lsls	r3, r3, #31
   19a16:	d50e      	bpl.n	19a36 <cf_write+0x8e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19a18:	3101      	adds	r1, #1
   19a1a:	2903      	cmp	r1, #3
   19a1c:	d1da      	bne.n	199d4 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19a1e:	783b      	ldrb	r3, [r7, #0]
   19a20:	f003 0307 	and.w	r3, r3, #7
   19a24:	4318      	orrs	r0, r3
   19a26:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   19a28:	e7d7      	b.n	199da <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19a2a:	f06f 0506 	mvn.w	r5, #6
   19a2e:	e7e7      	b.n	19a00 <cf_write+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19a30:	f06f 050c 	mvn.w	r5, #12
   19a34:	e7e4      	b.n	19a00 <cf_write+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   19a36:	f06f 0512 	mvn.w	r5, #18
   19a3a:	e7e1      	b.n	19a00 <cf_write+0x58>
   19a3c:	0002f141 	.word	0x0002f141

00019a40 <sc_commit>:
{
   19a40:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19a42:	4809      	ldr	r0, [pc, #36]	; (19a68 <sc_commit+0x28>)
   19a44:	f06f 0102 	mvn.w	r1, #2
   19a48:	f010 feb2 	bl	2a7b0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19a4c:	4806      	ldr	r0, [pc, #24]	; (19a68 <sc_commit+0x28>)
   19a4e:	f010 fe9a 	bl	2a786 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19a52:	07c3      	lsls	r3, r0, #31
   19a54:	d505      	bpl.n	19a62 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   19a56:	4805      	ldr	r0, [pc, #20]	; (19a6c <sc_commit+0x2c>)
   19a58:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19a5c:	2300      	movs	r3, #0
   19a5e:	f009 fac7 	bl	22ff0 <k_work_reschedule>
}
   19a62:	2000      	movs	r0, #0
   19a64:	bd08      	pop	{r3, pc}
   19a66:	bf00      	nop
   19a68:	20001c98 	.word	0x20001c98
   19a6c:	20001c68 	.word	0x20001c68

00019a70 <find_cf_cfg_by_addr>:
{
   19a70:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   19a72:	4c0e      	ldr	r4, [pc, #56]	; (19aac <find_cf_cfg_by_addr+0x3c>)
   19a74:	7823      	ldrb	r3, [r4, #0]
   19a76:	4283      	cmp	r3, r0
{
   19a78:	4606      	mov	r6, r0
   19a7a:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   19a7c:	d00a      	beq.n	19a94 <find_cf_cfg_by_addr+0x24>
   19a7e:	7c23      	ldrb	r3, [r4, #16]
   19a80:	42b3      	cmp	r3, r6
   19a82:	d111      	bne.n	19aa8 <find_cf_cfg_by_addr+0x38>
   19a84:	490a      	ldr	r1, [pc, #40]	; (19ab0 <find_cf_cfg_by_addr+0x40>)
   19a86:	2207      	movs	r2, #7
   19a88:	4628      	mov	r0, r5
   19a8a:	f012 fb50 	bl	2c12e <memcmp>
   19a8e:	b958      	cbnz	r0, 19aa8 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   19a90:	2001      	movs	r0, #1
   19a92:	e006      	b.n	19aa2 <find_cf_cfg_by_addr+0x32>
   19a94:	2207      	movs	r2, #7
   19a96:	1c61      	adds	r1, r4, #1
   19a98:	4628      	mov	r0, r5
   19a9a:	f012 fb48 	bl	2c12e <memcmp>
			if (id == cf_cfg[i].id &&
   19a9e:	2800      	cmp	r0, #0
   19aa0:	d1ed      	bne.n	19a7e <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   19aa2:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   19aa6:	e000      	b.n	19aaa <find_cf_cfg_by_addr+0x3a>
	return NULL;
   19aa8:	2000      	movs	r0, #0
}
   19aaa:	bd70      	pop	{r4, r5, r6, pc}
   19aac:	20002864 	.word	0x20002864
   19ab0:	20002875 	.word	0x20002875

00019ab4 <cf_set>:
{
   19ab4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19ab8:	4688      	mov	r8, r1
   19aba:	4616      	mov	r6, r2
   19abc:	461f      	mov	r7, r3
	if (!name) {
   19abe:	4605      	mov	r5, r0
   19ac0:	b948      	cbnz	r0, 19ad6 <cf_set+0x22>
		BT_ERR("Insufficient number of arguments");
   19ac2:	4828      	ldr	r0, [pc, #160]	; (19b64 <cf_set+0xb0>)
   19ac4:	2145      	movs	r1, #69	; 0x45
   19ac6:	f00e fe6b 	bl	287a0 <z_log_minimal_printk>
		return -EINVAL;
   19aca:	f06f 0415 	mvn.w	r4, #21
}
   19ace:	4620      	mov	r0, r4
   19ad0:	b004      	add	sp, #16
   19ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   19ad6:	a902      	add	r1, sp, #8
   19ad8:	f00f fc50 	bl	2937c <bt_settings_decode_key>
	if (err) {
   19adc:	4604      	mov	r4, r0
   19ade:	b128      	cbz	r0, 19aec <cf_set+0x38>
		BT_ERR("Unable to decode address %s", name);
   19ae0:	4821      	ldr	r0, [pc, #132]	; (19b68 <cf_set+0xb4>)
   19ae2:	462a      	mov	r2, r5
   19ae4:	2145      	movs	r1, #69	; 0x45
   19ae6:	f00e fe5b 	bl	287a0 <z_log_minimal_printk>
   19aea:	e7ee      	b.n	19aca <cf_set+0x16>
	settings_name_next(name, &next);
   19aec:	a901      	add	r1, sp, #4
   19aee:	4628      	mov	r0, r5
   19af0:	f00f f8f7 	bl	28ce2 <settings_name_next>
	if (!next) {
   19af4:	9801      	ldr	r0, [sp, #4]
   19af6:	b140      	cbz	r0, 19b0a <cf_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   19af8:	220a      	movs	r2, #10
   19afa:	4621      	mov	r1, r4
   19afc:	f00b ff1e 	bl	2593c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19b00:	4602      	mov	r2, r0
   19b02:	b110      	cbz	r0, 19b0a <cf_set+0x56>
			BT_ERR("Invalid local identity %lu", next_id);
   19b04:	4819      	ldr	r0, [pc, #100]	; (19b6c <cf_set+0xb8>)
   19b06:	2145      	movs	r1, #69	; 0x45
   19b08:	e7ed      	b.n	19ae6 <cf_set+0x32>
	cfg = find_cf_cfg_by_addr(id, &addr);
   19b0a:	a902      	add	r1, sp, #8
   19b0c:	2000      	movs	r0, #0
   19b0e:	f7ff ffaf 	bl	19a70 <find_cf_cfg_by_addr>
	if (!cfg) {
   19b12:	4605      	mov	r5, r0
   19b14:	b980      	cbnz	r0, 19b38 <cf_set+0x84>
		cfg = find_cf_cfg(NULL);
   19b16:	f7ff fee1 	bl	198dc <find_cf_cfg>
		if (!cfg) {
   19b1a:	4605      	mov	r5, r0
   19b1c:	b930      	cbnz	r0, 19b2c <cf_set+0x78>
			BT_ERR("Unable to restore CF: no cfg left");
   19b1e:	4814      	ldr	r0, [pc, #80]	; (19b70 <cf_set+0xbc>)
   19b20:	2145      	movs	r1, #69	; 0x45
   19b22:	f00e fe3d 	bl	287a0 <z_log_minimal_printk>
			return -ENOMEM;
   19b26:	f06f 040b 	mvn.w	r4, #11
   19b2a:	e7d0      	b.n	19ace <cf_set+0x1a>
		cfg->id = id;
   19b2c:	2300      	movs	r3, #0
   19b2e:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   19b32:	a902      	add	r1, sp, #8
   19b34:	f010 fe4b 	bl	2a7ce <bt_addr_le_copy>
	if (len_rd) {
   19b38:	f1b8 0f00 	cmp.w	r8, #0
   19b3c:	d00d      	beq.n	19b5a <cf_set+0xa6>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   19b3e:	f105 0108 	add.w	r1, r5, #8
   19b42:	2201      	movs	r2, #1
   19b44:	4638      	mov	r0, r7
   19b46:	47b0      	blx	r6
		if (len < 0) {
   19b48:	1e05      	subs	r5, r0, #0
   19b4a:	dac0      	bge.n	19ace <cf_set+0x1a>
			BT_ERR("Failed to decode value (err %zd)", len);
   19b4c:	4809      	ldr	r0, [pc, #36]	; (19b74 <cf_set+0xc0>)
   19b4e:	462a      	mov	r2, r5
   19b50:	2145      	movs	r1, #69	; 0x45
   19b52:	f00e fe25 	bl	287a0 <z_log_minimal_printk>
			return len;
   19b56:	462c      	mov	r4, r5
   19b58:	e7b9      	b.n	19ace <cf_set+0x1a>
		clear_cf_cfg(cfg);
   19b5a:	4628      	mov	r0, r5
   19b5c:	f010 fedc 	bl	2a918 <clear_cf_cfg>
   19b60:	e7b5      	b.n	19ace <cf_set+0x1a>
   19b62:	bf00      	nop
   19b64:	0002df45 	.word	0x0002df45
   19b68:	0002f172 	.word	0x0002f172
   19b6c:	0002f193 	.word	0x0002f193
   19b70:	0002f1b3 	.word	0x0002f1b3
   19b74:	0002f08e 	.word	0x0002f08e

00019b78 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   19b78:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   19b7a:	6881      	ldr	r1, [r0, #8]
{
   19b7c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19b7e:	4a07      	ldr	r2, [pc, #28]	; (19b9c <remove_peer_from_attr+0x24>)
   19b80:	4291      	cmp	r1, r2
   19b82:	d109      	bne.n	19b98 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   19b84:	791a      	ldrb	r2, [r3, #4]
   19b86:	6819      	ldr	r1, [r3, #0]
   19b88:	68c0      	ldr	r0, [r0, #12]
   19b8a:	f010 fede 	bl	2a94a <ccc_find_cfg>
	if (cfg) {
   19b8e:	b118      	cbz	r0, 19b98 <remove_peer_from_attr+0x20>
   19b90:	2300      	movs	r3, #0
   19b92:	6003      	str	r3, [r0, #0]
   19b94:	6043      	str	r3, [r0, #4]
   19b96:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   19b98:	2001      	movs	r0, #1
   19b9a:	bd08      	pop	{r3, pc}
   19b9c:	00019c61 	.word	0x00019c61

00019ba0 <ccc_load>:
{
   19ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19ba2:	4b20      	ldr	r3, [pc, #128]	; (19c24 <ccc_load+0x84>)
{
   19ba4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19ba6:	6882      	ldr	r2, [r0, #8]
   19ba8:	429a      	cmp	r2, r3
   19baa:	d002      	beq.n	19bb2 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   19bac:	2001      	movs	r0, #1
}
   19bae:	b003      	add	sp, #12
   19bb0:	bd30      	pop	{r4, r5, pc}
	if (!load->entry) {
   19bb2:	68a3      	ldr	r3, [r4, #8]
   19bb4:	68c5      	ldr	r5, [r0, #12]
   19bb6:	b94b      	cbnz	r3, 19bcc <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   19bb8:	7922      	ldrb	r2, [r4, #4]
   19bba:	6821      	ldr	r1, [r4, #0]
   19bbc:	4628      	mov	r0, r5
   19bbe:	f010 fec4 	bl	2a94a <ccc_find_cfg>
	if (!cfg) {
   19bc2:	2800      	cmp	r0, #0
   19bc4:	d0f2      	beq.n	19bac <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   19bc6:	f010 fe09 	bl	2a7dc <clear_ccc_cfg>
   19bca:	e7ef      	b.n	19bac <ccc_load+0xc>
	} else if (!load->count) {
   19bcc:	68e0      	ldr	r0, [r4, #12]
   19bce:	2800      	cmp	r0, #0
   19bd0:	d0ed      	beq.n	19bae <ccc_load+0xe>
	if (load->entry->handle != handle) {
   19bd2:	881b      	ldrh	r3, [r3, #0]
   19bd4:	4299      	cmp	r1, r3
   19bd6:	d00a      	beq.n	19bee <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   19bd8:	d9e8      	bls.n	19bac <ccc_load+0xc>
	load->count--;
   19bda:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   19bdc:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   19bde:	3801      	subs	r0, #1
	load->entry++;
   19be0:	3304      	adds	r3, #4
	load->count--;
   19be2:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19be4:	3800      	subs	r0, #0
	load->entry++;
   19be6:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19be8:	bf18      	it	ne
   19bea:	2001      	movne	r0, #1
   19bec:	e7df      	b.n	19bae <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   19bee:	7922      	ldrb	r2, [r4, #4]
   19bf0:	6821      	ldr	r1, [r4, #0]
   19bf2:	4628      	mov	r0, r5
   19bf4:	f010 fea9 	bl	2a94a <ccc_find_cfg>
	if (!cfg) {
   19bf8:	4602      	mov	r2, r0
   19bfa:	b978      	cbnz	r0, 19c1c <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   19bfc:	9000      	str	r0, [sp, #0]
   19bfe:	4669      	mov	r1, sp
   19c00:	f8cd 0003 	str.w	r0, [sp, #3]
   19c04:	4628      	mov	r0, r5
   19c06:	f010 fea0 	bl	2a94a <ccc_find_cfg>
		if (!cfg) {
   19c0a:	4602      	mov	r2, r0
   19c0c:	2800      	cmp	r0, #0
   19c0e:	d0e4      	beq.n	19bda <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   19c10:	6821      	ldr	r1, [r4, #0]
   19c12:	3001      	adds	r0, #1
   19c14:	f010 fddb 	bl	2a7ce <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   19c18:	7923      	ldrb	r3, [r4, #4]
   19c1a:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
   19c1c:	68a3      	ldr	r3, [r4, #8]
   19c1e:	885b      	ldrh	r3, [r3, #2]
   19c20:	8113      	strh	r3, [r2, #8]
   19c22:	e7da      	b.n	19bda <ccc_load+0x3a>
   19c24:	00019c61 	.word	0x00019c61

00019c28 <ccc_save>:
{
   19c28:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19c2a:	4b0c      	ldr	r3, [pc, #48]	; (19c5c <ccc_save+0x34>)
{
   19c2c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19c2e:	6882      	ldr	r2, [r0, #8]
   19c30:	429a      	cmp	r2, r3
{
   19c32:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   19c34:	d10f      	bne.n	19c56 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   19c36:	7922      	ldrb	r2, [r4, #4]
   19c38:	6821      	ldr	r1, [r4, #0]
   19c3a:	68c0      	ldr	r0, [r0, #12]
   19c3c:	f010 fe85 	bl	2a94a <ccc_find_cfg>
	if (!cfg) {
   19c40:	b148      	cbz	r0, 19c56 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   19c42:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   19c46:	8901      	ldrh	r1, [r0, #8]
   19c48:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   19c4c:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   19c4e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   19c50:	8151      	strh	r1, [r2, #10]
	save->count++;
   19c52:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   19c56:	2001      	movs	r0, #1
   19c58:	bd38      	pop	{r3, r4, r5, pc}
   19c5a:	bf00      	nop
   19c5c:	00019c61 	.word	0x00019c61

00019c60 <bt_gatt_attr_write_ccc>:
{
   19c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c64:	4698      	mov	r8, r3
   19c66:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   19c6a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   19c6e:	4606      	mov	r6, r0
   19c70:	4689      	mov	r9, r1
	if (offset) {
   19c72:	2b00      	cmp	r3, #0
   19c74:	d164      	bne.n	19d40 <bt_gatt_attr_write_ccc+0xe0>
	if (!len || len > sizeof(uint16_t)) {
   19c76:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   19c7a:	2b01      	cmp	r3, #1
   19c7c:	d863      	bhi.n	19d46 <bt_gatt_attr_write_ccc+0xe6>
		value = *(uint8_t *)buf;
   19c7e:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   19c80:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   19c84:	4651      	mov	r1, sl
   19c86:	bf14      	ite	ne
   19c88:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   19c8a:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   19c8c:	f010 fe6c 	bl	2a968 <find_ccc_cfg>
	if (!cfg) {
   19c90:	4605      	mov	r5, r0
   19c92:	b9b0      	cbnz	r0, 19cc2 <bt_gatt_attr_write_ccc+0x62>
		if (!value) {
   19c94:	b917      	cbnz	r7, 19c9c <bt_gatt_attr_write_ccc+0x3c>
			return len;
   19c96:	4640      	mov	r0, r8
}
   19c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   19c9c:	4651      	mov	r1, sl
   19c9e:	f010 fe63 	bl	2a968 <find_ccc_cfg>
		if (!cfg) {
   19ca2:	4605      	mov	r5, r0
   19ca4:	b930      	cbnz	r0, 19cb4 <bt_gatt_attr_write_ccc+0x54>
			BT_WARN("No space to store CCC cfg");
   19ca6:	4829      	ldr	r0, [pc, #164]	; (19d4c <bt_gatt_attr_write_ccc+0xec>)
   19ca8:	2157      	movs	r1, #87	; 0x57
   19caa:	f00e fd79 	bl	287a0 <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19cae:	f06f 0010 	mvn.w	r0, #16
   19cb2:	e7f1      	b.n	19c98 <bt_gatt_attr_write_ccc+0x38>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19cb4:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19cb8:	3001      	adds	r0, #1
   19cba:	f010 fd88 	bl	2a7ce <bt_addr_le_copy>
		cfg->id = conn->id;
   19cbe:	7a33      	ldrb	r3, [r6, #8]
   19cc0:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   19cc2:	f8da 3010 	ldr.w	r3, [sl, #16]
   19cc6:	bb7b      	cbnz	r3, 19d28 <bt_gatt_attr_write_ccc+0xc8>
	if (cfg->value != ccc->value) {
   19cc8:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   19ccc:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   19cce:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   19cd0:	42bb      	cmp	r3, r7
   19cd2:	d003      	beq.n	19cdc <bt_gatt_attr_write_ccc+0x7c>
		gatt_ccc_changed(attr, ccc);
   19cd4:	4651      	mov	r1, sl
   19cd6:	4648      	mov	r0, r9
   19cd8:	f010 fcdd 	bl	2a696 <gatt_ccc_changed>
	if (value_changed) {
   19cdc:	42bc      	cmp	r4, r7
   19cde:	d01d      	beq.n	19d1c <bt_gatt_attr_write_ccc+0xbc>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   19ce0:	4630      	mov	r0, r6
   19ce2:	f7fe f893 	bl	17e0c <bt_conn_index>
   19ce6:	4c1a      	ldr	r4, [pc, #104]	; (19d50 <bt_gatt_attr_write_ccc+0xf0>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   19ce8:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   19cec:	429e      	cmp	r6, r3
   19cee:	d015      	beq.n	19d1c <bt_gatt_attr_write_ccc+0xbc>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19cf0:	7a30      	ldrb	r0, [r6, #8]
   19cf2:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19cf6:	f00f fcde 	bl	296b6 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   19cfa:	b178      	cbz	r0, 19d1c <bt_gatt_attr_write_ccc+0xbc>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   19cfc:	4630      	mov	r0, r6
   19cfe:	f7fe f885 	bl	17e0c <bt_conn_index>
   19d02:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   19d04:	4630      	mov	r0, r6
   19d06:	f00f fecc 	bl	29aa2 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   19d0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   19d0e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   19d12:	2300      	movs	r3, #0
   19d14:	f104 0008 	add.w	r0, r4, #8
   19d18:	f009 f96a 	bl	22ff0 <k_work_reschedule>
	if (!value) {
   19d1c:	2f00      	cmp	r7, #0
   19d1e:	d1ba      	bne.n	19c96 <bt_gatt_attr_write_ccc+0x36>
		clear_ccc_cfg(cfg);
   19d20:	4628      	mov	r0, r5
   19d22:	f010 fd5b 	bl	2a7dc <clear_ccc_cfg>
   19d26:	e7b6      	b.n	19c96 <bt_gatt_attr_write_ccc+0x36>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   19d28:	463a      	mov	r2, r7
   19d2a:	4649      	mov	r1, r9
   19d2c:	4630      	mov	r0, r6
   19d2e:	4798      	blx	r3
		if (write < 0) {
   19d30:	2800      	cmp	r0, #0
   19d32:	dbb1      	blt.n	19c98 <bt_gatt_attr_write_ccc+0x38>
		if (write != sizeof(value) && write != 1) {
   19d34:	1e44      	subs	r4, r0, #1
   19d36:	2c01      	cmp	r4, #1
   19d38:	d9c6      	bls.n	19cc8 <bt_gatt_attr_write_ccc+0x68>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   19d3a:	f06f 000d 	mvn.w	r0, #13
   19d3e:	e7ab      	b.n	19c98 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19d40:	f06f 0006 	mvn.w	r0, #6
   19d44:	e7a8      	b.n	19c98 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19d46:	f06f 000c 	mvn.w	r0, #12
   19d4a:	e7a5      	b.n	19c98 <bt_gatt_attr_write_ccc+0x38>
   19d4c:	0002f1da 	.word	0x0002f1da
   19d50:	20001c10 	.word	0x20001c10

00019d54 <find_sc_cfg>:
{
   19d54:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   19d56:	4c0e      	ldr	r4, [pc, #56]	; (19d90 <find_sc_cfg+0x3c>)
   19d58:	7823      	ldrb	r3, [r4, #0]
   19d5a:	4283      	cmp	r3, r0
{
   19d5c:	4605      	mov	r5, r0
   19d5e:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   19d60:	d00a      	beq.n	19d78 <find_sc_cfg+0x24>
   19d62:	7b23      	ldrb	r3, [r4, #12]
   19d64:	42ab      	cmp	r3, r5
   19d66:	d111      	bne.n	19d8c <find_sc_cfg+0x38>
   19d68:	480a      	ldr	r0, [pc, #40]	; (19d94 <find_sc_cfg+0x40>)
   19d6a:	2207      	movs	r2, #7
   19d6c:	4631      	mov	r1, r6
   19d6e:	f012 f9de 	bl	2c12e <memcmp>
   19d72:	b958      	cbnz	r0, 19d8c <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19d74:	2001      	movs	r0, #1
   19d76:	e005      	b.n	19d84 <find_sc_cfg+0x30>
   19d78:	2207      	movs	r2, #7
   19d7a:	1c60      	adds	r0, r4, #1
   19d7c:	f012 f9d7 	bl	2c12e <memcmp>
		if (id == sc_cfg[i].id &&
   19d80:	2800      	cmp	r0, #0
   19d82:	d1ee      	bne.n	19d62 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   19d84:	230c      	movs	r3, #12
   19d86:	fb03 4000 	mla	r0, r3, r0, r4
   19d8a:	e000      	b.n	19d8e <find_sc_cfg+0x3a>
	return NULL;
   19d8c:	2000      	movs	r0, #0
}
   19d8e:	bd70      	pop	{r4, r5, r6, pc}
   19d90:	200036d4 	.word	0x200036d4
   19d94:	200036e1 	.word	0x200036e1

00019d98 <sc_save>:
{
   19d98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19d9c:	4680      	mov	r8, r0
   19d9e:	460f      	mov	r7, r1
   19da0:	4616      	mov	r6, r2
   19da2:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   19da4:	f7ff ffd6 	bl	19d54 <find_sc_cfg>
	if (!cfg) {
   19da8:	4604      	mov	r4, r0
   19daa:	b998      	cbnz	r0, 19dd4 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19dac:	4669      	mov	r1, sp
   19dae:	9000      	str	r0, [sp, #0]
   19db0:	f8cd 0003 	str.w	r0, [sp, #3]
   19db4:	f7ff ffce 	bl	19d54 <find_sc_cfg>
		if (!cfg) {
   19db8:	4604      	mov	r4, r0
   19dba:	b930      	cbnz	r0, 19dca <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   19dbc:	4813      	ldr	r0, [pc, #76]	; (19e0c <sc_save+0x74>)
   19dbe:	2145      	movs	r1, #69	; 0x45
   19dc0:	f00e fcee 	bl	287a0 <z_log_minimal_printk>
}
   19dc4:	b002      	add	sp, #8
   19dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   19dca:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   19dce:	4639      	mov	r1, r7
   19dd0:	f010 fcfd 	bl	2a7ce <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   19dd4:	8922      	ldrh	r2, [r4, #8]
   19dd6:	8963      	ldrh	r3, [r4, #10]
   19dd8:	b97a      	cbnz	r2, 19dfa <sc_save+0x62>
   19dda:	b983      	cbnz	r3, 19dfe <sc_save+0x66>
		cfg->data.start = start;
   19ddc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   19dde:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   19de0:	4621      	mov	r1, r4
   19de2:	f811 0b01 	ldrb.w	r0, [r1], #1
   19de6:	f00f fc66 	bl	296b6 <bt_addr_le_is_bonded>
   19dea:	2800      	cmp	r0, #0
   19dec:	d0ea      	beq.n	19dc4 <sc_save+0x2c>
		sc_store(cfg);
   19dee:	4620      	mov	r0, r4
}
   19df0:	b002      	add	sp, #8
   19df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   19df6:	f7ff bd93 	b.w	19920 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   19dfa:	4296      	cmp	r6, r2
   19dfc:	d302      	bcc.n	19e04 <sc_save+0x6c>
   19dfe:	429d      	cmp	r5, r3
   19e00:	d8ed      	bhi.n	19dde <sc_save+0x46>
   19e02:	e7df      	b.n	19dc4 <sc_save+0x2c>
	if (*end < new_end) {
   19e04:	429d      	cmp	r5, r3
		*start = new_start;
   19e06:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   19e08:	d9ea      	bls.n	19de0 <sc_save+0x48>
   19e0a:	e7e8      	b.n	19dde <sc_save+0x46>
   19e0c:	0002f1f9 	.word	0x0002f1f9

00019e10 <bt_gatt_clear_sc>:
{
   19e10:	b570      	push	{r4, r5, r6, lr}
   19e12:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   19e14:	f7ff ff9e 	bl	19d54 <find_sc_cfg>
	if (!cfg) {
   19e18:	4604      	mov	r4, r0
   19e1a:	b1d8      	cbz	r0, 19e54 <bt_gatt_clear_sc+0x44>
		if (cfg->id) {
   19e1c:	4605      	mov	r5, r0
   19e1e:	f815 2b01 	ldrb.w	r2, [r5], #1
   19e22:	b1d2      	cbz	r2, 19e5a <bt_gatt_clear_sc+0x4a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   19e24:	ae02      	add	r6, sp, #8
   19e26:	2104      	movs	r1, #4
   19e28:	4630      	mov	r0, r6
   19e2a:	f00e fa66 	bl	282fa <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   19e2e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   19e30:	4a0b      	ldr	r2, [pc, #44]	; (19e60 <bt_gatt_clear_sc+0x50>)
   19e32:	462b      	mov	r3, r5
   19e34:	2124      	movs	r1, #36	; 0x24
   19e36:	a803      	add	r0, sp, #12
   19e38:	f7fb fab8 	bl	153ac <bt_settings_encode_key>
		err = settings_delete(key);
   19e3c:	a803      	add	r0, sp, #12
   19e3e:	f00e ff29 	bl	28c94 <settings_delete>
		if (err) {
   19e42:	4602      	mov	r2, r0
   19e44:	b118      	cbz	r0, 19e4e <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   19e46:	4807      	ldr	r0, [pc, #28]	; (19e64 <bt_gatt_clear_sc+0x54>)
   19e48:	2145      	movs	r1, #69	; 0x45
   19e4a:	f00e fca9 	bl	287a0 <z_log_minimal_printk>
	clear_sc_cfg(cfg);
   19e4e:	4620      	mov	r0, r4
   19e50:	f010 fcd2 	bl	2a7f8 <clear_sc_cfg>
}
   19e54:	2000      	movs	r0, #0
   19e56:	b00c      	add	sp, #48	; 0x30
   19e58:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   19e5a:	9200      	str	r2, [sp, #0]
   19e5c:	e7e8      	b.n	19e30 <bt_gatt_clear_sc+0x20>
   19e5e:	bf00      	nop
   19e60:	0002f470 	.word	0x0002f470
   19e64:	0002f21d 	.word	0x0002f21d

00019e68 <sc_clear>:
{
   19e68:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19e6a:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   19e6e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19e70:	4629      	mov	r1, r5
   19e72:	7a00      	ldrb	r0, [r0, #8]
   19e74:	f00f fc1f 	bl	296b6 <bt_addr_le_is_bonded>
   19e78:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   19e7a:	4629      	mov	r1, r5
   19e7c:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19e7e:	b14b      	cbz	r3, 19e94 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   19e80:	f7ff ffc6 	bl	19e10 <bt_gatt_clear_sc>
		if (err) {
   19e84:	4602      	mov	r2, r0
   19e86:	b160      	cbz	r0, 19ea2 <sc_clear+0x3a>
}
   19e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			BT_ERR("Failed to clear SC %d", err);
   19e8c:	4805      	ldr	r0, [pc, #20]	; (19ea4 <sc_clear+0x3c>)
   19e8e:	2145      	movs	r1, #69	; 0x45
   19e90:	f00e bc86 	b.w	287a0 <z_log_minimal_printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19e94:	f7ff ff5e 	bl	19d54 <find_sc_cfg>
		if (cfg) {
   19e98:	b118      	cbz	r0, 19ea2 <sc_clear+0x3a>
}
   19e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   19e9e:	f010 bcab 	b.w	2a7f8 <clear_sc_cfg>
}
   19ea2:	bd38      	pop	{r3, r4, r5, pc}
   19ea4:	0002f23f 	.word	0x0002f23f

00019ea8 <disconnected_cb>:
{
   19ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19eac:	4b1f      	ldr	r3, [pc, #124]	; (19f2c <disconnected_cb+0x84>)
{
   19eae:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19eb0:	6882      	ldr	r2, [r0, #8]
   19eb2:	429a      	cmp	r2, r3
{
   19eb4:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19eb6:	d102      	bne.n	19ebe <disconnected_cb+0x16>
	ccc = attr->user_data;
   19eb8:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   19eba:	8963      	ldrh	r3, [r4, #10]
   19ebc:	b9c3      	cbnz	r3, 19ef0 <disconnected_cb+0x48>
}
   19ebe:	2001      	movs	r0, #1
   19ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19ec4:	f105 0890 	add.w	r8, r5, #144	; 0x90
   19ec8:	7a28      	ldrb	r0, [r5, #8]
   19eca:	4641      	mov	r1, r8
   19ecc:	f00f fbf3 	bl	296b6 <bt_addr_le_is_bonded>
   19ed0:	b948      	cbnz	r0, 19ee6 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   19ed2:	4b17      	ldr	r3, [pc, #92]	; (19f30 <disconnected_cb+0x88>)
   19ed4:	429c      	cmp	r4, r3
   19ed6:	d102      	bne.n	19ede <disconnected_cb+0x36>
					sc_clear(conn);
   19ed8:	4628      	mov	r0, r5
   19eda:	f7ff ffc5 	bl	19e68 <sc_clear>
				clear_ccc_cfg(cfg);
   19ede:	4620      	mov	r0, r4
   19ee0:	f010 fc7c 	bl	2a7dc <clear_ccc_cfg>
	if (!value_used) {
   19ee4:	e019      	b.n	19f1a <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19ee6:	4641      	mov	r1, r8
   19ee8:	4638      	mov	r0, r7
   19eea:	f010 fc70 	bl	2a7ce <bt_addr_le_copy>
	if (!value_used) {
   19eee:	e014      	b.n	19f1a <disconnected_cb+0x72>
		if (!cfg->value) {
   19ef0:	8923      	ldrh	r3, [r4, #8]
   19ef2:	b193      	cbz	r3, 19f1a <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19ef4:	4627      	mov	r7, r4
   19ef6:	4628      	mov	r0, r5
   19ef8:	f817 1b01 	ldrb.w	r1, [r7], #1
   19efc:	463a      	mov	r2, r7
   19efe:	f00f fe6c 	bl	29bda <bt_conn_is_peer_addr_le>
   19f02:	2800      	cmp	r0, #0
   19f04:	d1de      	bne.n	19ec4 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19f06:	7820      	ldrb	r0, [r4, #0]
   19f08:	4639      	mov	r1, r7
   19f0a:	f7fe f90b 	bl	18124 <bt_conn_lookup_addr_le>
			if (tmp) {
   19f0e:	b120      	cbz	r0, 19f1a <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   19f10:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   19f12:	f7fd fe6b 	bl	17bec <bt_conn_unref>
	if (!value_used) {
   19f16:	2d07      	cmp	r5, #7
   19f18:	d0d1      	beq.n	19ebe <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   19f1a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   19f1c:	2100      	movs	r1, #0
   19f1e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   19f20:	2b00      	cmp	r3, #0
   19f22:	d0cc      	beq.n	19ebe <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   19f24:	4630      	mov	r0, r6
   19f26:	4798      	blx	r3
   19f28:	e7c9      	b.n	19ebe <disconnected_cb+0x16>
   19f2a:	bf00      	nop
   19f2c:	00019c61 	.word	0x00019c61
   19f30:	200006bc 	.word	0x200006bc

00019f34 <sc_set>:
{
   19f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f38:	460e      	mov	r6, r1
   19f3a:	b086      	sub	sp, #24
   19f3c:	4617      	mov	r7, r2
   19f3e:	4698      	mov	r8, r3
	if (!name) {
   19f40:	4604      	mov	r4, r0
   19f42:	b948      	cbnz	r0, 19f58 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   19f44:	482a      	ldr	r0, [pc, #168]	; (19ff0 <sc_set+0xbc>)
   19f46:	2145      	movs	r1, #69	; 0x45
   19f48:	f00e fc2a 	bl	287a0 <z_log_minimal_printk>
		return -EINVAL;
   19f4c:	f06f 0515 	mvn.w	r5, #21
}
   19f50:	4628      	mov	r0, r5
   19f52:	b006      	add	sp, #24
   19f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   19f58:	a902      	add	r1, sp, #8
   19f5a:	f00f fa0f 	bl	2937c <bt_settings_decode_key>
	if (err) {
   19f5e:	4605      	mov	r5, r0
   19f60:	b128      	cbz	r0, 19f6e <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", name);
   19f62:	4824      	ldr	r0, [pc, #144]	; (19ff4 <sc_set+0xc0>)
   19f64:	4622      	mov	r2, r4
   19f66:	2145      	movs	r1, #69	; 0x45
   19f68:	f00e fc1a 	bl	287a0 <z_log_minimal_printk>
   19f6c:	e7ee      	b.n	19f4c <sc_set+0x18>
	settings_name_next(name, &next);
   19f6e:	a901      	add	r1, sp, #4
   19f70:	4620      	mov	r0, r4
   19f72:	f00e feb6 	bl	28ce2 <settings_name_next>
	if (!next) {
   19f76:	9801      	ldr	r0, [sp, #4]
   19f78:	b140      	cbz	r0, 19f8c <sc_set+0x58>
		unsigned long next_id = strtoul(next, NULL, 10);
   19f7a:	220a      	movs	r2, #10
   19f7c:	4629      	mov	r1, r5
   19f7e:	f00b fcdd 	bl	2593c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19f82:	4602      	mov	r2, r0
   19f84:	b110      	cbz	r0, 19f8c <sc_set+0x58>
			BT_ERR("Invalid local identity %lu", next_id);
   19f86:	481c      	ldr	r0, [pc, #112]	; (19ff8 <sc_set+0xc4>)
   19f88:	2145      	movs	r1, #69	; 0x45
   19f8a:	e7ed      	b.n	19f68 <sc_set+0x34>
	cfg = find_sc_cfg(id, &addr);
   19f8c:	a902      	add	r1, sp, #8
   19f8e:	2000      	movs	r0, #0
   19f90:	f7ff fee0 	bl	19d54 <find_sc_cfg>
	if (!cfg && len_rd) {
   19f94:	4604      	mov	r4, r0
   19f96:	bb20      	cbnz	r0, 19fe2 <sc_set+0xae>
   19f98:	2e00      	cmp	r6, #0
   19f9a:	d0d9      	beq.n	19f50 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19f9c:	a904      	add	r1, sp, #16
   19f9e:	9004      	str	r0, [sp, #16]
   19fa0:	4606      	mov	r6, r0
   19fa2:	f8cd 0013 	str.w	r0, [sp, #19]
   19fa6:	f7ff fed5 	bl	19d54 <find_sc_cfg>
		if (!cfg) {
   19faa:	4604      	mov	r4, r0
   19fac:	b930      	cbnz	r0, 19fbc <sc_set+0x88>
			BT_ERR("Unable to restore SC: no cfg left");
   19fae:	4813      	ldr	r0, [pc, #76]	; (19ffc <sc_set+0xc8>)
   19fb0:	2145      	movs	r1, #69	; 0x45
   19fb2:	f00e fbf5 	bl	287a0 <z_log_minimal_printk>
			return -ENOMEM;
   19fb6:	f06f 050b 	mvn.w	r5, #11
   19fba:	e7c9      	b.n	19f50 <sc_set+0x1c>
		cfg->id = id;
   19fbc:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   19fc0:	a902      	add	r1, sp, #8
   19fc2:	f010 fc04 	bl	2a7ce <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   19fc6:	f104 0108 	add.w	r1, r4, #8
   19fca:	2204      	movs	r2, #4
   19fcc:	4640      	mov	r0, r8
   19fce:	47b8      	blx	r7
		if (len < 0) {
   19fd0:	1e04      	subs	r4, r0, #0
   19fd2:	dabd      	bge.n	19f50 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   19fd4:	480a      	ldr	r0, [pc, #40]	; (1a000 <sc_set+0xcc>)
   19fd6:	4622      	mov	r2, r4
   19fd8:	2145      	movs	r1, #69	; 0x45
   19fda:	f00e fbe1 	bl	287a0 <z_log_minimal_printk>
			return len;
   19fde:	4625      	mov	r5, r4
   19fe0:	e7b6      	b.n	19f50 <sc_set+0x1c>
	if (len_rd) {
   19fe2:	2e00      	cmp	r6, #0
   19fe4:	d1ef      	bne.n	19fc6 <sc_set+0x92>
   19fe6:	6026      	str	r6, [r4, #0]
   19fe8:	6066      	str	r6, [r4, #4]
   19fea:	60a6      	str	r6, [r4, #8]
   19fec:	e7b0      	b.n	19f50 <sc_set+0x1c>
   19fee:	bf00      	nop
   19ff0:	0002df45 	.word	0x0002df45
   19ff4:	0002f172 	.word	0x0002f172
   19ff8:	0002f193 	.word	0x0002f193
   19ffc:	0002f25a 	.word	0x0002f25a
   1a000:	0002f08e 	.word	0x0002f08e

0001a004 <sc_indicate_rsp>:
{
   1a004:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a006:	f06f 0102 	mvn.w	r1, #2
   1a00a:	4604      	mov	r4, r0
   1a00c:	480f      	ldr	r0, [pc, #60]	; (1a04c <sc_indicate_rsp+0x48>)
   1a00e:	f010 fbcf 	bl	2a7b0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a012:	480e      	ldr	r0, [pc, #56]	; (1a04c <sc_indicate_rsp+0x48>)
   1a014:	f010 fbb7 	bl	2a786 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a018:	07c2      	lsls	r2, r0, #31
   1a01a:	d504      	bpl.n	1a026 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a01c:	480c      	ldr	r0, [pc, #48]	; (1a050 <sc_indicate_rsp+0x4c>)
   1a01e:	2200      	movs	r2, #0
   1a020:	2300      	movs	r3, #0
   1a022:	f008 ffe5 	bl	22ff0 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1a026:	4620      	mov	r0, r4
   1a028:	f010 fb04 	bl	2a634 <bt_att_fixed_chan_only>
   1a02c:	b160      	cbz	r0, 1a048 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   1a02e:	4620      	mov	r0, r4
   1a030:	f7ff fc54 	bl	198dc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1a034:	b140      	cbz	r0, 1a048 <sc_indicate_rsp+0x44>
   1a036:	7a03      	ldrb	r3, [r0, #8]
   1a038:	07db      	lsls	r3, r3, #31
   1a03a:	d505      	bpl.n	1a048 <sc_indicate_rsp+0x44>
}
   1a03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a040:	2101      	movs	r1, #1
   1a042:	300c      	adds	r0, #12
   1a044:	f010 bba5 	b.w	2a792 <atomic_or>
   1a048:	bd10      	pop	{r4, pc}
   1a04a:	bf00      	nop
   1a04c:	20001c98 	.word	0x20001c98
   1a050:	20001c68 	.word	0x20001c68

0001a054 <bt_gatt_init>:
{
   1a054:	b570      	push	{r4, r5, r6, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a056:	4b2a      	ldr	r3, [pc, #168]	; (1a100 <bt_gatt_init+0xac>)
   1a058:	f3bf 8f5b 	dmb	ish
   1a05c:	2201      	movs	r2, #1
   1a05e:	e853 1f00 	ldrex	r1, [r3]
   1a062:	2900      	cmp	r1, #0
   1a064:	d103      	bne.n	1a06e <bt_gatt_init+0x1a>
   1a066:	e843 2000 	strex	r0, r2, [r3]
   1a06a:	2800      	cmp	r0, #0
   1a06c:	d1f7      	bne.n	1a05e <bt_gatt_init+0xa>
   1a06e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1a072:	d143      	bne.n	1a0fc <bt_gatt_init+0xa8>
   1a074:	f3bf 8f5b 	dmb	ish
   1a078:	4b22      	ldr	r3, [pc, #136]	; (1a104 <bt_gatt_init+0xb0>)
   1a07a:	e853 1f00 	ldrex	r1, [r3]
   1a07e:	2900      	cmp	r1, #0
   1a080:	d103      	bne.n	1a08a <bt_gatt_init+0x36>
   1a082:	e843 2000 	strex	r0, r2, [r3]
   1a086:	2800      	cmp	r0, #0
   1a088:	d1f7      	bne.n	1a07a <bt_gatt_init+0x26>
   1a08a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1a08e:	d031      	beq.n	1a0f4 <bt_gatt_init+0xa0>
	list->head = NULL;
   1a090:	4b1d      	ldr	r3, [pc, #116]	; (1a108 <bt_gatt_init+0xb4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1a092:	491e      	ldr	r1, [pc, #120]	; (1a10c <bt_gatt_init+0xb8>)
   1a094:	481e      	ldr	r0, [pc, #120]	; (1a110 <bt_gatt_init+0xbc>)
   1a096:	2200      	movs	r2, #0
	list->tail = NULL;
   1a098:	e9c3 2200 	strd	r2, r2, [r3]
   1a09c:	f008 feb2 	bl	22e04 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1a0a0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a0a4:	2300      	movs	r3, #0
   1a0a6:	481a      	ldr	r0, [pc, #104]	; (1a110 <bt_gatt_init+0xbc>)
   1a0a8:	f7fb fa22 	bl	154f0 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1a0ac:	4919      	ldr	r1, [pc, #100]	; (1a114 <bt_gatt_init+0xc0>)
   1a0ae:	481a      	ldr	r0, [pc, #104]	; (1a118 <bt_gatt_init+0xc4>)
   1a0b0:	f008 fea8 	bl	22e04 <k_work_init_delayable>
   1a0b4:	2102      	movs	r1, #2
   1a0b6:	4819      	ldr	r0, [pc, #100]	; (1a11c <bt_gatt_init+0xc8>)
   1a0b8:	f010 fb6b 	bl	2a792 <atomic_or>
}
   1a0bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1a0c0:	4917      	ldr	r1, [pc, #92]	; (1a120 <bt_gatt_init+0xcc>)
   1a0c2:	4818      	ldr	r0, [pc, #96]	; (1a124 <bt_gatt_init+0xd0>)
   1a0c4:	f008 be9e 	b.w	22e04 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1a0c8:	4a17      	ldr	r2, [pc, #92]	; (1a128 <bt_gatt_init+0xd4>)
   1a0ca:	6863      	ldr	r3, [r4, #4]
   1a0cc:	8811      	ldrh	r1, [r2, #0]
   1a0ce:	440b      	add	r3, r1
   1a0d0:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1a0d2:	3408      	adds	r4, #8
   1a0d4:	42ac      	cmp	r4, r5
   1a0d6:	d90a      	bls.n	1a0ee <bt_gatt_init+0x9a>
   1a0d8:	4814      	ldr	r0, [pc, #80]	; (1a12c <bt_gatt_init+0xd8>)
   1a0da:	4631      	mov	r1, r6
   1a0dc:	f240 520e 	movw	r2, #1294	; 0x50e
   1a0e0:	f00e fb50 	bl	28784 <assert_print>
   1a0e4:	f240 510e 	movw	r1, #1294	; 0x50e
   1a0e8:	4630      	mov	r0, r6
   1a0ea:	f00e fb44 	bl	28776 <assert_post_action>
   1a0ee:	42ac      	cmp	r4, r5
   1a0f0:	d3ea      	bcc.n	1a0c8 <bt_gatt_init+0x74>
   1a0f2:	e7cd      	b.n	1a090 <bt_gatt_init+0x3c>
   1a0f4:	4c0e      	ldr	r4, [pc, #56]	; (1a130 <bt_gatt_init+0xdc>)
   1a0f6:	4d0f      	ldr	r5, [pc, #60]	; (1a134 <bt_gatt_init+0xe0>)
   1a0f8:	4e0f      	ldr	r6, [pc, #60]	; (1a138 <bt_gatt_init+0xe4>)
   1a0fa:	e7eb      	b.n	1a0d4 <bt_gatt_init+0x80>
}
   1a0fc:	bd70      	pop	{r4, r5, r6, pc}
   1a0fe:	bf00      	nop
   1a100:	20002884 	.word	0x20002884
   1a104:	200028a0 	.word	0x200028a0
   1a108:	2000285c 	.word	0x2000285c
   1a10c:	0001a38d 	.word	0x0001a38d
   1a110:	20001bb8 	.word	0x20001bb8
   1a114:	0001a8c5 	.word	0x0001a8c5
   1a118:	20001c68 	.word	0x20001c68
   1a11c:	20001c98 	.word	0x20001c98
   1a120:	0002ab9d 	.word	0x0002ab9d
   1a124:	20001c18 	.word	0x20001c18
   1a128:	200036d2 	.word	0x200036d2
   1a12c:	0002d509 	.word	0x0002d509
   1a130:	0002c61c 	.word	0x0002c61c
   1a134:	0002c634 	.word	0x0002c634
   1a138:	0002f281 	.word	0x0002f281

0001a13c <bt_gatt_attr_get_handle>:
{
   1a13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1a140:	4604      	mov	r4, r0
   1a142:	b910      	cbnz	r0, 1a14a <bt_gatt_attr_get_handle+0xe>
		return 0;
   1a144:	2000      	movs	r0, #0
}
   1a146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   1a14a:	8a00      	ldrh	r0, [r0, #16]
   1a14c:	2800      	cmp	r0, #0
   1a14e:	d1fa      	bne.n	1a146 <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a150:	4d18      	ldr	r5, [pc, #96]	; (1a1b4 <bt_gatt_attr_get_handle+0x78>)
   1a152:	4e19      	ldr	r6, [pc, #100]	; (1a1b8 <bt_gatt_attr_get_handle+0x7c>)
   1a154:	4f19      	ldr	r7, [pc, #100]	; (1a1bc <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
   1a156:	f04f 0801 	mov.w	r8, #1
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a15a:	42b5      	cmp	r5, r6
   1a15c:	d90a      	bls.n	1a174 <bt_gatt_attr_get_handle+0x38>
   1a15e:	4818      	ldr	r0, [pc, #96]	; (1a1c0 <bt_gatt_attr_get_handle+0x84>)
   1a160:	4639      	mov	r1, r7
   1a162:	f240 6265 	movw	r2, #1637	; 0x665
   1a166:	f00e fb0d 	bl	28784 <assert_print>
   1a16a:	f240 6165 	movw	r1, #1637	; 0x665
   1a16e:	4638      	mov	r0, r7
   1a170:	f00e fb01 	bl	28776 <assert_post_action>
   1a174:	42b5      	cmp	r5, r6
   1a176:	d2e5      	bcs.n	1a144 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a178:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   1a17c:	4564      	cmp	r4, ip
   1a17e:	d306      	bcc.n	1a18e <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a180:	f04f 0e14 	mov.w	lr, #20
   1a184:	fb0e c301 	mla	r3, lr, r1, ip
   1a188:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1a18a:	429c      	cmp	r4, r3
   1a18c:	d910      	bls.n	1a1b0 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   1a18e:	eb08 0001 	add.w	r0, r8, r1
   1a192:	b280      	uxth	r0, r0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a194:	3508      	adds	r5, #8
   1a196:	4680      	mov	r8, r0
   1a198:	e7df      	b.n	1a15a <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   1a19a:	fb0e c302 	mla	r3, lr, r2, ip
   1a19e:	429c      	cmp	r4, r3
   1a1a0:	d0d1      	beq.n	1a146 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1a1a2:	3201      	adds	r2, #1
   1a1a4:	eb08 0302 	add.w	r3, r8, r2
   1a1a8:	4291      	cmp	r1, r2
   1a1aa:	b298      	uxth	r0, r3
   1a1ac:	d1f5      	bne.n	1a19a <bt_gatt_attr_get_handle+0x5e>
   1a1ae:	e7f1      	b.n	1a194 <bt_gatt_attr_get_handle+0x58>
   1a1b0:	2200      	movs	r2, #0
   1a1b2:	e7f7      	b.n	1a1a4 <bt_gatt_attr_get_handle+0x68>
   1a1b4:	0002c61c 	.word	0x0002c61c
   1a1b8:	0002c634 	.word	0x0002c634
   1a1bc:	0002f281 	.word	0x0002f281
   1a1c0:	0002d509 	.word	0x0002d509

0001a1c4 <bt_gatt_foreach_attr_type>:
{
   1a1c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1c8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1a1cc:	9100      	str	r1, [sp, #0]
   1a1ce:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1a1d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a1d4:	2d00      	cmp	r5, #0
   1a1d6:	bf08      	it	eq
   1a1d8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1a1da:	4b2b      	ldr	r3, [pc, #172]	; (1a288 <bt_gatt_foreach_attr_type+0xc4>)
   1a1dc:	881b      	ldrh	r3, [r3, #0]
   1a1de:	4283      	cmp	r3, r0
{
   1a1e0:	4607      	mov	r7, r0
   1a1e2:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1a1e4:	d24b      	bcs.n	1a27e <bt_gatt_foreach_attr_type+0xba>
}
   1a1e6:	b003      	add	sp, #12
   1a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1a1ec:	6873      	ldr	r3, [r6, #4]
   1a1ee:	4423      	add	r3, r4
   1a1f0:	42bb      	cmp	r3, r7
   1a1f2:	d241      	bcs.n	1a278 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   1a1f4:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a1f6:	3608      	adds	r6, #8
   1a1f8:	4b24      	ldr	r3, [pc, #144]	; (1a28c <bt_gatt_foreach_attr_type+0xc8>)
   1a1fa:	429e      	cmp	r6, r3
   1a1fc:	d90a      	bls.n	1a214 <bt_gatt_foreach_attr_type+0x50>
   1a1fe:	4824      	ldr	r0, [pc, #144]	; (1a290 <bt_gatt_foreach_attr_type+0xcc>)
   1a200:	4659      	mov	r1, fp
   1a202:	f240 7229 	movw	r2, #1833	; 0x729
   1a206:	f00e fabd 	bl	28784 <assert_print>
   1a20a:	f240 7129 	movw	r1, #1833	; 0x729
   1a20e:	4658      	mov	r0, fp
   1a210:	f00e fab1 	bl	28776 <assert_post_action>
   1a214:	4b1d      	ldr	r3, [pc, #116]	; (1a28c <bt_gatt_foreach_attr_type+0xc8>)
   1a216:	429e      	cmp	r6, r3
   1a218:	d3e8      	bcc.n	1a1ec <bt_gatt_foreach_attr_type+0x28>
   1a21a:	e7e4      	b.n	1a1e6 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a21c:	5889      	ldr	r1, [r1, r2]
   1a21e:	9301      	str	r3, [sp, #4]
   1a220:	4640      	mov	r0, r8
   1a222:	f00f f8cf 	bl	293c4 <bt_uuid_cmp>
   1a226:	9b01      	ldr	r3, [sp, #4]
   1a228:	b198      	cbz	r0, 1a252 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a22a:	3401      	adds	r4, #1
   1a22c:	f10a 0a01 	add.w	sl, sl, #1
   1a230:	b2a4      	uxth	r4, r4
   1a232:	6873      	ldr	r3, [r6, #4]
   1a234:	4553      	cmp	r3, sl
   1a236:	d9de      	bls.n	1a1f6 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1a238:	9b00      	ldr	r3, [sp, #0]
   1a23a:	429c      	cmp	r4, r3
   1a23c:	d8d3      	bhi.n	1a1e6 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1a23e:	42bc      	cmp	r4, r7
   1a240:	d3f3      	bcc.n	1a22a <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a242:	2314      	movs	r3, #20
   1a244:	6831      	ldr	r1, [r6, #0]
   1a246:	fb03 f20a 	mul.w	r2, r3, sl
   1a24a:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a24c:	f1b8 0f00 	cmp.w	r8, #0
   1a250:	d1e4      	bne.n	1a21c <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   1a252:	f1b9 0f00 	cmp.w	r9, #0
   1a256:	d10b      	bne.n	1a270 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   1a258:	3d01      	subs	r5, #1
   1a25a:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1a25c:	4618      	mov	r0, r3
   1a25e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a262:	4621      	mov	r1, r4
   1a264:	4798      	blx	r3
	if (!*num_matches) {
   1a266:	2d00      	cmp	r5, #0
   1a268:	d0bd      	beq.n	1a1e6 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a26a:	2800      	cmp	r0, #0
   1a26c:	d1dd      	bne.n	1a22a <bt_gatt_foreach_attr_type+0x66>
   1a26e:	e7ba      	b.n	1a1e6 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1a270:	68da      	ldr	r2, [r3, #12]
   1a272:	4591      	cmp	r9, r2
   1a274:	d1d9      	bne.n	1a22a <bt_gatt_foreach_attr_type+0x66>
   1a276:	e7ef      	b.n	1a258 <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a278:	f04f 0a00 	mov.w	sl, #0
   1a27c:	e7d9      	b.n	1a232 <bt_gatt_foreach_attr_type+0x6e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a27e:	4e05      	ldr	r6, [pc, #20]	; (1a294 <bt_gatt_foreach_attr_type+0xd0>)
   1a280:	f8df b014 	ldr.w	fp, [pc, #20]	; 1a298 <bt_gatt_foreach_attr_type+0xd4>
		uint16_t handle = 1;
   1a284:	2401      	movs	r4, #1
   1a286:	e7b7      	b.n	1a1f8 <bt_gatt_foreach_attr_type+0x34>
   1a288:	200036d2 	.word	0x200036d2
   1a28c:	0002c634 	.word	0x0002c634
   1a290:	0002d509 	.word	0x0002d509
   1a294:	0002c61c 	.word	0x0002c61c
   1a298:	0002f281 	.word	0x0002f281

0001a29c <db_hash_gen>:
{
   1a29c:	b530      	push	{r4, r5, lr}
   1a29e:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   1a2a0:	2300      	movs	r3, #0
{
   1a2a2:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a2a4:	aa1c      	add	r2, sp, #112	; 0x70
   1a2a6:	4669      	mov	r1, sp
   1a2a8:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1a2aa:	e9cd 3300 	strd	r3, r3, [sp]
   1a2ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a2b2:	f00e ff45 	bl	29140 <tc_cmac_setup>
   1a2b6:	b928      	cbnz	r0, 1a2c4 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   1a2b8:	4814      	ldr	r0, [pc, #80]	; (1a30c <db_hash_gen+0x70>)
   1a2ba:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
   1a2bc:	f00e fa70 	bl	287a0 <z_log_minimal_printk>
}
   1a2c0:	b049      	add	sp, #292	; 0x124
   1a2c2:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1a2c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a2c8:	2001      	movs	r0, #1
   1a2ca:	4a11      	ldr	r2, [pc, #68]	; (1a310 <db_hash_gen+0x74>)
   1a2cc:	ab04      	add	r3, sp, #16
   1a2ce:	f010 fbf0 	bl	2aab2 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a2d2:	4810      	ldr	r0, [pc, #64]	; (1a314 <db_hash_gen+0x78>)
   1a2d4:	a904      	add	r1, sp, #16
   1a2d6:	f00e ffc9 	bl	2926c <tc_cmac_final>
   1a2da:	b910      	cbnz	r0, 1a2e2 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   1a2dc:	480e      	ldr	r0, [pc, #56]	; (1a318 <db_hash_gen+0x7c>)
   1a2de:	2145      	movs	r1, #69	; 0x45
   1a2e0:	e7ec      	b.n	1a2bc <db_hash_gen+0x20>
   1a2e2:	4b0c      	ldr	r3, [pc, #48]	; (1a314 <db_hash_gen+0x78>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a2e4:	2208      	movs	r2, #8
   1a2e6:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1a2ea:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1a2ec:	780d      	ldrb	r5, [r1, #0]
   1a2ee:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1a2f2:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1a2f4:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1a2f8:	d1f7      	bne.n	1a2ea <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1a2fa:	b10c      	cbz	r4, 1a300 <db_hash_gen+0x64>
		db_hash_store();
   1a2fc:	f7ff fad8 	bl	198b0 <db_hash_store>
   1a300:	2104      	movs	r1, #4
   1a302:	4806      	ldr	r0, [pc, #24]	; (1a31c <db_hash_gen+0x80>)
   1a304:	f010 fa45 	bl	2a792 <atomic_or>
   1a308:	e7da      	b.n	1a2c0 <db_hash_gen+0x24>
   1a30a:	bf00      	nop
   1a30c:	0002f2b1 	.word	0x0002f2b1
   1a310:	0002a6dd 	.word	0x0002a6dd
   1a314:	20001b98 	.word	0x20001b98
   1a318:	0002f2cf 	.word	0x0002f2cf
   1a31c:	20001c98 	.word	0x20001c98

0001a320 <db_hash_read>:
{
   1a320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a324:	4916      	ldr	r1, [pc, #88]	; (1a380 <db_hash_read+0x60>)
{
   1a326:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   1a32a:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a32c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1a330:	4615      	mov	r5, r2
   1a332:	461e      	mov	r6, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a334:	f008 feaa 	bl	2308c <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a338:	4812      	ldr	r0, [pc, #72]	; (1a384 <db_hash_read+0x64>)
   1a33a:	f010 fa24 	bl	2a786 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a33e:	0741      	lsls	r1, r0, #29
   1a340:	d402      	bmi.n	1a348 <db_hash_read+0x28>
		db_hash_gen(true);
   1a342:	2001      	movs	r0, #1
   1a344:	f7ff ffaa 	bl	1a29c <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1a348:	4620      	mov	r0, r4
   1a34a:	f7ff fac7 	bl	198dc <find_cf_cfg>
	if (cfg &&
   1a34e:	b168      	cbz	r0, 1a36c <db_hash_read+0x4c>
   1a350:	7a03      	ldrb	r3, [r0, #8]
   1a352:	07da      	lsls	r2, r3, #31
   1a354:	d50a      	bpl.n	1a36c <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1a356:	f100 040c 	add.w	r4, r0, #12
   1a35a:	4620      	mov	r0, r4
   1a35c:	f010 fa13 	bl	2a786 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1a360:	07c3      	lsls	r3, r0, #31
   1a362:	d403      	bmi.n	1a36c <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a364:	2102      	movs	r1, #2
   1a366:	4620      	mov	r0, r4
   1a368:	f010 fa13 	bl	2a792 <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a36c:	2310      	movs	r3, #16
   1a36e:	9306      	str	r3, [sp, #24]
   1a370:	463a      	mov	r2, r7
   1a372:	4631      	mov	r1, r6
   1a374:	4628      	mov	r0, r5
   1a376:	4b04      	ldr	r3, [pc, #16]	; (1a388 <db_hash_read+0x68>)
}
   1a378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a37c:	f010 ba41 	b.w	2a802 <bt_gatt_attr_read.constprop.0>
   1a380:	20001be8 	.word	0x20001be8
   1a384:	20001c98 	.word	0x20001c98
   1a388:	20001b98 	.word	0x20001b98

0001a38c <db_hash_process>:
{
   1a38c:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a38e:	4827      	ldr	r0, [pc, #156]	; (1a42c <db_hash_process+0xa0>)
   1a390:	f06f 0108 	mvn.w	r1, #8
   1a394:	f010 fa0c 	bl	2a7b0 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1a398:	0700      	lsls	r0, r0, #28
   1a39a:	d542      	bpl.n	1a422 <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a39c:	4823      	ldr	r0, [pc, #140]	; (1a42c <db_hash_process+0xa0>)
   1a39e:	f010 f9f2 	bl	2a786 <atomic_get>
   1a3a2:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a3a4:	0759      	lsls	r1, r3, #29
   1a3a6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1a3aa:	d401      	bmi.n	1a3b0 <db_hash_process+0x24>
			db_hash_gen(false);
   1a3ac:	f7ff ff76 	bl	1a29c <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1a3b0:	491f      	ldr	r1, [pc, #124]	; (1a430 <db_hash_process+0xa4>)
   1a3b2:	2210      	movs	r2, #16
   1a3b4:	1888      	adds	r0, r1, r2
   1a3b6:	f011 feba 	bl	2c12e <memcmp>
   1a3ba:	b948      	cbnz	r0, 1a3d0 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1a3bc:	481d      	ldr	r0, [pc, #116]	; (1a434 <db_hash_process+0xa8>)
   1a3be:	f008 fe1d 	bl	22ffc <k_work_cancel_delayable>
}
   1a3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a3c6:	4819      	ldr	r0, [pc, #100]	; (1a42c <db_hash_process+0xa0>)
   1a3c8:	f06f 0101 	mvn.w	r1, #1
   1a3cc:	f010 b9f0 	b.w	2a7b0 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a3d0:	4c19      	ldr	r4, [pc, #100]	; (1a438 <db_hash_process+0xac>)
   1a3d2:	2101      	movs	r1, #1
   1a3d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1a3d8:	f010 f9db 	bl	2a792 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a3dc:	07c2      	lsls	r2, r0, #31
   1a3de:	d410      	bmi.n	1a402 <db_hash_process+0x76>
		gatt_sc.start = start;
   1a3e0:	4b16      	ldr	r3, [pc, #88]	; (1a43c <db_hash_process+0xb0>)
   1a3e2:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a3e4:	4811      	ldr	r0, [pc, #68]	; (1a42c <db_hash_process+0xa0>)
   1a3e6:	f010 f9ce 	bl	2a786 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1a3ea:	0783      	lsls	r3, r0, #30
   1a3ec:	d405      	bmi.n	1a3fa <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a3ee:	4811      	ldr	r0, [pc, #68]	; (1a434 <db_hash_process+0xa8>)
   1a3f0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a3f4:	2300      	movs	r3, #0
   1a3f6:	f008 fdfb 	bl	22ff0 <k_work_reschedule>
}
   1a3fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1a3fe:	f7ff ba57 	b.w	198b0 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1a402:	8b23      	ldrh	r3, [r4, #24]
   1a404:	8b62      	ldrh	r2, [r4, #26]
   1a406:	2b01      	cmp	r3, #1
   1a408:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a40c:	d805      	bhi.n	1a41a <db_hash_process+0x8e>
   1a40e:	429a      	cmp	r2, r3
   1a410:	d0f3      	beq.n	1a3fa <db_hash_process+0x6e>
		*end = new_end;
   1a412:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a416:	8363      	strh	r3, [r4, #26]
   1a418:	e7e4      	b.n	1a3e4 <db_hash_process+0x58>
	if (*end < new_end) {
   1a41a:	429a      	cmp	r2, r3
		*start = new_start;
   1a41c:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   1a41e:	d0e1      	beq.n	1a3e4 <db_hash_process+0x58>
   1a420:	e7f7      	b.n	1a412 <db_hash_process+0x86>
}
   1a422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   1a426:	2001      	movs	r0, #1
   1a428:	f7ff bf38 	b.w	1a29c <db_hash_gen>
   1a42c:	20001c98 	.word	0x20001c98
   1a430:	20001b98 	.word	0x20001b98
   1a434:	20001c68 	.word	0x20001c68
   1a438:	20001c48 	.word	0x20001c48
   1a43c:	ffff0001 	.word	0xffff0001

0001a440 <ccc_set_direct>:
{
   1a440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a444:	b0b9      	sub	sp, #228	; 0xe4
   1a446:	4688      	mov	r8, r1
   1a448:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1a44a:	492f      	ldr	r1, [pc, #188]	; (1a508 <ccc_set_direct+0xc8>)
   1a44c:	9840      	ldr	r0, [sp, #256]	; 0x100
   1a44e:	466a      	mov	r2, sp
{
   1a450:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1a452:	f00e fc23 	bl	28c9c <settings_name_steq>
   1a456:	b948      	cbnz	r0, 1a46c <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   1a458:	482c      	ldr	r0, [pc, #176]	; (1a50c <ccc_set_direct+0xcc>)
   1a45a:	2145      	movs	r1, #69	; 0x45
   1a45c:	f00e f9a0 	bl	287a0 <z_log_minimal_printk>
   1a460:	f06f 0515 	mvn.w	r5, #21
}
   1a464:	4628      	mov	r0, r5
   1a466:	b039      	add	sp, #228	; 0xe4
   1a468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1a46c:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   1a46e:	a901      	add	r1, sp, #4
   1a470:	4620      	mov	r0, r4
   1a472:	f00e fc36 	bl	28ce2 <settings_name_next>
		if (!name) {
   1a476:	b93c      	cbnz	r4, 1a488 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   1a478:	4825      	ldr	r0, [pc, #148]	; (1a510 <ccc_set_direct+0xd0>)
   1a47a:	2145      	movs	r1, #69	; 0x45
   1a47c:	f00e f990 	bl	287a0 <z_log_minimal_printk>
			return -EINVAL;
   1a480:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   1a484:	4625      	mov	r5, r4
   1a486:	e7ed      	b.n	1a464 <ccc_set_direct+0x24>
		} else if (!next) {
   1a488:	9801      	ldr	r0, [sp, #4]
   1a48a:	b970      	cbnz	r0, 1a4aa <ccc_set_direct+0x6a>
		err = bt_settings_decode_key(name, &addr);
   1a48c:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1a490:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1a492:	4649      	mov	r1, r9
   1a494:	4620      	mov	r0, r4
			load.addr_with_id.id = BT_ID_DEFAULT;
   1a496:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   1a49a:	f00e ff6f 	bl	2937c <bt_settings_decode_key>
		if (err) {
   1a49e:	4605      	mov	r5, r0
   1a4a0:	b178      	cbz	r0, 1a4c2 <ccc_set_direct+0x82>
			BT_ERR("Unable to decode address %s", name);
   1a4a2:	481c      	ldr	r0, [pc, #112]	; (1a514 <ccc_set_direct+0xd4>)
   1a4a4:	4622      	mov	r2, r4
   1a4a6:	2145      	movs	r1, #69	; 0x45
   1a4a8:	e008      	b.n	1a4bc <ccc_set_direct+0x7c>
			unsigned long next_id = strtoul(next, NULL, 10);
   1a4aa:	220a      	movs	r2, #10
   1a4ac:	2100      	movs	r1, #0
   1a4ae:	f00b fa45 	bl	2593c <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1a4b2:	4602      	mov	r2, r0
   1a4b4:	2800      	cmp	r0, #0
   1a4b6:	d0e9      	beq.n	1a48c <ccc_set_direct+0x4c>
				BT_ERR("Invalid local identity %lu", next_id);
   1a4b8:	4817      	ldr	r0, [pc, #92]	; (1a518 <ccc_set_direct+0xd8>)
   1a4ba:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to decode address %s", name);
   1a4bc:	f00e f970 	bl	287a0 <z_log_minimal_printk>
   1a4c0:	e7de      	b.n	1a480 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   1a4c2:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1a4c6:	f1b8 0f00 	cmp.w	r8, #0
   1a4ca:	d019      	beq.n	1a500 <ccc_set_direct+0xc0>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1a4cc:	f10d 0820 	add.w	r8, sp, #32
   1a4d0:	22c0      	movs	r2, #192	; 0xc0
   1a4d2:	4641      	mov	r1, r8
   1a4d4:	4638      	mov	r0, r7
   1a4d6:	47b0      	blx	r6
			if (len < 0) {
   1a4d8:	1e04      	subs	r4, r0, #0
   1a4da:	da05      	bge.n	1a4e8 <ccc_set_direct+0xa8>
				BT_ERR("Failed to decode value (err %zd)", len);
   1a4dc:	480f      	ldr	r0, [pc, #60]	; (1a51c <ccc_set_direct+0xdc>)
   1a4de:	4622      	mov	r2, r4
   1a4e0:	2145      	movs	r1, #69	; 0x45
   1a4e2:	f00e f95d 	bl	287a0 <z_log_minimal_printk>
				return len;
   1a4e6:	e7cd      	b.n	1a484 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   1a4e8:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1a4ea:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   1a4ee:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1a4f0:	4a0b      	ldr	r2, [pc, #44]	; (1a520 <ccc_set_direct+0xe0>)
   1a4f2:	ab04      	add	r3, sp, #16
   1a4f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a4f8:	2001      	movs	r0, #1
   1a4fa:	f010 fada 	bl	2aab2 <bt_gatt_foreach_attr>
	return 0;
   1a4fe:	e7b1      	b.n	1a464 <ccc_set_direct+0x24>
			load.count = 0;
   1a500:	e9cd 0006 	strd	r0, r0, [sp, #24]
   1a504:	e7f4      	b.n	1a4f0 <ccc_set_direct+0xb0>
   1a506:	bf00      	nop
   1a508:	0002f2ed 	.word	0x0002f2ed
   1a50c:	0002f2f4 	.word	0x0002f2f4
   1a510:	0002df45 	.word	0x0002df45
   1a514:	0002f172 	.word	0x0002f172
   1a518:	0002f193 	.word	0x0002f193
   1a51c:	0002f08e 	.word	0x0002f08e
   1a520:	00019ba1 	.word	0x00019ba1

0001a524 <bt_gatt_attr_next>:
{
   1a524:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1a526:	2300      	movs	r3, #0
   1a528:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1a52a:	f7ff fe07 	bl	1a13c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1a52e:	1c41      	adds	r1, r0, #1
   1a530:	b289      	uxth	r1, r1
   1a532:	4608      	mov	r0, r1
   1a534:	4a03      	ldr	r2, [pc, #12]	; (1a544 <bt_gatt_attr_next+0x20>)
   1a536:	ab01      	add	r3, sp, #4
   1a538:	f010 fabb 	bl	2aab2 <bt_gatt_foreach_attr>
}
   1a53c:	9801      	ldr	r0, [sp, #4]
   1a53e:	b003      	add	sp, #12
   1a540:	f85d fb04 	ldr.w	pc, [sp], #4
   1a544:	0002a691 	.word	0x0002a691

0001a548 <bt_gatt_is_subscribed>:
{
   1a548:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a54c:	460c      	mov	r4, r1
   1a54e:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   1a550:	4606      	mov	r6, r0
   1a552:	b950      	cbnz	r0, 1a56a <bt_gatt_is_subscribed+0x22>
   1a554:	4957      	ldr	r1, [pc, #348]	; (1a6b4 <bt_gatt_is_subscribed+0x16c>)
   1a556:	4858      	ldr	r0, [pc, #352]	; (1a6b8 <bt_gatt_is_subscribed+0x170>)
   1a558:	f640 424b 	movw	r2, #3147	; 0xc4b
   1a55c:	f00e f912 	bl	28784 <assert_print>
   1a560:	4854      	ldr	r0, [pc, #336]	; (1a6b4 <bt_gatt_is_subscribed+0x16c>)
   1a562:	f640 414b 	movw	r1, #3147	; 0xc4b
   1a566:	f00e f906 	bl	28776 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   1a56a:	b954      	cbnz	r4, 1a582 <bt_gatt_is_subscribed+0x3a>
   1a56c:	4951      	ldr	r1, [pc, #324]	; (1a6b4 <bt_gatt_is_subscribed+0x16c>)
   1a56e:	4852      	ldr	r0, [pc, #328]	; (1a6b8 <bt_gatt_is_subscribed+0x170>)
   1a570:	f640 424c 	movw	r2, #3148	; 0xc4c
   1a574:	f00e f906 	bl	28784 <assert_print>
   1a578:	484e      	ldr	r0, [pc, #312]	; (1a6b4 <bt_gatt_is_subscribed+0x16c>)
   1a57a:	f640 414c 	movw	r1, #3148	; 0xc4c
   1a57e:	f00e f8fa 	bl	28776 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1a582:	7b73      	ldrb	r3, [r6, #13]
   1a584:	2b07      	cmp	r3, #7
   1a586:	d003      	beq.n	1a590 <bt_gatt_is_subscribed+0x48>
		return false;
   1a588:	2000      	movs	r0, #0
}
   1a58a:	b004      	add	sp, #16
   1a58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1a590:	2300      	movs	r3, #0
   1a592:	f88d 300c 	strb.w	r3, [sp, #12]
   1a596:	6820      	ldr	r0, [r4, #0]
   1a598:	f642 0303 	movw	r3, #10243	; 0x2803
   1a59c:	a903      	add	r1, sp, #12
   1a59e:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a5a2:	f00e ff0f 	bl	293c4 <bt_uuid_cmp>
   1a5a6:	b9b0      	cbnz	r0, 1a5d6 <bt_gatt_is_subscribed+0x8e>
		if (!(chrc->properties &
   1a5a8:	68e3      	ldr	r3, [r4, #12]
   1a5aa:	7999      	ldrb	r1, [r3, #6]
   1a5ac:	f011 0030 	ands.w	r0, r1, #48	; 0x30
   1a5b0:	d0eb      	beq.n	1a58a <bt_gatt_is_subscribed+0x42>
		attr = bt_gatt_attr_next(attr);
   1a5b2:	4620      	mov	r0, r4
   1a5b4:	f7ff ffb6 	bl	1a524 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1a5b8:	4604      	mov	r4, r0
   1a5ba:	b960      	cbnz	r0, 1a5d6 <bt_gatt_is_subscribed+0x8e>
   1a5bc:	f640 425d 	movw	r2, #3165	; 0xc5d
   1a5c0:	493c      	ldr	r1, [pc, #240]	; (1a6b4 <bt_gatt_is_subscribed+0x16c>)
   1a5c2:	483d      	ldr	r0, [pc, #244]	; (1a6b8 <bt_gatt_is_subscribed+0x170>)
   1a5c4:	f00e f8de 	bl	28784 <assert_print>
   1a5c8:	483a      	ldr	r0, [pc, #232]	; (1a6b4 <bt_gatt_is_subscribed+0x16c>)
   1a5ca:	f640 415d 	movw	r1, #3165	; 0xc5d
   1a5ce:	f00e f8d2 	bl	28776 <assert_post_action>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1a5d2:	6823      	ldr	r3, [r4, #0]
   1a5d4:	deff      	udf	#255	; 0xff
   1a5d6:	2300      	movs	r3, #0
   1a5d8:	6820      	ldr	r0, [r4, #0]
   1a5da:	f88d 300c 	strb.w	r3, [sp, #12]
   1a5de:	a903      	add	r1, sp, #12
   1a5e0:	f642 1302 	movw	r3, #10498	; 0x2902
   1a5e4:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a5e8:	f00e feec 	bl	293c4 <bt_uuid_cmp>
   1a5ec:	b178      	cbz	r0, 1a60e <bt_gatt_is_subscribed+0xc6>
		attr = bt_gatt_attr_next(attr);
   1a5ee:	4620      	mov	r0, r4
   1a5f0:	f7ff ff98 	bl	1a524 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1a5f4:	4604      	mov	r4, r0
   1a5f6:	b950      	cbnz	r0, 1a60e <bt_gatt_is_subscribed+0xc6>
   1a5f8:	492e      	ldr	r1, [pc, #184]	; (1a6b4 <bt_gatt_is_subscribed+0x16c>)
   1a5fa:	482f      	ldr	r0, [pc, #188]	; (1a6b8 <bt_gatt_is_subscribed+0x170>)
   1a5fc:	f640 4263 	movw	r2, #3171	; 0xc63
   1a600:	f00e f8c0 	bl	28784 <assert_print>
   1a604:	482b      	ldr	r0, [pc, #172]	; (1a6b4 <bt_gatt_is_subscribed+0x16c>)
   1a606:	f640 4163 	movw	r1, #3171	; 0xc63
   1a60a:	f00e f8b4 	bl	28776 <assert_post_action>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1a60e:	2500      	movs	r5, #0
   1a610:	f642 1802 	movw	r8, #10498	; 0x2902
   1a614:	6820      	ldr	r0, [r4, #0]
   1a616:	f88d 5000 	strb.w	r5, [sp]
   1a61a:	4669      	mov	r1, sp
   1a61c:	f8ad 8002 	strh.w	r8, [sp, #2]
   1a620:	f00e fed0 	bl	293c4 <bt_uuid_cmp>
   1a624:	b9d8      	cbnz	r0, 1a65e <bt_gatt_is_subscribed+0x116>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1a626:	6820      	ldr	r0, [r4, #0]
   1a628:	2500      	movs	r5, #0
   1a62a:	f642 1302 	movw	r3, #10498	; 0x2902
   1a62e:	a903      	add	r1, sp, #12
   1a630:	f88d 500c 	strb.w	r5, [sp, #12]
   1a634:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a638:	f00e fec4 	bl	293c4 <bt_uuid_cmp>
   1a63c:	2800      	cmp	r0, #0
   1a63e:	d1a3      	bne.n	1a588 <bt_gatt_is_subscribed+0x40>
	ccc = attr->user_data;
   1a640:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1a642:	4622      	mov	r2, r4
   1a644:	4630      	mov	r0, r6
   1a646:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a64a:	f00f fac6 	bl	29bda <bt_conn_is_peer_addr_le>
   1a64e:	2800      	cmp	r0, #0
   1a650:	d09a      	beq.n	1a588 <bt_gatt_is_subscribed+0x40>
   1a652:	8923      	ldrh	r3, [r4, #8]
   1a654:	421f      	tst	r7, r3
   1a656:	bf14      	ite	ne
   1a658:	2001      	movne	r0, #1
   1a65a:	2000      	moveq	r0, #0
   1a65c:	e795      	b.n	1a58a <bt_gatt_is_subscribed+0x42>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1a65e:	6820      	ldr	r0, [r4, #0]
   1a660:	f88d 5004 	strb.w	r5, [sp, #4]
   1a664:	f642 0303 	movw	r3, #10243	; 0x2803
   1a668:	a901      	add	r1, sp, #4
   1a66a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a66e:	f00e fea9 	bl	293c4 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1a672:	2800      	cmp	r0, #0
   1a674:	d0d7      	beq.n	1a626 <bt_gatt_is_subscribed+0xde>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a676:	6820      	ldr	r0, [r4, #0]
   1a678:	f88d 5008 	strb.w	r5, [sp, #8]
   1a67c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a680:	a902      	add	r1, sp, #8
   1a682:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a686:	f00e fe9d 	bl	293c4 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1a68a:	2800      	cmp	r0, #0
   1a68c:	d0cb      	beq.n	1a626 <bt_gatt_is_subscribed+0xde>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a68e:	6820      	ldr	r0, [r4, #0]
   1a690:	f88d 500c 	strb.w	r5, [sp, #12]
   1a694:	f642 0301 	movw	r3, #10241	; 0x2801
   1a698:	a903      	add	r1, sp, #12
   1a69a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a69e:	f00e fe91 	bl	293c4 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a6a2:	2800      	cmp	r0, #0
   1a6a4:	d0bf      	beq.n	1a626 <bt_gatt_is_subscribed+0xde>
		attr = bt_gatt_attr_next(attr);
   1a6a6:	4620      	mov	r0, r4
   1a6a8:	f7ff ff3c 	bl	1a524 <bt_gatt_attr_next>
		if (!attr) {
   1a6ac:	4604      	mov	r4, r0
   1a6ae:	2800      	cmp	r0, #0
   1a6b0:	d1b0      	bne.n	1a614 <bt_gatt_is_subscribed+0xcc>
   1a6b2:	e769      	b.n	1a588 <bt_gatt_is_subscribed+0x40>
   1a6b4:	0002f281 	.word	0x0002f281
   1a6b8:	0002d509 	.word	0x0002d509

0001a6bc <gatt_indicate>:
{
   1a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a6c0:	4615      	mov	r5, r2
   1a6c2:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a6c4:	2294      	movs	r2, #148	; 0x94
   1a6c6:	6869      	ldr	r1, [r5, #4]
{
   1a6c8:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a6ca:	f010 f9fd 	bl	2aac8 <bt_gatt_check_perm>
   1a6ce:	4680      	mov	r8, r0
   1a6d0:	b140      	cbz	r0, 1a6e4 <gatt_indicate+0x28>
		BT_WARN("Link is not encrypted");
   1a6d2:	482d      	ldr	r0, [pc, #180]	; (1a788 <gatt_indicate+0xcc>)
   1a6d4:	2157      	movs	r1, #87	; 0x57
   1a6d6:	f00e f863 	bl	287a0 <z_log_minimal_printk>
		return -EPERM;
   1a6da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   1a6de:	4628      	mov	r0, r5
   1a6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1a6e4:	6869      	ldr	r1, [r5, #4]
   1a6e6:	2202      	movs	r2, #2
   1a6e8:	4630      	mov	r0, r6
   1a6ea:	f7ff ff2d 	bl	1a548 <bt_gatt_is_subscribed>
   1a6ee:	b930      	cbnz	r0, 1a6fe <gatt_indicate+0x42>
			BT_WARN("Device is not subscribed to characteristic");
   1a6f0:	4826      	ldr	r0, [pc, #152]	; (1a78c <gatt_indicate+0xd0>)
   1a6f2:	2157      	movs	r1, #87	; 0x57
   1a6f4:	f00e f854 	bl	287a0 <z_log_minimal_printk>
			return -EINVAL;
   1a6f8:	f06f 0515 	mvn.w	r5, #21
   1a6fc:	e7ef      	b.n	1a6de <gatt_indicate+0x22>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a6fe:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1a702:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1a704:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a706:	f7fe ff43 	bl	19590 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1a70a:	3702      	adds	r7, #2
	if (!req) {
   1a70c:	4604      	mov	r4, r0
   1a70e:	b910      	cbnz	r0, 1a716 <gatt_indicate+0x5a>
		return -ENOMEM;
   1a710:	f06f 050b 	mvn.w	r5, #11
   1a714:	e7e3      	b.n	1a6de <gatt_indicate+0x22>
	req->func = func;
   1a716:	4b1e      	ldr	r3, [pc, #120]	; (1a790 <gatt_indicate+0xd4>)
	req->len = len;
   1a718:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1a71a:	211d      	movs	r1, #29
   1a71c:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1a71e:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1a722:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1a724:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1a726:	463a      	mov	r2, r7
   1a728:	4630      	mov	r0, r6
   1a72a:	f7fe fc5d 	bl	18fe8 <bt_att_create_pdu>
	if (!buf) {
   1a72e:	4607      	mov	r7, r0
   1a730:	b938      	cbnz	r0, 1a742 <gatt_indicate+0x86>
		BT_WARN("No buffer available to send indication");
   1a732:	4818      	ldr	r0, [pc, #96]	; (1a794 <gatt_indicate+0xd8>)
   1a734:	2157      	movs	r1, #87	; 0x57
   1a736:	f00e f833 	bl	287a0 <z_log_minimal_printk>
		bt_att_req_free(req);
   1a73a:	4620      	mov	r0, r4
   1a73c:	f7fe ff4a 	bl	195d4 <bt_att_req_free>
   1a740:	e7e6      	b.n	1a710 <gatt_indicate+0x54>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1a742:	2301      	movs	r3, #1
   1a744:	4642      	mov	r2, r8
   1a746:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1a748:	f107 0a08 	add.w	sl, r7, #8
   1a74c:	f00f ff99 	bl	2a682 <bt_att_set_tx_meta_data>
   1a750:	2102      	movs	r1, #2
   1a752:	4650      	mov	r0, sl
   1a754:	f002 fcc6 	bl	1d0e4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1a758:	4680      	mov	r8, r0
   1a75a:	8aa9      	ldrh	r1, [r5, #20]
   1a75c:	f828 9b02 	strh.w	r9, [r8], #2
   1a760:	4650      	mov	r0, sl
   1a762:	f002 fcbf 	bl	1d0e4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a766:	8aaa      	ldrh	r2, [r5, #20]
   1a768:	6929      	ldr	r1, [r5, #16]
   1a76a:	4640      	mov	r0, r8
   1a76c:	f011 fcef 	bl	2c14e <memcpy>
	req->buf = buf;
   1a770:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1a772:	4621      	mov	r1, r4
   1a774:	4630      	mov	r0, r6
   1a776:	f7ff f851 	bl	1981c <bt_att_req_send>
	if (err) {
   1a77a:	4605      	mov	r5, r0
   1a77c:	2800      	cmp	r0, #0
   1a77e:	d0ae      	beq.n	1a6de <gatt_indicate+0x22>
		bt_att_req_free(req);
   1a780:	4620      	mov	r0, r4
   1a782:	f7fe ff27 	bl	195d4 <bt_att_req_free>
   1a786:	e7aa      	b.n	1a6de <gatt_indicate+0x22>
   1a788:	0002f305 	.word	0x0002f305
   1a78c:	0002f320 	.word	0x0002f320
   1a790:	0002a6ab 	.word	0x0002a6ab
   1a794:	0002f350 	.word	0x0002f350

0001a798 <bt_gatt_indicate>:
{
   1a798:	b530      	push	{r4, r5, lr}
   1a79a:	4605      	mov	r5, r0
   1a79c:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1a79e:	460c      	mov	r4, r1
   1a7a0:	b951      	cbnz	r1, 1a7b8 <bt_gatt_indicate+0x20>
   1a7a2:	4943      	ldr	r1, [pc, #268]	; (1a8b0 <bt_gatt_indicate+0x118>)
   1a7a4:	4843      	ldr	r0, [pc, #268]	; (1a8b4 <bt_gatt_indicate+0x11c>)
   1a7a6:	f640 320b 	movw	r2, #2827	; 0xb0b
   1a7aa:	f00d ffeb 	bl	28784 <assert_print>
   1a7ae:	4840      	ldr	r0, [pc, #256]	; (1a8b0 <bt_gatt_indicate+0x118>)
   1a7b0:	f640 310b 	movw	r1, #2827	; 0xb0b
   1a7b4:	f00d ffdf 	bl	28776 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a7b8:	6863      	ldr	r3, [r4, #4]
   1a7ba:	b963      	cbnz	r3, 1a7d6 <bt_gatt_indicate+0x3e>
   1a7bc:	6823      	ldr	r3, [r4, #0]
   1a7be:	b953      	cbnz	r3, 1a7d6 <bt_gatt_indicate+0x3e>
   1a7c0:	493b      	ldr	r1, [pc, #236]	; (1a8b0 <bt_gatt_indicate+0x118>)
   1a7c2:	483c      	ldr	r0, [pc, #240]	; (1a8b4 <bt_gatt_indicate+0x11c>)
   1a7c4:	f640 320c 	movw	r2, #2828	; 0xb0c
   1a7c8:	f00d ffdc 	bl	28784 <assert_print>
   1a7cc:	4838      	ldr	r0, [pc, #224]	; (1a8b0 <bt_gatt_indicate+0x118>)
   1a7ce:	f640 310c 	movw	r1, #2828	; 0xb0c
   1a7d2:	f00d ffd0 	bl	28776 <assert_post_action>
   1a7d6:	4838      	ldr	r0, [pc, #224]	; (1a8b8 <bt_gatt_indicate+0x120>)
   1a7d8:	f00f ffd5 	bl	2a786 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a7dc:	0742      	lsls	r2, r0, #29
   1a7de:	d561      	bpl.n	1a8a4 <bt_gatt_indicate+0x10c>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a7e0:	b115      	cbz	r5, 1a7e8 <bt_gatt_indicate+0x50>
   1a7e2:	7b6b      	ldrb	r3, [r5, #13]
   1a7e4:	2b07      	cmp	r3, #7
   1a7e6:	d160      	bne.n	1a8aa <bt_gatt_indicate+0x112>
	data.attr = params->attr;
   1a7e8:	6860      	ldr	r0, [r4, #4]
   1a7ea:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a7ec:	f7ff fca6 	bl	1a13c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1a7f0:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a7f2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1a7f6:	b33a      	cbz	r2, 1a848 <bt_gatt_indicate+0xb0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a7f8:	a905      	add	r1, sp, #20
   1a7fa:	9102      	str	r1, [sp, #8]
   1a7fc:	492f      	ldr	r1, [pc, #188]	; (1a8bc <bt_gatt_indicate+0x124>)
   1a7fe:	9101      	str	r1, [sp, #4]
   1a800:	2101      	movs	r1, #1
	found->attr = NULL;
   1a802:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a804:	9100      	str	r1, [sp, #0]
   1a806:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1a80a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a80c:	f7ff fcda 	bl	1a1c4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1a810:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a812:	b91b      	cbnz	r3, 1a81c <bt_gatt_indicate+0x84>
			return -ENOENT;
   1a814:	f06f 0001 	mvn.w	r0, #1
}
   1a818:	b00b      	add	sp, #44	; 0x2c
   1a81a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1a81c:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a81e:	9b05      	ldr	r3, [sp, #20]
   1a820:	6818      	ldr	r0, [r3, #0]
   1a822:	2300      	movs	r3, #0
   1a824:	f88d 3010 	strb.w	r3, [sp, #16]
   1a828:	a904      	add	r1, sp, #16
   1a82a:	f642 0303 	movw	r3, #10243	; 0x2803
   1a82e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a832:	f00e fdc7 	bl	293c4 <bt_uuid_cmp>
   1a836:	b970      	cbnz	r0, 1a856 <bt_gatt_indicate+0xbe>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a838:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1a83a:	68c3      	ldr	r3, [r0, #12]
   1a83c:	799b      	ldrb	r3, [r3, #6]
   1a83e:	069b      	lsls	r3, r3, #26
   1a840:	d405      	bmi.n	1a84e <bt_gatt_indicate+0xb6>
			return -EINVAL;
   1a842:	f06f 0015 	mvn.w	r0, #21
   1a846:	e7e7      	b.n	1a818 <bt_gatt_indicate+0x80>
		if (!data.handle) {
   1a848:	2800      	cmp	r0, #0
   1a84a:	d1e8      	bne.n	1a81e <bt_gatt_indicate+0x86>
   1a84c:	e7e2      	b.n	1a814 <bt_gatt_indicate+0x7c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a84e:	f010 f8e9 	bl	2aa24 <bt_gatt_attr_value_handle>
   1a852:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1a856:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1a85a:	b13d      	cbz	r5, 1a86c <bt_gatt_indicate+0xd4>
		params->_ref = 1;
   1a85c:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1a85e:	4601      	mov	r1, r0
		params->_ref = 1;
   1a860:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1a862:	4622      	mov	r2, r4
   1a864:	4628      	mov	r0, r5
   1a866:	f7ff ff29 	bl	1a6bc <gatt_indicate>
   1a86a:	e7d5      	b.n	1a818 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1a86c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1a870:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1a872:	2302      	movs	r3, #2
   1a874:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a878:	f642 1302 	movw	r3, #10498	; 0x2902
   1a87c:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a880:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1a882:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a884:	9302      	str	r3, [sp, #8]
   1a886:	4b0e      	ldr	r3, [pc, #56]	; (1a8c0 <bt_gatt_indicate+0x128>)
   1a888:	9301      	str	r3, [sp, #4]
   1a88a:	2301      	movs	r3, #1
   1a88c:	9300      	str	r3, [sp, #0]
   1a88e:	aa04      	add	r2, sp, #16
   1a890:	462b      	mov	r3, r5
   1a892:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1a896:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a898:	f88d 5010 	strb.w	r5, [sp, #16]
   1a89c:	f7ff fc92 	bl	1a1c4 <bt_gatt_foreach_attr_type>
	return data.err;
   1a8a0:	9807      	ldr	r0, [sp, #28]
   1a8a2:	e7b9      	b.n	1a818 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1a8a4:	f06f 000a 	mvn.w	r0, #10
   1a8a8:	e7b6      	b.n	1a818 <bt_gatt_indicate+0x80>
		return -ENOTCONN;
   1a8aa:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a8ae:	e7b3      	b.n	1a818 <bt_gatt_indicate+0x80>
   1a8b0:	0002f281 	.word	0x0002f281
   1a8b4:	0002d509 	.word	0x0002d509
   1a8b8:	2000041c 	.word	0x2000041c
   1a8bc:	0002a6d1 	.word	0x0002a6d1
   1a8c0:	0001ac0d 	.word	0x0001ac0d

0001a8c4 <sc_process>:
{
   1a8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1a8c6:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1a8ca:	4604      	mov	r4, r0
   1a8cc:	4628      	mov	r0, r5
   1a8ce:	f00f ff5a 	bl	2a786 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1a8d2:	0783      	lsls	r3, r0, #30
   1a8d4:	d50a      	bpl.n	1a8ec <sc_process+0x28>
   1a8d6:	491a      	ldr	r1, [pc, #104]	; (1a940 <sc_process+0x7c>)
   1a8d8:	481a      	ldr	r0, [pc, #104]	; (1a944 <sc_process+0x80>)
   1a8da:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
   1a8de:	f00d ff51 	bl	28784 <assert_print>
   1a8e2:	4817      	ldr	r0, [pc, #92]	; (1a940 <sc_process+0x7c>)
   1a8e4:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   1a8e8:	f00d ff45 	bl	28776 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1a8ec:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1a8f0:	f8ad 3004 	strh.w	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a8f4:	f06f 0101 	mvn.w	r1, #1
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1a8f8:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   1a8fc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a900:	4628      	mov	r0, r5
   1a902:	f00f ff55 	bl	2a7b0 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1a906:	4b10      	ldr	r3, [pc, #64]	; (1a948 <sc_process+0x84>)
   1a908:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1a90c:	4b0f      	ldr	r3, [pc, #60]	; (1a94c <sc_process+0x88>)
   1a90e:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1a912:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1a914:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1a916:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1a91a:	2304      	movs	r3, #4
	sc->start = 0U;
   1a91c:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1a920:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1a924:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1a928:	f1a4 0120 	sub.w	r1, r4, #32
   1a92c:	f7ff ff34 	bl	1a798 <bt_gatt_indicate>
   1a930:	b918      	cbnz	r0, 1a93a <sc_process+0x76>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a932:	2102      	movs	r1, #2
   1a934:	4628      	mov	r0, r5
   1a936:	f00f ff2c 	bl	2a792 <atomic_or>
}
   1a93a:	b003      	add	sp, #12
   1a93c:	bd30      	pop	{r4, r5, pc}
   1a93e:	bf00      	nop
   1a940:	0002f281 	.word	0x0002f281
   1a944:	0002d509 	.word	0x0002d509
   1a948:	0002cbb4 	.word	0x0002cbb4
   1a94c:	0001a005 	.word	0x0001a005

0001a950 <update_ccc>:
{
   1a950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a954:	4b34      	ldr	r3, [pc, #208]	; (1aa28 <update_ccc+0xd8>)
	struct bt_conn *conn = data->conn;
   1a956:	6814      	ldr	r4, [r2, #0]
{
   1a958:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a95a:	6882      	ldr	r2, [r0, #8]
   1a95c:	429a      	cmp	r2, r3
{
   1a95e:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a960:	d117      	bne.n	1a992 <update_ccc+0x42>
	ccc = attr->user_data;
   1a962:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   1a964:	893b      	ldrh	r3, [r7, #8]
   1a966:	b1a3      	cbz	r3, 1a992 <update_ccc+0x42>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a968:	463a      	mov	r2, r7
   1a96a:	4620      	mov	r0, r4
   1a96c:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a970:	f00f f933 	bl	29bda <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1a974:	b168      	cbz	r0, 1a992 <update_ccc+0x42>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1a976:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1a97a:	4629      	mov	r1, r5
   1a97c:	4620      	mov	r0, r4
   1a97e:	f010 f8a3 	bl	2aac8 <bt_gatt_check_perm>
		if (err) {
   1a982:	b1d8      	cbz	r0, 1a9bc <update_ccc+0x6c>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1a984:	2803      	cmp	r0, #3
   1a986:	d108      	bne.n	1a99a <update_ccc+0x4a>
				BT_WARN("CCC %p not writable", attr);
   1a988:	4828      	ldr	r0, [pc, #160]	; (1aa2c <update_ccc+0xdc>)
   1a98a:	462a      	mov	r2, r5
   1a98c:	2157      	movs	r1, #87	; 0x57
   1a98e:	f00d ff07 	bl	287a0 <z_log_minimal_printk>
}
   1a992:	2001      	movs	r0, #1
   1a994:	b002      	add	sp, #8
   1a996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
   1a99a:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1a99c:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   1a99e:	bf14      	ite	ne
   1a9a0:	f04f 0802 	movne.w	r8, #2
   1a9a4:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   1a9a8:	f00f f915 	bl	29bd6 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a9ac:	4580      	cmp	r8, r0
   1a9ae:	d905      	bls.n	1a9bc <update_ccc+0x6c>
				if (data->sec < sec) {
   1a9b0:	7933      	ldrb	r3, [r6, #4]
   1a9b2:	4543      	cmp	r3, r8
   1a9b4:	d2ed      	bcs.n	1a992 <update_ccc+0x42>
					data->sec = sec;
   1a9b6:	f886 8004 	strb.w	r8, [r6, #4]
   1a9ba:	e7ea      	b.n	1a992 <update_ccc+0x42>
		gatt_ccc_changed(attr, ccc);
   1a9bc:	4639      	mov	r1, r7
   1a9be:	4628      	mov	r0, r5
   1a9c0:	f00f fe69 	bl	2a696 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1a9c4:	4b1a      	ldr	r3, [pc, #104]	; (1aa30 <update_ccc+0xe0>)
   1a9c6:	429f      	cmp	r7, r3
   1a9c8:	d1e3      	bne.n	1a992 <update_ccc+0x42>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a9ca:	7a20      	ldrb	r0, [r4, #8]
   1a9cc:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1a9d0:	f7ff f9c0 	bl	19d54 <find_sc_cfg>
	if (!cfg) {
   1a9d4:	2800      	cmp	r0, #0
   1a9d6:	d0dc      	beq.n	1a992 <update_ccc+0x42>
	if (!(cfg->data.start || cfg->data.end)) {
   1a9d8:	8902      	ldrh	r2, [r0, #8]
   1a9da:	8943      	ldrh	r3, [r0, #10]
   1a9dc:	ea52 0103 	orrs.w	r1, r2, r3
   1a9e0:	d0d7      	beq.n	1a992 <update_ccc+0x42>
	index = bt_conn_index(conn);
   1a9e2:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1a9e4:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1a9e8:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1a9ec:	f7fd fa0e 	bl	17e0c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a9f0:	4910      	ldr	r1, [pc, #64]	; (1aa34 <update_ccc+0xe4>)
   1a9f2:	4a11      	ldr	r2, [pc, #68]	; (1aa38 <update_ccc+0xe8>)
   1a9f4:	2318      	movs	r3, #24
   1a9f6:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a9fa:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a9fc:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1a9fe:	4a0f      	ldr	r2, [pc, #60]	; (1aa3c <update_ccc+0xec>)
   1aa00:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1aa02:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1aa04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1aa08:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1aa0a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1aa0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1aa10:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1aa12:	4620      	mov	r0, r4
   1aa14:	f7ff fec0 	bl	1a798 <bt_gatt_indicate>
   1aa18:	2800      	cmp	r0, #0
   1aa1a:	d0ba      	beq.n	1a992 <update_ccc+0x42>
		BT_ERR("SC restore indication failed");
   1aa1c:	4808      	ldr	r0, [pc, #32]	; (1aa40 <update_ccc+0xf0>)
   1aa1e:	2145      	movs	r1, #69	; 0x45
   1aa20:	f00d febe 	bl	287a0 <z_log_minimal_printk>
   1aa24:	e7b5      	b.n	1a992 <update_ccc+0x42>
   1aa26:	bf00      	nop
   1aa28:	00019c61 	.word	0x00019c61
   1aa2c:	0002f37c 	.word	0x0002f37c
   1aa30:	200006bc 	.word	0x200006bc
   1aa34:	20002888 	.word	0x20002888
   1aa38:	0002cbb4 	.word	0x0002cbb4
   1aa3c:	0002a9e9 	.word	0x0002a9e9
   1aa40:	0002f395 	.word	0x0002f395

0001aa44 <gatt_notify>:
{
   1aa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1aa48:	4614      	mov	r4, r2
   1aa4a:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1aa4c:	2294      	movs	r2, #148	; 0x94
   1aa4e:	6861      	ldr	r1, [r4, #4]
{
   1aa50:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1aa52:	f010 f839 	bl	2aac8 <bt_gatt_check_perm>
   1aa56:	b138      	cbz	r0, 1aa68 <gatt_notify+0x24>
		BT_WARN("Link is not encrypted");
   1aa58:	4820      	ldr	r0, [pc, #128]	; (1aadc <gatt_notify+0x98>)
   1aa5a:	2157      	movs	r1, #87	; 0x57
   1aa5c:	f00d fea0 	bl	287a0 <z_log_minimal_printk>
		return -EPERM;
   1aa60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1aa64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1aa68:	6861      	ldr	r1, [r4, #4]
   1aa6a:	2201      	movs	r2, #1
   1aa6c:	4630      	mov	r0, r6
   1aa6e:	f7ff fd6b 	bl	1a548 <bt_gatt_is_subscribed>
   1aa72:	b930      	cbnz	r0, 1aa82 <gatt_notify+0x3e>
			BT_WARN("Device is not subscribed to characteristic");
   1aa74:	481a      	ldr	r0, [pc, #104]	; (1aae0 <gatt_notify+0x9c>)
   1aa76:	2157      	movs	r1, #87	; 0x57
   1aa78:	f00d fe92 	bl	287a0 <z_log_minimal_printk>
			return -EINVAL;
   1aa7c:	f06f 0015 	mvn.w	r0, #21
   1aa80:	e7f0      	b.n	1aa64 <gatt_notify+0x20>
				sizeof(*nfy) + params->len);
   1aa82:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1aa84:	211b      	movs	r1, #27
   1aa86:	3202      	adds	r2, #2
   1aa88:	4630      	mov	r0, r6
   1aa8a:	f7fe faad 	bl	18fe8 <bt_att_create_pdu>
	if (!buf) {
   1aa8e:	4605      	mov	r5, r0
   1aa90:	b930      	cbnz	r0, 1aaa0 <gatt_notify+0x5c>
		BT_WARN("No buffer available to send notification");
   1aa92:	4814      	ldr	r0, [pc, #80]	; (1aae4 <gatt_notify+0xa0>)
   1aa94:	2157      	movs	r1, #87	; 0x57
   1aa96:	f00d fe83 	bl	287a0 <z_log_minimal_printk>
		return -ENOMEM;
   1aa9a:	f06f 000b 	mvn.w	r0, #11
   1aa9e:	e7e1      	b.n	1aa64 <gatt_notify+0x20>
   1aaa0:	f100 0908 	add.w	r9, r0, #8
   1aaa4:	2102      	movs	r1, #2
   1aaa6:	4648      	mov	r0, r9
   1aaa8:	f002 fb1c 	bl	1d0e4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1aaac:	4607      	mov	r7, r0
   1aaae:	89a1      	ldrh	r1, [r4, #12]
   1aab0:	f827 8b02 	strh.w	r8, [r7], #2
   1aab4:	4648      	mov	r0, r9
   1aab6:	f002 fb15 	bl	1d0e4 <net_buf_simple_add>
   1aaba:	89a2      	ldrh	r2, [r4, #12]
   1aabc:	68a1      	ldr	r1, [r4, #8]
   1aabe:	4638      	mov	r0, r7
   1aac0:	f011 fb45 	bl	2c14e <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1aac4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1aac8:	4628      	mov	r0, r5
   1aaca:	2301      	movs	r3, #1
   1aacc:	f00f fdd9 	bl	2a682 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1aad0:	4629      	mov	r1, r5
   1aad2:	4630      	mov	r0, r6
}
   1aad4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1aad8:	f7fe be3e 	b.w	19758 <bt_att_send>
   1aadc:	0002f305 	.word	0x0002f305
   1aae0:	0002f320 	.word	0x0002f320
   1aae4:	0002f3b7 	.word	0x0002f3b7

0001aae8 <bt_gatt_notify_cb>:
{
   1aae8:	b530      	push	{r4, r5, lr}
   1aaea:	4605      	mov	r5, r0
   1aaec:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1aaee:	460c      	mov	r4, r1
   1aaf0:	b951      	cbnz	r1, 1ab08 <bt_gatt_notify_cb+0x20>
   1aaf2:	4941      	ldr	r1, [pc, #260]	; (1abf8 <bt_gatt_notify_cb+0x110>)
   1aaf4:	4841      	ldr	r0, [pc, #260]	; (1abfc <bt_gatt_notify_cb+0x114>)
   1aaf6:	f640 222b 	movw	r2, #2603	; 0xa2b
   1aafa:	f00d fe43 	bl	28784 <assert_print>
   1aafe:	483e      	ldr	r0, [pc, #248]	; (1abf8 <bt_gatt_notify_cb+0x110>)
   1ab00:	f640 212b 	movw	r1, #2603	; 0xa2b
   1ab04:	f00d fe37 	bl	28776 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1ab08:	6863      	ldr	r3, [r4, #4]
   1ab0a:	b963      	cbnz	r3, 1ab26 <bt_gatt_notify_cb+0x3e>
   1ab0c:	6823      	ldr	r3, [r4, #0]
   1ab0e:	b953      	cbnz	r3, 1ab26 <bt_gatt_notify_cb+0x3e>
   1ab10:	4939      	ldr	r1, [pc, #228]	; (1abf8 <bt_gatt_notify_cb+0x110>)
   1ab12:	483a      	ldr	r0, [pc, #232]	; (1abfc <bt_gatt_notify_cb+0x114>)
   1ab14:	f640 222c 	movw	r2, #2604	; 0xa2c
   1ab18:	f00d fe34 	bl	28784 <assert_print>
   1ab1c:	4836      	ldr	r0, [pc, #216]	; (1abf8 <bt_gatt_notify_cb+0x110>)
   1ab1e:	f640 212c 	movw	r1, #2604	; 0xa2c
   1ab22:	f00d fe28 	bl	28776 <assert_post_action>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ab26:	4836      	ldr	r0, [pc, #216]	; (1ac00 <bt_gatt_notify_cb+0x118>)
   1ab28:	f00f fe2d 	bl	2a786 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1ab2c:	0742      	lsls	r2, r0, #29
   1ab2e:	d55d      	bpl.n	1abec <bt_gatt_notify_cb+0x104>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1ab30:	b115      	cbz	r5, 1ab38 <bt_gatt_notify_cb+0x50>
   1ab32:	7b6b      	ldrb	r3, [r5, #13]
   1ab34:	2b07      	cmp	r3, #7
   1ab36:	d15c      	bne.n	1abf2 <bt_gatt_notify_cb+0x10a>
	data.attr = params->attr;
   1ab38:	6860      	ldr	r0, [r4, #4]
   1ab3a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1ab3c:	f7ff fafe 	bl	1a13c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1ab40:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1ab42:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1ab46:	b33a      	cbz	r2, 1ab98 <bt_gatt_notify_cb+0xb0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ab48:	a905      	add	r1, sp, #20
   1ab4a:	9102      	str	r1, [sp, #8]
   1ab4c:	492d      	ldr	r1, [pc, #180]	; (1ac04 <bt_gatt_notify_cb+0x11c>)
   1ab4e:	9101      	str	r1, [sp, #4]
   1ab50:	2101      	movs	r1, #1
	found->attr = NULL;
   1ab52:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ab54:	9100      	str	r1, [sp, #0]
   1ab56:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1ab5a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ab5c:	f7ff fb32 	bl	1a1c4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1ab60:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1ab62:	b91b      	cbnz	r3, 1ab6c <bt_gatt_notify_cb+0x84>
			return -ENOENT;
   1ab64:	f06f 0001 	mvn.w	r0, #1
}
   1ab68:	b00b      	add	sp, #44	; 0x2c
   1ab6a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1ab6c:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1ab6e:	9b05      	ldr	r3, [sp, #20]
   1ab70:	6818      	ldr	r0, [r3, #0]
   1ab72:	2300      	movs	r3, #0
   1ab74:	f88d 3010 	strb.w	r3, [sp, #16]
   1ab78:	a904      	add	r1, sp, #16
   1ab7a:	f642 0303 	movw	r3, #10243	; 0x2803
   1ab7e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1ab82:	f00e fc1f 	bl	293c4 <bt_uuid_cmp>
   1ab86:	b970      	cbnz	r0, 1aba6 <bt_gatt_notify_cb+0xbe>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1ab88:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1ab8a:	68c3      	ldr	r3, [r0, #12]
   1ab8c:	799b      	ldrb	r3, [r3, #6]
   1ab8e:	06db      	lsls	r3, r3, #27
   1ab90:	d405      	bmi.n	1ab9e <bt_gatt_notify_cb+0xb6>
			return -EINVAL;
   1ab92:	f06f 0015 	mvn.w	r0, #21
   1ab96:	e7e7      	b.n	1ab68 <bt_gatt_notify_cb+0x80>
		if (!data.handle) {
   1ab98:	2800      	cmp	r0, #0
   1ab9a:	d1e8      	bne.n	1ab6e <bt_gatt_notify_cb+0x86>
   1ab9c:	e7e2      	b.n	1ab64 <bt_gatt_notify_cb+0x7c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1ab9e:	f00f ff41 	bl	2aa24 <bt_gatt_attr_value_handle>
   1aba2:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1aba6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1abaa:	b12d      	cbz	r5, 1abb8 <bt_gatt_notify_cb+0xd0>
		return gatt_notify(conn, data.handle, params);
   1abac:	4601      	mov	r1, r0
   1abae:	4622      	mov	r2, r4
   1abb0:	4628      	mov	r0, r5
   1abb2:	f7ff ff47 	bl	1aa44 <gatt_notify>
   1abb6:	e7d7      	b.n	1ab68 <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1abb8:	f642 1202 	movw	r2, #10498	; 0x2902
   1abbc:	f8ad 2012 	strh.w	r2, [sp, #18]
   1abc0:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1abc2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1abc6:	9202      	str	r2, [sp, #8]
   1abc8:	4a0f      	ldr	r2, [pc, #60]	; (1ac08 <bt_gatt_notify_cb+0x120>)
	data.err = -ENOTCONN;
   1abca:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1abcc:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1abce:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1abd2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1abd6:	aa04      	add	r2, sp, #16
   1abd8:	462b      	mov	r3, r5
   1abda:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1abde:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1abe0:	f88d 5010 	strb.w	r5, [sp, #16]
   1abe4:	f7ff faee 	bl	1a1c4 <bt_gatt_foreach_attr_type>
	return data.err;
   1abe8:	9807      	ldr	r0, [sp, #28]
   1abea:	e7bd      	b.n	1ab68 <bt_gatt_notify_cb+0x80>
		return -EAGAIN;
   1abec:	f06f 000a 	mvn.w	r0, #10
   1abf0:	e7ba      	b.n	1ab68 <bt_gatt_notify_cb+0x80>
		return -ENOTCONN;
   1abf2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1abf6:	e7b7      	b.n	1ab68 <bt_gatt_notify_cb+0x80>
   1abf8:	0002f281 	.word	0x0002f281
   1abfc:	0002d509 	.word	0x0002d509
   1ac00:	2000041c 	.word	0x2000041c
   1ac04:	0002a6d1 	.word	0x0002a6d1
   1ac08:	0001ac0d 	.word	0x0001ac0d

0001ac0c <notify_cb>:
{
   1ac0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ac10:	4b41      	ldr	r3, [pc, #260]	; (1ad18 <notify_cb+0x10c>)
{
   1ac12:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ac14:	6882      	ldr	r2, [r0, #8]
   1ac16:	429a      	cmp	r2, r3
{
   1ac18:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ac1a:	d12f      	bne.n	1ac7c <notify_cb+0x70>
	ccc = attr->user_data;
   1ac1c:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1ac20:	4b3e      	ldr	r3, [pc, #248]	; (1ad1c <notify_cb+0x110>)
   1ac22:	4598      	cmp	r8, r3
   1ac24:	d11e      	bne.n	1ac64 <notify_cb+0x58>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ac26:	2600      	movs	r6, #0
   1ac28:	4d3d      	ldr	r5, [pc, #244]	; (1ad20 <notify_cb+0x114>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ac2a:	46b1      	mov	r9, r6
   1ac2c:	2207      	movs	r2, #7
   1ac2e:	4669      	mov	r1, sp
   1ac30:	4628      	mov	r0, r5
   1ac32:	f8cd 9000 	str.w	r9, [sp]
   1ac36:	f8cd 9003 	str.w	r9, [sp, #3]
   1ac3a:	f011 fa78 	bl	2c12e <memcmp>
   1ac3e:	b178      	cbz	r0, 1ac60 <notify_cb+0x54>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1ac40:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1ac44:	2207      	movs	r2, #7
   1ac46:	4629      	mov	r1, r5
   1ac48:	f7fd faa6 	bl	18198 <bt_conn_lookup_state_le>
			if (!conn) {
   1ac4c:	b9e8      	cbnz	r0, 1ac8a <notify_cb+0x7e>
				sc = (struct sc_data *)data->ind_params->data;
   1ac4e:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1ac50:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1ac54:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1ac56:	4629      	mov	r1, r5
   1ac58:	8853      	ldrh	r3, [r2, #2]
   1ac5a:	8812      	ldrh	r2, [r2, #0]
   1ac5c:	f7ff f89c 	bl	19d98 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ac60:	350c      	adds	r5, #12
   1ac62:	b186      	cbz	r6, 1ac86 <notify_cb+0x7a>
		if (cfg->value != data->type) {
   1ac64:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   1ac68:	89a3      	ldrh	r3, [r4, #12]
   1ac6a:	429a      	cmp	r2, r3
   1ac6c:	d106      	bne.n	1ac7c <notify_cb+0x70>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ac6e:	4641      	mov	r1, r8
   1ac70:	f811 0b01 	ldrb.w	r0, [r1], #1
   1ac74:	f7fd fa56 	bl	18124 <bt_conn_lookup_addr_le>
		if (!conn) {
   1ac78:	4606      	mov	r6, r0
   1ac7a:	b948      	cbnz	r0, 1ac90 <notify_cb+0x84>
	return BT_GATT_ITER_CONTINUE;
   1ac7c:	2701      	movs	r7, #1
}
   1ac7e:	4638      	mov	r0, r7
   1ac80:	b003      	add	sp, #12
   1ac82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ac86:	2601      	movs	r6, #1
   1ac88:	e7d0      	b.n	1ac2c <notify_cb+0x20>
			bt_conn_unref(conn);
   1ac8a:	f7fc ffaf 	bl	17bec <bt_conn_unref>
   1ac8e:	e7e7      	b.n	1ac60 <notify_cb+0x54>
		if (conn->state != BT_CONN_CONNECTED) {
   1ac90:	7b43      	ldrb	r3, [r0, #13]
   1ac92:	2b07      	cmp	r3, #7
   1ac94:	d002      	beq.n	1ac9c <notify_cb+0x90>
			bt_conn_unref(conn);
   1ac96:	f7fc ffa9 	bl	17bec <bt_conn_unref>
			continue;
   1ac9a:	e7ef      	b.n	1ac7c <notify_cb+0x70>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1ac9c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1aca0:	b123      	cbz	r3, 1acac <notify_cb+0xa0>
   1aca2:	4639      	mov	r1, r7
   1aca4:	4798      	blx	r3
   1aca6:	b908      	cbnz	r0, 1acac <notify_cb+0xa0>
			bt_conn_unref(conn);
   1aca8:	4630      	mov	r0, r6
   1acaa:	e7f4      	b.n	1ac96 <notify_cb+0x8a>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1acac:	4639      	mov	r1, r7
   1acae:	2294      	movs	r2, #148	; 0x94
   1acb0:	4630      	mov	r0, r6
   1acb2:	f00f ff09 	bl	2aac8 <bt_gatt_check_perm>
   1acb6:	4607      	mov	r7, r0
   1acb8:	b120      	cbz	r0, 1acc4 <notify_cb+0xb8>
			BT_WARN("Link is not encrypted");
   1acba:	481a      	ldr	r0, [pc, #104]	; (1ad24 <notify_cb+0x118>)
   1acbc:	2157      	movs	r1, #87	; 0x57
   1acbe:	f00d fd6f 	bl	287a0 <z_log_minimal_printk>
   1acc2:	e7f1      	b.n	1aca8 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1acc4:	89a3      	ldrh	r3, [r4, #12]
   1acc6:	2b02      	cmp	r3, #2
   1acc8:	d116      	bne.n	1acf8 <notify_cb+0xec>
   1acca:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1acce:	079a      	lsls	r2, r3, #30
   1acd0:	d51f      	bpl.n	1ad12 <notify_cb+0x106>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1acd2:	6922      	ldr	r2, [r4, #16]
   1acd4:	88a1      	ldrh	r1, [r4, #4]
   1acd6:	4630      	mov	r0, r6
   1acd8:	f7ff fcf0 	bl	1a6bc <gatt_indicate>
			if (err == 0) {
   1acdc:	4605      	mov	r5, r0
   1acde:	b918      	cbnz	r0, 1ace8 <notify_cb+0xdc>
				data->ind_params->_ref++;
   1ace0:	6922      	ldr	r2, [r4, #16]
   1ace2:	7d93      	ldrb	r3, [r2, #22]
   1ace4:	3301      	adds	r3, #1
   1ace6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1ace8:	4630      	mov	r0, r6
   1acea:	f7fc ff7f 	bl	17bec <bt_conn_unref>
		if (err < 0) {
   1acee:	2d00      	cmp	r5, #0
   1acf0:	dbc5      	blt.n	1ac7e <notify_cb+0x72>
		data->err = 0;
   1acf2:	2300      	movs	r3, #0
   1acf4:	60a3      	str	r3, [r4, #8]
   1acf6:	e7c1      	b.n	1ac7c <notify_cb+0x70>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1acf8:	2b01      	cmp	r3, #1
   1acfa:	d10a      	bne.n	1ad12 <notify_cb+0x106>
   1acfc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1ad00:	07db      	lsls	r3, r3, #31
   1ad02:	d506      	bpl.n	1ad12 <notify_cb+0x106>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1ad04:	6922      	ldr	r2, [r4, #16]
   1ad06:	88a1      	ldrh	r1, [r4, #4]
   1ad08:	4630      	mov	r0, r6
   1ad0a:	f7ff fe9b 	bl	1aa44 <gatt_notify>
   1ad0e:	4605      	mov	r5, r0
   1ad10:	e7ea      	b.n	1ace8 <notify_cb+0xdc>
			err = 0;
   1ad12:	463d      	mov	r5, r7
   1ad14:	e7e8      	b.n	1ace8 <notify_cb+0xdc>
   1ad16:	bf00      	nop
   1ad18:	00019c61 	.word	0x00019c61
   1ad1c:	200006bc 	.word	0x200006bc
   1ad20:	200036d5 	.word	0x200036d5
   1ad24:	0002f305 	.word	0x0002f305

0001ad28 <bt_gatt_connected>:
{
   1ad28:	b570      	push	{r4, r5, r6, lr}
   1ad2a:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ad2c:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1ad30:	4604      	mov	r4, r0
	data.conn = conn;
   1ad32:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   1ad34:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ad36:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1ad38:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ad3c:	4629      	mov	r1, r5
   1ad3e:	f00e fcba 	bl	296b6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1ad42:	b190      	cbz	r0, 1ad6a <bt_gatt_connected+0x42>
		if (conn->id) {
   1ad44:	7a22      	ldrb	r2, [r4, #8]
   1ad46:	b34a      	cbz	r2, 1ad9c <bt_gatt_connected+0x74>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1ad48:	ae02      	add	r6, sp, #8
   1ad4a:	2104      	movs	r1, #4
   1ad4c:	4630      	mov	r0, r6
   1ad4e:	f00d fad4 	bl	282fa <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1ad52:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1ad54:	4a12      	ldr	r2, [pc, #72]	; (1ada0 <bt_gatt_connected+0x78>)
   1ad56:	2124      	movs	r1, #36	; 0x24
   1ad58:	a805      	add	r0, sp, #20
   1ad5a:	462b      	mov	r3, r5
   1ad5c:	f7fa fb26 	bl	153ac <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1ad60:	aa05      	add	r2, sp, #20
   1ad62:	4910      	ldr	r1, [pc, #64]	; (1ada4 <bt_gatt_connected+0x7c>)
   1ad64:	4610      	mov	r0, r2
   1ad66:	f7f8 ffcf 	bl	13d08 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ad6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ad6e:	4a0e      	ldr	r2, [pc, #56]	; (1ada8 <bt_gatt_connected+0x80>)
   1ad70:	ab03      	add	r3, sp, #12
   1ad72:	2001      	movs	r0, #1
   1ad74:	f00f fe9d 	bl	2aab2 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1ad78:	4620      	mov	r0, r4
   1ad7a:	f00e ff2c 	bl	29bd6 <bt_conn_get_security>
   1ad7e:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1ad82:	4288      	cmp	r0, r1
   1ad84:	d208      	bcs.n	1ad98 <bt_gatt_connected+0x70>
		int err = bt_conn_set_security(conn, data.sec);
   1ad86:	4620      	mov	r0, r4
   1ad88:	f00e fef5 	bl	29b76 <bt_conn_set_security>
		if (err) {
   1ad8c:	4602      	mov	r2, r0
   1ad8e:	b118      	cbz	r0, 1ad98 <bt_gatt_connected+0x70>
			BT_WARN("Failed to set security for bonded peer (%d)",
   1ad90:	4806      	ldr	r0, [pc, #24]	; (1adac <bt_gatt_connected+0x84>)
   1ad92:	2157      	movs	r1, #87	; 0x57
   1ad94:	f00d fd04 	bl	287a0 <z_log_minimal_printk>
}
   1ad98:	b00e      	add	sp, #56	; 0x38
   1ad9a:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1ad9c:	9200      	str	r2, [sp, #0]
   1ad9e:	e7d9      	b.n	1ad54 <bt_gatt_connected+0x2c>
   1ada0:	0002f2f0 	.word	0x0002f2f0
   1ada4:	0001a441 	.word	0x0001a441
   1ada8:	0001a951 	.word	0x0001a951
   1adac:	0002f3e5 	.word	0x0002f3e5

0001adb0 <bt_gatt_att_max_mtu_changed>:
{
   1adb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1adb2:	4b08      	ldr	r3, [pc, #32]	; (1add4 <bt_gatt_att_max_mtu_changed+0x24>)
   1adb4:	681c      	ldr	r4, [r3, #0]
   1adb6:	4605      	mov	r5, r0
   1adb8:	460e      	mov	r6, r1
   1adba:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1adbc:	b14c      	cbz	r4, 1add2 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1adbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1adc2:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1adc4:	b11b      	cbz	r3, 1adce <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1adc6:	463a      	mov	r2, r7
   1adc8:	4631      	mov	r1, r6
   1adca:	4628      	mov	r0, r5
   1adcc:	4798      	blx	r3
	return node->next;
   1adce:	6864      	ldr	r4, [r4, #4]
   1add0:	e7f4      	b.n	1adbc <bt_gatt_att_max_mtu_changed+0xc>
}
   1add2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1add4:	2000285c 	.word	0x2000285c

0001add8 <bt_gatt_encrypt_change>:
{
   1add8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1adda:	4a06      	ldr	r2, [pc, #24]	; (1adf4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1addc:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1adde:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1ade0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ade2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1ade6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1adea:	f00f fe62 	bl	2aab2 <bt_gatt_foreach_attr>
}
   1adee:	b003      	add	sp, #12
   1adf0:	f85d fb04 	ldr.w	pc, [sp], #4
   1adf4:	0001a951 	.word	0x0001a951

0001adf8 <bt_gatt_store_ccc>:
{
   1adf8:	b570      	push	{r4, r5, r6, lr}
   1adfa:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   1adfc:	2300      	movs	r3, #0
{
   1adfe:	4604      	mov	r4, r0
   1ae00:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1ae02:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1ae04:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1ae08:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1ae0a:	4a15      	ldr	r2, [pc, #84]	; (1ae60 <bt_gatt_store_ccc+0x68>)
   1ae0c:	ab0d      	add	r3, sp, #52	; 0x34
   1ae0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ae12:	2001      	movs	r0, #1
   1ae14:	f00f fe4d 	bl	2aab2 <bt_gatt_foreach_attr>
	if (id) {
   1ae18:	b1ec      	cbz	r4, 1ae56 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1ae1a:	ae03      	add	r6, sp, #12
   1ae1c:	4622      	mov	r2, r4
   1ae1e:	2104      	movs	r1, #4
   1ae20:	4630      	mov	r0, r6
   1ae22:	f00d fa6a 	bl	282fa <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1ae26:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1ae28:	4a0e      	ldr	r2, [pc, #56]	; (1ae64 <bt_gatt_store_ccc+0x6c>)
   1ae2a:	462b      	mov	r3, r5
   1ae2c:	2124      	movs	r1, #36	; 0x24
   1ae2e:	a804      	add	r0, sp, #16
   1ae30:	f7fa fabc 	bl	153ac <bt_settings_encode_key>
	if (save.count) {
   1ae34:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1ae36:	b182      	cbz	r2, 1ae5a <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   1ae38:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1ae3a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1ae3c:	a804      	add	r0, sp, #16
   1ae3e:	f7f8 ff03 	bl	13c48 <settings_save_one>
	if (err) {
   1ae42:	4604      	mov	r4, r0
   1ae44:	b120      	cbz	r0, 1ae50 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1ae46:	4602      	mov	r2, r0
   1ae48:	2145      	movs	r1, #69	; 0x45
   1ae4a:	4807      	ldr	r0, [pc, #28]	; (1ae68 <bt_gatt_store_ccc+0x70>)
   1ae4c:	f00d fca8 	bl	287a0 <z_log_minimal_printk>
}
   1ae50:	4620      	mov	r0, r4
   1ae52:	b040      	add	sp, #256	; 0x100
   1ae54:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1ae56:	9400      	str	r4, [sp, #0]
   1ae58:	e7e6      	b.n	1ae28 <bt_gatt_store_ccc+0x30>
		str = NULL;
   1ae5a:	4611      	mov	r1, r2
   1ae5c:	e7ee      	b.n	1ae3c <bt_gatt_store_ccc+0x44>
   1ae5e:	bf00      	nop
   1ae60:	00019c29 	.word	0x00019c29
   1ae64:	0002f2f0 	.word	0x0002f2f0
   1ae68:	0002f416 	.word	0x0002f416

0001ae6c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1ae6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ae6e:	4603      	mov	r3, r0
   1ae70:	4a3d      	ldr	r2, [pc, #244]	; (1af68 <bt_gatt_disconnected+0xfc>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1ae72:	4e3e      	ldr	r6, [pc, #248]	; (1af6c <bt_gatt_disconnected+0x100>)
{
   1ae74:	b08d      	sub	sp, #52	; 0x34
   1ae76:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ae78:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ae7c:	2001      	movs	r0, #1
   1ae7e:	f00f fe18 	bl	2aab2 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1ae82:	4620      	mov	r0, r4
   1ae84:	f7fc ffc2 	bl	17e0c <bt_conn_index>
   1ae88:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1ae8a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1ae8e:	b120      	cbz	r0, 1ae9a <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1ae90:	f7fc feac 	bl	17bec <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1ae94:	2300      	movs	r3, #0
   1ae96:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1ae9a:	4835      	ldr	r0, [pc, #212]	; (1af70 <bt_gatt_disconnected+0x104>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ae9c:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1aea0:	f008 f8ac 	bl	22ffc <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aea4:	7a20      	ldrb	r0, [r4, #8]
   1aea6:	4629      	mov	r1, r5
   1aea8:	f00e fc05 	bl	296b6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1aeac:	b378      	cbz	r0, 1af0e <bt_gatt_disconnected+0xa2>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1aeae:	4629      	mov	r1, r5
   1aeb0:	7a20      	ldrb	r0, [r4, #8]
   1aeb2:	f7ff ffa1 	bl	1adf8 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1aeb6:	4620      	mov	r0, r4
   1aeb8:	f7fe fd10 	bl	198dc <find_cf_cfg>
	if (!cfg) {
   1aebc:	4606      	mov	r6, r0
   1aebe:	2800      	cmp	r0, #0
   1aec0:	d045      	beq.n	1af4e <bt_gatt_disconnected+0xe2>
		if (conn->id) {
   1aec2:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1aec4:	3608      	adds	r6, #8
		if (conn->id) {
   1aec6:	2a00      	cmp	r2, #0
   1aec8:	d043      	beq.n	1af52 <bt_gatt_disconnected+0xe6>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1aeca:	af02      	add	r7, sp, #8
   1aecc:	2104      	movs	r1, #4
   1aece:	4638      	mov	r0, r7
   1aed0:	f00d fa13 	bl	282fa <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1aed4:	9700      	str	r7, [sp, #0]
   1aed6:	462b      	mov	r3, r5
   1aed8:	4a26      	ldr	r2, [pc, #152]	; (1af74 <bt_gatt_disconnected+0x108>)
   1aeda:	2124      	movs	r1, #36	; 0x24
   1aedc:	a803      	add	r0, sp, #12
   1aede:	f7fa fa65 	bl	153ac <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1aee2:	7a23      	ldrb	r3, [r4, #8]
   1aee4:	2701      	movs	r7, #1
   1aee6:	b93b      	cbnz	r3, 1aef8 <bt_gatt_disconnected+0x8c>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1aee8:	2300      	movs	r3, #0
   1aeea:	9300      	str	r3, [sp, #0]
   1aeec:	4a21      	ldr	r2, [pc, #132]	; (1af74 <bt_gatt_disconnected+0x108>)
   1aeee:	462b      	mov	r3, r5
   1aef0:	2124      	movs	r1, #36	; 0x24
   1aef2:	a803      	add	r0, sp, #12
   1aef4:	f7fa fa5a 	bl	153ac <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1aef8:	463a      	mov	r2, r7
   1aefa:	4631      	mov	r1, r6
   1aefc:	a803      	add	r0, sp, #12
   1aefe:	f7f8 fea3 	bl	13c48 <settings_save_one>
	if (err) {
   1af02:	4602      	mov	r2, r0
   1af04:	b118      	cbz	r0, 1af0e <bt_gatt_disconnected+0xa2>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1af06:	481c      	ldr	r0, [pc, #112]	; (1af78 <bt_gatt_disconnected+0x10c>)
   1af08:	2145      	movs	r1, #69	; 0x45
   1af0a:	f00d fc49 	bl	287a0 <z_log_minimal_printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1af0e:	7a20      	ldrb	r0, [r4, #8]
   1af10:	4629      	mov	r1, r5
   1af12:	f00e fbd0 	bl	296b6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1af16:	b150      	cbz	r0, 1af2e <bt_gatt_disconnected+0xc2>
		struct addr_with_id addr_with_id = {
   1af18:	7a23      	ldrb	r3, [r4, #8]
   1af1a:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1af1e:	4a17      	ldr	r2, [pc, #92]	; (1af7c <bt_gatt_disconnected+0x110>)
		struct addr_with_id addr_with_id = {
   1af20:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1af22:	ab03      	add	r3, sp, #12
   1af24:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1af28:	2001      	movs	r0, #1
   1af2a:	f00f fdc2 	bl	2aab2 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1af2e:	4620      	mov	r0, r4
   1af30:	f7fe fcd4 	bl	198dc <find_cf_cfg>
	if (!cfg) {
   1af34:	4606      	mov	r6, r0
   1af36:	b1a8      	cbz	r0, 1af64 <bt_gatt_disconnected+0xf8>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1af38:	7a20      	ldrb	r0, [r4, #8]
   1af3a:	4629      	mov	r1, r5
   1af3c:	f00e fbbb 	bl	296b6 <bt_addr_le_is_bonded>
   1af40:	b948      	cbnz	r0, 1af56 <bt_gatt_disconnected+0xea>
		clear_cf_cfg(cfg);
   1af42:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1af44:	b00d      	add	sp, #52	; 0x34
   1af46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   1af4a:	f00f bce5 	b.w	2a918 <clear_cf_cfg>
		len = 0;
   1af4e:	4607      	mov	r7, r0
   1af50:	e7ca      	b.n	1aee8 <bt_gatt_disconnected+0x7c>
   1af52:	2701      	movs	r7, #1
   1af54:	e7c8      	b.n	1aee8 <bt_gatt_disconnected+0x7c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1af56:	4629      	mov	r1, r5
   1af58:	1c70      	adds	r0, r6, #1
}
   1af5a:	b00d      	add	sp, #52	; 0x34
   1af5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1af60:	f00f bc35 	b.w	2a7ce <bt_addr_le_copy>
}
   1af64:	b00d      	add	sp, #52	; 0x34
   1af66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af68:	00019ea9 	.word	0x00019ea9
   1af6c:	20001c10 	.word	0x20001c10
   1af70:	20001c18 	.word	0x20001c18
   1af74:	0002f46a 	.word	0x0002f46a
   1af78:	0002f439 	.word	0x0002f439
   1af7c:	00019b79 	.word	0x00019b79

0001af80 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1af80:	4601      	mov	r1, r0
   1af82:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1af84:	4803      	ldr	r0, [pc, #12]	; (1af94 <smp_find+0x14>)
   1af86:	f00f fe24 	bl	2abd2 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1af8a:	2800      	cmp	r0, #0
}
   1af8c:	4802      	ldr	r0, [pc, #8]	; (1af98 <smp_find+0x18>)
   1af8e:	bf08      	it	eq
   1af90:	2000      	moveq	r0, #0
   1af92:	bd08      	pop	{r3, pc}
   1af94:	20001ca4 	.word	0x20001ca4
   1af98:	20001ca0 	.word	0x20001ca0

0001af9c <latch_auth_cb>:
{
   1af9c:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1af9e:	4a0c      	ldr	r2, [pc, #48]	; (1afd0 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1afa0:	6811      	ldr	r1, [r2, #0]
   1afa2:	4a0c      	ldr	r2, [pc, #48]	; (1afd4 <latch_auth_cb+0x38>)
   1afa4:	f3bf 8f5b 	dmb	ish
   1afa8:	f500 73d8 	add.w	r3, r0, #432	; 0x1b0
   1afac:	e853 4f00 	ldrex	r4, [r3]
   1afb0:	4294      	cmp	r4, r2
   1afb2:	d104      	bne.n	1afbe <latch_auth_cb+0x22>
   1afb4:	e843 1c00 	strex	ip, r1, [r3]
   1afb8:	f1bc 0f00 	cmp.w	ip, #0
   1afbc:	d1f6      	bne.n	1afac <latch_auth_cb+0x10>
   1afbe:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1afc2:	f3bf 8f5b 	dmb	ish
   1afc6:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
   1afca:	f3bf 8f5b 	dmb	ish
}
   1afce:	bd10      	pop	{r4, pc}
   1afd0:	2000272c 	.word	0x2000272c
   1afd4:	20001ca0 	.word	0x20001ca0

0001afd8 <get_io_capa>:
{
   1afd8:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1afda:	f7ff ffdf 	bl	1af9c <latch_auth_cb>
	if (!smp_auth_cb) {
   1afde:	b1b8      	cbz	r0, 1b010 <get_io_capa+0x38>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1afe0:	6803      	ldr	r3, [r0, #0]
   1afe2:	b143      	cbz	r3, 1aff6 <get_io_capa+0x1e>
   1afe4:	6842      	ldr	r2, [r0, #4]
   1afe6:	b132      	cbz	r2, 1aff6 <get_io_capa+0x1e>
   1afe8:	6882      	ldr	r2, [r0, #8]
   1afea:	b912      	cbnz	r2, 1aff2 <get_io_capa+0x1a>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1afec:	4a0b      	ldr	r2, [pc, #44]	; (1b01c <get_io_capa+0x44>)
   1afee:	7812      	ldrb	r2, [r2, #0]
   1aff0:	b93a      	cbnz	r2, 1b002 <get_io_capa+0x2a>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1aff2:	2004      	movs	r0, #4
   1aff4:	e00b      	b.n	1b00e <get_io_capa+0x36>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1aff6:	4a09      	ldr	r2, [pc, #36]	; (1b01c <get_io_capa+0x44>)
   1aff8:	7812      	ldrb	r2, [r2, #0]
   1affa:	b112      	cbz	r2, 1b002 <get_io_capa+0x2a>
   1affc:	b10b      	cbz	r3, 1b002 <get_io_capa+0x2a>
   1affe:	6882      	ldr	r2, [r0, #8]
   1b000:	b942      	cbnz	r2, 1b014 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_entry) {
   1b002:	6842      	ldr	r2, [r0, #4]
   1b004:	b942      	cbnz	r2, 1b018 <get_io_capa+0x40>
		return BT_SMP_IO_DISPLAY_ONLY;
   1b006:	2b00      	cmp	r3, #0
   1b008:	bf0c      	ite	eq
   1b00a:	2003      	moveq	r0, #3
   1b00c:	2000      	movne	r0, #0
}
   1b00e:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1b010:	2003      	movs	r0, #3
   1b012:	e7fc      	b.n	1b00e <get_io_capa+0x36>
		return BT_SMP_IO_DISPLAY_YESNO;
   1b014:	2001      	movs	r0, #1
   1b016:	e7fa      	b.n	1b00e <get_io_capa+0x36>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1b018:	2002      	movs	r0, #2
   1b01a:	e7f8      	b.n	1b00e <get_io_capa+0x36>
   1b01c:	200037d8 	.word	0x200037d8

0001b020 <get_auth>:
	if (sc_supported) {
   1b020:	4b0c      	ldr	r3, [pc, #48]	; (1b054 <get_auth+0x34>)
   1b022:	781b      	ldrb	r3, [r3, #0]
{
   1b024:	b510      	push	{r4, lr}
	if (sc_supported) {
   1b026:	b17b      	cbz	r3, 1b048 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1b028:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b02c:	f7ff ffd4 	bl	1afd8 <get_io_capa>
	if (bondable) {
   1b030:	4b09      	ldr	r3, [pc, #36]	; (1b058 <get_auth+0x38>)
   1b032:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1b034:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1b036:	bf0c      	ite	eq
   1b038:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1b03c:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1b040:	b12b      	cbz	r3, 1b04e <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1b042:	f044 0001 	orr.w	r0, r4, #1
}
   1b046:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1b048:	f001 0407 	and.w	r4, r1, #7
   1b04c:	e7ee      	b.n	1b02c <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1b04e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1b052:	e7f8      	b.n	1b046 <get_auth+0x26>
   1b054:	200037d8 	.word	0x200037d8
   1b058:	200009b7 	.word	0x200009b7

0001b05c <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b05c:	4288      	cmp	r0, r1
{
   1b05e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b060:	4604      	mov	r4, r0
   1b062:	460d      	mov	r5, r1
   1b064:	4616      	mov	r6, r2
   1b066:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b06a:	d916      	bls.n	1b09a <sys_memcpy_swap+0x3e>
   1b06c:	188b      	adds	r3, r1, r2
   1b06e:	4298      	cmp	r0, r3
   1b070:	d20a      	bcs.n	1b088 <sys_memcpy_swap+0x2c>
   1b072:	490b      	ldr	r1, [pc, #44]	; (1b0a0 <sys_memcpy_swap+0x44>)
   1b074:	480b      	ldr	r0, [pc, #44]	; (1b0a4 <sys_memcpy_swap+0x48>)
   1b076:	f240 2217 	movw	r2, #535	; 0x217
   1b07a:	f00d fb83 	bl	28784 <assert_print>
   1b07e:	4808      	ldr	r0, [pc, #32]	; (1b0a0 <sys_memcpy_swap+0x44>)
   1b080:	f240 2117 	movw	r1, #535	; 0x217
   1b084:	f00d fb77 	bl	28776 <assert_post_action>
	psrc += length - 1;
   1b088:	3e01      	subs	r6, #1
   1b08a:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   1b08c:	f815 3901 	ldrb.w	r3, [r5], #-1
   1b090:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   1b094:	42bc      	cmp	r4, r7
   1b096:	d1f9      	bne.n	1b08c <sys_memcpy_swap+0x30>
}
   1b098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1b09a:	d0ea      	beq.n	1b072 <sys_memcpy_swap+0x16>
   1b09c:	42b9      	cmp	r1, r7
   1b09e:	e7e7      	b.n	1b070 <sys_memcpy_swap+0x14>
   1b0a0:	0002f47b 	.word	0x0002f47b
   1b0a4:	0002d509 	.word	0x0002d509

0001b0a8 <smp_chan_get>:
{
   1b0a8:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1b0aa:	2106      	movs	r1, #6
   1b0ac:	f00e fe42 	bl	29d34 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1b0b0:	4604      	mov	r4, r0
   1b0b2:	b928      	cbnz	r0, 1b0c0 <smp_chan_get+0x18>
		BT_ERR("Unable to find SMP channel");
   1b0b4:	4804      	ldr	r0, [pc, #16]	; (1b0c8 <smp_chan_get+0x20>)
   1b0b6:	2145      	movs	r1, #69	; 0x45
   1b0b8:	f00d fb72 	bl	287a0 <z_log_minimal_printk>
}
   1b0bc:	4620      	mov	r0, r4
   1b0be:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1b0c0:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   1b0c4:	e7fa      	b.n	1b0bc <smp_chan_get+0x14>
   1b0c6:	bf00      	nop
   1b0c8:	0002f4ad 	.word	0x0002f4ad

0001b0cc <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1b0cc:	b508      	push	{r3, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1b0ce:	4b09      	ldr	r3, [pc, #36]	; (1b0f4 <bt_smp_accept+0x28>)
{
   1b0d0:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1b0d2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1b0d6:	b928      	cbnz	r0, 1b0e4 <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1b0d8:	4a07      	ldr	r2, [pc, #28]	; (1b0f8 <bt_smp_accept+0x2c>)
   1b0da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

		*chan = &smp->chan.chan;
   1b0de:	33ec      	adds	r3, #236	; 0xec
   1b0e0:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1b0e2:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   1b0e4:	4805      	ldr	r0, [pc, #20]	; (1b0fc <bt_smp_accept+0x30>)
   1b0e6:	2145      	movs	r1, #69	; 0x45
   1b0e8:	f00d fb5a 	bl	287a0 <z_log_minimal_printk>
   1b0ec:	f06f 000b 	mvn.w	r0, #11
   1b0f0:	e7f7      	b.n	1b0e2 <bt_smp_accept+0x16>
   1b0f2:	bf00      	nop
   1b0f4:	20001ca0 	.word	0x20001ca0
   1b0f8:	0002cd30 	.word	0x0002cd30
   1b0fc:	0002f4cd 	.word	0x0002f4cd

0001b100 <smp_init>:
{
   1b100:	b538      	push	{r3, r4, r5, lr}
__ssp_bos_icheck3(memset, void *, int)
   1b102:	22ec      	movs	r2, #236	; 0xec
   1b104:	4605      	mov	r5, r0
   1b106:	2100      	movs	r1, #0
   1b108:	f011 f85c 	bl	2c1c4 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1b10c:	2110      	movs	r1, #16
   1b10e:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1b112:	f004 fe33 	bl	1fd7c <bt_rand>
   1b116:	4604      	mov	r4, r0
   1b118:	b948      	cbnz	r0, 1b12e <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1b11a:	2105      	movs	r1, #5
   1b11c:	4628      	mov	r0, r5
   1b11e:	f00f fe56 	bl	2adce <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1b122:	f7fc fa2b 	bl	1757c <bt_pub_key_get>
   1b126:	4b03      	ldr	r3, [pc, #12]	; (1b134 <smp_init+0x34>)
   1b128:	6018      	str	r0, [r3, #0]
}
   1b12a:	4620      	mov	r0, r4
   1b12c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1b12e:	2408      	movs	r4, #8
   1b130:	e7fb      	b.n	1b12a <smp_init+0x2a>
   1b132:	bf00      	nop
   1b134:	200028a4 	.word	0x200028a4

0001b138 <smp_dhkey_generate>:
{
   1b138:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b13a:	1d05      	adds	r5, r0, #4
{
   1b13c:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b13e:	2108      	movs	r1, #8
   1b140:	4628      	mov	r0, r5
   1b142:	f00f fe44 	bl	2adce <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1b146:	4908      	ldr	r1, [pc, #32]	; (1b168 <smp_dhkey_generate+0x30>)
   1b148:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b14c:	f7fc fa26 	bl	1759c <bt_dh_key_gen>
	if (err) {
   1b150:	b140      	cbz	r0, 1b164 <smp_dhkey_generate+0x2c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1b152:	2108      	movs	r1, #8
   1b154:	4628      	mov	r0, r5
   1b156:	f00f fd66 	bl	2ac26 <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
   1b15a:	4804      	ldr	r0, [pc, #16]	; (1b16c <smp_dhkey_generate+0x34>)
   1b15c:	2145      	movs	r1, #69	; 0x45
   1b15e:	f00d fb1f 	bl	287a0 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b162:	2008      	movs	r0, #8
}
   1b164:	bd38      	pop	{r3, r4, r5, pc}
   1b166:	bf00      	nop
   1b168:	0002b267 	.word	0x0002b267
   1b16c:	0002f4f7 	.word	0x0002f4f7

0001b170 <smp_ident_info>:
{
   1b170:	b570      	push	{r4, r5, r6, lr}
   1b172:	460b      	mov	r3, r1
   1b174:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b176:	210d      	movs	r1, #13
   1b178:	3004      	adds	r0, #4
   1b17a:	f00f fd2a 	bl	2abd2 <atomic_test_bit>
   1b17e:	b1f8      	cbz	r0, 1b1c0 <smp_ident_info+0x50>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1b180:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1b182:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1b186:	f103 0690 	add.w	r6, r3, #144	; 0x90
   1b18a:	7a19      	ldrb	r1, [r3, #8]
   1b18c:	4632      	mov	r2, r6
   1b18e:	2002      	movs	r0, #2
   1b190:	f010 f8e5 	bl	2b35e <bt_keys_get_type>
		if (!keys) {
   1b194:	b948      	cbnz	r0, 1b1aa <smp_ident_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   1b196:	4630      	mov	r0, r6
   1b198:	f7fa f85a 	bl	15250 <bt_addr_le_str_real>
   1b19c:	2145      	movs	r1, #69	; 0x45
   1b19e:	4602      	mov	r2, r0
   1b1a0:	480a      	ldr	r0, [pc, #40]	; (1b1cc <smp_ident_info+0x5c>)
   1b1a2:	f00d fafd 	bl	287a0 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1b1a6:	2008      	movs	r0, #8
}
   1b1a8:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b1aa:	4622      	mov	r2, r4
   1b1ac:	f100 032a 	add.w	r3, r0, #42	; 0x2a
   1b1b0:	f104 0110 	add.w	r1, r4, #16
   1b1b4:	f852 0b04 	ldr.w	r0, [r2], #4
   1b1b8:	f843 0b04 	str.w	r0, [r3], #4
   1b1bc:	428a      	cmp	r2, r1
   1b1be:	d1f9      	bne.n	1b1b4 <smp_ident_info+0x44>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1b1c0:	4628      	mov	r0, r5
   1b1c2:	2109      	movs	r1, #9
   1b1c4:	f00f fe03 	bl	2adce <atomic_set_bit>
	return 0;
   1b1c8:	2000      	movs	r0, #0
   1b1ca:	e7ed      	b.n	1b1a8 <smp_ident_info+0x38>
   1b1cc:	0002f515 	.word	0x0002f515

0001b1d0 <smp_encrypt_info>:
{
   1b1d0:	b570      	push	{r4, r5, r6, lr}
   1b1d2:	460b      	mov	r3, r1
   1b1d4:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b1d6:	210d      	movs	r1, #13
   1b1d8:	3004      	adds	r0, #4
   1b1da:	f00f fcfa 	bl	2abd2 <atomic_test_bit>
   1b1de:	b1f8      	cbz	r0, 1b220 <smp_encrypt_info+0x50>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1b1e0:	689c      	ldr	r4, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1b1e2:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b1e6:	f103 0690 	add.w	r6, r3, #144	; 0x90
   1b1ea:	7a19      	ldrb	r1, [r3, #8]
   1b1ec:	4632      	mov	r2, r6
   1b1ee:	2004      	movs	r0, #4
   1b1f0:	f010 f8b5 	bl	2b35e <bt_keys_get_type>
		if (!keys) {
   1b1f4:	b948      	cbnz	r0, 1b20a <smp_encrypt_info+0x3a>
			BT_ERR("Unable to get keys for %s",
   1b1f6:	4630      	mov	r0, r6
   1b1f8:	f7fa f82a 	bl	15250 <bt_addr_le_str_real>
   1b1fc:	2145      	movs	r1, #69	; 0x45
   1b1fe:	4602      	mov	r2, r0
   1b200:	480a      	ldr	r0, [pc, #40]	; (1b22c <smp_encrypt_info+0x5c>)
   1b202:	f00d facd 	bl	287a0 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1b206:	2008      	movs	r0, #8
}
   1b208:	bd70      	pop	{r4, r5, r6, pc}
   1b20a:	4622      	mov	r2, r4
   1b20c:	f100 031a 	add.w	r3, r0, #26
   1b210:	f104 0110 	add.w	r1, r4, #16
   1b214:	f852 0b04 	ldr.w	r0, [r2], #4
   1b218:	f843 0b04 	str.w	r0, [r3], #4
   1b21c:	428a      	cmp	r2, r1
   1b21e:	d1f9      	bne.n	1b214 <smp_encrypt_info+0x44>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1b220:	4628      	mov	r0, r5
   1b222:	2107      	movs	r1, #7
   1b224:	f00f fdd3 	bl	2adce <atomic_set_bit>
	return 0;
   1b228:	2000      	movs	r0, #0
   1b22a:	e7ed      	b.n	1b208 <smp_encrypt_info+0x38>
   1b22c:	0002f515 	.word	0x0002f515

0001b230 <smp_send_pairing_confirm>:
{
   1b230:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1b232:	7a04      	ldrb	r4, [r0, #8]
   1b234:	2c02      	cmp	r4, #2
{
   1b236:	4605      	mov	r5, r0
	switch (smp->method) {
   1b238:	d823      	bhi.n	1b282 <smp_send_pairing_confirm+0x52>
   1b23a:	b144      	cbz	r4, 1b24e <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1b23c:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   1b240:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1b244:	40d4      	lsrs	r4, r2
   1b246:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1b24a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1b24e:	2103      	movs	r1, #3
   1b250:	4628      	mov	r0, r5
   1b252:	f00f fdd0 	bl	2adf6 <smp_create_pdu.constprop.0>
	if (!buf) {
   1b256:	4606      	mov	r6, r0
   1b258:	b1d0      	cbz	r0, 1b290 <smp_send_pairing_confirm+0x60>
   1b25a:	2110      	movs	r1, #16
   1b25c:	3008      	adds	r0, #8
   1b25e:	f001 ff41 	bl	1d0e4 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1b262:	9000      	str	r0, [sp, #0]
   1b264:	4812      	ldr	r0, [pc, #72]	; (1b2b0 <smp_send_pairing_confirm+0x80>)
   1b266:	4623      	mov	r3, r4
   1b268:	6800      	ldr	r0, [r0, #0]
   1b26a:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1b26e:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1b272:	f00f fd87 	bl	2ad84 <smp_f4>
   1b276:	4604      	mov	r4, r0
   1b278:	b170      	cbz	r0, 1b298 <smp_send_pairing_confirm+0x68>
		net_buf_unref(buf);
   1b27a:	4630      	mov	r0, r6
   1b27c:	f001 fe1c 	bl	1ceb8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1b280:	e006      	b.n	1b290 <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   1b282:	2c03      	cmp	r4, #3
   1b284:	d006      	beq.n	1b294 <smp_send_pairing_confirm+0x64>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b286:	480b      	ldr	r0, [pc, #44]	; (1b2b4 <smp_send_pairing_confirm+0x84>)
   1b288:	4622      	mov	r2, r4
   1b28a:	2145      	movs	r1, #69	; 0x45
   1b28c:	f00d fa88 	bl	287a0 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b290:	2008      	movs	r0, #8
   1b292:	e00b      	b.n	1b2ac <smp_send_pairing_confirm+0x7c>
	switch (smp->method) {
   1b294:	2400      	movs	r4, #0
   1b296:	e7da      	b.n	1b24e <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   1b298:	4602      	mov	r2, r0
   1b29a:	4631      	mov	r1, r6
   1b29c:	4628      	mov	r0, r5
   1b29e:	f00f fcf6 	bl	2ac8e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1b2a2:	1d28      	adds	r0, r5, #4
   1b2a4:	4621      	mov	r1, r4
   1b2a6:	f00f fcbe 	bl	2ac26 <atomic_clear_bit>
	return 0;
   1b2aa:	4620      	mov	r0, r4
}
   1b2ac:	b002      	add	sp, #8
   1b2ae:	bd70      	pop	{r4, r5, r6, pc}
   1b2b0:	200028a4 	.word	0x200028a4
   1b2b4:	0002f534 	.word	0x0002f534

0001b2b8 <smp_public_key_periph>:
{
   1b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2ba:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b2bc:	f7ff fe6e 	bl	1af9c <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b2c0:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b2c2:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b2c4:	210e      	movs	r1, #14
   1b2c6:	4628      	mov	r0, r5
   1b2c8:	f00f fc83 	bl	2abd2 <atomic_test_bit>
   1b2cc:	b968      	cbnz	r0, 1b2ea <smp_public_key_periph+0x32>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1b2ce:	4b4b      	ldr	r3, [pc, #300]	; (1b3fc <smp_public_key_periph+0x144>)
   1b2d0:	2220      	movs	r2, #32
   1b2d2:	6819      	ldr	r1, [r3, #0]
   1b2d4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b2d8:	f010 ff29 	bl	2c12e <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1b2dc:	b928      	cbnz	r0, 1b2ea <smp_public_key_periph+0x32>
		BT_WARN("Remote public key rejected");
   1b2de:	4848      	ldr	r0, [pc, #288]	; (1b400 <smp_public_key_periph+0x148>)
   1b2e0:	2157      	movs	r1, #87	; 0x57
   1b2e2:	f00d fa5d 	bl	287a0 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b2e6:	2008      	movs	r0, #8
   1b2e8:	e034      	b.n	1b354 <smp_public_key_periph+0x9c>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1b2ea:	210c      	movs	r1, #12
   1b2ec:	4620      	mov	r0, r4
   1b2ee:	f00f fd82 	bl	2adf6 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1b2f2:	4607      	mov	r7, r0
   1b2f4:	2800      	cmp	r0, #0
   1b2f6:	d0f6      	beq.n	1b2e6 <smp_public_key_periph+0x2e>
   1b2f8:	2140      	movs	r1, #64	; 0x40
   1b2fa:	3008      	adds	r0, #8
   1b2fc:	f001 fef2 	bl	1d0e4 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1b300:	4b3e      	ldr	r3, [pc, #248]	; (1b3fc <smp_public_key_periph+0x144>)
   1b302:	681b      	ldr	r3, [r3, #0]
   1b304:	4602      	mov	r2, r0
   1b306:	4601      	mov	r1, r0
   1b308:	f103 0020 	add.w	r0, r3, #32
   1b30c:	f853 cb04 	ldr.w	ip, [r3], #4
   1b310:	f841 cb04 	str.w	ip, [r1], #4
   1b314:	4283      	cmp	r3, r0
   1b316:	d1f9      	bne.n	1b30c <smp_public_key_periph+0x54>
   1b318:	3220      	adds	r2, #32
   1b31a:	f103 0120 	add.w	r1, r3, #32
   1b31e:	f853 0b04 	ldr.w	r0, [r3], #4
   1b322:	f842 0b04 	str.w	r0, [r2], #4
   1b326:	428b      	cmp	r3, r1
   1b328:	d1f9      	bne.n	1b31e <smp_public_key_periph+0x66>
	smp_send(smp, req_buf, NULL, NULL);
   1b32a:	2200      	movs	r2, #0
   1b32c:	4639      	mov	r1, r7
   1b32e:	4620      	mov	r0, r4
   1b330:	f00f fcad 	bl	2ac8e <smp_send.constprop.0>
	switch (smp->method) {
   1b334:	7a22      	ldrb	r2, [r4, #8]
   1b336:	2a05      	cmp	r2, #5
   1b338:	d858      	bhi.n	1b3ec <smp_public_key_periph+0x134>
   1b33a:	e8df f002 	tbb	[pc, r2]
   1b33e:	3803      	.short	0x3803
   1b340:	5457030c 	.word	0x5457030c
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b344:	2104      	movs	r1, #4
   1b346:	4620      	mov	r0, r4
   1b348:	f00f fd41 	bl	2adce <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1b34c:	f7ff ff70 	bl	1b230 <smp_send_pairing_confirm>
		if (err) {
   1b350:	2800      	cmp	r0, #0
   1b352:	d03b      	beq.n	1b3cc <smp_public_key_periph+0x114>
}
   1b354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b356:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1b358:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b35c:	f7ff fe1e 	bl	1af9c <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1b360:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b362:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1b364:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1b368:	f004 fd08 	bl	1fd7c <bt_rand>
   1b36c:	2800      	cmp	r0, #0
   1b36e:	d1ba      	bne.n	1b2e6 <smp_public_key_periph+0x2e>
		smp->passkey %= 1000000;
   1b370:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1b374:	4a23      	ldr	r2, [pc, #140]	; (1b404 <smp_public_key_periph+0x14c>)
   1b376:	fbb3 f1f2 	udiv	r1, r3, r2
   1b37a:	fb02 3311 	mls	r3, r2, r1, r3
   1b37e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1b382:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1b386:	b156      	cbz	r6, 1b39e <smp_public_key_periph+0xe6>
   1b388:	6833      	ldr	r3, [r6, #0]
   1b38a:	b143      	cbz	r3, 1b39e <smp_public_key_periph+0xe6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b38c:	210b      	movs	r1, #11
   1b38e:	4628      	mov	r0, r5
   1b390:	f00f fd1d 	bl	2adce <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1b394:	6833      	ldr	r3, [r6, #0]
   1b396:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1b39a:	4638      	mov	r0, r7
   1b39c:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1b39e:	2103      	movs	r1, #3
   1b3a0:	4620      	mov	r0, r4
   1b3a2:	f00f fd14 	bl	2adce <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1b3a6:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b3a8:	f00f fd11 	bl	2adce <atomic_set_bit>
		break;
   1b3ac:	e00e      	b.n	1b3cc <smp_public_key_periph+0x114>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1b3ae:	4620      	mov	r0, r4
   1b3b0:	2103      	movs	r1, #3
   1b3b2:	f00f fd0c 	bl	2adce <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1b3b6:	210e      	movs	r1, #14
   1b3b8:	f00f fd09 	bl	2adce <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b3bc:	4628      	mov	r0, r5
   1b3be:	210a      	movs	r1, #10
   1b3c0:	f00f fd05 	bl	2adce <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1b3c4:	6873      	ldr	r3, [r6, #4]
   1b3c6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b3ca:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1b3cc:	4628      	mov	r0, r5
   1b3ce:	2107      	movs	r1, #7
   1b3d0:	f00f fcfd 	bl	2adce <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1b3d4:	2008      	movs	r0, #8
   1b3d6:	f7ff fdd3 	bl	1af80 <smp_find>
   1b3da:	b960      	cbnz	r0, 1b3f6 <smp_public_key_periph+0x13e>
		return smp_dhkey_generate(smp);
   1b3dc:	4620      	mov	r0, r4
}
   1b3de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   1b3e2:	f7ff bea9 	b.w	1b138 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1b3e6:	2104      	movs	r1, #4
   1b3e8:	4620      	mov	r0, r4
   1b3ea:	e7dd      	b.n	1b3a8 <smp_public_key_periph+0xf0>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b3ec:	4806      	ldr	r0, [pc, #24]	; (1b408 <smp_public_key_periph+0x150>)
   1b3ee:	2145      	movs	r1, #69	; 0x45
   1b3f0:	f00d f9d6 	bl	287a0 <z_log_minimal_printk>
   1b3f4:	e777      	b.n	1b2e6 <smp_public_key_periph+0x2e>
	return 0;
   1b3f6:	2000      	movs	r0, #0
   1b3f8:	e7ac      	b.n	1b354 <smp_public_key_periph+0x9c>
   1b3fa:	bf00      	nop
   1b3fc:	200028a4 	.word	0x200028a4
   1b400:	0002f555 	.word	0x0002f555
   1b404:	000f4240 	.word	0x000f4240
   1b408:	0002f534 	.word	0x0002f534

0001b40c <smp_public_key>:
{
   1b40c:	b538      	push	{r3, r4, r5, lr}
   1b40e:	460d      	mov	r5, r1
   1b410:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b412:	f7ff fdc3 	bl	1af9c <latch_auth_cb>
   1b416:	68ab      	ldr	r3, [r5, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1b418:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1b41c:	4602      	mov	r2, r0
   1b41e:	f103 0120 	add.w	r1, r3, #32
   1b422:	f853 5b04 	ldr.w	r5, [r3], #4
   1b426:	f842 5b04 	str.w	r5, [r2], #4
   1b42a:	428b      	cmp	r3, r1
   1b42c:	d1f9      	bne.n	1b422 <smp_public_key+0x16>
   1b42e:	f104 0277 	add.w	r2, r4, #119	; 0x77
   1b432:	f103 0120 	add.w	r1, r3, #32
   1b436:	f853 5b04 	ldr.w	r5, [r3], #4
   1b43a:	f842 5b04 	str.w	r5, [r2], #4
   1b43e:	428b      	cmp	r3, r1
   1b440:	d1f9      	bne.n	1b436 <smp_public_key+0x2a>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1b442:	f7fc f813 	bl	1746c <bt_pub_key_is_debug>
   1b446:	b940      	cbnz	r0, 1b45a <smp_public_key+0x4e>
	if (!sc_public_key) {
   1b448:	4b17      	ldr	r3, [pc, #92]	; (1b4a8 <smp_public_key+0x9c>)
   1b44a:	681d      	ldr	r5, [r3, #0]
   1b44c:	bb3d      	cbnz	r5, 1b49e <smp_public_key+0x92>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1b44e:	1d20      	adds	r0, r4, #4
   1b450:	2106      	movs	r1, #6
   1b452:	f00f fcbc 	bl	2adce <atomic_set_bit>
		return 0;
   1b456:	4628      	mov	r0, r5
   1b458:	e020      	b.n	1b49c <smp_public_key+0x90>
		BT_INFO("Remote is using Debug Public key");
   1b45a:	4814      	ldr	r0, [pc, #80]	; (1b4ac <smp_public_key+0xa0>)
   1b45c:	2149      	movs	r1, #73	; 0x49
   1b45e:	f00d f99f 	bl	287a0 <z_log_minimal_printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1b462:	210e      	movs	r1, #14
   1b464:	1d20      	adds	r0, r4, #4
   1b466:	f00f fcb2 	bl	2adce <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1b46a:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1b46e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1b472:	b933      	cbnz	r3, 1b482 <smp_public_key+0x76>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b474:	7a28      	ldrb	r0, [r5, #8]
   1b476:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1b47a:	f001 f917 	bl	1c6ac <bt_keys_get_addr>
   1b47e:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1b482:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1b486:	2b00      	cmp	r3, #0
   1b488:	d0de      	beq.n	1b448 <smp_public_key+0x3c>
   1b48a:	89da      	ldrh	r2, [r3, #14]
   1b48c:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1b490:	2a00      	cmp	r2, #0
   1b492:	d0d9      	beq.n	1b448 <smp_public_key+0x3c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1b494:	7b5b      	ldrb	r3, [r3, #13]
   1b496:	079b      	lsls	r3, r3, #30
   1b498:	d4d6      	bmi.n	1b448 <smp_public_key+0x3c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b49a:	2003      	movs	r0, #3
}
   1b49c:	bd38      	pop	{r3, r4, r5, pc}
	err = smp_public_key_periph(smp);
   1b49e:	4620      	mov	r0, r4
}
   1b4a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = smp_public_key_periph(smp);
   1b4a4:	f7ff bf08 	b.w	1b2b8 <smp_public_key_periph>
   1b4a8:	200028a4 	.word	0x200028a4
   1b4ac:	0002f575 	.word	0x0002f575

0001b4b0 <smp_pairing_req>:
{
   1b4b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b4b4:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1b4b6:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1b4ba:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b4bc:	f7ff fd6e 	bl	1af9c <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1b4c0:	f8d5 8008 	ldr.w	r8, [r5, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1b4c4:	f898 3003 	ldrb.w	r3, [r8, #3]
   1b4c8:	3b07      	subs	r3, #7
   1b4ca:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b4cc:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1b4ce:	d905      	bls.n	1b4dc <smp_pairing_req+0x2c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1b4d0:	f04f 0806 	mov.w	r8, #6
}
   1b4d4:	4640      	mov	r0, r8
   1b4d6:	b002      	add	sp, #8
   1b4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   1b4dc:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1b4e0:	b163      	cbz	r3, 1b4fc <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1b4e2:	1d25      	adds	r5, r4, #4
   1b4e4:	210f      	movs	r1, #15
   1b4e6:	4628      	mov	r0, r5
   1b4e8:	f00f fb73 	bl	2abd2 <atomic_test_bit>
   1b4ec:	b990      	cbnz	r0, 1b514 <smp_pairing_req+0x64>
		int ret = smp_init(smp);
   1b4ee:	4620      	mov	r0, r4
   1b4f0:	f7ff fe06 	bl	1b100 <smp_init>
		if (ret) {
   1b4f4:	b170      	cbz	r0, 1b514 <smp_pairing_req+0x64>
			return ret;
   1b4f6:	fa5f f880 	uxtb.w	r8, r0
   1b4fa:	e7eb      	b.n	1b4d4 <smp_pairing_req+0x24>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b4fc:	7a30      	ldrb	r0, [r6, #8]
   1b4fe:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1b502:	f001 f8d3 	bl	1c6ac <bt_keys_get_addr>
   1b506:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
		if (!conn->le.keys) {
   1b50a:	2800      	cmp	r0, #0
   1b50c:	d1e9      	bne.n	1b4e2 <smp_pairing_req+0x32>
	switch (sec) {
   1b50e:	f04f 0808 	mov.w	r8, #8
   1b512:	e7df      	b.n	1b4d4 <smp_pairing_req+0x24>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1b514:	2301      	movs	r3, #1
   1b516:	7263      	strb	r3, [r4, #9]
   1b518:	f8d8 3000 	ldr.w	r3, [r8]
   1b51c:	f8c4 300a 	str.w	r3, [r4, #10]
   1b520:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   1b524:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1b526:	2302      	movs	r3, #2
   1b528:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1b52a:	f898 1002 	ldrb.w	r1, [r8, #2]
   1b52e:	4620      	mov	r0, r4
   1b530:	f7ff fd76 	bl	1b020 <get_auth>
   1b534:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1b536:	4620      	mov	r0, r4
   1b538:	f7ff fd4e 	bl	1afd8 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1b53c:	4ba4      	ldr	r3, [pc, #656]	; (1b7d0 <smp_pairing_req+0x320>)
	rsp->io_capability = get_io_capa(smp);
   1b53e:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1b540:	781b      	ldrb	r3, [r3, #0]
   1b542:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1b544:	2310      	movs	r3, #16
   1b546:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1b548:	f898 3004 	ldrb.w	r3, [r8, #4]
   1b54c:	f003 0303 	and.w	r3, r3, #3
   1b550:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1b552:	f898 3005 	ldrb.w	r3, [r8, #5]
   1b556:	f003 0301 	and.w	r3, r3, #1
   1b55a:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1b55c:	7ce3      	ldrb	r3, [r4, #19]
   1b55e:	071b      	lsls	r3, r3, #28
   1b560:	d50d      	bpl.n	1b57e <smp_pairing_req+0xce>
   1b562:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b566:	0718      	lsls	r0, r3, #28
   1b568:	d509      	bpl.n	1b57e <smp_pairing_req+0xce>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1b56a:	2105      	movs	r1, #5
   1b56c:	4628      	mov	r0, r5
   1b56e:	f00f fc2e 	bl	2adce <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1b572:	7d63      	ldrb	r3, [r4, #21]
   1b574:	f003 0302 	and.w	r3, r3, #2
   1b578:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1b57a:	2300      	movs	r3, #0
   1b57c:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1b57e:	7ce3      	ldrb	r3, [r4, #19]
   1b580:	0699      	lsls	r1, r3, #26
   1b582:	d507      	bpl.n	1b594 <smp_pairing_req+0xe4>
   1b584:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b588:	069a      	lsls	r2, r3, #26
   1b58a:	d503      	bpl.n	1b594 <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1b58c:	2114      	movs	r1, #20
   1b58e:	4628      	mov	r0, r5
   1b590:	f00f fc1d 	bl	2adce <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1b594:	7da3      	ldrb	r3, [r4, #22]
   1b596:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1b59a:	7d63      	ldrb	r3, [r4, #21]
   1b59c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1b5a0:	7ce3      	ldrb	r3, [r4, #19]
   1b5a2:	07db      	lsls	r3, r3, #31
   1b5a4:	d507      	bpl.n	1b5b6 <smp_pairing_req+0x106>
   1b5a6:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b5aa:	07d8      	lsls	r0, r3, #31
   1b5ac:	d503      	bpl.n	1b5b6 <smp_pairing_req+0x106>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1b5ae:	210d      	movs	r1, #13
   1b5b0:	4628      	mov	r0, r5
   1b5b2:	f00f fc0c 	bl	2adce <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1b5b6:	2103      	movs	r1, #3
   1b5b8:	4628      	mov	r0, r5
   1b5ba:	f00f fc08 	bl	2adce <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b5be:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1b5c0:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b5c4:	f00f fb05 	bl	2abd2 <atomic_test_bit>
   1b5c8:	bb48      	cbnz	r0, 1b61e <smp_pairing_req+0x16e>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1b5ca:	f1b8 0f04 	cmp.w	r8, #4
   1b5ce:	d847      	bhi.n	1b660 <smp_pairing_req+0x1b0>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1b5d0:	7ae3      	ldrb	r3, [r4, #11]
   1b5d2:	7ca2      	ldrb	r2, [r4, #18]
   1b5d4:	4013      	ands	r3, r2
   1b5d6:	07d9      	lsls	r1, r3, #31
   1b5d8:	d440      	bmi.n	1b65c <smp_pairing_req+0x1ac>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1b5da:	7b21      	ldrb	r1, [r4, #12]
   1b5dc:	7ce0      	ldrb	r0, [r4, #19]
   1b5de:	4301      	orrs	r1, r0
   1b5e0:	f011 0104 	ands.w	r1, r1, #4
   1b5e4:	d011      	beq.n	1b60a <smp_pairing_req+0x15a>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1b5e6:	4620      	mov	r0, r4
   1b5e8:	f7ff fcf6 	bl	1afd8 <get_io_capa>
   1b5ec:	4b79      	ldr	r3, [pc, #484]	; (1b7d4 <smp_pairing_req+0x324>)
   1b5ee:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1b5f2:	4498      	add	r8, r3
   1b5f4:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   1b5f8:	2904      	cmp	r1, #4
   1b5fa:	d106      	bne.n	1b60a <smp_pairing_req+0x15a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1b5fc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1b600:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1b602:	2b00      	cmp	r3, #0
   1b604:	bf0c      	ite	eq
   1b606:	2102      	moveq	r1, #2
   1b608:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
   1b60a:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1b60c:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
   1b610:	4620      	mov	r0, r4
   1b612:	f00f fae7 	bl	2abe4 <update_keys_check>
   1b616:	bb28      	cbnz	r0, 1b664 <smp_pairing_req+0x1b4>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b618:	f04f 0803 	mov.w	r8, #3
   1b61c:	e75a      	b.n	1b4d4 <smp_pairing_req+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1b61e:	7b23      	ldrb	r3, [r4, #12]
   1b620:	7ce0      	ldrb	r0, [r4, #19]
   1b622:	ea03 0200 	and.w	r2, r3, r0
   1b626:	0712      	lsls	r2, r2, #28
   1b628:	d506      	bpl.n	1b638 <smp_pairing_req+0x188>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1b62a:	7ae2      	ldrb	r2, [r4, #11]
   1b62c:	f894 c012 	ldrb.w	ip, [r4, #18]
   1b630:	ea42 020c 	orr.w	r2, r2, ip
   1b634:	07d2      	lsls	r2, r2, #31
   1b636:	d4e8      	bmi.n	1b60a <smp_pairing_req+0x15a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1b638:	f1b8 0f04 	cmp.w	r8, #4
   1b63c:	d810      	bhi.n	1b660 <smp_pairing_req+0x1b0>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1b63e:	ea43 0100 	orr.w	r1, r3, r0
   1b642:	f011 0104 	ands.w	r1, r1, #4
   1b646:	d0e0      	beq.n	1b60a <smp_pairing_req+0x15a>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1b648:	4620      	mov	r0, r4
   1b64a:	f7ff fcc5 	bl	1afd8 <get_io_capa>
   1b64e:	4b62      	ldr	r3, [pc, #392]	; (1b7d8 <smp_pairing_req+0x328>)
   1b650:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1b654:	4498      	add	r8, r3
   1b656:	f818 1000 	ldrb.w	r1, [r8, r0]
   1b65a:	e7d6      	b.n	1b60a <smp_pairing_req+0x15a>
		return LEGACY_OOB;
   1b65c:	2106      	movs	r1, #6
   1b65e:	e7d4      	b.n	1b60a <smp_pairing_req+0x15a>
		return JUST_WORKS;
   1b660:	2100      	movs	r1, #0
   1b662:	e7d2      	b.n	1b60a <smp_pairing_req+0x15a>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1b664:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1b668:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1b66a:	2b03      	cmp	r3, #3
   1b66c:	d037      	beq.n	1b6de <smp_pairing_req+0x22e>
   1b66e:	d825      	bhi.n	1b6bc <smp_pairing_req+0x20c>
   1b670:	3b01      	subs	r3, #1
   1b672:	2b01      	cmp	r3, #1
   1b674:	f63f af4b 	bhi.w	1b50e <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b678:	2105      	movs	r1, #5
   1b67a:	4628      	mov	r0, r5
   1b67c:	f00f faa9 	bl	2abd2 <atomic_test_bit>
   1b680:	2800      	cmp	r0, #0
   1b682:	f040 80b1 	bne.w	1b7e8 <smp_pairing_req+0x338>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b686:	4620      	mov	r0, r4
   1b688:	f7ff fc88 	bl	1af9c <latch_auth_cb>
   1b68c:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b68e:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1b690:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b694:	f7ff fc82 	bl	1af9c <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1b698:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b69c:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1b69e:	f898 0008 	ldrb.w	r0, [r8, #8]
   1b6a2:	f001 f89b 	bl	1c7dc <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1b6a6:	7a22      	ldrb	r2, [r4, #8]
   1b6a8:	b1e8      	cbz	r0, 1b6e6 <smp_pairing_req+0x236>
   1b6aa:	7b43      	ldrb	r3, [r0, #13]
   1b6ac:	07db      	lsls	r3, r3, #31
   1b6ae:	d51a      	bpl.n	1b6e6 <smp_pairing_req+0x236>
   1b6b0:	b9ca      	cbnz	r2, 1b6e6 <smp_pairing_req+0x236>
		BT_ERR("JustWorks failed, authenticated keys present");
   1b6b2:	484a      	ldr	r0, [pc, #296]	; (1b7dc <smp_pairing_req+0x32c>)
   1b6b4:	2145      	movs	r1, #69	; 0x45
   1b6b6:	f00d f873 	bl	287a0 <z_log_minimal_printk>
	if (ret) {
   1b6ba:	e728      	b.n	1b50e <smp_pairing_req+0x5e>
	switch (sec) {
   1b6bc:	2b04      	cmp	r3, #4
   1b6be:	f47f af26 	bne.w	1b50e <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1b6c2:	7d23      	ldrb	r3, [r4, #20]
   1b6c4:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1b6c6:	4293      	cmp	r3, r2
   1b6c8:	bf28      	it	cs
   1b6ca:	4613      	movcs	r3, r2
   1b6cc:	2b10      	cmp	r3, #16
   1b6ce:	f47f aeff 	bne.w	1b4d0 <smp_pairing_req+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b6d2:	2105      	movs	r1, #5
   1b6d4:	4628      	mov	r0, r5
   1b6d6:	f00f fa7c 	bl	2abd2 <atomic_test_bit>
   1b6da:	2800      	cmp	r0, #0
   1b6dc:	d09c      	beq.n	1b618 <smp_pairing_req+0x168>
		if (smp->method == JUST_WORKS) {
   1b6de:	7a23      	ldrb	r3, [r4, #8]
   1b6e0:	2b00      	cmp	r3, #0
   1b6e2:	d1c9      	bne.n	1b678 <smp_pairing_req+0x1c8>
   1b6e4:	e798      	b.n	1b618 <smp_pairing_req+0x168>
	switch (smp->method) {
   1b6e6:	2a06      	cmp	r2, #6
   1b6e8:	d85e      	bhi.n	1b7a8 <smp_pairing_req+0x2f8>
   1b6ea:	e8df f002 	tbb	[pc, r2]
   1b6ee:	5518      	.short	0x5518
   1b6f0:	5d5d5d2d 	.word	0x5d5d5d2d
   1b6f4:	04          	.byte	0x04
   1b6f5:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1b6f6:	2e00      	cmp	r6, #0
   1b6f8:	d05b      	beq.n	1b7b2 <smp_pairing_req+0x302>
   1b6fa:	68f3      	ldr	r3, [r6, #12]
   1b6fc:	2b00      	cmp	r3, #0
   1b6fe:	d058      	beq.n	1b7b2 <smp_pairing_req+0x302>
			struct bt_conn_oob_info info = {
   1b700:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b702:	210a      	movs	r1, #10
   1b704:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1b706:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b70a:	f00f fb60 	bl	2adce <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1b70e:	68f3      	ldr	r3, [r6, #12]
   1b710:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1b714:	a901      	add	r1, sp, #4
   1b716:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b718:	7a23      	ldrb	r3, [r4, #8]
   1b71a:	2b00      	cmp	r3, #0
   1b71c:	d14c      	bne.n	1b7b8 <smp_pairing_req+0x308>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b71e:	210f      	movs	r1, #15
   1b720:	4628      	mov	r0, r5
   1b722:	f00f fa56 	bl	2abd2 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b726:	4680      	mov	r8, r0
   1b728:	2800      	cmp	r0, #0
   1b72a:	d145      	bne.n	1b7b8 <smp_pairing_req+0x308>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b72c:	2f00      	cmp	r7, #0
   1b72e:	d043      	beq.n	1b7b8 <smp_pairing_req+0x308>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1b730:	697b      	ldr	r3, [r7, #20]
   1b732:	2b00      	cmp	r3, #0
   1b734:	d040      	beq.n	1b7b8 <smp_pairing_req+0x308>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b736:	4628      	mov	r0, r5
   1b738:	210a      	movs	r1, #10
   1b73a:	f00f fb48 	bl	2adce <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1b73e:	697b      	ldr	r3, [r7, #20]
   1b740:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1b744:	4798      	blx	r3
		return 0;
   1b746:	e6c5      	b.n	1b4d4 <smp_pairing_req+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1b748:	2104      	movs	r1, #4
   1b74a:	eb0d 0001 	add.w	r0, sp, r1
   1b74e:	f004 fb15 	bl	1fd7c <bt_rand>
   1b752:	2800      	cmp	r0, #0
   1b754:	f47f aedb 	bne.w	1b50e <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1b758:	9b01      	ldr	r3, [sp, #4]
   1b75a:	4a21      	ldr	r2, [pc, #132]	; (1b7e0 <smp_pairing_req+0x330>)
   1b75c:	fbb3 f1f2 	udiv	r1, r3, r2
   1b760:	fb02 3311 	mls	r3, r2, r1, r3
   1b764:	9301      	str	r3, [sp, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1b766:	b14e      	cbz	r6, 1b77c <smp_pairing_req+0x2cc>
   1b768:	6833      	ldr	r3, [r6, #0]
   1b76a:	b13b      	cbz	r3, 1b77c <smp_pairing_req+0x2cc>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1b76c:	210b      	movs	r1, #11
   1b76e:	4628      	mov	r0, r5
   1b770:	f00f fb2d 	bl	2adce <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1b774:	6833      	ldr	r3, [r6, #0]
   1b776:	9901      	ldr	r1, [sp, #4]
   1b778:	4640      	mov	r0, r8
   1b77a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1b77c:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1b77e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1b782:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1b786:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1b788:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1b78c:	0a1b      	lsrs	r3, r3, #8
   1b78e:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1b792:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1b796:	e7bf      	b.n	1b718 <smp_pairing_req+0x268>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b798:	4628      	mov	r0, r5
   1b79a:	210a      	movs	r1, #10
   1b79c:	f00f fb17 	bl	2adce <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1b7a0:	6873      	ldr	r3, [r6, #4]
   1b7a2:	4640      	mov	r0, r8
   1b7a4:	4798      	blx	r3
	if (ret) {
   1b7a6:	e7b7      	b.n	1b718 <smp_pairing_req+0x268>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b7a8:	480e      	ldr	r0, [pc, #56]	; (1b7e4 <smp_pairing_req+0x334>)
   1b7aa:	2145      	movs	r1, #69	; 0x45
   1b7ac:	f00c fff8 	bl	287a0 <z_log_minimal_printk>
	if (ret) {
   1b7b0:	e6ad      	b.n	1b50e <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1b7b2:	f04f 0802 	mov.w	r8, #2
   1b7b6:	e68d      	b.n	1b4d4 <smp_pairing_req+0x24>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1b7b8:	2103      	movs	r1, #3
   1b7ba:	4620      	mov	r0, r4
   1b7bc:	f00f fb07 	bl	2adce <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1b7c0:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1b7c2:	f00f fb04 	bl	2adce <atomic_set_bit>
}
   1b7c6:	b002      	add	sp, #8
   1b7c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   1b7cc:	f00f bb32 	b.w	2ae34 <send_pairing_rsp>
   1b7d0:	200037d7 	.word	0x200037d7
   1b7d4:	0002f87b 	.word	0x0002f87b
   1b7d8:	0002f894 	.word	0x0002f894
   1b7dc:	0002f59b 	.word	0x0002f59b
   1b7e0:	000f4240 	.word	0x000f4240
   1b7e4:	0002f534 	.word	0x0002f534
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b7e8:	f894 8008 	ldrb.w	r8, [r4, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1b7ec:	f1b8 0f00 	cmp.w	r8, #0
   1b7f0:	d10e      	bne.n	1b810 <smp_pairing_req+0x360>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b7f2:	210f      	movs	r1, #15
   1b7f4:	4628      	mov	r0, r5
   1b7f6:	f00f f9ec 	bl	2abd2 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1b7fa:	b948      	cbnz	r0, 1b810 <smp_pairing_req+0x360>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1b7fc:	b147      	cbz	r7, 1b810 <smp_pairing_req+0x360>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1b7fe:	697b      	ldr	r3, [r7, #20]
   1b800:	b133      	cbz	r3, 1b810 <smp_pairing_req+0x360>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1b802:	4628      	mov	r0, r5
   1b804:	210a      	movs	r1, #10
   1b806:	f00f fae2 	bl	2adce <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1b80a:	697b      	ldr	r3, [r7, #20]
   1b80c:	4630      	mov	r0, r6
   1b80e:	e799      	b.n	1b744 <smp_pairing_req+0x294>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1b810:	210c      	movs	r1, #12
   1b812:	4620      	mov	r0, r4
   1b814:	e7d5      	b.n	1b7c2 <smp_pairing_req+0x312>
   1b816:	bf00      	nop

0001b818 <compute_and_check_and_send_periph_dhcheck>:
{
   1b818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	(void)memset(r, 0, sizeof(r));
   1b81c:	2210      	movs	r2, #16
{
   1b81e:	b0a2      	sub	sp, #136	; 0x88
   1b820:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1b822:	2100      	movs	r1, #0
   1b824:	eb0d 0002 	add.w	r0, sp, r2
   1b828:	f010 fccc 	bl	2c1c4 <memset>
	switch (smp->method) {
   1b82c:	7a22      	ldrb	r2, [r4, #8]
   1b82e:	2a05      	cmp	r2, #5
   1b830:	f200 8098 	bhi.w	1b964 <compute_and_check_and_send_periph_dhcheck+0x14c>
   1b834:	e8df f002 	tbb	[pc, r2]
   1b838:	06030306 	.word	0x06030306
   1b83c:	8596      	.short	0x8596
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1b83e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1b842:	9304      	str	r3, [sp, #16]
	uint8_t m[53] = { 0x00, /* counter */
   1b844:	4b79      	ldr	r3, [pc, #484]	; (1ba2c <compute_and_check_and_send_periph_dhcheck+0x214>)
		   &smp->chan.chan.conn->le.init_addr,
   1b846:	f8d4 a0ec 	ldr.w	sl, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   1b84a:	aa14      	add	r2, sp, #80	; 0x50
   1b84c:	f103 0730 	add.w	r7, r3, #48	; 0x30
   1b850:	4615      	mov	r5, r2
   1b852:	6818      	ldr	r0, [r3, #0]
   1b854:	6859      	ldr	r1, [r3, #4]
   1b856:	4616      	mov	r6, r2
   1b858:	c603      	stmia	r6!, {r0, r1}
   1b85a:	3308      	adds	r3, #8
   1b85c:	42bb      	cmp	r3, r7
   1b85e:	4632      	mov	r2, r6
   1b860:	d1f7      	bne.n	1b852 <compute_and_check_and_send_periph_dhcheck+0x3a>
   1b862:	6818      	ldr	r0, [r3, #0]
   1b864:	791b      	ldrb	r3, [r3, #4]
   1b866:	6030      	str	r0, [r6, #0]
   1b868:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
   1b86a:	ae0c      	add	r6, sp, #48	; 0x30
   1b86c:	2220      	movs	r2, #32
   1b86e:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1b872:	4630      	mov	r0, r6
   1b874:	f7ff fbf2 	bl	1b05c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1b878:	486d      	ldr	r0, [pc, #436]	; (1ba30 <compute_and_check_and_send_periph_dhcheck+0x218>)
   1b87a:	ab08      	add	r3, sp, #32
   1b87c:	2220      	movs	r2, #32
   1b87e:	4631      	mov	r1, r6
   1b880:	f00f f9e7 	bl	2ac52 <bt_smp_aes_cmac>
	if (err) {
   1b884:	2800      	cmp	r0, #0
   1b886:	f040 80cd 	bne.w	1ba24 <compute_and_check_and_send_periph_dhcheck+0x20c>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b88a:	f104 0837 	add.w	r8, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1b88e:	2210      	movs	r2, #16
   1b890:	4641      	mov	r1, r8
   1b892:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1b896:	f104 0927 	add.w	r9, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1b89a:	f7ff fbdf 	bl	1b05c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1b89e:	2210      	movs	r2, #16
   1b8a0:	4649      	mov	r1, r9
   1b8a2:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1b8a6:	f7ff fbd9 	bl	1b05c <sys_memcpy_swap>
	m[37] = a1->type;
   1b8aa:	f89a 3097 	ldrb.w	r3, [sl, #151]	; 0x97
   1b8ae:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1b8b2:	2206      	movs	r2, #6
   1b8b4:	f10a 0198 	add.w	r1, sl, #152	; 0x98
   1b8b8:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1b8bc:	f7ff fbce 	bl	1b05c <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1b8c0:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	m[44] = a2->type;
   1b8c4:	f89a 309e 	ldrb.w	r3, [sl, #158]	; 0x9e
   1b8c8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1b8cc:	2206      	movs	r2, #6
   1b8ce:	f10a 019f 	add.w	r1, sl, #159	; 0x9f
   1b8d2:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1b8d6:	f7ff fbc1 	bl	1b05c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1b8da:	463b      	mov	r3, r7
   1b8dc:	2235      	movs	r2, #53	; 0x35
   1b8de:	4629      	mov	r1, r5
   1b8e0:	a808      	add	r0, sp, #32
   1b8e2:	f00f f9b6 	bl	2ac52 <bt_smp_aes_cmac>
	if (err) {
   1b8e6:	2800      	cmp	r0, #0
   1b8e8:	f040 809c 	bne.w	1ba24 <compute_and_check_and_send_periph_dhcheck+0x20c>
	sys_mem_swap(mackey, 16);
   1b8ec:	4638      	mov	r0, r7
   1b8ee:	f00f f9eb 	bl	2acc8 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1b8f2:	f104 0a47 	add.w	sl, r4, #71	; 0x47
	m[0] = 0x01;
   1b8f6:	2301      	movs	r3, #1
   1b8f8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1b8fc:	2235      	movs	r2, #53	; 0x35
   1b8fe:	4653      	mov	r3, sl
   1b900:	4629      	mov	r1, r5
   1b902:	a808      	add	r0, sp, #32
   1b904:	f00f f9a5 	bl	2ac52 <bt_smp_aes_cmac>
	if (err) {
   1b908:	2800      	cmp	r0, #0
   1b90a:	f040 808b 	bne.w	1ba24 <compute_and_check_and_send_periph_dhcheck+0x20c>
	sys_mem_swap(ltk, 16);
   1b90e:	4650      	mov	r0, sl
   1b910:	f00f f9da 	bl	2acc8 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1b914:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1b918:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1b91a:	f103 0297 	add.w	r2, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr,
   1b91e:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1b920:	9301      	str	r3, [sp, #4]
   1b922:	f104 0311 	add.w	r3, r4, #17
   1b926:	9202      	str	r2, [sp, #8]
   1b928:	9300      	str	r3, [sp, #0]
   1b92a:	4642      	mov	r2, r8
   1b92c:	ab04      	add	r3, sp, #16
   1b92e:	4649      	mov	r1, r9
   1b930:	4638      	mov	r0, r7
   1b932:	f00f f9d7 	bl	2ace4 <smp_f6>
   1b936:	b1d8      	cbz	r0, 1b970 <compute_and_check_and_send_periph_dhcheck+0x158>
		BT_ERR("Calculate local DHKey check failed");
   1b938:	483e      	ldr	r0, [pc, #248]	; (1ba34 <compute_and_check_and_send_periph_dhcheck+0x21c>)
   1b93a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Calculate LTK failed");
   1b93c:	f00c ff30 	bl	287a0 <z_log_minimal_printk>
   1b940:	e014      	b.n	1b96c <compute_and_check_and_send_periph_dhcheck+0x154>
		if (smp->oobd_remote) {
   1b942:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   1b946:	2b00      	cmp	r3, #0
   1b948:	f43f af7c 	beq.w	1b844 <compute_and_check_and_send_periph_dhcheck+0x2c>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1b94c:	ad04      	add	r5, sp, #16
   1b94e:	f103 0610 	add.w	r6, r3, #16
   1b952:	6818      	ldr	r0, [r3, #0]
   1b954:	6859      	ldr	r1, [r3, #4]
   1b956:	462a      	mov	r2, r5
   1b958:	c203      	stmia	r2!, {r0, r1}
   1b95a:	3308      	adds	r3, #8
   1b95c:	42b3      	cmp	r3, r6
   1b95e:	4615      	mov	r5, r2
   1b960:	d1f7      	bne.n	1b952 <compute_and_check_and_send_periph_dhcheck+0x13a>
   1b962:	e76f      	b.n	1b844 <compute_and_check_and_send_periph_dhcheck+0x2c>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1b964:	4834      	ldr	r0, [pc, #208]	; (1ba38 <compute_and_check_and_send_periph_dhcheck+0x220>)
   1b966:	2145      	movs	r1, #69	; 0x45
   1b968:	f00c ff1a 	bl	287a0 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1b96c:	2008      	movs	r0, #8
   1b96e:	e054      	b.n	1ba1a <compute_and_check_and_send_periph_dhcheck+0x202>
	if (smp->method == LE_SC_OOB) {
   1b970:	7a23      	ldrb	r3, [r4, #8]
   1b972:	2b05      	cmp	r3, #5
   1b974:	d10f      	bne.n	1b996 <compute_and_check_and_send_periph_dhcheck+0x17e>
		if (smp->oobd_local) {
   1b976:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1b97a:	b309      	cbz	r1, 1b9c0 <compute_and_check_and_send_periph_dhcheck+0x1a8>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1b97c:	460b      	mov	r3, r1
   1b97e:	f10d 0c10 	add.w	ip, sp, #16
   1b982:	f101 0e10 	add.w	lr, r1, #16
   1b986:	6818      	ldr	r0, [r3, #0]
   1b988:	6859      	ldr	r1, [r3, #4]
   1b98a:	4662      	mov	r2, ip
   1b98c:	c203      	stmia	r2!, {r0, r1}
   1b98e:	3308      	adds	r3, #8
   1b990:	4573      	cmp	r3, lr
   1b992:	4694      	mov	ip, r2
   1b994:	d1f7      	bne.n	1b986 <compute_and_check_and_send_periph_dhcheck+0x16e>
		   &smp->chan.chan.conn->le.init_addr,
   1b996:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1b99a:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1b99c:	f103 029e 	add.w	r2, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
   1b9a0:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1b9a2:	9301      	str	r3, [sp, #4]
   1b9a4:	f104 030a 	add.w	r3, r4, #10
   1b9a8:	9202      	str	r2, [sp, #8]
   1b9aa:	9300      	str	r3, [sp, #0]
   1b9ac:	464a      	mov	r2, r9
   1b9ae:	ab04      	add	r3, sp, #16
   1b9b0:	4641      	mov	r1, r8
   1b9b2:	4638      	mov	r0, r7
   1b9b4:	f00f f996 	bl	2ace4 <smp_f6>
   1b9b8:	b140      	cbz	r0, 1b9cc <compute_and_check_and_send_periph_dhcheck+0x1b4>
		BT_ERR("Calculate remote DHKey check failed");
   1b9ba:	4820      	ldr	r0, [pc, #128]	; (1ba3c <compute_and_check_and_send_periph_dhcheck+0x224>)
   1b9bc:	2145      	movs	r1, #69	; 0x45
   1b9be:	e7bd      	b.n	1b93c <compute_and_check_and_send_periph_dhcheck+0x124>
			memset(r, 0, sizeof(r));
   1b9c0:	2210      	movs	r2, #16
   1b9c2:	eb0d 0002 	add.w	r0, sp, r2
   1b9c6:	f010 fbfd 	bl	2c1c4 <memset>
   1b9ca:	e7e4      	b.n	1b996 <compute_and_check_and_send_periph_dhcheck+0x17e>
	if (memcmp(smp->e, re, 16)) {
   1b9cc:	2210      	movs	r2, #16
   1b9ce:	4631      	mov	r1, r6
   1b9d0:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1b9d4:	f010 fbab 	bl	2c12e <memcmp>
   1b9d8:	bb10      	cbnz	r0, 1ba20 <compute_and_check_and_send_periph_dhcheck+0x208>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1b9da:	210d      	movs	r1, #13
   1b9dc:	4620      	mov	r0, r4
   1b9de:	f00f fa0a 	bl	2adf6 <smp_create_pdu.constprop.0>
	if (!buf) {
   1b9e2:	4606      	mov	r6, r0
   1b9e4:	2800      	cmp	r0, #0
   1b9e6:	d0c1      	beq.n	1b96c <compute_and_check_and_send_periph_dhcheck+0x154>
   1b9e8:	2110      	movs	r1, #16
   1b9ea:	3008      	adds	r0, #8
   1b9ec:	f001 fb7a 	bl	1d0e4 <net_buf_simple_add>
   1b9f0:	af18      	add	r7, sp, #96	; 0x60
   1b9f2:	4603      	mov	r3, r0
   1b9f4:	462a      	mov	r2, r5
   1b9f6:	ca03      	ldmia	r2!, {r0, r1}
   1b9f8:	42ba      	cmp	r2, r7
   1b9fa:	6018      	str	r0, [r3, #0]
   1b9fc:	6059      	str	r1, [r3, #4]
   1b9fe:	4615      	mov	r5, r2
   1ba00:	f103 0308 	add.w	r3, r3, #8
   1ba04:	d1f6      	bne.n	1b9f4 <compute_and_check_and_send_periph_dhcheck+0x1dc>
	smp_send(smp, buf, NULL, NULL);
   1ba06:	2200      	movs	r2, #0
   1ba08:	4631      	mov	r1, r6
   1ba0a:	4620      	mov	r0, r4
   1ba0c:	f00f f93f 	bl	2ac8e <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1ba10:	1d20      	adds	r0, r4, #4
   1ba12:	2101      	movs	r1, #1
   1ba14:	f00f f9db 	bl	2adce <atomic_set_bit>
	return 0;
   1ba18:	2000      	movs	r0, #0
}
   1ba1a:	b022      	add	sp, #136	; 0x88
   1ba1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1ba20:	200b      	movs	r0, #11
   1ba22:	e7fa      	b.n	1ba1a <compute_and_check_and_send_periph_dhcheck+0x202>
		BT_ERR("Calculate LTK failed");
   1ba24:	4806      	ldr	r0, [pc, #24]	; (1ba40 <compute_and_check_and_send_periph_dhcheck+0x228>)
   1ba26:	2145      	movs	r1, #69	; 0x45
   1ba28:	e788      	b.n	1b93c <compute_and_check_and_send_periph_dhcheck+0x124>
   1ba2a:	bf00      	nop
   1ba2c:	0002c82b 	.word	0x0002c82b
   1ba30:	0002f8ad 	.word	0x0002f8ad
   1ba34:	0002f5cd 	.word	0x0002f5cd
   1ba38:	0002f534 	.word	0x0002f534
   1ba3c:	0002f5f5 	.word	0x0002f5f5
   1ba40:	0002f61e 	.word	0x0002f61e

0001ba44 <bt_smp_connected>:
{
   1ba44:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1ba46:	490b      	ldr	r1, [pc, #44]	; (1ba74 <bt_smp_connected+0x30>)
{
   1ba48:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1ba4a:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1ba4e:	3094      	adds	r0, #148	; 0x94
   1ba50:	f007 f9d8 	bl	22e04 <k_work_init_delayable>
	smp_reset(smp);
   1ba54:	4628      	mov	r0, r5
   1ba56:	f00f fa6d 	bl	2af34 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ba5a:	f3bf 8f5b 	dmb	ish
   1ba5e:	4b06      	ldr	r3, [pc, #24]	; (1ba78 <bt_smp_connected+0x34>)
   1ba60:	34c4      	adds	r4, #196	; 0xc4
   1ba62:	e854 2f00 	ldrex	r2, [r4]
   1ba66:	e844 3100 	strex	r1, r3, [r4]
   1ba6a:	2900      	cmp	r1, #0
   1ba6c:	d1f9      	bne.n	1ba62 <bt_smp_connected+0x1e>
   1ba6e:	f3bf 8f5b 	dmb	ish
}
   1ba72:	bd38      	pop	{r3, r4, r5, pc}
   1ba74:	0001c50d 	.word	0x0001c50d
   1ba78:	20001ca0 	.word	0x20001ca0

0001ba7c <smp_pairing_confirm>:
{
   1ba7c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1ba7e:	688d      	ldr	r5, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ba80:	1d06      	adds	r6, r0, #4
{
   1ba82:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ba84:	210b      	movs	r1, #11
   1ba86:	4630      	mov	r0, r6
   1ba88:	f00f f8cd 	bl	2ac26 <atomic_clear_bit>
   1ba8c:	462b      	mov	r3, r5
   1ba8e:	f104 0217 	add.w	r2, r4, #23
   1ba92:	f105 0110 	add.w	r1, r5, #16
   1ba96:	f853 0b04 	ldr.w	r0, [r3], #4
   1ba9a:	f842 0b04 	str.w	r0, [r2], #4
   1ba9e:	428b      	cmp	r3, r1
   1baa0:	d1f9      	bne.n	1ba96 <smp_pairing_confirm+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1baa2:	2105      	movs	r1, #5
   1baa4:	4630      	mov	r0, r6
   1baa6:	f00f f894 	bl	2abd2 <atomic_test_bit>
   1baaa:	b920      	cbnz	r0, 1bab6 <smp_pairing_confirm+0x3a>
		return legacy_pairing_confirm(smp);
   1baac:	4620      	mov	r0, r4
}
   1baae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1bab2:	f00f babe 	b.w	2b032 <legacy_pairing_confirm>
	switch (smp->method) {
   1bab6:	7a22      	ldrb	r2, [r4, #8]
   1bab8:	2a01      	cmp	r2, #1
   1baba:	d009      	beq.n	1bad0 <smp_pairing_confirm+0x54>
   1babc:	2a02      	cmp	r2, #2
   1babe:	d113      	bne.n	1bae8 <smp_pairing_confirm+0x6c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1bac0:	4620      	mov	r0, r4
   1bac2:	2104      	movs	r1, #4
   1bac4:	f00f f983 	bl	2adce <atomic_set_bit>
}
   1bac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1bacc:	f7ff bbb0 	b.w	1b230 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1bad0:	210a      	movs	r1, #10
   1bad2:	4630      	mov	r0, r6
   1bad4:	f00f f87d 	bl	2abd2 <atomic_test_bit>
   1bad8:	2800      	cmp	r0, #0
   1bada:	d0f1      	beq.n	1bac0 <smp_pairing_confirm+0x44>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1badc:	4630      	mov	r0, r6
   1bade:	2100      	movs	r1, #0
   1bae0:	f00f f975 	bl	2adce <atomic_set_bit>
			return 0;
   1bae4:	2000      	movs	r0, #0
}
   1bae6:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bae8:	4802      	ldr	r0, [pc, #8]	; (1baf4 <smp_pairing_confirm+0x78>)
   1baea:	2145      	movs	r1, #69	; 0x45
   1baec:	f00c fe58 	bl	287a0 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1baf0:	2008      	movs	r0, #8
   1baf2:	e7f8      	b.n	1bae6 <smp_pairing_confirm+0x6a>
   1baf4:	0002f534 	.word	0x0002f534

0001baf8 <smp_pairing_random>:
{
   1baf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bafc:	460d      	mov	r5, r1
   1bafe:	b09c      	sub	sp, #112	; 0x70
   1bb00:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bb02:	f7ff fa4b 	bl	1af9c <latch_auth_cb>
   1bb06:	68ab      	ldr	r3, [r5, #8]
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1bb08:	f104 0837 	add.w	r8, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bb0c:	4607      	mov	r7, r0
   1bb0e:	4642      	mov	r2, r8
   1bb10:	f103 0110 	add.w	r1, r3, #16
   1bb14:	f853 0b04 	ldr.w	r0, [r3], #4
   1bb18:	f842 0b04 	str.w	r0, [r2], #4
   1bb1c:	428b      	cmp	r3, r1
   1bb1e:	d1f9      	bne.n	1bb14 <smp_pairing_random+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bb20:	1d26      	adds	r6, r4, #4
   1bb22:	2105      	movs	r1, #5
   1bb24:	4630      	mov	r0, r6
   1bb26:	f00f f854 	bl	2abd2 <atomic_test_bit>
   1bb2a:	2800      	cmp	r0, #0
   1bb2c:	d14a      	bne.n	1bbc4 <smp_pairing_random+0xcc>
	struct bt_conn *conn = smp->chan.chan.conn;
   1bb2e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1bb32:	f104 0747 	add.w	r7, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1bb36:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1bb3a:	ad08      	add	r5, sp, #32
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1bb3c:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1bb3e:	9201      	str	r2, [sp, #4]
   1bb40:	9300      	str	r3, [sp, #0]
   1bb42:	9502      	str	r5, [sp, #8]
   1bb44:	f104 0310 	add.w	r3, r4, #16
   1bb48:	f104 0209 	add.w	r2, r4, #9
   1bb4c:	4641      	mov	r1, r8
   1bb4e:	4638      	mov	r0, r7
   1bb50:	f00f fa13 	bl	2af7a <smp_c1>
	if (err) {
   1bb54:	b9e8      	cbnz	r0, 1bb92 <smp_pairing_random+0x9a>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1bb56:	2210      	movs	r2, #16
   1bb58:	4629      	mov	r1, r5
   1bb5a:	f104 0017 	add.w	r0, r4, #23
   1bb5e:	f010 fae6 	bl	2c12e <memcmp>
   1bb62:	2800      	cmp	r0, #0
   1bb64:	f040 8093 	bne.w	1bc8e <smp_pairing_random+0x196>
	memcpy(out, r2, 8);
   1bb68:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   1bb6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1bb70:	462b      	mov	r3, r5
   1bb72:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   1bb74:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1bb78:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
	return bt_encrypt_le(k, out, out);
   1bb7c:	462a      	mov	r2, r5
	memcpy(out + 8, r1, 8);
   1bb7e:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   1bb80:	4629      	mov	r1, r5
   1bb82:	4638      	mov	r0, r7
   1bb84:	f00f ff7b 	bl	2ba7e <bt_encrypt_le>
		if (err) {
   1bb88:	b128      	cbz	r0, 1bb96 <smp_pairing_random+0x9e>
			BT_ERR("Calculate STK failed");
   1bb8a:	486d      	ldr	r0, [pc, #436]	; (1bd40 <smp_pairing_random+0x248>)
   1bb8c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Calculate confirm failed");
   1bb8e:	f00c fe07 	bl	287a0 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1bb92:	2508      	movs	r5, #8
   1bb94:	e012      	b.n	1bbbc <smp_pairing_random+0xc4>
   1bb96:	463b      	mov	r3, r7
   1bb98:	af0c      	add	r7, sp, #48	; 0x30
   1bb9a:	462a      	mov	r2, r5
   1bb9c:	ca03      	ldmia	r2!, {r0, r1}
   1bb9e:	42ba      	cmp	r2, r7
   1bba0:	6018      	str	r0, [r3, #0]
   1bba2:	6059      	str	r1, [r3, #4]
   1bba4:	4615      	mov	r5, r2
   1bba6:	f103 0308 	add.w	r3, r3, #8
   1bbaa:	d1f6      	bne.n	1bb9a <smp_pairing_random+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1bbac:	2101      	movs	r1, #1
   1bbae:	4630      	mov	r0, r6
   1bbb0:	f00f f90d 	bl	2adce <atomic_set_bit>
		return smp_send_pairing_random(smp);
   1bbb4:	4620      	mov	r0, r4
   1bbb6:	f00f f957 	bl	2ae68 <smp_send_pairing_random>
   1bbba:	4605      	mov	r5, r0
}
   1bbbc:	4628      	mov	r0, r5
   1bbbe:	b01c      	add	sp, #112	; 0x70
   1bbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   1bbc4:	7a22      	ldrb	r2, [r4, #8]
   1bbc6:	2a05      	cmp	r2, #5
   1bbc8:	f200 80a1 	bhi.w	1bd0e <smp_pairing_random+0x216>
   1bbcc:	e8df f002 	tbb	[pc, r2]
   1bbd0:	03424234 	.word	0x03424234
   1bbd4:	849f      	.short	0x849f
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1bbd6:	4b5b      	ldr	r3, [pc, #364]	; (1bd44 <smp_pairing_random+0x24c>)
	sys_memcpy_swap(m, u, 32);
   1bbd8:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1bbda:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1bbdc:	eb0d 0002 	add.w	r0, sp, r2
   1bbe0:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1bbe4:	f7ff fa3a 	bl	1b05c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1bbe8:	2220      	movs	r2, #32
   1bbea:	4629      	mov	r1, r5
   1bbec:	a810      	add	r0, sp, #64	; 0x40
   1bbee:	f7ff fa35 	bl	1b05c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1bbf2:	2210      	movs	r2, #16
   1bbf4:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1bbf8:	a818      	add	r0, sp, #96	; 0x60
   1bbfa:	f7ff fa2f 	bl	1b05c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1bbfe:	2210      	movs	r2, #16
   1bc00:	eb0d 0002 	add.w	r0, sp, r2
   1bc04:	4641      	mov	r1, r8
   1bc06:	f7ff fa29 	bl	1b05c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1bc0a:	ab04      	add	r3, sp, #16
   1bc0c:	2250      	movs	r2, #80	; 0x50
   1bc0e:	a908      	add	r1, sp, #32
   1bc10:	4618      	mov	r0, r3
   1bc12:	f00f f81e 	bl	2ac52 <bt_smp_aes_cmac>
	if (err) {
   1bc16:	2800      	cmp	r0, #0
   1bc18:	d1bb      	bne.n	1bb92 <smp_pairing_random+0x9a>
	memcpy(passkey, xs + 12, 4);
   1bc1a:	9d07      	ldr	r5, [sp, #28]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1bc1c:	210a      	movs	r1, #10
   1bc1e:	4630      	mov	r0, r6
   1bc20:	f00f f8d5 	bl	2adce <atomic_set_bit>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1bc24:	4b48      	ldr	r3, [pc, #288]	; (1bd48 <smp_pairing_random+0x250>)
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1bc26:	68ba      	ldr	r2, [r7, #8]
   1bc28:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1bc2c:	ba2d      	rev	r5, r5
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1bc2e:	fbb5 f1f3 	udiv	r1, r5, r3
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1bc32:	fb03 5111 	mls	r1, r3, r1, r5
   1bc36:	4790      	blx	r2
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1bc38:	4620      	mov	r0, r4
   1bc3a:	210d      	movs	r1, #13
   1bc3c:	f00f f8c7 	bl	2adce <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1bc40:	4630      	mov	r0, r6
   1bc42:	2110      	movs	r1, #16
   1bc44:	f00f f8c3 	bl	2adce <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1bc48:	4620      	mov	r0, r4
}
   1bc4a:	b01c      	add	sp, #112	; 0x70
   1bc4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return smp_send_pairing_random(smp);
   1bc50:	f00f b90a 	b.w	2ae68 <smp_send_pairing_random>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bc54:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1bc58:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1bc5c:	4939      	ldr	r1, [pc, #228]	; (1bd44 <smp_pairing_random+0x24c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bc5e:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1bc60:	ad08      	add	r5, sp, #32
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bc62:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1bc66:	9500      	str	r5, [sp, #0]
   1bc68:	6809      	ldr	r1, [r1, #0]
   1bc6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1bc6e:	4642      	mov	r2, r8
   1bc70:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1bc74:	f00f f886 	bl	2ad84 <smp_f4>
   1bc78:	b110      	cbz	r0, 1bc80 <smp_pairing_random+0x188>
		BT_ERR("Calculate confirm failed");
   1bc7a:	4834      	ldr	r0, [pc, #208]	; (1bd4c <smp_pairing_random+0x254>)
   1bc7c:	2145      	movs	r1, #69	; 0x45
   1bc7e:	e786      	b.n	1bb8e <smp_pairing_random+0x96>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1bc80:	2210      	movs	r2, #16
   1bc82:	4629      	mov	r1, r5
   1bc84:	f104 0017 	add.w	r0, r4, #23
   1bc88:	f010 fa51 	bl	2c12e <memcmp>
   1bc8c:	b108      	cbz	r0, 1bc92 <smp_pairing_random+0x19a>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1bc8e:	2504      	movs	r5, #4
   1bc90:	e794      	b.n	1bbbc <smp_pairing_random+0xc4>
		atomic_set_bit(smp->allowed_cmds,
   1bc92:	2103      	movs	r1, #3
   1bc94:	4620      	mov	r0, r4
   1bc96:	f00f f89a 	bl	2adce <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1bc9a:	f00f f8e5 	bl	2ae68 <smp_send_pairing_random>
		if (err) {
   1bc9e:	4605      	mov	r5, r0
   1bca0:	2800      	cmp	r0, #0
   1bca2:	d18b      	bne.n	1bbbc <smp_pairing_random+0xc4>
		smp->passkey_round++;
   1bca4:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1bca8:	3301      	adds	r3, #1
   1bcaa:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1bcac:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1bcae:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1bcb2:	d108      	bne.n	1bcc6 <smp_pairing_random+0x1ce>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1bcb4:	4620      	mov	r0, r4
   1bcb6:	210d      	movs	r1, #13
   1bcb8:	f00f f889 	bl	2adce <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1bcbc:	2110      	movs	r1, #16
   1bcbe:	4630      	mov	r0, r6
   1bcc0:	f00f f885 	bl	2adce <atomic_set_bit>
			return 0;
   1bcc4:	e77a      	b.n	1bbbc <smp_pairing_random+0xc4>
		if (bt_rand(smp->prnd, 16)) {
   1bcc6:	2110      	movs	r1, #16
   1bcc8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1bccc:	f004 f856 	bl	1fd7c <bt_rand>
   1bcd0:	2800      	cmp	r0, #0
   1bcd2:	f43f af73 	beq.w	1bbbc <smp_pairing_random+0xc4>
   1bcd6:	e75c      	b.n	1bb92 <smp_pairing_random+0x9a>
		if (bt_rand(smp->prnd, 16)) {
   1bcd8:	2110      	movs	r1, #16
   1bcda:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1bcde:	f004 f84d 	bl	1fd7c <bt_rand>
   1bce2:	2800      	cmp	r0, #0
   1bce4:	f47f af55 	bne.w	1bb92 <smp_pairing_random+0x9a>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1bce8:	b1b7      	cbz	r7, 1bd18 <smp_pairing_random+0x220>
   1bcea:	68fb      	ldr	r3, [r7, #12]
   1bcec:	b1a3      	cbz	r3, 1bd18 <smp_pairing_random+0x220>
			struct bt_conn_oob_info info = {
   1bcee:	4b18      	ldr	r3, [pc, #96]	; (1bd50 <smp_pairing_random+0x258>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1bcf0:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1bcf2:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   1bcf6:	f8ad 3020 	strh.w	r3, [sp, #32]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1bcfa:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1bcfc:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1bcfe:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1bd02:	d40b      	bmi.n	1bd1c <smp_pairing_random+0x224>
				     BT_CONN_OOB_BOTH_PEERS :
   1bd04:	2b00      	cmp	r3, #0
   1bd06:	bf0c      	ite	eq
   1bd08:	2003      	moveq	r0, #3
   1bd0a:	2001      	movne	r0, #1
   1bd0c:	e009      	b.n	1bd22 <smp_pairing_random+0x22a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bd0e:	4811      	ldr	r0, [pc, #68]	; (1bd54 <smp_pairing_random+0x25c>)
   1bd10:	2145      	movs	r1, #69	; 0x45
   1bd12:	f00c fd45 	bl	287a0 <z_log_minimal_printk>
   1bd16:	e73c      	b.n	1bb92 <smp_pairing_random+0x9a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1bd18:	2502      	movs	r5, #2
   1bd1a:	e74f      	b.n	1bbbc <smp_pairing_random+0xc4>
				     BT_CONN_OOB_BOTH_PEERS :
   1bd1c:	2b00      	cmp	r3, #0
   1bd1e:	bf18      	it	ne
   1bd20:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1bd22:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1bd24:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
			smp->oobd_remote = NULL;
   1bd28:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1bd2c:	4630      	mov	r0, r6
   1bd2e:	210c      	movs	r1, #12
   1bd30:	f00f f84d 	bl	2adce <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1bd34:	68fb      	ldr	r3, [r7, #12]
   1bd36:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1bd3a:	a908      	add	r1, sp, #32
   1bd3c:	4798      	blx	r3
			return 0;
   1bd3e:	e73d      	b.n	1bbbc <smp_pairing_random+0xc4>
   1bd40:	0002f638 	.word	0x0002f638
   1bd44:	200028a4 	.word	0x200028a4
   1bd48:	000f4240 	.word	0x000f4240
   1bd4c:	0002f652 	.word	0x0002f652
   1bd50:	0002c82b 	.word	0x0002c82b
   1bd54:	0002f534 	.word	0x0002f534

0001bd58 <bt_smp_start_security>:
{
   1bd58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1bd5c:	f890 8003 	ldrb.w	r8, [r0, #3]
   1bd60:	f1b8 0f01 	cmp.w	r8, #1
{
   1bd64:	4605      	mov	r5, r0
	switch (conn->role) {
   1bd66:	d005      	beq.n	1bd74 <bt_smp_start_security+0x1c>
		return -EINVAL;
   1bd68:	f06f 0415 	mvn.w	r4, #21
}
   1bd6c:	4620      	mov	r0, r4
   1bd6e:	b003      	add	sp, #12
   1bd70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1bd74:	f7ff f998 	bl	1b0a8 <smp_chan_get>
	if (!smp) {
   1bd78:	4606      	mov	r6, r0
   1bd7a:	2800      	cmp	r0, #0
   1bd7c:	f000 80b1 	beq.w	1bee2 <bt_smp_start_security+0x18a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1bd80:	1d07      	adds	r7, r0, #4
   1bd82:	2104      	movs	r1, #4
   1bd84:	4638      	mov	r0, r7
   1bd86:	f00e ff24 	bl	2abd2 <atomic_test_bit>
   1bd8a:	2800      	cmp	r0, #0
   1bd8c:	f040 80ac 	bne.w	1bee8 <bt_smp_start_security+0x190>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1bd90:	2103      	movs	r1, #3
   1bd92:	4638      	mov	r0, r7
   1bd94:	f00e ff1d 	bl	2abd2 <atomic_test_bit>
   1bd98:	b110      	cbz	r0, 1bda0 <bt_smp_start_security+0x48>
		return -EBUSY;
   1bd9a:	f06f 040f 	mvn.w	r4, #15
   1bd9e:	e7e5      	b.n	1bd6c <bt_smp_start_security+0x14>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1bda0:	4641      	mov	r1, r8
   1bda2:	4638      	mov	r0, r7
   1bda4:	f00e ff15 	bl	2abd2 <atomic_test_bit>
   1bda8:	2800      	cmp	r0, #0
   1bdaa:	d1f6      	bne.n	1bd9a <bt_smp_start_security+0x42>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bdac:	4630      	mov	r0, r6
   1bdae:	f7ff f8f5 	bl	1af9c <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1bdb2:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
   1bdb6:	7a9b      	ldrb	r3, [r3, #10]
   1bdb8:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bdba:	4604      	mov	r4, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1bdbc:	d042      	beq.n	1be44 <bt_smp_start_security+0xec>
   1bdbe:	d832      	bhi.n	1be26 <bt_smp_start_security+0xce>
   1bdc0:	3b01      	subs	r3, #1
   1bdc2:	2b01      	cmp	r3, #1
   1bdc4:	d94a      	bls.n	1be5c <bt_smp_start_security+0x104>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1bdc6:	210a      	movs	r1, #10
   1bdc8:	1d28      	adds	r0, r5, #4
   1bdca:	f00e ff02 	bl	2abd2 <atomic_test_bit>
   1bdce:	2800      	cmp	r0, #0
   1bdd0:	d1ca      	bne.n	1bd68 <bt_smp_start_security+0x10>
	if (!conn->le.keys) {
   1bdd2:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1bdd6:	b983      	cbnz	r3, 1bdfa <bt_smp_start_security+0xa2>
						     conn->id, &conn->le.dst);
   1bdd8:	f105 0490 	add.w	r4, r5, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1bddc:	7a29      	ldrb	r1, [r5, #8]
   1bdde:	4622      	mov	r2, r4
   1bde0:	2020      	movs	r0, #32
   1bde2:	f000 fcab 	bl	1c73c <bt_keys_find>
   1bde6:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1bdea:	b930      	cbnz	r0, 1bdfa <bt_smp_start_security+0xa2>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1bdec:	7a29      	ldrb	r1, [r5, #8]
   1bdee:	4622      	mov	r2, r4
   1bdf0:	2004      	movs	r0, #4
   1bdf2:	f000 fca3 	bl	1c73c <bt_keys_find>
   1bdf6:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1bdfa:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1bdfe:	2b00      	cmp	r3, #0
   1be00:	d0b2      	beq.n	1bd68 <bt_smp_start_security+0x10>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1be02:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1be04:	f012 0f24 	tst.w	r2, #36	; 0x24
   1be08:	d0ae      	beq.n	1bd68 <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1be0a:	7aa9      	ldrb	r1, [r5, #10]
   1be0c:	2902      	cmp	r1, #2
   1be0e:	d925      	bls.n	1be5c <bt_smp_start_security+0x104>
   1be10:	7b58      	ldrb	r0, [r3, #13]
   1be12:	07c0      	lsls	r0, r0, #31
   1be14:	d5a8      	bpl.n	1bd68 <bt_smp_start_security+0x10>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1be16:	2903      	cmp	r1, #3
   1be18:	d020      	beq.n	1be5c <bt_smp_start_security+0x104>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1be1a:	0692      	lsls	r2, r2, #26
   1be1c:	d5a4      	bpl.n	1bd68 <bt_smp_start_security+0x10>
   1be1e:	7b1b      	ldrb	r3, [r3, #12]
   1be20:	2b10      	cmp	r3, #16
   1be22:	d1a1      	bne.n	1bd68 <bt_smp_start_security+0x10>
   1be24:	e01a      	b.n	1be5c <bt_smp_start_security+0x104>
	switch (smp->chan.chan.conn->required_sec_level) {
   1be26:	2b04      	cmp	r3, #4
   1be28:	d1cd      	bne.n	1bdc6 <bt_smp_start_security+0x6e>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1be2a:	4630      	mov	r0, r6
   1be2c:	f7ff f8d4 	bl	1afd8 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1be30:	2803      	cmp	r0, #3
   1be32:	d102      	bne.n	1be3a <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1be34:	b1fc      	cbz	r4, 1be76 <bt_smp_start_security+0x11e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1be36:	68e4      	ldr	r4, [r4, #12]
   1be38:	b10c      	cbz	r4, 1be3e <bt_smp_start_security+0xe6>
   1be3a:	4b2d      	ldr	r3, [pc, #180]	; (1bef0 <bt_smp_start_security+0x198>)
   1be3c:	781c      	ldrb	r4, [r3, #0]
   1be3e:	f004 0401 	and.w	r4, r4, #1
   1be42:	e009      	b.n	1be58 <bt_smp_start_security+0x100>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1be44:	4630      	mov	r0, r6
   1be46:	f7ff f8c7 	bl	1afd8 <get_io_capa>
   1be4a:	2803      	cmp	r0, #3
   1be4c:	d111      	bne.n	1be72 <bt_smp_start_security+0x11a>
   1be4e:	b11c      	cbz	r4, 1be58 <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1be50:	68e4      	ldr	r4, [r4, #12]
   1be52:	3c00      	subs	r4, #0
   1be54:	bf18      	it	ne
   1be56:	2401      	movne	r4, #1
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   1be58:	2c00      	cmp	r4, #0
   1be5a:	d0b4      	beq.n	1bdc6 <bt_smp_start_security+0x6e>
	if (!conn->le.keys) {
   1be5c:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1be60:	b15b      	cbz	r3, 1be7a <bt_smp_start_security+0x122>
	if (smp_init(smp) != 0) {
   1be62:	4630      	mov	r0, r6
   1be64:	f7ff f94c 	bl	1b100 <smp_init>
   1be68:	4604      	mov	r4, r0
   1be6a:	b190      	cbz	r0, 1be92 <bt_smp_start_security+0x13a>
		return -ENOBUFS;
   1be6c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1be70:	e77c      	b.n	1bd6c <bt_smp_start_security+0x14>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1be72:	4644      	mov	r4, r8
   1be74:	e7f0      	b.n	1be58 <bt_smp_start_security+0x100>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1be76:	2400      	movs	r4, #0
   1be78:	e7e1      	b.n	1be3e <bt_smp_start_security+0xe6>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1be7a:	7a28      	ldrb	r0, [r5, #8]
   1be7c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1be80:	f000 fc14 	bl	1c6ac <bt_keys_get_addr>
   1be84:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1be88:	2800      	cmp	r0, #0
   1be8a:	d1ea      	bne.n	1be62 <bt_smp_start_security+0x10a>
			return -ENOMEM;
   1be8c:	f06f 040b 	mvn.w	r4, #11
   1be90:	e76c      	b.n	1bd6c <bt_smp_start_security+0x14>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1be92:	210b      	movs	r1, #11
   1be94:	4630      	mov	r0, r6
   1be96:	f00e ffae 	bl	2adf6 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1be9a:	4680      	mov	r8, r0
   1be9c:	2800      	cmp	r0, #0
   1be9e:	d0e5      	beq.n	1be6c <bt_smp_start_security+0x114>
   1bea0:	2101      	movs	r1, #1
   1bea2:	3008      	adds	r0, #8
   1bea4:	f001 f91e 	bl	1d0e4 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1bea8:	2109      	movs	r1, #9
   1beaa:	4681      	mov	r9, r0
   1beac:	4630      	mov	r0, r6
   1beae:	f7ff f8b7 	bl	1b020 <get_auth>
   1beb2:	4623      	mov	r3, r4
   1beb4:	f889 0000 	strb.w	r0, [r9]
   1beb8:	4642      	mov	r2, r8
   1beba:	9400      	str	r4, [sp, #0]
   1bebc:	2106      	movs	r1, #6
   1bebe:	4628      	mov	r0, r5
   1bec0:	f00d ff15 	bl	29cee <bt_l2cap_send_cb>
	if (err) {
   1bec4:	4604      	mov	r4, r0
   1bec6:	b118      	cbz	r0, 1bed0 <bt_smp_start_security+0x178>
		net_buf_unref(req_buf);
   1bec8:	4640      	mov	r0, r8
   1beca:	f000 fff5 	bl	1ceb8 <net_buf_unref>
		return err;
   1bece:	e74d      	b.n	1bd6c <bt_smp_start_security+0x14>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1bed0:	4638      	mov	r0, r7
   1bed2:	210f      	movs	r1, #15
   1bed4:	f00e ff7b 	bl	2adce <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1bed8:	2101      	movs	r1, #1
   1beda:	4630      	mov	r0, r6
   1bedc:	f00e ff77 	bl	2adce <atomic_set_bit>
	return 0;
   1bee0:	e744      	b.n	1bd6c <bt_smp_start_security+0x14>
		return -ENOTCONN;
   1bee2:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1bee6:	e741      	b.n	1bd6c <bt_smp_start_security+0x14>
		return -EIO;
   1bee8:	f06f 0404 	mvn.w	r4, #4
   1beec:	e73e      	b.n	1bd6c <bt_smp_start_security+0x14>
   1beee:	bf00      	nop
   1bef0:	200037d8 	.word	0x200037d8

0001bef4 <smp_pairing_complete>:
{
   1bef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1bef6:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   1befa:	4606      	mov	r6, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1befc:	1d05      	adds	r5, r0, #4
	if (!status) {
   1befe:	b9f1      	cbnz	r1, 1bf3e <smp_pairing_complete+0x4a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1bf00:	210d      	movs	r1, #13
   1bf02:	4628      	mov	r0, r5
   1bf04:	f00e fe65 	bl	2abd2 <atomic_test_bit>
		if (bond_flag) {
   1bf08:	4607      	mov	r7, r0
   1bf0a:	b118      	cbz	r0, 1bf14 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1bf0c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1bf10:	f000 fd16 	bl	1c940 <bt_keys_store>
	return list->head;
   1bf14:	4b31      	ldr	r3, [pc, #196]	; (1bfdc <smp_pairing_complete+0xe8>)
   1bf16:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1bf18:	2b00      	cmp	r3, #0
   1bf1a:	d051      	beq.n	1bfc0 <smp_pairing_complete+0xcc>
	return node->next;
   1bf1c:	f853 590c 	ldr.w	r5, [r3], #-12
   1bf20:	b105      	cbz	r5, 1bf24 <smp_pairing_complete+0x30>
   1bf22:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1bf24:	681b      	ldr	r3, [r3, #0]
   1bf26:	b113      	cbz	r3, 1bf2e <smp_pairing_complete+0x3a>
				listener->pairing_complete(conn, bond_flag);
   1bf28:	4639      	mov	r1, r7
   1bf2a:	4620      	mov	r0, r4
   1bf2c:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1bf2e:	2d00      	cmp	r5, #0
   1bf30:	d046      	beq.n	1bfc0 <smp_pairing_complete+0xcc>
   1bf32:	68ea      	ldr	r2, [r5, #12]
   1bf34:	b102      	cbz	r2, 1bf38 <smp_pairing_complete+0x44>
   1bf36:	3a0c      	subs	r2, #12
{
   1bf38:	462b      	mov	r3, r5
   1bf3a:	4615      	mov	r5, r2
   1bf3c:	e7f2      	b.n	1bf24 <smp_pairing_complete+0x30>
	switch (smp_err) {
   1bf3e:	3901      	subs	r1, #1
   1bf40:	b2c9      	uxtb	r1, r1
   1bf42:	290e      	cmp	r1, #14
   1bf44:	bf9c      	itt	ls
   1bf46:	4b26      	ldrls	r3, [pc, #152]	; (1bfe0 <smp_pairing_complete+0xec>)
   1bf48:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1bf4a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (!status) {
   1bf4e:	bf88      	it	hi
   1bf50:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1bf52:	b143      	cbz	r3, 1bf66 <smp_pairing_complete+0x72>
   1bf54:	7b1b      	ldrb	r3, [r3, #12]
   1bf56:	bb63      	cbnz	r3, 1bfb2 <smp_pairing_complete+0xbe>
			bt_keys_clear(conn->le.keys);
   1bf58:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1bf5c:	f000 fc4e 	bl	1c7fc <bt_keys_clear>
			conn->le.keys = NULL;
   1bf60:	2300      	movs	r3, #0
   1bf62:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1bf66:	2102      	movs	r1, #2
   1bf68:	4628      	mov	r0, r5
   1bf6a:	f00e fe32 	bl	2abd2 <atomic_test_bit>
   1bf6e:	b940      	cbnz	r0, 1bf82 <smp_pairing_complete+0x8e>
	switch (err) {
   1bf70:	2f07      	cmp	r7, #7
   1bf72:	bf96      	itet	ls
   1bf74:	4b1b      	ldrls	r3, [pc, #108]	; (1bfe4 <smp_pairing_complete+0xf0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1bf76:	211f      	movhi	r1, #31
   1bf78:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1bf7a:	463a      	mov	r2, r7
   1bf7c:	4620      	mov	r0, r4
   1bf7e:	f7fc f879 	bl	18074 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1bf82:	2103      	movs	r1, #3
   1bf84:	4628      	mov	r0, r5
   1bf86:	f00e fe24 	bl	2abd2 <atomic_test_bit>
   1bf8a:	b1c8      	cbz	r0, 1bfc0 <smp_pairing_complete+0xcc>
	return list->head;
   1bf8c:	4b13      	ldr	r3, [pc, #76]	; (1bfdc <smp_pairing_complete+0xe8>)
   1bf8e:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1bf90:	b1b3      	cbz	r3, 1bfc0 <smp_pairing_complete+0xcc>
	return node->next;
   1bf92:	f853 590c 	ldr.w	r5, [r3], #-12
   1bf96:	b105      	cbz	r5, 1bf9a <smp_pairing_complete+0xa6>
   1bf98:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1bf9a:	685b      	ldr	r3, [r3, #4]
   1bf9c:	b113      	cbz	r3, 1bfa4 <smp_pairing_complete+0xb0>
					listener->pairing_failed(conn, security_err);
   1bf9e:	4639      	mov	r1, r7
   1bfa0:	4620      	mov	r0, r4
   1bfa2:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1bfa4:	b165      	cbz	r5, 1bfc0 <smp_pairing_complete+0xcc>
   1bfa6:	68ea      	ldr	r2, [r5, #12]
   1bfa8:	b102      	cbz	r2, 1bfac <smp_pairing_complete+0xb8>
   1bfaa:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1bfac:	462b      	mov	r3, r5
   1bfae:	4615      	mov	r5, r2
   1bfb0:	e7f3      	b.n	1bf9a <smp_pairing_complete+0xa6>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1bfb2:	2102      	movs	r1, #2
   1bfb4:	4628      	mov	r0, r5
   1bfb6:	f00e fe0c 	bl	2abd2 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1bfba:	2800      	cmp	r0, #0
   1bfbc:	d1cc      	bne.n	1bf58 <smp_pairing_complete+0x64>
   1bfbe:	e7d2      	b.n	1bf66 <smp_pairing_complete+0x72>
	smp_reset(smp);
   1bfc0:	4630      	mov	r0, r6
   1bfc2:	f00e ffb7 	bl	2af34 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1bfc6:	7a62      	ldrb	r2, [r4, #9]
   1bfc8:	7aa3      	ldrb	r3, [r4, #10]
   1bfca:	429a      	cmp	r2, r3
   1bfcc:	d004      	beq.n	1bfd8 <smp_pairing_complete+0xe4>
		bt_smp_start_security(conn);
   1bfce:	4620      	mov	r0, r4
}
   1bfd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1bfd4:	f7ff bec0 	b.w	1bd58 <bt_smp_start_security>
}
   1bfd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bfda:	bf00      	nop
   1bfdc:	20002730 	.word	0x20002730
   1bfe0:	0002f85b 	.word	0x0002f85b
   1bfe4:	0002f873 	.word	0x0002f873

0001bfe8 <bt_smp_recv>:
{
   1bfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1bfea:	898b      	ldrh	r3, [r1, #12]
{
   1bfec:	4607      	mov	r7, r0
   1bfee:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1bff0:	b92b      	cbnz	r3, 1bffe <bt_smp_recv+0x16>
		BT_ERR("Too small SMP PDU received");
   1bff2:	4828      	ldr	r0, [pc, #160]	; (1c094 <bt_smp_recv+0xac>)
   1bff4:	2145      	movs	r1, #69	; 0x45
   1bff6:	f00c fbd3 	bl	287a0 <z_log_minimal_printk>
}
   1bffa:	2000      	movs	r0, #0
   1bffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1bffe:	2101      	movs	r1, #1
   1c000:	f105 0008 	add.w	r0, r5, #8
   1c004:	f001 f850 	bl	1d0a8 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c008:	2104      	movs	r1, #4
   1c00a:	4606      	mov	r6, r0
   1c00c:	f1a7 00e8 	sub.w	r0, r7, #232	; 0xe8
   1c010:	f00e fddf 	bl	2abd2 <atomic_test_bit>
   1c014:	f1a7 04ec 	sub.w	r4, r7, #236	; 0xec
   1c018:	7832      	ldrb	r2, [r6, #0]
   1c01a:	b120      	cbz	r0, 1c026 <bt_smp_recv+0x3e>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1c01c:	481e      	ldr	r0, [pc, #120]	; (1c098 <bt_smp_recv+0xb0>)
   1c01e:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1c020:	f00c fbbe 	bl	287a0 <z_log_minimal_printk>
		return 0;
   1c024:	e7e9      	b.n	1bffa <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1c026:	2a0e      	cmp	r2, #14
   1c028:	d902      	bls.n	1c030 <bt_smp_recv+0x48>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1c02a:	481c      	ldr	r0, [pc, #112]	; (1c09c <bt_smp_recv+0xb4>)
   1c02c:	2157      	movs	r1, #87	; 0x57
   1c02e:	e7f7      	b.n	1c020 <bt_smp_recv+0x38>
	if (!handlers[hdr->code].func) {
   1c030:	4f1b      	ldr	r7, [pc, #108]	; (1c0a0 <bt_smp_recv+0xb8>)
   1c032:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   1c036:	b943      	cbnz	r3, 1c04a <bt_smp_recv+0x62>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1c038:	2157      	movs	r1, #87	; 0x57
   1c03a:	481a      	ldr	r0, [pc, #104]	; (1c0a4 <bt_smp_recv+0xbc>)
   1c03c:	f00c fbb0 	bl	287a0 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1c040:	2107      	movs	r1, #7
		smp_error(smp, err);
   1c042:	4620      	mov	r0, r4
   1c044:	f00f f8d7 	bl	2b1f6 <smp_error>
   1c048:	e7d7      	b.n	1bffa <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1c04a:	4611      	mov	r1, r2
   1c04c:	4620      	mov	r0, r4
   1c04e:	f00e ff59 	bl	2af04 <atomic_test_and_clear_bit>
   1c052:	7833      	ldrb	r3, [r6, #0]
   1c054:	b948      	cbnz	r0, 1c06a <bt_smp_recv+0x82>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1c056:	461a      	mov	r2, r3
   1c058:	4813      	ldr	r0, [pc, #76]	; (1c0a8 <bt_smp_recv+0xc0>)
   1c05a:	2157      	movs	r1, #87	; 0x57
   1c05c:	f00c fba0 	bl	287a0 <z_log_minimal_printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1c060:	7833      	ldrb	r3, [r6, #0]
   1c062:	2b05      	cmp	r3, #5
   1c064:	d0c9      	beq.n	1bffa <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c066:	2108      	movs	r1, #8
   1c068:	e7eb      	b.n	1c042 <bt_smp_recv+0x5a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1c06a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1c06e:	89aa      	ldrh	r2, [r5, #12]
   1c070:	7909      	ldrb	r1, [r1, #4]
   1c072:	4291      	cmp	r1, r2
   1c074:	d005      	beq.n	1c082 <bt_smp_recv+0x9a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c076:	2145      	movs	r1, #69	; 0x45
   1c078:	480c      	ldr	r0, [pc, #48]	; (1c0ac <bt_smp_recv+0xc4>)
   1c07a:	f00c fb91 	bl	287a0 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1c07e:	210a      	movs	r1, #10
   1c080:	e7df      	b.n	1c042 <bt_smp_recv+0x5a>
	err = handlers[hdr->code].func(smp, buf);
   1c082:	4629      	mov	r1, r5
   1c084:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   1c088:	4620      	mov	r0, r4
   1c08a:	4798      	blx	r3
	if (err) {
   1c08c:	4601      	mov	r1, r0
   1c08e:	2800      	cmp	r0, #0
   1c090:	d0b3      	beq.n	1bffa <bt_smp_recv+0x12>
   1c092:	e7d6      	b.n	1c042 <bt_smp_recv+0x5a>
   1c094:	0002f670 	.word	0x0002f670
   1c098:	0002f690 	.word	0x0002f690
   1c09c:	0002f6c6 	.word	0x0002f6c6
   1c0a0:	0002ccb8 	.word	0x0002ccb8
   1c0a4:	0002f6ed 	.word	0x0002f6ed
   1c0a8:	0002f70c 	.word	0x0002f70c
   1c0ac:	0002eff7 	.word	0x0002eff7

0001c0b0 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1c0b0:	4b0f      	ldr	r3, [pc, #60]	; (1c0f0 <bt_smp_pkey_ready+0x40>)
{
   1c0b2:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1c0b4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1c0b6:	b928      	cbnz	r0, 1c0c4 <bt_smp_pkey_ready+0x14>
}
   1c0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1c0bc:	480d      	ldr	r0, [pc, #52]	; (1c0f4 <bt_smp_pkey_ready+0x44>)
   1c0be:	2157      	movs	r1, #87	; 0x57
   1c0c0:	f00c bb6e 	b.w	287a0 <z_log_minimal_printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c0c4:	4c0c      	ldr	r4, [pc, #48]	; (1c0f8 <bt_smp_pkey_ready+0x48>)
	z_impl_k_sem_give(sem);
   1c0c6:	480d      	ldr	r0, [pc, #52]	; (1c0fc <bt_smp_pkey_ready+0x4c>)
   1c0c8:	f006 fad2 	bl	22670 <z_impl_k_sem_give>
   1c0cc:	f3bf 8f5b 	dmb	ish
   1c0d0:	6863      	ldr	r3, [r4, #4]
   1c0d2:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1c0d6:	065b      	lsls	r3, r3, #25
   1c0d8:	d509      	bpl.n	1c0ee <bt_smp_pkey_ready+0x3e>
		err = smp_public_key_periph(smp);
   1c0da:	4620      	mov	r0, r4
   1c0dc:	f7ff f8ec 	bl	1b2b8 <smp_public_key_periph>
		if (err) {
   1c0e0:	4601      	mov	r1, r0
   1c0e2:	b120      	cbz	r0, 1c0ee <bt_smp_pkey_ready+0x3e>
			smp_error(smp, err);
   1c0e4:	4620      	mov	r0, r4
}
   1c0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1c0ea:	f00f b884 	b.w	2b1f6 <smp_error>
}
   1c0ee:	bd10      	pop	{r4, pc}
   1c0f0:	200028a4 	.word	0x200028a4
   1c0f4:	0002f72c 	.word	0x0002f72c
   1c0f8:	20001ca0 	.word	0x20001ca0
   1c0fc:	20000ac0 	.word	0x20000ac0

0001c100 <smp_ident_addr_info>:
{
   1c100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1c104:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1c106:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c10a:	783b      	ldrb	r3, [r7, #0]
{
   1c10c:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1c10e:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1c112:	b1bb      	cbz	r3, 1c144 <smp_ident_addr_info+0x44>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1c114:	79bb      	ldrb	r3, [r7, #6]
   1c116:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c11a:	2bc0      	cmp	r3, #192	; 0xc0
   1c11c:	d012      	beq.n	1c144 <smp_ident_addr_info+0x44>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1c11e:	4638      	mov	r0, r7
   1c120:	f7f9 f896 	bl	15250 <bt_addr_le_str_real>
   1c124:	2145      	movs	r1, #69	; 0x45
   1c126:	4602      	mov	r2, r0
   1c128:	483c      	ldr	r0, [pc, #240]	; (1c21c <smp_ident_addr_info+0x11c>)
   1c12a:	f00c fb39 	bl	287a0 <z_log_minimal_printk>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1c12e:	4640      	mov	r0, r8
   1c130:	f7f9 f88e 	bl	15250 <bt_addr_le_str_real>
   1c134:	2145      	movs	r1, #69	; 0x45
   1c136:	4602      	mov	r2, r0
   1c138:	4839      	ldr	r0, [pc, #228]	; (1c220 <smp_ident_addr_info+0x120>)
   1c13a:	f00c fb31 	bl	287a0 <z_log_minimal_printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1c13e:	200a      	movs	r0, #10
}
   1c140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1c144:	2207      	movs	r2, #7
   1c146:	4639      	mov	r1, r7
   1c148:	4640      	mov	r0, r8
   1c14a:	f00f fff0 	bl	2c12e <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1c14e:	b168      	cbz	r0, 1c16c <smp_ident_addr_info+0x6c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1c150:	7a28      	ldrb	r0, [r5, #8]
   1c152:	4639      	mov	r1, r7
   1c154:	f000 fb42 	bl	1c7dc <bt_keys_find_addr>
		if (keys) {
   1c158:	4606      	mov	r6, r0
   1c15a:	b138      	cbz	r0, 1c16c <smp_ident_addr_info+0x6c>
			if (!update_keys_check(smp, keys)) {
   1c15c:	4601      	mov	r1, r0
   1c15e:	4620      	mov	r0, r4
   1c160:	f00e fd40 	bl	2abe4 <update_keys_check>
   1c164:	b1b0      	cbz	r0, 1c194 <smp_ident_addr_info+0x94>
			bt_keys_clear(keys);
   1c166:	4630      	mov	r0, r6
   1c168:	f000 fb48 	bl	1c7fc <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c16c:	210d      	movs	r1, #13
   1c16e:	1d20      	adds	r0, r4, #4
   1c170:	f00e fd2f 	bl	2abd2 <atomic_test_bit>
   1c174:	b3c8      	cbz	r0, 1c1ea <smp_ident_addr_info+0xea>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1c176:	7a29      	ldrb	r1, [r5, #8]
   1c178:	4642      	mov	r2, r8
   1c17a:	2002      	movs	r0, #2
   1c17c:	f00f f8ef 	bl	2b35e <bt_keys_get_type>
		if (!keys) {
   1c180:	4606      	mov	r6, r0
   1c182:	b948      	cbnz	r0, 1c198 <smp_ident_addr_info+0x98>
			BT_ERR("Unable to get keys for %s",
   1c184:	4640      	mov	r0, r8
   1c186:	f7f9 f863 	bl	15250 <bt_addr_le_str_real>
   1c18a:	2145      	movs	r1, #69	; 0x45
   1c18c:	4602      	mov	r2, r0
   1c18e:	4825      	ldr	r0, [pc, #148]	; (1c224 <smp_ident_addr_info+0x124>)
   1c190:	f00c fb06 	bl	287a0 <z_log_minimal_printk>
				return BT_SMP_ERR_UNSPECIFIED;
   1c194:	2008      	movs	r0, #8
   1c196:	e7d3      	b.n	1c140 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c198:	78eb      	ldrb	r3, [r5, #3]
   1c19a:	bbdb      	cbnz	r3, 1c214 <smp_ident_addr_info+0x114>
			dst = &conn->le.resp_addr;
   1c19c:	f105 039e 	add.w	r3, r5, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1c1a0:	781a      	ldrb	r2, [r3, #0]
   1c1a2:	2a01      	cmp	r2, #1
   1c1a4:	d11e      	bne.n	1c1e4 <smp_ident_addr_info+0xe4>
		if (bt_addr_le_is_rpa(dst)) {
   1c1a6:	799a      	ldrb	r2, [r3, #6]
   1c1a8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1c1ac:	2a40      	cmp	r2, #64	; 0x40
   1c1ae:	d119      	bne.n	1c1e4 <smp_ident_addr_info+0xe4>
   1c1b0:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1c1b4:	f8c6 203a 	str.w	r2, [r6, #58]	; 0x3a
   1c1b8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1c1bc:	87f3      	strh	r3, [r6, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1c1be:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   1c1c2:	b17b      	cbz	r3, 1c1e4 <smp_ident_addr_info+0xe4>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1c1c4:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   1c1c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c1cc:	2bc0      	cmp	r3, #192	; 0xc0
   1c1ce:	d009      	beq.n	1c1e4 <smp_ident_addr_info+0xe4>
				bt_addr_le_copy(&keys->addr, &req->addr);
   1c1d0:	4639      	mov	r1, r7
   1c1d2:	1c70      	adds	r0, r6, #1
   1c1d4:	f00e fd36 	bl	2ac44 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   1c1d8:	4640      	mov	r0, r8
   1c1da:	f00e fd33 	bl	2ac44 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   1c1de:	4628      	mov	r0, r5
   1c1e0:	f7fb ff08 	bl	17ff4 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1c1e4:	4630      	mov	r0, r6
   1c1e6:	f7fa fbab 	bl	16940 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1c1ea:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c1ee:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c1f2:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1c1f4:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c1f8:	d503      	bpl.n	1c202 <smp_ident_addr_info+0x102>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c1fa:	210a      	movs	r1, #10
   1c1fc:	4620      	mov	r0, r4
   1c1fe:	f00e fde6 	bl	2adce <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1c202:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1c206:	b91d      	cbnz	r5, 1c210 <smp_ident_addr_info+0x110>
		smp_pairing_complete(smp, 0);
   1c208:	4629      	mov	r1, r5
   1c20a:	4620      	mov	r0, r4
   1c20c:	f7ff fe72 	bl	1bef4 <smp_pairing_complete>
	return 0;
   1c210:	2000      	movs	r0, #0
   1c212:	e795      	b.n	1c140 <smp_ident_addr_info+0x40>
			dst = &conn->le.init_addr;
   1c214:	f105 0397 	add.w	r3, r5, #151	; 0x97
   1c218:	e7c2      	b.n	1c1a0 <smp_ident_addr_info+0xa0>
   1c21a:	bf00      	nop
   1c21c:	0002f74a 	.word	0x0002f74a
   1c220:	0002f763 	.word	0x0002f763
   1c224:	0002f515 	.word	0x0002f515

0001c228 <smp_central_ident>:
{
   1c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1c22a:	f8d0 70ec 	ldr.w	r7, [r0, #236]	; 0xec
{
   1c22e:	4604      	mov	r4, r0
   1c230:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c232:	3004      	adds	r0, #4
   1c234:	210d      	movs	r1, #13
   1c236:	f00e fccc 	bl	2abd2 <atomic_test_bit>
   1c23a:	b1d8      	cbz	r0, 1c274 <smp_central_ident+0x4c>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c23c:	f107 0690 	add.w	r6, r7, #144	; 0x90
   1c240:	7a39      	ldrb	r1, [r7, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1c242:	689d      	ldr	r5, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c244:	4632      	mov	r2, r6
   1c246:	2004      	movs	r0, #4
   1c248:	f00f f889 	bl	2b35e <bt_keys_get_type>
		if (!keys) {
   1c24c:	b948      	cbnz	r0, 1c262 <smp_central_ident+0x3a>
			BT_ERR("Unable to get keys for %s",
   1c24e:	4630      	mov	r0, r6
   1c250:	f7f8 fffe 	bl	15250 <bt_addr_le_str_real>
   1c254:	2145      	movs	r1, #69	; 0x45
   1c256:	4602      	mov	r2, r0
   1c258:	4813      	ldr	r0, [pc, #76]	; (1c2a8 <smp_central_ident+0x80>)
   1c25a:	f00c faa1 	bl	287a0 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1c25e:	2008      	movs	r0, #8
}
   1c260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c262:	462a      	mov	r2, r5
   1c264:	f832 3b02 	ldrh.w	r3, [r2], #2
   1c268:	8303      	strh	r3, [r0, #24]
   1c26a:	f8d5 3002 	ldr.w	r3, [r5, #2]
   1c26e:	6103      	str	r3, [r0, #16]
   1c270:	6853      	ldr	r3, [r2, #4]
   1c272:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1c274:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c278:	f023 0201 	bic.w	r2, r3, #1
   1c27c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1c280:	079a      	lsls	r2, r3, #30
   1c282:	d50c      	bpl.n	1c29e <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1c284:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c286:	4620      	mov	r0, r4
   1c288:	f00e fda1 	bl	2adce <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1c28c:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1c290:	b91d      	cbnz	r5, 1c29a <smp_central_ident+0x72>
		smp_pairing_complete(smp, 0);
   1c292:	4629      	mov	r1, r5
   1c294:	4620      	mov	r0, r4
   1c296:	f7ff fe2d 	bl	1bef4 <smp_pairing_complete>
	return 0;
   1c29a:	2000      	movs	r0, #0
   1c29c:	e7e0      	b.n	1c260 <smp_central_ident+0x38>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c29e:	075b      	lsls	r3, r3, #29
   1c2a0:	d5f4      	bpl.n	1c28c <smp_central_ident+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c2a2:	210a      	movs	r1, #10
   1c2a4:	e7ef      	b.n	1c286 <smp_central_ident+0x5e>
   1c2a6:	bf00      	nop
   1c2a8:	0002f515 	.word	0x0002f515

0001c2ac <smp_pairing_failed>:
{
   1c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2b0:	460e      	mov	r6, r1
   1c2b2:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1c2b4:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c2b8:	f7fe fe70 	bl	1af9c <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1c2bc:	68b6      	ldr	r6, [r6, #8]
	BT_ERR("reason 0x%x", req->reason);
   1c2be:	2145      	movs	r1, #69	; 0x45
   1c2c0:	7832      	ldrb	r2, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c2c2:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c2c4:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1c2c6:	480e      	ldr	r0, [pc, #56]	; (1c300 <smp_pairing_failed+0x54>)
   1c2c8:	f00c fa6a 	bl	287a0 <z_log_minimal_printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c2cc:	210a      	movs	r1, #10
   1c2ce:	4638      	mov	r0, r7
   1c2d0:	f00e fe18 	bl	2af04 <atomic_test_and_clear_bit>
   1c2d4:	b138      	cbz	r0, 1c2e6 <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1c2d6:	b96d      	cbnz	r5, 1c2f4 <smp_pairing_failed+0x48>
	smp_pairing_complete(smp, req->reason);
   1c2d8:	4620      	mov	r0, r4
   1c2da:	7831      	ldrb	r1, [r6, #0]
   1c2dc:	f7ff fe0a 	bl	1bef4 <smp_pairing_complete>
}
   1c2e0:	2000      	movs	r0, #0
   1c2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1c2e6:	210b      	movs	r1, #11
   1c2e8:	4638      	mov	r0, r7
   1c2ea:	f00e fe0b 	bl	2af04 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1c2ee:	2800      	cmp	r0, #0
   1c2f0:	d1f1      	bne.n	1c2d6 <smp_pairing_failed+0x2a>
   1c2f2:	e7f1      	b.n	1c2d8 <smp_pairing_failed+0x2c>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1c2f4:	692b      	ldr	r3, [r5, #16]
   1c2f6:	2b00      	cmp	r3, #0
   1c2f8:	d0ee      	beq.n	1c2d8 <smp_pairing_failed+0x2c>
			smp_auth_cb->cancel(conn);
   1c2fa:	4640      	mov	r0, r8
   1c2fc:	4798      	blx	r3
   1c2fe:	e7eb      	b.n	1c2d8 <smp_pairing_failed+0x2c>
   1c300:	0002f770 	.word	0x0002f770

0001c304 <bt_smp_encrypt_change>:
{
   1c304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1c308:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c30a:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1c30e:	b088      	sub	sp, #32
   1c310:	4604      	mov	r4, r0
   1c312:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c314:	4630      	mov	r0, r6
   1c316:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1c318:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c31c:	f00e fdf2 	bl	2af04 <atomic_test_and_clear_bit>
   1c320:	2800      	cmp	r0, #0
   1c322:	f000 8085 	beq.w	1c430 <bt_smp_encrypt_change+0x12c>
	if (hci_status) {
   1c326:	b1d7      	cbz	r7, 1c35e <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c328:	2103      	movs	r1, #3
   1c32a:	4630      	mov	r0, r6
   1c32c:	f00e fc51 	bl	2abd2 <atomic_test_bit>
   1c330:	2800      	cmp	r0, #0
   1c332:	d07d      	beq.n	1c430 <bt_smp_encrypt_change+0x12c>
			uint8_t smp_err = smp_err_get(
   1c334:	4638      	mov	r0, r7
   1c336:	f7f9 ff05 	bl	16144 <bt_security_err_get>
	switch (auth_err) {
   1c33a:	3801      	subs	r0, #1
   1c33c:	b2c0      	uxtb	r0, r0
   1c33e:	2808      	cmp	r0, #8
   1c340:	bf9a      	itte	ls
   1c342:	4b6c      	ldrls	r3, [pc, #432]	; (1c4f4 <bt_smp_encrypt_change+0x1f0>)
   1c344:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1c346:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1c348:	2102      	movs	r1, #2
   1c34a:	4630      	mov	r0, r6
   1c34c:	f00e fd3f 	bl	2adce <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1c350:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1c352:	4628      	mov	r0, r5
}
   1c354:	b008      	add	sp, #32
   1c356:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   1c35a:	f7ff bdcb 	b.w	1bef4 <smp_pairing_complete>
	if (!conn->encrypt) {
   1c35e:	f898 300b 	ldrb.w	r3, [r8, #11]
   1c362:	2b00      	cmp	r3, #0
   1c364:	d064      	beq.n	1c430 <bt_smp_encrypt_change+0x12c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c366:	2103      	movs	r1, #3
   1c368:	4630      	mov	r0, r6
   1c36a:	f00e fc32 	bl	2abd2 <atomic_test_bit>
   1c36e:	b928      	cbnz	r0, 1c37c <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   1c370:	4628      	mov	r0, r5
}
   1c372:	b008      	add	sp, #32
   1c374:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   1c378:	f00e bddc 	b.w	2af34 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c37c:	2105      	movs	r1, #5
   1c37e:	4630      	mov	r0, r6
   1c380:	f00e fc27 	bl	2abd2 <atomic_test_bit>
   1c384:	b1b8      	cbz	r0, 1c3b6 <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1c386:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1c38a:	071b      	lsls	r3, r3, #28
   1c38c:	d507      	bpl.n	1c39e <bt_smp_encrypt_change+0x9a>
   1c38e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1c392:	071f      	lsls	r7, r3, #28
   1c394:	d503      	bpl.n	1c39e <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1c396:	2111      	movs	r1, #17
   1c398:	4630      	mov	r0, r6
   1c39a:	f00e fd18 	bl	2adce <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1c39e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1c3a2:	f023 0308 	bic.w	r3, r3, #8
   1c3a6:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1c3aa:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1c3ae:	f023 0308 	bic.w	r3, r3, #8
   1c3b2:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1c3b6:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1c3ba:	07d8      	lsls	r0, r3, #31
   1c3bc:	d517      	bpl.n	1c3ee <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1c3be:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c3c0:	4628      	mov	r0, r5
   1c3c2:	f00e fd04 	bl	2adce <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1c3c6:	2102      	movs	r1, #2
   1c3c8:	4630      	mov	r0, r6
   1c3ca:	f00e fd00 	bl	2adce <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1c3ce:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1c3d0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   1c3d4:	b99a      	cbnz	r2, 1c3fe <bt_smp_encrypt_change+0xfa>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1c3d6:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1c3da:	f7f8 ff39 	bl	15250 <bt_addr_le_str_real>
   1c3de:	4602      	mov	r2, r0
   1c3e0:	4845      	ldr	r0, [pc, #276]	; (1c4f8 <bt_smp_encrypt_change+0x1f4>)
   1c3e2:	2145      	movs	r1, #69	; 0x45
}
   1c3e4:	b008      	add	sp, #32
   1c3e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1c3ea:	f00c b9d9 	b.w	287a0 <z_log_minimal_printk>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1c3ee:	0799      	lsls	r1, r3, #30
   1c3f0:	d501      	bpl.n	1c3f6 <bt_smp_encrypt_change+0xf2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1c3f2:	2108      	movs	r1, #8
   1c3f4:	e7e4      	b.n	1c3c0 <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1c3f6:	075a      	lsls	r2, r3, #29
   1c3f8:	d5e5      	bpl.n	1c3c6 <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1c3fa:	210a      	movs	r1, #10
   1c3fc:	e7e0      	b.n	1c3c0 <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c3fe:	2105      	movs	r1, #5
   1c400:	f00e fbe7 	bl	2abd2 <atomic_test_bit>
   1c404:	b980      	cbnz	r0, 1c428 <bt_smp_encrypt_change+0x124>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1c406:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1c40a:	07db      	lsls	r3, r3, #31
   1c40c:	d50c      	bpl.n	1c428 <bt_smp_encrypt_change+0x124>
	struct bt_keys *keys = conn->le.keys;
   1c40e:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1c410:	211a      	movs	r1, #26
   1c412:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1c414:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1c418:	f003 fcb0 	bl	1fd7c <bt_rand>
   1c41c:	4681      	mov	r9, r0
   1c41e:	b150      	cbz	r0, 1c436 <bt_smp_encrypt_change+0x132>
			BT_ERR("Unable to get random bytes");
   1c420:	4836      	ldr	r0, [pc, #216]	; (1c4fc <bt_smp_encrypt_change+0x1f8>)
   1c422:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1c424:	f00c f9bc 	bl	287a0 <z_log_minimal_printk>
	if (!smp->local_dist && !smp->remote_dist) {
   1c428:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1c42c:	2900      	cmp	r1, #0
   1c42e:	d090      	beq.n	1c352 <bt_smp_encrypt_change+0x4e>
}
   1c430:	b008      	add	sp, #32
   1c432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1c436:	2106      	movs	r1, #6
   1c438:	4628      	mov	r0, r5
   1c43a:	f00e fcdc 	bl	2adf6 <smp_create_pdu.constprop.0>
		if (!buf) {
   1c43e:	4680      	mov	r8, r0
   1c440:	b910      	cbnz	r0, 1c448 <bt_smp_encrypt_change+0x144>
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1c442:	482f      	ldr	r0, [pc, #188]	; (1c500 <bt_smp_encrypt_change+0x1fc>)
   1c444:	2145      	movs	r1, #69	; 0x45
   1c446:	e7ed      	b.n	1c424 <bt_smp_encrypt_change+0x120>
	return net_buf_simple_add(&buf->b, len);
   1c448:	2110      	movs	r1, #16
   1c44a:	3008      	adds	r0, #8
   1c44c:	f000 fe4a 	bl	1d0e4 <net_buf_simple_add>
   1c450:	7b3a      	ldrb	r2, [r7, #12]
   1c452:	a901      	add	r1, sp, #4
   1c454:	4682      	mov	sl, r0
   1c456:	f00f fe7a 	bl	2c14e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1c45a:	7b38      	ldrb	r0, [r7, #12]
   1c45c:	280f      	cmp	r0, #15
   1c45e:	d805      	bhi.n	1c46c <bt_smp_encrypt_change+0x168>
__ssp_bos_icheck3(memset, void *, int)
   1c460:	f1c0 0210 	rsb	r2, r0, #16
   1c464:	4649      	mov	r1, r9
   1c466:	4450      	add	r0, sl
   1c468:	f00f feac 	bl	2c1c4 <memset>
		smp_send(smp, buf, NULL, NULL);
   1c46c:	4641      	mov	r1, r8
   1c46e:	2200      	movs	r2, #0
   1c470:	4628      	mov	r0, r5
   1c472:	f00e fc0c 	bl	2ac8e <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1c476:	2107      	movs	r1, #7
   1c478:	4628      	mov	r0, r5
   1c47a:	f00e fcbc 	bl	2adf6 <smp_create_pdu.constprop.0>
		if (!buf) {
   1c47e:	4680      	mov	r8, r0
   1c480:	b910      	cbnz	r0, 1c488 <bt_smp_encrypt_change+0x184>
			BT_ERR("Unable to allocate Central Ident buffer");
   1c482:	4820      	ldr	r0, [pc, #128]	; (1c504 <bt_smp_encrypt_change+0x200>)
   1c484:	2145      	movs	r1, #69	; 0x45
   1c486:	e7cd      	b.n	1c424 <bt_smp_encrypt_change+0x120>
   1c488:	210a      	movs	r1, #10
   1c48a:	3008      	adds	r0, #8
   1c48c:	f000 fe2a 	bl	1d0e4 <net_buf_simple_add>
   1c490:	aa05      	add	r2, sp, #20
   1c492:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c494:	ca03      	ldmia	r2!, {r0, r1}
   1c496:	f8c3 0002 	str.w	r0, [r3, #2]
   1c49a:	f8c3 1006 	str.w	r1, [r3, #6]
   1c49e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1c4a2:	801a      	strh	r2, [r3, #0]
		smp_send(smp, buf, smp_ident_sent, NULL);
   1c4a4:	4641      	mov	r1, r8
   1c4a6:	4628      	mov	r0, r5
   1c4a8:	4a17      	ldr	r2, [pc, #92]	; (1c508 <bt_smp_encrypt_change+0x204>)
   1c4aa:	f00e fbf0 	bl	2ac8e <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c4ae:	4630      	mov	r0, r6
   1c4b0:	210d      	movs	r1, #13
   1c4b2:	f00e fb8e 	bl	2abd2 <atomic_test_bit>
   1c4b6:	ae05      	add	r6, sp, #20
   1c4b8:	2800      	cmp	r0, #0
   1c4ba:	d0b5      	beq.n	1c428 <bt_smp_encrypt_change+0x124>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1c4bc:	2101      	movs	r1, #1
   1c4be:	4638      	mov	r0, r7
   1c4c0:	f00e ff5d 	bl	2b37e <bt_keys_add_type>
   1c4c4:	ab01      	add	r3, sp, #4
   1c4c6:	f107 0c4a 	add.w	ip, r7, #74	; 0x4a
   1c4ca:	461a      	mov	r2, r3
   1c4cc:	ca03      	ldmia	r2!, {r0, r1}
   1c4ce:	42b2      	cmp	r2, r6
   1c4d0:	f8cc 0000 	str.w	r0, [ip]
   1c4d4:	f8cc 1004 	str.w	r1, [ip, #4]
   1c4d8:	4613      	mov	r3, r2
   1c4da:	f10c 0c08 	add.w	ip, ip, #8
   1c4de:	d1f4      	bne.n	1c4ca <bt_smp_encrypt_change+0x1c6>
   1c4e0:	4633      	mov	r3, r6
   1c4e2:	cb03      	ldmia	r3!, {r0, r1}
   1c4e4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1c4e8:	6438      	str	r0, [r7, #64]	; 0x40
   1c4ea:	6479      	str	r1, [r7, #68]	; 0x44
   1c4ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   1c4f0:	e79a      	b.n	1c428 <bt_smp_encrypt_change+0x124>
   1c4f2:	bf00      	nop
   1c4f4:	0002f86a 	.word	0x0002f86a
   1c4f8:	0002f781 	.word	0x0002f781
   1c4fc:	0002f79b 	.word	0x0002f79b
   1c500:	0002f7bb 	.word	0x0002f7bb
   1c504:	0002f7e7 	.word	0x0002f7e7
   1c508:	0001c535 	.word	0x0001c535

0001c50c <smp_timeout>:
{
   1c50c:	b510      	push	{r4, lr}
	BT_ERR("SMP Timeout");
   1c50e:	2145      	movs	r1, #69	; 0x45
{
   1c510:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1c512:	4807      	ldr	r0, [pc, #28]	; (1c530 <smp_timeout+0x24>)
   1c514:	f00c f944 	bl	287a0 <z_log_minimal_printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1c518:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1c51c:	2108      	movs	r1, #8
   1c51e:	f7ff fce9 	bl	1bef4 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1c522:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
   1c526:	2104      	movs	r1, #4
}
   1c528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1c52c:	f00e bc4f 	b.w	2adce <atomic_set_bit>
   1c530:	0002f814 	.word	0x0002f814

0001c534 <smp_ident_sent>:
{
   1c534:	b510      	push	{r4, lr}
	if (!err) {
   1c536:	bb0a      	cbnz	r2, 1c57c <smp_ident_sent+0x48>
	if (conn->type == BT_CONN_TYPE_LE) {
   1c538:	7883      	ldrb	r3, [r0, #2]
   1c53a:	2b01      	cmp	r3, #1
   1c53c:	d11e      	bne.n	1c57c <smp_ident_sent+0x48>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1c53e:	2106      	movs	r1, #6
   1c540:	f00d fbee 	bl	29d20 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1c544:	4604      	mov	r4, r0
   1c546:	b950      	cbnz	r0, 1c55e <smp_ident_sent+0x2a>
   1c548:	490d      	ldr	r1, [pc, #52]	; (1c580 <smp_ident_sent+0x4c>)
   1c54a:	480e      	ldr	r0, [pc, #56]	; (1c584 <smp_ident_sent+0x50>)
   1c54c:	f44f 7250 	mov.w	r2, #832	; 0x340
   1c550:	f00c f918 	bl	28784 <assert_print>
   1c554:	480a      	ldr	r0, [pc, #40]	; (1c580 <smp_ident_sent+0x4c>)
   1c556:	f44f 7150 	mov.w	r1, #832	; 0x340
   1c55a:	f00c f90c 	bl	28776 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1c55e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1c562:	f023 0301 	bic.w	r3, r3, #1
   1c566:	f804 3c04 	strb.w	r3, [r4, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1c56a:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1c56e:	b929      	cbnz	r1, 1c57c <smp_ident_sent+0x48>
			smp_pairing_complete(smp, 0);
   1c570:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
}
   1c574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1c578:	f7ff bcbc 	b.w	1bef4 <smp_pairing_complete>
}
   1c57c:	bd10      	pop	{r4, pc}
   1c57e:	bf00      	nop
   1c580:	0002f825 	.word	0x0002f825
   1c584:	0002d509 	.word	0x0002d509

0001c588 <bt_smp_update_keys>:
{
   1c588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c58a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1c58c:	f7fe fd8c 	bl	1b0a8 <smp_chan_get>
	if (!smp) {
   1c590:	4605      	mov	r5, r0
   1c592:	2800      	cmp	r0, #0
   1c594:	d066      	beq.n	1c664 <bt_smp_update_keys+0xdc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c596:	1d06      	adds	r6, r0, #4
   1c598:	2103      	movs	r1, #3
   1c59a:	4630      	mov	r0, r6
   1c59c:	f00e fb19 	bl	2abd2 <atomic_test_bit>
   1c5a0:	2800      	cmp	r0, #0
   1c5a2:	d05f      	beq.n	1c664 <bt_smp_update_keys+0xdc>
	if (conn->le.keys) {
   1c5a4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c5a8:	b108      	cbz	r0, 1c5ae <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1c5aa:	f000 f927 	bl	1c7fc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c5ae:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1c5b2:	7a20      	ldrb	r0, [r4, #8]
   1c5b4:	4639      	mov	r1, r7
   1c5b6:	f000 f879 	bl	1c6ac <bt_keys_get_addr>
   1c5ba:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1c5be:	b968      	cbnz	r0, 1c5dc <bt_smp_update_keys+0x54>
		BT_ERR("Unable to get keys for %s",
   1c5c0:	4638      	mov	r0, r7
   1c5c2:	f7f8 fe45 	bl	15250 <bt_addr_le_str_real>
   1c5c6:	2145      	movs	r1, #69	; 0x45
   1c5c8:	4602      	mov	r2, r0
   1c5ca:	482c      	ldr	r0, [pc, #176]	; (1c67c <bt_smp_update_keys+0xf4>)
   1c5cc:	f00c f8e8 	bl	287a0 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c5d0:	4628      	mov	r0, r5
   1c5d2:	2108      	movs	r1, #8
}
   1c5d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1c5d8:	f00e be0d 	b.w	2b1f6 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1c5dc:	210e      	movs	r1, #14
   1c5de:	4630      	mov	r0, r6
   1c5e0:	f00e faf7 	bl	2abd2 <atomic_test_bit>
   1c5e4:	b128      	cbz	r0, 1c5f2 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1c5e6:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c5ea:	7b53      	ldrb	r3, [r2, #13]
   1c5ec:	f043 0302 	orr.w	r3, r3, #2
   1c5f0:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1c5f2:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1c5f4:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	switch (smp->method) {
   1c5f8:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1c5fa:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1c5fc:	d833      	bhi.n	1c666 <bt_smp_update_keys+0xde>
   1c5fe:	b3aa      	cbz	r2, 1c66c <bt_smp_update_keys+0xe4>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1c600:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1c604:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1c606:	7d2b      	ldrb	r3, [r5, #20]
   1c608:	7b6a      	ldrb	r2, [r5, #13]
   1c60a:	4293      	cmp	r3, r2
   1c60c:	bf28      	it	cs
   1c60e:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1c610:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c612:	4630      	mov	r0, r6
   1c614:	2105      	movs	r1, #5
   1c616:	f00e fadc 	bl	2abd2 <atomic_test_bit>
   1c61a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1c61e:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c620:	b338      	cbz	r0, 1c672 <bt_smp_update_keys+0xea>
		conn->le.keys->flags |= BT_KEYS_SC;
   1c622:	f042 0210 	orr.w	r2, r2, #16
   1c626:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c628:	210d      	movs	r1, #13
   1c62a:	4630      	mov	r0, r6
   1c62c:	f00e fad1 	bl	2abd2 <atomic_test_bit>
   1c630:	b1c0      	cbz	r0, 1c664 <bt_smp_update_keys+0xdc>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1c632:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1c636:	2120      	movs	r1, #32
   1c638:	f00e fea1 	bl	2b37e <bt_keys_add_type>
   1c63c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1c640:	f105 0247 	add.w	r2, r5, #71	; 0x47
   1c644:	331a      	adds	r3, #26
   1c646:	3557      	adds	r5, #87	; 0x57
   1c648:	f852 1b04 	ldr.w	r1, [r2], #4
   1c64c:	f843 1b04 	str.w	r1, [r3], #4
   1c650:	42aa      	cmp	r2, r5
   1c652:	d1f9      	bne.n	1c648 <bt_smp_update_keys+0xc0>
__ssp_bos_icheck3(memset, void *, int)
   1c654:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c658:	2300      	movs	r3, #0
   1c65a:	6113      	str	r3, [r2, #16]
   1c65c:	6153      	str	r3, [r2, #20]
   1c65e:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1c662:	8313      	strh	r3, [r2, #24]
}
   1c664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1c666:	3a05      	subs	r2, #5
   1c668:	2a01      	cmp	r2, #1
   1c66a:	d9c9      	bls.n	1c600 <bt_smp_update_keys+0x78>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1c66c:	f023 0301 	bic.w	r3, r3, #1
   1c670:	e7c8      	b.n	1c604 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1c672:	f022 0210 	bic.w	r2, r2, #16
   1c676:	735a      	strb	r2, [r3, #13]
   1c678:	e7f4      	b.n	1c664 <bt_smp_update_keys+0xdc>
   1c67a:	bf00      	nop
   1c67c:	0002f515 	.word	0x0002f515

0001c680 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1c680:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1c682:	4b07      	ldr	r3, [pc, #28]	; (1c6a0 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1c684:	4807      	ldr	r0, [pc, #28]	; (1c6a4 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1c686:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1c68a:	f003 0306 	and.w	r3, r3, #6
   1c68e:	1f9a      	subs	r2, r3, #6
   1c690:	4253      	negs	r3, r2
   1c692:	4153      	adcs	r3, r2
   1c694:	4a04      	ldr	r2, [pc, #16]	; (1c6a8 <bt_smp_init+0x28>)
   1c696:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1c698:	f7fa fef4 	bl	17484 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1c69c:	2000      	movs	r0, #0
   1c69e:	bd08      	pop	{r3, pc}
   1c6a0:	20000350 	.word	0x20000350
   1c6a4:	200006d4 	.word	0x200006d4
   1c6a8:	200037d8 	.word	0x200037d8

0001c6ac <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1c6ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1c6b0:	4f14      	ldr	r7, [pc, #80]	; (1c704 <bt_keys_get_addr+0x58>)
   1c6b2:	463d      	mov	r5, r7
{
   1c6b4:	4680      	mov	r8, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1c6b6:	f815 3b01 	ldrb.w	r3, [r5], #1
   1c6ba:	4283      	cmp	r3, r0
{
   1c6bc:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1c6be:	d00b      	beq.n	1c6d8 <bt_keys_get_addr+0x2c>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1c6c0:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1c6c2:	4811      	ldr	r0, [pc, #68]	; (1c708 <bt_keys_get_addr+0x5c>)
   1c6c4:	9400      	str	r4, [sp, #0]
   1c6c6:	2207      	movs	r2, #7
   1c6c8:	4669      	mov	r1, sp
   1c6ca:	f8cd 4003 	str.w	r4, [sp, #3]
   1c6ce:	f00f fd2e 	bl	2c12e <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1c6d2:	b158      	cbz	r0, 1c6ec <bt_keys_get_addr+0x40>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1c6d4:	4620      	mov	r0, r4
   1c6d6:	e006      	b.n	1c6e6 <bt_keys_get_addr+0x3a>
   1c6d8:	2207      	movs	r2, #7
   1c6da:	4628      	mov	r0, r5
   1c6dc:	f00f fd27 	bl	2c12e <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1c6e0:	2800      	cmp	r0, #0
   1c6e2:	d1ed      	bne.n	1c6c0 <bt_keys_get_addr+0x14>
		keys = &key_pool[i];
   1c6e4:	4638      	mov	r0, r7
}
   1c6e6:	b002      	add	sp, #8
   1c6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		keys->id = id;
   1c6ec:	f887 8000 	strb.w	r8, [r7]
	memcpy(dst, src, sizeof(*dst));
   1c6f0:	6833      	ldr	r3, [r6, #0]
   1c6f2:	f8c7 3001 	str.w	r3, [r7, #1]
   1c6f6:	88b3      	ldrh	r3, [r6, #4]
   1c6f8:	80ab      	strh	r3, [r5, #4]
   1c6fa:	79b3      	ldrb	r3, [r6, #6]
		return keys;
   1c6fc:	4801      	ldr	r0, [pc, #4]	; (1c704 <bt_keys_get_addr+0x58>)
   1c6fe:	71ab      	strb	r3, [r5, #6]
}
   1c700:	e7f1      	b.n	1c6e6 <bt_keys_get_addr+0x3a>
   1c702:	bf00      	nop
   1c704:	200028a8 	.word	0x200028a8
   1c708:	200028a9 	.word	0x200028a9

0001c70c <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1c70c:	460b      	mov	r3, r1
   1c70e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1c710:	4a04      	ldr	r2, [pc, #16]	; (1c724 <bt_keys_foreach+0x18>)
{
   1c712:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1c714:	89d4      	ldrh	r4, [r2, #14]
   1c716:	4204      	tst	r4, r0
   1c718:	d002      	beq.n	1c720 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1c71a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1c71c:	4610      	mov	r0, r2
   1c71e:	4718      	bx	r3
}
   1c720:	bc10      	pop	{r4}
   1c722:	4770      	bx	lr
   1c724:	200028a8 	.word	0x200028a8

0001c728 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1c728:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1c72a:	4903      	ldr	r1, [pc, #12]	; (1c738 <keys_commit+0x10>)
   1c72c:	2200      	movs	r2, #0
   1c72e:	2002      	movs	r0, #2
   1c730:	f7ff ffec 	bl	1c70c <bt_keys_foreach>
	}

	return 0;
}
   1c734:	2000      	movs	r0, #0
   1c736:	bd08      	pop	{r3, pc}
   1c738:	0002b35b 	.word	0x0002b35b

0001c73c <bt_keys_find>:
{
   1c73c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1c73e:	4c09      	ldr	r4, [pc, #36]	; (1c764 <bt_keys_find+0x28>)
{
   1c740:	460b      	mov	r3, r1
   1c742:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1c744:	89e2      	ldrh	r2, [r4, #14]
   1c746:	4202      	tst	r2, r0
   1c748:	d007      	beq.n	1c75a <bt_keys_find+0x1e>
   1c74a:	7822      	ldrb	r2, [r4, #0]
   1c74c:	429a      	cmp	r2, r3
   1c74e:	d104      	bne.n	1c75a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1c750:	2207      	movs	r2, #7
   1c752:	1c60      	adds	r0, r4, #1
   1c754:	f00f fceb 	bl	2c12e <memcmp>
   1c758:	b108      	cbz	r0, 1c75e <bt_keys_find+0x22>
	return NULL;
   1c75a:	2000      	movs	r0, #0
}
   1c75c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1c75e:	4620      	mov	r0, r4
   1c760:	e7fc      	b.n	1c75c <bt_keys_find+0x20>
   1c762:	bf00      	nop
   1c764:	200028a8 	.word	0x200028a8

0001c768 <bt_keys_find_irk>:
{
   1c768:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1c76a:	780b      	ldrb	r3, [r1, #0]
   1c76c:	2b01      	cmp	r3, #1
   1c76e:	4606      	mov	r6, r0
   1c770:	460d      	mov	r5, r1
   1c772:	d001      	beq.n	1c778 <bt_keys_find_irk+0x10>
		return NULL;
   1c774:	2000      	movs	r0, #0
}
   1c776:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1c778:	798b      	ldrb	r3, [r1, #6]
   1c77a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c77e:	2b40      	cmp	r3, #64	; 0x40
   1c780:	d1f8      	bne.n	1c774 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1c782:	4c13      	ldr	r4, [pc, #76]	; (1c7d0 <bt_keys_find_irk+0x68>)
   1c784:	89e3      	ldrh	r3, [r4, #14]
   1c786:	079b      	lsls	r3, r3, #30
   1c788:	d5f4      	bpl.n	1c774 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1c78a:	7823      	ldrb	r3, [r4, #0]
   1c78c:	42b3      	cmp	r3, r6
   1c78e:	d10b      	bne.n	1c7a8 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   1c790:	2206      	movs	r2, #6
   1c792:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   1c796:	1c68      	adds	r0, r5, #1
   1c798:	f00f fcc9 	bl	2c12e <memcmp>
   1c79c:	b908      	cbnz	r0, 1c7a2 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   1c79e:	4620      	mov	r0, r4
   1c7a0:	e7e9      	b.n	1c776 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1c7a2:	89e3      	ldrh	r3, [r4, #14]
   1c7a4:	079a      	lsls	r2, r3, #30
   1c7a6:	d5e5      	bpl.n	1c774 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1c7a8:	7823      	ldrb	r3, [r4, #0]
   1c7aa:	42b3      	cmp	r3, r6
   1c7ac:	d1e2      	bne.n	1c774 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1c7ae:	1c6e      	adds	r6, r5, #1
   1c7b0:	4808      	ldr	r0, [pc, #32]	; (1c7d4 <bt_keys_find_irk+0x6c>)
   1c7b2:	4631      	mov	r1, r6
   1c7b4:	f00c fdb9 	bl	2932a <bt_rpa_irk_matches>
   1c7b8:	2800      	cmp	r0, #0
   1c7ba:	d0db      	beq.n	1c774 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1c7bc:	f8d5 3001 	ldr.w	r3, [r5, #1]
   1c7c0:	4805      	ldr	r0, [pc, #20]	; (1c7d8 <bt_keys_find_irk+0x70>)
   1c7c2:	f8c4 303a 	str.w	r3, [r4, #58]	; 0x3a
   1c7c6:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1c7ca:	8083      	strh	r3, [r0, #4]
			return &key_pool[i];
   1c7cc:	383a      	subs	r0, #58	; 0x3a
}
   1c7ce:	e7d2      	b.n	1c776 <bt_keys_find_irk+0xe>
   1c7d0:	200028a8 	.word	0x200028a8
   1c7d4:	200028d2 	.word	0x200028d2
   1c7d8:	200028e2 	.word	0x200028e2

0001c7dc <bt_keys_find_addr>:
{
   1c7dc:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1c7de:	4c06      	ldr	r4, [pc, #24]	; (1c7f8 <bt_keys_find_addr+0x1c>)
   1c7e0:	7823      	ldrb	r3, [r4, #0]
   1c7e2:	4283      	cmp	r3, r0
   1c7e4:	d104      	bne.n	1c7f0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1c7e6:	2207      	movs	r2, #7
   1c7e8:	1c60      	adds	r0, r4, #1
   1c7ea:	f00f fca0 	bl	2c12e <memcmp>
   1c7ee:	b108      	cbz	r0, 1c7f4 <bt_keys_find_addr+0x18>
	return NULL;
   1c7f0:	2000      	movs	r0, #0
}
   1c7f2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1c7f4:	4620      	mov	r0, r4
   1c7f6:	e7fc      	b.n	1c7f2 <bt_keys_find_addr+0x16>
   1c7f8:	200028a8 	.word	0x200028a8

0001c7fc <bt_keys_clear>:
{
   1c7fc:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1c7fe:	7a03      	ldrb	r3, [r0, #8]
   1c800:	075b      	lsls	r3, r3, #29
{
   1c802:	b08c      	sub	sp, #48	; 0x30
   1c804:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1c806:	d501      	bpl.n	1c80c <bt_keys_clear+0x10>
		bt_id_del(keys);
   1c808:	f7fa f94e 	bl	16aa8 <bt_id_del>
		if (keys->id) {
   1c80c:	4625      	mov	r5, r4
   1c80e:	f815 2b01 	ldrb.w	r2, [r5], #1
   1c812:	b1b2      	cbz	r2, 1c842 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1c814:	ae02      	add	r6, sp, #8
   1c816:	2104      	movs	r1, #4
   1c818:	4630      	mov	r0, r6
   1c81a:	f00b fd6e 	bl	282fa <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1c81e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1c820:	4a09      	ldr	r2, [pc, #36]	; (1c848 <bt_keys_clear+0x4c>)
   1c822:	462b      	mov	r3, r5
   1c824:	2124      	movs	r1, #36	; 0x24
   1c826:	a803      	add	r0, sp, #12
   1c828:	f7f8 fdc0 	bl	153ac <bt_settings_encode_key>
		settings_delete(key);
   1c82c:	a803      	add	r0, sp, #12
   1c82e:	f00c fa31 	bl	28c94 <settings_delete>
   1c832:	225c      	movs	r2, #92	; 0x5c
   1c834:	2100      	movs	r1, #0
   1c836:	4620      	mov	r0, r4
}
   1c838:	b00c      	add	sp, #48	; 0x30
   1c83a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c83e:	f00f bcc1 	b.w	2c1c4 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1c842:	9200      	str	r2, [sp, #0]
   1c844:	e7ec      	b.n	1c820 <bt_keys_clear+0x24>
   1c846:	bf00      	nop
   1c848:	0002f975 	.word	0x0002f975

0001c84c <keys_set>:
{
   1c84c:	b570      	push	{r4, r5, r6, lr}
   1c84e:	4605      	mov	r5, r0
   1c850:	b098      	sub	sp, #96	; 0x60
   1c852:	4614      	mov	r4, r2
   1c854:	4618      	mov	r0, r3
	if (!name) {
   1c856:	b945      	cbnz	r5, 1c86a <keys_set+0x1e>
		BT_ERR("Insufficient number of arguments");
   1c858:	4832      	ldr	r0, [pc, #200]	; (1c924 <keys_set+0xd8>)
   1c85a:	2145      	movs	r1, #69	; 0x45
   1c85c:	f00b ffa0 	bl	287a0 <z_log_minimal_printk>
		return -EINVAL;
   1c860:	f06f 0415 	mvn.w	r4, #21
}
   1c864:	4620      	mov	r0, r4
   1c866:	b018      	add	sp, #96	; 0x60
   1c868:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1c86a:	2250      	movs	r2, #80	; 0x50
   1c86c:	a904      	add	r1, sp, #16
   1c86e:	47a0      	blx	r4
	if (len < 0) {
   1c870:	1e04      	subs	r4, r0, #0
   1c872:	da05      	bge.n	1c880 <keys_set+0x34>
		BT_ERR("Failed to read value (err %zd)", len);
   1c874:	482c      	ldr	r0, [pc, #176]	; (1c928 <keys_set+0xdc>)
   1c876:	4622      	mov	r2, r4
   1c878:	2145      	movs	r1, #69	; 0x45
   1c87a:	f00b ff91 	bl	287a0 <z_log_minimal_printk>
   1c87e:	e7ef      	b.n	1c860 <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   1c880:	a902      	add	r1, sp, #8
   1c882:	4628      	mov	r0, r5
   1c884:	f00c fd7a 	bl	2937c <bt_settings_decode_key>
	if (err) {
   1c888:	4606      	mov	r6, r0
   1c88a:	b118      	cbz	r0, 1c894 <keys_set+0x48>
		BT_ERR("Unable to decode address %s", name);
   1c88c:	4827      	ldr	r0, [pc, #156]	; (1c92c <keys_set+0xe0>)
   1c88e:	462a      	mov	r2, r5
   1c890:	2145      	movs	r1, #69	; 0x45
   1c892:	e7f2      	b.n	1c87a <keys_set+0x2e>
	settings_name_next(name, &next);
   1c894:	a901      	add	r1, sp, #4
   1c896:	4628      	mov	r0, r5
   1c898:	f00c fa23 	bl	28ce2 <settings_name_next>
	if (!next) {
   1c89c:	9801      	ldr	r0, [sp, #4]
   1c89e:	b140      	cbz	r0, 1c8b2 <keys_set+0x66>
		unsigned long next_id = strtoul(next, NULL, 10);
   1c8a0:	220a      	movs	r2, #10
   1c8a2:	4631      	mov	r1, r6
   1c8a4:	f009 f84a 	bl	2593c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1c8a8:	4602      	mov	r2, r0
   1c8aa:	b110      	cbz	r0, 1c8b2 <keys_set+0x66>
			BT_ERR("Invalid local identity %lu", next_id);
   1c8ac:	4820      	ldr	r0, [pc, #128]	; (1c930 <keys_set+0xe4>)
   1c8ae:	2145      	movs	r1, #69	; 0x45
   1c8b0:	e7e3      	b.n	1c87a <keys_set+0x2e>
	if (!len) {
   1c8b2:	b99c      	cbnz	r4, 1c8dc <keys_set+0x90>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1c8b4:	aa02      	add	r2, sp, #8
   1c8b6:	4621      	mov	r1, r4
   1c8b8:	203f      	movs	r0, #63	; 0x3f
   1c8ba:	f7ff ff3f 	bl	1c73c <bt_keys_find>
		if (keys) {
   1c8be:	b120      	cbz	r0, 1c8ca <keys_set+0x7e>
   1c8c0:	225c      	movs	r2, #92	; 0x5c
   1c8c2:	4621      	mov	r1, r4
   1c8c4:	f00f fc7e 	bl	2c1c4 <memset>
   1c8c8:	e7cc      	b.n	1c864 <keys_set+0x18>
			BT_WARN("Unable to find deleted keys for %s",
   1c8ca:	a802      	add	r0, sp, #8
   1c8cc:	f7f8 fcc0 	bl	15250 <bt_addr_le_str_real>
   1c8d0:	2157      	movs	r1, #87	; 0x57
   1c8d2:	4602      	mov	r2, r0
   1c8d4:	4817      	ldr	r0, [pc, #92]	; (1c934 <keys_set+0xe8>)
   1c8d6:	f00b ff63 	bl	287a0 <z_log_minimal_printk>
   1c8da:	e7c3      	b.n	1c864 <keys_set+0x18>
	keys = bt_keys_get_addr(id, &addr);
   1c8dc:	a902      	add	r1, sp, #8
   1c8de:	2000      	movs	r0, #0
   1c8e0:	f7ff fee4 	bl	1c6ac <bt_keys_get_addr>
	if (!keys) {
   1c8e4:	4605      	mov	r5, r0
   1c8e6:	b950      	cbnz	r0, 1c8fe <keys_set+0xb2>
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1c8e8:	a802      	add	r0, sp, #8
   1c8ea:	f7f8 fcb1 	bl	15250 <bt_addr_le_str_real>
   1c8ee:	2145      	movs	r1, #69	; 0x45
   1c8f0:	4602      	mov	r2, r0
   1c8f2:	4811      	ldr	r0, [pc, #68]	; (1c938 <keys_set+0xec>)
   1c8f4:	f00b ff54 	bl	287a0 <z_log_minimal_printk>
		return -ENOMEM;
   1c8f8:	f06f 040b 	mvn.w	r4, #11
   1c8fc:	e7b2      	b.n	1c864 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   1c8fe:	2c50      	cmp	r4, #80	; 0x50
   1c900:	d009      	beq.n	1c916 <keys_set+0xca>
			BT_ERR("Invalid key length %zd != %zu", len,
   1c902:	480e      	ldr	r0, [pc, #56]	; (1c93c <keys_set+0xf0>)
   1c904:	2350      	movs	r3, #80	; 0x50
   1c906:	4622      	mov	r2, r4
   1c908:	2145      	movs	r1, #69	; 0x45
   1c90a:	f00b ff49 	bl	287a0 <z_log_minimal_printk>
			bt_keys_clear(keys);
   1c90e:	4628      	mov	r0, r5
   1c910:	f7ff ff74 	bl	1c7fc <bt_keys_clear>
			return -EINVAL;
   1c914:	e7a4      	b.n	1c860 <keys_set+0x14>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c916:	4622      	mov	r2, r4
   1c918:	a904      	add	r1, sp, #16
   1c91a:	300c      	adds	r0, #12
   1c91c:	f00f fc17 	bl	2c14e <memcpy>
	return 0;
   1c920:	2400      	movs	r4, #0
   1c922:	e79f      	b.n	1c864 <keys_set+0x18>
   1c924:	0002df45 	.word	0x0002df45
   1c928:	0002f8bd 	.word	0x0002f8bd
   1c92c:	0002f172 	.word	0x0002f172
   1c930:	0002f193 	.word	0x0002f193
   1c934:	0002f8e1 	.word	0x0002f8e1
   1c938:	0002f909 	.word	0x0002f909
   1c93c:	0002f92d 	.word	0x0002f92d

0001c940 <bt_keys_store>:
{
   1c940:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1c942:	4605      	mov	r5, r0
{
   1c944:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1c946:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1c94a:	4604      	mov	r4, r0
	if (keys->id) {
   1c94c:	b1da      	cbz	r2, 1c986 <bt_keys_store+0x46>
		u8_to_dec(id, sizeof(id), keys->id);
   1c94e:	ae02      	add	r6, sp, #8
   1c950:	2104      	movs	r1, #4
   1c952:	4630      	mov	r0, r6
   1c954:	f00b fcd1 	bl	282fa <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1c958:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1c95a:	4a0c      	ldr	r2, [pc, #48]	; (1c98c <bt_keys_store+0x4c>)
   1c95c:	462b      	mov	r3, r5
   1c95e:	2124      	movs	r1, #36	; 0x24
   1c960:	a803      	add	r0, sp, #12
   1c962:	f7f8 fd23 	bl	153ac <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1c966:	f104 010c 	add.w	r1, r4, #12
   1c96a:	2250      	movs	r2, #80	; 0x50
   1c96c:	a803      	add	r0, sp, #12
   1c96e:	f7f7 f96b 	bl	13c48 <settings_save_one>
	if (err) {
   1c972:	4604      	mov	r4, r0
   1c974:	b120      	cbz	r0, 1c980 <bt_keys_store+0x40>
		BT_ERR("Failed to save keys (err %d)", err);
   1c976:	4602      	mov	r2, r0
   1c978:	2145      	movs	r1, #69	; 0x45
   1c97a:	4805      	ldr	r0, [pc, #20]	; (1c990 <bt_keys_store+0x50>)
   1c97c:	f00b ff10 	bl	287a0 <z_log_minimal_printk>
}
   1c980:	4620      	mov	r0, r4
   1c982:	b00c      	add	sp, #48	; 0x30
   1c984:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1c986:	9200      	str	r2, [sp, #0]
   1c988:	e7e7      	b.n	1c95a <bt_keys_store+0x1a>
   1c98a:	bf00      	nop
   1c98c:	0002f975 	.word	0x0002f975
   1c990:	0002f950 	.word	0x0002f950

0001c994 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1c994:	4b02      	ldr	r3, [pc, #8]	; (1c9a0 <net_buf_pool_get+0xc>)
   1c996:	2234      	movs	r2, #52	; 0x34
   1c998:	fb02 3000 	mla	r0, r2, r0, r3
   1c99c:	4770      	bx	lr
   1c99e:	bf00      	nop
   1c9a0:	20000b10 	.word	0x20000b10

0001c9a4 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c9a4:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1c9a6:	4b07      	ldr	r3, [pc, #28]	; (1c9c4 <net_buf_id+0x20>)
   1c9a8:	2134      	movs	r1, #52	; 0x34
   1c9aa:	fb01 3302 	mla	r3, r1, r2, r3
   1c9ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c9b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c9b4:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1c9b6:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c9b8:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1c9bc:	fbb0 f0f3 	udiv	r0, r0, r3
   1c9c0:	4770      	bx	lr
   1c9c2:	bf00      	nop
   1c9c4:	20000b10 	.word	0x20000b10

0001c9c8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1c9c8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c9ca:	4b0a      	ldr	r3, [pc, #40]	; (1c9f4 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c9cc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c9ce:	2434      	movs	r4, #52	; 0x34
   1c9d0:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1c9d4:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c9d8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1c9da:	6823      	ldr	r3, [r4, #0]
   1c9dc:	429a      	cmp	r2, r3
   1c9de:	bf94      	ite	ls
   1c9e0:	600a      	strls	r2, [r1, #0]
   1c9e2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1c9e4:	f7ff ffde 	bl	1c9a4 <net_buf_id>
   1c9e8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1c9ec:	fb02 3000 	mla	r0, r2, r0, r3
   1c9f0:	bd10      	pop	{r4, pc}
   1c9f2:	bf00      	nop
   1c9f4:	20000b10 	.word	0x20000b10

0001c9f8 <net_buf_reset>:
{
   1c9f8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1c9fa:	7943      	ldrb	r3, [r0, #5]
{
   1c9fc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1c9fe:	b143      	cbz	r3, 1ca12 <net_buf_reset+0x1a>
   1ca00:	490c      	ldr	r1, [pc, #48]	; (1ca34 <net_buf_reset+0x3c>)
   1ca02:	480d      	ldr	r0, [pc, #52]	; (1ca38 <net_buf_reset+0x40>)
   1ca04:	2256      	movs	r2, #86	; 0x56
   1ca06:	f00b febd 	bl	28784 <assert_print>
   1ca0a:	480a      	ldr	r0, [pc, #40]	; (1ca34 <net_buf_reset+0x3c>)
   1ca0c:	2156      	movs	r1, #86	; 0x56
   1ca0e:	f00b feb2 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1ca12:	6823      	ldr	r3, [r4, #0]
   1ca14:	b143      	cbz	r3, 1ca28 <net_buf_reset+0x30>
   1ca16:	4907      	ldr	r1, [pc, #28]	; (1ca34 <net_buf_reset+0x3c>)
   1ca18:	4807      	ldr	r0, [pc, #28]	; (1ca38 <net_buf_reset+0x40>)
   1ca1a:	2257      	movs	r2, #87	; 0x57
   1ca1c:	f00b feb2 	bl	28784 <assert_print>
   1ca20:	4804      	ldr	r0, [pc, #16]	; (1ca34 <net_buf_reset+0x3c>)
   1ca22:	2157      	movs	r1, #87	; 0x57
   1ca24:	f00b fea7 	bl	28776 <assert_post_action>
	buf->len  = 0U;
   1ca28:	2300      	movs	r3, #0
   1ca2a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1ca2c:	6923      	ldr	r3, [r4, #16]
   1ca2e:	60a3      	str	r3, [r4, #8]
}
   1ca30:	bd10      	pop	{r4, pc}
   1ca32:	bf00      	nop
   1ca34:	0002f982 	.word	0x0002f982
   1ca38:	0002d509 	.word	0x0002d509

0001ca3c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1ca3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca40:	b085      	sub	sp, #20
   1ca42:	4605      	mov	r5, r0
   1ca44:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ca46:	4610      	mov	r0, r2
   1ca48:	4619      	mov	r1, r3
{
   1ca4a:	4691      	mov	r9, r2
   1ca4c:	4698      	mov	r8, r3
   1ca4e:	4617      	mov	r7, r2
   1ca50:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1ca52:	f00f fa7d 	bl	2bf50 <sys_clock_timeout_end_calc>
   1ca56:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1ca5a:	b945      	cbnz	r5, 1ca6e <net_buf_alloc_len+0x32>
   1ca5c:	4969      	ldr	r1, [pc, #420]	; (1cc04 <net_buf_alloc_len+0x1c8>)
   1ca5e:	486a      	ldr	r0, [pc, #424]	; (1cc08 <net_buf_alloc_len+0x1cc>)
   1ca60:	22f4      	movs	r2, #244	; 0xf4
   1ca62:	f00b fe8f 	bl	28784 <assert_print>
   1ca66:	4867      	ldr	r0, [pc, #412]	; (1cc04 <net_buf_alloc_len+0x1c8>)
   1ca68:	21f4      	movs	r1, #244	; 0xf4
   1ca6a:	f00b fe84 	bl	28776 <assert_post_action>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1ca6e:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   1ca72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca76:	f3ef 8b11 	mrs	fp, BASEPRI
   1ca7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ca82:	4650      	mov	r0, sl
   1ca84:	f005 fb20 	bl	220c8 <z_spin_lock_valid>
   1ca88:	b940      	cbnz	r0, 1ca9c <net_buf_alloc_len+0x60>
   1ca8a:	4960      	ldr	r1, [pc, #384]	; (1cc0c <net_buf_alloc_len+0x1d0>)
   1ca8c:	485e      	ldr	r0, [pc, #376]	; (1cc08 <net_buf_alloc_len+0x1cc>)
   1ca8e:	228e      	movs	r2, #142	; 0x8e
   1ca90:	f00b fe78 	bl	28784 <assert_print>
   1ca94:	485d      	ldr	r0, [pc, #372]	; (1cc0c <net_buf_alloc_len+0x1d0>)
   1ca96:	218e      	movs	r1, #142	; 0x8e
   1ca98:	f00b fe6d 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ca9c:	4650      	mov	r0, sl
   1ca9e:	f005 fb31 	bl	22104 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1caa2:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1caa4:	2b00      	cmp	r3, #0
   1caa6:	d076      	beq.n	1cb96 <net_buf_alloc_len+0x15a>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1caa8:	8c2a      	ldrh	r2, [r5, #32]
   1caaa:	429a      	cmp	r2, r3
   1caac:	d94c      	bls.n	1cb48 <net_buf_alloc_len+0x10c>
	return z_impl_k_queue_get(queue, timeout);
   1caae:	2200      	movs	r2, #0
   1cab0:	2300      	movs	r3, #0
   1cab2:	4628      	mov	r0, r5
   1cab4:	f005 fd82 	bl	225bc <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1cab8:	4604      	mov	r4, r0
   1caba:	2800      	cmp	r0, #0
   1cabc:	d044      	beq.n	1cb48 <net_buf_alloc_len+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cabe:	4650      	mov	r0, sl
   1cac0:	f005 fb10 	bl	220e4 <z_spin_unlock_valid>
   1cac4:	b940      	cbnz	r0, 1cad8 <net_buf_alloc_len+0x9c>
   1cac6:	4951      	ldr	r1, [pc, #324]	; (1cc0c <net_buf_alloc_len+0x1d0>)
   1cac8:	484f      	ldr	r0, [pc, #316]	; (1cc08 <net_buf_alloc_len+0x1cc>)
   1caca:	22b9      	movs	r2, #185	; 0xb9
   1cacc:	f00b fe5a 	bl	28784 <assert_print>
   1cad0:	484e      	ldr	r0, [pc, #312]	; (1cc0c <net_buf_alloc_len+0x1d0>)
   1cad2:	21b9      	movs	r1, #185	; 0xb9
   1cad4:	f00b fe4f 	bl	28776 <assert_post_action>
	__asm__ volatile(
   1cad8:	f38b 8811 	msr	BASEPRI, fp
   1cadc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1cae0:	9d03      	ldr	r5, [sp, #12]
   1cae2:	2d00      	cmp	r5, #0
   1cae4:	f000 808c 	beq.w	1cc00 <net_buf_alloc_len+0x1c4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1cae8:	ea58 0309 	orrs.w	r3, r8, r9
   1caec:	d010      	beq.n	1cb10 <net_buf_alloc_len+0xd4>
   1caee:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1caf2:	bf08      	it	eq
   1caf4:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1caf8:	d00a      	beq.n	1cb10 <net_buf_alloc_len+0xd4>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1cafa:	f007 fe0f 	bl	2471c <sys_clock_tick_get>
   1cafe:	9b01      	ldr	r3, [sp, #4]
   1cb00:	1a1f      	subs	r7, r3, r0
   1cb02:	9b02      	ldr	r3, [sp, #8]
   1cb04:	eb63 0601 	sbc.w	r6, r3, r1
   1cb08:	2e00      	cmp	r6, #0
   1cb0a:	bfbc      	itt	lt
   1cb0c:	2700      	movlt	r7, #0
   1cb0e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cb10:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1cb12:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1cc10 <net_buf_alloc_len+0x1d4>
   1cb16:	f04f 0934 	mov.w	r9, #52	; 0x34
   1cb1a:	fb09 8303 	mla	r3, r9, r3, r8
   1cb1e:	463a      	mov	r2, r7
   1cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb22:	681b      	ldr	r3, [r3, #0]
   1cb24:	a903      	add	r1, sp, #12
   1cb26:	f8d3 a000 	ldr.w	sl, [r3]
   1cb2a:	4620      	mov	r0, r4
   1cb2c:	4633      	mov	r3, r6
   1cb2e:	47d0      	blx	sl
   1cb30:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1cb32:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1cb34:	2800      	cmp	r0, #0
   1cb36:	d14b      	bne.n	1cbd0 <net_buf_alloc_len+0x194>
	k_lifo_put(&pool->free, buf);
   1cb38:	79a0      	ldrb	r0, [r4, #6]
   1cb3a:	4621      	mov	r1, r4
   1cb3c:	fb00 8009 	mla	r0, r0, r9, r8
   1cb40:	f00f f949 	bl	2bdd6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1cb44:	4634      	mov	r4, r6
}
   1cb46:	e03f      	b.n	1cbc8 <net_buf_alloc_len+0x18c>
		uninit_count = pool->uninit_count--;
   1cb48:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1cb4a:	1e63      	subs	r3, r4, #1
   1cb4c:	846b      	strh	r3, [r5, #34]	; 0x22
   1cb4e:	4650      	mov	r0, sl
   1cb50:	f005 fac8 	bl	220e4 <z_spin_unlock_valid>
   1cb54:	b940      	cbnz	r0, 1cb68 <net_buf_alloc_len+0x12c>
   1cb56:	492d      	ldr	r1, [pc, #180]	; (1cc0c <net_buf_alloc_len+0x1d0>)
   1cb58:	482b      	ldr	r0, [pc, #172]	; (1cc08 <net_buf_alloc_len+0x1cc>)
   1cb5a:	22b9      	movs	r2, #185	; 0xb9
   1cb5c:	f00b fe12 	bl	28784 <assert_print>
   1cb60:	482a      	ldr	r0, [pc, #168]	; (1cc0c <net_buf_alloc_len+0x1d0>)
   1cb62:	21b9      	movs	r1, #185	; 0xb9
   1cb64:	f00b fe07 	bl	28776 <assert_post_action>
   1cb68:	f38b 8811 	msr	BASEPRI, fp
   1cb6c:	f3bf 8f6f 	isb	sy
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1cb70:	8c28      	ldrh	r0, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cb72:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1cb76:	1b04      	subs	r4, r0, r4
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cb78:	f102 0317 	add.w	r3, r2, #23
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1cb7c:	6b28      	ldr	r0, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cb7e:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1cb82:	fb04 0403 	mla	r4, r4, r3, r0
	return pool - _net_buf_pool_list;
   1cb86:	4822      	ldr	r0, [pc, #136]	; (1cc10 <net_buf_alloc_len+0x1d4>)
   1cb88:	4b22      	ldr	r3, [pc, #136]	; (1cc14 <net_buf_alloc_len+0x1d8>)
	buf->user_data_size = pool->user_data_size;
   1cb8a:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1cb8c:	1a2d      	subs	r5, r5, r0
   1cb8e:	10ad      	asrs	r5, r5, #2
   1cb90:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1cb92:	71a5      	strb	r5, [r4, #6]
		goto success;
   1cb94:	e7a4      	b.n	1cae0 <net_buf_alloc_len+0xa4>
   1cb96:	4650      	mov	r0, sl
   1cb98:	f005 faa4 	bl	220e4 <z_spin_unlock_valid>
   1cb9c:	b940      	cbnz	r0, 1cbb0 <net_buf_alloc_len+0x174>
   1cb9e:	491b      	ldr	r1, [pc, #108]	; (1cc0c <net_buf_alloc_len+0x1d0>)
   1cba0:	4819      	ldr	r0, [pc, #100]	; (1cc08 <net_buf_alloc_len+0x1cc>)
   1cba2:	22b9      	movs	r2, #185	; 0xb9
   1cba4:	f00b fdee 	bl	28784 <assert_print>
   1cba8:	4818      	ldr	r0, [pc, #96]	; (1cc0c <net_buf_alloc_len+0x1d0>)
   1cbaa:	21b9      	movs	r1, #185	; 0xb9
   1cbac:	f00b fde3 	bl	28776 <assert_post_action>
   1cbb0:	f38b 8811 	msr	BASEPRI, fp
   1cbb4:	f3bf 8f6f 	isb	sy
   1cbb8:	464a      	mov	r2, r9
   1cbba:	4643      	mov	r3, r8
   1cbbc:	4628      	mov	r0, r5
   1cbbe:	f005 fcfd 	bl	225bc <z_impl_k_queue_get>
	if (!buf) {
   1cbc2:	4604      	mov	r4, r0
   1cbc4:	2800      	cmp	r0, #0
   1cbc6:	d18b      	bne.n	1cae0 <net_buf_alloc_len+0xa4>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1cbc8:	4620      	mov	r0, r4
   1cbca:	b005      	add	sp, #20
   1cbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1cbd0:	9b03      	ldr	r3, [sp, #12]
   1cbd2:	429d      	cmp	r5, r3
   1cbd4:	d90a      	bls.n	1cbec <net_buf_alloc_len+0x1b0>
   1cbd6:	490b      	ldr	r1, [pc, #44]	; (1cc04 <net_buf_alloc_len+0x1c8>)
   1cbd8:	480b      	ldr	r0, [pc, #44]	; (1cc08 <net_buf_alloc_len+0x1cc>)
   1cbda:	f240 1255 	movw	r2, #341	; 0x155
   1cbde:	f00b fdd1 	bl	28784 <assert_print>
   1cbe2:	4808      	ldr	r0, [pc, #32]	; (1cc04 <net_buf_alloc_len+0x1c8>)
   1cbe4:	f240 1155 	movw	r1, #341	; 0x155
   1cbe8:	f00b fdc5 	bl	28776 <assert_post_action>
	buf->frags = NULL;
   1cbec:	2300      	movs	r3, #0
   1cbee:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1cbf0:	2301      	movs	r3, #1
   1cbf2:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1cbf4:	9b03      	ldr	r3, [sp, #12]
   1cbf6:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1cbf8:	4620      	mov	r0, r4
   1cbfa:	f7ff fefd 	bl	1c9f8 <net_buf_reset>
	return buf;
   1cbfe:	e7e3      	b.n	1cbc8 <net_buf_alloc_len+0x18c>
		buf->__buf = NULL;
   1cc00:	6125      	str	r5, [r4, #16]
   1cc02:	e7f3      	b.n	1cbec <net_buf_alloc_len+0x1b0>
   1cc04:	0002f982 	.word	0x0002f982
   1cc08:	0002d509 	.word	0x0002d509
   1cc0c:	0002d57d 	.word	0x0002d57d
   1cc10:	20000b10 	.word	0x20000b10
   1cc14:	c4ec4ec5 	.word	0xc4ec4ec5

0001cc18 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1cc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc1c:	4606      	mov	r6, r0
   1cc1e:	f005 fccd 	bl	225bc <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1cc22:	4605      	mov	r5, r0
   1cc24:	b140      	cbz	r0, 1cc38 <net_buf_get+0x20>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1cc26:	4f12      	ldr	r7, [pc, #72]	; (1cc70 <net_buf_get+0x58>)
   1cc28:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1cc74 <net_buf_get+0x5c>
   1cc2c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cc2e:	7963      	ldrb	r3, [r4, #5]
   1cc30:	f013 0301 	ands.w	r3, r3, #1
   1cc34:	d103      	bne.n	1cc3e <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1cc36:	6023      	str	r3, [r4, #0]

	return buf;
}
   1cc38:	4628      	mov	r0, r5
   1cc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cc3e:	2200      	movs	r2, #0
   1cc40:	2300      	movs	r3, #0
   1cc42:	4630      	mov	r0, r6
   1cc44:	f005 fcba 	bl	225bc <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1cc48:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1cc4a:	b950      	cbnz	r0, 1cc62 <net_buf_get+0x4a>
   1cc4c:	4639      	mov	r1, r7
   1cc4e:	4640      	mov	r0, r8
   1cc50:	f240 12ad 	movw	r2, #429	; 0x1ad
   1cc54:	f00b fd96 	bl	28784 <assert_print>
   1cc58:	f240 11ad 	movw	r1, #429	; 0x1ad
   1cc5c:	4638      	mov	r0, r7
   1cc5e:	f00b fd8a 	bl	28776 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1cc62:	7963      	ldrb	r3, [r4, #5]
   1cc64:	f023 0301 	bic.w	r3, r3, #1
   1cc68:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cc6a:	6824      	ldr	r4, [r4, #0]
   1cc6c:	e7df      	b.n	1cc2e <net_buf_get+0x16>
   1cc6e:	bf00      	nop
   1cc70:	0002f982 	.word	0x0002f982
   1cc74:	0002d509 	.word	0x0002d509

0001cc78 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1cc78:	b538      	push	{r3, r4, r5, lr}
   1cc7a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1cc7c:	4604      	mov	r4, r0
   1cc7e:	b950      	cbnz	r0, 1cc96 <net_buf_simple_reserve+0x1e>
   1cc80:	490d      	ldr	r1, [pc, #52]	; (1ccb8 <net_buf_simple_reserve+0x40>)
   1cc82:	480e      	ldr	r0, [pc, #56]	; (1ccbc <net_buf_simple_reserve+0x44>)
   1cc84:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   1cc88:	f00b fd7c 	bl	28784 <assert_print>
   1cc8c:	480a      	ldr	r0, [pc, #40]	; (1ccb8 <net_buf_simple_reserve+0x40>)
   1cc8e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1cc92:	f00b fd70 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1cc96:	88a3      	ldrh	r3, [r4, #4]
   1cc98:	b153      	cbz	r3, 1ccb0 <net_buf_simple_reserve+0x38>
   1cc9a:	4907      	ldr	r1, [pc, #28]	; (1ccb8 <net_buf_simple_reserve+0x40>)
   1cc9c:	4807      	ldr	r0, [pc, #28]	; (1ccbc <net_buf_simple_reserve+0x44>)
   1cc9e:	f240 12c5 	movw	r2, #453	; 0x1c5
   1cca2:	f00b fd6f 	bl	28784 <assert_print>
   1cca6:	4804      	ldr	r0, [pc, #16]	; (1ccb8 <net_buf_simple_reserve+0x40>)
   1cca8:	f240 11c5 	movw	r1, #453	; 0x1c5
   1ccac:	f00b fd63 	bl	28776 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1ccb0:	68a3      	ldr	r3, [r4, #8]
   1ccb2:	442b      	add	r3, r5
   1ccb4:	6023      	str	r3, [r4, #0]
}
   1ccb6:	bd38      	pop	{r3, r4, r5, pc}
   1ccb8:	0002f982 	.word	0x0002f982
   1ccbc:	0002d509 	.word	0x0002d509

0001ccc0 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1ccc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ccc2:	460c      	mov	r4, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1ccc4:	4605      	mov	r5, r0
   1ccc6:	b950      	cbnz	r0, 1ccde <net_buf_slist_put+0x1e>
   1ccc8:	4928      	ldr	r1, [pc, #160]	; (1cd6c <net_buf_slist_put+0xac>)
   1ccca:	4829      	ldr	r0, [pc, #164]	; (1cd70 <net_buf_slist_put+0xb0>)
   1cccc:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1ccd0:	f00b fd58 	bl	28784 <assert_print>
   1ccd4:	4825      	ldr	r0, [pc, #148]	; (1cd6c <net_buf_slist_put+0xac>)
   1ccd6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1ccda:	f00b fd4c 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1ccde:	b954      	cbnz	r4, 1ccf6 <net_buf_slist_put+0x36>
   1cce0:	4922      	ldr	r1, [pc, #136]	; (1cd6c <net_buf_slist_put+0xac>)
   1cce2:	4823      	ldr	r0, [pc, #140]	; (1cd70 <net_buf_slist_put+0xb0>)
   1cce4:	f240 12d3 	movw	r2, #467	; 0x1d3
   1cce8:	f00b fd4c 	bl	28784 <assert_print>
   1ccec:	481f      	ldr	r0, [pc, #124]	; (1cd6c <net_buf_slist_put+0xac>)
   1ccee:	f240 11d3 	movw	r1, #467	; 0x1d3
   1ccf2:	f00b fd40 	bl	28776 <assert_post_action>
{
   1ccf6:	4626      	mov	r6, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1ccf8:	6832      	ldr	r2, [r6, #0]
   1ccfa:	bb72      	cbnz	r2, 1cd5a <net_buf_slist_put+0x9a>
	__asm__ volatile(
   1ccfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd00:	f3ef 8711 	mrs	r7, BASEPRI
   1cd04:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cd0c:	4819      	ldr	r0, [pc, #100]	; (1cd74 <net_buf_slist_put+0xb4>)
   1cd0e:	f005 f9db 	bl	220c8 <z_spin_lock_valid>
   1cd12:	b940      	cbnz	r0, 1cd26 <net_buf_slist_put+0x66>
   1cd14:	4918      	ldr	r1, [pc, #96]	; (1cd78 <net_buf_slist_put+0xb8>)
   1cd16:	4816      	ldr	r0, [pc, #88]	; (1cd70 <net_buf_slist_put+0xb0>)
   1cd18:	228e      	movs	r2, #142	; 0x8e
   1cd1a:	f00b fd33 	bl	28784 <assert_print>
   1cd1e:	4816      	ldr	r0, [pc, #88]	; (1cd78 <net_buf_slist_put+0xb8>)
   1cd20:	218e      	movs	r1, #142	; 0x8e
   1cd22:	f00b fd28 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cd26:	4813      	ldr	r0, [pc, #76]	; (1cd74 <net_buf_slist_put+0xb4>)
   1cd28:	f005 f9ec 	bl	22104 <z_spin_lock_set_owner>
Z_GENLIST_APPEND_LIST(slist, snode)
   1cd2c:	b11c      	cbz	r4, 1cd36 <net_buf_slist_put+0x76>
	return list->tail;
   1cd2e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1cd30:	b9cb      	cbnz	r3, 1cd66 <net_buf_slist_put+0xa6>
	list->head = node;
   1cd32:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1cd34:	606e      	str	r6, [r5, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cd36:	480f      	ldr	r0, [pc, #60]	; (1cd74 <net_buf_slist_put+0xb4>)
   1cd38:	f005 f9d4 	bl	220e4 <z_spin_unlock_valid>
   1cd3c:	b940      	cbnz	r0, 1cd50 <net_buf_slist_put+0x90>
   1cd3e:	490e      	ldr	r1, [pc, #56]	; (1cd78 <net_buf_slist_put+0xb8>)
   1cd40:	480b      	ldr	r0, [pc, #44]	; (1cd70 <net_buf_slist_put+0xb0>)
   1cd42:	22b9      	movs	r2, #185	; 0xb9
   1cd44:	f00b fd1e 	bl	28784 <assert_print>
   1cd48:	480b      	ldr	r0, [pc, #44]	; (1cd78 <net_buf_slist_put+0xb8>)
   1cd4a:	21b9      	movs	r1, #185	; 0xb9
   1cd4c:	f00b fd13 	bl	28776 <assert_post_action>
	__asm__ volatile(
   1cd50:	f387 8811 	msr	BASEPRI, r7
   1cd54:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1cd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tail->flags |= NET_BUF_FRAGS;
   1cd5a:	7973      	ldrb	r3, [r6, #5]
   1cd5c:	f043 0301 	orr.w	r3, r3, #1
   1cd60:	7173      	strb	r3, [r6, #5]
   1cd62:	4616      	mov	r6, r2
   1cd64:	e7c8      	b.n	1ccf8 <net_buf_slist_put+0x38>
	parent->next = child;
   1cd66:	601c      	str	r4, [r3, #0]
}
   1cd68:	e7e4      	b.n	1cd34 <net_buf_slist_put+0x74>
   1cd6a:	bf00      	nop
   1cd6c:	0002f982 	.word	0x0002f982
   1cd70:	0002d509 	.word	0x0002d509
   1cd74:	20002904 	.word	0x20002904
   1cd78:	0002d57d 	.word	0x0002d57d

0001cd7c <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1cd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1cd80:	4604      	mov	r4, r0
   1cd82:	b950      	cbnz	r0, 1cd9a <net_buf_slist_get+0x1e>
   1cd84:	4931      	ldr	r1, [pc, #196]	; (1ce4c <net_buf_slist_get+0xd0>)
   1cd86:	4832      	ldr	r0, [pc, #200]	; (1ce50 <net_buf_slist_get+0xd4>)
   1cd88:	f240 12e3 	movw	r2, #483	; 0x1e3
   1cd8c:	f00b fcfa 	bl	28784 <assert_print>
   1cd90:	482e      	ldr	r0, [pc, #184]	; (1ce4c <net_buf_slist_get+0xd0>)
   1cd92:	f240 11e3 	movw	r1, #483	; 0x1e3
   1cd96:	f00b fcee 	bl	28776 <assert_post_action>
	__asm__ volatile(
   1cd9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd9e:	f3ef 8811 	mrs	r8, BASEPRI
   1cda2:	f383 8812 	msr	BASEPRI_MAX, r3
   1cda6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cdaa:	482a      	ldr	r0, [pc, #168]	; (1ce54 <net_buf_slist_get+0xd8>)
   1cdac:	f005 f98c 	bl	220c8 <z_spin_lock_valid>
   1cdb0:	b940      	cbnz	r0, 1cdc4 <net_buf_slist_get+0x48>
   1cdb2:	4929      	ldr	r1, [pc, #164]	; (1ce58 <net_buf_slist_get+0xdc>)
   1cdb4:	4826      	ldr	r0, [pc, #152]	; (1ce50 <net_buf_slist_get+0xd4>)
   1cdb6:	228e      	movs	r2, #142	; 0x8e
   1cdb8:	f00b fce4 	bl	28784 <assert_print>
   1cdbc:	4826      	ldr	r0, [pc, #152]	; (1ce58 <net_buf_slist_get+0xdc>)
   1cdbe:	218e      	movs	r1, #142	; 0x8e
   1cdc0:	f00b fcd9 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cdc4:	4823      	ldr	r0, [pc, #140]	; (1ce54 <net_buf_slist_get+0xd8>)
   1cdc6:	f005 f99d 	bl	22104 <z_spin_lock_set_owner>
	return list->head;
   1cdca:	6826      	ldr	r6, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1cdcc:	b176      	cbz	r6, 1cdec <net_buf_slist_get+0x70>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1cdce:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1cdd0:	6833      	ldr	r3, [r6, #0]

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   1cdd2:	4f1e      	ldr	r7, [pc, #120]	; (1ce4c <net_buf_slist_get+0xd0>)
   1cdd4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1ce50 <net_buf_slist_get+0xd4>
	list->head = node;
   1cdd8:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1cdda:	4296      	cmp	r6, r2
	list->tail = node;
   1cddc:	bf08      	it	eq
   1cdde:	6063      	streq	r3, [r4, #4]
{
   1cde0:	4635      	mov	r5, r6
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cde2:	796b      	ldrb	r3, [r5, #5]
   1cde4:	f013 0301 	ands.w	r3, r3, #1
   1cde8:	d114      	bne.n	1ce14 <net_buf_slist_get+0x98>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1cdea:	602b      	str	r3, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cdec:	4819      	ldr	r0, [pc, #100]	; (1ce54 <net_buf_slist_get+0xd8>)
   1cdee:	f005 f979 	bl	220e4 <z_spin_unlock_valid>
   1cdf2:	b940      	cbnz	r0, 1ce06 <net_buf_slist_get+0x8a>
   1cdf4:	4918      	ldr	r1, [pc, #96]	; (1ce58 <net_buf_slist_get+0xdc>)
   1cdf6:	4816      	ldr	r0, [pc, #88]	; (1ce50 <net_buf_slist_get+0xd4>)
   1cdf8:	22b9      	movs	r2, #185	; 0xb9
   1cdfa:	f00b fcc3 	bl	28784 <assert_print>
   1cdfe:	4816      	ldr	r0, [pc, #88]	; (1ce58 <net_buf_slist_get+0xdc>)
   1ce00:	21b9      	movs	r1, #185	; 0xb9
   1ce02:	f00b fcb8 	bl	28776 <assert_post_action>
	__asm__ volatile(
   1ce06:	f388 8811 	msr	BASEPRI, r8
   1ce0a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1ce0e:	4630      	mov	r0, r6
   1ce10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return list->head;
   1ce14:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1ce16:	b98b      	cbnz	r3, 1ce3c <net_buf_slist_get+0xc0>
			__ASSERT_NO_MSG(frag->frags);
   1ce18:	4639      	mov	r1, r7
   1ce1a:	4648      	mov	r0, r9
			frag->frags = (void *)sys_slist_get(list);
   1ce1c:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   1ce1e:	f240 12ed 	movw	r2, #493	; 0x1ed
   1ce22:	f00b fcaf 	bl	28784 <assert_print>
   1ce26:	f240 11ed 	movw	r1, #493	; 0x1ed
   1ce2a:	4638      	mov	r0, r7
   1ce2c:	f00b fca3 	bl	28776 <assert_post_action>
			frag->flags &= ~NET_BUF_FRAGS;
   1ce30:	796b      	ldrb	r3, [r5, #5]
   1ce32:	f023 0301 	bic.w	r3, r3, #1
   1ce36:	716b      	strb	r3, [r5, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ce38:	682d      	ldr	r5, [r5, #0]
   1ce3a:	e7d2      	b.n	1cde2 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ce3c:	6861      	ldr	r1, [r4, #4]
	return node->next;
   1ce3e:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1ce40:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ce42:	428b      	cmp	r3, r1
	list->tail = node;
   1ce44:	bf08      	it	eq
   1ce46:	6062      	streq	r2, [r4, #4]
			frag->frags = (void *)sys_slist_get(list);
   1ce48:	602b      	str	r3, [r5, #0]
			__ASSERT_NO_MSG(frag->frags);
   1ce4a:	e7f1      	b.n	1ce30 <net_buf_slist_get+0xb4>
   1ce4c:	0002f982 	.word	0x0002f982
   1ce50:	0002d509 	.word	0x0002d509
   1ce54:	20002904 	.word	0x20002904
   1ce58:	0002d57d 	.word	0x0002d57d

0001ce5c <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1ce5c:	b538      	push	{r3, r4, r5, lr}
   1ce5e:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1ce60:	4605      	mov	r5, r0
   1ce62:	b950      	cbnz	r0, 1ce7a <net_buf_put+0x1e>
   1ce64:	4912      	ldr	r1, [pc, #72]	; (1ceb0 <net_buf_put+0x54>)
   1ce66:	4813      	ldr	r0, [pc, #76]	; (1ceb4 <net_buf_put+0x58>)
   1ce68:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ce6c:	f00b fc8a 	bl	28784 <assert_print>
   1ce70:	480f      	ldr	r0, [pc, #60]	; (1ceb0 <net_buf_put+0x54>)
   1ce72:	f44f 7100 	mov.w	r1, #512	; 0x200
   1ce76:	f00b fc7e 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1ce7a:	b954      	cbnz	r4, 1ce92 <net_buf_put+0x36>
   1ce7c:	490c      	ldr	r1, [pc, #48]	; (1ceb0 <net_buf_put+0x54>)
   1ce7e:	480d      	ldr	r0, [pc, #52]	; (1ceb4 <net_buf_put+0x58>)
   1ce80:	f240 2201 	movw	r2, #513	; 0x201
   1ce84:	f00b fc7e 	bl	28784 <assert_print>
   1ce88:	4809      	ldr	r0, [pc, #36]	; (1ceb0 <net_buf_put+0x54>)
   1ce8a:	f240 2101 	movw	r1, #513	; 0x201
   1ce8e:	f00b fc72 	bl	28776 <assert_post_action>
{
   1ce92:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1ce94:	6811      	ldr	r1, [r2, #0]
   1ce96:	b929      	cbnz	r1, 1cea4 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1ce98:	4621      	mov	r1, r4
   1ce9a:	4628      	mov	r0, r5
}
   1ce9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1cea0:	f005 bb38 	b.w	22514 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1cea4:	7953      	ldrb	r3, [r2, #5]
   1cea6:	f043 0301 	orr.w	r3, r3, #1
   1ceaa:	7153      	strb	r3, [r2, #5]
   1ceac:	460a      	mov	r2, r1
   1ceae:	e7f1      	b.n	1ce94 <net_buf_put+0x38>
   1ceb0:	0002f982 	.word	0x0002f982
   1ceb4:	0002d509 	.word	0x0002d509

0001ceb8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ceb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1cebc:	4605      	mov	r5, r0
   1cebe:	b328      	cbz	r0, 1cf0c <net_buf_unref+0x54>
   1cec0:	4e1c      	ldr	r6, [pc, #112]	; (1cf34 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1cec2:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1cec4:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1cec8:	462c      	mov	r4, r5
   1ceca:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1cecc:	7923      	ldrb	r3, [r4, #4]
   1cece:	3b01      	subs	r3, #1
   1ced0:	b2db      	uxtb	r3, r3
   1ced2:	7123      	strb	r3, [r4, #4]
   1ced4:	b9c3      	cbnz	r3, 1cf08 <net_buf_unref+0x50>
		if (buf->__buf) {
   1ced6:	6921      	ldr	r1, [r4, #16]
   1ced8:	b159      	cbz	r1, 1cef2 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1ceda:	7963      	ldrb	r3, [r4, #5]
   1cedc:	079b      	lsls	r3, r3, #30
   1cede:	d407      	bmi.n	1cef0 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cee0:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1cee2:	fb08 6303 	mla	r3, r8, r3, r6
   1cee6:	4620      	mov	r0, r4
   1cee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ceea:	681b      	ldr	r3, [r3, #0]
   1ceec:	689b      	ldr	r3, [r3, #8]
   1ceee:	4798      	blx	r3
			buf->__buf = NULL;
   1cef0:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1cef2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1cef4:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1cef6:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1cefa:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1cefc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cefe:	b193      	cbz	r3, 1cf26 <net_buf_unref+0x6e>
			pool->destroy(buf);
   1cf00:	4620      	mov	r0, r4
   1cf02:	4798      	blx	r3
	while (buf) {
   1cf04:	2d00      	cmp	r5, #0
   1cf06:	d1df      	bne.n	1cec8 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1cf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1cf0c:	490a      	ldr	r1, [pc, #40]	; (1cf38 <net_buf_unref+0x80>)
   1cf0e:	480b      	ldr	r0, [pc, #44]	; (1cf3c <net_buf_unref+0x84>)
   1cf10:	f44f 7204 	mov.w	r2, #528	; 0x210
   1cf14:	f00b fc36 	bl	28784 <assert_print>
}
   1cf18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1cf1c:	4806      	ldr	r0, [pc, #24]	; (1cf38 <net_buf_unref+0x80>)
   1cf1e:	f44f 7104 	mov.w	r1, #528	; 0x210
   1cf22:	f00b bc28 	b.w	28776 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1cf26:	4621      	mov	r1, r4
   1cf28:	fb00 6008 	mla	r0, r0, r8, r6
   1cf2c:	f00e ff53 	bl	2bdd6 <k_queue_prepend>
}
   1cf30:	e7e8      	b.n	1cf04 <net_buf_unref+0x4c>
   1cf32:	bf00      	nop
   1cf34:	20000b10 	.word	0x20000b10
   1cf38:	0002f982 	.word	0x0002f982
   1cf3c:	0002d509 	.word	0x0002d509

0001cf40 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1cf40:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1cf42:	4604      	mov	r4, r0
   1cf44:	b950      	cbnz	r0, 1cf5c <net_buf_ref+0x1c>
   1cf46:	4908      	ldr	r1, [pc, #32]	; (1cf68 <net_buf_ref+0x28>)
   1cf48:	4808      	ldr	r0, [pc, #32]	; (1cf6c <net_buf_ref+0x2c>)
   1cf4a:	f240 223f 	movw	r2, #575	; 0x23f
   1cf4e:	f00b fc19 	bl	28784 <assert_print>
   1cf52:	4805      	ldr	r0, [pc, #20]	; (1cf68 <net_buf_ref+0x28>)
   1cf54:	f240 213f 	movw	r1, #575	; 0x23f
   1cf58:	f00b fc0d 	bl	28776 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1cf5c:	7923      	ldrb	r3, [r4, #4]
   1cf5e:	3301      	adds	r3, #1
   1cf60:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1cf62:	4620      	mov	r0, r4
   1cf64:	bd10      	pop	{r4, pc}
   1cf66:	bf00      	nop
   1cf68:	0002f982 	.word	0x0002f982
   1cf6c:	0002d509 	.word	0x0002d509

0001cf70 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1cf70:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1cf72:	4604      	mov	r4, r0
   1cf74:	b950      	cbnz	r0, 1cf8c <net_buf_frag_last+0x1c>
   1cf76:	4908      	ldr	r1, [pc, #32]	; (1cf98 <net_buf_frag_last+0x28>)
   1cf78:	4808      	ldr	r0, [pc, #32]	; (1cf9c <net_buf_frag_last+0x2c>)
   1cf7a:	f44f 721f 	mov.w	r2, #636	; 0x27c
   1cf7e:	f00b fc01 	bl	28784 <assert_print>
   1cf82:	4805      	ldr	r0, [pc, #20]	; (1cf98 <net_buf_frag_last+0x28>)
   1cf84:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1cf88:	f00b fbf5 	bl	28776 <assert_post_action>

	while (buf->frags) {
   1cf8c:	4620      	mov	r0, r4
   1cf8e:	6824      	ldr	r4, [r4, #0]
   1cf90:	2c00      	cmp	r4, #0
   1cf92:	d1fb      	bne.n	1cf8c <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1cf94:	bd10      	pop	{r4, pc}
   1cf96:	bf00      	nop
   1cf98:	0002f982 	.word	0x0002f982
   1cf9c:	0002d509 	.word	0x0002d509

0001cfa0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1cfa0:	b538      	push	{r3, r4, r5, lr}
   1cfa2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1cfa4:	4604      	mov	r4, r0
   1cfa6:	b950      	cbnz	r0, 1cfbe <net_buf_frag_insert+0x1e>
   1cfa8:	490f      	ldr	r1, [pc, #60]	; (1cfe8 <net_buf_frag_insert+0x48>)
   1cfaa:	4810      	ldr	r0, [pc, #64]	; (1cfec <net_buf_frag_insert+0x4c>)
   1cfac:	f240 2287 	movw	r2, #647	; 0x287
   1cfb0:	f00b fbe8 	bl	28784 <assert_print>
   1cfb4:	480c      	ldr	r0, [pc, #48]	; (1cfe8 <net_buf_frag_insert+0x48>)
   1cfb6:	f240 2187 	movw	r1, #647	; 0x287
   1cfba:	f00b fbdc 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1cfbe:	b955      	cbnz	r5, 1cfd6 <net_buf_frag_insert+0x36>
   1cfc0:	4909      	ldr	r1, [pc, #36]	; (1cfe8 <net_buf_frag_insert+0x48>)
   1cfc2:	480a      	ldr	r0, [pc, #40]	; (1cfec <net_buf_frag_insert+0x4c>)
   1cfc4:	f44f 7222 	mov.w	r2, #648	; 0x288
   1cfc8:	f00b fbdc 	bl	28784 <assert_print>
   1cfcc:	4806      	ldr	r0, [pc, #24]	; (1cfe8 <net_buf_frag_insert+0x48>)
   1cfce:	f44f 7122 	mov.w	r1, #648	; 0x288
   1cfd2:	f00b fbd0 	bl	28776 <assert_post_action>

	if (parent->frags) {
   1cfd6:	6823      	ldr	r3, [r4, #0]
   1cfd8:	b123      	cbz	r3, 1cfe4 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1cfda:	4628      	mov	r0, r5
   1cfdc:	f7ff ffc8 	bl	1cf70 <net_buf_frag_last>
   1cfe0:	6823      	ldr	r3, [r4, #0]
   1cfe2:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1cfe4:	6025      	str	r5, [r4, #0]
}
   1cfe6:	bd38      	pop	{r3, r4, r5, pc}
   1cfe8:	0002f982 	.word	0x0002f982
   1cfec:	0002d509 	.word	0x0002d509

0001cff0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1cff0:	b538      	push	{r3, r4, r5, lr}
   1cff2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1cff4:	460d      	mov	r5, r1
   1cff6:	b951      	cbnz	r1, 1d00e <net_buf_frag_add+0x1e>
   1cff8:	490c      	ldr	r1, [pc, #48]	; (1d02c <net_buf_frag_add+0x3c>)
   1cffa:	480d      	ldr	r0, [pc, #52]	; (1d030 <net_buf_frag_add+0x40>)
   1cffc:	f240 2293 	movw	r2, #659	; 0x293
   1d000:	f00b fbc0 	bl	28784 <assert_print>
   1d004:	4809      	ldr	r0, [pc, #36]	; (1d02c <net_buf_frag_add+0x3c>)
   1d006:	f240 2193 	movw	r1, #659	; 0x293
   1d00a:	f00b fbb4 	bl	28776 <assert_post_action>

	if (!head) {
   1d00e:	b924      	cbnz	r4, 1d01a <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   1d010:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1d012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1d016:	f7ff bf93 	b.w	1cf40 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1d01a:	4620      	mov	r0, r4
   1d01c:	f7ff ffa8 	bl	1cf70 <net_buf_frag_last>
   1d020:	4629      	mov	r1, r5
   1d022:	f7ff ffbd 	bl	1cfa0 <net_buf_frag_insert>
}
   1d026:	4620      	mov	r0, r4
   1d028:	bd38      	pop	{r3, r4, r5, pc}
   1d02a:	bf00      	nop
   1d02c:	0002f982 	.word	0x0002f982
   1d030:	0002d509 	.word	0x0002d509

0001d034 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1d034:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1d036:	6882      	ldr	r2, [r0, #8]
   1d038:	6803      	ldr	r3, [r0, #0]
   1d03a:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d03c:	4299      	cmp	r1, r3
{
   1d03e:	4604      	mov	r4, r0
   1d040:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d042:	d90a      	bls.n	1d05a <net_buf_simple_push+0x26>
   1d044:	4908      	ldr	r1, [pc, #32]	; (1d068 <net_buf_simple_push+0x34>)
   1d046:	4809      	ldr	r0, [pc, #36]	; (1d06c <net_buf_simple_push+0x38>)
   1d048:	f240 4217 	movw	r2, #1047	; 0x417
   1d04c:	f00b fb9a 	bl	28784 <assert_print>
   1d050:	4805      	ldr	r0, [pc, #20]	; (1d068 <net_buf_simple_push+0x34>)
   1d052:	f240 4117 	movw	r1, #1047	; 0x417
   1d056:	f00b fb8e 	bl	28776 <assert_post_action>
	buf->data -= len;
   1d05a:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1d05c:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1d05e:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1d060:	440d      	add	r5, r1
	buf->data -= len;
   1d062:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1d064:	80a5      	strh	r5, [r4, #4]
}
   1d066:	bd38      	pop	{r3, r4, r5, pc}
   1d068:	0002f982 	.word	0x0002f982
   1d06c:	0002d509 	.word	0x0002d509

0001d070 <net_buf_simple_pull>:
{
   1d070:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1d072:	8883      	ldrh	r3, [r0, #4]
   1d074:	428b      	cmp	r3, r1
{
   1d076:	4604      	mov	r4, r0
   1d078:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1d07a:	d20a      	bcs.n	1d092 <net_buf_simple_pull+0x22>
   1d07c:	4908      	ldr	r1, [pc, #32]	; (1d0a0 <net_buf_simple_pull+0x30>)
   1d07e:	4809      	ldr	r0, [pc, #36]	; (1d0a4 <net_buf_simple_pull+0x34>)
   1d080:	f240 4277 	movw	r2, #1143	; 0x477
   1d084:	f00b fb7e 	bl	28784 <assert_print>
   1d088:	4805      	ldr	r0, [pc, #20]	; (1d0a0 <net_buf_simple_pull+0x30>)
   1d08a:	f240 4177 	movw	r1, #1143	; 0x477
   1d08e:	f00b fb72 	bl	28776 <assert_post_action>
	buf->len -= len;
   1d092:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1d094:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1d096:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1d098:	4428      	add	r0, r5
	buf->len -= len;
   1d09a:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1d09c:	6020      	str	r0, [r4, #0]
}
   1d09e:	bd38      	pop	{r3, r4, r5, pc}
   1d0a0:	0002f982 	.word	0x0002f982
   1d0a4:	0002d509 	.word	0x0002d509

0001d0a8 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1d0a8:	8883      	ldrh	r3, [r0, #4]
   1d0aa:	428b      	cmp	r3, r1
{
   1d0ac:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1d0ae:	6806      	ldr	r6, [r0, #0]
{
   1d0b0:	4604      	mov	r4, r0
   1d0b2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1d0b4:	d20a      	bcs.n	1d0cc <net_buf_simple_pull_mem+0x24>
   1d0b6:	4909      	ldr	r1, [pc, #36]	; (1d0dc <net_buf_simple_pull_mem+0x34>)
   1d0b8:	4809      	ldr	r0, [pc, #36]	; (1d0e0 <net_buf_simple_pull_mem+0x38>)
   1d0ba:	f240 4283 	movw	r2, #1155	; 0x483
   1d0be:	f00b fb61 	bl	28784 <assert_print>
   1d0c2:	4806      	ldr	r0, [pc, #24]	; (1d0dc <net_buf_simple_pull_mem+0x34>)
   1d0c4:	f240 4183 	movw	r1, #1155	; 0x483
   1d0c8:	f00b fb55 	bl	28776 <assert_post_action>
	buf->len -= len;
   1d0cc:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1d0ce:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1d0d0:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1d0d2:	4429      	add	r1, r5
	buf->len -= len;
   1d0d4:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1d0d6:	6021      	str	r1, [r4, #0]
}
   1d0d8:	4630      	mov	r0, r6
   1d0da:	bd70      	pop	{r4, r5, r6, pc}
   1d0dc:	0002f982 	.word	0x0002f982
   1d0e0:	0002d509 	.word	0x0002d509

0001d0e4 <net_buf_simple_add>:
{
   1d0e4:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1d0e6:	6803      	ldr	r3, [r0, #0]
   1d0e8:	8886      	ldrh	r6, [r0, #4]
   1d0ea:	4604      	mov	r4, r0
   1d0ec:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1d0ee:	f00e f95c 	bl	2b3aa <net_buf_simple_tailroom>
   1d0f2:	4288      	cmp	r0, r1
{
   1d0f4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1d0f6:	d20a      	bcs.n	1d10e <net_buf_simple_add+0x2a>
   1d0f8:	4907      	ldr	r1, [pc, #28]	; (1d118 <net_buf_simple_add+0x34>)
   1d0fa:	4808      	ldr	r0, [pc, #32]	; (1d11c <net_buf_simple_add+0x38>)
   1d0fc:	f44f 724a 	mov.w	r2, #808	; 0x328
   1d100:	f00b fb40 	bl	28784 <assert_print>
   1d104:	4804      	ldr	r0, [pc, #16]	; (1d118 <net_buf_simple_add+0x34>)
   1d106:	f44f 714a 	mov.w	r1, #808	; 0x328
   1d10a:	f00b fb34 	bl	28776 <assert_post_action>
	buf->len += len;
   1d10e:	88a1      	ldrh	r1, [r4, #4]
   1d110:	440d      	add	r5, r1
   1d112:	80a5      	strh	r5, [r4, #4]
}
   1d114:	4630      	mov	r0, r6
   1d116:	bd70      	pop	{r4, r5, r6, pc}
   1d118:	0002f982 	.word	0x0002f982
   1d11c:	0002d509 	.word	0x0002d509

0001d120 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1d120:	b508      	push	{r3, lr}
	entropy_driver = DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));
   1d122:	4b05      	ldr	r3, [pc, #20]	; (1d138 <xoshiro128_initialize+0x18>)
   1d124:	4805      	ldr	r0, [pc, #20]	; (1d13c <xoshiro128_initialize+0x1c>)
   1d126:	6018      	str	r0, [r3, #0]
   1d128:	f00e fddc 	bl	2bce4 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
   1d12c:	2800      	cmp	r0, #0
	}
	return 0;
}
   1d12e:	bf0c      	ite	eq
   1d130:	f06f 0012 	mvneq.w	r0, #18
   1d134:	2000      	movne	r0, #0
   1d136:	bd08      	pop	{r3, pc}
   1d138:	20002908 	.word	0x20002908
   1d13c:	0002c388 	.word	0x0002c388

0001d140 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   1d140:	7908      	ldrb	r0, [r1, #4]
{
   1d142:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1d144:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   1d148:	2c07      	cmp	r4, #7
   1d14a:	d81d      	bhi.n	1d188 <adc_nrfx_channel_setup+0x48>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   1d14c:	780b      	ldrb	r3, [r1, #0]
   1d14e:	2b0b      	cmp	r3, #11
   1d150:	d816      	bhi.n	1d180 <adc_nrfx_channel_setup+0x40>
   1d152:	e8df f003 	tbb	[pc, r3]
   1d156:	0707      	.short	0x0707
   1d158:	06150707 	.word	0x06150707
   1d15c:	110f1515 	.word	0x110f1515
   1d160:	1315      	.short	0x1315
		break;
	case ADC_GAIN_1_3:
		config.gain = NRF_SAADC_GAIN1_3;
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
   1d162:	2304      	movs	r3, #4
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   1d164:	784a      	ldrb	r2, [r1, #1]
   1d166:	2a03      	cmp	r2, #3
   1d168:	d011      	beq.n	1d18e <adc_nrfx_channel_setup+0x4e>
   1d16a:	2a04      	cmp	r2, #4
   1d16c:	d022      	beq.n	1d1b4 <adc_nrfx_channel_setup+0x74>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
   1d16e:	482e      	ldr	r0, [pc, #184]	; (1d228 <adc_nrfx_channel_setup+0xe8>)
   1d170:	2145      	movs	r1, #69	; 0x45
   1d172:	e007      	b.n	1d184 <adc_nrfx_channel_setup+0x44>
		config.gain = NRF_SAADC_GAIN1;
   1d174:	2305      	movs	r3, #5
		break;
   1d176:	e7f5      	b.n	1d164 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   1d178:	2306      	movs	r3, #6
		break;
   1d17a:	e7f3      	b.n	1d164 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   1d17c:	2307      	movs	r3, #7
		break;
   1d17e:	e7f1      	b.n	1d164 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   1d180:	482a      	ldr	r0, [pc, #168]	; (1d22c <adc_nrfx_channel_setup+0xec>)
   1d182:	2145      	movs	r1, #69	; 0x45
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
   1d184:	f00b fb0c 	bl	287a0 <z_log_minimal_printk>
		return -EINVAL;
   1d188:	f06f 0015 	mvn.w	r0, #21
   1d18c:	e043      	b.n	1d216 <adc_nrfx_channel_setup+0xd6>
	switch (channel_cfg->reference) {
   1d18e:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   1d190:	884a      	ldrh	r2, [r1, #2]
   1d192:	f244 060a 	movw	r6, #16394	; 0x400a
   1d196:	42b2      	cmp	r2, r6
   1d198:	d040      	beq.n	1d21c <adc_nrfx_channel_setup+0xdc>
   1d19a:	d80d      	bhi.n	1d1b8 <adc_nrfx_channel_setup+0x78>
   1d19c:	f244 0603 	movw	r6, #16387	; 0x4003
   1d1a0:	42b2      	cmp	r2, r6
   1d1a2:	d017      	beq.n	1d1d4 <adc_nrfx_channel_setup+0x94>
   1d1a4:	f244 0605 	movw	r6, #16389	; 0x4005
   1d1a8:	42b2      	cmp	r2, r6
   1d1aa:	d035      	beq.n	1d218 <adc_nrfx_channel_setup+0xd8>
   1d1ac:	b3b2      	cbz	r2, 1d21c <adc_nrfx_channel_setup+0xdc>
		LOG_ERR("Selected ADC acquisition time is not valid");
   1d1ae:	4820      	ldr	r0, [pc, #128]	; (1d230 <adc_nrfx_channel_setup+0xf0>)
   1d1b0:	2145      	movs	r1, #69	; 0x45
   1d1b2:	e7e7      	b.n	1d184 <adc_nrfx_channel_setup+0x44>
	nrf_saadc_channel_config_t config = {
   1d1b4:	2500      	movs	r5, #0
   1d1b6:	e7eb      	b.n	1d190 <adc_nrfx_channel_setup+0x50>
	switch (channel_cfg->acquisition_time) {
   1d1b8:	f244 0614 	movw	r6, #16404	; 0x4014
   1d1bc:	42b2      	cmp	r2, r6
   1d1be:	d02f      	beq.n	1d220 <adc_nrfx_channel_setup+0xe0>
   1d1c0:	f244 0628 	movw	r6, #16424	; 0x4028
   1d1c4:	42b2      	cmp	r2, r6
   1d1c6:	d02d      	beq.n	1d224 <adc_nrfx_channel_setup+0xe4>
   1d1c8:	f244 060f 	movw	r6, #16399	; 0x400f
   1d1cc:	42b2      	cmp	r2, r6
   1d1ce:	d1ee      	bne.n	1d1ae <adc_nrfx_channel_setup+0x6e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1d1d0:	2203      	movs	r2, #3
   1d1d2:	e000      	b.n	1d1d6 <adc_nrfx_channel_setup+0x96>
	nrf_saadc_channel_config_t config = {
   1d1d4:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1d1d6:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1d1da:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1d1dc:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   1d1e0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   1d1e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1d1e8:	0122      	lsls	r2, r4, #4
   1d1ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1d1ee:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   1d1f2:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   1d1f4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1d1f8:	0123      	lsls	r3, r4, #4
   1d1fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d1fe:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   1d202:	798a      	ldrb	r2, [r1, #6]
   1d204:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1d208:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1d20c:	4b09      	ldr	r3, [pc, #36]	; (1d234 <adc_nrfx_channel_setup+0xf4>)
   1d20e:	441c      	add	r4, r3
   1d210:	794b      	ldrb	r3, [r1, #5]
   1d212:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8

	return 0;
}
   1d216:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
   1d218:	2201      	movs	r2, #1
   1d21a:	e7dc      	b.n	1d1d6 <adc_nrfx_channel_setup+0x96>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1d21c:	2202      	movs	r2, #2
   1d21e:	e7da      	b.n	1d1d6 <adc_nrfx_channel_setup+0x96>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1d220:	2204      	movs	r2, #4
   1d222:	e7d8      	b.n	1d1d6 <adc_nrfx_channel_setup+0x96>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1d224:	2205      	movs	r2, #5
   1d226:	e7d6      	b.n	1d1d6 <adc_nrfx_channel_setup+0x96>
   1d228:	0002f9d2 	.word	0x0002f9d2
   1d22c:	0002f9ae 	.word	0x0002f9ae
   1d230:	0002f9fb 	.word	0x0002f9fb
   1d234:	200004b8 	.word	0x200004b8

0001d238 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1d238:	4b04      	ldr	r3, [pc, #16]	; (1d24c <adc_context_start_sampling.isra.0+0x14>)
   1d23a:	2201      	movs	r2, #1
   1d23c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1d240:	b108      	cbz	r0, 1d246 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d242:	60da      	str	r2, [r3, #12]
}
   1d244:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d246:	601a      	str	r2, [r3, #0]
   1d248:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1d24a:	4770      	bx	lr
   1d24c:	40007000 	.word	0x40007000

0001d250 <start_read.constprop.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
   1d250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d252:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
   1d254:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
   1d256:	b110      	cbz	r0, 1d25e <start_read.constprop.0+0xe>
   1d258:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
   1d25c:	d004      	beq.n	1d268 <start_read.constprop.0+0x18>
	    (selected_channels & ~BIT_MASK(SAADC_CH_NUM))) {
		LOG_ERR("Invalid selection of channels");
   1d25e:	485e      	ldr	r0, [pc, #376]	; (1d3d8 <start_read.constprop.0+0x188>)
   1d260:	2145      	movs	r1, #69	; 0x45
		LOG_ERR(
   1d262:	f00b fa9d 	bl	287a0 <z_log_minimal_printk>
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
	if (error) {
   1d266:	e011      	b.n	1d28c <start_read.constprop.0+0x3c>
    p_reg->CH[channel].PSELP = pselp;
   1d268:	4c5c      	ldr	r4, [pc, #368]	; (1d3dc <start_read.constprop.0+0x18c>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1d26a:	4f5d      	ldr	r7, [pc, #372]	; (1d3e0 <start_read.constprop.0+0x190>)
	active_channels = 0U;
   1d26c:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   1d26e:	fa20 f302 	lsr.w	r3, r0, r2
   1d272:	f013 0301 	ands.w	r3, r3, #1
   1d276:	d030      	beq.n	1d2da <start_read.constprop.0+0x8a>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1d278:	18bb      	adds	r3, r7, r2
   1d27a:	f893 c0a8 	ldrb.w	ip, [r3, #168]	; 0xa8
   1d27e:	f1bc 0f00 	cmp.w	ip, #0
   1d282:	d107      	bne.n	1d294 <start_read.constprop.0+0x44>
				LOG_ERR("Channel %u not configured",
   1d284:	4857      	ldr	r0, [pc, #348]	; (1d3e4 <start_read.constprop.0+0x194>)
   1d286:	2145      	movs	r1, #69	; 0x45
   1d288:	f00b fa8a 	bl	287a0 <z_log_minimal_printk>
				return -EINVAL;
   1d28c:	f06f 0015 	mvn.w	r0, #21

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
   1d290:	b003      	add	sp, #12
   1d292:	bdf0      	pop	{r4, r5, r6, r7, pc}

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1d294:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1d298:	7c6e      	ldrb	r6, [r5, #17]
   1d29a:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   1d29e:	3e00      	subs	r6, #0
   1d2a0:	bf18      	it	ne
   1d2a2:	2601      	movne	r6, #1
   1d2a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1d2a8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   1d2ac:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1d2b0:	f102 0351 	add.w	r3, r2, #81	; 0x51
   1d2b4:	011b      	lsls	r3, r3, #4
			++active_channels;
   1d2b6:	3101      	adds	r1, #1
   1d2b8:	f844 c003 	str.w	ip, [r4, r3]
   1d2bc:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
   1d2be:	3201      	adds	r2, #1
   1d2c0:	2a08      	cmp	r2, #8
   1d2c2:	d1d4      	bne.n	1d26e <start_read.constprop.0+0x1e>
	error = set_resolution(sequence);
   1d2c4:	7c2a      	ldrb	r2, [r5, #16]
	switch (sequence->resolution) {
   1d2c6:	f1a2 0308 	sub.w	r3, r2, #8
   1d2ca:	2b06      	cmp	r3, #6
   1d2cc:	d817      	bhi.n	1d2fe <start_read.constprop.0+0xae>
   1d2ce:	e8df f003 	tbb	[pc, r3]
   1d2d2:	1619      	.short	0x1619
   1d2d4:	161b1609 	.word	0x161b1609
   1d2d8:	14          	.byte	0x14
   1d2d9:	00          	.byte	0x00
   1d2da:	f102 0651 	add.w	r6, r2, #81	; 0x51
   1d2de:	0136      	lsls	r6, r6, #4
   1d2e0:	51a3      	str	r3, [r4, r6]
}
   1d2e2:	e7ec      	b.n	1d2be <start_read.constprop.0+0x6e>
   1d2e4:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
   1d2e6:	483d      	ldr	r0, [pc, #244]	; (1d3dc <start_read.constprop.0+0x18c>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1d2e8:	2901      	cmp	r1, #1
   1d2ea:	f8c0 35f0 	str.w	r3, [r0, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1d2ee:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1d2f0:	d90c      	bls.n	1d30c <start_read.constprop.0+0xbc>
   1d2f2:	b16a      	cbz	r2, 1d310 <start_read.constprop.0+0xc0>
		LOG_ERR(
   1d2f4:	483c      	ldr	r0, [pc, #240]	; (1d3e8 <start_read.constprop.0+0x198>)
   1d2f6:	2145      	movs	r1, #69	; 0x45
   1d2f8:	e7b3      	b.n	1d262 <start_read.constprop.0+0x12>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1d2fa:	2303      	movs	r3, #3
		break;
   1d2fc:	e7f3      	b.n	1d2e6 <start_read.constprop.0+0x96>
		LOG_ERR("ADC resolution value %d is not valid",
   1d2fe:	483b      	ldr	r0, [pc, #236]	; (1d3ec <start_read.constprop.0+0x19c>)
   1d300:	2145      	movs	r1, #69	; 0x45
   1d302:	e7c1      	b.n	1d288 <start_read.constprop.0+0x38>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1d304:	2300      	movs	r3, #0
   1d306:	e7ee      	b.n	1d2e6 <start_read.constprop.0+0x96>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1d308:	2302      	movs	r3, #2
   1d30a:	e7ec      	b.n	1d2e6 <start_read.constprop.0+0x96>
	switch (sequence->oversampling) {
   1d30c:	2a08      	cmp	r2, #8
   1d30e:	d80e      	bhi.n	1d32e <start_read.constprop.0+0xde>
    p_reg->OVERSAMPLE = oversample;
   1d310:	f8c0 25f4 	str.w	r2, [r0, #1524]	; 0x5f4
	if (sequence->options) {
   1d314:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1d316:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   1d318:	b962      	cbnz	r2, 1d334 <start_read.constprop.0+0xe4>
	if (sequence->buffer_size < needed_buffer_size) {
   1d31a:	68ea      	ldr	r2, [r5, #12]
   1d31c:	429a      	cmp	r2, r3
   1d31e:	d20d      	bcs.n	1d33c <start_read.constprop.0+0xec>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1d320:	4833      	ldr	r0, [pc, #204]	; (1d3f0 <start_read.constprop.0+0x1a0>)
   1d322:	2145      	movs	r1, #69	; 0x45
   1d324:	f00b fa3c 	bl	287a0 <z_log_minimal_printk>
		return -ENOMEM;
   1d328:	f06f 000b 	mvn.w	r0, #11
   1d32c:	e7b0      	b.n	1d290 <start_read.constprop.0+0x40>
		LOG_ERR("Oversampling value %d is not valid",
   1d32e:	4831      	ldr	r0, [pc, #196]	; (1d3f4 <start_read.constprop.0+0x1a4>)
   1d330:	2145      	movs	r1, #69	; 0x45
   1d332:	e7a9      	b.n	1d288 <start_read.constprop.0+0x38>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1d334:	8992      	ldrh	r2, [r2, #12]
   1d336:	fb02 3303 	mla	r3, r2, r3, r3
   1d33a:	e7ee      	b.n	1d31a <start_read.constprop.0+0xca>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1d33c:	4b27      	ldr	r3, [pc, #156]	; (1d3dc <start_read.constprop.0+0x18c>)
   1d33e:	68aa      	ldr	r2, [r5, #8]
   1d340:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1d344:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   1d346:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
   1d34a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1d34c:	4c24      	ldr	r4, [pc, #144]	; (1d3e0 <start_read.constprop.0+0x190>)
   1d34e:	f104 067c 	add.w	r6, r4, #124	; 0x7c
   1d352:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1d354:	683b      	ldr	r3, [r7, #0]
   1d356:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   1d358:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   1d35a:	2600      	movs	r6, #0
   1d35c:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   1d35e:	4627      	mov	r7, r4
   1d360:	b393      	cbz	r3, 1d3c8 <start_read.constprop.0+0x178>
		ctx->options = *sequence->options;
   1d362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d364:	f104 0590 	add.w	r5, r4, #144	; 0x90
   1d368:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1d36c:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
   1d36e:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
   1d372:	b348      	cbz	r0, 1d3c8 <start_read.constprop.0+0x178>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d374:	f3bf 8f5b 	dmb	ish
   1d378:	e857 3f00 	ldrex	r3, [r7]
   1d37c:	e847 6200 	strex	r2, r6, [r7]
   1d380:	2a00      	cmp	r2, #0
   1d382:	d1f9      	bne.n	1d378 <start_read.constprop.0+0x128>
   1d384:	f3bf 8f5b 	dmb	ish
			return ((t * to_hz + off) / from_hz);
   1d388:	481b      	ldr	r0, [pc, #108]	; (1d3f8 <start_read.constprop.0+0x1a8>)
   1d38a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   1d38e:	4a1b      	ldr	r2, [pc, #108]	; (1d3fc <start_read.constprop.0+0x1ac>)
   1d390:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1d394:	4631      	mov	r1, r6
   1d396:	2300      	movs	r3, #0
   1d398:	fbe7 0105 	umlal	r0, r1, r7, r5
   1d39c:	f7e3 fde8 	bl	f70 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   1d3a0:	2200      	movs	r2, #0
   1d3a2:	e9cd 0100 	strd	r0, r1, [sp]
   1d3a6:	2300      	movs	r3, #0
   1d3a8:	f104 0008 	add.w	r0, r4, #8
   1d3ac:	f007 faaa 	bl	24904 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
   1d3b0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1d3b4:	b96b      	cbnz	r3, 1d3d2 <start_read.constprop.0+0x182>
	return z_impl_k_sem_take(sem, timeout);
   1d3b6:	4812      	ldr	r0, [pc, #72]	; (1d400 <start_read.constprop.0+0x1b0>)
   1d3b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d3bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d3c0:	f005 f990 	bl	226e4 <z_impl_k_sem_take>
	return ctx->status;
   1d3c4:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1d3c6:	e763      	b.n	1d290 <start_read.constprop.0+0x40>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1d3c8:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
   1d3cc:	f7ff ff34 	bl	1d238 <adc_context_start_sampling.isra.0>
   1d3d0:	e7ee      	b.n	1d3b0 <start_read.constprop.0+0x160>
		return 0;
   1d3d2:	2000      	movs	r0, #0
	return error;
   1d3d4:	e75c      	b.n	1d290 <start_read.constprop.0+0x40>
   1d3d6:	bf00      	nop
   1d3d8:	0002fa2b 	.word	0x0002fa2b
   1d3dc:	40007000 	.word	0x40007000
   1d3e0:	200004b8 	.word	0x200004b8
   1d3e4:	0002fa4e 	.word	0x0002fa4e
   1d3e8:	0002fa97 	.word	0x0002fa97
   1d3ec:	0002fa6d 	.word	0x0002fa6d
   1d3f0:	0002faf6 	.word	0x0002faf6
   1d3f4:	0002face 	.word	0x0002face
   1d3f8:	000f423f 	.word	0x000f423f
   1d3fc:	000f4240 	.word	0x000f4240
   1d400:	20000510 	.word	0x20000510

0001d404 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
   1d404:	b570      	push	{r4, r5, r6, lr}
   1d406:	460c      	mov	r4, r1
   1d408:	4616      	mov	r6, r2
   1d40a:	4d0d      	ldr	r5, [pc, #52]	; (1d440 <adc_nrfx_read_async+0x3c>)
   1d40c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d414:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1d418:	f005 f964 	bl	226e4 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   1d41c:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
   1d41e:	4620      	mov	r0, r4
   1d420:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
   1d424:	676e      	str	r6, [r5, #116]	; 0x74
   1d426:	f7ff ff13 	bl	1d250 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   1d42a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   1d42e:	4604      	mov	r4, r0
   1d430:	b103      	cbz	r3, 1d434 <adc_nrfx_read_async+0x30>
   1d432:	b110      	cbz	r0, 1d43a <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
   1d434:	4803      	ldr	r0, [pc, #12]	; (1d444 <adc_nrfx_read_async+0x40>)
   1d436:	f005 f91b 	bl	22670 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1d43a:	4620      	mov	r0, r4
   1d43c:	bd70      	pop	{r4, r5, r6, pc}
   1d43e:	bf00      	nop
   1d440:	200004b8 	.word	0x200004b8
   1d444:	200004f8 	.word	0x200004f8

0001d448 <adc_nrfx_read>:
{
   1d448:	b538      	push	{r3, r4, r5, lr}
   1d44a:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   1d44c:	4d0c      	ldr	r5, [pc, #48]	; (1d480 <adc_nrfx_read+0x38>)
   1d44e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d456:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1d45a:	f005 f943 	bl	226e4 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   1d45e:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
   1d460:	4620      	mov	r0, r4
   1d462:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
   1d466:	676b      	str	r3, [r5, #116]	; 0x74
   1d468:	f7ff fef2 	bl	1d250 <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   1d46c:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   1d470:	4604      	mov	r4, r0
   1d472:	b103      	cbz	r3, 1d476 <adc_nrfx_read+0x2e>
   1d474:	b110      	cbz	r0, 1d47c <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
   1d476:	4803      	ldr	r0, [pc, #12]	; (1d484 <adc_nrfx_read+0x3c>)
   1d478:	f005 f8fa 	bl	22670 <z_impl_k_sem_give>
}
   1d47c:	4620      	mov	r0, r4
   1d47e:	bd38      	pop	{r3, r4, r5, pc}
   1d480:	200004b8 	.word	0x200004b8
   1d484:	200004f8 	.word	0x200004f8

0001d488 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d488:	4b0e      	ldr	r3, [pc, #56]	; (1d4c4 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1d48a:	b510      	push	{r4, lr}
   1d48c:	2400      	movs	r4, #0
   1d48e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1d492:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1d496:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1d49a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1d49e:	2212      	movs	r2, #18
   1d4a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1d4a4:	2007      	movs	r0, #7
   1d4a6:	f7f7 f8e7 	bl	14678 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d4aa:	4622      	mov	r2, r4
   1d4ac:	2101      	movs	r1, #1
   1d4ae:	2007      	movs	r0, #7
   1d4b0:	f7f7 f914 	bl	146dc <z_arm_irq_priority_set>
	return sem->count;
   1d4b4:	4804      	ldr	r0, [pc, #16]	; (1d4c8 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1d4b6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1d4b8:	b913      	cbnz	r3, 1d4c0 <init_saadc+0x38>
   1d4ba:	3040      	adds	r0, #64	; 0x40
   1d4bc:	f005 f8d8 	bl	22670 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1d4c0:	2000      	movs	r0, #0
   1d4c2:	bd10      	pop	{r4, pc}
   1d4c4:	40007000 	.word	0x40007000
   1d4c8:	200004b8 	.word	0x200004b8

0001d4cc <saadc_irq_handler>:
{
   1d4cc:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d4ce:	4b35      	ldr	r3, [pc, #212]	; (1d5a4 <saadc_irq_handler+0xd8>)
   1d4d0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1d4d4:	2a00      	cmp	r2, #0
   1d4d6:	d057      	beq.n	1d588 <saadc_irq_handler+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d4d8:	2200      	movs	r2, #0
   1d4da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1d4de:	4c32      	ldr	r4, [pc, #200]	; (1d5a8 <saadc_irq_handler+0xdc>)
   1d4e0:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d4e4:	2101      	movs	r1, #1
   1d4e6:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   1d4e8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1d4ec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1d4ee:	4625      	mov	r5, r4
   1d4f0:	b3db      	cbz	r3, 1d56a <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   1d4f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   1d4f6:	b143      	cbz	r3, 1d50a <saadc_irq_handler+0x3e>
			action = callback(dev,
   1d4f8:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   1d4fc:	f104 017c 	add.w	r1, r4, #124	; 0x7c
   1d500:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1d502:	2801      	cmp	r0, #1
   1d504:	d014      	beq.n	1d530 <saadc_irq_handler+0x64>
   1d506:	2802      	cmp	r0, #2
   1d508:	d029      	beq.n	1d55e <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1d50a:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1d50e:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
   1d512:	429a      	cmp	r2, r3
   1d514:	d923      	bls.n	1d55e <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1d516:	3301      	adds	r3, #1
   1d518:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1d51c:	4b21      	ldr	r3, [pc, #132]	; (1d5a4 <saadc_irq_handler+0xd8>)
   1d51e:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1d522:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1d526:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1d528:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1d52c:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1d530:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1d534:	b92b      	cbnz	r3, 1d542 <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   1d536:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
   1d53a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d53e:	f7ff be7b 	b.w	1d238 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1d542:	f3bf 8f5b 	dmb	ish
   1d546:	e855 3f00 	ldrex	r3, [r5]
   1d54a:	1e5a      	subs	r2, r3, #1
   1d54c:	e845 2100 	strex	r1, r2, [r5]
   1d550:	2900      	cmp	r1, #0
   1d552:	d1f8      	bne.n	1d546 <saadc_irq_handler+0x7a>
   1d554:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1d558:	2b01      	cmp	r3, #1
   1d55a:	dcec      	bgt.n	1d536 <saadc_irq_handler+0x6a>
   1d55c:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1d55e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1d562:	b113      	cbz	r3, 1d56a <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   1d564:	4811      	ldr	r0, [pc, #68]	; (1d5ac <saadc_irq_handler+0xe0>)
   1d566:	f00e fd1e 	bl	2bfa6 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
   1d56a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1d56e:	b14b      	cbz	r3, 1d584 <saadc_irq_handler+0xb8>
		if (ctx->signal) {
   1d570:	6f60      	ldr	r0, [r4, #116]	; 0x74
   1d572:	b110      	cbz	r0, 1d57a <saadc_irq_handler+0xae>
	return z_impl_k_poll_signal_raise(sig, result);
   1d574:	2100      	movs	r1, #0
   1d576:	f007 fca9 	bl	24ecc <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
   1d57a:	480d      	ldr	r0, [pc, #52]	; (1d5b0 <saadc_irq_handler+0xe4>)
   1d57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d580:	f005 b876 	b.w	22670 <z_impl_k_sem_give>
   1d584:	480b      	ldr	r0, [pc, #44]	; (1d5b4 <saadc_irq_handler+0xe8>)
   1d586:	e7f9      	b.n	1d57c <saadc_irq_handler+0xb0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d588:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1d58c:	2900      	cmp	r1, #0
   1d58e:	d0e5      	beq.n	1d55c <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d590:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1d594:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d598:	2201      	movs	r2, #1
   1d59a:	609a      	str	r2, [r3, #8]
   1d59c:	601a      	str	r2, [r3, #0]
   1d59e:	605a      	str	r2, [r3, #4]
}
   1d5a0:	e7dc      	b.n	1d55c <saadc_irq_handler+0x90>
   1d5a2:	bf00      	nop
   1d5a4:	40007000 	.word	0x40007000
   1d5a8:	200004b8 	.word	0x200004b8
   1d5ac:	200004c0 	.word	0x200004c0
   1d5b0:	200004f8 	.word	0x200004f8
   1d5b4:	20000510 	.word	0x20000510

0001d5b8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d5b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d5ba:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1d5bc:	490a      	ldr	r1, [pc, #40]	; (1d5e8 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d5be:	4a0b      	ldr	r2, [pc, #44]	; (1d5ec <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1d5c0:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d5c2:	2340      	movs	r3, #64	; 0x40
   1d5c4:	9300      	str	r3, [sp, #0]
   1d5c6:	1149      	asrs	r1, r1, #5
{
   1d5c8:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d5ca:	4623      	mov	r3, r4
   1d5cc:	4808      	ldr	r0, [pc, #32]	; (1d5f0 <onoff_start+0x38>)
   1d5ce:	f00d ff31 	bl	2b434 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1d5d2:	1e01      	subs	r1, r0, #0
   1d5d4:	da05      	bge.n	1d5e2 <onoff_start+0x2a>
		notify(mgr, err);
   1d5d6:	4628      	mov	r0, r5
   1d5d8:	4623      	mov	r3, r4
	}
}
   1d5da:	b003      	add	sp, #12
   1d5dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1d5e0:	4718      	bx	r3
}
   1d5e2:	b003      	add	sp, #12
   1d5e4:	bd30      	pop	{r4, r5, pc}
   1d5e6:	bf00      	nop
   1d5e8:	2000291c 	.word	0x2000291c
   1d5ec:	0002b4a3 	.word	0x0002b4a3
   1d5f0:	0002c310 	.word	0x0002c310

0001d5f4 <get_status>:
{
   1d5f4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d5f6:	b2cc      	uxtb	r4, r1
   1d5f8:	2c01      	cmp	r4, #1
{
   1d5fa:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d5fc:	d908      	bls.n	1d610 <get_status+0x1c>
   1d5fe:	4908      	ldr	r1, [pc, #32]	; (1d620 <get_status+0x2c>)
   1d600:	4808      	ldr	r0, [pc, #32]	; (1d624 <get_status+0x30>)
   1d602:	2279      	movs	r2, #121	; 0x79
   1d604:	f00b f8be 	bl	28784 <assert_print>
   1d608:	4805      	ldr	r0, [pc, #20]	; (1d620 <get_status+0x2c>)
   1d60a:	2179      	movs	r1, #121	; 0x79
   1d60c:	f00b f8b3 	bl	28776 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d610:	6929      	ldr	r1, [r5, #16]
   1d612:	230c      	movs	r3, #12
   1d614:	fb04 1403 	mla	r4, r4, r3, r1
   1d618:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   1d61a:	f000 0007 	and.w	r0, r0, #7
   1d61e:	bd38      	pop	{r3, r4, r5, pc}
   1d620:	0002fb2f 	.word	0x0002fb2f
   1d624:	0002d509 	.word	0x0002d509

0001d628 <stop>:
{
   1d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d62a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d62c:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
   1d62e:	6906      	ldr	r6, [r0, #16]
{
   1d630:	4605      	mov	r5, r0
   1d632:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d634:	d90a      	bls.n	1d64c <stop+0x24>
   1d636:	4918      	ldr	r1, [pc, #96]	; (1d698 <stop+0x70>)
   1d638:	4818      	ldr	r0, [pc, #96]	; (1d69c <stop+0x74>)
   1d63a:	f240 124d 	movw	r2, #333	; 0x14d
   1d63e:	f00b f8a1 	bl	28784 <assert_print>
   1d642:	4815      	ldr	r0, [pc, #84]	; (1d698 <stop+0x70>)
   1d644:	f240 114d 	movw	r1, #333	; 0x14d
   1d648:	f00b f895 	bl	28776 <assert_post_action>
	__asm__ volatile(
   1d64c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d650:	f3ef 8111 	mrs	r1, BASEPRI
   1d654:	f383 8812 	msr	BASEPRI_MAX, r3
   1d658:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d65c:	220c      	movs	r2, #12
   1d65e:	fb02 6304 	mla	r3, r2, r4, r6
   1d662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d664:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1d668:	d001      	beq.n	1d66e <stop+0x46>
   1d66a:	429f      	cmp	r7, r3
   1d66c:	d111      	bne.n	1d692 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d66e:	fb02 6604 	mla	r6, r2, r4, r6
   1d672:	2301      	movs	r3, #1
   1d674:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
   1d676:	2000      	movs	r0, #0
	__asm__ volatile(
   1d678:	f381 8811 	msr	BASEPRI, r1
   1d67c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1d680:	b930      	cbnz	r0, 1d690 <stop+0x68>
	get_sub_config(dev, type)->stop();
   1d682:	6869      	ldr	r1, [r5, #4]
   1d684:	230c      	movs	r3, #12
   1d686:	fb03 1404 	mla	r4, r3, r4, r1
   1d68a:	6863      	ldr	r3, [r4, #4]
   1d68c:	4798      	blx	r3
	return 0;
   1d68e:	2000      	movs	r0, #0
}
   1d690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   1d692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d696:	e7ef      	b.n	1d678 <stop+0x50>
   1d698:	0002fb2f 	.word	0x0002fb2f
   1d69c:	0002d509 	.word	0x0002d509

0001d6a0 <onoff_stop>:
{
   1d6a0:	b570      	push	{r4, r5, r6, lr}
   1d6a2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1d6a4:	4906      	ldr	r1, [pc, #24]	; (1d6c0 <onoff_stop+0x20>)
   1d6a6:	1a41      	subs	r1, r0, r1
{
   1d6a8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d6aa:	1149      	asrs	r1, r1, #5
   1d6ac:	4805      	ldr	r0, [pc, #20]	; (1d6c4 <onoff_stop+0x24>)
   1d6ae:	2240      	movs	r2, #64	; 0x40
   1d6b0:	f7ff ffba 	bl	1d628 <stop>
	notify(mgr, res);
   1d6b4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d6b6:	4601      	mov	r1, r0
	notify(mgr, res);
   1d6b8:	4620      	mov	r0, r4
}
   1d6ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1d6be:	4718      	bx	r3
   1d6c0:	2000291c 	.word	0x2000291c
   1d6c4:	0002c310 	.word	0x0002c310

0001d6c8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d6c8:	2200      	movs	r2, #0
{
   1d6ca:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d6cc:	2101      	movs	r1, #1
{
   1d6ce:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d6d0:	4610      	mov	r0, r2
   1d6d2:	f7f7 f803 	bl	146dc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d6d6:	480f      	ldr	r0, [pc, #60]	; (1d714 <clk_init+0x4c>)
   1d6d8:	f002 fdbe 	bl	20258 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d6dc:	4b0e      	ldr	r3, [pc, #56]	; (1d718 <clk_init+0x50>)
   1d6de:	4298      	cmp	r0, r3
   1d6e0:	d115      	bne.n	1d70e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d6e2:	f00e fa26 	bl	2bb32 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1d6e6:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d6e8:	490c      	ldr	r1, [pc, #48]	; (1d71c <clk_init+0x54>)
   1d6ea:	4630      	mov	r0, r6
   1d6ec:	f00a fefa 	bl	284e4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1d6f0:	2800      	cmp	r0, #0
   1d6f2:	db0b      	blt.n	1d70c <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   1d6f4:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d6f6:	4909      	ldr	r1, [pc, #36]	; (1d71c <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d6f8:	2501      	movs	r5, #1
   1d6fa:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d6fc:	f104 0020 	add.w	r0, r4, #32
   1d700:	f00a fef0 	bl	284e4 <onoff_manager_init>
		if (err < 0) {
   1d704:	2800      	cmp	r0, #0
   1d706:	db01      	blt.n	1d70c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d708:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1d70a:	2000      	movs	r0, #0
}
   1d70c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d70e:	f06f 0004 	mvn.w	r0, #4
   1d712:	e7fb      	b.n	1d70c <clk_init+0x44>
   1d714:	0001d755 	.word	0x0001d755
   1d718:	0bad0000 	.word	0x0bad0000
   1d71c:	0002cda4 	.word	0x0002cda4

0001d720 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1d720:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1d722:	230c      	movs	r3, #12
   1d724:	4809      	ldr	r0, [pc, #36]	; (1d74c <clkstarted_handle.constprop.0+0x2c>)
   1d726:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1d728:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1d72a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1d72c:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1d730:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1d732:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1d734:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1d736:	4418      	add	r0, r3
   1d738:	f00d fe69 	bl	2b40e <set_on_state>
	if (callback) {
   1d73c:	b12d      	cbz	r5, 1d74a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d73e:	4632      	mov	r2, r6
   1d740:	462b      	mov	r3, r5
   1d742:	4803      	ldr	r0, [pc, #12]	; (1d750 <clkstarted_handle.constprop.0+0x30>)
}
   1d744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d748:	4718      	bx	r3
}
   1d74a:	bd70      	pop	{r4, r5, r6, pc}
   1d74c:	2000291c 	.word	0x2000291c
   1d750:	0002c310 	.word	0x0002c310

0001d754 <clock_event_handler>:
	switch (event) {
   1d754:	2801      	cmp	r0, #1
{
   1d756:	b508      	push	{r3, lr}
	switch (event) {
   1d758:	d006      	beq.n	1d768 <clock_event_handler+0x14>
   1d75a:	2803      	cmp	r0, #3
   1d75c:	d008      	beq.n	1d770 <clock_event_handler+0x1c>
   1d75e:	b9a0      	cbnz	r0, 1d78a <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d760:	4b0f      	ldr	r3, [pc, #60]	; (1d7a0 <clock_event_handler+0x4c>)
   1d762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d764:	075b      	lsls	r3, r3, #29
   1d766:	d119      	bne.n	1d79c <clock_event_handler+0x48>
}
   1d768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d76c:	f7ff bfd8 	b.w	1d720 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1d770:	490c      	ldr	r1, [pc, #48]	; (1d7a4 <clock_event_handler+0x50>)
   1d772:	480d      	ldr	r0, [pc, #52]	; (1d7a8 <clock_event_handler+0x54>)
   1d774:	f240 225e 	movw	r2, #606	; 0x25e
   1d778:	f00b f804 	bl	28784 <assert_print>
   1d77c:	f240 215e 	movw	r1, #606	; 0x25e
}
   1d780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1d784:	4807      	ldr	r0, [pc, #28]	; (1d7a4 <clock_event_handler+0x50>)
   1d786:	f00a bff6 	b.w	28776 <assert_post_action>
   1d78a:	4906      	ldr	r1, [pc, #24]	; (1d7a4 <clock_event_handler+0x50>)
   1d78c:	4806      	ldr	r0, [pc, #24]	; (1d7a8 <clock_event_handler+0x54>)
   1d78e:	f240 2262 	movw	r2, #610	; 0x262
   1d792:	f00a fff7 	bl	28784 <assert_print>
   1d796:	f240 2162 	movw	r1, #610	; 0x262
   1d79a:	e7f1      	b.n	1d780 <clock_event_handler+0x2c>
}
   1d79c:	bd08      	pop	{r3, pc}
   1d79e:	bf00      	nop
   1d7a0:	2000291c 	.word	0x2000291c
   1d7a4:	0002fb2f 	.word	0x0002fb2f
   1d7a8:	0002d509 	.word	0x0002d509

0001d7ac <generic_hfclk_start>:
{
   1d7ac:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d7ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d7b2:	f3ef 8111 	mrs	r1, BASEPRI
   1d7b6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d7ba:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d7be:	4a12      	ldr	r2, [pc, #72]	; (1d808 <generic_hfclk_start+0x5c>)
   1d7c0:	6813      	ldr	r3, [r2, #0]
   1d7c2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1d7c6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1d7ca:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d7cc:	d00c      	beq.n	1d7e8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d7ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d7d2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d7d6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d7da:	f013 0301 	ands.w	r3, r3, #1
   1d7de:	d003      	beq.n	1d7e8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1d7e0:	480a      	ldr	r0, [pc, #40]	; (1d80c <generic_hfclk_start+0x60>)
   1d7e2:	f00d fe14 	bl	2b40e <set_on_state>
			already_started = true;
   1d7e6:	2301      	movs	r3, #1
	__asm__ volatile(
   1d7e8:	f381 8811 	msr	BASEPRI, r1
   1d7ec:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1d7f0:	b123      	cbz	r3, 1d7fc <generic_hfclk_start+0x50>
}
   1d7f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1d7f6:	2000      	movs	r0, #0
   1d7f8:	f7ff bf92 	b.w	1d720 <clkstarted_handle.constprop.0>
}
   1d7fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1d800:	2001      	movs	r0, #1
   1d802:	f002 bcef 	b.w	201e4 <nrfx_clock_start>
   1d806:	bf00      	nop
   1d808:	20002974 	.word	0x20002974
   1d80c:	20002964 	.word	0x20002964

0001d810 <api_blocking_start>:
{
   1d810:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d812:	2200      	movs	r2, #0
   1d814:	2301      	movs	r3, #1
   1d816:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d81a:	ab04      	add	r3, sp, #16
   1d81c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d820:	4a09      	ldr	r2, [pc, #36]	; (1d848 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d822:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d826:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d828:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d82c:	f00d fe32 	bl	2b494 <api_start>
	if (err < 0) {
   1d830:	2800      	cmp	r0, #0
   1d832:	db05      	blt.n	1d840 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1d834:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d838:	2300      	movs	r3, #0
   1d83a:	4668      	mov	r0, sp
   1d83c:	f004 ff52 	bl	226e4 <z_impl_k_sem_take>
}
   1d840:	b007      	add	sp, #28
   1d842:	f85d fb04 	ldr.w	pc, [sp], #4
   1d846:	bf00      	nop
   1d848:	0002b4c1 	.word	0x0002b4c1

0001d84c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d84c:	4b09      	ldr	r3, [pc, #36]	; (1d874 <generic_hfclk_stop+0x28>)
   1d84e:	f3bf 8f5b 	dmb	ish
   1d852:	e853 2f00 	ldrex	r2, [r3]
   1d856:	f022 0102 	bic.w	r1, r2, #2
   1d85a:	e843 1000 	strex	r0, r1, [r3]
   1d85e:	2800      	cmp	r0, #0
   1d860:	d1f7      	bne.n	1d852 <generic_hfclk_stop+0x6>
   1d862:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1d866:	07d3      	lsls	r3, r2, #31
   1d868:	d402      	bmi.n	1d870 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1d86a:	2001      	movs	r0, #1
   1d86c:	f002 bcdc 	b.w	20228 <nrfx_clock_stop>
}
   1d870:	4770      	bx	lr
   1d872:	bf00      	nop
   1d874:	20002974 	.word	0x20002974

0001d878 <z_nrf_clock_control_lf_on>:
{
   1d878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d87c:	4946      	ldr	r1, [pc, #280]	; (1d998 <z_nrf_clock_control_lf_on+0x120>)
   1d87e:	f3bf 8f5b 	dmb	ish
   1d882:	4606      	mov	r6, r0
   1d884:	2201      	movs	r2, #1
   1d886:	e851 3f00 	ldrex	r3, [r1]
   1d88a:	e841 2000 	strex	r0, r2, [r1]
   1d88e:	2800      	cmp	r0, #0
   1d890:	d1f9      	bne.n	1d886 <z_nrf_clock_control_lf_on+0xe>
   1d892:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1d896:	b99b      	cbnz	r3, 1d8c0 <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d898:	4940      	ldr	r1, [pc, #256]	; (1d99c <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   1d89a:	4841      	ldr	r0, [pc, #260]	; (1d9a0 <z_nrf_clock_control_lf_on+0x128>)
   1d89c:	604b      	str	r3, [r1, #4]
   1d89e:	60cb      	str	r3, [r1, #12]
   1d8a0:	608a      	str	r2, [r1, #8]
   1d8a2:	f7f5 f861 	bl	12968 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1d8a6:	2800      	cmp	r0, #0
   1d8a8:	da0a      	bge.n	1d8c0 <z_nrf_clock_control_lf_on+0x48>
   1d8aa:	493e      	ldr	r1, [pc, #248]	; (1d9a4 <z_nrf_clock_control_lf_on+0x12c>)
   1d8ac:	483e      	ldr	r0, [pc, #248]	; (1d9a8 <z_nrf_clock_control_lf_on+0x130>)
   1d8ae:	f44f 7208 	mov.w	r2, #544	; 0x220
   1d8b2:	f00a ff67 	bl	28784 <assert_print>
   1d8b6:	483b      	ldr	r0, [pc, #236]	; (1d9a4 <z_nrf_clock_control_lf_on+0x12c>)
   1d8b8:	f44f 7108 	mov.w	r1, #544	; 0x220
   1d8bc:	f00a ff5b 	bl	28776 <assert_post_action>
	switch (start_mode) {
   1d8c0:	b396      	cbz	r6, 1d928 <z_nrf_clock_control_lf_on+0xb0>
   1d8c2:	1e73      	subs	r3, r6, #1
   1d8c4:	2b01      	cmp	r3, #1
   1d8c6:	d853      	bhi.n	1d970 <z_nrf_clock_control_lf_on+0xf8>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1d8c8:	2e01      	cmp	r6, #1
   1d8ca:	d107      	bne.n	1d8dc <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d8cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d8d0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1d8d4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1d8d8:	2b01      	cmp	r3, #1
   1d8da:	d025      	beq.n	1d928 <z_nrf_clock_control_lf_on+0xb0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d8dc:	f00e fa34 	bl	2bd48 <k_is_in_isr>
   1d8e0:	4604      	mov	r4, r0
   1d8e2:	b918      	cbnz	r0, 1d8ec <z_nrf_clock_control_lf_on+0x74>
	return !z_sys_post_kernel;
   1d8e4:	4b31      	ldr	r3, [pc, #196]	; (1d9ac <z_nrf_clock_control_lf_on+0x134>)
	int key = isr_mode ? irq_lock() : 0;
   1d8e6:	781b      	ldrb	r3, [r3, #0]
   1d8e8:	2b00      	cmp	r3, #0
   1d8ea:	d14e      	bne.n	1d98a <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   1d8ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d8f0:	f3ef 8711 	mrs	r7, BASEPRI
   1d8f4:	f383 8812 	msr	BASEPRI_MAX, r3
   1d8f8:	f3bf 8f6f 	isb	sy
   1d8fc:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d8fe:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1d9b0 <z_nrf_clock_control_lf_on+0x138>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d902:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1d906:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d90a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1d90e:	03d2      	lsls	r2, r2, #15
   1d910:	d50c      	bpl.n	1d92c <z_nrf_clock_control_lf_on+0xb4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1d912:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d916:	2b01      	cmp	r3, #1
   1d918:	d001      	beq.n	1d91e <z_nrf_clock_control_lf_on+0xa6>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d91a:	2e01      	cmp	r6, #1
   1d91c:	d106      	bne.n	1d92c <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1d91e:	b30c      	cbz	r4, 1d964 <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
   1d920:	f387 8811 	msr	BASEPRI, r7
   1d924:	f3bf 8f6f 	isb	sy
}
   1d928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d92c:	b1ac      	cbz	r4, 1d95a <z_nrf_clock_control_lf_on+0xe2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d92e:	4638      	mov	r0, r7
   1d930:	f7f6 fe6a 	bl	14608 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1d934:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1d938:	2b00      	cmp	r3, #0
   1d93a:	d1e4      	bne.n	1d906 <z_nrf_clock_control_lf_on+0x8e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d93c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1d940:	2a00      	cmp	r2, #0
   1d942:	d0e0      	beq.n	1d906 <z_nrf_clock_control_lf_on+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d944:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1d948:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d94c:	2301      	movs	r3, #1
   1d94e:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1d952:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d956:	60ab      	str	r3, [r5, #8]
}
   1d958:	e7d5      	b.n	1d906 <z_nrf_clock_control_lf_on+0x8e>
	return z_impl_k_sleep(timeout);
   1d95a:	2100      	movs	r1, #0
   1d95c:	2021      	movs	r0, #33	; 0x21
   1d95e:	f006 fb2f 	bl	23fc0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d962:	e7e7      	b.n	1d934 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1d964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d968:	2202      	movs	r2, #2
   1d96a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d96e:	e7db      	b.n	1d928 <z_nrf_clock_control_lf_on+0xb0>
		__ASSERT_NO_MSG(false);
   1d970:	490c      	ldr	r1, [pc, #48]	; (1d9a4 <z_nrf_clock_control_lf_on+0x12c>)
   1d972:	480d      	ldr	r0, [pc, #52]	; (1d9a8 <z_nrf_clock_control_lf_on+0x130>)
   1d974:	f240 2232 	movw	r2, #562	; 0x232
   1d978:	f00a ff04 	bl	28784 <assert_print>
}
   1d97c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   1d980:	4808      	ldr	r0, [pc, #32]	; (1d9a4 <z_nrf_clock_control_lf_on+0x12c>)
   1d982:	f240 2132 	movw	r1, #562	; 0x232
   1d986:	f00a bef6 	b.w	28776 <assert_post_action>
    p_reg->INTENCLR = mask;
   1d98a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d98e:	2202      	movs	r2, #2
   1d990:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1d994:	4607      	mov	r7, r0
}
   1d996:	e7b2      	b.n	1d8fe <z_nrf_clock_control_lf_on+0x86>
   1d998:	20002978 	.word	0x20002978
   1d99c:	2000290c 	.word	0x2000290c
   1d9a0:	2000293c 	.word	0x2000293c
   1d9a4:	0002fb2f 	.word	0x0002fb2f
   1d9a8:	0002d509 	.word	0x0002d509
   1d9ac:	200043f3 	.word	0x200043f3
   1d9b0:	e000e100 	.word	0xe000e100

0001d9b4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1d9b4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1d9b6:	4b08      	ldr	r3, [pc, #32]	; (1d9d8 <uart_console_init+0x24>)
   1d9b8:	4808      	ldr	r0, [pc, #32]	; (1d9dc <uart_console_init+0x28>)
   1d9ba:	6018      	str	r0, [r3, #0]
   1d9bc:	f00e f992 	bl	2bce4 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1d9c0:	b138      	cbz	r0, 1d9d2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1d9c2:	4807      	ldr	r0, [pc, #28]	; (1d9e0 <uart_console_init+0x2c>)
   1d9c4:	f7f7 fba6 	bl	15114 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1d9c8:	4805      	ldr	r0, [pc, #20]	; (1d9e0 <uart_console_init+0x2c>)
   1d9ca:	f7f4 fdc3 	bl	12554 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1d9ce:	2000      	movs	r0, #0
}
   1d9d0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1d9d2:	f06f 0012 	mvn.w	r0, #18
   1d9d6:	e7fb      	b.n	1d9d0 <uart_console_init+0x1c>
   1d9d8:	2000297c 	.word	0x2000297c
   1d9dc:	0002c3b8 	.word	0x0002c3b8
   1d9e0:	0001d9e5 	.word	0x0001d9e5

0001d9e4 <console_out>:
	if ('\n' == c) {
   1d9e4:	280a      	cmp	r0, #10
{
   1d9e6:	b538      	push	{r3, r4, r5, lr}
   1d9e8:	4d07      	ldr	r5, [pc, #28]	; (1da08 <console_out+0x24>)
   1d9ea:	4604      	mov	r4, r0
	if ('\n' == c) {
   1d9ec:	d104      	bne.n	1d9f8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1d9ee:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1d9f0:	6883      	ldr	r3, [r0, #8]
   1d9f2:	210d      	movs	r1, #13
   1d9f4:	685b      	ldr	r3, [r3, #4]
   1d9f6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1d9f8:	6828      	ldr	r0, [r5, #0]
   1d9fa:	6883      	ldr	r3, [r0, #8]
   1d9fc:	b2e1      	uxtb	r1, r4
   1d9fe:	685b      	ldr	r3, [r3, #4]
   1da00:	4798      	blx	r3
}
   1da02:	4620      	mov	r0, r4
   1da04:	bd38      	pop	{r3, r4, r5, pc}
   1da06:	bf00      	nop
   1da08:	2000297c 	.word	0x2000297c

0001da0c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1da0c:	b570      	push	{r4, r5, r6, lr}
	return port->data;
   1da0e:	6905      	ldr	r5, [r0, #16]
{
   1da10:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1da12:	460c      	mov	r4, r1
   1da14:	b941      	cbnz	r1, 1da28 <gpio_nrfx_manage_callback+0x1c>
   1da16:	491e      	ldr	r1, [pc, #120]	; (1da90 <gpio_nrfx_manage_callback+0x84>)
   1da18:	481e      	ldr	r0, [pc, #120]	; (1da94 <gpio_nrfx_manage_callback+0x88>)
   1da1a:	2224      	movs	r2, #36	; 0x24
   1da1c:	f00a feb2 	bl	28784 <assert_print>
   1da20:	481b      	ldr	r0, [pc, #108]	; (1da90 <gpio_nrfx_manage_callback+0x84>)
   1da22:	2124      	movs	r1, #36	; 0x24
   1da24:	f00a fea7 	bl	28776 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1da28:	6863      	ldr	r3, [r4, #4]
   1da2a:	b943      	cbnz	r3, 1da3e <gpio_nrfx_manage_callback+0x32>
   1da2c:	4918      	ldr	r1, [pc, #96]	; (1da90 <gpio_nrfx_manage_callback+0x84>)
   1da2e:	4819      	ldr	r0, [pc, #100]	; (1da94 <gpio_nrfx_manage_callback+0x88>)
   1da30:	2225      	movs	r2, #37	; 0x25
   1da32:	f00a fea7 	bl	28784 <assert_print>
   1da36:	4816      	ldr	r0, [pc, #88]	; (1da90 <gpio_nrfx_manage_callback+0x84>)
   1da38:	2125      	movs	r1, #37	; 0x25
   1da3a:	f00a fe9c 	bl	28776 <assert_post_action>
	return list->head;
   1da3e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1da40:	b15b      	cbz	r3, 1da5a <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1da42:	2200      	movs	r2, #0
   1da44:	429c      	cmp	r4, r3
   1da46:	d112      	bne.n	1da6e <gpio_nrfx_manage_callback+0x62>
	return node->next;
   1da48:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1da4a:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   1da4c:	b952      	cbnz	r2, 1da64 <gpio_nrfx_manage_callback+0x58>
   1da4e:	42a1      	cmp	r1, r4
	list->head = node;
   1da50:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1da52:	d100      	bne.n	1da56 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1da54:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1da56:	2300      	movs	r3, #0
   1da58:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1da5a:	b96e      	cbnz	r6, 1da78 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1da5c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   1da5e:	bd70      	pop	{r4, r5, r6, pc}
   1da60:	460b      	mov	r3, r1
   1da62:	e7ef      	b.n	1da44 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   1da64:	42a1      	cmp	r1, r4
	parent->next = child;
   1da66:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1da68:	bf08      	it	eq
   1da6a:	60aa      	streq	r2, [r5, #8]
}
   1da6c:	e7f3      	b.n	1da56 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   1da6e:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1da70:	461a      	mov	r2, r3
   1da72:	2900      	cmp	r1, #0
   1da74:	d1f4      	bne.n	1da60 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1da76:	b13e      	cbz	r6, 1da88 <gpio_nrfx_manage_callback+0x7c>
Z_GENLIST_PREPEND(slist, snode)
   1da78:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   1da7a:	686b      	ldr	r3, [r5, #4]
   1da7c:	6023      	str	r3, [r4, #0]
	list->head = node;
   1da7e:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1da80:	2800      	cmp	r0, #0
   1da82:	d1eb      	bne.n	1da5c <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1da84:	60ac      	str	r4, [r5, #8]
}
   1da86:	e7ea      	b.n	1da5e <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   1da88:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1da8c:	e7e7      	b.n	1da5e <gpio_nrfx_manage_callback+0x52>
   1da8e:	bf00      	nop
   1da90:	0002fb95 	.word	0x0002fb95
   1da94:	0002d509 	.word	0x0002d509

0001da98 <gpio_nrfx_pin_interrupt_configure>:
{
   1da98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
   1da9a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1da9c:	7b05      	ldrb	r5, [r0, #12]
   1da9e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1daa2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1daa6:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1daaa:	f04f 0500 	mov.w	r5, #0
   1daae:	d105      	bne.n	1dabc <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   1dab0:	4620      	mov	r0, r4
   1dab2:	f003 f933 	bl	20d1c <nrfx_gpiote_trigger_disable>
	return 0;
   1dab6:	2000      	movs	r0, #0
}
   1dab8:	b004      	add	sp, #16
   1daba:	bd70      	pop	{r4, r5, r6, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
   1dabc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1dac0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1dac4:	d154      	bne.n	1db70 <gpio_nrfx_pin_interrupt_configure+0xd8>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1dac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1daca:	bf0c      	ite	eq
   1dacc:	2304      	moveq	r3, #4
   1dace:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1dad0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1dad4:	6883      	ldr	r3, [r0, #8]
   1dad6:	fa23 f101 	lsr.w	r1, r3, r1
   1dada:	f011 0101 	ands.w	r1, r1, #1
   1dade:	d139      	bne.n	1db54 <gpio_nrfx_pin_interrupt_configure+0xbc>
   1dae0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1dae4:	d136      	bne.n	1db54 <gpio_nrfx_pin_interrupt_configure+0xbc>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1dae6:	0966      	lsrs	r6, r4, #5
   1dae8:	d04d      	beq.n	1db86 <gpio_nrfx_pin_interrupt_configure+0xee>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
   1daea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1daee:	2e01      	cmp	r6, #1
   1daf0:	bf08      	it	eq
   1daf2:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
   1daf4:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1daf8:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1dafa:	07ca      	lsls	r2, r1, #31
   1dafc:	d40a      	bmi.n	1db14 <gpio_nrfx_pin_interrupt_configure+0x7c>
   1dafe:	492a      	ldr	r1, [pc, #168]	; (1dba8 <gpio_nrfx_pin_interrupt_configure+0x110>)
   1db00:	482a      	ldr	r0, [pc, #168]	; (1dbac <gpio_nrfx_pin_interrupt_configure+0x114>)
   1db02:	f240 2247 	movw	r2, #583	; 0x247
   1db06:	f00a fe3d 	bl	28784 <assert_print>
   1db0a:	4827      	ldr	r0, [pc, #156]	; (1dba8 <gpio_nrfx_pin_interrupt_configure+0x110>)
   1db0c:	f240 2147 	movw	r1, #583	; 0x247
   1db10:	f00a fe31 	bl	28776 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1db14:	b166      	cbz	r6, 1db30 <gpio_nrfx_pin_interrupt_configure+0x98>
   1db16:	2e01      	cmp	r6, #1
   1db18:	d038      	beq.n	1db8c <gpio_nrfx_pin_interrupt_configure+0xf4>
            NRFX_ASSERT(0);
   1db1a:	4923      	ldr	r1, [pc, #140]	; (1dba8 <gpio_nrfx_pin_interrupt_configure+0x110>)
   1db1c:	4823      	ldr	r0, [pc, #140]	; (1dbac <gpio_nrfx_pin_interrupt_configure+0x114>)
   1db1e:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1db22:	f00a fe2f 	bl	28784 <assert_print>
   1db26:	4820      	ldr	r0, [pc, #128]	; (1dba8 <gpio_nrfx_pin_interrupt_configure+0x110>)
   1db28:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1db2c:	f00a fe23 	bl	28776 <assert_post_action>
        case 0: return NRF_P0;
   1db30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1db34:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1db38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1db3c:	07db      	lsls	r3, r3, #31
   1db3e:	d409      	bmi.n	1db54 <gpio_nrfx_pin_interrupt_configure+0xbc>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1db40:	f10d 0507 	add.w	r5, sp, #7
   1db44:	4629      	mov	r1, r5
   1db46:	4620      	mov	r0, r4
   1db48:	f003 f814 	bl	20b74 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1db4c:	4b18      	ldr	r3, [pc, #96]	; (1dbb0 <gpio_nrfx_pin_interrupt_configure+0x118>)
   1db4e:	4298      	cmp	r0, r3
   1db50:	d01e      	beq.n	1db90 <gpio_nrfx_pin_interrupt_configure+0xf8>
		trigger_config.p_in_channel = &ch;
   1db52:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1db54:	2300      	movs	r3, #0
   1db56:	4619      	mov	r1, r3
   1db58:	aa02      	add	r2, sp, #8
   1db5a:	4620      	mov	r0, r4
   1db5c:	f002 fee2 	bl	20924 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1db60:	4b14      	ldr	r3, [pc, #80]	; (1dbb4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1db62:	4298      	cmp	r0, r3
   1db64:	d11d      	bne.n	1dba2 <gpio_nrfx_pin_interrupt_configure+0x10a>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1db66:	2101      	movs	r1, #1
   1db68:	4620      	mov	r0, r4
   1db6a:	f003 f869 	bl	20c40 <nrfx_gpiote_trigger_enable>
   1db6e:	e7a2      	b.n	1dab6 <gpio_nrfx_pin_interrupt_configure+0x1e>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1db70:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1db74:	d005      	beq.n	1db82 <gpio_nrfx_pin_interrupt_configure+0xea>
   1db76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1db7a:	bf0c      	ite	eq
   1db7c:	2302      	moveq	r3, #2
   1db7e:	2301      	movne	r3, #1
   1db80:	e7a6      	b.n	1dad0 <gpio_nrfx_pin_interrupt_configure+0x38>
   1db82:	2303      	movs	r3, #3
   1db84:	e7a4      	b.n	1dad0 <gpio_nrfx_pin_interrupt_configure+0x38>
            mask = P0_FEATURE_PINS_PRESENT;
   1db86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1db8a:	e7b3      	b.n	1daf4 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1db8c:	4b0a      	ldr	r3, [pc, #40]	; (1dbb8 <gpio_nrfx_pin_interrupt_configure+0x120>)
   1db8e:	e7d1      	b.n	1db34 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1db90:	4628      	mov	r0, r5
   1db92:	f003 f84f 	bl	20c34 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1db96:	4b07      	ldr	r3, [pc, #28]	; (1dbb4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1db98:	4298      	cmp	r0, r3
   1db9a:	d0da      	beq.n	1db52 <gpio_nrfx_pin_interrupt_configure+0xba>
				return -ENOMEM;
   1db9c:	f06f 000b 	mvn.w	r0, #11
   1dba0:	e78a      	b.n	1dab8 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EINVAL;
   1dba2:	f06f 0015 	mvn.w	r0, #21
   1dba6:	e787      	b.n	1dab8 <gpio_nrfx_pin_interrupt_configure+0x20>
   1dba8:	0002fbc2 	.word	0x0002fbc2
   1dbac:	0002d509 	.word	0x0002d509
   1dbb0:	0bad0004 	.word	0x0bad0004
   1dbb4:	0bad0000 	.word	0x0bad0000
   1dbb8:	50000300 	.word	0x50000300

0001dbbc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1dbbc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1dbbe:	f003 f829 	bl	20c14 <nrfx_gpiote_is_init>
   1dbc2:	4604      	mov	r4, r0
   1dbc4:	b968      	cbnz	r0, 1dbe2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1dbc6:	f002 fffd 	bl	20bc4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1dbca:	4b08      	ldr	r3, [pc, #32]	; (1dbec <gpio_nrfx_init+0x30>)
   1dbcc:	4298      	cmp	r0, r3
   1dbce:	d10a      	bne.n	1dbe6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1dbd0:	4807      	ldr	r0, [pc, #28]	; (1dbf0 <gpio_nrfx_init+0x34>)
   1dbd2:	4621      	mov	r1, r4
   1dbd4:	f002 ffc8 	bl	20b68 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1dbd8:	4622      	mov	r2, r4
   1dbda:	2105      	movs	r1, #5
   1dbdc:	2006      	movs	r0, #6
   1dbde:	f7f6 fd7d 	bl	146dc <z_arm_irq_priority_set>
		return 0;
   1dbe2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1dbe4:	bd10      	pop	{r4, pc}
		return -EIO;
   1dbe6:	f06f 0004 	mvn.w	r0, #4
   1dbea:	e7fb      	b.n	1dbe4 <gpio_nrfx_init+0x28>
   1dbec:	0bad0000 	.word	0x0bad0000
   1dbf0:	0001dbf5 	.word	0x0001dbf5

0001dbf4 <nrfx_gpio_handler>:
{
   1dbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dbf8:	0943      	lsrs	r3, r0, #5
   1dbfa:	d003      	beq.n	1dc04 <nrfx_gpio_handler+0x10>
   1dbfc:	2b01      	cmp	r3, #1
   1dbfe:	d028      	beq.n	1dc52 <nrfx_gpio_handler+0x5e>
}
   1dc00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dc04:	4f14      	ldr	r7, [pc, #80]	; (1dc58 <nrfx_gpio_handler+0x64>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1dc06:	693b      	ldr	r3, [r7, #16]
   1dc08:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1dc0a:	2c00      	cmp	r4, #0
   1dc0c:	d0f8      	beq.n	1dc00 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1dc0e:	f000 001f 	and.w	r0, r0, #31
   1dc12:	2601      	movs	r6, #1
	return node->next;
   1dc14:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   1dc16:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1dc5c <nrfx_gpio_handler+0x68>
   1dc1a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1dc60 <nrfx_gpio_handler+0x6c>
   1dc1e:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   1dc20:	68a3      	ldr	r3, [r4, #8]
   1dc22:	421e      	tst	r6, r3
   1dc24:	d010      	beq.n	1dc48 <nrfx_gpio_handler+0x54>
			__ASSERT(cb->handler, "No callback handler!");
   1dc26:	6863      	ldr	r3, [r4, #4]
   1dc28:	b943      	cbnz	r3, 1dc3c <nrfx_gpio_handler+0x48>
   1dc2a:	4641      	mov	r1, r8
   1dc2c:	4648      	mov	r0, r9
   1dc2e:	2245      	movs	r2, #69	; 0x45
   1dc30:	f00a fda8 	bl	28784 <assert_print>
   1dc34:	2145      	movs	r1, #69	; 0x45
   1dc36:	4640      	mov	r0, r8
   1dc38:	f00a fd9d 	bl	28776 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1dc3c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1dc40:	4621      	mov	r1, r4
   1dc42:	4032      	ands	r2, r6
   1dc44:	4638      	mov	r0, r7
   1dc46:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1dc48:	2d00      	cmp	r5, #0
   1dc4a:	d0d9      	beq.n	1dc00 <nrfx_gpio_handler+0xc>
   1dc4c:	462c      	mov	r4, r5
   1dc4e:	682d      	ldr	r5, [r5, #0]
   1dc50:	e7e6      	b.n	1dc20 <nrfx_gpio_handler+0x2c>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dc52:	4f04      	ldr	r7, [pc, #16]	; (1dc64 <nrfx_gpio_handler+0x70>)
   1dc54:	e7d7      	b.n	1dc06 <nrfx_gpio_handler+0x12>
   1dc56:	bf00      	nop
   1dc58:	0002c328 	.word	0x0002c328
   1dc5c:	0002fb95 	.word	0x0002fb95
   1dc60:	0002d509 	.word	0x0002d509
   1dc64:	0002c340 	.word	0x0002c340

0001dc68 <gpio_nrfx_pin_configure>:
{
   1dc68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1dc6c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1dc70:	f899 300c 	ldrb.w	r3, [r9, #12]
   1dc74:	f001 061f 	and.w	r6, r1, #31
{
   1dc78:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1dc7a:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
   1dc7e:	4688      	mov	r8, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1dc80:	4630      	mov	r0, r6
   1dc82:	f10d 0103 	add.w	r1, sp, #3
{
   1dc86:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1dc88:	f002 ff74 	bl	20b74 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1dc8c:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1dc90:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1dc92:	d116      	bne.n	1dcc2 <gpio_nrfx_pin_configure+0x5a>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1dc94:	4630      	mov	r0, r6
   1dc96:	f003 f86b 	bl	20d70 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1dc9a:	4b4e      	ldr	r3, [pc, #312]	; (1ddd4 <gpio_nrfx_pin_configure+0x16c>)
   1dc9c:	429f      	cmp	r7, r3
   1dc9e:	d10e      	bne.n	1dcbe <gpio_nrfx_pin_configure+0x56>
			err = nrfx_gpiote_channel_free(ch);
   1dca0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1dca4:	f002 ffc0 	bl	20c28 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1dca8:	42b8      	cmp	r0, r7
   1dcaa:	d008      	beq.n	1dcbe <gpio_nrfx_pin_configure+0x56>
   1dcac:	494a      	ldr	r1, [pc, #296]	; (1ddd8 <gpio_nrfx_pin_configure+0x170>)
   1dcae:	484b      	ldr	r0, [pc, #300]	; (1dddc <gpio_nrfx_pin_configure+0x174>)
   1dcb0:	2268      	movs	r2, #104	; 0x68
   1dcb2:	f00a fd67 	bl	28784 <assert_print>
   1dcb6:	4848      	ldr	r0, [pc, #288]	; (1ddd8 <gpio_nrfx_pin_configure+0x170>)
   1dcb8:	2168      	movs	r1, #104	; 0x68
   1dcba:	f00a fd5c 	bl	28776 <assert_post_action>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1dcbe:	2000      	movs	r0, #0
   1dcc0:	e062      	b.n	1dd88 <gpio_nrfx_pin_configure+0x120>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1dcc2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1dcc4:	4619      	mov	r1, r3
   1dcc6:	aa02      	add	r2, sp, #8
   1dcc8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1dcca:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1dcce:	f002 fe29 	bl	20924 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1dcd2:	4b40      	ldr	r3, [pc, #256]	; (1ddd4 <gpio_nrfx_pin_configure+0x16c>)
   1dcd4:	4298      	cmp	r0, r3
   1dcd6:	d002      	beq.n	1dcde <gpio_nrfx_pin_configure+0x76>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1dcd8:	f06f 0015 	mvn.w	r0, #21
   1dcdc:	e054      	b.n	1dd88 <gpio_nrfx_pin_configure+0x120>
	if (free_ch) {
   1dcde:	4287      	cmp	r7, r0
   1dce0:	d10e      	bne.n	1dd00 <gpio_nrfx_pin_configure+0x98>
		err = nrfx_gpiote_channel_free(ch);
   1dce2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1dce6:	f002 ff9f 	bl	20c28 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1dcea:	42b8      	cmp	r0, r7
   1dcec:	d008      	beq.n	1dd00 <gpio_nrfx_pin_configure+0x98>
   1dcee:	493a      	ldr	r1, [pc, #232]	; (1ddd8 <gpio_nrfx_pin_configure+0x170>)
   1dcf0:	483a      	ldr	r0, [pc, #232]	; (1dddc <gpio_nrfx_pin_configure+0x174>)
   1dcf2:	227a      	movs	r2, #122	; 0x7a
   1dcf4:	f00a fd46 	bl	28784 <assert_print>
   1dcf8:	4837      	ldr	r0, [pc, #220]	; (1ddd8 <gpio_nrfx_pin_configure+0x170>)
   1dcfa:	217a      	movs	r1, #122	; 0x7a
   1dcfc:	f00a fd3b 	bl	28776 <assert_post_action>
	if (flags & GPIO_OUTPUT) {
   1dd00:	03a5      	lsls	r5, r4, #14
   1dd02:	d554      	bpl.n	1ddae <gpio_nrfx_pin_configure+0x146>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1dd04:	f240 3306 	movw	r3, #774	; 0x306
   1dd08:	4023      	ands	r3, r4
   1dd0a:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1dd0e:	d03e      	beq.n	1dd8e <gpio_nrfx_pin_configure+0x126>
   1dd10:	d80c      	bhi.n	1dd2c <gpio_nrfx_pin_configure+0xc4>
   1dd12:	2b06      	cmp	r3, #6
   1dd14:	d015      	beq.n	1dd42 <gpio_nrfx_pin_configure+0xda>
   1dd16:	d804      	bhi.n	1dd22 <gpio_nrfx_pin_configure+0xba>
   1dd18:	b19b      	cbz	r3, 1dd42 <gpio_nrfx_pin_configure+0xda>
   1dd1a:	2b02      	cmp	r3, #2
   1dd1c:	d1dc      	bne.n	1dcd8 <gpio_nrfx_pin_configure+0x70>
   1dd1e:	2304      	movs	r3, #4
   1dd20:	e00f      	b.n	1dd42 <gpio_nrfx_pin_configure+0xda>
   1dd22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1dd26:	d1d7      	bne.n	1dcd8 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_H0S1;
   1dd28:	2301      	movs	r3, #1
   1dd2a:	e00a      	b.n	1dd42 <gpio_nrfx_pin_configure+0xda>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1dd2c:	f240 2202 	movw	r2, #514	; 0x202
   1dd30:	4293      	cmp	r3, r2
   1dd32:	d02e      	beq.n	1dd92 <gpio_nrfx_pin_configure+0x12a>
   1dd34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1dd38:	d02d      	beq.n	1dd96 <gpio_nrfx_pin_configure+0x12e>
   1dd3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1dd3e:	d1cb      	bne.n	1dcd8 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_S0H1;
   1dd40:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1dd42:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1dd46:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1dd4a:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1dd4e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1dd50:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1dd54:	bf54      	ite	pl
   1dd56:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1dd5a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1dd5c:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1dd5e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1dd62:	d51a      	bpl.n	1dd9a <gpio_nrfx_pin_configure+0x132>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1dd64:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1dd68:	2101      	movs	r1, #1
   1dd6a:	fa01 f108 	lsl.w	r1, r1, r8
    p_reg->OUTSET = set_mask;
   1dd6e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1dd72:	2200      	movs	r2, #0
   1dd74:	a901      	add	r1, sp, #4
   1dd76:	4630      	mov	r0, r6
   1dd78:	f002 fe82 	bl	20a80 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1dd7c:	4b15      	ldr	r3, [pc, #84]	; (1ddd4 <gpio_nrfx_pin_configure+0x16c>)
   1dd7e:	4298      	cmp	r0, r3
   1dd80:	bf14      	ite	ne
   1dd82:	f06f 0015 	mvnne.w	r0, #21
   1dd86:	2000      	moveq	r0, #0
}
   1dd88:	b005      	add	sp, #20
   1dd8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
   1dd8e:	2307      	movs	r3, #7
   1dd90:	e7d7      	b.n	1dd42 <gpio_nrfx_pin_configure+0xda>
		*drive = NRF_GPIO_PIN_D0H1;
   1dd92:	2305      	movs	r3, #5
   1dd94:	e7d5      	b.n	1dd42 <gpio_nrfx_pin_configure+0xda>
		*drive = NRF_GPIO_PIN_H0H1;
   1dd96:	2303      	movs	r3, #3
   1dd98:	e7d3      	b.n	1dd42 <gpio_nrfx_pin_configure+0xda>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1dd9a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1dd9c:	bf41      	itttt	mi
   1dd9e:	2101      	movmi	r1, #1
   1dda0:	f8d9 3004 	ldrmi.w	r3, [r9, #4]
   1dda4:	fa01 f108 	lslmi.w	r1, r1, r8
    p_reg->OUTCLR = clr_mask;
   1dda8:	f8c3 150c 	strmi.w	r1, [r3, #1292]	; 0x50c
}
   1ddac:	e7e1      	b.n	1dd72 <gpio_nrfx_pin_configure+0x10a>
	if (flags & GPIO_PULL_UP) {
   1ddae:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1ddb0:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1ddb4:	bf54      	ite	pl
   1ddb6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1ddba:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1ddbc:	461a      	mov	r2, r3
   1ddbe:	a901      	add	r1, sp, #4
   1ddc0:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
   1ddc2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1ddc6:	f002 fdad 	bl	20924 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1ddca:	4b02      	ldr	r3, [pc, #8]	; (1ddd4 <gpio_nrfx_pin_configure+0x16c>)
   1ddcc:	4298      	cmp	r0, r3
   1ddce:	f43f af76 	beq.w	1dcbe <gpio_nrfx_pin_configure+0x56>
   1ddd2:	e781      	b.n	1dcd8 <gpio_nrfx_pin_configure+0x70>
   1ddd4:	0bad0000 	.word	0x0bad0000
   1ddd8:	0002fbf5 	.word	0x0002fbf5
   1dddc:	0002d509 	.word	0x0002d509

0001dde0 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1dde0:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1dde4:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1dde8:	280a      	cmp	r0, #10
   1ddea:	bf9a      	itte	ls
   1ddec:	4b02      	ldrls	r3, [pc, #8]	; (1ddf8 <qspi_get_zephyr_ret_code+0x18>)
   1ddee:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1ddf2:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1ddf6:	4770      	bx	lr
   1ddf8:	0002d23c 	.word	0x0002d23c

0001ddfc <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1ddfc:	4b02      	ldr	r3, [pc, #8]	; (1de08 <qspi_nor_pages_layout+0xc>)
   1ddfe:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1de00:	2301      	movs	r3, #1
   1de02:	6013      	str	r3, [r2, #0]
}
   1de04:	4770      	bx	lr
   1de06:	bf00      	nop
   1de08:	0002ce20 	.word	0x0002ce20

0001de0c <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1de0c:	4800      	ldr	r0, [pc, #0]	; (1de10 <qspi_flash_get_parameters+0x4>)
   1de0e:	4770      	bx	lr
   1de10:	0002ce28 	.word	0x0002ce28

0001de14 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1de14:	4b05      	ldr	r3, [pc, #20]	; (1de2c <qspi_wait_for_completion.isra.0+0x18>)
   1de16:	4299      	cmp	r1, r3
   1de18:	d106      	bne.n	1de28 <qspi_wait_for_completion.isra.0+0x14>
	return z_impl_k_sem_take(sem, timeout);
   1de1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1de1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de22:	3030      	adds	r0, #48	; 0x30
   1de24:	f004 bc5e 	b.w	226e4 <z_impl_k_sem_take>
}
   1de28:	4770      	bx	lr
   1de2a:	bf00      	nop
   1de2c:	0bad0000 	.word	0x0bad0000

0001de30 <qspi_device_init>:
{
   1de30:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1de32:	6905      	ldr	r5, [r0, #16]
	if (!qspi_initialized) {
   1de34:	4e0f      	ldr	r6, [pc, #60]	; (1de74 <qspi_device_init+0x44>)
{
   1de36:	4604      	mov	r4, r0
	qspi_lock(dev);
   1de38:	4628      	mov	r0, r5
   1de3a:	f00d fb78 	bl	2b52e <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1de3e:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1de42:	f00d fb6c 	bl	2b51e <k_sem_give>
	if (!qspi_initialized) {
   1de46:	7833      	ldrb	r3, [r6, #0]
   1de48:	b98b      	cbnz	r3, 1de6e <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1de4a:	462a      	mov	r2, r5
   1de4c:	490a      	ldr	r1, [pc, #40]	; (1de78 <qspi_device_init+0x48>)
   1de4e:	6860      	ldr	r0, [r4, #4]
   1de50:	f003 fa40 	bl	212d4 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1de54:	f7ff ffc4 	bl	1dde0 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1de58:	fab0 f380 	clz	r3, r0
   1de5c:	095b      	lsrs	r3, r3, #5
   1de5e:	4605      	mov	r5, r0
   1de60:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1de62:	6920      	ldr	r0, [r4, #16]
   1de64:	3018      	adds	r0, #24
   1de66:	f00d fb5a 	bl	2b51e <k_sem_give>
}
   1de6a:	4628      	mov	r0, r5
   1de6c:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1de6e:	2500      	movs	r5, #0
   1de70:	e7f7      	b.n	1de62 <qspi_device_init+0x32>
   1de72:	bf00      	nop
   1de74:	200037d9 	.word	0x200037d9
   1de78:	0002b523 	.word	0x0002b523

0001de7c <qspi_send_cmd>:
{
   1de7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (cmd->tx_buf) {
   1de7e:	684c      	ldr	r4, [r1, #4]
{
   1de80:	4605      	mov	r5, r0
   1de82:	4617      	mov	r7, r2
	if (cmd->tx_buf) {
   1de84:	b1ac      	cbz	r4, 1deb2 <qspi_send_cmd+0x36>
		tx_buf = cmd->tx_buf->buf;
   1de86:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1de8a:	6888      	ldr	r0, [r1, #8]
   1de8c:	b198      	cbz	r0, 1deb6 <qspi_send_cmd+0x3a>
		rx_len = cmd->rx_buf->len;
   1de8e:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1de92:	b188      	cbz	r0, 1deb8 <qspi_send_cmd+0x3c>
   1de94:	b183      	cbz	r3, 1deb8 <qspi_send_cmd+0x3c>
		if (rx_len != tx_len) {
   1de96:	4298      	cmp	r0, r3
   1de98:	d107      	bne.n	1deaa <qspi_send_cmd+0x2e>
		xfer_len += tx_len;
   1de9a:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1de9c:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1de9e:	780a      	ldrb	r2, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1dea0:	d90d      	bls.n	1debe <qspi_send_cmd+0x42>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1dea2:	4817      	ldr	r0, [pc, #92]	; (1df00 <qspi_send_cmd+0x84>)
   1dea4:	2157      	movs	r1, #87	; 0x57
   1dea6:	f00a fc7b 	bl	287a0 <z_log_minimal_printk>
}
   1deaa:	f06f 0015 	mvn.w	r0, #21
   1deae:	b003      	add	sp, #12
   1deb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   1deb2:	4623      	mov	r3, r4
   1deb4:	e7e9      	b.n	1de8a <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   1deb6:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1deb8:	3301      	adds	r3, #1
   1deba:	4403      	add	r3, r0
   1debc:	e7ee      	b.n	1de9c <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1debe:	f88d 3001 	strb.w	r3, [sp, #1]
   1dec2:	2301      	movs	r3, #1
	qspi_lock(dev);
   1dec4:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1dec6:	f88d 3002 	strb.w	r3, [sp, #2]
   1deca:	f88d 3003 	strb.w	r3, [sp, #3]
   1dece:	2300      	movs	r3, #0
   1ded0:	f88d 3004 	strb.w	r3, [sp, #4]
   1ded4:	f88d 2000 	strb.w	r2, [sp]
   1ded8:	f88d 7005 	strb.w	r7, [sp, #5]
	qspi_lock(dev);
   1dedc:	f00d fb27 	bl	2b52e <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1dee0:	4621      	mov	r1, r4
   1dee2:	4632      	mov	r2, r6
   1dee4:	4668      	mov	r0, sp
   1dee6:	f003 faf1 	bl	214cc <nrfx_qspi_cinstr_xfer>
   1deea:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1deec:	6928      	ldr	r0, [r5, #16]
   1deee:	3018      	adds	r0, #24
   1def0:	f00d fb15 	bl	2b51e <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1def4:	4620      	mov	r0, r4
}
   1def6:	b003      	add	sp, #12
   1def8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return qspi_get_zephyr_ret_code(res);
   1defc:	f7ff bf70 	b.w	1dde0 <qspi_get_zephyr_ret_code>
   1df00:	0002fc3d 	.word	0x0002fc3d

0001df04 <qspi_device_uninit>:
{
   1df04:	b538      	push	{r3, r4, r5, lr}
   1df06:	4604      	mov	r4, r0
	qspi_lock(dev);
   1df08:	6900      	ldr	r0, [r0, #16]
   1df0a:	f00d fb10 	bl	2b52e <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1df0e:	6925      	ldr	r5, [r4, #16]
   1df10:	2200      	movs	r2, #0
   1df12:	2300      	movs	r3, #0
   1df14:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1df18:	f004 fbe4 	bl	226e4 <z_impl_k_sem_take>
	if (last) {
   1df1c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1df1e:	b94b      	cbnz	r3, 1df34 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1df20:	4d0a      	ldr	r5, [pc, #40]	; (1df4c <qspi_device_uninit+0x48>)
   1df22:	f003 fb37 	bl	21594 <nrfx_qspi_mem_busy_check>
   1df26:	42a8      	cmp	r0, r5
   1df28:	d10a      	bne.n	1df40 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1df2a:	f003 fb59 	bl	215e0 <nrfx_qspi_uninit>
		qspi_initialized = false;
   1df2e:	4b08      	ldr	r3, [pc, #32]	; (1df50 <qspi_device_uninit+0x4c>)
   1df30:	2200      	movs	r2, #0
   1df32:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1df34:	6920      	ldr	r0, [r4, #16]
}
   1df36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1df3a:	3018      	adds	r0, #24
   1df3c:	f00d baef 	b.w	2b51e <k_sem_give>
	return z_impl_k_sleep(timeout);
   1df40:	2100      	movs	r1, #0
   1df42:	f240 6067 	movw	r0, #1639	; 0x667
   1df46:	f006 f83b 	bl	23fc0 <z_impl_k_sleep>
   1df4a:	e7ea      	b.n	1df22 <qspi_device_uninit+0x1e>
   1df4c:	0bad0000 	.word	0x0bad0000
   1df50:	200037d9 	.word	0x200037d9

0001df54 <qspi_nor_read>:
{
   1df54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df58:	4680      	mov	r8, r0
   1df5a:	b085      	sub	sp, #20
   1df5c:	460e      	mov	r6, r1
   1df5e:	461c      	mov	r4, r3
	if (!dest) {
   1df60:	4617      	mov	r7, r2
   1df62:	b17a      	cbz	r2, 1df84 <qspi_nor_read+0x30>
	if (!size) {
   1df64:	2b00      	cmp	r3, #0
   1df66:	f000 809e 	beq.w	1e0a6 <qspi_nor_read+0x152>
	if (addr < 0 ||
   1df6a:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1df6c:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1df6e:	db03      	blt.n	1df78 <qspi_nor_read+0x24>
   1df70:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1df72:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1df74:	4293      	cmp	r3, r2
   1df76:	d908      	bls.n	1df8a <qspi_nor_read+0x36>
		LOG_ERR("read error: address or size "
   1df78:	484c      	ldr	r0, [pc, #304]	; (1e0ac <qspi_nor_read+0x158>)
   1df7a:	4623      	mov	r3, r4
   1df7c:	4632      	mov	r2, r6
   1df7e:	2145      	movs	r1, #69	; 0x45
   1df80:	f00a fc0e 	bl	287a0 <z_log_minimal_printk>
		return -EINVAL;
   1df84:	f06f 0515 	mvn.w	r5, #21
   1df88:	e087      	b.n	1e09a <qspi_nor_read+0x146>
	int rc = qspi_device_init(dev);
   1df8a:	f7ff ff51 	bl	1de30 <qspi_device_init>
	if (rc != 0) {
   1df8e:	4605      	mov	r5, r0
   1df90:	2800      	cmp	r0, #0
   1df92:	d17f      	bne.n	1e094 <qspi_nor_read+0x140>
	qspi_lock(dev);
   1df94:	4275      	negs	r5, r6
   1df96:	f005 0503 	and.w	r5, r5, #3
   1df9a:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1df9e:	f00d fac6 	bl	2b52e <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1dfa2:	42a5      	cmp	r5, r4
   1dfa4:	bf28      	it	cs
   1dfa6:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1dfa8:	427b      	negs	r3, r7
   1dfaa:	f003 0303 	and.w	r3, r3, #3
   1dfae:	f007 0b03 	and.w	fp, r7, #3
   1dfb2:	bf58      	it	pl
   1dfb4:	f1c3 0b00 	rsbpl	fp, r3, #0
   1dfb8:	f1cb 0b00 	rsb	fp, fp, #0
   1dfbc:	f00b 0b03 	and.w	fp, fp, #3
   1dfc0:	45a3      	cmp	fp, r4
   1dfc2:	bf28      	it	cs
   1dfc4:	46a3      	movcs	fp, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1dfc6:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1dfc8:	eba4 040b 	sub.w	r4, r4, fp
	off_t dest_middle = size - dest_prefix -
   1dfcc:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1dfd0:	f023 0903 	bic.w	r9, r3, #3
	if (flash_middle > dest_middle) {
   1dfd4:	45a1      	cmp	r9, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1dfd6:	bfc8      	it	gt
   1dfd8:	46a1      	movgt	r9, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1dfda:	f003 0a03 	and.w	sl, r3, #3
		flash_suffix = size - flash_prefix - flash_middle;
   1dfde:	bfc8      	it	gt
   1dfe0:	eba3 0a04 	subgt.w	sl, r3, r4
	if (flash_middle != 0) {
   1dfe4:	f1b9 0f00 	cmp.w	r9, #0
   1dfe8:	d018      	beq.n	1e01c <qspi_nor_read+0xc8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1dfea:	eb07 030b 	add.w	r3, r7, fp
   1dfee:	1972      	adds	r2, r6, r5
   1dff0:	4649      	mov	r1, r9
   1dff2:	4618      	mov	r0, r3
   1dff4:	9301      	str	r3, [sp, #4]
   1dff6:	f00d fe66 	bl	2bcc6 <nrfx_qspi_read>
   1dffa:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1dffc:	4601      	mov	r1, r0
   1dffe:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1e002:	f7ff ff07 	bl	1de14 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1e006:	4a2a      	ldr	r2, [pc, #168]	; (1e0b0 <qspi_nor_read+0x15c>)
   1e008:	4294      	cmp	r4, r2
   1e00a:	d13a      	bne.n	1e082 <qspi_nor_read+0x12e>
		if (flash_prefix != dest_prefix) {
   1e00c:	455d      	cmp	r5, fp
   1e00e:	d005      	beq.n	1e01c <qspi_nor_read+0xc8>
__ssp_bos_icheck3(memmove, void *, const void *)
   1e010:	9b01      	ldr	r3, [sp, #4]
   1e012:	464a      	mov	r2, r9
   1e014:	4619      	mov	r1, r3
   1e016:	1978      	adds	r0, r7, r5
   1e018:	f00e f8ba 	bl	2c190 <memmove>
	if (flash_prefix != 0) {
   1e01c:	b1bd      	cbz	r5, 1e04e <qspi_nor_read+0xfa>
				     (WORD_SIZE - flash_prefix));
   1e01e:	f1c5 0b04 	rsb	fp, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1e022:	eba6 020b 	sub.w	r2, r6, fp
   1e026:	2104      	movs	r1, #4
   1e028:	a802      	add	r0, sp, #8
   1e02a:	f00d fe4c 	bl	2bcc6 <nrfx_qspi_read>
   1e02e:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1e030:	4601      	mov	r1, r0
   1e032:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1e036:	f7ff feed 	bl	1de14 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1e03a:	4b1d      	ldr	r3, [pc, #116]	; (1e0b0 <qspi_nor_read+0x15c>)
   1e03c:	429c      	cmp	r4, r3
   1e03e:	d120      	bne.n	1e082 <qspi_nor_read+0x12e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e040:	ab02      	add	r3, sp, #8
   1e042:	462a      	mov	r2, r5
   1e044:	eb03 010b 	add.w	r1, r3, fp
   1e048:	4638      	mov	r0, r7
   1e04a:	f00e f880 	bl	2c14e <memcpy>
	if (flash_suffix != 0) {
   1e04e:	f1ba 0f00 	cmp.w	sl, #0
   1e052:	d026      	beq.n	1e0a2 <qspi_nor_read+0x14e>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1e054:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   1e056:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1e058:	444a      	add	r2, r9
   1e05a:	eb0d 0001 	add.w	r0, sp, r1
   1e05e:	f00d fe32 	bl	2bcc6 <nrfx_qspi_read>
   1e062:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1e064:	4601      	mov	r1, r0
   1e066:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1e06a:	f7ff fed3 	bl	1de14 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1e06e:	4b10      	ldr	r3, [pc, #64]	; (1e0b0 <qspi_nor_read+0x15c>)
   1e070:	429c      	cmp	r4, r3
   1e072:	d106      	bne.n	1e082 <qspi_nor_read+0x12e>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1e074:	eb09 0005 	add.w	r0, r9, r5
   1e078:	4652      	mov	r2, sl
   1e07a:	a902      	add	r1, sp, #8
   1e07c:	4438      	add	r0, r7
   1e07e:	f00e f866 	bl	2c14e <memcpy>
	k_sem_give(&dev_data->sem);
   1e082:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1e086:	3018      	adds	r0, #24
   1e088:	f00d fa49 	bl	2b51e <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1e08c:	4620      	mov	r0, r4
   1e08e:	f7ff fea7 	bl	1dde0 <qspi_get_zephyr_ret_code>
   1e092:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1e094:	4640      	mov	r0, r8
   1e096:	f7ff ff35 	bl	1df04 <qspi_device_uninit>
}
   1e09a:	4628      	mov	r0, r5
   1e09c:	b005      	add	sp, #20
   1e09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return res;
   1e0a2:	4c03      	ldr	r4, [pc, #12]	; (1e0b0 <qspi_nor_read+0x15c>)
   1e0a4:	e7ed      	b.n	1e082 <qspi_nor_read+0x12e>
		return 0;
   1e0a6:	461d      	mov	r5, r3
   1e0a8:	e7f7      	b.n	1e09a <qspi_nor_read+0x146>
   1e0aa:	bf00      	nop
   1e0ac:	0002fc65 	.word	0x0002fc65
   1e0b0:	0bad0000 	.word	0x0bad0000

0001e0b4 <qspi_nor_init>:
{
   1e0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1e0b8:	6843      	ldr	r3, [r0, #4]
   1e0ba:	6a1e      	ldr	r6, [r3, #32]
{
   1e0bc:	b08a      	sub	sp, #40	; 0x28
   1e0be:	4605      	mov	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1e0c0:	aa07      	add	r2, sp, #28
   1e0c2:	2100      	movs	r1, #0
   1e0c4:	4630      	mov	r0, r6
   1e0c6:	f00d fb9f 	bl	2b808 <pinctrl_lookup_state>
	if (ret < 0) {
   1e0ca:	1e04      	subs	r4, r0, #0
   1e0cc:	db2f      	blt.n	1e12e <qspi_nor_init+0x7a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1e0ce:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1e0d0:	6832      	ldr	r2, [r6, #0]
   1e0d2:	7919      	ldrb	r1, [r3, #4]
   1e0d4:	6818      	ldr	r0, [r3, #0]
   1e0d6:	f00d fbee 	bl	2b8b6 <pinctrl_configure_pins>
	if (ret < 0) {
   1e0da:	1e04      	subs	r4, r0, #0
   1e0dc:	db27      	blt.n	1e12e <qspi_nor_init+0x7a>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1e0de:	2200      	movs	r2, #0
   1e0e0:	2101      	movs	r1, #1
   1e0e2:	2029      	movs	r0, #41	; 0x29
   1e0e4:	f7f6 fafa 	bl	146dc <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1e0e8:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1e0ea:	692a      	ldr	r2, [r5, #16]
   1e0ec:	4948      	ldr	r1, [pc, #288]	; (1e210 <qspi_nor_init+0x15c>)
   1e0ee:	4630      	mov	r0, r6
   1e0f0:	f003 f8f0 	bl	212d4 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1e0f4:	f7ff fe74 	bl	1dde0 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1e0f8:	1e04      	subs	r4, r0, #0
   1e0fa:	db18      	blt.n	1e12e <qspi_nor_init+0x7a>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1e0fc:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1e0fe:	3b02      	subs	r3, #2
   1e100:	2b01      	cmp	r3, #1
   1e102:	d918      	bls.n	1e136 <qspi_nor_init+0x82>
   1e104:	f896 800a 	ldrb.w	r8, [r6, #10]
   1e108:	f1a8 0803 	sub.w	r8, r8, #3
   1e10c:	f1b8 0f01 	cmp.w	r8, #1
   1e110:	bf8c      	ite	hi
   1e112:	f04f 0800 	movhi.w	r8, #0
   1e116:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1e11a:	4628      	mov	r0, r5
   1e11c:	f00d fa29 	bl	2b572 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1e120:	1e04      	subs	r4, r0, #0
   1e122:	da0b      	bge.n	1e13c <qspi_nor_init+0x88>
			LOG_ERR("RDSR failed: %d", ret);
   1e124:	483b      	ldr	r0, [pc, #236]	; (1e214 <qspi_nor_init+0x160>)
   1e126:	4622      	mov	r2, r4
   1e128:	2145      	movs	r1, #69	; 0x45
   1e12a:	f00a fb39 	bl	287a0 <z_log_minimal_printk>
}
   1e12e:	4620      	mov	r0, r4
   1e130:	b00a      	add	sp, #40	; 0x28
   1e132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1e136:	f04f 0801 	mov.w	r8, #1
   1e13a:	e7ee      	b.n	1e11a <qspi_nor_init+0x66>
		if (qe_state != qe_value) {
   1e13c:	f3c4 1080 	ubfx	r0, r4, #6, #1
   1e140:	4580      	cmp	r8, r0
		uint8_t sr = (uint8_t)ret;
   1e142:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1e144:	ae04      	add	r6, sp, #16
   1e146:	af05      	add	r7, sp, #20
   1e148:	d01b      	beq.n	1e182 <qspi_nor_init+0xce>
	uint8_t sr_array[2] = {0};
   1e14a:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1e14c:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1e150:	f8ad 3010 	strh.w	r3, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1e154:	a907      	add	r1, sp, #28
		sr_array[0] = sr_val;
   1e156:	f88d 2010 	strb.w	r2, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1e15a:	4628      	mov	r0, r5
	const struct qspi_buf sr_buf = {
   1e15c:	2201      	movs	r2, #1
	struct qspi_cmd cmd = {
   1e15e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	const struct qspi_buf sr_buf = {
   1e162:	9605      	str	r6, [sp, #20]
	struct qspi_cmd cmd = {
   1e164:	9309      	str	r3, [sp, #36]	; 0x24
   1e166:	f88d 201c 	strb.w	r2, [sp, #28]
   1e16a:	9708      	str	r7, [sp, #32]
	ret = qspi_send_cmd(dev, &cmd, true);
   1e16c:	f7ff fe86 	bl	1de7c <qspi_send_cmd>
	if (ret == 0) {
   1e170:	1e04      	subs	r4, r0, #0
   1e172:	d140      	bne.n	1e1f6 <qspi_nor_init+0x142>
		ret = qspi_rdsr(dev, 1);
   1e174:	4628      	mov	r0, r5
   1e176:	f00d f9fc 	bl	2b572 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1e17a:	1e04      	subs	r4, r0, #0
   1e17c:	db3c      	blt.n	1e1f8 <qspi_nor_init+0x144>
   1e17e:	07e1      	lsls	r1, r4, #31
   1e180:	d4f8      	bmi.n	1e174 <qspi_nor_init+0xc0>
	qspi_device_uninit(dev);
   1e182:	4628      	mov	r0, r5
   1e184:	f7ff febe 	bl	1df04 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1e188:	2300      	movs	r3, #0
   1e18a:	2203      	movs	r2, #3
   1e18c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e190:	9308      	str	r3, [sp, #32]
	int ret = qspi_device_init(dev);
   1e192:	4628      	mov	r0, r5
	const struct qspi_cmd cmd = {
   1e194:	239f      	movs	r3, #159	; 0x9f
	const struct qspi_buf rx_buf = {
   1e196:	9605      	str	r6, [sp, #20]
	const struct qspi_cmd cmd = {
   1e198:	f88d 301c 	strb.w	r3, [sp, #28]
   1e19c:	9709      	str	r7, [sp, #36]	; 0x24
	int ret = qspi_device_init(dev);
   1e19e:	f7ff fe47 	bl	1de30 <qspi_device_init>
	if (ret == 0) {
   1e1a2:	4604      	mov	r4, r0
   1e1a4:	b928      	cbnz	r0, 1e1b2 <qspi_nor_init+0xfe>
		ret = qspi_send_cmd(dev, &cmd, false);
   1e1a6:	4602      	mov	r2, r0
   1e1a8:	a907      	add	r1, sp, #28
   1e1aa:	4628      	mov	r0, r5
   1e1ac:	f7ff fe66 	bl	1de7c <qspi_send_cmd>
   1e1b0:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1e1b2:	4628      	mov	r0, r5
   1e1b4:	f7ff fea6 	bl	1df04 <qspi_device_uninit>
	if (ret != 0) {
   1e1b8:	b9d4      	cbnz	r4, 1e1f0 <qspi_nor_init+0x13c>
	const struct qspi_nor_config *qnc = dev->config;
   1e1ba:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1e1bc:	2203      	movs	r2, #3
   1e1be:	4631      	mov	r1, r6
   1e1c0:	f105 001c 	add.w	r0, r5, #28
   1e1c4:	f00d ffb3 	bl	2c12e <memcmp>
   1e1c8:	4604      	mov	r4, r0
   1e1ca:	2800      	cmp	r0, #0
   1e1cc:	d0af      	beq.n	1e12e <qspi_nor_init+0x7a>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1e1ce:	7fab      	ldrb	r3, [r5, #30]
   1e1d0:	9303      	str	r3, [sp, #12]
   1e1d2:	7f6b      	ldrb	r3, [r5, #29]
   1e1d4:	9302      	str	r3, [sp, #8]
   1e1d6:	7f2b      	ldrb	r3, [r5, #28]
   1e1d8:	9301      	str	r3, [sp, #4]
   1e1da:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1e1de:	9300      	str	r3, [sp, #0]
   1e1e0:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1e1e4:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1e1e8:	480b      	ldr	r0, [pc, #44]	; (1e218 <qspi_nor_init+0x164>)
   1e1ea:	2145      	movs	r1, #69	; 0x45
   1e1ec:	f00a fad8 	bl	287a0 <z_log_minimal_printk>
		return -ENODEV;
   1e1f0:	f06f 0412 	mvn.w	r4, #18
   1e1f4:	e79b      	b.n	1e12e <qspi_nor_init+0x7a>
		if (ret < 0) {
   1e1f6:	da9a      	bge.n	1e12e <qspi_nor_init+0x7a>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1e1f8:	4908      	ldr	r1, [pc, #32]	; (1e21c <qspi_nor_init+0x168>)
   1e1fa:	4a09      	ldr	r2, [pc, #36]	; (1e220 <qspi_nor_init+0x16c>)
   1e1fc:	4809      	ldr	r0, [pc, #36]	; (1e224 <qspi_nor_init+0x170>)
   1e1fe:	f1b8 0f00 	cmp.w	r8, #0
   1e202:	bf18      	it	ne
   1e204:	460a      	movne	r2, r1
   1e206:	4623      	mov	r3, r4
   1e208:	2145      	movs	r1, #69	; 0x45
   1e20a:	f00a fac9 	bl	287a0 <z_log_minimal_printk>
			return ret;
   1e20e:	e78e      	b.n	1e12e <qspi_nor_init+0x7a>
   1e210:	0002b523 	.word	0x0002b523
   1e214:	0002fcbd 	.word	0x0002fcbd
   1e218:	0002fce8 	.word	0x0002fce8
   1e21c:	0002fcb3 	.word	0x0002fcb3
   1e220:	0002fcb7 	.word	0x0002fcb7
   1e224:	0002fcd2 	.word	0x0002fcd2

0001e228 <qspi_nor_erase>:
{
   1e228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e22c:	4691      	mov	r9, r2
	if (addr < 0 ||
   1e22e:	1e0a      	subs	r2, r1, #0
	const struct qspi_nor_config *params = dev->config;
   1e230:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1e234:	4606      	mov	r6, r0
	if (addr < 0 ||
   1e236:	db06      	blt.n	1e246 <qspi_nor_erase+0x1e>
   1e238:	f8d8 1018 	ldr.w	r1, [r8, #24]
	    (addr + size) > params->size) {
   1e23c:	eb02 0409 	add.w	r4, r2, r9
	if (addr < 0 ||
   1e240:	428c      	cmp	r4, r1
	    (addr + size) > params->size) {
   1e242:	4617      	mov	r7, r2
	if (addr < 0 ||
   1e244:	d907      	bls.n	1e256 <qspi_nor_erase+0x2e>
		LOG_ERR("erase error: address or size "
   1e246:	483c      	ldr	r0, [pc, #240]	; (1e338 <qspi_nor_erase+0x110>)
   1e248:	464b      	mov	r3, r9
   1e24a:	2145      	movs	r1, #69	; 0x45
   1e24c:	f00a faa8 	bl	287a0 <z_log_minimal_printk>
		return -EINVAL;
   1e250:	f06f 0415 	mvn.w	r4, #21
   1e254:	e03e      	b.n	1e2d4 <qspi_nor_erase+0xac>
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1e256:	f1b9 0f00 	cmp.w	r9, #0
   1e25a:	d0f9      	beq.n	1e250 <qspi_nor_erase+0x28>
   1e25c:	ea42 0209 	orr.w	r2, r2, r9
   1e260:	f3c2 020b 	ubfx	r2, r2, #0, #12
   1e264:	2a00      	cmp	r2, #0
   1e266:	d1f3      	bne.n	1e250 <qspi_nor_erase+0x28>
	rv = qspi_device_init(dev);
   1e268:	f7ff fde2 	bl	1de30 <qspi_device_init>
	if (rv != 0) {
   1e26c:	4604      	mov	r4, r0
   1e26e:	bb70      	cbnz	r0, 1e2ce <qspi_nor_erase+0xa6>
	qspi_trans_lock(dev);
   1e270:	6930      	ldr	r0, [r6, #16]
   1e272:	f00d f963 	bl	2b53c <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1e276:	4621      	mov	r1, r4
   1e278:	4630      	mov	r0, r6
   1e27a:	f00d f965 	bl	2b548 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1e27e:	4604      	mov	r4, r0
   1e280:	bb10      	cbnz	r0, 1e2c8 <qspi_nor_erase+0xa0>
	qspi_lock(dev);
   1e282:	6930      	ldr	r0, [r6, #16]
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1e284:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1e33c <qspi_nor_erase+0x114>
	qspi_lock(dev);
   1e288:	f00d f951 	bl	2b52e <qspi_lock.isra.0>
		if (size == params->size) {
   1e28c:	f8d8 2018 	ldr.w	r2, [r8, #24]
   1e290:	454a      	cmp	r2, r9
   1e292:	d122      	bne.n	1e2da <qspi_nor_erase+0xb2>
			res = nrfx_qspi_chip_erase();
   1e294:	f00d fd1a 	bl	2bccc <nrfx_qspi_chip_erase>
   1e298:	46cb      	mov	fp, r9
   1e29a:	4605      	mov	r5, r0
		qspi_wait_for_completion(dev, res);
   1e29c:	6930      	ldr	r0, [r6, #16]
   1e29e:	4629      	mov	r1, r5
   1e2a0:	f7ff fdb8 	bl	1de14 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1e2a4:	4b26      	ldr	r3, [pc, #152]	; (1e340 <qspi_nor_erase+0x118>)
   1e2a6:	429d      	cmp	r5, r3
   1e2a8:	d13b      	bne.n	1e322 <qspi_nor_erase+0xfa>
	while (size > 0) {
   1e2aa:	ebb9 090b 	subs.w	r9, r9, fp
			addr += adj;
   1e2ae:	445f      	add	r7, fp
	while (size > 0) {
   1e2b0:	d1ec      	bne.n	1e28c <qspi_nor_erase+0x64>
	k_sem_give(&dev_data->sem);
   1e2b2:	6930      	ldr	r0, [r6, #16]
   1e2b4:	3018      	adds	r0, #24
   1e2b6:	f00d f932 	bl	2b51e <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1e2ba:	2101      	movs	r1, #1
   1e2bc:	4630      	mov	r0, r6
   1e2be:	f00d f943 	bl	2b548 <qspi_nor_write_protection_set>
		rv = rv2;
   1e2c2:	2c00      	cmp	r4, #0
   1e2c4:	bf08      	it	eq
   1e2c6:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1e2c8:	6930      	ldr	r0, [r6, #16]
   1e2ca:	f00d f928 	bl	2b51e <k_sem_give>
	qspi_device_uninit(dev);
   1e2ce:	4630      	mov	r0, r6
   1e2d0:	f7ff fe18 	bl	1df04 <qspi_device_uninit>
}
   1e2d4:	4620      	mov	r0, r4
   1e2d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1e2da:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   1e2de:	d309      	bcc.n	1e2f4 <qspi_nor_erase+0xcc>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1e2e0:	b2ba      	uxth	r2, r7
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1e2e2:	b93a      	cbnz	r2, 1e2f4 <qspi_nor_erase+0xcc>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1e2e4:	4639      	mov	r1, r7
   1e2e6:	2001      	movs	r0, #1
   1e2e8:	f003 f9e2 	bl	216b0 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1e2ec:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1e2f0:	4605      	mov	r5, r0
			adj = QSPI_BLOCK_SIZE;
   1e2f2:	e7d3      	b.n	1e29c <qspi_nor_erase+0x74>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1e2f4:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   1e2f8:	d309      	bcc.n	1e30e <qspi_nor_erase+0xe6>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1e2fa:	f3c7 000b 	ubfx	r0, r7, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1e2fe:	b930      	cbnz	r0, 1e30e <qspi_nor_erase+0xe6>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1e300:	4639      	mov	r1, r7
   1e302:	f003 f9d5 	bl	216b0 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1e306:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1e30a:	4605      	mov	r5, r0
			adj = QSPI_SECTOR_SIZE;
   1e30c:	e7c6      	b.n	1e29c <qspi_nor_erase+0x74>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1e30e:	464b      	mov	r3, r9
   1e310:	463a      	mov	r2, r7
   1e312:	2145      	movs	r1, #69	; 0x45
   1e314:	4650      	mov	r0, sl
   1e316:	f00a fa43 	bl	287a0 <z_log_minimal_printk>
			res = NRFX_ERROR_INVALID_PARAM;
   1e31a:	4d0a      	ldr	r5, [pc, #40]	; (1e344 <qspi_nor_erase+0x11c>)
		uint32_t adj = 0;
   1e31c:	f04f 0b00 	mov.w	fp, #0
   1e320:	e7bc      	b.n	1e29c <qspi_nor_erase+0x74>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1e322:	4809      	ldr	r0, [pc, #36]	; (1e348 <qspi_nor_erase+0x120>)
   1e324:	464b      	mov	r3, r9
   1e326:	463a      	mov	r2, r7
   1e328:	2145      	movs	r1, #69	; 0x45
   1e32a:	f00a fa39 	bl	287a0 <z_log_minimal_printk>
			rv = qspi_get_zephyr_ret_code(res);
   1e32e:	4628      	mov	r0, r5
   1e330:	f7ff fd56 	bl	1dde0 <qspi_get_zephyr_ret_code>
   1e334:	4604      	mov	r4, r0
			break;
   1e336:	e7bc      	b.n	1e2b2 <qspi_nor_erase+0x8a>
   1e338:	0002fd1f 	.word	0x0002fd1f
   1e33c:	0002fd6e 	.word	0x0002fd6e
   1e340:	0bad0000 	.word	0x0bad0000
   1e344:	0bad0004 	.word	0x0bad0004
   1e348:	0002fd91 	.word	0x0002fd91

0001e34c <qspi_nor_write>:
{
   1e34c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1e350:	4605      	mov	r5, r0
   1e352:	460f      	mov	r7, r1
   1e354:	461e      	mov	r6, r3
	if (!src) {
   1e356:	4690      	mov	r8, r2
   1e358:	b19a      	cbz	r2, 1e382 <qspi_nor_write+0x36>
	if ((size == 0)
   1e35a:	b193      	cbz	r3, 1e382 <qspi_nor_write+0x36>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1e35c:	2b04      	cmp	r3, #4
   1e35e:	d901      	bls.n	1e364 <qspi_nor_write+0x18>
   1e360:	079a      	lsls	r2, r3, #30
   1e362:	d10e      	bne.n	1e382 <qspi_nor_write+0x36>
	if ((addr % 4U) != 0) {
   1e364:	07bb      	lsls	r3, r7, #30
   1e366:	d10c      	bne.n	1e382 <qspi_nor_write+0x36>
	if (addr < 0 ||
   1e368:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   1e36a:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1e36c:	db03      	blt.n	1e376 <qspi_nor_write+0x2a>
   1e36e:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1e370:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   1e372:	4293      	cmp	r3, r2
   1e374:	d908      	bls.n	1e388 <qspi_nor_write+0x3c>
		LOG_ERR("write error: address or size "
   1e376:	4841      	ldr	r0, [pc, #260]	; (1e47c <qspi_nor_write+0x130>)
   1e378:	4633      	mov	r3, r6
   1e37a:	463a      	mov	r2, r7
   1e37c:	2145      	movs	r1, #69	; 0x45
   1e37e:	f00a fa0f 	bl	287a0 <z_log_minimal_printk>
		return -EINVAL;
   1e382:	f06f 0415 	mvn.w	r4, #21
   1e386:	e071      	b.n	1e46c <qspi_nor_write+0x120>
	int rc = qspi_device_init(dev);
   1e388:	4628      	mov	r0, r5
   1e38a:	f7ff fd51 	bl	1de30 <qspi_device_init>
	if (rc != 0) {
   1e38e:	4604      	mov	r4, r0
   1e390:	2800      	cmp	r0, #0
   1e392:	d168      	bne.n	1e466 <qspi_nor_write+0x11a>
	qspi_trans_lock(dev);
   1e394:	6928      	ldr	r0, [r5, #16]
   1e396:	f00d f8d1 	bl	2b53c <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1e39a:	4621      	mov	r1, r4
   1e39c:	4628      	mov	r0, r5
   1e39e:	f00d f8d3 	bl	2b548 <qspi_nor_write_protection_set>
   1e3a2:	4604      	mov	r4, r0
	qspi_lock(dev);
   1e3a4:	6928      	ldr	r0, [r5, #16]
   1e3a6:	f00d f8c2 	bl	2b52e <qspi_lock.isra.0>
	if (!res) {
   1e3aa:	2c00      	cmp	r4, #0
   1e3ac:	d148      	bne.n	1e440 <qspi_nor_write+0xf4>
		if (size < 4U) {
   1e3ae:	2e03      	cmp	r6, #3
   1e3b0:	d820      	bhi.n	1e3f4 <qspi_nor_write+0xa8>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1e3b2:	2104      	movs	r1, #4
   1e3b4:	463a      	mov	r2, r7
   1e3b6:	eb0d 0001 	add.w	r0, sp, r1
   1e3ba:	f00d fc84 	bl	2bcc6 <nrfx_qspi_read>
   1e3be:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1e3c0:	4601      	mov	r1, r0
   1e3c2:	6928      	ldr	r0, [r5, #16]
   1e3c4:	f7ff fd26 	bl	1de14 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1e3c8:	4b2d      	ldr	r3, [pc, #180]	; (1e480 <qspi_nor_write+0x134>)
   1e3ca:	429c      	cmp	r4, r3
   1e3cc:	d138      	bne.n	1e440 <qspi_nor_write+0xf4>
		memcpy(buf, sptr, slen);
   1e3ce:	2304      	movs	r3, #4
   1e3d0:	4632      	mov	r2, r6
   1e3d2:	4641      	mov	r1, r8
   1e3d4:	eb0d 0003 	add.w	r0, sp, r3
   1e3d8:	f00d fec7 	bl	2c16a <__memcpy_chk>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1e3dc:	2104      	movs	r1, #4
   1e3de:	463a      	mov	r2, r7
   1e3e0:	eb0d 0001 	add.w	r0, sp, r1
			res = nrfx_qspi_write(src, size, addr);
   1e3e4:	f00d fc6c 	bl	2bcc0 <nrfx_qspi_write>
   1e3e8:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1e3ea:	4601      	mov	r1, r0
   1e3ec:	6928      	ldr	r0, [r5, #16]
   1e3ee:	f7ff fd11 	bl	1de14 <qspi_wait_for_completion.isra.0>
   1e3f2:	e025      	b.n	1e440 <qspi_nor_write+0xf4>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1e3f4:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1e3f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1e3fc:	d03a      	beq.n	1e474 <qspi_nor_write+0x128>
			if (res == NRFX_SUCCESS) {
   1e3fe:	f8df a080 	ldr.w	sl, [pc, #128]	; 1e480 <qspi_nor_write+0x134>
			size_t len = MIN(slen, sizeof(buf));
   1e402:	2e04      	cmp	r6, #4
			memcpy(buf, sp, len);
   1e404:	f04f 0304 	mov.w	r3, #4
			size_t len = MIN(slen, sizeof(buf));
   1e408:	46b1      	mov	r9, r6
   1e40a:	bf28      	it	cs
   1e40c:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   1e410:	eb0d 0003 	add.w	r0, sp, r3
   1e414:	464a      	mov	r2, r9
   1e416:	4641      	mov	r1, r8
   1e418:	f00d fea7 	bl	2c16a <__memcpy_chk>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1e41c:	2104      	movs	r1, #4
   1e41e:	463a      	mov	r2, r7
   1e420:	eb0d 0001 	add.w	r0, sp, r1
   1e424:	f00d fc4c 	bl	2bcc0 <nrfx_qspi_write>
   1e428:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1e42a:	4601      	mov	r1, r0
   1e42c:	6928      	ldr	r0, [r5, #16]
   1e42e:	f7ff fcf1 	bl	1de14 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1e432:	4554      	cmp	r4, sl
   1e434:	d104      	bne.n	1e440 <qspi_nor_write+0xf4>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1e436:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   1e43a:	44c8      	add	r8, r9
				addr += len;
   1e43c:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1e43e:	d1e0      	bne.n	1e402 <qspi_nor_write+0xb6>
	k_sem_give(&dev_data->sem);
   1e440:	6928      	ldr	r0, [r5, #16]
   1e442:	3018      	adds	r0, #24
   1e444:	f00d f86b 	bl	2b51e <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1e448:	2101      	movs	r1, #1
   1e44a:	4628      	mov	r0, r5
   1e44c:	f00d f87c 	bl	2b548 <qspi_nor_write_protection_set>
   1e450:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1e452:	6928      	ldr	r0, [r5, #16]
   1e454:	f00d f863 	bl	2b51e <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1e458:	2c00      	cmp	r4, #0
   1e45a:	bf14      	ite	ne
   1e45c:	4620      	movne	r0, r4
   1e45e:	4630      	moveq	r0, r6
   1e460:	f7ff fcbe 	bl	1dde0 <qspi_get_zephyr_ret_code>
   1e464:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1e466:	4628      	mov	r0, r5
   1e468:	f7ff fd4c 	bl	1df04 <qspi_device_uninit>
}
   1e46c:	4620      	mov	r0, r4
   1e46e:	b002      	add	sp, #8
   1e470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = nrfx_qspi_write(src, size, addr);
   1e474:	463a      	mov	r2, r7
   1e476:	4631      	mov	r1, r6
   1e478:	4640      	mov	r0, r8
   1e47a:	e7b3      	b.n	1e3e4 <qspi_nor_write+0x98>
   1e47c:	0002fdb4 	.word	0x0002fdb4
   1e480:	0bad0000 	.word	0x0bad0000

0001e484 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1e484:	4b02      	ldr	r3, [pc, #8]	; (1e490 <flash_nrf_pages_layout+0xc>)
   1e486:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1e488:	2301      	movs	r3, #1
   1e48a:	6013      	str	r3, [r2, #0]
}
   1e48c:	4770      	bx	lr
   1e48e:	bf00      	nop
   1e490:	20002998 	.word	0x20002998

0001e494 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1e494:	4800      	ldr	r0, [pc, #0]	; (1e498 <flash_nrf_get_parameters+0x4>)
   1e496:	4770      	bx	lr
   1e498:	0002ce7c 	.word	0x0002ce7c

0001e49c <flash_nrf_read>:
{
   1e49c:	b570      	push	{r4, r5, r6, lr}
   1e49e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1e4a0:	4628      	mov	r0, r5
   1e4a2:	4619      	mov	r1, r3
{
   1e4a4:	4616      	mov	r6, r2
   1e4a6:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e4a8:	f00d f87e 	bl	2b5a8 <is_regular_addr_valid>
   1e4ac:	b940      	cbnz	r0, 1e4c0 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e4ae:	4809      	ldr	r0, [pc, #36]	; (1e4d4 <flash_nrf_read+0x38>)
   1e4b0:	4623      	mov	r3, r4
   1e4b2:	462a      	mov	r2, r5
   1e4b4:	2145      	movs	r1, #69	; 0x45
   1e4b6:	f00a f973 	bl	287a0 <z_log_minimal_printk>
   1e4ba:	f06f 0015 	mvn.w	r0, #21
}
   1e4be:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1e4c0:	b134      	cbz	r4, 1e4d0 <flash_nrf_read+0x34>
   1e4c2:	4622      	mov	r2, r4
   1e4c4:	4629      	mov	r1, r5
   1e4c6:	4630      	mov	r0, r6
   1e4c8:	f00d fe41 	bl	2c14e <memcpy>
	return 0;
   1e4cc:	2000      	movs	r0, #0
   1e4ce:	e7f6      	b.n	1e4be <flash_nrf_read+0x22>
		return 0;
   1e4d0:	4620      	mov	r0, r4
   1e4d2:	e7f4      	b.n	1e4be <flash_nrf_read+0x22>
   1e4d4:	0002fe19 	.word	0x0002fe19

0001e4d8 <restore_pofwarn.part.0>:
	}

	return 0;
}

static void restore_pofwarn(void)
   1e4d8:	b508      	push	{r3, lr}
    uint32_t pofcon = p_reg->POFCON;
   1e4da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1e4de:	2001      	movs	r0, #1
   1e4e0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1e4e4:	f3c1 0143 	ubfx	r1, r1, #1, #4
   1e4e8:	f00d f86f 	bl	2b5ca <nrf_power_pofcon_set.constprop.0>
		pofcon_enabled = false;
   1e4ec:	4b01      	ldr	r3, [pc, #4]	; (1e4f4 <restore_pofwarn.part.0+0x1c>)
   1e4ee:	2200      	movs	r2, #0
   1e4f0:	701a      	strb	r2, [r3, #0]
	}
}
   1e4f2:	bd08      	pop	{r3, pc}
   1e4f4:	200037da 	.word	0x200037da

0001e4f8 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e4f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   1e4fc:	b510      	push	{r4, lr}
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1e4fe:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1e502:	2b08      	cmp	r3, #8
   1e504:	d118      	bne.n	1e538 <suspend_pofwarn+0x40>
   1e506:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1e50a:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
	if (enabled) {
   1e50e:	f011 0001 	ands.w	r0, r1, #1
   1e512:	d00c      	beq.n	1e52e <suspend_pofwarn+0x36>
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
   1e514:	2000      	movs	r0, #0
   1e516:	f3c1 0143 	ubfx	r1, r1, #1, #4
   1e51a:	f00d f856 	bl	2b5ca <nrf_power_pofcon_set.constprop.0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e51e:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1e522:	b128      	cbz	r0, 1e530 <suspend_pofwarn+0x38>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1e524:	2001      	movs	r0, #1
   1e526:	f00d f850 	bl	2b5ca <nrf_power_pofcon_set.constprop.0>
			return -ECANCELED;
   1e52a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1e52e:	bd10      	pop	{r4, pc}
		pofcon_enabled = enabled;
   1e530:	4b02      	ldr	r3, [pc, #8]	; (1e53c <suspend_pofwarn+0x44>)
   1e532:	2201      	movs	r2, #1
   1e534:	701a      	strb	r2, [r3, #0]
   1e536:	e7fa      	b.n	1e52e <suspend_pofwarn+0x36>
		return 0;
   1e538:	2000      	movs	r0, #0
   1e53a:	e7f8      	b.n	1e52e <suspend_pofwarn+0x36>
   1e53c:	200037da 	.word	0x200037da

0001e540 <nrf_flash_init>:
{
   1e540:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e542:	2201      	movs	r2, #1
   1e544:	4611      	mov	r1, r2
   1e546:	4807      	ldr	r0, [pc, #28]	; (1e564 <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e548:	4c07      	ldr	r4, [pc, #28]	; (1e568 <nrf_flash_init+0x28>)
   1e54a:	f00d fc4e 	bl	2bdea <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1e54e:	f001 feff 	bl	20350 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e552:	f00d fba3 	bl	2bc9c <nrfx_nvmc_flash_page_count_get>
   1e556:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1e558:	f00d fb9c 	bl	2bc94 <nrfx_nvmc_flash_page_size_get>
   1e55c:	6060      	str	r0, [r4, #4]
}
   1e55e:	2000      	movs	r0, #0
   1e560:	bd10      	pop	{r4, pc}
   1e562:	bf00      	nop
   1e564:	200029a0 	.word	0x200029a0
   1e568:	20002998 	.word	0x20002998

0001e56c <erase_op>:
{
   1e56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e56e:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e570:	f00d fb90 	bl	2bc94 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1e574:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e576:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1e578:	b10b      	cbz	r3, 1e57e <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1e57a:	f00d fadf 	bl	2bb3c <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1e57e:	4f13      	ldr	r7, [pc, #76]	; (1e5cc <erase_op+0x60>)
{
   1e580:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   1e582:	f7ff ffb9 	bl	1e4f8 <suspend_pofwarn>
   1e586:	b9e8      	cbnz	r0, 1e5c4 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1e588:	6860      	ldr	r0, [r4, #4]
   1e58a:	f002 fcf9 	bl	20f80 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1e58e:	68a3      	ldr	r3, [r4, #8]
   1e590:	1b5b      	subs	r3, r3, r5
   1e592:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1e594:	6863      	ldr	r3, [r4, #4]
   1e596:	442b      	add	r3, r5
   1e598:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1e59a:	783b      	ldrb	r3, [r7, #0]
   1e59c:	b10b      	cbz	r3, 1e5a2 <erase_op+0x36>
   1e59e:	f7ff ff9b 	bl	1e4d8 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   1e5a2:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e5a4:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1e5a6:	b93b      	cbnz	r3, 1e5b8 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   1e5a8:	68a3      	ldr	r3, [r4, #8]
   1e5aa:	2b00      	cmp	r3, #0
   1e5ac:	d1e9      	bne.n	1e582 <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1e5ae:	68a0      	ldr	r0, [r4, #8]
   1e5b0:	3800      	subs	r0, #0
   1e5b2:	bf18      	it	ne
   1e5b4:	2001      	movne	r0, #1
}
   1e5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   1e5b8:	4630      	mov	r0, r6
   1e5ba:	f001 ff8b 	bl	204d4 <nrf_flash_sync_check_time_limit>
   1e5be:	2800      	cmp	r0, #0
   1e5c0:	d0f2      	beq.n	1e5a8 <erase_op+0x3c>
   1e5c2:	e7f4      	b.n	1e5ae <erase_op+0x42>
			return -ECANCELED;
   1e5c4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e5c8:	e7f5      	b.n	1e5b6 <erase_op+0x4a>
   1e5ca:	bf00      	nop
   1e5cc:	200037da 	.word	0x200037da

0001e5d0 <flash_nrf_erase>:
{
   1e5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5d2:	b087      	sub	sp, #28
   1e5d4:	460e      	mov	r6, r1
   1e5d6:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e5d8:	f00d fb5c 	bl	2bc94 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1e5dc:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e5de:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1e5e0:	4630      	mov	r0, r6
   1e5e2:	f00c ffe1 	bl	2b5a8 <is_regular_addr_valid>
   1e5e6:	b358      	cbz	r0, 1e640 <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e5e8:	fbb6 f3f7 	udiv	r3, r6, r7
   1e5ec:	fb07 6313 	mls	r3, r7, r3, r6
   1e5f0:	b923      	cbnz	r3, 1e5fc <flash_nrf_erase+0x2c>
   1e5f2:	fbb5 f4f7 	udiv	r4, r5, r7
   1e5f6:	fb07 5414 	mls	r4, r7, r4, r5
   1e5fa:	b154      	cbz	r4, 1e612 <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e5fc:	481f      	ldr	r0, [pc, #124]	; (1e67c <flash_nrf_erase+0xac>)
   1e5fe:	462b      	mov	r3, r5
   1e600:	4632      	mov	r2, r6
   1e602:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e604:	f00a f8cc 	bl	287a0 <z_log_minimal_printk>
		return -EINVAL;
   1e608:	f06f 0415 	mvn.w	r4, #21
}
   1e60c:	4620      	mov	r0, r4
   1e60e:	b007      	add	sp, #28
   1e610:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1e612:	42bd      	cmp	r5, r7
   1e614:	d3fa      	bcc.n	1e60c <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1e616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e61a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e61e:	4818      	ldr	r0, [pc, #96]	; (1e680 <flash_nrf_erase+0xb0>)
   1e620:	f004 f860 	bl	226e4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e624:	f00d fa88 	bl	2bb38 <nrf_flash_sync_is_required>
   1e628:	ab02      	add	r3, sp, #8
   1e62a:	4601      	mov	r1, r0
   1e62c:	b968      	cbnz	r0, 1e64a <flash_nrf_erase+0x7a>
	struct flash_context context = {
   1e62e:	2210      	movs	r2, #16
   1e630:	4618      	mov	r0, r3
   1e632:	f00d fdc7 	bl	2c1c4 <memset>
   1e636:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   1e63a:	f7ff ff97 	bl	1e56c <erase_op>
   1e63e:	e017      	b.n	1e670 <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e640:	4810      	ldr	r0, [pc, #64]	; (1e684 <flash_nrf_erase+0xb4>)
   1e642:	462b      	mov	r3, r5
   1e644:	4632      	mov	r2, r6
   1e646:	2145      	movs	r1, #69	; 0x45
   1e648:	e7dc      	b.n	1e604 <flash_nrf_erase+0x34>
	struct flash_context context = {
   1e64a:	2210      	movs	r2, #16
   1e64c:	4621      	mov	r1, r4
   1e64e:	4618      	mov	r0, r3
   1e650:	f00d fdb8 	bl	2c1c4 <memset>
   1e654:	2201      	movs	r2, #1
   1e656:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e65a:	4a0b      	ldr	r2, [pc, #44]	; (1e688 <flash_nrf_erase+0xb8>)
   1e65c:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e660:	480a      	ldr	r0, [pc, #40]	; (1e68c <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   1e662:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e666:	f001 fe7b 	bl	20360 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e66a:	4668      	mov	r0, sp
   1e66c:	f001 fe7e 	bl	2036c <nrf_flash_sync_exe>
	return	erase_op(&context);
   1e670:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e672:	4803      	ldr	r0, [pc, #12]	; (1e680 <flash_nrf_erase+0xb0>)
   1e674:	f003 fffc 	bl	22670 <z_impl_k_sem_give>
}
   1e678:	e7c8      	b.n	1e60c <flash_nrf_erase+0x3c>
   1e67a:	bf00      	nop
   1e67c:	0002fe3b 	.word	0x0002fe3b
   1e680:	200029a0 	.word	0x200029a0
   1e684:	0002fe19 	.word	0x0002fe19
   1e688:	0001e56d 	.word	0x0001e56d
   1e68c:	00015e64 	.word	0x00015e64

0001e690 <write_op>:
{
   1e690:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   1e692:	7b03      	ldrb	r3, [r0, #12]
{
   1e694:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1e696:	b10b      	cbz	r3, 1e69c <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1e698:	f00d fa50 	bl	2bb3c <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   1e69c:	4e19      	ldr	r6, [pc, #100]	; (1e704 <write_op+0x74>)
{
   1e69e:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1e6a0:	68a3      	ldr	r3, [r4, #8]
   1e6a2:	2b03      	cmp	r3, #3
   1e6a4:	d806      	bhi.n	1e6b4 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e6a6:	4a18      	ldr	r2, [pc, #96]	; (1e708 <write_op+0x78>)
   1e6a8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e6ac:	07db      	lsls	r3, r3, #31
   1e6ae:	d5fb      	bpl.n	1e6a8 <write_op+0x18>
	return FLASH_OP_DONE;
   1e6b0:	2000      	movs	r0, #0
}
   1e6b2:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   1e6b4:	f7ff ff20 	bl	1e4f8 <suspend_pofwarn>
   1e6b8:	bb08      	cbnz	r0, 1e6fe <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1e6ba:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1e6bc:	6860      	ldr	r0, [r4, #4]
   1e6be:	6819      	ldr	r1, [r3, #0]
   1e6c0:	f002 fc96 	bl	20ff0 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1e6c4:	7833      	ldrb	r3, [r6, #0]
   1e6c6:	b10b      	cbz	r3, 1e6cc <write_op+0x3c>
   1e6c8:	f7ff ff06 	bl	1e4d8 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   1e6cc:	6863      	ldr	r3, [r4, #4]
   1e6ce:	3304      	adds	r3, #4
   1e6d0:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1e6d2:	6823      	ldr	r3, [r4, #0]
   1e6d4:	3304      	adds	r3, #4
   1e6d6:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1e6d8:	68a3      	ldr	r3, [r4, #8]
   1e6da:	3b04      	subs	r3, #4
   1e6dc:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1e6de:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e6e0:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1e6e2:	2b00      	cmp	r3, #0
   1e6e4:	d0dc      	beq.n	1e6a0 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   1e6e6:	4628      	mov	r0, r5
   1e6e8:	f001 fef4 	bl	204d4 <nrf_flash_sync_check_time_limit>
   1e6ec:	2800      	cmp	r0, #0
   1e6ee:	d0d7      	beq.n	1e6a0 <write_op+0x10>
   1e6f0:	4a05      	ldr	r2, [pc, #20]	; (1e708 <write_op+0x78>)
   1e6f2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e6f6:	07d9      	lsls	r1, r3, #31
   1e6f8:	d5fb      	bpl.n	1e6f2 <write_op+0x62>
				return FLASH_OP_ONGOING;
   1e6fa:	2001      	movs	r0, #1
   1e6fc:	e7d9      	b.n	1e6b2 <write_op+0x22>
			return -ECANCELED;
   1e6fe:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e702:	e7d6      	b.n	1e6b2 <write_op+0x22>
   1e704:	200037da 	.word	0x200037da
   1e708:	4001e000 	.word	0x4001e000

0001e70c <flash_nrf_write>:
{
   1e70c:	b570      	push	{r4, r5, r6, lr}
   1e70e:	460d      	mov	r5, r1
   1e710:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1e712:	4619      	mov	r1, r3
   1e714:	4628      	mov	r0, r5
{
   1e716:	4616      	mov	r6, r2
   1e718:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e71a:	f00c ff45 	bl	2b5a8 <is_regular_addr_valid>
   1e71e:	b950      	cbnz	r0, 1e736 <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e720:	481d      	ldr	r0, [pc, #116]	; (1e798 <flash_nrf_write+0x8c>)
   1e722:	4623      	mov	r3, r4
   1e724:	462a      	mov	r2, r5
   1e726:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e728:	f00a f83a 	bl	287a0 <z_log_minimal_printk>
		return -EINVAL;
   1e72c:	f06f 0415 	mvn.w	r4, #21
}
   1e730:	4620      	mov	r0, r4
   1e732:	b006      	add	sp, #24
   1e734:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1e736:	ea45 0304 	orr.w	r3, r5, r4
   1e73a:	079b      	lsls	r3, r3, #30
   1e73c:	d004      	beq.n	1e748 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e73e:	4817      	ldr	r0, [pc, #92]	; (1e79c <flash_nrf_write+0x90>)
   1e740:	4623      	mov	r3, r4
   1e742:	462a      	mov	r2, r5
   1e744:	2145      	movs	r1, #69	; 0x45
   1e746:	e7ef      	b.n	1e728 <flash_nrf_write+0x1c>
	if (!len) {
   1e748:	2c00      	cmp	r4, #0
   1e74a:	d0f1      	beq.n	1e730 <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   1e74c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e754:	4812      	ldr	r0, [pc, #72]	; (1e7a0 <flash_nrf_write+0x94>)
   1e756:	f003 ffc5 	bl	226e4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e75a:	f00d f9ed 	bl	2bb38 <nrf_flash_sync_is_required>
   1e75e:	4603      	mov	r3, r0
	struct flash_context context = {
   1e760:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1e764:	a802      	add	r0, sp, #8
   1e766:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1e768:	b18b      	cbz	r3, 1e78e <flash_nrf_write+0x82>
	struct flash_context context = {
   1e76a:	2301      	movs	r3, #1
   1e76c:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e770:	4b0c      	ldr	r3, [pc, #48]	; (1e7a4 <flash_nrf_write+0x98>)
   1e772:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1e776:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1e77a:	f001 fdf1 	bl	20360 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e77e:	4668      	mov	r0, sp
   1e780:	f001 fdf4 	bl	2036c <nrf_flash_sync_exe>
	return write_op(&context);
   1e784:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e786:	4806      	ldr	r0, [pc, #24]	; (1e7a0 <flash_nrf_write+0x94>)
   1e788:	f003 ff72 	bl	22670 <z_impl_k_sem_give>
}
   1e78c:	e7d0      	b.n	1e730 <flash_nrf_write+0x24>
	struct flash_context context = {
   1e78e:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1e792:	f7ff ff7d 	bl	1e690 <write_op>
   1e796:	e7f5      	b.n	1e784 <flash_nrf_write+0x78>
   1e798:	0002fe19 	.word	0x0002fe19
   1e79c:	0002fe5f 	.word	0x0002fe5f
   1e7a0:	200029a0 	.word	0x200029a0
   1e7a4:	0001e691 	.word	0x0001e691

0001e7a8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1e7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e7aa:	794b      	ldrb	r3, [r1, #5]
   1e7ac:	2b01      	cmp	r3, #1
   1e7ae:	d026      	beq.n	1e7fe <uarte_nrfx_configure+0x56>
   1e7b0:	2b03      	cmp	r3, #3
   1e7b2:	d121      	bne.n	1e7f8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1e7b4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e7b6:	798b      	ldrb	r3, [r1, #6]
   1e7b8:	2b03      	cmp	r3, #3
   1e7ba:	d11d      	bne.n	1e7f8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e7bc:	79cc      	ldrb	r4, [r1, #7]
   1e7be:	b10c      	cbz	r4, 1e7c4 <uarte_nrfx_configure+0x1c>
   1e7c0:	2c01      	cmp	r4, #1
   1e7c2:	d119      	bne.n	1e7f8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e7c4:	790a      	ldrb	r2, [r1, #4]
   1e7c6:	b112      	cbz	r2, 1e7ce <uarte_nrfx_configure+0x26>
   1e7c8:	2a02      	cmp	r2, #2
   1e7ca:	d115      	bne.n	1e7f8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1e7cc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e7ce:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e7d0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1e7d2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e7d6:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1e7d8:	d065      	beq.n	1e8a6 <uarte_nrfx_configure+0xfe>
   1e7da:	d82d      	bhi.n	1e838 <uarte_nrfx_configure+0x90>
   1e7dc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e7e0:	d064      	beq.n	1e8ac <uarte_nrfx_configure+0x104>
   1e7e2:	d816      	bhi.n	1e812 <uarte_nrfx_configure+0x6a>
   1e7e4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e7e8:	d062      	beq.n	1e8b0 <uarte_nrfx_configure+0x108>
   1e7ea:	d80a      	bhi.n	1e802 <uarte_nrfx_configure+0x5a>
   1e7ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e7f0:	d061      	beq.n	1e8b6 <uarte_nrfx_configure+0x10e>
   1e7f2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e7f6:	d061      	beq.n	1e8bc <uarte_nrfx_configure+0x114>
   1e7f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e7fc:	e052      	b.n	1e8a4 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   1e7fe:	2600      	movs	r6, #0
   1e800:	e7d9      	b.n	1e7b6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1e802:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e806:	d05c      	beq.n	1e8c2 <uarte_nrfx_configure+0x11a>
   1e808:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e80c:	d1f4      	bne.n	1e7f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e80e:	4b37      	ldr	r3, [pc, #220]	; (1e8ec <uarte_nrfx_configure+0x144>)
   1e810:	e03c      	b.n	1e88c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e812:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e816:	d057      	beq.n	1e8c8 <uarte_nrfx_configure+0x120>
   1e818:	d807      	bhi.n	1e82a <uarte_nrfx_configure+0x82>
   1e81a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e81e:	d055      	beq.n	1e8cc <uarte_nrfx_configure+0x124>
   1e820:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e824:	d1e8      	bne.n	1e7f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e826:	4b32      	ldr	r3, [pc, #200]	; (1e8f0 <uarte_nrfx_configure+0x148>)
   1e828:	e030      	b.n	1e88c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e82a:	f647 2712 	movw	r7, #31250	; 0x7a12
   1e82e:	42bb      	cmp	r3, r7
   1e830:	d1e2      	bne.n	1e7f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e832:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e836:	e029      	b.n	1e88c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e838:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e83c:	d048      	beq.n	1e8d0 <uarte_nrfx_configure+0x128>
   1e83e:	d813      	bhi.n	1e868 <uarte_nrfx_configure+0xc0>
   1e840:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e844:	d047      	beq.n	1e8d6 <uarte_nrfx_configure+0x12e>
   1e846:	d809      	bhi.n	1e85c <uarte_nrfx_configure+0xb4>
   1e848:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1e84c:	42bb      	cmp	r3, r7
   1e84e:	d044      	beq.n	1e8da <uarte_nrfx_configure+0x132>
   1e850:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e854:	d1d0      	bne.n	1e7f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e856:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e85a:	e017      	b.n	1e88c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e85c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e860:	d1ca      	bne.n	1e7f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e862:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e866:	e011      	b.n	1e88c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e868:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e86c:	d038      	beq.n	1e8e0 <uarte_nrfx_configure+0x138>
   1e86e:	d808      	bhi.n	1e882 <uarte_nrfx_configure+0xda>
   1e870:	4f20      	ldr	r7, [pc, #128]	; (1e8f4 <uarte_nrfx_configure+0x14c>)
   1e872:	42bb      	cmp	r3, r7
   1e874:	d037      	beq.n	1e8e6 <uarte_nrfx_configure+0x13e>
   1e876:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e87a:	d1bd      	bne.n	1e7f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e87c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e880:	e004      	b.n	1e88c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e882:	4f1d      	ldr	r7, [pc, #116]	; (1e8f8 <uarte_nrfx_configure+0x150>)
   1e884:	42bb      	cmp	r3, r7
   1e886:	d1b7      	bne.n	1e7f8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e888:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1e88c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e88e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1e892:	1d03      	adds	r3, r0, #4
   1e894:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1e896:	4334      	orrs	r4, r6
   1e898:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e89a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1e89e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e8a2:	2000      	movs	r0, #0
}
   1e8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e8a6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e8aa:	e7ef      	b.n	1e88c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e8ac:	4b13      	ldr	r3, [pc, #76]	; (1e8fc <uarte_nrfx_configure+0x154>)
   1e8ae:	e7ed      	b.n	1e88c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e8b0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e8b4:	e7ea      	b.n	1e88c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1e8b6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e8ba:	e7e7      	b.n	1e88c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e8bc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e8c0:	e7e4      	b.n	1e88c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e8c2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e8c6:	e7e1      	b.n	1e88c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e8c8:	4b0d      	ldr	r3, [pc, #52]	; (1e900 <uarte_nrfx_configure+0x158>)
   1e8ca:	e7df      	b.n	1e88c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e8cc:	4b0d      	ldr	r3, [pc, #52]	; (1e904 <uarte_nrfx_configure+0x15c>)
   1e8ce:	e7dd      	b.n	1e88c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e8d0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e8d4:	e7da      	b.n	1e88c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e8d6:	4b0c      	ldr	r3, [pc, #48]	; (1e908 <uarte_nrfx_configure+0x160>)
   1e8d8:	e7d8      	b.n	1e88c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e8da:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e8de:	e7d5      	b.n	1e88c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e8e0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e8e4:	e7d2      	b.n	1e88c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e8e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e8ea:	e7cf      	b.n	1e88c <uarte_nrfx_configure+0xe4>
   1e8ec:	0013b000 	.word	0x0013b000
   1e8f0:	004ea000 	.word	0x004ea000
   1e8f4:	0003d090 	.word	0x0003d090
   1e8f8:	000f4240 	.word	0x000f4240
   1e8fc:	00275000 	.word	0x00275000
   1e900:	0075c000 	.word	0x0075c000
   1e904:	003af000 	.word	0x003af000
   1e908:	013a9000 	.word	0x013a9000

0001e90c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1e90c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1e910:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1e914:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1e916:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1e91a:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e91e:	2100      	movs	r1, #0
   1e920:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   1e924:	4607      	mov	r7, r0
	data->dev = dev;
   1e926:	6030      	str	r0, [r6, #0]
	ret = pinctrl_lookup_state(config, id, &state);
   1e928:	aa01      	add	r2, sp, #4
   1e92a:	4648      	mov	r0, r9
   1e92c:	f00c ff6c 	bl	2b808 <pinctrl_lookup_state>
	if (ret < 0) {
   1e930:	1e05      	subs	r5, r0, #0
   1e932:	db1f      	blt.n	1e974 <uarte_instance_init.constprop.0+0x68>
	return pinctrl_apply_state_direct(config, state);
   1e934:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1e936:	f8d9 2000 	ldr.w	r2, [r9]
   1e93a:	7919      	ldrb	r1, [r3, #4]
   1e93c:	6818      	ldr	r0, [r3, #0]
   1e93e:	f00c ffba 	bl	2b8b6 <pinctrl_configure_pins>
	if (err < 0) {
   1e942:	1e05      	subs	r5, r0, #0
   1e944:	db16      	blt.n	1e974 <uarte_instance_init.constprop.0+0x68>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1e946:	1d31      	adds	r1, r6, #4
   1e948:	4638      	mov	r0, r7
   1e94a:	f7ff ff2d 	bl	1e7a8 <uarte_nrfx_configure>
	if (err) {
   1e94e:	4605      	mov	r5, r0
   1e950:	b980      	cbnz	r0, 1e974 <uarte_instance_init.constprop.0+0x68>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1e952:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1e956:	0799      	lsls	r1, r3, #30
   1e958:	d523      	bpl.n	1e9a2 <uarte_instance_init.constprop.0+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e95a:	f106 0018 	add.w	r0, r6, #24
   1e95e:	f002 fb79 	bl	21054 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e962:	4b24      	ldr	r3, [pc, #144]	; (1e9f4 <uarte_instance_init.constprop.0+0xe8>)
   1e964:	4298      	cmp	r0, r3
   1e966:	d009      	beq.n	1e97c <uarte_instance_init.constprop.0+0x70>
		LOG_ERR("Failed to allocate PPI Channel");
   1e968:	4823      	ldr	r0, [pc, #140]	; (1e9f8 <uarte_instance_init.constprop.0+0xec>)
   1e96a:	2145      	movs	r1, #69	; 0x45
   1e96c:	f009 ff18 	bl	287a0 <z_log_minimal_printk>
		return -EIO;
   1e970:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1e974:	4628      	mov	r0, r5
   1e976:	b003      	add	sp, #12
   1e978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1e97c:	7e30      	ldrb	r0, [r6, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e97e:	00c3      	lsls	r3, r0, #3
   1e980:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e984:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1e988:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e98c:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e990:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e994:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1e998:	4a18      	ldr	r2, [pc, #96]	; (1e9fc <uarte_instance_init.constprop.0+0xf0>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e99a:	2301      	movs	r3, #1
   1e99c:	4083      	lsls	r3, r0
   1e99e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e9a2:	2308      	movs	r3, #8
   1e9a4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1e9a8:	f898 3008 	ldrb.w	r3, [r8, #8]
   1e9ac:	b953      	cbnz	r3, 1e9c4 <uarte_instance_init.constprop.0+0xb8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e9ae:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e9b2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e9b6:	6973      	ldr	r3, [r6, #20]
   1e9b8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e9bc:	2301      	movs	r3, #1
   1e9be:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e9c2:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1e9c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e9c8:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1e9ca:	bf5c      	itt	pl
   1e9cc:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1e9d0:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e9d4:	06db      	lsls	r3, r3, #27
   1e9d6:	bf44      	itt	mi
   1e9d8:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1e9dc:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e9e0:	6933      	ldr	r3, [r6, #16]
   1e9e2:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e9e6:	2300      	movs	r3, #0
   1e9e8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e9ec:	2301      	movs	r3, #1
   1e9ee:	60a3      	str	r3, [r4, #8]
   1e9f0:	60e3      	str	r3, [r4, #12]
	return 0;
   1e9f2:	e7bf      	b.n	1e974 <uarte_instance_init.constprop.0+0x68>
   1e9f4:	0bad0000 	.word	0x0bad0000
   1e9f8:	0002fea6 	.word	0x0002fea6
   1e9fc:	4001f000 	.word	0x4001f000

0001ea00 <uarte_nrfx_poll_out>:
{
   1ea00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   1ea02:	6907      	ldr	r7, [r0, #16]
{
   1ea04:	4604      	mov	r4, r0
   1ea06:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ea08:	f00d f99e 	bl	2bd48 <k_is_in_isr>
   1ea0c:	b910      	cbnz	r0, 1ea14 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1ea0e:	4b2d      	ldr	r3, [pc, #180]	; (1eac4 <uarte_nrfx_poll_out+0xc4>)
	if (isr_mode) {
   1ea10:	781b      	ldrb	r3, [r3, #0]
   1ea12:	b98b      	cbnz	r3, 1ea38 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
   1ea14:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ea18:	f3ef 8611 	mrs	r6, BASEPRI
   1ea1c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea20:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1ea24:	6860      	ldr	r0, [r4, #4]
   1ea26:	4631      	mov	r1, r6
   1ea28:	f00c fe66 	bl	2b6f8 <is_tx_ready.isra.0>
   1ea2c:	bb30      	cbnz	r0, 1ea7c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1ea2e:	f386 8811 	msr	BASEPRI, r6
   1ea32:	f3bf 8f6f 	isb	sy
}
   1ea36:	e7ed      	b.n	1ea14 <uarte_nrfx_poll_out+0x14>
{
   1ea38:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1ea3a:	6860      	ldr	r0, [r4, #4]
   1ea3c:	f00c fe5c 	bl	2b6f8 <is_tx_ready.isra.0>
   1ea40:	b970      	cbnz	r0, 1ea60 <uarte_nrfx_poll_out+0x60>
   1ea42:	2001      	movs	r0, #1
   1ea44:	f00d f890 	bl	2bb68 <nrfx_busy_wait>
   1ea48:	3e01      	subs	r6, #1
   1ea4a:	d1f6      	bne.n	1ea3a <uarte_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   1ea4c:	2100      	movs	r1, #0
   1ea4e:	2021      	movs	r0, #33	; 0x21
   1ea50:	f005 fab6 	bl	23fc0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1ea54:	e7f0      	b.n	1ea38 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
   1ea56:	f386 8811 	msr	BASEPRI, r6
   1ea5a:	f3bf 8f6f 	isb	sy
}
   1ea5e:	e7f5      	b.n	1ea4c <uarte_nrfx_poll_out+0x4c>
	__asm__ volatile(
   1ea60:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ea64:	f3ef 8611 	mrs	r6, BASEPRI
   1ea68:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea6c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1ea70:	6860      	ldr	r0, [r4, #4]
   1ea72:	4631      	mov	r1, r6
   1ea74:	f00c fe40 	bl	2b6f8 <is_tx_ready.isra.0>
   1ea78:	2800      	cmp	r0, #0
   1ea7a:	d0ec      	beq.n	1ea56 <uarte_nrfx_poll_out+0x56>
	*data->char_out = c;
   1ea7c:	693b      	ldr	r3, [r7, #16]
   1ea7e:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1ea80:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ea82:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1ea84:	6813      	ldr	r3, [r2, #0]
   1ea86:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ea8a:	2001      	movs	r0, #1
   1ea8c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ea90:	2000      	movs	r0, #0
   1ea92:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1ea96:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
   1ea9a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ea9e:	6852      	ldr	r2, [r2, #4]
   1eaa0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1eaa4:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1eaa6:	bf41      	itttt	mi
   1eaa8:	2208      	movmi	r2, #8
   1eaaa:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1eaae:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1eab2:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eab6:	2201      	movs	r2, #1
   1eab8:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1eaba:	f381 8811 	msr	BASEPRI, r1
   1eabe:	f3bf 8f6f 	isb	sy
}
   1eac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1eac4:	200043f3 	.word	0x200043f3

0001eac8 <random_byte_get>:
	__asm__ volatile(
   1eac8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eacc:	f3ef 8211 	mrs	r2, BASEPRI
   1ead0:	f383 8812 	msr	BASEPRI_MAX, r3
   1ead4:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ead8:	4b09      	ldr	r3, [pc, #36]	; (1eb00 <random_byte_get+0x38>)
   1eada:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1eade:	b161      	cbz	r1, 1eafa <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1eae0:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1eae2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1eae6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1eaea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1eaee:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1eaf0:	f382 8811 	msr	BASEPRI, r2
   1eaf4:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1eaf8:	4770      	bx	lr
	int retval = -EAGAIN;
   1eafa:	f06f 000a 	mvn.w	r0, #10
   1eafe:	e7f7      	b.n	1eaf0 <random_byte_get+0x28>
   1eb00:	4000d000 	.word	0x4000d000

0001eb04 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1eb04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eb06:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1eb08:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1eb0a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1eb0c:	f04f 0040 	mov.w	r0, #64	; 0x40
   1eb10:	f3ef 8e11 	mrs	lr, BASEPRI
   1eb14:	f380 8812 	msr	BASEPRI_MAX, r0
   1eb18:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1eb1c:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1eb1e:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1eb22:	1ba4      	subs	r4, r4, r6
   1eb24:	403c      	ands	r4, r7
	if (available < len) {
   1eb26:	42a2      	cmp	r2, r4
		len = available;
   1eb28:	bf88      	it	hi
   1eb2a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1eb2c:	18b0      	adds	r0, r6, r2
   1eb2e:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1eb30:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1eb32:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1eb34:	f38e 8811 	msr	BASEPRI, lr
   1eb38:	f3bf 8f6f 	isb	sy
   1eb3c:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1eb3e:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1eb40:	4290      	cmp	r0, r2
   1eb42:	d119      	bne.n	1eb78 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1eb44:	4566      	cmp	r6, ip
   1eb46:	d10d      	bne.n	1eb64 <rng_pool_get+0x60>
	__asm__ volatile(
   1eb48:	f04f 0540 	mov.w	r5, #64	; 0x40
   1eb4c:	f3ef 8011 	mrs	r0, BASEPRI
   1eb50:	f385 8812 	msr	BASEPRI_MAX, r5
   1eb54:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1eb58:	781d      	ldrb	r5, [r3, #0]
   1eb5a:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1eb5c:	f380 8811 	msr	BASEPRI, r0
   1eb60:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1eb64:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1eb66:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1eb68:	b290      	uxth	r0, r2
	available = available - len;
   1eb6a:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1eb6c:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1eb6e:	bf22      	ittt	cs
   1eb70:	4b06      	ldrcs	r3, [pc, #24]	; (1eb8c <rng_pool_get+0x88>)
   1eb72:	2201      	movcs	r2, #1
   1eb74:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1eb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1eb78:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1eb7c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1eb7e:	f89e e005 	ldrb.w	lr, [lr, #5]
   1eb82:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1eb86:	403d      	ands	r5, r7
   1eb88:	e7da      	b.n	1eb40 <rng_pool_get+0x3c>
   1eb8a:	bf00      	nop
   1eb8c:	4000d000 	.word	0x4000d000

0001eb90 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1eb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eb94:	4614      	mov	r4, r2
   1eb96:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1eb98:	6902      	ldr	r2, [r0, #16]
   1eb9a:	4b2c      	ldr	r3, [pc, #176]	; (1ec4c <entropy_nrf5_get_entropy_isr+0xbc>)
   1eb9c:	429a      	cmp	r2, r3
{
   1eb9e:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1eba0:	d00a      	beq.n	1ebb8 <entropy_nrf5_get_entropy_isr+0x28>
   1eba2:	492b      	ldr	r1, [pc, #172]	; (1ec50 <entropy_nrf5_get_entropy_isr+0xc0>)
   1eba4:	482b      	ldr	r0, [pc, #172]	; (1ec54 <entropy_nrf5_get_entropy_isr+0xc4>)
   1eba6:	f240 1205 	movw	r2, #261	; 0x105
   1ebaa:	f009 fdeb 	bl	28784 <assert_print>
   1ebae:	4828      	ldr	r0, [pc, #160]	; (1ec50 <entropy_nrf5_get_entropy_isr+0xc0>)
   1ebb0:	f240 1105 	movw	r1, #261	; 0x105
   1ebb4:	f009 fddf 	bl	28776 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ebb8:	43eb      	mvns	r3, r5
   1ebba:	f013 0501 	ands.w	r5, r3, #1
   1ebbe:	d006      	beq.n	1ebce <entropy_nrf5_get_entropy_isr+0x3e>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ebc0:	4825      	ldr	r0, [pc, #148]	; (1ec58 <entropy_nrf5_get_entropy_isr+0xc8>)
   1ebc2:	4622      	mov	r2, r4
   1ebc4:	4631      	mov	r1, r6
   1ebc6:	f7ff ff9d 	bl	1eb04 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ebca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ebce:	b3a4      	cbz	r4, 1ec3a <entropy_nrf5_get_entropy_isr+0xaa>
	__asm__ volatile(
   1ebd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ebd4:	f3ef 8811 	mrs	r8, BASEPRI
   1ebd8:	f383 8812 	msr	BASEPRI_MAX, r3
   1ebdc:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1ebe0:	200d      	movs	r0, #13
   1ebe2:	f7f5 fd6d 	bl	146c0 <arch_irq_is_enabled>
   1ebe6:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1ebe8:	200d      	movs	r0, #13
   1ebea:	f7f5 fd55 	bl	14698 <arch_irq_disable>
	__asm__ volatile(
   1ebee:	f388 8811 	msr	BASEPRI, r8
   1ebf2:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ebf6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1ec5c <entropy_nrf5_get_entropy_isr+0xcc>
   1ebfa:	f8df 9064 	ldr.w	r9, [pc, #100]	; 1ec60 <entropy_nrf5_get_entropy_isr+0xd0>
   1ebfe:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1ec02:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1ec06:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ec0a:	2301      	movs	r3, #1
   1ec0c:	f8c8 3000 	str.w	r3, [r8]
   1ec10:	4625      	mov	r5, r4
   1ec12:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ec16:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1ec1a:	b183      	cbz	r3, 1ec3e <entropy_nrf5_get_entropy_isr+0xae>
			byte = random_byte_get();
   1ec1c:	f7ff ff54 	bl	1eac8 <random_byte_get>
			if (byte < 0) {
   1ec20:	1e03      	subs	r3, r0, #0
   1ec22:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1ec26:	dbf6      	blt.n	1ec16 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   1ec28:	3d01      	subs	r5, #1
   1ec2a:	b2ad      	uxth	r5, r5
   1ec2c:	5573      	strb	r3, [r6, r5]
		} while (len);
   1ec2e:	2d00      	cmp	r5, #0
   1ec30:	d1f1      	bne.n	1ec16 <entropy_nrf5_get_entropy_isr+0x86>
		if (irq_enabled) {
   1ec32:	b117      	cbz	r7, 1ec3a <entropy_nrf5_get_entropy_isr+0xaa>
			irq_enable(IRQN);
   1ec34:	200d      	movs	r0, #13
   1ec36:	f7f5 fd1f 	bl	14678 <arch_irq_enable>
	return cnt;
   1ec3a:	4620      	mov	r0, r4
   1ec3c:	e7c5      	b.n	1ebca <entropy_nrf5_get_entropy_isr+0x3a>
   1ec3e:	f3bf 8f4f 	dsb	sy
				__WFE();
   1ec42:	bf20      	wfe
				__SEV();
   1ec44:	bf40      	sev
				__WFE();
   1ec46:	bf20      	wfe
   1ec48:	e7e5      	b.n	1ec16 <entropy_nrf5_get_entropy_isr+0x86>
   1ec4a:	bf00      	nop
   1ec4c:	200029b8 	.word	0x200029b8
   1ec50:	0002fef6 	.word	0x0002fef6
   1ec54:	0002d509 	.word	0x0002d509
   1ec58:	200029e8 	.word	0x200029e8
   1ec5c:	4000d000 	.word	0x4000d000
   1ec60:	e000e100 	.word	0xe000e100

0001ec64 <entropy_nrf5_get_entropy>:
{
   1ec64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1ec68:	4b1a      	ldr	r3, [pc, #104]	; (1ecd4 <entropy_nrf5_get_entropy+0x70>)
{
   1ec6a:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1ec6c:	6902      	ldr	r2, [r0, #16]
   1ec6e:	429a      	cmp	r2, r3
{
   1ec70:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1ec72:	d008      	beq.n	1ec86 <entropy_nrf5_get_entropy+0x22>
   1ec74:	4918      	ldr	r1, [pc, #96]	; (1ecd8 <entropy_nrf5_get_entropy+0x74>)
   1ec76:	4819      	ldr	r0, [pc, #100]	; (1ecdc <entropy_nrf5_get_entropy+0x78>)
   1ec78:	22e7      	movs	r2, #231	; 0xe7
   1ec7a:	f009 fd83 	bl	28784 <assert_print>
   1ec7e:	4816      	ldr	r0, [pc, #88]	; (1ecd8 <entropy_nrf5_get_entropy+0x74>)
   1ec80:	21e7      	movs	r1, #231	; 0xe7
   1ec82:	f009 fd78 	bl	28776 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1ec86:	4e13      	ldr	r6, [pc, #76]	; (1ecd4 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ec88:	f106 0745 	add.w	r7, r6, #69	; 0x45
   1ec8c:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   1ec90:	b914      	cbnz	r4, 1ec98 <entropy_nrf5_get_entropy+0x34>
}
   1ec92:	4620      	mov	r0, r4
   1ec94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ec98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ec9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eca0:	4630      	mov	r0, r6
   1eca2:	f003 fd1f 	bl	226e4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1eca6:	4622      	mov	r2, r4
   1eca8:	4649      	mov	r1, r9
   1ecaa:	4638      	mov	r0, r7
   1ecac:	f7ff ff2a 	bl	1eb04 <rng_pool_get>
   1ecb0:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1ecb2:	4630      	mov	r0, r6
   1ecb4:	f003 fcdc 	bl	22670 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ecb8:	b93d      	cbnz	r5, 1ecca <entropy_nrf5_get_entropy+0x66>
	return z_impl_k_sem_take(sem, timeout);
   1ecba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ecbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ecc2:	4640      	mov	r0, r8
   1ecc4:	f003 fd0e 	bl	226e4 <z_impl_k_sem_take>
			continue;
   1ecc8:	e7e2      	b.n	1ec90 <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
   1ecca:	1b64      	subs	r4, r4, r5
   1eccc:	b2a4      	uxth	r4, r4
		buf += bytes;
   1ecce:	44a9      	add	r9, r5
   1ecd0:	e7de      	b.n	1ec90 <entropy_nrf5_get_entropy+0x2c>
   1ecd2:	bf00      	nop
   1ecd4:	200029b8 	.word	0x200029b8
   1ecd8:	0002fef6 	.word	0x0002fef6
   1ecdc:	0002d509 	.word	0x0002d509

0001ece0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1ece0:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1ece2:	4c20      	ldr	r4, [pc, #128]	; (1ed64 <entropy_nrf5_init+0x84>)
   1ece4:	6903      	ldr	r3, [r0, #16]
   1ece6:	42a3      	cmp	r3, r4
   1ece8:	d00a      	beq.n	1ed00 <entropy_nrf5_init+0x20>
   1ecea:	491f      	ldr	r1, [pc, #124]	; (1ed68 <entropy_nrf5_init+0x88>)
   1ecec:	481f      	ldr	r0, [pc, #124]	; (1ed6c <entropy_nrf5_init+0x8c>)
   1ecee:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1ecf2:	f009 fd47 	bl	28784 <assert_print>
   1ecf6:	481c      	ldr	r0, [pc, #112]	; (1ed68 <entropy_nrf5_init+0x88>)
   1ecf8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1ecfc:	f009 fd3b 	bl	28776 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ed00:	2201      	movs	r2, #1
   1ed02:	4611      	mov	r1, r2
   1ed04:	4817      	ldr	r0, [pc, #92]	; (1ed64 <entropy_nrf5_init+0x84>)
   1ed06:	f00d f870 	bl	2bdea <z_impl_k_sem_init>
   1ed0a:	2201      	movs	r2, #1
   1ed0c:	2100      	movs	r1, #0
   1ed0e:	4818      	ldr	r0, [pc, #96]	; (1ed70 <entropy_nrf5_init+0x90>)
   1ed10:	f00d f86b 	bl	2bdea <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1ed14:	f240 4307 	movw	r3, #1031	; 0x407
   1ed18:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1ed1c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ed20:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1ed22:	230c      	movs	r3, #12
   1ed24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1ed28:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1ed2a:	4b12      	ldr	r3, [pc, #72]	; (1ed74 <entropy_nrf5_init+0x94>)
   1ed2c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1ed30:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1ed34:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1ed38:	f022 0201 	bic.w	r2, r2, #1
   1ed3c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1ed40:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ed42:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1ed46:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ed4a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1ed4e:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ed50:	6019      	str	r1, [r3, #0]
   1ed52:	200d      	movs	r0, #13
   1ed54:	f7f5 fcc2 	bl	146dc <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1ed58:	200d      	movs	r0, #13
   1ed5a:	f7f5 fc8d 	bl	14678 <arch_irq_enable>

	return 0;
}
   1ed5e:	4628      	mov	r0, r5
   1ed60:	bd38      	pop	{r3, r4, r5, pc}
   1ed62:	bf00      	nop
   1ed64:	200029b8 	.word	0x200029b8
   1ed68:	0002fef6 	.word	0x0002fef6
   1ed6c:	0002d509 	.word	0x0002d509
   1ed70:	200029d0 	.word	0x200029d0
   1ed74:	4000d000 	.word	0x4000d000

0001ed78 <isr>:
{
   1ed78:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1ed7a:	f7ff fea5 	bl	1eac8 <random_byte_get>
	if (byte < 0) {
   1ed7e:	2800      	cmp	r0, #0
   1ed80:	db20      	blt.n	1edc4 <isr+0x4c>
	uint8_t last  = rngp->last;
   1ed82:	4b17      	ldr	r3, [pc, #92]	; (1ede0 <isr+0x68>)
   1ed84:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1ed88:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1ed8c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1ed90:	1a51      	subs	r1, r2, r1
   1ed92:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1ed96:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1ed98:	d10d      	bne.n	1edb6 <isr+0x3e>
	uint8_t last  = rngp->last;
   1ed9a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ed9e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1eda2:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1eda6:	1a51      	subs	r1, r2, r1
   1eda8:	ea34 0101 	bics.w	r1, r4, r1
   1edac:	d10b      	bne.n	1edc6 <isr+0x4e>
   1edae:	4b0d      	ldr	r3, [pc, #52]	; (1ede4 <isr+0x6c>)
   1edb0:	2201      	movs	r2, #1
   1edb2:	605a      	str	r2, [r3, #4]
}
   1edb4:	e00e      	b.n	1edd4 <isr+0x5c>
	rngp->buffer[last] = byte;
   1edb6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1edb8:	3201      	adds	r2, #1
   1edba:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1edbc:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1edc0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1edc4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1edc6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1edc8:	3201      	adds	r2, #1
   1edca:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1edcc:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1edd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1edd4:	4804      	ldr	r0, [pc, #16]	; (1ede8 <isr+0x70>)
}
   1edd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1edda:	f003 bc49 	b.w	22670 <z_impl_k_sem_give>
   1edde:	bf00      	nop
   1ede0:	200029b8 	.word	0x200029b8
   1ede4:	4000d000 	.word	0x4000d000
   1ede8:	200029d0 	.word	0x200029d0

0001edec <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1edec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1edee:	460f      	mov	r7, r1
   1edf0:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
   1edf2:	b940      	cbnz	r0, 1ee06 <entropy_cc3xx_rng_get_entropy+0x1a>
   1edf4:	4918      	ldr	r1, [pc, #96]	; (1ee58 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1edf6:	4819      	ldr	r0, [pc, #100]	; (1ee5c <entropy_cc3xx_rng_get_entropy+0x70>)
   1edf8:	2220      	movs	r2, #32
   1edfa:	f009 fcc3 	bl	28784 <assert_print>
   1edfe:	4816      	ldr	r0, [pc, #88]	; (1ee58 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1ee00:	2120      	movs	r1, #32
   1ee02:	f009 fcb8 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1ee06:	b947      	cbnz	r7, 1ee1a <entropy_cc3xx_rng_get_entropy+0x2e>
   1ee08:	4913      	ldr	r1, [pc, #76]	; (1ee58 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1ee0a:	4814      	ldr	r0, [pc, #80]	; (1ee5c <entropy_cc3xx_rng_get_entropy+0x70>)
   1ee0c:	2221      	movs	r2, #33	; 0x21
   1ee0e:	f009 fcb9 	bl	28784 <assert_print>
   1ee12:	4811      	ldr	r0, [pc, #68]	; (1ee58 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1ee14:	2121      	movs	r1, #33	; 0x21
   1ee16:	f009 fcae 	bl	28776 <assert_post_action>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1ee1a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1ee1e:	2400      	movs	r4, #0
	while (offset < length) {
   1ee20:	42a6      	cmp	r6, r4
   1ee22:	d803      	bhi.n	1ee2c <entropy_cc3xx_rng_get_entropy+0x40>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   1ee24:	d116      	bne.n	1ee54 <entropy_cc3xx_rng_get_entropy+0x68>
		err = 0;
   1ee26:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1ee28:	b003      	add	sp, #12
   1ee2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1ee2c:	1b33      	subs	r3, r6, r4
   1ee2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1ee32:	bf38      	it	cc
   1ee34:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   1ee36:	462a      	mov	r2, r5
   1ee38:	ab01      	add	r3, sp, #4
   1ee3a:	1939      	adds	r1, r7, r4
   1ee3c:	2000      	movs	r0, #0
   1ee3e:	f006 fe0f 	bl	25a60 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   1ee42:	b920      	cbnz	r0, 1ee4e <entropy_cc3xx_rng_get_entropy+0x62>
		if (olen != chunk_size) {
   1ee44:	9b01      	ldr	r3, [sp, #4]
   1ee46:	42ab      	cmp	r3, r5
   1ee48:	d101      	bne.n	1ee4e <entropy_cc3xx_rng_get_entropy+0x62>
		offset += chunk_size;
   1ee4a:	442c      	add	r4, r5
   1ee4c:	e7e8      	b.n	1ee20 <entropy_cc3xx_rng_get_entropy+0x34>
			return -EINVAL;
   1ee4e:	f06f 0015 	mvn.w	r0, #21
   1ee52:	e7e9      	b.n	1ee28 <entropy_cc3xx_rng_get_entropy+0x3c>
	int err = EINVAL;
   1ee54:	2016      	movs	r0, #22
   1ee56:	e7e7      	b.n	1ee28 <entropy_cc3xx_rng_get_entropy+0x3c>
   1ee58:	0002ff47 	.word	0x0002ff47
   1ee5c:	0002d509 	.word	0x0002d509

0001ee60 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1ee60:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1ee62:	2301      	movs	r3, #1
   1ee64:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ee66:	4a11      	ldr	r2, [pc, #68]	; (1eeac <compare_int_lock+0x4c>)
   1ee68:	f3bf 8f5b 	dmb	ish
   1ee6c:	43dc      	mvns	r4, r3
   1ee6e:	e852 1f00 	ldrex	r1, [r2]
   1ee72:	ea01 0c04 	and.w	ip, r1, r4
   1ee76:	e842 ce00 	strex	lr, ip, [r2]
   1ee7a:	f1be 0f00 	cmp.w	lr, #0
   1ee7e:	d1f6      	bne.n	1ee6e <compare_int_lock+0xe>
   1ee80:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ee84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ee88:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1ee8c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ee90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1ee94:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1ee98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ee9c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1eea0:	420b      	tst	r3, r1
}
   1eea2:	bf14      	ite	ne
   1eea4:	2001      	movne	r0, #1
   1eea6:	2000      	moveq	r0, #0
   1eea8:	bd10      	pop	{r4, pc}
   1eeaa:	bf00      	nop
   1eeac:	20002a10 	.word	0x20002a10

0001eeb0 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1eeb0:	4919      	ldr	r1, [pc, #100]	; (1ef18 <sys_clock_timeout_handler+0x68>)
{
   1eeb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eeb4:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1eeb6:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1eeba:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1eebc:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1eec0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1eec4:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1eec6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1eeca:	d222      	bcs.n	1ef12 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1eecc:	4b13      	ldr	r3, [pc, #76]	; (1ef1c <sys_clock_timeout_handler+0x6c>)
   1eece:	681b      	ldr	r3, [r3, #0]
   1eed0:	0a1a      	lsrs	r2, r3, #8
   1eed2:	061b      	lsls	r3, r3, #24
   1eed4:	195e      	adds	r6, r3, r5
   1eed6:	4b12      	ldr	r3, [pc, #72]	; (1ef20 <sys_clock_timeout_handler+0x70>)
   1eed8:	f142 0700 	adc.w	r7, r2, #0
   1eedc:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1eee0:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1eee2:	f005 fb77 	bl	245d4 <sys_clock_announce>
    return p_reg->CC[ch];
   1eee6:	00a3      	lsls	r3, r4, #2
   1eee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1eeec:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1eef0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1eef4:	42aa      	cmp	r2, r5
   1eef6:	d10b      	bne.n	1ef10 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1eef8:	b91e      	cbnz	r6, 1ef02 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1eefa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1eefe:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1ef02:	4b08      	ldr	r3, [pc, #32]	; (1ef24 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ef04:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1ef08:	fa00 f404 	lsl.w	r4, r0, r4
   1ef0c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1ef10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1ef12:	2600      	movs	r6, #0
   1ef14:	e7e5      	b.n	1eee2 <sys_clock_timeout_handler+0x32>
   1ef16:	bf00      	nop
   1ef18:	20001e70 	.word	0x20001e70
   1ef1c:	20002a14 	.word	0x20002a14
   1ef20:	20001e58 	.word	0x20001e58
   1ef24:	40011000 	.word	0x40011000

0001ef28 <compare_int_unlock>:
	if (key) {
   1ef28:	b319      	cbz	r1, 1ef72 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ef2a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1ef2e:	2301      	movs	r3, #1
   1ef30:	4a10      	ldr	r2, [pc, #64]	; (1ef74 <compare_int_unlock+0x4c>)
   1ef32:	4083      	lsls	r3, r0
   1ef34:	e852 1f00 	ldrex	r1, [r2]
   1ef38:	4319      	orrs	r1, r3
   1ef3a:	e842 1c00 	strex	ip, r1, [r2]
   1ef3e:	f1bc 0f00 	cmp.w	ip, #0
   1ef42:	d1f7      	bne.n	1ef34 <compare_int_unlock+0xc>
   1ef44:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1ef48:	4a0b      	ldr	r2, [pc, #44]	; (1ef78 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ef4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ef4e:	4083      	lsls	r3, r0
   1ef50:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ef54:	4b09      	ldr	r3, [pc, #36]	; (1ef7c <compare_int_unlock+0x54>)
   1ef56:	f3bf 8f5b 	dmb	ish
   1ef5a:	681b      	ldr	r3, [r3, #0]
   1ef5c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1ef60:	fa23 f000 	lsr.w	r0, r3, r0
   1ef64:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ef66:	bf42      	ittt	mi
   1ef68:	4b05      	ldrmi	r3, [pc, #20]	; (1ef80 <compare_int_unlock+0x58>)
   1ef6a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1ef6e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1ef72:	4770      	bx	lr
   1ef74:	20002a10 	.word	0x20002a10
   1ef78:	40011000 	.word	0x40011000
   1ef7c:	20002a0c 	.word	0x20002a0c
   1ef80:	e000e100 	.word	0xe000e100

0001ef84 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1ef84:	4b0d      	ldr	r3, [pc, #52]	; (1efbc <z_nrf_rtc_timer_read+0x38>)
   1ef86:	6818      	ldr	r0, [r3, #0]
   1ef88:	0a01      	lsrs	r1, r0, #8
   1ef8a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1ef8c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1ef90:	4b0b      	ldr	r3, [pc, #44]	; (1efc0 <z_nrf_rtc_timer_read+0x3c>)
   1ef92:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1ef96:	1818      	adds	r0, r3, r0
   1ef98:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1ef9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1efa0:	d20a      	bcs.n	1efb8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1efa2:	4b08      	ldr	r3, [pc, #32]	; (1efc4 <z_nrf_rtc_timer_read+0x40>)
   1efa4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1efa8:	4290      	cmp	r0, r2
   1efaa:	eb71 0303 	sbcs.w	r3, r1, r3
   1efae:	d203      	bcs.n	1efb8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1efb0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1efb4:	f141 0100 	adc.w	r1, r1, #0
}
   1efb8:	4770      	bx	lr
   1efba:	bf00      	nop
   1efbc:	20002a14 	.word	0x20002a14
   1efc0:	40011000 	.word	0x40011000
   1efc4:	20001e58 	.word	0x20001e58

0001efc8 <compare_set>:
{
   1efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efcc:	b085      	sub	sp, #20
   1efce:	4616      	mov	r6, r2
   1efd0:	4698      	mov	r8, r3
   1efd2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1efd4:	f7ff ff44 	bl	1ee60 <compare_int_lock>
   1efd8:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1efda:	f7ff ffd3 	bl	1ef84 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1efde:	42b0      	cmp	r0, r6
   1efe0:	eb71 0308 	sbcs.w	r3, r1, r8
   1efe4:	d278      	bcs.n	1f0d8 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1efe6:	4b46      	ldr	r3, [pc, #280]	; (1f100 <compare_set+0x138>)
   1efe8:	1a30      	subs	r0, r6, r0
   1efea:	eb68 0101 	sbc.w	r1, r8, r1
   1efee:	4298      	cmp	r0, r3
   1eff0:	f171 0300 	sbcs.w	r3, r1, #0
   1eff4:	f080 8081 	bcs.w	1f0fa <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   1eff8:	4b42      	ldr	r3, [pc, #264]	; (1f104 <compare_set+0x13c>)
   1effa:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1effe:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1f002:	45d8      	cmp	r8, fp
   1f004:	bf08      	it	eq
   1f006:	4556      	cmpeq	r6, sl
   1f008:	d051      	beq.n	1f0ae <compare_set+0xe6>
   1f00a:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1f00e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1f012:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1f016:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1f01a:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f01c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1f020:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f024:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1f026:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1f02a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f02e:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1f030:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1f034:	4b34      	ldr	r3, [pc, #208]	; (1f108 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f036:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1f03a:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1f03c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1f040:	1a40      	subs	r0, r0, r1
   1f042:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1f046:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1f04a:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1f04c:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1f050:	d107      	bne.n	1f062 <compare_set+0x9a>
   1f052:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1f056:	2013      	movs	r0, #19
   1f058:	f00c ff76 	bl	2bf48 <z_impl_k_busy_wait>
   1f05c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1f060:	4b29      	ldr	r3, [pc, #164]	; (1f108 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1f062:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1f066:	eba4 000c 	sub.w	r0, r4, ip
   1f06a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1f06e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f072:	bf88      	it	hi
   1f074:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f076:	2000      	movs	r0, #0
   1f078:	6038      	str	r0, [r7, #0]
   1f07a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1f07c:	9801      	ldr	r0, [sp, #4]
   1f07e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1f082:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1f086:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1f08a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1f08e:	4281      	cmp	r1, r0
   1f090:	d006      	beq.n	1f0a0 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1f092:	1a20      	subs	r0, r4, r0
   1f094:	3802      	subs	r0, #2
   1f096:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1f09a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f09e:	d819      	bhi.n	1f0d4 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1f0a0:	1aa4      	subs	r4, r4, r2
   1f0a2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1f0a6:	eb14 0a06 	adds.w	sl, r4, r6
   1f0aa:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1f0ae:	4915      	ldr	r1, [pc, #84]	; (1f104 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1f0b0:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1f0b2:	012b      	lsls	r3, r5, #4
   1f0b4:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   1f0b8:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1f0bc:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1f0be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f0c0:	6053      	str	r3, [r2, #4]
	return ret;
   1f0c2:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   1f0c4:	4628      	mov	r0, r5
   1f0c6:	9900      	ldr	r1, [sp, #0]
   1f0c8:	f7ff ff2e 	bl	1ef28 <compare_int_unlock>
}
   1f0cc:	4620      	mov	r0, r4
   1f0ce:	b005      	add	sp, #20
   1f0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0d4:	4620      	mov	r0, r4
   1f0d6:	e7b1      	b.n	1f03c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1f0d8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f0da:	4a0c      	ldr	r2, [pc, #48]	; (1f10c <compare_set+0x144>)
   1f0dc:	f3bf 8f5b 	dmb	ish
   1f0e0:	40ab      	lsls	r3, r5
   1f0e2:	e852 1f00 	ldrex	r1, [r2]
   1f0e6:	4319      	orrs	r1, r3
   1f0e8:	e842 1000 	strex	r0, r1, [r2]
   1f0ec:	2800      	cmp	r0, #0
   1f0ee:	d1f8      	bne.n	1f0e2 <compare_set+0x11a>
   1f0f0:	f3bf 8f5b 	dmb	ish
   1f0f4:	46b2      	mov	sl, r6
   1f0f6:	46c3      	mov	fp, r8
   1f0f8:	e7d9      	b.n	1f0ae <compare_set+0xe6>
			return -EINVAL;
   1f0fa:	f06f 0415 	mvn.w	r4, #21
   1f0fe:	e7e1      	b.n	1f0c4 <compare_set+0xfc>
   1f100:	01000001 	.word	0x01000001
   1f104:	20001e60 	.word	0x20001e60
   1f108:	40011000 	.word	0x40011000
   1f10c:	20002a0c 	.word	0x20002a0c

0001f110 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1f110:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f112:	4b19      	ldr	r3, [pc, #100]	; (1f178 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1f114:	4d19      	ldr	r5, [pc, #100]	; (1f17c <sys_clock_driver_init+0x6c>)
   1f116:	2400      	movs	r4, #0
   1f118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f11c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f120:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1f124:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1f128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f12c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f130:	4b13      	ldr	r3, [pc, #76]	; (1f180 <sys_clock_driver_init+0x70>)
   1f132:	2602      	movs	r6, #2
   1f134:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1f138:	2101      	movs	r1, #1
   1f13a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1f13e:	2011      	movs	r0, #17
   1f140:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1f144:	4622      	mov	r2, r4
   1f146:	f7f5 fac9 	bl	146dc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1f14a:	2011      	movs	r0, #17
   1f14c:	f7f5 fa94 	bl	14678 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1f150:	4a0c      	ldr	r2, [pc, #48]	; (1f184 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1f152:	2301      	movs	r3, #1
   1f154:	60ab      	str	r3, [r5, #8]
   1f156:	602b      	str	r3, [r5, #0]
   1f158:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1f15a:	4b0b      	ldr	r3, [pc, #44]	; (1f188 <sys_clock_driver_init+0x78>)
   1f15c:	4a0b      	ldr	r2, [pc, #44]	; (1f18c <sys_clock_driver_init+0x7c>)
   1f15e:	9300      	str	r3, [sp, #0]
   1f160:	9401      	str	r4, [sp, #4]
   1f162:	2300      	movs	r3, #0
   1f164:	4620      	mov	r0, r4
   1f166:	f7ff ff2f 	bl	1efc8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1f16a:	4630      	mov	r0, r6
   1f16c:	f7fe fb84 	bl	1d878 <z_nrf_clock_control_lf_on>

	return 0;
}
   1f170:	4620      	mov	r0, r4
   1f172:	b002      	add	sp, #8
   1f174:	bd70      	pop	{r4, r5, r6, pc}
   1f176:	bf00      	nop
   1f178:	20001e60 	.word	0x20001e60
   1f17c:	40011000 	.word	0x40011000
   1f180:	e000e100 	.word	0xe000e100
   1f184:	20002a10 	.word	0x20002a10
   1f188:	0001eeb1 	.word	0x0001eeb1
   1f18c:	007fffff 	.word	0x007fffff

0001f190 <rtc_nrf_isr>:
{
   1f190:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1f194:	4c2c      	ldr	r4, [pc, #176]	; (1f248 <rtc_nrf_isr+0xb8>)
   1f196:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1f19a:	0799      	lsls	r1, r3, #30
   1f19c:	d50b      	bpl.n	1f1b6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f19e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1f1a2:	b143      	cbz	r3, 1f1b6 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1f1a4:	4a29      	ldr	r2, [pc, #164]	; (1f24c <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f1a6:	2300      	movs	r3, #0
   1f1a8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1f1ac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1f1b0:	6813      	ldr	r3, [r2, #0]
   1f1b2:	3301      	adds	r3, #1
   1f1b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1f1b6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1f1ba:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1f1bc:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1f1c0:	03d2      	lsls	r2, r2, #15
   1f1c2:	d52d      	bpl.n	1f220 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f1c4:	f3bf 8f5b 	dmb	ish
   1f1c8:	4a21      	ldr	r2, [pc, #132]	; (1f250 <rtc_nrf_isr+0xc0>)
   1f1ca:	e852 1f00 	ldrex	r1, [r2]
   1f1ce:	f021 0001 	bic.w	r0, r1, #1
   1f1d2:	e842 0500 	strex	r5, r0, [r2]
   1f1d6:	2d00      	cmp	r5, #0
   1f1d8:	d1f7      	bne.n	1f1ca <rtc_nrf_isr+0x3a>
   1f1da:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1f1de:	b911      	cbnz	r1, 1f1e6 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f1e0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   1f1e4:	b1e2      	cbz	r2, 1f220 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f1e6:	2500      	movs	r5, #0
   1f1e8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1f1ec:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1f1f0:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1f1f4:	f7ff fec6 	bl	1ef84 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1f1f8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1f1fc:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1f1fe:	4b15      	ldr	r3, [pc, #84]	; (1f254 <rtc_nrf_isr+0xc4>)
   1f200:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1f204:	42b0      	cmp	r0, r6
   1f206:	41b9      	sbcs	r1, r7
   1f208:	d20f      	bcs.n	1f22a <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1f20a:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1f20c:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1f210:	b141      	cbz	r1, 1f224 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   1f212:	f8cd 8000 	str.w	r8, [sp]
   1f216:	4632      	mov	r2, r6
   1f218:	463b      	mov	r3, r7
   1f21a:	2000      	movs	r0, #0
   1f21c:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1f21e:	e001      	b.n	1f224 <rtc_nrf_isr+0x94>
   1f220:	f383 8810 	msr	PRIMASK, r3
}
   1f224:	b002      	add	sp, #8
   1f226:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f22a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1f22e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   1f232:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1f236:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   1f23a:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1f23c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f240:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1f244:	e7e2      	b.n	1f20c <rtc_nrf_isr+0x7c>
   1f246:	bf00      	nop
   1f248:	40011000 	.word	0x40011000
   1f24c:	20002a14 	.word	0x20002a14
   1f250:	20002a0c 	.word	0x20002a0c
   1f254:	20001e60 	.word	0x20001e60

0001f258 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f258:	1c43      	adds	r3, r0, #1
{
   1f25a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f25c:	d021      	beq.n	1f2a2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1f25e:	2801      	cmp	r0, #1
   1f260:	dd21      	ble.n	1f2a6 <sys_clock_set_timeout+0x4e>
   1f262:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f266:	da20      	bge.n	1f2aa <sys_clock_set_timeout+0x52>
   1f268:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1f26a:	f7ff fe8b 	bl	1ef84 <z_nrf_rtc_timer_read>
   1f26e:	4b10      	ldr	r3, [pc, #64]	; (1f2b0 <sys_clock_set_timeout+0x58>)
   1f270:	e9d3 1300 	ldrd	r1, r3, [r3]
   1f274:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1f276:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f27a:	bf28      	it	cs
   1f27c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1f27e:	3001      	adds	r0, #1
   1f280:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1f282:	480c      	ldr	r0, [pc, #48]	; (1f2b4 <sys_clock_set_timeout+0x5c>)
   1f284:	4282      	cmp	r2, r0
   1f286:	bf28      	it	cs
   1f288:	4602      	movcs	r2, r0
   1f28a:	1852      	adds	r2, r2, r1
   1f28c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1f290:	4909      	ldr	r1, [pc, #36]	; (1f2b8 <sys_clock_set_timeout+0x60>)
   1f292:	9001      	str	r0, [sp, #4]
   1f294:	9100      	str	r1, [sp, #0]
   1f296:	f143 0300 	adc.w	r3, r3, #0
   1f29a:	f7ff fe95 	bl	1efc8 <compare_set>
}
   1f29e:	b002      	add	sp, #8
   1f2a0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1f2a2:	4804      	ldr	r0, [pc, #16]	; (1f2b4 <sys_clock_set_timeout+0x5c>)
   1f2a4:	e7e0      	b.n	1f268 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1f2a6:	2400      	movs	r4, #0
   1f2a8:	e7df      	b.n	1f26a <sys_clock_set_timeout+0x12>
   1f2aa:	4c02      	ldr	r4, [pc, #8]	; (1f2b4 <sys_clock_set_timeout+0x5c>)
   1f2ac:	e7dd      	b.n	1f26a <sys_clock_set_timeout+0x12>
   1f2ae:	bf00      	nop
   1f2b0:	20001e70 	.word	0x20001e70
   1f2b4:	007fffff 	.word	0x007fffff
   1f2b8:	0001eeb1 	.word	0x0001eeb1

0001f2bc <sys_clock_elapsed>:
{
   1f2bc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1f2be:	f7ff fe61 	bl	1ef84 <z_nrf_rtc_timer_read>
   1f2c2:	4b02      	ldr	r3, [pc, #8]	; (1f2cc <sys_clock_elapsed+0x10>)
   1f2c4:	681b      	ldr	r3, [r3, #0]
}
   1f2c6:	1ac0      	subs	r0, r0, r3
   1f2c8:	bd08      	pop	{r3, pc}
   1f2ca:	bf00      	nop
   1f2cc:	20001e70 	.word	0x20001e70

0001f2d0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f2d0:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1f2d2:	0953      	lsrs	r3, r2, #5
{
   1f2d4:	b510      	push	{r4, lr}
   1f2d6:	4604      	mov	r4, r0
    switch (port)
   1f2d8:	d02a      	beq.n	1f330 <nrf_gpio_pin_port_decode+0x60>
    uint32_t mask = 0;
   1f2da:	2b01      	cmp	r3, #1
   1f2dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f2e0:	bf18      	it	ne
   1f2e2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   1f2e4:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f2e8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f2ea:	07db      	lsls	r3, r3, #31
   1f2ec:	d40a      	bmi.n	1f304 <nrf_gpio_pin_port_decode+0x34>
   1f2ee:	4913      	ldr	r1, [pc, #76]	; (1f33c <nrf_gpio_pin_port_decode+0x6c>)
   1f2f0:	4813      	ldr	r0, [pc, #76]	; (1f340 <nrf_gpio_pin_port_decode+0x70>)
   1f2f2:	f240 2247 	movw	r2, #583	; 0x247
   1f2f6:	f009 fa45 	bl	28784 <assert_print>
   1f2fa:	4810      	ldr	r0, [pc, #64]	; (1f33c <nrf_gpio_pin_port_decode+0x6c>)
   1f2fc:	f240 2147 	movw	r1, #583	; 0x247
   1f300:	f009 fa39 	bl	28776 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1f304:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1f306:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f30a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1f30c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f30e:	d00c      	beq.n	1f32a <nrf_gpio_pin_port_decode+0x5a>
   1f310:	2b01      	cmp	r3, #1
   1f312:	d010      	beq.n	1f336 <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
   1f314:	4909      	ldr	r1, [pc, #36]	; (1f33c <nrf_gpio_pin_port_decode+0x6c>)
   1f316:	480a      	ldr	r0, [pc, #40]	; (1f340 <nrf_gpio_pin_port_decode+0x70>)
   1f318:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1f31c:	f009 fa32 	bl	28784 <assert_print>
   1f320:	4806      	ldr	r0, [pc, #24]	; (1f33c <nrf_gpio_pin_port_decode+0x6c>)
   1f322:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1f326:	f009 fa26 	bl	28776 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f32a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1f32e:	bd10      	pop	{r4, pc}
    switch (port)
   1f330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f334:	e7d6      	b.n	1f2e4 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1f336:	4803      	ldr	r0, [pc, #12]	; (1f344 <nrf_gpio_pin_port_decode+0x74>)
   1f338:	e7f9      	b.n	1f32e <nrf_gpio_pin_port_decode+0x5e>
   1f33a:	bf00      	nop
   1f33c:	0002fbc2 	.word	0x0002fbc2
   1f340:	0002d509 	.word	0x0002d509
   1f344:	50000300 	.word	0x50000300

0001f348 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1f348:	4602      	mov	r2, r0
   1f34a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1f34c:	4801      	ldr	r0, [pc, #4]	; (1f354 <multithreading_lock_acquire+0xc>)
   1f34e:	f002 bf0f 	b.w	22170 <z_impl_k_mutex_lock>
   1f352:	bf00      	nop
   1f354:	20000a5c 	.word	0x20000a5c

0001f358 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1f358:	4801      	ldr	r0, [pc, #4]	; (1f360 <multithreading_lock_release+0x8>)
   1f35a:	f002 bfdb 	b.w	22314 <z_impl_k_mutex_unlock>
   1f35e:	bf00      	nop
   1f360:	20000a5c 	.word	0x20000a5c

0001f364 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1f364:	4803      	ldr	r0, [pc, #12]	; (1f374 <k_sys_fatal_error_handler+0x10>)
{
   1f366:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   1f368:	2145      	movs	r1, #69	; 0x45
   1f36a:	f009 fa19 	bl	287a0 <z_log_minimal_printk>
		sys_arch_reboot(0);
   1f36e:	2000      	movs	r0, #0
   1f370:	f7f5 ff2c 	bl	151cc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1f374:	0002ff9b 	.word	0x0002ff9b

0001f378 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1f378:	b508      	push	{r3, lr}
   1f37a:	4602      	mov	r2, r0
   1f37c:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1f37e:	4805      	ldr	r0, [pc, #20]	; (1f394 <sdc_assertion_handler+0x1c>)
   1f380:	2145      	movs	r1, #69	; 0x45
   1f382:	f009 fa0d 	bl	287a0 <z_log_minimal_printk>
	k_oops();
   1f386:	4040      	eors	r0, r0
   1f388:	f380 8811 	msr	BASEPRI, r0
   1f38c:	f04f 0003 	mov.w	r0, #3
   1f390:	df02      	svc	2
}
   1f392:	bd08      	pop	{r3, pc}
   1f394:	0002ffbd 	.word	0x0002ffbd

0001f398 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1f398:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1f39a:	4804      	ldr	r0, [pc, #16]	; (1f3ac <hci_driver_init+0x14>)
   1f39c:	f7f7 f97e 	bl	1669c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1f3a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1f3a4:	4802      	ldr	r0, [pc, #8]	; (1f3b0 <hci_driver_init+0x18>)
   1f3a6:	f7e6 b851 	b.w	544c <sdc_init>
   1f3aa:	bf00      	nop
   1f3ac:	0002cf10 	.word	0x0002cf10
   1f3b0:	0001f379 	.word	0x0001f379

0001f3b4 <rand_prio_low_vector_get_blocking>:
{
   1f3b4:	b570      	push	{r4, r5, r6, lr}
   1f3b6:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1f3b8:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1f3ba:	4b10      	ldr	r3, [pc, #64]	; (1f3fc <rand_prio_low_vector_get_blocking+0x48>)
   1f3bc:	689e      	ldr	r6, [r3, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1f3be:	6833      	ldr	r3, [r6, #0]
   1f3c0:	b943      	cbnz	r3, 1f3d4 <rand_prio_low_vector_get_blocking+0x20>
   1f3c2:	490f      	ldr	r1, [pc, #60]	; (1f400 <rand_prio_low_vector_get_blocking+0x4c>)
   1f3c4:	480f      	ldr	r0, [pc, #60]	; (1f404 <rand_prio_low_vector_get_blocking+0x50>)
   1f3c6:	224b      	movs	r2, #75	; 0x4b
   1f3c8:	f009 f9dc 	bl	28784 <assert_print>
   1f3cc:	480c      	ldr	r0, [pc, #48]	; (1f400 <rand_prio_low_vector_get_blocking+0x4c>)
   1f3ce:	214b      	movs	r1, #75	; 0x4b
   1f3d0:	f009 f9d1 	bl	28776 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1f3d4:	6833      	ldr	r3, [r6, #0]
   1f3d6:	4809      	ldr	r0, [pc, #36]	; (1f3fc <rand_prio_low_vector_get_blocking+0x48>)
   1f3d8:	462a      	mov	r2, r5
   1f3da:	4621      	mov	r1, r4
   1f3dc:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1f3de:	b160      	cbz	r0, 1f3fa <rand_prio_low_vector_get_blocking+0x46>
   1f3e0:	4909      	ldr	r1, [pc, #36]	; (1f408 <rand_prio_low_vector_get_blocking+0x54>)
   1f3e2:	4808      	ldr	r0, [pc, #32]	; (1f404 <rand_prio_low_vector_get_blocking+0x50>)
   1f3e4:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
   1f3e8:	f009 f9cc 	bl	28784 <assert_print>
}
   1f3ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1f3f0:	4805      	ldr	r0, [pc, #20]	; (1f408 <rand_prio_low_vector_get_blocking+0x54>)
   1f3f2:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   1f3f6:	f009 b9be 	b.w	28776 <assert_post_action>
}
   1f3fa:	bd70      	pop	{r4, r5, r6, pc}
   1f3fc:	0002c358 	.word	0x0002c358
   1f400:	0002ffe7 	.word	0x0002ffe7
   1f404:	0002d509 	.word	0x0002d509
   1f408:	0003001b 	.word	0x0003001b

0001f40c <hci_driver_open>:
{
   1f40c:	b570      	push	{r4, r5, r6, lr}
   1f40e:	b088      	sub	sp, #32
		hci_ecdh_init();
   1f410:	f000 fde4 	bl	1ffdc <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1f414:	a803      	add	r0, sp, #12
   1f416:	f7e5 ff7d 	bl	5314 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1f41a:	4a4f      	ldr	r2, [pc, #316]	; (1f558 <hci_driver_open+0x14c>)
   1f41c:	484f      	ldr	r0, [pc, #316]	; (1f55c <hci_driver_open+0x150>)
   1f41e:	2149      	movs	r1, #73	; 0x49
   1f420:	f009 f9be 	bl	287a0 <z_log_minimal_printk>
   1f424:	2214      	movs	r2, #20
   1f426:	a903      	add	r1, sp, #12
   1f428:	2003      	movs	r0, #3
   1f42a:	f7f4 f863 	bl	134f4 <z_log_minimal_hexdump_print>
			err = sdc_support_adv();
   1f42e:	f7e6 f88b 	bl	5548 <sdc_support_adv>
			if (err) {
   1f432:	b118      	cbz	r0, 1f43c <hci_driver_open+0x30>
				return -ENOTSUP;
   1f434:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1f438:	b008      	add	sp, #32
   1f43a:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_peripheral();
   1f43c:	f7e6 f8b6 	bl	55ac <sdc_support_peripheral>
		if (err) {
   1f440:	2800      	cmp	r0, #0
   1f442:	d1f7      	bne.n	1f434 <hci_driver_open+0x28>
			err = sdc_support_dle_peripheral();
   1f444:	f7e6 f890 	bl	5568 <sdc_support_dle_peripheral>
			if (err) {
   1f448:	2800      	cmp	r0, #0
   1f44a:	d1f3      	bne.n	1f434 <hci_driver_open+0x28>
		err = sdc_support_le_2m_phy();
   1f44c:	f7e6 f89c 	bl	5588 <sdc_support_le_2m_phy>
		if (err) {
   1f450:	2800      	cmp	r0, #0
   1f452:	d1ef      	bne.n	1f434 <hci_driver_open+0x28>
			err = sdc_support_phy_update_peripheral();
   1f454:	f7e6 f8ba 	bl	55cc <sdc_support_phy_update_peripheral>
			if (err) {
   1f458:	4605      	mov	r5, r0
   1f45a:	2800      	cmp	r0, #0
   1f45c:	d1ea      	bne.n	1f434 <hci_driver_open+0x28>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f45e:	466c      	mov	r4, sp
   1f460:	4622      	mov	r2, r4
   1f462:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1f464:	f88d 0000 	strb.w	r0, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f468:	f7e5 ff62 	bl	5330 <sdc_cfg_set>
	if (required_memory < 0) {
   1f46c:	2800      	cmp	r0, #0
   1f46e:	dbe3      	blt.n	1f438 <hci_driver_open+0x2c>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1f470:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f472:	4622      	mov	r2, r4
   1f474:	2102      	movs	r1, #2
   1f476:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1f478:	f88d 6000 	strb.w	r6, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f47c:	f7e5 ff58 	bl	5330 <sdc_cfg_set>
	if (required_memory < 0) {
   1f480:	2800      	cmp	r0, #0
   1f482:	dbd9      	blt.n	1f438 <hci_driver_open+0x2c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1f484:	4b36      	ldr	r3, [pc, #216]	; (1f560 <hci_driver_open+0x154>)
   1f486:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f488:	4622      	mov	r2, r4
   1f48a:	2103      	movs	r1, #3
   1f48c:	4628      	mov	r0, r5
   1f48e:	f7e5 ff4f 	bl	5330 <sdc_cfg_set>
	if (required_memory < 0) {
   1f492:	2800      	cmp	r0, #0
   1f494:	dbd0      	blt.n	1f438 <hci_driver_open+0x2c>
	cfg.event_length.event_length_us =
   1f496:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f49a:	4622      	mov	r2, r4
   1f49c:	2104      	movs	r1, #4
   1f49e:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1f4a0:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f4a2:	f7e5 ff45 	bl	5330 <sdc_cfg_set>
	if (required_memory < 0) {
   1f4a6:	2800      	cmp	r0, #0
   1f4a8:	dbc6      	blt.n	1f438 <hci_driver_open+0x2c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f4aa:	4622      	mov	r2, r4
   1f4ac:	2105      	movs	r1, #5
   1f4ae:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1f4b0:	f88d 6000 	strb.w	r6, [sp]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f4b4:	f7e5 ff3c 	bl	5330 <sdc_cfg_set>
	if (required_memory < 0) {
   1f4b8:	2800      	cmp	r0, #0
   1f4ba:	dbbd      	blt.n	1f438 <hci_driver_open+0x2c>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1f4bc:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f4be:	4622      	mov	r2, r4
   1f4c0:	2107      	movs	r1, #7
   1f4c2:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1f4c4:	f8ad 3000 	strh.w	r3, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f4c8:	f7e5 ff32 	bl	5330 <sdc_cfg_set>
		if (required_memory < 0) {
   1f4cc:	2800      	cmp	r0, #0
   1f4ce:	dbb3      	blt.n	1f438 <hci_driver_open+0x2c>
	if (required_memory > sizeof(sdc_mempool)) {
   1f4d0:	f240 7214 	movw	r2, #1812	; 0x714
   1f4d4:	4290      	cmp	r0, r2
   1f4d6:	dd0d      	ble.n	1f4f4 <hci_driver_open+0xe8>
		BT_ERR("Allocated memory too low: %u < %u",
   1f4d8:	4603      	mov	r3, r0
   1f4da:	2145      	movs	r1, #69	; 0x45
   1f4dc:	4821      	ldr	r0, [pc, #132]	; (1f564 <hci_driver_open+0x158>)
   1f4de:	f009 f95f 	bl	287a0 <z_log_minimal_printk>
		k_panic();
   1f4e2:	4040      	eors	r0, r0
   1f4e4:	f380 8811 	msr	BASEPRI, r0
   1f4e8:	f04f 0004 	mov.w	r0, #4
   1f4ec:	df02      	svc	2
		return -ENOMEM;
   1f4ee:	f06f 000b 	mvn.w	r0, #11
   1f4f2:	e7a1      	b.n	1f438 <hci_driver_open+0x2c>
   1f4f4:	481c      	ldr	r0, [pc, #112]	; (1f568 <hci_driver_open+0x15c>)
   1f4f6:	f00c fbf5 	bl	2bce4 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1f4fa:	b930      	cbnz	r0, 1f50a <hci_driver_open+0xfe>
		BT_ERR("Entropy source device not ready");
   1f4fc:	481b      	ldr	r0, [pc, #108]	; (1f56c <hci_driver_open+0x160>)
   1f4fe:	2145      	movs	r1, #69	; 0x45
   1f500:	f009 f94e 	bl	287a0 <z_log_minimal_printk>
		return -ENODEV;
   1f504:	f06f 0012 	mvn.w	r0, #18
   1f508:	e796      	b.n	1f438 <hci_driver_open+0x2c>
	sdc_rand_source_t rand_functions = {
   1f50a:	4b19      	ldr	r3, [pc, #100]	; (1f570 <hci_driver_open+0x164>)
   1f50c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1f510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1f514:	4620      	mov	r0, r4
   1f516:	f7e6 f8ab 	bl	5670 <sdc_rand_source_register>
	if (err) {
   1f51a:	4602      	mov	r2, r0
   1f51c:	b130      	cbz	r0, 1f52c <hci_driver_open+0x120>
		BT_ERR("Failed to register rand source (%d)", err);
   1f51e:	4815      	ldr	r0, [pc, #84]	; (1f574 <hci_driver_open+0x168>)
   1f520:	2145      	movs	r1, #69	; 0x45
   1f522:	f009 f93d 	bl	287a0 <z_log_minimal_printk>
		return -EINVAL;
   1f526:	f06f 0015 	mvn.w	r0, #21
   1f52a:	e785      	b.n	1f438 <hci_driver_open+0x2c>
	k_work_init(&receive_work, receive_work_handler);
   1f52c:	4912      	ldr	r1, [pc, #72]	; (1f578 <hci_driver_open+0x16c>)
   1f52e:	4813      	ldr	r0, [pc, #76]	; (1f57c <hci_driver_open+0x170>)
   1f530:	f003 fb40 	bl	22bb4 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1f534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f53c:	f7ff ff04 	bl	1f348 <multithreading_lock_acquire>
	if (!err) {
   1f540:	4604      	mov	r4, r0
   1f542:	b930      	cbnz	r0, 1f552 <hci_driver_open+0x146>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   1f544:	490e      	ldr	r1, [pc, #56]	; (1f580 <hci_driver_open+0x174>)
   1f546:	480f      	ldr	r0, [pc, #60]	; (1f584 <hci_driver_open+0x178>)
   1f548:	f7e5 ff58 	bl	53fc <sdc_enable>
   1f54c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f54e:	f7ff ff03 	bl	1f358 <multithreading_lock_release>
	if (err < 0) {
   1f552:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1f556:	e76f      	b.n	1f438 <hci_driver_open+0x2c>
   1f558:	00030054 	.word	0x00030054
   1f55c:	0003007b 	.word	0x0003007b
   1f560:	02031b1b 	.word	0x02031b1b
   1f564:	00030083 	.word	0x00030083
   1f568:	0002c358 	.word	0x0002c358
   1f56c:	000300aa 	.word	0x000300aa
   1f570:	0002c800 	.word	0x0002c800
   1f574:	000300cf 	.word	0x000300cf
   1f578:	0002ba7b 	.word	0x0002ba7b
   1f57c:	20002a18 	.word	0x20002a18
   1f580:	20003828 	.word	0x20003828
   1f584:	0001f685 	.word	0x0001f685

0001f588 <rand_prio_low_vector_get>:
{
   1f588:	b538      	push	{r3, r4, r5, lr}
   1f58a:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1f58c:	480d      	ldr	r0, [pc, #52]	; (1f5c4 <rand_prio_low_vector_get+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1f58e:	6883      	ldr	r3, [r0, #8]
   1f590:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1f592:	460a      	mov	r2, r1
   1f594:	b19d      	cbz	r5, 1f5be <rand_prio_low_vector_get+0x36>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1f596:	4621      	mov	r1, r4
   1f598:	2300      	movs	r3, #0
   1f59a:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1f59c:	1e04      	subs	r4, r0, #0
   1f59e:	da0a      	bge.n	1f5b6 <rand_prio_low_vector_get+0x2e>
   1f5a0:	4909      	ldr	r1, [pc, #36]	; (1f5c8 <rand_prio_low_vector_get+0x40>)
   1f5a2:	480a      	ldr	r0, [pc, #40]	; (1f5cc <rand_prio_low_vector_get+0x44>)
   1f5a4:	f44f 72df 	mov.w	r2, #446	; 0x1be
   1f5a8:	f009 f8ec 	bl	28784 <assert_print>
   1f5ac:	4806      	ldr	r0, [pc, #24]	; (1f5c8 <rand_prio_low_vector_get+0x40>)
   1f5ae:	f44f 71df 	mov.w	r1, #446	; 0x1be
   1f5b2:	f009 f8e0 	bl	28776 <assert_post_action>
	return ret >= 0 ? ret : 0;
   1f5b6:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1f5ba:	b2c0      	uxtb	r0, r0
   1f5bc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1f5be:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1f5c2:	e7ed      	b.n	1f5a0 <rand_prio_low_vector_get+0x18>
   1f5c4:	0002c358 	.word	0x0002c358
   1f5c8:	0003001b 	.word	0x0003001b
   1f5cc:	0002d509 	.word	0x0002d509

0001f5d0 <event_packet_process.constprop.0>:
static void event_packet_process(uint8_t *hci_buf)
   1f5d0:	b570      	push	{r4, r5, r6, lr}
	switch (hdr->evt) {
   1f5d2:	4e16      	ldr	r6, [pc, #88]	; (1f62c <event_packet_process.constprop.0+0x5c>)
   1f5d4:	7830      	ldrb	r0, [r6, #0]
   1f5d6:	283e      	cmp	r0, #62	; 0x3e
   1f5d8:	d012      	beq.n	1f600 <event_packet_process.constprop.0+0x30>
   1f5da:	28ff      	cmp	r0, #255	; 0xff
   1f5dc:	d017      	beq.n	1f60e <event_packet_process.constprop.0+0x3e>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f5de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f5e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		switch (subevent) {
   1f5e6:	2400      	movs	r4, #0
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f5e8:	4621      	mov	r1, r4
   1f5ea:	f7f6 f80b 	bl	15604 <bt_buf_get_evt>
	if (!evt_buf) {
   1f5ee:	4605      	mov	r5, r0
   1f5f0:	b980      	cbnz	r0, 1f614 <event_packet_process.constprop.0+0x44>
		if (discardable) {
   1f5f2:	b9d4      	cbnz	r4, 1f62a <event_packet_process.constprop.0+0x5a>
}
   1f5f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("No event buffer available");
   1f5f8:	480d      	ldr	r0, [pc, #52]	; (1f630 <event_packet_process.constprop.0+0x60>)
   1f5fa:	2145      	movs	r1, #69	; 0x45
   1f5fc:	f009 b8d0 	b.w	287a0 <z_log_minimal_printk>
		switch (me->subevent) {
   1f600:	78b3      	ldrb	r3, [r6, #2]
   1f602:	2b02      	cmp	r3, #2
		switch (subevent) {
   1f604:	d1eb      	bne.n	1f5de <event_packet_process.constprop.0+0xe>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1f606:	2200      	movs	r2, #0
   1f608:	2300      	movs	r3, #0
		switch (subevent) {
   1f60a:	2401      	movs	r4, #1
   1f60c:	e7ec      	b.n	1f5e8 <event_packet_process.constprop.0+0x18>
   1f60e:	78b3      	ldrb	r3, [r6, #2]
   1f610:	2b80      	cmp	r3, #128	; 0x80
   1f612:	e7f7      	b.n	1f604 <event_packet_process.constprop.0+0x34>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1f614:	7872      	ldrb	r2, [r6, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1f616:	4905      	ldr	r1, [pc, #20]	; (1f62c <event_packet_process.constprop.0+0x5c>)
   1f618:	3202      	adds	r2, #2
   1f61a:	3008      	adds	r0, #8
   1f61c:	f00b fecd 	bl	2b3ba <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1f620:	4628      	mov	r0, r5
}
   1f622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_recv(evt_buf);
   1f626:	f7f7 b813 	b.w	16650 <bt_recv>
}
   1f62a:	bd70      	pop	{r4, r5, r6, pc}
   1f62c:	200037df 	.word	0x200037df
   1f630:	000300f8 	.word	0x000300f8

0001f634 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1f634:	4901      	ldr	r1, [pc, #4]	; (1f63c <receive_signal_raise+0x8>)
   1f636:	4802      	ldr	r0, [pc, #8]	; (1f640 <receive_signal_raise+0xc>)
   1f638:	f00c bc38 	b.w	2beac <k_work_submit_to_queue>
   1f63c:	20002a18 	.word	0x20002a18
   1f640:	20001ef8 	.word	0x20001ef8

0001f644 <data_packet_process.constprop.0>:
static void data_packet_process(uint8_t *hci_buf)
   1f644:	b510      	push	{r4, lr}
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1f646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f64a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f64e:	2003      	movs	r0, #3
   1f650:	f7f5 ff96 	bl	15580 <bt_buf_get_rx>
	if (!data_buf) {
   1f654:	4604      	mov	r4, r0
   1f656:	b928      	cbnz	r0, 1f664 <data_packet_process.constprop.0+0x20>
}
   1f658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("No data buffer available");
   1f65c:	4807      	ldr	r0, [pc, #28]	; (1f67c <data_packet_process.constprop.0+0x38>)
   1f65e:	2145      	movs	r1, #69	; 0x45
   1f660:	f009 b89e 	b.w	287a0 <z_log_minimal_printk>
	len = sys_le16_to_cpu(hdr->len);
   1f664:	4906      	ldr	r1, [pc, #24]	; (1f680 <data_packet_process.constprop.0+0x3c>)
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1f666:	884a      	ldrh	r2, [r1, #2]
   1f668:	3008      	adds	r0, #8
   1f66a:	3204      	adds	r2, #4
   1f66c:	f00b fea5 	bl	2b3ba <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1f670:	4620      	mov	r0, r4
}
   1f672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_recv(data_buf);
   1f676:	f7f6 bfeb 	b.w	16650 <bt_recv>
   1f67a:	bf00      	nop
   1f67c:	00030117 	.word	0x00030117
   1f680:	200037df 	.word	0x200037df

0001f684 <hci_driver_receive_process>:
{
   1f684:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f68a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f68e:	f7ff fe5b 	bl	1f348 <multithreading_lock_acquire>
	if (!errcode) {
   1f692:	b1c8      	cbz	r0, 1f6c8 <hci_driver_receive_process+0x44>
		return false;
   1f694:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f69a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f69e:	f7ff fe53 	bl	1f348 <multithreading_lock_acquire>
	if (!errcode) {
   1f6a2:	b1e8      	cbz	r0, 1f6e0 <hci_driver_receive_process+0x5c>
		return false;
   1f6a4:	2500      	movs	r5, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f6a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f6aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f6ae:	f7ff fe4b 	bl	1f348 <multithreading_lock_acquire>
	if (!errcode) {
   1f6b2:	b308      	cbz	r0, 1f6f8 <hci_driver_receive_process+0x74>
		return false;
   1f6b4:	2400      	movs	r4, #0
	if (received_evt || received_data || received_msg) {
   1f6b6:	b916      	cbnz	r6, 1f6be <hci_driver_receive_process+0x3a>
   1f6b8:	b90d      	cbnz	r5, 1f6be <hci_driver_receive_process+0x3a>
   1f6ba:	2c00      	cmp	r4, #0
   1f6bc:	d03f      	beq.n	1f73e <hci_driver_receive_process+0xba>
}
   1f6be:	b002      	add	sp, #8
   1f6c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1f6c4:	f7ff bfb6 	b.w	1f634 <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1f6c8:	481e      	ldr	r0, [pc, #120]	; (1f744 <hci_driver_receive_process+0xc0>)
   1f6ca:	f000 fb09 	bl	1fce0 <hci_internal_evt_get>
   1f6ce:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f6d0:	f7ff fe42 	bl	1f358 <multithreading_lock_release>
	if (errcode) {
   1f6d4:	2c00      	cmp	r4, #0
   1f6d6:	d1dd      	bne.n	1f694 <hci_driver_receive_process+0x10>
	event_packet_process(p_hci_buffer);
   1f6d8:	f7ff ff7a 	bl	1f5d0 <event_packet_process.constprop.0>
	return true;
   1f6dc:	2601      	movs	r6, #1
   1f6de:	e7da      	b.n	1f696 <hci_driver_receive_process+0x12>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1f6e0:	4818      	ldr	r0, [pc, #96]	; (1f744 <hci_driver_receive_process+0xc0>)
   1f6e2:	f7ee fc64 	bl	dfae <sdc_hci_data_get>
   1f6e6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f6e8:	f7ff fe36 	bl	1f358 <multithreading_lock_release>
	if (errcode) {
   1f6ec:	2c00      	cmp	r4, #0
   1f6ee:	d1d9      	bne.n	1f6a4 <hci_driver_receive_process+0x20>
	data_packet_process(p_hci_buffer);
   1f6f0:	f7ff ffa8 	bl	1f644 <data_packet_process.constprop.0>
	return true;
   1f6f4:	2501      	movs	r5, #1
   1f6f6:	e7d6      	b.n	1f6a6 <hci_driver_receive_process+0x22>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1f6f8:	4812      	ldr	r0, [pc, #72]	; (1f744 <hci_driver_receive_process+0xc0>)
   1f6fa:	f10d 0107 	add.w	r1, sp, #7
   1f6fe:	f000 fb01 	bl	1fd04 <hci_internal_msg_get>
   1f702:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1f704:	f7ff fe28 	bl	1f358 <multithreading_lock_release>
	if (errcode) {
   1f708:	2c00      	cmp	r4, #0
   1f70a:	d1d3      	bne.n	1f6b4 <hci_driver_receive_process+0x30>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1f70c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f710:	2b04      	cmp	r3, #4
   1f712:	d103      	bne.n	1f71c <hci_driver_receive_process+0x98>
		event_packet_process(p_hci_buffer);
   1f714:	f7ff ff5c 	bl	1f5d0 <event_packet_process.constprop.0>
	return true;
   1f718:	2401      	movs	r4, #1
   1f71a:	e7cc      	b.n	1f6b6 <hci_driver_receive_process+0x32>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1f71c:	2b02      	cmp	r3, #2
   1f71e:	d102      	bne.n	1f726 <hci_driver_receive_process+0xa2>
		data_packet_process(p_hci_buffer);
   1f720:	f7ff ff90 	bl	1f644 <data_packet_process.constprop.0>
   1f724:	e7f8      	b.n	1f718 <hci_driver_receive_process+0x94>
		__ASSERT(false, "sdc_hci_msg_type_t has changed. This if-else needs a new branch");
   1f726:	4908      	ldr	r1, [pc, #32]	; (1f748 <hci_driver_receive_process+0xc4>)
   1f728:	4808      	ldr	r0, [pc, #32]	; (1f74c <hci_driver_receive_process+0xc8>)
   1f72a:	f240 128f 	movw	r2, #399	; 0x18f
   1f72e:	f009 f829 	bl	28784 <assert_print>
   1f732:	4805      	ldr	r0, [pc, #20]	; (1f748 <hci_driver_receive_process+0xc4>)
   1f734:	f240 118f 	movw	r1, #399	; 0x18f
   1f738:	f009 f81d 	bl	28776 <assert_post_action>
		return false;
   1f73c:	e7bb      	b.n	1f6b6 <hci_driver_receive_process+0x32>
}
   1f73e:	b002      	add	sp, #8
   1f740:	bd70      	pop	{r4, r5, r6, pc}
   1f742:	bf00      	nop
   1f744:	200037df 	.word	0x200037df
   1f748:	0003001b 	.word	0x0003001b
   1f74c:	0002d509 	.word	0x0002d509

0001f750 <rand_prio_high_vector_get>:
{
   1f750:	b538      	push	{r3, r4, r5, lr}
   1f752:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1f754:	480d      	ldr	r0, [pc, #52]	; (1f78c <rand_prio_high_vector_get+0x3c>)
	if (unlikely(!api->get_entropy_isr)) {
   1f756:	6883      	ldr	r3, [r0, #8]
   1f758:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1f75a:	460a      	mov	r2, r1
   1f75c:	b19d      	cbz	r5, 1f786 <rand_prio_high_vector_get+0x36>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1f75e:	4621      	mov	r1, r4
   1f760:	2300      	movs	r3, #0
   1f762:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1f764:	1e04      	subs	r4, r0, #0
   1f766:	da0a      	bge.n	1f77e <rand_prio_high_vector_get+0x2e>
   1f768:	4909      	ldr	r1, [pc, #36]	; (1f790 <rand_prio_high_vector_get+0x40>)
   1f76a:	480a      	ldr	r0, [pc, #40]	; (1f794 <rand_prio_high_vector_get+0x44>)
   1f76c:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   1f770:	f009 f808 	bl	28784 <assert_print>
   1f774:	4806      	ldr	r0, [pc, #24]	; (1f790 <rand_prio_high_vector_get+0x40>)
   1f776:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   1f77a:	f008 fffc 	bl	28776 <assert_post_action>
	return ret >= 0 ? ret : 0;
   1f77e:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1f782:	b2c0      	uxtb	r0, r0
   1f784:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1f786:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1f78a:	e7ed      	b.n	1f768 <rand_prio_high_vector_get+0x18>
   1f78c:	0002c358 	.word	0x0002c358
   1f790:	0003001b 	.word	0x0003001b
   1f794:	0002d509 	.word	0x0002d509

0001f798 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1f798:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1f79a:	4ccd      	ldr	r4, [pc, #820]	; (1fad0 <hci_internal_cmd_put+0x338>)
   1f79c:	7823      	ldrb	r3, [r4, #0]
   1f79e:	2b00      	cmp	r3, #0
   1f7a0:	f040 8298 	bne.w	1fcd4 <hci_internal_cmd_put+0x53c>
	return ((uint16_t)src[1] << 8) | src[0];
   1f7a4:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   1f7a6:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1f7aa:	b22b      	sxth	r3, r5
   1f7ac:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1f7b0:	d209      	bcs.n	1f7c6 <hci_internal_cmd_put+0x2e>
   1f7b2:	b15a      	cbz	r2, 1f7cc <hci_internal_cmd_put+0x34>
   1f7b4:	3a01      	subs	r2, #1
   1f7b6:	2a07      	cmp	r2, #7
   1f7b8:	d808      	bhi.n	1f7cc <hci_internal_cmd_put+0x34>
   1f7ba:	e8df f002 	tbb	[pc, r2]
   1f7be:	0709      	.short	0x0709
   1f7c0:	07075925 	.word	0x07075925
   1f7c4:	cf07      	.short	0xcf07
   1f7c6:	2a3f      	cmp	r2, #63	; 0x3f
   1f7c8:	f000 81fc 	beq.w	1fbc4 <hci_internal_cmd_put+0x42c>
	switch (opcode)	{
   1f7cc:	2001      	movs	r0, #1
   1f7ce:	e00e      	b.n	1f7ee <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   1f7d0:	f240 4206 	movw	r2, #1030	; 0x406
   1f7d4:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f7d6:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f7da:	d006      	beq.n	1f7ea <hci_internal_cmd_put+0x52>
   1f7dc:	f240 421d 	movw	r2, #1053	; 0x41d
   1f7e0:	4293      	cmp	r3, r2
   1f7e2:	d1f3      	bne.n	1f7cc <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1f7e4:	f7ee fd16 	bl	e214 <sdc_hci_cmd_lc_read_remote_version_information>
   1f7e8:	e001      	b.n	1f7ee <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1f7ea:	f7ee fd11 	bl	e210 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1f7ee:	230f      	movs	r3, #15
   1f7f0:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1f7f2:	2304      	movs	r3, #4
   1f7f4:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f7f6:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1f7f8:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1f7fa:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1f7fc:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1f800:	2301      	movs	r3, #1
   1f802:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1f804:	2000      	movs	r0, #0
}
   1f806:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   1f808:	f640 4263 	movw	r2, #3171	; 0xc63
   1f80c:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f80e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f812:	d025      	beq.n	1f860 <hci_internal_cmd_put+0xc8>
   1f814:	dc0f      	bgt.n	1f836 <hci_internal_cmd_put+0x9e>
   1f816:	f640 4203 	movw	r2, #3075	; 0xc03
   1f81a:	4293      	cmp	r3, r2
   1f81c:	d018      	beq.n	1f850 <hci_internal_cmd_put+0xb8>
   1f81e:	f640 422d 	movw	r2, #3117	; 0xc2d
   1f822:	4293      	cmp	r3, r2
   1f824:	d017      	beq.n	1f856 <hci_internal_cmd_put+0xbe>
   1f826:	f640 4201 	movw	r2, #3073	; 0xc01
   1f82a:	4293      	cmp	r3, r2
   1f82c:	d1ce      	bne.n	1f7cc <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1f82e:	f7ee fbef 	bl	e010 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1f832:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1f834:	e08f      	b.n	1f956 <hci_internal_cmd_put+0x1be>
	switch (opcode)	{
   1f836:	f640 427b 	movw	r2, #3195	; 0xc7b
   1f83a:	4293      	cmp	r3, r2
   1f83c:	d013      	beq.n	1f866 <hci_internal_cmd_put+0xce>
   1f83e:	f640 427c 	movw	r2, #3196	; 0xc7c
   1f842:	4293      	cmp	r3, r2
   1f844:	d1c2      	bne.n	1f7cc <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1f846:	49a3      	ldr	r1, [pc, #652]	; (1fad4 <hci_internal_cmd_put+0x33c>)
   1f848:	f7ee fbec 	bl	e024 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1f84c:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1f84e:	e082      	b.n	1f956 <hci_internal_cmd_put+0x1be>
		return sdc_hci_cmd_cb_reset();
   1f850:	f7e5 fffc 	bl	584c <sdc_hci_cmd_cb_reset>
   1f854:	e7ed      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1f856:	499f      	ldr	r1, [pc, #636]	; (1fad4 <hci_internal_cmd_put+0x33c>)
   1f858:	f7ee fbd8 	bl	e00c <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1f85c:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1f85e:	e07a      	b.n	1f956 <hci_internal_cmd_put+0x1be>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1f860:	f7ee fbdb 	bl	e01a <sdc_hci_cmd_cb_set_event_mask_page_2>
   1f864:	e7e5      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1f866:	499b      	ldr	r1, [pc, #620]	; (1fad4 <hci_internal_cmd_put+0x33c>)
   1f868:	f7ee fbce 	bl	e008 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1f86c:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1f86e:	e072      	b.n	1f956 <hci_internal_cmd_put+0x1be>
	switch (opcode)	{
   1f870:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   1f874:	3b01      	subs	r3, #1
   1f876:	2b08      	cmp	r3, #8
   1f878:	d8a8      	bhi.n	1f7cc <hci_internal_cmd_put+0x34>
   1f87a:	a201      	add	r2, pc, #4	; (adr r2, 1f880 <hci_internal_cmd_put+0xe8>)
   1f87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f880:	0001f8a5 	.word	0x0001f8a5
   1f884:	0001f8af 	.word	0x0001f8af
   1f888:	0001f927 	.word	0x0001f927
   1f88c:	0001f7cd 	.word	0x0001f7cd
   1f890:	0001f7cd 	.word	0x0001f7cd
   1f894:	0001f7cd 	.word	0x0001f7cd
   1f898:	0001f7cd 	.word	0x0001f7cd
   1f89c:	0001f7cd 	.word	0x0001f7cd
   1f8a0:	0001f94f 	.word	0x0001f94f
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1f8a4:	488b      	ldr	r0, [pc, #556]	; (1fad4 <hci_internal_cmd_put+0x33c>)
   1f8a6:	f7ee fc76 	bl	e196 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1f8aa:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1f8ac:	e053      	b.n	1f956 <hci_internal_cmd_put+0x1be>
	memset(cmds, 0, sizeof(*cmds));
   1f8ae:	4889      	ldr	r0, [pc, #548]	; (1fad4 <hci_internal_cmd_put+0x33c>)
   1f8b0:	222f      	movs	r2, #47	; 0x2f
   1f8b2:	2100      	movs	r1, #0
   1f8b4:	f00c fc86 	bl	2c1c4 <memset>
	cmds->hci_disconnect = 1;
   1f8b8:	2320      	movs	r3, #32
   1f8ba:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1f8bc:	2380      	movs	r3, #128	; 0x80
   1f8be:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1f8c0:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1f8c4:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1f8c6:	2304      	movs	r3, #4
   1f8c8:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1f8ca:	2328      	movs	r3, #40	; 0x28
   1f8cc:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1f8ce:	2302      	movs	r3, #2
   1f8d0:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1f8d2:	2304      	movs	r3, #4
   1f8d4:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1f8d6:	f06f 0308 	mvn.w	r3, #8
   1f8da:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1f8de:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   1f8e2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1f8e6:	f06f 030c 	mvn.w	r3, #12
   1f8ea:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1f8ee:	237e      	movs	r3, #126	; 0x7e
   1f8f0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1f8f4:	2330      	movs	r3, #48	; 0x30
   1f8f6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1f8fa:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1f8fe:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1f902:	2307      	movs	r3, #7
   1f904:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1f908:	f06f 0307 	mvn.w	r3, #7
   1f90c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1f910:	2301      	movs	r3, #1
   1f912:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1f916:	2380      	movs	r3, #128	; 0x80
   1f918:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1f91c:	2304      	movs	r3, #4
   1f91e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   1f922:	2344      	movs	r3, #68	; 0x44
   1f924:	e129      	b.n	1fb7a <hci_internal_cmd_put+0x3e2>
	memset(features, 0, sizeof(*features));
   1f926:	4b6b      	ldr	r3, [pc, #428]	; (1fad4 <hci_internal_cmd_put+0x33c>)
   1f928:	2000      	movs	r0, #0
   1f92a:	f8c4 0007 	str.w	r0, [r4, #7]
   1f92e:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   1f930:	7ae3      	ldrb	r3, [r4, #11]
   1f932:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1f936:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1f93a:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1f93c:	230c      	movs	r3, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f93e:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1f940:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1f942:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1f944:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1f946:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1f948:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1f94a:	71a0      	strb	r0, [r4, #6]
}
   1f94c:	e758      	b.n	1f800 <hci_internal_cmd_put+0x68>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1f94e:	4861      	ldr	r0, [pc, #388]	; (1fad4 <hci_internal_cmd_put+0x33c>)
   1f950:	f7ee fc1f 	bl	e192 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1f954:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1f956:	2801      	cmp	r0, #1
   1f958:	d1f1      	bne.n	1f93e <hci_internal_cmd_put+0x1a6>
   1f95a:	e748      	b.n	1f7ee <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   1f95c:	f242 024b 	movw	r2, #8267	; 0x204b
   1f960:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1f962:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1f966:	f300 80a3 	bgt.w	1fab0 <hci_internal_cmd_put+0x318>
   1f96a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   1f96e:	f77f af2d 	ble.w	1f7cc <hci_internal_cmd_put+0x34>
   1f972:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   1f976:	3b01      	subs	r3, #1
   1f978:	2b4a      	cmp	r3, #74	; 0x4a
   1f97a:	f63f af27 	bhi.w	1f7cc <hci_internal_cmd_put+0x34>
   1f97e:	a201      	add	r2, pc, #4	; (adr r2, 1f984 <hci_internal_cmd_put+0x1ec>)
   1f980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f984:	0001fac1 	.word	0x0001fac1
   1f988:	0001fac7 	.word	0x0001fac7
   1f98c:	0001fad9 	.word	0x0001fad9
   1f990:	0001f7cd 	.word	0x0001f7cd
   1f994:	0001fafd 	.word	0x0001fafd
   1f998:	0001fb03 	.word	0x0001fb03
   1f99c:	0001fb09 	.word	0x0001fb09
   1f9a0:	0001fb13 	.word	0x0001fb13
   1f9a4:	0001fb19 	.word	0x0001fb19
   1f9a8:	0001fb1f 	.word	0x0001fb1f
   1f9ac:	0001f7cd 	.word	0x0001f7cd
   1f9b0:	0001f7cd 	.word	0x0001f7cd
   1f9b4:	0001f7cd 	.word	0x0001f7cd
   1f9b8:	0001f7cd 	.word	0x0001f7cd
   1f9bc:	0001fb25 	.word	0x0001fb25
   1f9c0:	0001fb2d 	.word	0x0001fb2d
   1f9c4:	0001fb33 	.word	0x0001fb33
   1f9c8:	0001fb39 	.word	0x0001fb39
   1f9cc:	0001f7cd 	.word	0x0001f7cd
   1f9d0:	0001f7cd 	.word	0x0001f7cd
   1f9d4:	0001fb3f 	.word	0x0001fb3f
   1f9d8:	0001fb49 	.word	0x0001fb49
   1f9dc:	0001fb4f 	.word	0x0001fb4f
   1f9e0:	0001fb59 	.word	0x0001fb59
   1f9e4:	0001f7cd 	.word	0x0001f7cd
   1f9e8:	0001fb61 	.word	0x0001fb61
   1f9ec:	0001fb69 	.word	0x0001fb69
   1f9f0:	0001fb71 	.word	0x0001fb71
   1f9f4:	0001f7cd 	.word	0x0001f7cd
   1f9f8:	0001f7cd 	.word	0x0001f7cd
   1f9fc:	0001f7cd 	.word	0x0001f7cd
   1fa00:	0001f7cd 	.word	0x0001f7cd
   1fa04:	0001f7cd 	.word	0x0001f7cd
   1fa08:	0001fb7f 	.word	0x0001fb7f
   1fa0c:	0001fb87 	.word	0x0001fb87
   1fa10:	0001fb8f 	.word	0x0001fb8f
   1fa14:	0001fb95 	.word	0x0001fb95
   1fa18:	0001fb9b 	.word	0x0001fb9b
   1fa1c:	0001f7cd 	.word	0x0001f7cd
   1fa20:	0001f7cd 	.word	0x0001f7cd
   1fa24:	0001f7cd 	.word	0x0001f7cd
   1fa28:	0001f7cd 	.word	0x0001f7cd
   1fa2c:	0001f7cd 	.word	0x0001f7cd
   1fa30:	0001f7cd 	.word	0x0001f7cd
   1fa34:	0001f7cd 	.word	0x0001f7cd
   1fa38:	0001f7cd 	.word	0x0001f7cd
   1fa3c:	0001fba1 	.word	0x0001fba1
   1fa40:	0001fba9 	.word	0x0001fba9
   1fa44:	0001fbb1 	.word	0x0001fbb1
   1fa48:	0001fbb7 	.word	0x0001fbb7
   1fa4c:	0001f7cd 	.word	0x0001f7cd
   1fa50:	0001f7cd 	.word	0x0001f7cd
   1fa54:	0001f7cd 	.word	0x0001f7cd
   1fa58:	0001f7cd 	.word	0x0001f7cd
   1fa5c:	0001f7cd 	.word	0x0001f7cd
   1fa60:	0001f7cd 	.word	0x0001f7cd
   1fa64:	0001f7cd 	.word	0x0001f7cd
   1fa68:	0001f7cd 	.word	0x0001f7cd
   1fa6c:	0001f7cd 	.word	0x0001f7cd
   1fa70:	0001f7cd 	.word	0x0001f7cd
   1fa74:	0001f7cd 	.word	0x0001f7cd
   1fa78:	0001f7cd 	.word	0x0001f7cd
   1fa7c:	0001f7cd 	.word	0x0001f7cd
   1fa80:	0001f7cd 	.word	0x0001f7cd
   1fa84:	0001f7cd 	.word	0x0001f7cd
   1fa88:	0001f7cd 	.word	0x0001f7cd
   1fa8c:	0001f7cd 	.word	0x0001f7cd
   1fa90:	0001f7cd 	.word	0x0001f7cd
   1fa94:	0001f7cd 	.word	0x0001f7cd
   1fa98:	0001f7cd 	.word	0x0001f7cd
   1fa9c:	0001f7cd 	.word	0x0001f7cd
   1faa0:	0001f7cd 	.word	0x0001f7cd
   1faa4:	0001f7cd 	.word	0x0001f7cd
   1faa8:	0001f7cd 	.word	0x0001f7cd
   1faac:	0001fbbd 	.word	0x0001fbbd
   1fab0:	f242 025e 	movw	r2, #8286	; 0x205e
   1fab4:	4293      	cmp	r3, r2
   1fab6:	f47f ae89 	bne.w	1f7cc <hci_internal_cmd_put+0x34>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1faba:	f00c f807 	bl	2bacc <hci_cmd_le_generate_dhkey_v2>
   1fabe:	e6b8      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1fac0:	f7ee fb99 	bl	e1f6 <sdc_hci_cmd_le_set_event_mask>
   1fac4:	e6b5      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1fac6:	4803      	ldr	r0, [pc, #12]	; (1fad4 <hci_internal_cmd_put+0x33c>)
   1fac8:	f7ee fb79 	bl	e1be <sdc_hci_cmd_le_read_buffer_size>
   1facc:	e6c6      	b.n	1f85c <hci_internal_cmd_put+0xc4>
   1face:	bf00      	nop
   1fad0:	20003f3c 	.word	0x20003f3c
   1fad4:	20003f43 	.word	0x20003f43
	memset(features, 0, sizeof(*features));
   1fad8:	4b80      	ldr	r3, [pc, #512]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fada:	2000      	movs	r0, #0
   1fadc:	f8c4 0007 	str.w	r0, [r4, #7]
   1fae0:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   1fae2:	79e3      	ldrb	r3, [r4, #7]
   1fae4:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1fae8:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1faec:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1faee:	7a23      	ldrb	r3, [r4, #8]
   1faf0:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1faf4:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1faf8:	7223      	strb	r3, [r4, #8]
   1fafa:	e71f      	b.n	1f93c <hci_internal_cmd_put+0x1a4>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1fafc:	f7ee fb82 	bl	e204 <sdc_hci_cmd_le_set_random_address>
   1fb00:	e697      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1fb02:	f7ee fb72 	bl	e1ea <sdc_hci_cmd_le_set_adv_params>
   1fb06:	e694      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1fb08:	4874      	ldr	r0, [pc, #464]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fb0a:	f7ee fb56 	bl	e1ba <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1fb0e:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1fb10:	e721      	b.n	1f956 <hci_internal_cmd_put+0x1be>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1fb12:	f7ee fb66 	bl	e1e2 <sdc_hci_cmd_le_set_adv_data>
   1fb16:	e68c      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1fb18:	f7ee fb76 	bl	e208 <sdc_hci_cmd_le_set_scan_response_data>
   1fb1c:	e689      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1fb1e:	f7ee fb62 	bl	e1e6 <sdc_hci_cmd_le_set_adv_enable>
   1fb22:	e686      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1fb24:	486d      	ldr	r0, [pc, #436]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fb26:	f7ee fb4e 	bl	e1c6 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1fb2a:	e7f0      	b.n	1fb0e <hci_internal_cmd_put+0x376>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1fb2c:	f7ee fb37 	bl	e19e <sdc_hci_cmd_le_clear_filter_accept_list>
   1fb30:	e67f      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1fb32:	f7ee fb32 	bl	e19a <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1fb36:	e67c      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1fb38:	f7ee fb51 	bl	e1de <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1fb3c:	e679      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1fb3e:	4967      	ldr	r1, [pc, #412]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fb40:	f7ee fb3f 	bl	e1c2 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1fb44:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1fb46:	e706      	b.n	1f956 <hci_internal_cmd_put+0x1be>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1fb48:	f7ee fb43 	bl	e1d2 <sdc_hci_cmd_le_read_remote_features>
   1fb4c:	e64f      	b.n	1f7ee <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1fb4e:	4963      	ldr	r1, [pc, #396]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fb50:	f7ee fb27 	bl	e1a2 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1fb54:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1fb56:	e6fe      	b.n	1f956 <hci_internal_cmd_put+0x1be>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1fb58:	4860      	ldr	r0, [pc, #384]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fb5a:	f7ee fb2c 	bl	e1b6 <sdc_hci_cmd_le_rand>
   1fb5e:	e6a4      	b.n	1f8aa <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1fb60:	495e      	ldr	r1, [pc, #376]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fb62:	f7ee fb24 	bl	e1ae <sdc_hci_cmd_le_long_term_key_request_reply>
   1fb66:	e671      	b.n	1f84c <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1fb68:	495c      	ldr	r1, [pc, #368]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fb6a:	f7ee fb1c 	bl	e1a6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1fb6e:	e66d      	b.n	1f84c <hci_internal_cmd_put+0xb4>
	*buf = states1;
   1fb70:	238f      	movs	r3, #143	; 0x8f
   1fb72:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1fb74:	23c0      	movs	r3, #192	; 0xc0
   1fb76:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1fb78:	230c      	movs	r3, #12
		return 0;
   1fb7a:	2000      	movs	r0, #0
   1fb7c:	e6df      	b.n	1f93e <hci_internal_cmd_put+0x1a6>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1fb7e:	4957      	ldr	r1, [pc, #348]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fb80:	f7ee fb35 	bl	e1ee <sdc_hci_cmd_le_set_data_length>
   1fb84:	e662      	b.n	1f84c <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1fb86:	4855      	ldr	r0, [pc, #340]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fb88:	f7ee fb25 	bl	e1d6 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1fb8c:	e66e      	b.n	1f86c <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1fb8e:	f7ee fb3d 	bl	e20c <sdc_hci_cmd_le_write_suggested_default_data_length>
   1fb92:	e64e      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return hci_cmd_le_read_local_p256_public_key();
   1fb94:	f000 fa4c 	bl	20030 <hci_cmd_le_read_local_p256_public_key>
   1fb98:	e629      	b.n	1f7ee <hci_internal_cmd_put+0x56>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1fb9a:	f00b ff94 	bl	2bac6 <hci_cmd_le_generate_dhkey>
   1fb9e:	e626      	b.n	1f7ee <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1fba0:	484e      	ldr	r0, [pc, #312]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fba2:	f7ee fb12 	bl	e1ca <sdc_hci_cmd_le_read_max_data_length>
   1fba6:	e680      	b.n	1f8aa <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1fba8:	494c      	ldr	r1, [pc, #304]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fbaa:	f7ee fb10 	bl	e1ce <sdc_hci_cmd_le_read_phy>
   1fbae:	e65d      	b.n	1f86c <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1fbb0:	f7ee fb1f 	bl	e1f2 <sdc_hci_cmd_le_set_default_phy>
   1fbb4:	e63d      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1fbb6:	f7ee fb23 	bl	e200 <sdc_hci_cmd_le_set_phy>
   1fbba:	e618      	b.n	1f7ee <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1fbbc:	4847      	ldr	r0, [pc, #284]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fbbe:	f7ee fb0c 	bl	e1da <sdc_hci_cmd_le_read_transmit_power>
   1fbc2:	e643      	b.n	1f84c <hci_internal_cmd_put+0xb4>
	switch (opcode)	{
   1fbc4:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1fbc8:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1fbca:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1fbce:	d821      	bhi.n	1fc14 <hci_internal_cmd_put+0x47c>
   1fbd0:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1fbd4:	f43f adfa 	beq.w	1f7cc <hci_internal_cmd_put+0x34>
   1fbd8:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1fbdc:	3b01      	subs	r3, #1
   1fbde:	2b09      	cmp	r3, #9
   1fbe0:	f63f adf4 	bhi.w	1f7cc <hci_internal_cmd_put+0x34>
   1fbe4:	a201      	add	r2, pc, #4	; (adr r2, 1fbec <hci_internal_cmd_put+0x454>)
   1fbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fbea:	bf00      	nop
   1fbec:	0001fc59 	.word	0x0001fc59
   1fbf0:	0001fc63 	.word	0x0001fc63
   1fbf4:	0001f7cd 	.word	0x0001f7cd
   1fbf8:	0001f7cd 	.word	0x0001f7cd
   1fbfc:	0001f7cd 	.word	0x0001f7cd
   1fc00:	0001fc97 	.word	0x0001fc97
   1fc04:	0001f7cd 	.word	0x0001f7cd
   1fc08:	0001f7cd 	.word	0x0001f7cd
   1fc0c:	0001fc83 	.word	0x0001fc83
   1fc10:	0001fc8d 	.word	0x0001fc8d
   1fc14:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1fc18:	b29b      	uxth	r3, r3
   1fc1a:	2b09      	cmp	r3, #9
   1fc1c:	f63f add6 	bhi.w	1f7cc <hci_internal_cmd_put+0x34>
   1fc20:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1fc24:	2b09      	cmp	r3, #9
   1fc26:	f63f add1 	bhi.w	1f7cc <hci_internal_cmd_put+0x34>
   1fc2a:	a201      	add	r2, pc, #4	; (adr r2, 1fc30 <hci_internal_cmd_put+0x498>)
   1fc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fc30:	0001fc9d 	.word	0x0001fc9d
   1fc34:	0001fcb1 	.word	0x0001fcb1
   1fc38:	0001fcb7 	.word	0x0001fcb7
   1fc3c:	0001fcbd 	.word	0x0001fcbd
   1fc40:	0001fcc3 	.word	0x0001fcc3
   1fc44:	0001fcc9 	.word	0x0001fcc9
   1fc48:	0001f7cd 	.word	0x0001f7cd
   1fc4c:	0001f7cd 	.word	0x0001f7cd
   1fc50:	0001f7cd 	.word	0x0001f7cd
   1fc54:	0001fccf 	.word	0x0001fccf
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1fc58:	4820      	ldr	r0, [pc, #128]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fc5a:	f7e5 fe0b 	bl	5874 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1fc5e:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1fc60:	e679      	b.n	1f956 <hci_internal_cmd_put+0x1be>
	memset(cmds, 0, sizeof(*cmds));
   1fc62:	2300      	movs	r3, #0
   1fc64:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_version_info = 1;
   1fc68:	79e3      	ldrb	r3, [r4, #7]
   1fc6a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1fc6e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1fc72:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1fc74:	7a23      	ldrb	r3, [r4, #8]
   1fc76:	f023 0307 	bic.w	r3, r3, #7
   1fc7a:	f043 0307 	orr.w	r3, r3, #7
   1fc7e:	7223      	strb	r3, [r4, #8]
}
   1fc80:	e64f      	b.n	1f922 <hci_internal_cmd_put+0x18a>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1fc82:	4816      	ldr	r0, [pc, #88]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fc84:	f7ee fa34 	bl	e0f0 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1fc88:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1fc8a:	e664      	b.n	1f956 <hci_internal_cmd_put+0x1be>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1fc8c:	4813      	ldr	r0, [pc, #76]	; (1fcdc <hci_internal_cmd_put+0x544>)
   1fc8e:	f7ee f9e2 	bl	e056 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1fc92:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1fc94:	e65f      	b.n	1f956 <hci_internal_cmd_put+0x1be>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1fc96:	f7ee fa7a 	bl	e18e <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1fc9a:	e5ca      	b.n	1f832 <hci_internal_cmd_put+0x9a>
	memset(cmds, 0, sizeof(*cmds));
   1fc9c:	2300      	movs	r3, #0
   1fc9e:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_supported_vs_commands = 1;
   1fca2:	79e3      	ldrb	r3, [r4, #7]
   1fca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1fca8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1fcac:	71e3      	strb	r3, [r4, #7]
}
   1fcae:	e638      	b.n	1f922 <hci_internal_cmd_put+0x18a>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1fcb0:	f7ee f9c6 	bl	e040 <sdc_hci_cmd_vs_llpm_mode_set>
   1fcb4:	e5bd      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1fcb6:	f7ee f9bf 	bl	e038 <sdc_hci_cmd_vs_conn_update>
   1fcba:	e5ba      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1fcbc:	f7ee f9b4 	bl	e028 <sdc_hci_cmd_vs_conn_event_extend>
   1fcc0:	e5b7      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1fcc2:	f7ee f9c3 	bl	e04c <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1fcc6:	e5b4      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1fcc8:	f7ee f9b8 	bl	e03c <sdc_hci_cmd_vs_event_length_set>
   1fccc:	e5b1      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1fcce:	f7ee f9b9 	bl	e044 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1fcd2:	e5ae      	b.n	1f832 <hci_internal_cmd_put+0x9a>
		return -NRF_EPERM;
   1fcd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fcd8:	e595      	b.n	1f806 <hci_internal_cmd_put+0x6e>
   1fcda:	bf00      	nop
   1fcdc:	20003f43 	.word	0x20003f43

0001fce0 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1fce0:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1fce2:	4c07      	ldr	r4, [pc, #28]	; (1fd00 <hci_internal_evt_get+0x20>)
   1fce4:	7823      	ldrb	r3, [r4, #0]
   1fce6:	b91b      	cbnz	r3, 1fcf0 <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1fce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1fcec:	f7ee b977 	b.w	dfde <sdc_hci_evt_get>
		memcpy(evt_out,
   1fcf0:	78a2      	ldrb	r2, [r4, #2]
   1fcf2:	1c61      	adds	r1, r4, #1
   1fcf4:	3202      	adds	r2, #2
   1fcf6:	f00c fa2a 	bl	2c14e <memcpy>
		cmd_complete_or_status.occurred = false;
   1fcfa:	2000      	movs	r0, #0
   1fcfc:	7020      	strb	r0, [r4, #0]
}
   1fcfe:	bd10      	pop	{r4, pc}
   1fd00:	20003f3c 	.word	0x20003f3c

0001fd04 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1fd04:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1fd06:	4c09      	ldr	r4, [pc, #36]	; (1fd2c <hci_internal_msg_get+0x28>)
   1fd08:	7823      	ldrb	r3, [r4, #0]
{
   1fd0a:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1fd0c:	b91b      	cbnz	r3, 1fd16 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1fd0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1fd12:	f7ee b971 	b.w	dff8 <sdc_hci_get>
		memcpy(msg_out,
   1fd16:	78a2      	ldrb	r2, [r4, #2]
   1fd18:	1c61      	adds	r1, r4, #1
   1fd1a:	3202      	adds	r2, #2
   1fd1c:	f00c fa17 	bl	2c14e <memcpy>
		cmd_complete_or_status.occurred = false;
   1fd20:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1fd22:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1fd24:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1fd26:	702b      	strb	r3, [r5, #0]
}
   1fd28:	bd38      	pop	{r3, r4, r5, pc}
   1fd2a:	bf00      	nop
   1fd2c:	20003f3c 	.word	0x20003f3c

0001fd30 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fd30:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1fd32:	b570      	push	{r4, r5, r6, lr}
   1fd34:	4604      	mov	r4, r0
   1fd36:	460d      	mov	r5, r1
   1fd38:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fd3c:	d915      	bls.n	1fd6a <sys_memcpy_swap.constprop.0+0x3a>
   1fd3e:	42b0      	cmp	r0, r6
   1fd40:	d20a      	bcs.n	1fd58 <sys_memcpy_swap.constprop.0+0x28>
   1fd42:	490c      	ldr	r1, [pc, #48]	; (1fd74 <sys_memcpy_swap.constprop.0+0x44>)
   1fd44:	480c      	ldr	r0, [pc, #48]	; (1fd78 <sys_memcpy_swap.constprop.0+0x48>)
   1fd46:	f240 2217 	movw	r2, #535	; 0x217
   1fd4a:	f008 fd1b 	bl	28784 <assert_print>
   1fd4e:	4809      	ldr	r0, [pc, #36]	; (1fd74 <sys_memcpy_swap.constprop.0+0x44>)
   1fd50:	f240 2117 	movw	r1, #535	; 0x217
   1fd54:	f008 fd0f 	bl	28776 <assert_post_action>
	for (; length > 0; length--) {
   1fd58:	4633      	mov	r3, r6
   1fd5a:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1fd5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1fd60:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   1fd64:	42ab      	cmp	r3, r5
   1fd66:	d1f9      	bne.n	1fd5c <sys_memcpy_swap.constprop.0+0x2c>
}
   1fd68:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fd6a:	d0ea      	beq.n	1fd42 <sys_memcpy_swap.constprop.0+0x12>
   1fd6c:	f100 0310 	add.w	r3, r0, #16
   1fd70:	4299      	cmp	r1, r3
   1fd72:	e7e5      	b.n	1fd40 <sys_memcpy_swap.constprop.0+0x10>
   1fd74:	0002f47b 	.word	0x0002f47b
   1fd78:	0002d509 	.word	0x0002d509

0001fd7c <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1fd7c:	b570      	push	{r4, r5, r6, lr}
   1fd7e:	4605      	mov	r5, r0
   1fd80:	460c      	mov	r4, r1
   1fd82:	4e0e      	ldr	r6, [pc, #56]	; (1fdbc <bt_rand+0x40>)
   1fd84:	4630      	mov	r0, r6
   1fd86:	f00b ffad 	bl	2bce4 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1fd8a:	b198      	cbz	r0, 1fdb4 <bt_rand+0x38>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1fd8c:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   1fd8e:	68b6      	ldr	r6, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   1fd90:	6833      	ldr	r3, [r6, #0]
   1fd92:	b943      	cbnz	r3, 1fda6 <bt_rand+0x2a>
   1fd94:	490a      	ldr	r1, [pc, #40]	; (1fdc0 <bt_rand+0x44>)
   1fd96:	480b      	ldr	r0, [pc, #44]	; (1fdc4 <bt_rand+0x48>)
   1fd98:	224b      	movs	r2, #75	; 0x4b
   1fd9a:	f008 fcf3 	bl	28784 <assert_print>
   1fd9e:	4808      	ldr	r0, [pc, #32]	; (1fdc0 <bt_rand+0x44>)
   1fda0:	214b      	movs	r1, #75	; 0x4b
   1fda2:	f008 fce8 	bl	28776 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1fda6:	6833      	ldr	r3, [r6, #0]
   1fda8:	4804      	ldr	r0, [pc, #16]	; (1fdbc <bt_rand+0x40>)
   1fdaa:	4622      	mov	r2, r4
   1fdac:	4629      	mov	r1, r5
}
   1fdae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fdb2:	4718      	bx	r3
   1fdb4:	f06f 0012 	mvn.w	r0, #18
   1fdb8:	bd70      	pop	{r4, r5, r6, pc}
   1fdba:	bf00      	nop
   1fdbc:	0002c358 	.word	0x0002c358
   1fdc0:	0002ffe7 	.word	0x0002ffe7
   1fdc4:	0002d509 	.word	0x0002d509

0001fdc8 <sys_memcpy_swap.constprop.0>:
   1fdc8:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1fdca:	b570      	push	{r4, r5, r6, lr}
   1fdcc:	4604      	mov	r4, r0
   1fdce:	460d      	mov	r5, r1
   1fdd0:	f101 0620 	add.w	r6, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fdd4:	d915      	bls.n	1fe02 <sys_memcpy_swap.constprop.0+0x3a>
   1fdd6:	42b0      	cmp	r0, r6
   1fdd8:	d20a      	bcs.n	1fdf0 <sys_memcpy_swap.constprop.0+0x28>
   1fdda:	490c      	ldr	r1, [pc, #48]	; (1fe0c <sys_memcpy_swap.constprop.0+0x44>)
   1fddc:	480c      	ldr	r0, [pc, #48]	; (1fe10 <sys_memcpy_swap.constprop.0+0x48>)
   1fdde:	f240 2217 	movw	r2, #535	; 0x217
   1fde2:	f008 fccf 	bl	28784 <assert_print>
   1fde6:	4809      	ldr	r0, [pc, #36]	; (1fe0c <sys_memcpy_swap.constprop.0+0x44>)
   1fde8:	f240 2117 	movw	r1, #535	; 0x217
   1fdec:	f008 fcc3 	bl	28776 <assert_post_action>
	for (; length > 0; length--) {
   1fdf0:	4633      	mov	r3, r6
   1fdf2:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1fdf4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1fdf8:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   1fdfc:	42ab      	cmp	r3, r5
   1fdfe:	d1f9      	bne.n	1fdf4 <sys_memcpy_swap.constprop.0+0x2c>
}
   1fe00:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1fe02:	d0ea      	beq.n	1fdda <sys_memcpy_swap.constprop.0+0x12>
   1fe04:	f100 0320 	add.w	r3, r0, #32
   1fe08:	4299      	cmp	r1, r3
   1fe0a:	e7e5      	b.n	1fdd8 <sys_memcpy_swap.constprop.0+0x10>
   1fe0c:	0002f47b 	.word	0x0002f47b
   1fe10:	0002d509 	.word	0x0002d509

0001fe14 <ecdh_p256_common_secret>:

static uint8_t common_secret(bool use_debug)
{
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1fe14:	4b1e      	ldr	r3, [pc, #120]	; (1fe90 <ecdh_p256_common_secret+0x7c>)
   1fe16:	491f      	ldr	r1, [pc, #124]	; (1fe94 <ecdh_p256_common_secret+0x80>)
   1fe18:	f103 0220 	add.w	r2, r3, #32
   1fe1c:	2800      	cmp	r0, #0
   1fe1e:	bf08      	it	eq
   1fe20:	4619      	moveq	r1, r3

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1fe22:	b570      	push	{r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1fe24:	4610      	mov	r0, r2
   1fe26:	f005 f8eb 	bl	25000 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1fe2a:	4602      	mov	r2, r0
   1fe2c:	b348      	cbz	r0, 1fe82 <ecdh_p256_common_secret+0x6e>
		BT_ERR("public key is not valid (err %d)", err);
   1fe2e:	481a      	ldr	r0, [pc, #104]	; (1fe98 <ecdh_p256_common_secret+0x84>)
   1fe30:	2145      	movs	r1, #69	; 0x45
   1fe32:	f008 fcb5 	bl	287a0 <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   1fe36:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1fe38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fe3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe40:	2001      	movs	r0, #1
   1fe42:	f7f5 fb9d 	bl	15580 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1fe46:	f100 0608 	add.w	r6, r0, #8
   1fe4a:	2102      	movs	r1, #2
   1fe4c:	4605      	mov	r5, r0
   1fe4e:	4630      	mov	r0, r6
   1fe50:	f7fd f948 	bl	1d0e4 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1fe54:	233e      	movs	r3, #62	; 0x3e
   1fe56:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1fe58:	2322      	movs	r3, #34	; 0x22
   1fe5a:	7043      	strb	r3, [r0, #1]
   1fe5c:	2101      	movs	r1, #1
   1fe5e:	4630      	mov	r0, r6
   1fe60:	f7fd f940 	bl	1d0e4 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1fe64:	2309      	movs	r3, #9
   1fe66:	7003      	strb	r3, [r0, #0]
   1fe68:	2121      	movs	r1, #33	; 0x21
   1fe6a:	4630      	mov	r0, r6
   1fe6c:	f7fd f93a 	bl	1d0e4 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1fe70:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1fe74:	b13c      	cbz	r4, 1fe86 <ecdh_p256_common_secret+0x72>
__ssp_bos_icheck3(memset, void *, int)
   1fe76:	2220      	movs	r2, #32
   1fe78:	21ff      	movs	r1, #255	; 0xff
   1fe7a:	f00c f9a3 	bl	2c1c4 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1fe7e:	4628      	mov	r0, r5
   1fe80:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1fe82:	4604      	mov	r4, r0
   1fe84:	e7d8      	b.n	1fe38 <ecdh_p256_common_secret+0x24>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1fe86:	4905      	ldr	r1, [pc, #20]	; (1fe9c <ecdh_p256_common_secret+0x88>)
   1fe88:	f7ff ff9e 	bl	1fdc8 <sys_memcpy_swap.constprop.0>
   1fe8c:	e7f7      	b.n	1fe7e <ecdh_p256_common_secret+0x6a>
   1fe8e:	bf00      	nop
   1fe90:	20003f83 	.word	0x20003f83
   1fe94:	000301c6 	.word	0x000301c6
   1fe98:	00030176 	.word	0x00030176
   1fe9c:	20003fa3 	.word	0x20003fa3

0001fea0 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1fea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fea2:	4e38      	ldr	r6, [pc, #224]	; (1ff84 <ecdh_cmd_process+0xe4>)
   1fea4:	f3bf 8f5b 	dmb	ish
   1fea8:	6833      	ldr	r3, [r6, #0]
   1feaa:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1feae:	2b02      	cmp	r3, #2
   1feb0:	d059      	beq.n	1ff66 <ecdh_cmd_process+0xc6>
   1feb2:	2b04      	cmp	r3, #4
   1feb4:	d05c      	beq.n	1ff70 <ecdh_cmd_process+0xd0>
   1feb6:	2b01      	cmp	r3, #1
   1feb8:	d15c      	bne.n	1ff74 <ecdh_cmd_process+0xd4>
		err = bt_rand(ecdh.private_key_be, 32);
   1feba:	4c33      	ldr	r4, [pc, #204]	; (1ff88 <ecdh_cmd_process+0xe8>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1febc:	4f33      	ldr	r7, [pc, #204]	; (1ff8c <ecdh_cmd_process+0xec>)
		err = bt_rand(ecdh.private_key_be, 32);
   1febe:	2120      	movs	r1, #32
   1fec0:	4620      	mov	r0, r4
   1fec2:	f7ff ff5b 	bl	1fd7c <bt_rand>
		if (err) {
   1fec6:	2800      	cmp	r0, #0
   1fec8:	d142      	bne.n	1ff50 <ecdh_cmd_process+0xb0>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1feca:	2220      	movs	r2, #32
   1fecc:	4639      	mov	r1, r7
   1fece:	4620      	mov	r0, r4
   1fed0:	f00c f92d 	bl	2c12e <memcmp>
   1fed4:	2800      	cmp	r0, #0
   1fed6:	d0f2      	beq.n	1febe <ecdh_cmd_process+0x1e>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1fed8:	482d      	ldr	r0, [pc, #180]	; (1ff90 <ecdh_cmd_process+0xf0>)
   1feda:	4621      	mov	r1, r4
   1fedc:	f005 f87c 	bl	24fd8 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1fee0:	4605      	mov	r5, r0
   1fee2:	2800      	cmp	r0, #0
   1fee4:	d1eb      	bne.n	1febe <ecdh_cmd_process+0x1e>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1fee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1feea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1feee:	2001      	movs	r0, #1
   1fef0:	f7f5 fb46 	bl	15580 <bt_buf_get_rx>
   1fef4:	f100 0708 	add.w	r7, r0, #8
   1fef8:	2102      	movs	r1, #2
   1fefa:	4604      	mov	r4, r0
   1fefc:	4638      	mov	r0, r7
   1fefe:	f7fd f8f1 	bl	1d0e4 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1ff02:	233e      	movs	r3, #62	; 0x3e
   1ff04:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1ff06:	2342      	movs	r3, #66	; 0x42
   1ff08:	7043      	strb	r3, [r0, #1]
   1ff0a:	2101      	movs	r1, #1
   1ff0c:	4638      	mov	r0, r7
   1ff0e:	f7fd f8e9 	bl	1d0e4 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1ff12:	2308      	movs	r3, #8
   1ff14:	7003      	strb	r3, [r0, #0]
   1ff16:	2141      	movs	r1, #65	; 0x41
   1ff18:	4638      	mov	r0, r7
   1ff1a:	f7fd f8e3 	bl	1d0e4 <net_buf_simple_add>
   1ff1e:	4607      	mov	r7, r0
	evt->status = status;
   1ff20:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1ff24:	b1b5      	cbz	r5, 1ff54 <ecdh_cmd_process+0xb4>
   1ff26:	2240      	movs	r2, #64	; 0x40
   1ff28:	2100      	movs	r1, #0
   1ff2a:	f00c f94b 	bl	2c1c4 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ff2e:	f3bf 8f5b 	dmb	ish
   1ff32:	2300      	movs	r3, #0
   1ff34:	e856 2f00 	ldrex	r2, [r6]
   1ff38:	e846 3100 	strex	r1, r3, [r6]
   1ff3c:	2900      	cmp	r1, #0
   1ff3e:	d1f9      	bne.n	1ff34 <ecdh_cmd_process+0x94>
   1ff40:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1ff44:	b1e4      	cbz	r4, 1ff80 <ecdh_cmd_process+0xe0>
		bt_recv(buf);
   1ff46:	4620      	mov	r0, r4
	}
}
   1ff48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   1ff4c:	f7f6 bb80 	b.w	16650 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1ff50:	251f      	movs	r5, #31
   1ff52:	e7c8      	b.n	1fee6 <ecdh_cmd_process+0x46>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1ff54:	490e      	ldr	r1, [pc, #56]	; (1ff90 <ecdh_cmd_process+0xf0>)
   1ff56:	f7ff ff37 	bl	1fdc8 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1ff5a:	490e      	ldr	r1, [pc, #56]	; (1ff94 <ecdh_cmd_process+0xf4>)
   1ff5c:	f107 0021 	add.w	r0, r7, #33	; 0x21
   1ff60:	f7ff ff32 	bl	1fdc8 <sys_memcpy_swap.constprop.0>
		break;
   1ff64:	e7e3      	b.n	1ff2e <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(false);
   1ff66:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1ff68:	f7ff ff54 	bl	1fe14 <ecdh_p256_common_secret>
   1ff6c:	4604      	mov	r4, r0
		break;
   1ff6e:	e7de      	b.n	1ff2e <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(true);
   1ff70:	2001      	movs	r0, #1
   1ff72:	e7f9      	b.n	1ff68 <ecdh_cmd_process+0xc8>
		BT_WARN("Unknown command");
   1ff74:	4808      	ldr	r0, [pc, #32]	; (1ff98 <ecdh_cmd_process+0xf8>)
   1ff76:	2157      	movs	r1, #87	; 0x57
   1ff78:	f008 fc12 	bl	287a0 <z_log_minimal_printk>
		buf = NULL;
   1ff7c:	2400      	movs	r4, #0
		break;
   1ff7e:	e7d6      	b.n	1ff2e <ecdh_cmd_process+0x8e>
}
   1ff80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff82:	bf00      	nop
   1ff84:	20002a28 	.word	0x20002a28
   1ff88:	20003f83 	.word	0x20003f83
   1ff8c:	000301c6 	.word	0x000301c6
   1ff90:	20003fa3 	.word	0x20003fa3
   1ff94:	20003fc3 	.word	0x20003fc3
   1ff98:	0003019c 	.word	0x0003019c

0001ff9c <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1ff9c:	b510      	push	{r4, lr}
   1ff9e:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1ffa0:	2210      	movs	r2, #16
   1ffa2:	2100      	movs	r1, #0
   1ffa4:	a801      	add	r0, sp, #4
   1ffa6:	f00c f90d 	bl	2c1c4 <memset>
   1ffaa:	4c0b      	ldr	r4, [pc, #44]	; (1ffd8 <ecdh_thread+0x3c>)
   1ffac:	9405      	str	r4, [sp, #20]
   1ffae:	2301      	movs	r3, #1
   1ffb0:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1ffb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ffb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ffbc:	2101      	movs	r1, #1
   1ffbe:	a801      	add	r0, sp, #4
   1ffc0:	f004 feae 	bl	24d20 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1ffc4:	4620      	mov	r0, r4
   1ffc6:	f00c f8a7 	bl	2c118 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1ffca:	9b04      	ldr	r3, [sp, #16]
   1ffcc:	f36f 3352 	bfc	r3, #13, #6
   1ffd0:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1ffd2:	f7ff ff65 	bl	1fea0 <ecdh_cmd_process>
	while (true) {
   1ffd6:	e7ed      	b.n	1ffb4 <ecdh_thread+0x18>
   1ffd8:	20002a2c 	.word	0x20002a2c

0001ffdc <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1ffdc:	b510      	push	{r4, lr}
   1ffde:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1ffe0:	480e      	ldr	r0, [pc, #56]	; (2001c <hci_ecdh_init+0x40>)
   1ffe2:	f00c f894 	bl	2c10e <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ffe6:	4c0e      	ldr	r4, [pc, #56]	; (20020 <hci_ecdh_init+0x44>)
   1ffe8:	490e      	ldr	r1, [pc, #56]	; (20024 <hci_ecdh_init+0x48>)
   1ffea:	2200      	movs	r2, #0
   1ffec:	2300      	movs	r3, #0
   1ffee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1fff2:	2300      	movs	r3, #0
   1fff4:	220a      	movs	r2, #10
   1fff6:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1fffa:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1fffe:	9300      	str	r3, [sp, #0]
   20000:	f44f 7262 	mov.w	r2, #904	; 0x388
   20004:	4b08      	ldr	r3, [pc, #32]	; (20028 <hci_ecdh_init+0x4c>)
   20006:	4620      	mov	r0, r4
   20008:	f001 ff9a 	bl	21f40 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2000c:	4907      	ldr	r1, [pc, #28]	; (2002c <hci_ecdh_init+0x50>)
   2000e:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   20010:	b008      	add	sp, #32
   20012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20016:	f00b be9d 	b.w	2bd54 <z_impl_k_thread_name_set>
   2001a:	bf00      	nop
   2001c:	20002a2c 	.word	0x20002a2c
   20020:	20001e78 	.word	0x20001e78
   20024:	200058c0 	.word	0x200058c0
   20028:	0001ff9d 	.word	0x0001ff9d
   2002c:	000301b1 	.word	0x000301b1

00020030 <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   20030:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20032:	4b0b      	ldr	r3, [pc, #44]	; (20060 <hci_cmd_le_read_local_p256_public_key+0x30>)
   20034:	f3bf 8f5b 	dmb	ish
   20038:	2201      	movs	r2, #1
   2003a:	e853 1f00 	ldrex	r1, [r3]
   2003e:	2900      	cmp	r1, #0
   20040:	d103      	bne.n	2004a <hci_cmd_le_read_local_p256_public_key+0x1a>
   20042:	e843 2000 	strex	r0, r2, [r3]
   20046:	2800      	cmp	r0, #0
   20048:	d1f7      	bne.n	2003a <hci_cmd_le_read_local_p256_public_key+0xa>
   2004a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   2004e:	d105      	bne.n	2005c <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   20050:	4804      	ldr	r0, [pc, #16]	; (20064 <hci_cmd_le_read_local_p256_public_key+0x34>)
   20052:	2100      	movs	r1, #0
   20054:	f004 ff3a 	bl	24ecc <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   20058:	2000      	movs	r0, #0
}
   2005a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2005c:	200c      	movs	r0, #12
   2005e:	e7fc      	b.n	2005a <hci_cmd_le_read_local_p256_public_key+0x2a>
   20060:	20002a28 	.word	0x20002a28
   20064:	20002a2c 	.word	0x20002a2c

00020068 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   20068:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   2006a:	2900      	cmp	r1, #0
   2006c:	4b11      	ldr	r3, [pc, #68]	; (200b4 <cmd_le_generate_dhkey+0x4c>)
   2006e:	f3bf 8f5b 	dmb	ish
{
   20072:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   20074:	bf14      	ite	ne
   20076:	2204      	movne	r2, #4
   20078:	2202      	moveq	r2, #2
   2007a:	e853 1f00 	ldrex	r1, [r3]
   2007e:	2900      	cmp	r1, #0
   20080:	d103      	bne.n	2008a <cmd_le_generate_dhkey+0x22>
   20082:	e843 2000 	strex	r0, r2, [r3]
   20086:	2800      	cmp	r0, #0
   20088:	d1f7      	bne.n	2007a <cmd_le_generate_dhkey+0x12>
   2008a:	f3bf 8f5b 	dmb	ish
   2008e:	d10e      	bne.n	200ae <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   20090:	4621      	mov	r1, r4
   20092:	4809      	ldr	r0, [pc, #36]	; (200b8 <cmd_le_generate_dhkey+0x50>)
   20094:	f7ff fe98 	bl	1fdc8 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   20098:	4808      	ldr	r0, [pc, #32]	; (200bc <cmd_le_generate_dhkey+0x54>)
   2009a:	f104 0120 	add.w	r1, r4, #32
   2009e:	f7ff fe93 	bl	1fdc8 <sys_memcpy_swap.constprop.0>
   200a2:	4807      	ldr	r0, [pc, #28]	; (200c0 <cmd_le_generate_dhkey+0x58>)
   200a4:	2100      	movs	r1, #0
   200a6:	f004 ff11 	bl	24ecc <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   200aa:	2000      	movs	r0, #0
}
   200ac:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   200ae:	200c      	movs	r0, #12
   200b0:	e7fc      	b.n	200ac <cmd_le_generate_dhkey+0x44>
   200b2:	bf00      	nop
   200b4:	20002a28 	.word	0x20002a28
   200b8:	20003fa3 	.word	0x20003fa3
   200bc:	20003fc3 	.word	0x20003fc3
   200c0:	20002a2c 	.word	0x20002a2c

000200c4 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   200c4:	b508      	push	{r3, lr}
   200c6:	4602      	mov	r2, r0
   200c8:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   200ca:	4805      	ldr	r0, [pc, #20]	; (200e0 <m_assert_handler+0x1c>)
   200cc:	2145      	movs	r1, #69	; 0x45
   200ce:	f008 fb67 	bl	287a0 <z_log_minimal_printk>
	k_oops();
   200d2:	4040      	eors	r0, r0
   200d4:	f380 8811 	msr	BASEPRI, r0
   200d8:	f04f 0003 	mov.w	r0, #3
   200dc:	df02      	svc	2
}
   200de:	bd08      	pop	{r3, pc}
   200e0:	000301e6 	.word	0x000301e6

000200e4 <mpsl_low_prio_work_handler>:
{
   200e4:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   200e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   200ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   200ee:	f7ff f92b 	bl	1f348 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   200f2:	b140      	cbz	r0, 20106 <mpsl_low_prio_work_handler+0x22>
   200f4:	4907      	ldr	r1, [pc, #28]	; (20114 <mpsl_low_prio_work_handler+0x30>)
   200f6:	4808      	ldr	r0, [pc, #32]	; (20118 <mpsl_low_prio_work_handler+0x34>)
   200f8:	2247      	movs	r2, #71	; 0x47
   200fa:	f008 fb43 	bl	28784 <assert_print>
   200fe:	4805      	ldr	r0, [pc, #20]	; (20114 <mpsl_low_prio_work_handler+0x30>)
   20100:	2147      	movs	r1, #71	; 0x47
   20102:	f008 fb38 	bl	28776 <assert_post_action>
	mpsl_low_priority_process();
   20106:	f7ed faf8 	bl	d6fa <mpsl_low_priority_process>
}
   2010a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   2010e:	f7ff b923 	b.w	1f358 <multithreading_lock_release>
   20112:	bf00      	nop
   20114:	000301ff 	.word	0x000301ff
   20118:	0002d509 	.word	0x0002d509

0002011c <mpsl_low_prio_irq_handler>:
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   2011c:	4901      	ldr	r1, [pc, #4]	; (20124 <mpsl_low_prio_irq_handler+0x8>)
   2011e:	4802      	ldr	r0, [pc, #8]	; (20128 <mpsl_low_prio_irq_handler+0xc>)
   20120:	f00b bec4 	b.w	2beac <k_work_submit_to_queue>
   20124:	20002a3c 	.word	0x20002a3c
   20128:	20001ef8 	.word	0x20001ef8

0002012c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   2012c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   2012e:	2332      	movs	r3, #50	; 0x32
   20130:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   20134:	4a13      	ldr	r2, [pc, #76]	; (20184 <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   20136:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   20138:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2013a:	2119      	movs	r1, #25
   2013c:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   2013e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   20142:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   20146:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2014a:	f7e4 ff1d 	bl	4f88 <mpsl_init>
	if (err) {
   2014e:	4604      	mov	r4, r0
   20150:	b9a0      	cbnz	r0, 2017c <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   20152:	480d      	ldr	r0, [pc, #52]	; (20188 <mpsl_lib_init+0x5c>)
   20154:	4629      	mov	r1, r5
   20156:	f7ed f9b3 	bl	d4c0 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   2015a:	4604      	mov	r4, r0
   2015c:	b970      	cbnz	r0, 2017c <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2015e:	4601      	mov	r1, r0
   20160:	462a      	mov	r2, r5
   20162:	2008      	movs	r0, #8
   20164:	f7f4 faba 	bl	146dc <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   20168:	462a      	mov	r2, r5
   2016a:	4621      	mov	r1, r4
   2016c:	200b      	movs	r0, #11
   2016e:	f7f4 fab5 	bl	146dc <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   20172:	462a      	mov	r2, r5
   20174:	4621      	mov	r1, r4
   20176:	4628      	mov	r0, r5
   20178:	f7f4 fab0 	bl	146dc <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   2017c:	4620      	mov	r0, r4
   2017e:	b003      	add	sp, #12
   20180:	bd30      	pop	{r4, r5, pc}
   20182:	bf00      	nop
   20184:	000200c5 	.word	0x000200c5
   20188:	20002a4c 	.word	0x20002a4c

0002018c <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   2018c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   2018e:	4d0d      	ldr	r5, [pc, #52]	; (201c4 <mpsl_low_prio_init+0x38>)
   20190:	490d      	ldr	r1, [pc, #52]	; (201c8 <mpsl_low_prio_init+0x3c>)
   20192:	2400      	movs	r4, #0
   20194:	9400      	str	r4, [sp, #0]
   20196:	f06f 0309 	mvn.w	r3, #9
   2019a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2019e:	4628      	mov	r0, r5
   201a0:	f002 fdc6 	bl	22d30 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   201a4:	4909      	ldr	r1, [pc, #36]	; (201cc <mpsl_low_prio_init+0x40>)
   201a6:	4628      	mov	r0, r5
   201a8:	f00b fdd4 	bl	2bd54 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   201ac:	4908      	ldr	r1, [pc, #32]	; (201d0 <mpsl_low_prio_init+0x44>)
   201ae:	4809      	ldr	r0, [pc, #36]	; (201d4 <mpsl_low_prio_init+0x48>)
   201b0:	f002 fd00 	bl	22bb4 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   201b4:	4622      	mov	r2, r4
   201b6:	2104      	movs	r1, #4
   201b8:	2019      	movs	r0, #25
   201ba:	f7f4 fa8f 	bl	146dc <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   201be:	4620      	mov	r0, r4
   201c0:	b003      	add	sp, #12
   201c2:	bd30      	pop	{r4, r5, pc}
   201c4:	20001ef8 	.word	0x20001ef8
   201c8:	20005cc0 	.word	0x20005cc0
   201cc:	0003022c 	.word	0x0003022c
   201d0:	000200e5 	.word	0x000200e5
   201d4:	20002a3c 	.word	0x20002a3c

000201d8 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   201d8:	4b01      	ldr	r3, [pc, #4]	; (201e0 <mpsl_hfclk_callback+0x8>)
   201da:	2000      	movs	r0, #0
   201dc:	681b      	ldr	r3, [r3, #0]
   201de:	4718      	bx	r3
   201e0:	20002a7c 	.word	0x20002a7c

000201e4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   201e4:	b510      	push	{r4, lr}
	switch (domain) {
   201e6:	b130      	cbz	r0, 201f6 <nrfx_clock_start+0x12>
   201e8:	2801      	cmp	r0, #1
   201ea:	d10a      	bne.n	20202 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   201ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   201f0:	4809      	ldr	r0, [pc, #36]	; (20218 <nrfx_clock_start+0x34>)
   201f2:	f7e4 bd3f 	b.w	4c74 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   201f6:	4b09      	ldr	r3, [pc, #36]	; (2021c <nrfx_clock_start+0x38>)
}
   201f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   201fc:	681b      	ldr	r3, [r3, #0]
   201fe:	2001      	movs	r0, #1
   20200:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   20202:	4907      	ldr	r1, [pc, #28]	; (20220 <nrfx_clock_start+0x3c>)
   20204:	4807      	ldr	r0, [pc, #28]	; (20224 <nrfx_clock_start+0x40>)
   20206:	221c      	movs	r2, #28
   20208:	f008 fabc 	bl	28784 <assert_print>
}
   2020c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   20210:	4803      	ldr	r0, [pc, #12]	; (20220 <nrfx_clock_start+0x3c>)
   20212:	211c      	movs	r1, #28
   20214:	f008 baaf 	b.w	28776 <assert_post_action>
   20218:	000201d9 	.word	0x000201d9
   2021c:	20002a7c 	.word	0x20002a7c
   20220:	00030240 	.word	0x00030240
   20224:	0002d509 	.word	0x0002d509

00020228 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   20228:	b508      	push	{r3, lr}
	switch (domain) {
   2022a:	b180      	cbz	r0, 2024e <nrfx_clock_stop+0x26>
   2022c:	2801      	cmp	r0, #1
   2022e:	d103      	bne.n	20238 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   20230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   20234:	f7e4 bd10 	b.w	4c58 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   20238:	4905      	ldr	r1, [pc, #20]	; (20250 <nrfx_clock_stop+0x28>)
   2023a:	4806      	ldr	r0, [pc, #24]	; (20254 <nrfx_clock_stop+0x2c>)
   2023c:	222a      	movs	r2, #42	; 0x2a
   2023e:	f008 faa1 	bl	28784 <assert_print>
}
   20242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   20246:	4802      	ldr	r0, [pc, #8]	; (20250 <nrfx_clock_stop+0x28>)
   20248:	212a      	movs	r1, #42	; 0x2a
   2024a:	f008 ba94 	b.w	28776 <assert_post_action>
}
   2024e:	bd08      	pop	{r3, pc}
   20250:	00030240 	.word	0x00030240
   20254:	0002d509 	.word	0x0002d509

00020258 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   20258:	4b01      	ldr	r3, [pc, #4]	; (20260 <nrfx_clock_init+0x8>)
   2025a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   2025c:	4801      	ldr	r0, [pc, #4]	; (20264 <nrfx_clock_init+0xc>)
   2025e:	4770      	bx	lr
   20260:	20002a7c 	.word	0x20002a7c
   20264:	0bad0000 	.word	0x0bad0000

00020268 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   20268:	b538      	push	{r3, r4, r5, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   2026a:	4d33      	ldr	r5, [pc, #204]	; (20338 <timeslot_callback+0xd0>)
   2026c:	7e2b      	ldrb	r3, [r5, #24]
   2026e:	4283      	cmp	r3, r0
{
   20270:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(session_id == _context.session_id);
   20272:	d008      	beq.n	20286 <timeslot_callback+0x1e>
   20274:	4931      	ldr	r1, [pc, #196]	; (2033c <timeslot_callback+0xd4>)
   20276:	4832      	ldr	r0, [pc, #200]	; (20340 <timeslot_callback+0xd8>)
   20278:	2250      	movs	r2, #80	; 0x50
   2027a:	f008 fa83 	bl	28784 <assert_print>
   2027e:	482f      	ldr	r0, [pc, #188]	; (2033c <timeslot_callback+0xd4>)
   20280:	2150      	movs	r1, #80	; 0x50
   20282:	f008 fa78 	bl	28776 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20286:	f3bf 8f5b 	dmb	ish
   2028a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   2028c:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   20290:	b10b      	cbz	r3, 20296 <timeslot_callback+0x2e>
		return NULL;
	}

	switch (signal) {
   20292:	2000      	movs	r0, #0
   20294:	e023      	b.n	202de <timeslot_callback+0x76>
   20296:	2c09      	cmp	r4, #9
   20298:	d847      	bhi.n	2032a <timeslot_callback+0xc2>
   2029a:	a301      	add	r3, pc, #4	; (adr r3, 202a0 <timeslot_callback+0x38>)
   2029c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   202a0:	000202c9 	.word	0x000202c9
   202a4:	0002032b 	.word	0x0002032b
   202a8:	0002032b 	.word	0x0002032b
   202ac:	0002032b 	.word	0x0002032b
   202b0:	0002032b 	.word	0x0002032b
   202b4:	00020301 	.word	0x00020301
   202b8:	00020301 	.word	0x00020301
   202bc:	000202f9 	.word	0x000202f9
   202c0:	0002032b 	.word	0x0002032b
   202c4:	00020293 	.word	0x00020293
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   202c8:	6a2b      	ldr	r3, [r5, #32]
   202ca:	e9d3 2000 	ldrd	r2, r0, [r3]
   202ce:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   202d0:	2801      	cmp	r0, #1
   202d2:	d005      	beq.n	202e0 <timeslot_callback+0x78>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   202d4:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   202d6:	2302      	movs	r3, #2
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   202d8:	481a      	ldr	r0, [pc, #104]	; (20344 <timeslot_callback+0xdc>)
			_context.return_param.callback_action =
   202da:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
   202de:	bd38      	pop	{r3, r4, r5, pc}
			_context.timeslot_request.params.earliest.timeout_us =
   202e0:	f247 5330 	movw	r3, #30000	; 0x7530
			_context.timeslot_request.params.earliest.priority =
   202e4:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   202e8:	4817      	ldr	r0, [pc, #92]	; (20348 <timeslot_callback+0xe0>)
			_context.timeslot_request.params.earliest.timeout_us =
   202ea:	632b      	str	r3, [r5, #48]	; 0x30
			_context.return_param.callback_action =
   202ec:	2303      	movs	r3, #3
			_context.return_param.params.request.p_next =
   202ee:	63a8      	str	r0, [r5, #56]	; 0x38
			_context.return_param.callback_action =
   202f0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	return &_context.return_param;
   202f4:	3010      	adds	r0, #16
   202f6:	e7f2      	b.n	202de <timeslot_callback+0x76>
	z_impl_k_sem_give(sem);
   202f8:	480f      	ldr	r0, [pc, #60]	; (20338 <timeslot_callback+0xd0>)
   202fa:	f002 f9b9 	bl	22670 <z_impl_k_sem_give>
   202fe:	e7c8      	b.n	20292 <timeslot_callback+0x2a>
	_context.timeslot_request.params.earliest.timeout_us =
   20300:	4b12      	ldr	r3, [pc, #72]	; (2034c <timeslot_callback+0xe4>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   20302:	4911      	ldr	r1, [pc, #68]	; (20348 <timeslot_callback+0xe0>)
   20304:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.timeout_us =
   20306:	632b      	str	r3, [r5, #48]	; 0x30
	_context.timeslot_request.params.earliest.priority =
   20308:	2400      	movs	r4, #0
   2030a:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2030e:	f7ed f87b 	bl	d408 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   20312:	2800      	cmp	r0, #0
   20314:	d0bd      	beq.n	20292 <timeslot_callback+0x2a>
   20316:	4909      	ldr	r1, [pc, #36]	; (2033c <timeslot_callback+0xd4>)
   20318:	4809      	ldr	r0, [pc, #36]	; (20340 <timeslot_callback+0xd8>)
   2031a:	2248      	movs	r2, #72	; 0x48
   2031c:	f008 fa32 	bl	28784 <assert_print>
   20320:	2148      	movs	r1, #72	; 0x48
		__ASSERT(false, "unexpected signal: %u", signal);
   20322:	4806      	ldr	r0, [pc, #24]	; (2033c <timeslot_callback+0xd4>)
   20324:	f008 fa27 	bl	28776 <assert_post_action>
		return NULL;
   20328:	e7b3      	b.n	20292 <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
   2032a:	4904      	ldr	r1, [pc, #16]	; (2033c <timeslot_callback+0xd4>)
   2032c:	4804      	ldr	r0, [pc, #16]	; (20340 <timeslot_callback+0xd8>)
   2032e:	227c      	movs	r2, #124	; 0x7c
   20330:	f008 fa28 	bl	28784 <assert_print>
   20334:	217c      	movs	r1, #124	; 0x7c
   20336:	e7f4      	b.n	20322 <timeslot_callback+0xba>
   20338:	20002a80 	.word	0x20002a80
   2033c:	0003027d 	.word	0x0003027d
   20340:	0002d509 	.word	0x0002d509
   20344:	20002ab4 	.word	0x20002ab4
   20348:	20002aa4 	.word	0x20002aa4
   2034c:	0f423fff 	.word	0x0f423fff

00020350 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   20350:	4802      	ldr	r0, [pc, #8]	; (2035c <nrf_flash_sync_init+0xc>)
   20352:	2201      	movs	r2, #1
   20354:	2100      	movs	r1, #0
   20356:	f00b bd48 	b.w	2bdea <z_impl_k_sem_init>
   2035a:	bf00      	nop
   2035c:	20002a80 	.word	0x20002a80

00020360 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   20360:	4b01      	ldr	r3, [pc, #4]	; (20368 <nrf_flash_sync_set_context+0x8>)
   20362:	61d8      	str	r0, [r3, #28]
}
   20364:	4770      	bx	lr
   20366:	bf00      	nop
   20368:	20002a80 	.word	0x20002a80

0002036c <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   2036c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2036e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   20372:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20378:	f7fe ffe6 	bl	1f348 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2037c:	b140      	cbz	r0, 20390 <nrf_flash_sync_exe+0x24>
   2037e:	494d      	ldr	r1, [pc, #308]	; (204b4 <nrf_flash_sync_exe+0x148>)
   20380:	484d      	ldr	r0, [pc, #308]	; (204b8 <nrf_flash_sync_exe+0x14c>)
   20382:	2299      	movs	r2, #153	; 0x99
   20384:	f008 f9fe 	bl	28784 <assert_print>
   20388:	484a      	ldr	r0, [pc, #296]	; (204b4 <nrf_flash_sync_exe+0x148>)
   2038a:	2199      	movs	r1, #153	; 0x99
   2038c:	f008 f9f3 	bl	28776 <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   20390:	4c4a      	ldr	r4, [pc, #296]	; (204bc <nrf_flash_sync_exe+0x150>)
   20392:	484b      	ldr	r0, [pc, #300]	; (204c0 <nrf_flash_sync_exe+0x154>)
   20394:	f104 0118 	add.w	r1, r4, #24
   20398:	f7e1 fa86 	bl	18a8 <mpsl_timeslot_session_open>
   2039c:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   2039e:	f7fe ffdb 	bl	1f358 <multithreading_lock_release>

	if (ret < 0) {
   203a2:	2d00      	cmp	r5, #0
   203a4:	da07      	bge.n	203b6 <nrf_flash_sync_exe+0x4a>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   203a6:	4847      	ldr	r0, [pc, #284]	; (204c4 <nrf_flash_sync_exe+0x158>)
   203a8:	462a      	mov	r2, r5
   203aa:	2145      	movs	r1, #69	; 0x45
   203ac:	f008 f9f8 	bl	287a0 <z_log_minimal_printk>
		return -ENOMEM;
   203b0:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   203b4:	bd70      	pop	{r4, r5, r6, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   203b6:	f240 1301 	movw	r3, #257	; 0x101
   203ba:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   203bc:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   203be:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   203c0:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   203c2:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   203c4:	f247 5330 	movw	r3, #30000	; 0x7530
   203c8:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   203ca:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   203cc:	f06f 0373 	mvn.w	r3, #115	; 0x73
   203d0:	63e3      	str	r3, [r4, #60]	; 0x3c
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   203d2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   203d6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   203da:	f3bf 8f5b 	dmb	ish
   203de:	e853 1f00 	ldrex	r1, [r3]
   203e2:	e843 2000 	strex	r0, r2, [r3]
   203e6:	2800      	cmp	r0, #0
   203e8:	d1f9      	bne.n	203de <nrf_flash_sync_exe+0x72>
   203ea:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   203ee:	68a2      	ldr	r2, [r4, #8]
   203f0:	461d      	mov	r5, r3
   203f2:	b142      	cbz	r2, 20406 <nrf_flash_sync_exe+0x9a>
   203f4:	492f      	ldr	r1, [pc, #188]	; (204b4 <nrf_flash_sync_exe+0x148>)
   203f6:	4830      	ldr	r0, [pc, #192]	; (204b8 <nrf_flash_sync_exe+0x14c>)
   203f8:	22af      	movs	r2, #175	; 0xaf
   203fa:	f008 f9c3 	bl	28784 <assert_print>
   203fe:	482d      	ldr	r0, [pc, #180]	; (204b4 <nrf_flash_sync_exe+0x148>)
   20400:	21af      	movs	r1, #175	; 0xaf
   20402:	f008 f9b8 	bl	28776 <assert_post_action>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2040a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2040e:	f7fe ff9b 	bl	1f348 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   20412:	b140      	cbz	r0, 20426 <nrf_flash_sync_exe+0xba>
   20414:	4927      	ldr	r1, [pc, #156]	; (204b4 <nrf_flash_sync_exe+0x148>)
   20416:	4828      	ldr	r0, [pc, #160]	; (204b8 <nrf_flash_sync_exe+0x14c>)
   20418:	22b2      	movs	r2, #178	; 0xb2
   2041a:	f008 f9b3 	bl	28784 <assert_print>
   2041e:	4825      	ldr	r0, [pc, #148]	; (204b4 <nrf_flash_sync_exe+0x148>)
   20420:	21b2      	movs	r1, #178	; 0xb2
   20422:	f008 f9a8 	bl	28776 <assert_post_action>
	ret = mpsl_timeslot_request(_context.session_id, req);
   20426:	4928      	ldr	r1, [pc, #160]	; (204c8 <nrf_flash_sync_exe+0x15c>)
   20428:	7e20      	ldrb	r0, [r4, #24]
   2042a:	f7ec ffed 	bl	d408 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2042e:	b140      	cbz	r0, 20442 <nrf_flash_sync_exe+0xd6>
   20430:	4920      	ldr	r1, [pc, #128]	; (204b4 <nrf_flash_sync_exe+0x148>)
   20432:	4821      	ldr	r0, [pc, #132]	; (204b8 <nrf_flash_sync_exe+0x14c>)
   20434:	22b4      	movs	r2, #180	; 0xb4
   20436:	f008 f9a5 	bl	28784 <assert_print>
   2043a:	481e      	ldr	r0, [pc, #120]	; (204b4 <nrf_flash_sync_exe+0x148>)
   2043c:	21b4      	movs	r1, #180	; 0xb4
   2043e:	f008 f99a 	bl	28776 <assert_post_action>
	MULTITHREADING_LOCK_RELEASE();
   20442:	f7fe ff89 	bl	1f358 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   20446:	4a21      	ldr	r2, [pc, #132]	; (204cc <nrf_flash_sync_exe+0x160>)
   20448:	481c      	ldr	r0, [pc, #112]	; (204bc <nrf_flash_sync_exe+0x150>)
   2044a:	2300      	movs	r3, #0
   2044c:	f002 f94a 	bl	226e4 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   20450:	2800      	cmp	r0, #0
   20452:	da0e      	bge.n	20472 <nrf_flash_sync_exe+0x106>
		LOG_ERR("timeout");
   20454:	481e      	ldr	r0, [pc, #120]	; (204d0 <nrf_flash_sync_exe+0x164>)
   20456:	2145      	movs	r1, #69	; 0x45
   20458:	f008 f9a2 	bl	287a0 <z_log_minimal_printk>
   2045c:	f3bf 8f5b 	dmb	ish
   20460:	2301      	movs	r3, #1
   20462:	e855 2f00 	ldrex	r2, [r5]
   20466:	e845 3100 	strex	r1, r3, [r5]
   2046a:	2900      	cmp	r1, #0
   2046c:	d1f9      	bne.n	20462 <nrf_flash_sync_exe+0xf6>
   2046e:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20476:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2047a:	f7fe ff65 	bl	1f348 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2047e:	b140      	cbz	r0, 20492 <nrf_flash_sync_exe+0x126>
   20480:	490c      	ldr	r1, [pc, #48]	; (204b4 <nrf_flash_sync_exe+0x148>)
   20482:	480d      	ldr	r0, [pc, #52]	; (204b8 <nrf_flash_sync_exe+0x14c>)
   20484:	22bf      	movs	r2, #191	; 0xbf
   20486:	f008 f97d 	bl	28784 <assert_print>
   2048a:	480a      	ldr	r0, [pc, #40]	; (204b4 <nrf_flash_sync_exe+0x148>)
   2048c:	21bf      	movs	r1, #191	; 0xbf
   2048e:	f008 f972 	bl	28776 <assert_post_action>
	mpsl_timeslot_session_close(_context.session_id);
   20492:	7e20      	ldrb	r0, [r4, #24]
   20494:	f7ec fff3 	bl	d47e <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   20498:	f7fe ff5e 	bl	1f358 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2049c:	f3bf 8f5b 	dmb	ish
   204a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   204a2:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   204a6:	b113      	cbz	r3, 204ae <nrf_flash_sync_exe+0x142>
	z_impl_k_sem_reset(sem);
   204a8:	4804      	ldr	r0, [pc, #16]	; (204bc <nrf_flash_sync_exe+0x150>)
   204aa:	f002 f985 	bl	227b8 <z_impl_k_sem_reset>
	return _context.status;
   204ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   204b0:	e780      	b.n	203b4 <nrf_flash_sync_exe+0x48>
   204b2:	bf00      	nop
   204b4:	0003027d 	.word	0x0003027d
   204b8:	0002d509 	.word	0x0002d509
   204bc:	20002a80 	.word	0x20002a80
   204c0:	00020269 	.word	0x00020269
   204c4:	000302b7 	.word	0x000302b7
   204c8:	20002aa4 	.word	0x20002aa4
   204cc:	000b7b44 	.word	0x000b7b44
   204d0:	000302e2 	.word	0x000302e2

000204d4 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   204d4:	4b07      	ldr	r3, [pc, #28]	; (204f4 <nrf_flash_sync_check_time_limit+0x20>)
   204d6:	2201      	movs	r2, #1
   204d8:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   204da:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   204de:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   204e2:	4418      	add	r0, r3
   204e4:	4b04      	ldr	r3, [pc, #16]	; (204f8 <nrf_flash_sync_check_time_limit+0x24>)
   204e6:	69db      	ldr	r3, [r3, #28]
}
   204e8:	4298      	cmp	r0, r3
   204ea:	bf34      	ite	cc
   204ec:	2000      	movcc	r0, #0
   204ee:	2001      	movcs	r0, #1
   204f0:	4770      	bx	lr
   204f2:	bf00      	nop
   204f4:	40008000 	.word	0x40008000
   204f8:	20002a80 	.word	0x20002a80

000204fc <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   204fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   20500:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   20504:	2a08      	cmp	r2, #8
   20506:	d106      	bne.n	20516 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20508:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2050c:	2b05      	cmp	r3, #5
   2050e:	d802      	bhi.n	20516 <nrf52_errata_103+0x1a>
   20510:	4a02      	ldr	r2, [pc, #8]	; (2051c <nrf52_errata_103+0x20>)
   20512:	5cd0      	ldrb	r0, [r2, r3]
   20514:	4770      	bx	lr
        return false;
   20516:	2000      	movs	r0, #0
}
   20518:	4770      	bx	lr
   2051a:	bf00      	nop
   2051c:	00030305 	.word	0x00030305

00020520 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   20520:	4a02      	ldr	r2, [pc, #8]	; (2052c <nvmc_wait+0xc>)
   20522:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   20526:	2b00      	cmp	r3, #0
   20528:	d0fb      	beq.n	20522 <nvmc_wait+0x2>
}
   2052a:	4770      	bx	lr
   2052c:	4001e000 	.word	0x4001e000

00020530 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   20530:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   20532:	f00b fb0f 	bl	2bb54 <nrf52_errata_136>
   20536:	b140      	cbz	r0, 2054a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   20538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2053c:	2200      	movs	r2, #0
   2053e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   20542:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   20546:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   2054a:	f00b fb03 	bl	2bb54 <nrf52_errata_136>
   2054e:	2800      	cmp	r0, #0
   20550:	d046      	beq.n	205e0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   20552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20556:	4b60      	ldr	r3, [pc, #384]	; (206d8 <SystemInit+0x1a8>)
   20558:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   2055c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   20560:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   20564:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   20568:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   2056c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   20570:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   20574:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   20578:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   2057c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   20580:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20584:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   20588:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   2058c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   20590:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   20594:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   20598:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   2059c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   205a0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   205a4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   205a8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   205ac:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   205b0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   205b4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   205b8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   205bc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   205c0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   205c4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   205c8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   205cc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   205d0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   205d4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   205d8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   205dc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   205e0:	f7ff ff8c 	bl	204fc <nrf52_errata_103>
   205e4:	b118      	cbz	r0, 205ee <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   205e6:	4b3d      	ldr	r3, [pc, #244]	; (206dc <SystemInit+0x1ac>)
   205e8:	4a3d      	ldr	r2, [pc, #244]	; (206e0 <SystemInit+0x1b0>)
   205ea:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   205ee:	f7ff ff85 	bl	204fc <nrf52_errata_103>
   205f2:	b118      	cbz	r0, 205fc <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   205f4:	4b3b      	ldr	r3, [pc, #236]	; (206e4 <SystemInit+0x1b4>)
   205f6:	22fb      	movs	r2, #251	; 0xfb
   205f8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   205fc:	f7ff ff7e 	bl	204fc <nrf52_errata_103>
   20600:	b170      	cbz	r0, 20620 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   20602:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   20606:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2060a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   2060e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   20612:	f022 020f 	bic.w	r2, r2, #15
   20616:	f003 030f 	and.w	r3, r3, #15
   2061a:	4313      	orrs	r3, r2
   2061c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   20620:	f7ff ff6c 	bl	204fc <nrf52_errata_103>
   20624:	b120      	cbz	r0, 20630 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   20626:	4b30      	ldr	r3, [pc, #192]	; (206e8 <SystemInit+0x1b8>)
   20628:	f44f 7200 	mov.w	r2, #512	; 0x200
   2062c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   20630:	f00b fa90 	bl	2bb54 <nrf52_errata_136>
   20634:	b148      	cbz	r0, 2064a <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   20636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2063a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2063e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   20640:	bf44      	itt	mi
   20642:	f06f 0201 	mvnmi.w	r2, #1
   20646:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2064a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2064e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   20652:	2a08      	cmp	r2, #8
   20654:	d10e      	bne.n	20674 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20656:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   2065a:	2b05      	cmp	r3, #5
   2065c:	d802      	bhi.n	20664 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2065e:	4a23      	ldr	r2, [pc, #140]	; (206ec <SystemInit+0x1bc>)
   20660:	5cd3      	ldrb	r3, [r2, r3]
   20662:	b13b      	cbz	r3, 20674 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   20664:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20668:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2066c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20670:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20674:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20678:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2067c:	2a00      	cmp	r2, #0
   2067e:	db03      	blt.n	20688 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   20680:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20684:	2b00      	cmp	r3, #0
   20686:	da22      	bge.n	206ce <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20688:	4919      	ldr	r1, [pc, #100]	; (206f0 <SystemInit+0x1c0>)
   2068a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2068c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20690:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   20694:	2412      	movs	r4, #18
    nvmc_wait();
   20696:	f7ff ff43 	bl	20520 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2069a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2069e:	f7ff ff3f 	bl	20520 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   206a2:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   206a6:	f7ff ff3b 	bl	20520 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   206aa:	2300      	movs	r3, #0
   206ac:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   206b0:	f7ff ff36 	bl	20520 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   206b4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   206b8:	490e      	ldr	r1, [pc, #56]	; (206f4 <SystemInit+0x1c4>)
   206ba:	4b0f      	ldr	r3, [pc, #60]	; (206f8 <SystemInit+0x1c8>)
   206bc:	68ca      	ldr	r2, [r1, #12]
   206be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   206c2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   206c4:	60cb      	str	r3, [r1, #12]
   206c6:	f3bf 8f4f 	dsb	sy
    __NOP();
   206ca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   206cc:	e7fd      	b.n	206ca <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   206ce:	4b0b      	ldr	r3, [pc, #44]	; (206fc <SystemInit+0x1cc>)
   206d0:	4a0b      	ldr	r2, [pc, #44]	; (20700 <SystemInit+0x1d0>)
   206d2:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   206d4:	bd10      	pop	{r4, pc}
   206d6:	bf00      	nop
   206d8:	4000c000 	.word	0x4000c000
   206dc:	40005000 	.word	0x40005000
   206e0:	00038148 	.word	0x00038148
   206e4:	4000f000 	.word	0x4000f000
   206e8:	40029000 	.word	0x40029000
   206ec:	000302ff 	.word	0x000302ff
   206f0:	4001e000 	.word	0x4001e000
   206f4:	e000ed00 	.word	0xe000ed00
   206f8:	05fa0004 	.word	0x05fa0004
   206fc:	20000774 	.word	0x20000774
   20700:	03d09000 	.word	0x03d09000

00020704 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   20704:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   20706:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   20708:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2070a:	fab2 f382 	clz	r3, r2
   2070e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   20712:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   20714:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   20716:	d014      	beq.n	20742 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20718:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2071c:	fa05 f303 	lsl.w	r3, r5, r3
   20720:	ea22 0303 	bic.w	r3, r2, r3
   20724:	e850 6f00 	ldrex	r6, [r0]
   20728:	4296      	cmp	r6, r2
   2072a:	d104      	bne.n	20736 <nrfx_flag32_alloc+0x32>
   2072c:	e840 3c00 	strex	ip, r3, [r0]
   20730:	f1bc 0f00 	cmp.w	ip, #0
   20734:	d1f6      	bne.n	20724 <nrfx_flag32_alloc+0x20>
   20736:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2073a:	d1e5      	bne.n	20708 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   2073c:	4802      	ldr	r0, [pc, #8]	; (20748 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   2073e:	700c      	strb	r4, [r1, #0]
}
   20740:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   20742:	4802      	ldr	r0, [pc, #8]	; (2074c <nrfx_flag32_alloc+0x48>)
   20744:	e7fc      	b.n	20740 <nrfx_flag32_alloc+0x3c>
   20746:	bf00      	nop
   20748:	0bad0000 	.word	0x0bad0000
   2074c:	0bad0002 	.word	0x0bad0002

00020750 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   20750:	6803      	ldr	r3, [r0, #0]
   20752:	40cb      	lsrs	r3, r1
   20754:	07db      	lsls	r3, r3, #31
{
   20756:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   20758:	d415      	bmi.n	20786 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2075a:	2301      	movs	r3, #1
   2075c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   20760:	6803      	ldr	r3, [r0, #0]
   20762:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   20766:	ea41 0203 	orr.w	r2, r1, r3
   2076a:	e850 4f00 	ldrex	r4, [r0]
   2076e:	429c      	cmp	r4, r3
   20770:	d104      	bne.n	2077c <nrfx_flag32_free+0x2c>
   20772:	e840 2c00 	strex	ip, r2, [r0]
   20776:	f1bc 0f00 	cmp.w	ip, #0
   2077a:	d1f6      	bne.n	2076a <nrfx_flag32_free+0x1a>
   2077c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20780:	d1ee      	bne.n	20760 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   20782:	4802      	ldr	r0, [pc, #8]	; (2078c <nrfx_flag32_free+0x3c>)
}
   20784:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20786:	4802      	ldr	r0, [pc, #8]	; (20790 <nrfx_flag32_free+0x40>)
   20788:	e7fc      	b.n	20784 <nrfx_flag32_free+0x34>
   2078a:	bf00      	nop
   2078c:	0bad0000 	.word	0x0bad0000
   20790:	0bad0004 	.word	0x0bad0004

00020794 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   20794:	4b03      	ldr	r3, [pc, #12]	; (207a4 <pin_in_use_by_te+0x10>)
   20796:	3008      	adds	r0, #8
   20798:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2079c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   207a0:	4770      	bx	lr
   207a2:	bf00      	nop
   207a4:	20000778 	.word	0x20000778

000207a8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   207a8:	4b04      	ldr	r3, [pc, #16]	; (207bc <pin_has_trigger+0x14>)
   207aa:	3008      	adds	r0, #8
   207ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   207b0:	f010 001c 	ands.w	r0, r0, #28
   207b4:	bf18      	it	ne
   207b6:	2001      	movne	r0, #1
   207b8:	4770      	bx	lr
   207ba:	bf00      	nop
   207bc:	20000778 	.word	0x20000778

000207c0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   207c0:	4b03      	ldr	r3, [pc, #12]	; (207d0 <pin_is_output+0x10>)
   207c2:	3008      	adds	r0, #8
   207c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   207c8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   207cc:	4770      	bx	lr
   207ce:	bf00      	nop
   207d0:	20000778 	.word	0x20000778

000207d4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   207d4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   207d6:	f100 0308 	add.w	r3, r0, #8
   207da:	4c0c      	ldr	r4, [pc, #48]	; (2080c <call_handler+0x38>)
   207dc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   207e0:	05da      	lsls	r2, r3, #23
{
   207e2:	4605      	mov	r5, r0
   207e4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   207e6:	d507      	bpl.n	207f8 <call_handler+0x24>
   207e8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   207ec:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   207f0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   207f4:	6852      	ldr	r2, [r2, #4]
   207f6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   207f8:	68a3      	ldr	r3, [r4, #8]
   207fa:	b12b      	cbz	r3, 20808 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   207fc:	68e2      	ldr	r2, [r4, #12]
   207fe:	4631      	mov	r1, r6
   20800:	4628      	mov	r0, r5
    }
}
   20802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   20806:	4718      	bx	r3
}
   20808:	bd70      	pop	{r4, r5, r6, pc}
   2080a:	bf00      	nop
   2080c:	20000778 	.word	0x20000778

00020810 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20810:	4a19      	ldr	r2, [pc, #100]	; (20878 <release_handler+0x68>)
   20812:	3008      	adds	r0, #8
{
   20814:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20816:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   2081a:	05d9      	lsls	r1, r3, #23
   2081c:	d51d      	bpl.n	2085a <release_handler+0x4a>
   2081e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   20822:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20826:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2082a:	f102 0410 	add.w	r4, r2, #16
   2082e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   20830:	f834 3b02 	ldrh.w	r3, [r4], #2
   20834:	f413 7f80 	tst.w	r3, #256	; 0x100
   20838:	d003      	beq.n	20842 <release_handler+0x32>
   2083a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2083e:	4299      	cmp	r1, r3
   20840:	d00b      	beq.n	2085a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   20842:	3001      	adds	r0, #1
   20844:	2830      	cmp	r0, #48	; 0x30
   20846:	d1f3      	bne.n	20830 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   20848:	2300      	movs	r3, #0
   2084a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2084e:	480b      	ldr	r0, [pc, #44]	; (2087c <release_handler+0x6c>)
   20850:	f7ff ff7e 	bl	20750 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   20854:	4b0a      	ldr	r3, [pc, #40]	; (20880 <release_handler+0x70>)
   20856:	4298      	cmp	r0, r3
   20858:	d100      	bne.n	2085c <release_handler+0x4c>
}
   2085a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2085c:	4909      	ldr	r1, [pc, #36]	; (20884 <release_handler+0x74>)
   2085e:	480a      	ldr	r0, [pc, #40]	; (20888 <release_handler+0x78>)
   20860:	f44f 7299 	mov.w	r2, #306	; 0x132
   20864:	f007 ff8e 	bl	28784 <assert_print>
}
   20868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2086c:	4805      	ldr	r0, [pc, #20]	; (20884 <release_handler+0x74>)
   2086e:	f44f 7199 	mov.w	r1, #306	; 0x132
   20872:	f007 bf80 	b.w	28776 <assert_post_action>
   20876:	bf00      	nop
   20878:	20000778 	.word	0x20000778
   2087c:	200007ec 	.word	0x200007ec
   20880:	0bad0000 	.word	0x0bad0000
   20884:	0003030b 	.word	0x0003030b
   20888:	0002d509 	.word	0x0002d509

0002088c <pin_handler_trigger_uninit>:
{
   2088c:	b538      	push	{r3, r4, r5, lr}
   2088e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   20890:	f7ff ff80 	bl	20794 <pin_in_use_by_te>
   20894:	4c09      	ldr	r4, [pc, #36]	; (208bc <pin_handler_trigger_uninit+0x30>)
   20896:	f102 0508 	add.w	r5, r2, #8
   2089a:	b140      	cbz	r0, 208ae <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2089c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   208a0:	4907      	ldr	r1, [pc, #28]	; (208c0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   208a2:	0b5b      	lsrs	r3, r3, #13
   208a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   208a8:	2000      	movs	r0, #0
   208aa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   208ae:	4610      	mov	r0, r2
   208b0:	f7ff ffae 	bl	20810 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   208b4:	2300      	movs	r3, #0
   208b6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   208ba:	bd38      	pop	{r3, r4, r5, pc}
   208bc:	20000778 	.word	0x20000778
   208c0:	40006000 	.word	0x40006000

000208c4 <nrf_gpio_pin_port_decode>:
{
   208c4:	b510      	push	{r4, lr}
   208c6:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   208c8:	6800      	ldr	r0, [r0, #0]
   208ca:	f00b f94f 	bl	2bb6c <nrf_gpio_pin_present_check>
   208ce:	b950      	cbnz	r0, 208e6 <nrf_gpio_pin_port_decode+0x22>
   208d0:	4911      	ldr	r1, [pc, #68]	; (20918 <nrf_gpio_pin_port_decode+0x54>)
   208d2:	4812      	ldr	r0, [pc, #72]	; (2091c <nrf_gpio_pin_port_decode+0x58>)
   208d4:	f240 2247 	movw	r2, #583	; 0x247
   208d8:	f007 ff54 	bl	28784 <assert_print>
   208dc:	480e      	ldr	r0, [pc, #56]	; (20918 <nrf_gpio_pin_port_decode+0x54>)
   208de:	f240 2147 	movw	r1, #583	; 0x247
   208e2:	f007 ff48 	bl	28776 <assert_post_action>
    uint32_t pin_number = *p_pin;
   208e6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   208e8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   208ec:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   208ee:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   208f0:	d00c      	beq.n	2090c <nrf_gpio_pin_port_decode+0x48>
   208f2:	2b01      	cmp	r3, #1
   208f4:	d00d      	beq.n	20912 <nrf_gpio_pin_port_decode+0x4e>
            NRFX_ASSERT(0);
   208f6:	4908      	ldr	r1, [pc, #32]	; (20918 <nrf_gpio_pin_port_decode+0x54>)
   208f8:	4808      	ldr	r0, [pc, #32]	; (2091c <nrf_gpio_pin_port_decode+0x58>)
   208fa:	f44f 7213 	mov.w	r2, #588	; 0x24c
   208fe:	f007 ff41 	bl	28784 <assert_print>
   20902:	4805      	ldr	r0, [pc, #20]	; (20918 <nrf_gpio_pin_port_decode+0x54>)
   20904:	f44f 7113 	mov.w	r1, #588	; 0x24c
   20908:	f007 ff35 	bl	28776 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2090c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   20910:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   20912:	4803      	ldr	r0, [pc, #12]	; (20920 <nrf_gpio_pin_port_decode+0x5c>)
   20914:	e7fc      	b.n	20910 <nrf_gpio_pin_port_decode+0x4c>
   20916:	bf00      	nop
   20918:	0002fbc2 	.word	0x0002fbc2
   2091c:	0002d509 	.word	0x0002d509
   20920:	50000300 	.word	0x50000300

00020924 <nrfx_gpiote_input_configure>:
{
   20924:	b5f0      	push	{r4, r5, r6, r7, lr}
   20926:	4604      	mov	r4, r0
   20928:	b085      	sub	sp, #20
   2092a:	4617      	mov	r7, r2
   2092c:	461d      	mov	r5, r3
    if (p_input_config)
   2092e:	b1f1      	cbz	r1, 2096e <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   20930:	f00b f92d 	bl	2bb8e <pin_is_task_output>
   20934:	b110      	cbz	r0, 2093c <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   20936:	484d      	ldr	r0, [pc, #308]	; (20a6c <nrfx_gpiote_input_configure+0x148>)
}
   20938:	b005      	add	sp, #20
   2093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2093c:	460b      	mov	r3, r1
   2093e:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   20942:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   20946:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2094a:	f10d 020f 	add.w	r2, sp, #15
   2094e:	f10d 010e 	add.w	r1, sp, #14
   20952:	4620      	mov	r0, r4
   20954:	f00b f92a 	bl	2bbac <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   20958:	4a45      	ldr	r2, [pc, #276]	; (20a70 <nrfx_gpiote_input_configure+0x14c>)
   2095a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2095e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   20962:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   20966:	f043 0301 	orr.w	r3, r3, #1
   2096a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   2096e:	b197      	cbz	r7, 20996 <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
   20970:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   20972:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   20974:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   20976:	f7ff ff23 	bl	207c0 <pin_is_output>
   2097a:	b180      	cbz	r0, 2099e <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
   2097c:	2a00      	cmp	r2, #0
   2097e:	d1da      	bne.n	20936 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   20980:	4a3b      	ldr	r2, [pc, #236]	; (20a70 <nrfx_gpiote_input_configure+0x14c>)
   20982:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   20986:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2098a:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2098e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   20992:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   20996:	2d00      	cmp	r5, #0
   20998:	d13d      	bne.n	20a16 <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
   2099a:	4836      	ldr	r0, [pc, #216]	; (20a74 <nrfx_gpiote_input_configure+0x150>)
   2099c:	e7cc      	b.n	20938 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2099e:	4f34      	ldr	r7, [pc, #208]	; (20a70 <nrfx_gpiote_input_configure+0x14c>)
   209a0:	f104 0c08 	add.w	ip, r4, #8
   209a4:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
   209a8:	f021 0120 	bic.w	r1, r1, #32
   209ac:	04c9      	lsls	r1, r1, #19
   209ae:	0cc9      	lsrs	r1, r1, #19
   209b0:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
   209b4:	2a00      	cmp	r2, #0
   209b6:	d0e3      	beq.n	20980 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
   209b8:	2e03      	cmp	r6, #3
   209ba:	d8bc      	bhi.n	20936 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   209bc:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   209be:	b92e      	cbnz	r6, 209cc <nrfx_gpiote_input_configure+0xa8>
   209c0:	4a2d      	ldr	r2, [pc, #180]	; (20a78 <nrfx_gpiote_input_configure+0x154>)
   209c2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   209c6:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   209ca:	e7d9      	b.n	20980 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   209cc:	009a      	lsls	r2, r3, #2
   209ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   209d2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   209d6:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
   209da:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   209de:	f020 0003 	bic.w	r0, r0, #3
   209e2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   209e6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   209ea:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   209ee:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   209f2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   209f6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   209fa:	0220      	lsls	r0, r4, #8
   209fc:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   20a00:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   20a04:	ea40 000e 	orr.w	r0, r0, lr
   20a08:	f041 0120 	orr.w	r1, r1, #32
   20a0c:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
   20a10:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   20a14:	e7b4      	b.n	20980 <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   20a16:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   20a1a:	4620      	mov	r0, r4
   20a1c:	f7ff fef8 	bl	20810 <release_handler>
    if (!handler)
   20a20:	2e00      	cmp	r6, #0
   20a22:	d0ba      	beq.n	2099a <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   20a24:	4d12      	ldr	r5, [pc, #72]	; (20a70 <nrfx_gpiote_input_configure+0x14c>)
   20a26:	682b      	ldr	r3, [r5, #0]
   20a28:	429e      	cmp	r6, r3
   20a2a:	d104      	bne.n	20a36 <nrfx_gpiote_input_configure+0x112>
   20a2c:	686b      	ldr	r3, [r5, #4]
   20a2e:	429f      	cmp	r7, r3
   20a30:	d101      	bne.n	20a36 <nrfx_gpiote_input_configure+0x112>
   20a32:	2200      	movs	r2, #0
   20a34:	e00a      	b.n	20a4c <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   20a36:	4811      	ldr	r0, [pc, #68]	; (20a7c <nrfx_gpiote_input_configure+0x158>)
   20a38:	f10d 010f 	add.w	r1, sp, #15
   20a3c:	f7ff fe62 	bl	20704 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   20a40:	4b0c      	ldr	r3, [pc, #48]	; (20a74 <nrfx_gpiote_input_configure+0x150>)
   20a42:	4298      	cmp	r0, r3
   20a44:	f47f af78 	bne.w	20938 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   20a48:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   20a4c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   20a50:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20a54:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   20a56:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   20a58:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   20a5c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   20a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20a64:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   20a68:	e797      	b.n	2099a <nrfx_gpiote_input_configure+0x76>
   20a6a:	bf00      	nop
   20a6c:	0bad0004 	.word	0x0bad0004
   20a70:	20000778 	.word	0x20000778
   20a74:	0bad0000 	.word	0x0bad0000
   20a78:	40006000 	.word	0x40006000
   20a7c:	200007ec 	.word	0x200007ec

00020a80 <nrfx_gpiote_output_configure>:
{
   20a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a82:	4604      	mov	r4, r0
   20a84:	b085      	sub	sp, #20
   20a86:	4615      	mov	r5, r2
    if (p_config)
   20a88:	b321      	cbz	r1, 20ad4 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   20a8a:	f7ff fe99 	bl	207c0 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   20a8e:	b920      	cbnz	r0, 20a9a <nrfx_gpiote_output_configure+0x1a>
   20a90:	4620      	mov	r0, r4
   20a92:	f7ff fe7f 	bl	20794 <pin_in_use_by_te>
   20a96:	2800      	cmp	r0, #0
   20a98:	d15e      	bne.n	20b58 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   20a9a:	4620      	mov	r0, r4
   20a9c:	f7ff fe84 	bl	207a8 <pin_has_trigger>
   20aa0:	b110      	cbz	r0, 20aa8 <nrfx_gpiote_output_configure+0x28>
   20aa2:	784b      	ldrb	r3, [r1, #1]
   20aa4:	2b01      	cmp	r3, #1
   20aa6:	d057      	beq.n	20b58 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   20aa8:	2301      	movs	r3, #1
   20aaa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   20aae:	2300      	movs	r3, #0
   20ab0:	e9cd 1300 	strd	r1, r3, [sp]
   20ab4:	1c4a      	adds	r2, r1, #1
   20ab6:	1c8b      	adds	r3, r1, #2
   20ab8:	4620      	mov	r0, r4
   20aba:	f10d 010f 	add.w	r1, sp, #15
   20abe:	f00b f875 	bl	2bbac <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   20ac2:	4a26      	ldr	r2, [pc, #152]	; (20b5c <nrfx_gpiote_output_configure+0xdc>)
   20ac4:	f104 0108 	add.w	r1, r4, #8
   20ac8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   20acc:	f043 0303 	orr.w	r3, r3, #3
   20ad0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   20ad4:	b915      	cbnz	r5, 20adc <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   20ad6:	4822      	ldr	r0, [pc, #136]	; (20b60 <nrfx_gpiote_output_configure+0xe0>)
}
   20ad8:	b005      	add	sp, #20
   20ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   20adc:	4620      	mov	r0, r4
   20ade:	f7ff fe6f 	bl	207c0 <pin_is_output>
        if (pin_is_input(pin))
   20ae2:	b3c8      	cbz	r0, 20b58 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   20ae4:	4e1d      	ldr	r6, [pc, #116]	; (20b5c <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   20ae6:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   20aea:	f104 0708 	add.w	r7, r4, #8
   20aee:	4661      	mov	r1, ip
   20af0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   20af4:	0089      	lsls	r1, r1, #2
   20af6:	f020 0020 	bic.w	r0, r0, #32
   20afa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   20afe:	04c0      	lsls	r0, r0, #19
   20b00:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   20b04:	0cc0      	lsrs	r0, r0, #19
   20b06:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   20b0a:	2300      	movs	r3, #0
   20b0c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   20b10:	786a      	ldrb	r2, [r5, #1]
   20b12:	2a00      	cmp	r2, #0
   20b14:	d0df      	beq.n	20ad6 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   20b16:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   20b1a:	78ad      	ldrb	r5, [r5, #2]
   20b1c:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   20b20:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   20b24:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20b28:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   20b2c:	0223      	lsls	r3, r4, #8
   20b2e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   20b32:	0412      	lsls	r2, r2, #16
   20b34:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20b38:	ea43 030e 	orr.w	r3, r3, lr
   20b3c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   20b3e:	052a      	lsls	r2, r5, #20
   20b40:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   20b44:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20b48:	4313      	orrs	r3, r2
   20b4a:	f040 0020 	orr.w	r0, r0, #32
   20b4e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   20b52:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   20b56:	e7be      	b.n	20ad6 <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
   20b58:	4802      	ldr	r0, [pc, #8]	; (20b64 <nrfx_gpiote_output_configure+0xe4>)
   20b5a:	e7bd      	b.n	20ad8 <nrfx_gpiote_output_configure+0x58>
   20b5c:	20000778 	.word	0x20000778
   20b60:	0bad0000 	.word	0x0bad0000
   20b64:	0bad0004 	.word	0x0bad0004

00020b68 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   20b68:	4b01      	ldr	r3, [pc, #4]	; (20b70 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   20b6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   20b6e:	4770      	bx	lr
   20b70:	20000778 	.word	0x20000778

00020b74 <nrfx_gpiote_channel_get>:
{
   20b74:	b538      	push	{r3, r4, r5, lr}
   20b76:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   20b78:	460d      	mov	r5, r1
   20b7a:	b951      	cbnz	r1, 20b92 <nrfx_gpiote_channel_get+0x1e>
   20b7c:	490c      	ldr	r1, [pc, #48]	; (20bb0 <nrfx_gpiote_channel_get+0x3c>)
   20b7e:	480d      	ldr	r0, [pc, #52]	; (20bb4 <nrfx_gpiote_channel_get+0x40>)
   20b80:	f240 2235 	movw	r2, #565	; 0x235
   20b84:	f007 fdfe 	bl	28784 <assert_print>
   20b88:	4809      	ldr	r0, [pc, #36]	; (20bb0 <nrfx_gpiote_channel_get+0x3c>)
   20b8a:	f240 2135 	movw	r1, #565	; 0x235
   20b8e:	f007 fdf2 	bl	28776 <assert_post_action>
    if (pin_in_use_by_te(pin))
   20b92:	4620      	mov	r0, r4
   20b94:	f7ff fdfe 	bl	20794 <pin_in_use_by_te>
   20b98:	b138      	cbz	r0, 20baa <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20b9a:	4b07      	ldr	r3, [pc, #28]	; (20bb8 <nrfx_gpiote_channel_get+0x44>)
        return NRFX_SUCCESS;
   20b9c:	4807      	ldr	r0, [pc, #28]	; (20bbc <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20b9e:	3408      	adds	r4, #8
   20ba0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   20ba4:	0b5b      	lsrs	r3, r3, #13
   20ba6:	702b      	strb	r3, [r5, #0]
}
   20ba8:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20baa:	4805      	ldr	r0, [pc, #20]	; (20bc0 <nrfx_gpiote_channel_get+0x4c>)
   20bac:	e7fc      	b.n	20ba8 <nrfx_gpiote_channel_get+0x34>
   20bae:	bf00      	nop
   20bb0:	0003030b 	.word	0x0003030b
   20bb4:	0002d509 	.word	0x0002d509
   20bb8:	20000778 	.word	0x20000778
   20bbc:	0bad0000 	.word	0x0bad0000
   20bc0:	0bad0004 	.word	0x0bad0004

00020bc4 <nrfx_gpiote_init>:
{
   20bc4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   20bc6:	4c0f      	ldr	r4, [pc, #60]	; (20c04 <nrfx_gpiote_init+0x40>)
   20bc8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   20bcc:	b9bd      	cbnz	r5, 20bfe <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   20bce:	2260      	movs	r2, #96	; 0x60
   20bd0:	4629      	mov	r1, r5
   20bd2:	f104 0010 	add.w	r0, r4, #16
   20bd6:	f00b faf5 	bl	2c1c4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   20bda:	2006      	movs	r0, #6
   20bdc:	f7f3 fd4c 	bl	14678 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20be0:	4b09      	ldr	r3, [pc, #36]	; (20c08 <nrfx_gpiote_init+0x44>)
    return err_code;
   20be2:	480a      	ldr	r0, [pc, #40]	; (20c0c <nrfx_gpiote_init+0x48>)
   20be4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   20be8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   20bec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   20bf0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   20bf4:	2301      	movs	r3, #1
   20bf6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   20bfa:	6763      	str	r3, [r4, #116]	; 0x74
}
   20bfc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   20bfe:	4804      	ldr	r0, [pc, #16]	; (20c10 <nrfx_gpiote_init+0x4c>)
   20c00:	e7fc      	b.n	20bfc <nrfx_gpiote_init+0x38>
   20c02:	bf00      	nop
   20c04:	20000778 	.word	0x20000778
   20c08:	40006000 	.word	0x40006000
   20c0c:	0bad0000 	.word	0x0bad0000
   20c10:	0bad0005 	.word	0x0bad0005

00020c14 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   20c14:	4b03      	ldr	r3, [pc, #12]	; (20c24 <nrfx_gpiote_is_init+0x10>)
   20c16:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   20c1a:	3800      	subs	r0, #0
   20c1c:	bf18      	it	ne
   20c1e:	2001      	movne	r0, #1
   20c20:	4770      	bx	lr
   20c22:	bf00      	nop
   20c24:	20000778 	.word	0x20000778

00020c28 <nrfx_gpiote_channel_free>:
{
   20c28:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   20c2a:	4801      	ldr	r0, [pc, #4]	; (20c30 <nrfx_gpiote_channel_free+0x8>)
   20c2c:	f7ff bd90 	b.w	20750 <nrfx_flag32_free>
   20c30:	200007e8 	.word	0x200007e8

00020c34 <nrfx_gpiote_channel_alloc>:
{
   20c34:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   20c36:	4801      	ldr	r0, [pc, #4]	; (20c3c <nrfx_gpiote_channel_alloc+0x8>)
   20c38:	f7ff bd64 	b.w	20704 <nrfx_flag32_alloc>
   20c3c:	200007e8 	.word	0x200007e8

00020c40 <nrfx_gpiote_trigger_enable>:
{
   20c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20c42:	4604      	mov	r4, r0
   20c44:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   20c46:	f7ff fdaf 	bl	207a8 <pin_has_trigger>
   20c4a:	b950      	cbnz	r0, 20c62 <nrfx_gpiote_trigger_enable+0x22>
   20c4c:	492f      	ldr	r1, [pc, #188]	; (20d0c <nrfx_gpiote_trigger_enable+0xcc>)
   20c4e:	4830      	ldr	r0, [pc, #192]	; (20d10 <nrfx_gpiote_trigger_enable+0xd0>)
   20c50:	f240 32df 	movw	r2, #991	; 0x3df
   20c54:	f007 fd96 	bl	28784 <assert_print>
   20c58:	482c      	ldr	r0, [pc, #176]	; (20d0c <nrfx_gpiote_trigger_enable+0xcc>)
   20c5a:	f240 31df 	movw	r1, #991	; 0x3df
   20c5e:	f007 fd8a 	bl	28776 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20c62:	4620      	mov	r0, r4
   20c64:	f7ff fd96 	bl	20794 <pin_in_use_by_te>
   20c68:	4e2a      	ldr	r6, [pc, #168]	; (20d14 <nrfx_gpiote_trigger_enable+0xd4>)
   20c6a:	f104 0708 	add.w	r7, r4, #8
   20c6e:	b318      	cbz	r0, 20cb8 <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
   20c70:	4620      	mov	r0, r4
   20c72:	f7ff fda5 	bl	207c0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20c76:	4602      	mov	r2, r0
   20c78:	b9f0      	cbnz	r0, 20cb8 <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20c7a:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   20c7e:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   20c80:	4608      	mov	r0, r1
   20c82:	f00a ff8f 	bl	2bba4 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   20c86:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   20c8a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20c8e:	601a      	str	r2, [r3, #0]
   20c90:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   20c92:	008b      	lsls	r3, r1, #2
   20c94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20c98:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   20c9c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   20ca0:	f042 0201 	orr.w	r2, r2, #1
   20ca4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   20ca8:	b125      	cbz	r5, 20cb4 <nrfx_gpiote_trigger_enable+0x74>
    p_reg->INTENSET = mask;
   20caa:	4a1b      	ldr	r2, [pc, #108]	; (20d18 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   20cac:	2301      	movs	r3, #1
   20cae:	408b      	lsls	r3, r1
   20cb0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20cb4:	b003      	add	sp, #12
   20cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   20cb8:	b955      	cbnz	r5, 20cd0 <nrfx_gpiote_trigger_enable+0x90>
   20cba:	4914      	ldr	r1, [pc, #80]	; (20d0c <nrfx_gpiote_trigger_enable+0xcc>)
   20cbc:	4814      	ldr	r0, [pc, #80]	; (20d10 <nrfx_gpiote_trigger_enable+0xd0>)
   20cbe:	f240 32ee 	movw	r2, #1006	; 0x3ee
   20cc2:	f007 fd5f 	bl	28784 <assert_print>
   20cc6:	4811      	ldr	r0, [pc, #68]	; (20d0c <nrfx_gpiote_trigger_enable+0xcc>)
   20cc8:	f240 31ee 	movw	r1, #1006	; 0x3ee
   20ccc:	f007 fd53 	bl	28776 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20cd0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   20cd4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   20cd8:	2b04      	cmp	r3, #4
   20cda:	d012      	beq.n	20d02 <nrfx_gpiote_trigger_enable+0xc2>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   20cdc:	2b05      	cmp	r3, #5
   20cde:	d012      	beq.n	20d06 <nrfx_gpiote_trigger_enable+0xc6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20ce0:	a801      	add	r0, sp, #4
   20ce2:	9401      	str	r4, [sp, #4]
   20ce4:	f7ff fdee 	bl	208c4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20ce8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   20cea:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20cee:	40d9      	lsrs	r1, r3
   20cf0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20cf4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20cf6:	4620      	mov	r0, r4
}
   20cf8:	b003      	add	sp, #12
   20cfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   20cfe:	f00a bfa0 	b.w	2bc42 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   20d02:	2103      	movs	r1, #3
   20d04:	e7f7      	b.n	20cf6 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   20d06:	2102      	movs	r1, #2
   20d08:	e7f5      	b.n	20cf6 <nrfx_gpiote_trigger_enable+0xb6>
   20d0a:	bf00      	nop
   20d0c:	0003030b 	.word	0x0003030b
   20d10:	0002d509 	.word	0x0002d509
   20d14:	20000778 	.word	0x20000778
   20d18:	40006000 	.word	0x40006000

00020d1c <nrfx_gpiote_trigger_disable>:
{
   20d1c:	b508      	push	{r3, lr}
   20d1e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20d20:	f7ff fd38 	bl	20794 <pin_in_use_by_te>
   20d24:	b1c8      	cbz	r0, 20d5a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   20d26:	4610      	mov	r0, r2
   20d28:	f7ff fd4a 	bl	207c0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20d2c:	b9a8      	cbnz	r0, 20d5a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20d2e:	3208      	adds	r2, #8
   20d30:	4b0d      	ldr	r3, [pc, #52]	; (20d68 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   20d32:	490e      	ldr	r1, [pc, #56]	; (20d6c <nrfx_gpiote_trigger_disable+0x50>)
   20d34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20d38:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   20d3a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20d3c:	409a      	lsls	r2, r3
   20d3e:	009b      	lsls	r3, r3, #2
   20d40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20d44:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   20d48:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   20d4c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   20d50:	f022 0203 	bic.w	r2, r2, #3
   20d54:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   20d58:	bd08      	pop	{r3, pc}
   20d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   20d5e:	2100      	movs	r1, #0
   20d60:	4610      	mov	r0, r2
   20d62:	f00a bf6e 	b.w	2bc42 <nrf_gpio_cfg_sense_set>
   20d66:	bf00      	nop
   20d68:	20000778 	.word	0x20000778
   20d6c:	40006000 	.word	0x40006000

00020d70 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   20d70:	4b0e      	ldr	r3, [pc, #56]	; (20dac <nrfx_gpiote_pin_uninit+0x3c>)
   20d72:	f100 0208 	add.w	r2, r0, #8
{
   20d76:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   20d78:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   20d7c:	07db      	lsls	r3, r3, #31
{
   20d7e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   20d80:	d511      	bpl.n	20da6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   20d82:	f7ff ffcb 	bl	20d1c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   20d86:	4620      	mov	r0, r4
   20d88:	f7ff fd80 	bl	2088c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20d8c:	a801      	add	r0, sp, #4
   20d8e:	9401      	str	r4, [sp, #4]
   20d90:	f7ff fd98 	bl	208c4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20d94:	9b01      	ldr	r3, [sp, #4]
   20d96:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20d9a:	2202      	movs	r2, #2
   20d9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   20da0:	4803      	ldr	r0, [pc, #12]	; (20db0 <nrfx_gpiote_pin_uninit+0x40>)
}
   20da2:	b002      	add	sp, #8
   20da4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20da6:	4803      	ldr	r0, [pc, #12]	; (20db4 <nrfx_gpiote_pin_uninit+0x44>)
   20da8:	e7fb      	b.n	20da2 <nrfx_gpiote_pin_uninit+0x32>
   20daa:	bf00      	nop
   20dac:	20000778 	.word	0x20000778
   20db0:	0bad0000 	.word	0x0bad0000
   20db4:	0bad0004 	.word	0x0bad0004

00020db8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   20db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20dbc:	4b65      	ldr	r3, [pc, #404]	; (20f54 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   20dbe:	4866      	ldr	r0, [pc, #408]	; (20f58 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20dc0:	4966      	ldr	r1, [pc, #408]	; (20f5c <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
   20dc2:	2600      	movs	r6, #0
{
   20dc4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   20dc6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20dc8:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20dca:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   20dcc:	b135      	cbz	r5, 20ddc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   20dce:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   20dd2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20dd4:	bf1e      	ittt	ne
   20dd6:	601c      	strne	r4, [r3, #0]
   20dd8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   20dda:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20ddc:	3304      	adds	r3, #4
   20dde:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   20de0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20de4:	d1f1      	bne.n	20dca <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20de6:	f8df 8170 	ldr.w	r8, [pc, #368]	; 20f58 <nrfx_gpiote_irq_handler+0x1a0>
   20dea:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   20dee:	2b00      	cmp	r3, #0
   20df0:	f000 8093 	beq.w	20f1a <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   20df4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20df8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   20dfc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   20dfe:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   20e02:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   20e06:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   20e08:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   20e0c:	2700      	movs	r7, #0
            while (latch[i])
   20e0e:	f10d 0910 	add.w	r9, sp, #16
   20e12:	017b      	lsls	r3, r7, #5
   20e14:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   20e16:	f04f 0a01 	mov.w	sl, #1
   20e1a:	e04b      	b.n	20eb4 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   20e1c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20e1e:	4a50      	ldr	r2, [pc, #320]	; (20f60 <nrfx_gpiote_irq_handler+0x1a8>)
                uint32_t pin = NRF_CTZ(latch[i]);
   20e20:	fa94 f4a4 	rbit	r4, r4
   20e24:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   20e28:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20e2a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   20e2e:	08e0      	lsrs	r0, r4, #3
   20e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   20e34:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   20e36:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   20e3a:	fa0a fc02 	lsl.w	ip, sl, r2
   20e3e:	f819 2000 	ldrb.w	r2, [r9, r0]
   20e42:	ea22 020c 	bic.w	r2, r2, ip
   20e46:	0899      	lsrs	r1, r3, #2
   20e48:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20e4c:	a803      	add	r0, sp, #12
   20e4e:	f3c3 0582 	ubfx	r5, r3, #2, #3
   20e52:	9101      	str	r1, [sp, #4]
   20e54:	f7ff fd36 	bl	208c4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20e58:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
   20e5a:	9901      	ldr	r1, [sp, #4]
   20e5c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   20e60:	074b      	lsls	r3, r1, #29
   20e62:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20e66:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   20e68:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   20e6c:	d529      	bpl.n	20ec2 <nrfx_gpiote_irq_handler+0x10a>
        call_handler(pin, trigger);
   20e6e:	4659      	mov	r1, fp
   20e70:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20e72:	b2d5      	uxtb	r5, r2
   20e74:	f7ff fcae 	bl	207d4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20e78:	a803      	add	r0, sp, #12
   20e7a:	9403      	str	r4, [sp, #12]
   20e7c:	f7ff fd22 	bl	208c4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   20e80:	9b03      	ldr	r3, [sp, #12]
   20e82:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20e86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   20e8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   20e8e:	429d      	cmp	r5, r3
   20e90:	d107      	bne.n	20ea2 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   20e92:	2100      	movs	r1, #0
   20e94:	4620      	mov	r0, r4
   20e96:	f00a fed4 	bl	2bc42 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   20e9a:	4629      	mov	r1, r5
   20e9c:	4620      	mov	r0, r4
   20e9e:	f00a fed0 	bl	2bc42 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20ea2:	a803      	add	r0, sp, #12
   20ea4:	9403      	str	r4, [sp, #12]
   20ea6:	f7ff fd0d 	bl	208c4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   20eaa:	9b03      	ldr	r3, [sp, #12]
   20eac:	fa0a f303 	lsl.w	r3, sl, r3
   20eb0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   20eb4:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   20eb8:	2c00      	cmp	r4, #0
   20eba:	d1af      	bne.n	20e1c <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   20ebc:	b9cf      	cbnz	r7, 20ef2 <nrfx_gpiote_irq_handler+0x13a>
   20ebe:	2701      	movs	r7, #1
   20ec0:	e7a7      	b.n	20e12 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20ec2:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   20ec4:	bf0c      	ite	eq
   20ec6:	2103      	moveq	r1, #3
   20ec8:	2102      	movne	r1, #2
   20eca:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20ecc:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   20ece:	f00a feb8 	bl	2bc42 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   20ed2:	2d03      	cmp	r5, #3
   20ed4:	d004      	beq.n	20ee0 <nrfx_gpiote_irq_handler+0x128>
   20ed6:	9a01      	ldr	r2, [sp, #4]
   20ed8:	2a02      	cmp	r2, #2
   20eda:	d106      	bne.n	20eea <nrfx_gpiote_irq_handler+0x132>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20edc:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   20ede:	d1e0      	bne.n	20ea2 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   20ee0:	4659      	mov	r1, fp
   20ee2:	4620      	mov	r0, r4
   20ee4:	f7ff fc76 	bl	207d4 <call_handler>
   20ee8:	e7db      	b.n	20ea2 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   20eea:	2a03      	cmp	r2, #3
   20eec:	d1d9      	bne.n	20ea2 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   20eee:	2d02      	cmp	r5, #2
   20ef0:	e7f5      	b.n	20ede <nrfx_gpiote_irq_handler+0x126>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20ef2:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   20ef6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   20efa:	491a      	ldr	r1, [pc, #104]	; (20f64 <nrfx_gpiote_irq_handler+0x1ac>)
   20efc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   20f00:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   20f04:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   20f06:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   20f0a:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   20f0e:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   20f10:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   20f14:	4313      	orrs	r3, r2
   20f16:	f47f af79 	bne.w	20e0c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   20f1a:	2401      	movs	r4, #1
    while (mask)
   20f1c:	b916      	cbnz	r6, 20f24 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   20f1e:	b007      	add	sp, #28
   20f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   20f24:	fa96 f3a6 	rbit	r3, r6
   20f28:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   20f2c:	fa04 f203 	lsl.w	r2, r4, r3
   20f30:	009b      	lsls	r3, r3, #2
   20f32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20f36:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   20f3a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   20f3e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   20f42:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   20f46:	f3c0 2005 	ubfx	r0, r0, #8, #6
   20f4a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   20f4e:	f7ff fc41 	bl	207d4 <call_handler>
   20f52:	e7e3      	b.n	20f1c <nrfx_gpiote_irq_handler+0x164>
   20f54:	40006100 	.word	0x40006100
   20f58:	40006000 	.word	0x40006000
   20f5c:	40006120 	.word	0x40006120
   20f60:	20000778 	.word	0x20000778
   20f64:	50000300 	.word	0x50000300

00020f68 <nvmc_word_write>:
   20f68:	4a04      	ldr	r2, [pc, #16]	; (20f7c <nvmc_word_write+0x14>)
   20f6a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20f6e:	07db      	lsls	r3, r3, #31
   20f70:	d5fb      	bpl.n	20f6a <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   20f72:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   20f74:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   20f78:	4770      	bx	lr
   20f7a:	bf00      	nop
   20f7c:	4001e000 	.word	0x4001e000

00020f80 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   20f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   20f84:	b510      	push	{r4, lr}
   20f86:	6913      	ldr	r3, [r2, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   20f88:	6952      	ldr	r2, [r2, #20]
    return flash_page_size_get() * flash_page_count_get();
   20f8a:	4353      	muls	r3, r2
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   20f8c:	4298      	cmp	r0, r3
{
   20f8e:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   20f90:	d30a      	bcc.n	20fa8 <nrfx_nvmc_page_erase+0x28>
    NRFX_ASSERT(is_valid_address(addr, false));
   20f92:	4912      	ldr	r1, [pc, #72]	; (20fdc <nrfx_nvmc_page_erase+0x5c>)
   20f94:	4812      	ldr	r0, [pc, #72]	; (20fe0 <nrfx_nvmc_page_erase+0x60>)
   20f96:	f44f 7283 	mov.w	r2, #262	; 0x106
   20f9a:	f007 fbf3 	bl	28784 <assert_print>
   20f9e:	480f      	ldr	r0, [pc, #60]	; (20fdc <nrfx_nvmc_page_erase+0x5c>)
   20fa0:	f44f 7183 	mov.w	r1, #262	; 0x106
   20fa4:	f007 fbe7 	bl	28776 <assert_post_action>
    return p_reg->CODEPAGESIZE;
   20fa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20fac:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   20fae:	fbb4 f3f2 	udiv	r3, r4, r2
   20fb2:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   20fb6:	b973      	cbnz	r3, 20fd6 <nrfx_nvmc_page_erase+0x56>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   20fb8:	4b0a      	ldr	r3, [pc, #40]	; (20fe4 <nrfx_nvmc_page_erase+0x64>)
   20fba:	2202      	movs	r2, #2
   20fbc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   20fc0:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20fc4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   20fc8:	07d2      	lsls	r2, r2, #31
   20fca:	d5fb      	bpl.n	20fc4 <nrfx_nvmc_page_erase+0x44>
    p_reg->CONFIG = (uint32_t)mode;
   20fcc:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   20fce:	4806      	ldr	r0, [pc, #24]	; (20fe8 <nrfx_nvmc_page_erase+0x68>)
   20fd0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   20fd4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   20fd6:	4805      	ldr	r0, [pc, #20]	; (20fec <nrfx_nvmc_page_erase+0x6c>)
   20fd8:	e7fc      	b.n	20fd4 <nrfx_nvmc_page_erase+0x54>
   20fda:	bf00      	nop
   20fdc:	00030349 	.word	0x00030349
   20fe0:	0002d509 	.word	0x0002d509
   20fe4:	4001e000 	.word	0x4001e000
   20fe8:	0bad0000 	.word	0x0bad0000
   20fec:	0bad000a 	.word	0x0bad000a

00020ff0 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   20ff0:	b570      	push	{r4, r5, r6, lr}
   20ff2:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   20ff4:	2101      	movs	r1, #1
{
   20ff6:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   20ff8:	f00a fe32 	bl	2bc60 <is_valid_address>
   20ffc:	b950      	cbnz	r0, 21014 <nrfx_nvmc_word_write+0x24>
   20ffe:	4912      	ldr	r1, [pc, #72]	; (21048 <nrfx_nvmc_word_write+0x58>)
   21000:	4812      	ldr	r0, [pc, #72]	; (2104c <nrfx_nvmc_word_write+0x5c>)
   21002:	f44f 72ca 	mov.w	r2, #404	; 0x194
   21006:	f007 fbbd 	bl	28784 <assert_print>
   2100a:	480f      	ldr	r0, [pc, #60]	; (21048 <nrfx_nvmc_word_write+0x58>)
   2100c:	f44f 71ca 	mov.w	r1, #404	; 0x194
   21010:	f007 fbb1 	bl	28776 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   21014:	07a3      	lsls	r3, r4, #30
   21016:	d00a      	beq.n	2102e <nrfx_nvmc_word_write+0x3e>
   21018:	490b      	ldr	r1, [pc, #44]	; (21048 <nrfx_nvmc_word_write+0x58>)
   2101a:	480c      	ldr	r0, [pc, #48]	; (2104c <nrfx_nvmc_word_write+0x5c>)
   2101c:	f240 1295 	movw	r2, #405	; 0x195
   21020:	f007 fbb0 	bl	28784 <assert_print>
   21024:	4808      	ldr	r0, [pc, #32]	; (21048 <nrfx_nvmc_word_write+0x58>)
   21026:	f240 1195 	movw	r1, #405	; 0x195
   2102a:	f007 fba4 	bl	28776 <assert_post_action>
   2102e:	4e08      	ldr	r6, [pc, #32]	; (21050 <nrfx_nvmc_word_write+0x60>)
   21030:	2301      	movs	r3, #1
   21032:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   21036:	4629      	mov	r1, r5
   21038:	4620      	mov	r0, r4
   2103a:	f7ff ff95 	bl	20f68 <nvmc_word_write>
   2103e:	2300      	movs	r3, #0
   21040:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   21044:	bd70      	pop	{r4, r5, r6, pc}
   21046:	bf00      	nop
   21048:	00030349 	.word	0x00030349
   2104c:	0002d509 	.word	0x0002d509
   21050:	4001e000 	.word	0x4001e000

00021054 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   21054:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   21056:	4801      	ldr	r0, [pc, #4]	; (2105c <nrfx_ppi_channel_alloc+0x8>)
   21058:	f7ff bb54 	b.w	20704 <nrfx_flag32_alloc>
   2105c:	200007f4 	.word	0x200007f4

00021060 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21060:	6802      	ldr	r2, [r0, #0]
    switch (port)
   21062:	0953      	lsrs	r3, r2, #5
{
   21064:	b510      	push	{r4, lr}
   21066:	4604      	mov	r4, r0
    switch (port)
   21068:	d02a      	beq.n	210c0 <nrf_gpio_pin_port_decode+0x60>
    uint32_t mask = 0;
   2106a:	2b01      	cmp	r3, #1
   2106c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21070:	bf18      	it	ne
   21072:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   21074:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21078:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2107a:	07db      	lsls	r3, r3, #31
   2107c:	d40a      	bmi.n	21094 <nrf_gpio_pin_port_decode+0x34>
   2107e:	4913      	ldr	r1, [pc, #76]	; (210cc <nrf_gpio_pin_port_decode+0x6c>)
   21080:	4813      	ldr	r0, [pc, #76]	; (210d0 <nrf_gpio_pin_port_decode+0x70>)
   21082:	f240 2247 	movw	r2, #583	; 0x247
   21086:	f007 fb7d 	bl	28784 <assert_print>
   2108a:	4810      	ldr	r0, [pc, #64]	; (210cc <nrf_gpio_pin_port_decode+0x6c>)
   2108c:	f240 2147 	movw	r1, #583	; 0x247
   21090:	f007 fb71 	bl	28776 <assert_post_action>
    uint32_t pin_number = *p_pin;
   21094:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   21096:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2109a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2109c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2109e:	d00c      	beq.n	210ba <nrf_gpio_pin_port_decode+0x5a>
   210a0:	2b01      	cmp	r3, #1
   210a2:	d010      	beq.n	210c6 <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
   210a4:	4909      	ldr	r1, [pc, #36]	; (210cc <nrf_gpio_pin_port_decode+0x6c>)
   210a6:	480a      	ldr	r0, [pc, #40]	; (210d0 <nrf_gpio_pin_port_decode+0x70>)
   210a8:	f44f 7213 	mov.w	r2, #588	; 0x24c
   210ac:	f007 fb6a 	bl	28784 <assert_print>
   210b0:	4806      	ldr	r0, [pc, #24]	; (210cc <nrf_gpio_pin_port_decode+0x6c>)
   210b2:	f44f 7113 	mov.w	r1, #588	; 0x24c
   210b6:	f007 fb5e 	bl	28776 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   210ba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   210be:	bd10      	pop	{r4, pc}
    switch (port)
   210c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   210c4:	e7d6      	b.n	21074 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   210c6:	4803      	ldr	r0, [pc, #12]	; (210d4 <nrf_gpio_pin_port_decode+0x74>)
   210c8:	e7f9      	b.n	210be <nrf_gpio_pin_port_decode+0x5e>
   210ca:	bf00      	nop
   210cc:	0002fbc2 	.word	0x0002fbc2
   210d0:	0002d509 	.word	0x0002d509
   210d4:	50000300 	.word	0x50000300

000210d8 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   210d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   210dc:	4c38      	ldr	r4, [pc, #224]	; (211c0 <qspi_xfer+0xe8>)
{
   210de:	4698      	mov	r8, r3
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   210e0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
{
   210e4:	4605      	mov	r5, r0
   210e6:	460e      	mov	r6, r1
   210e8:	4617      	mov	r7, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   210ea:	b943      	cbnz	r3, 210fe <qspi_xfer+0x26>
   210ec:	4935      	ldr	r1, [pc, #212]	; (211c4 <qspi_xfer+0xec>)
   210ee:	4836      	ldr	r0, [pc, #216]	; (211c8 <qspi_xfer+0xf0>)
   210f0:	2268      	movs	r2, #104	; 0x68
   210f2:	f007 fb47 	bl	28784 <assert_print>
   210f6:	4833      	ldr	r0, [pc, #204]	; (211c4 <qspi_xfer+0xec>)
   210f8:	2168      	movs	r1, #104	; 0x68
   210fa:	f007 fb3c 	bl	28776 <assert_post_action>
    NRFX_ASSERT(p_buffer != NULL);
   210fe:	b945      	cbnz	r5, 21112 <qspi_xfer+0x3a>
   21100:	4930      	ldr	r1, [pc, #192]	; (211c4 <qspi_xfer+0xec>)
   21102:	4831      	ldr	r0, [pc, #196]	; (211c8 <qspi_xfer+0xf0>)
   21104:	2269      	movs	r2, #105	; 0x69
   21106:	f007 fb3d 	bl	28784 <assert_print>
   2110a:	482e      	ldr	r0, [pc, #184]	; (211c4 <qspi_xfer+0xec>)
   2110c:	2169      	movs	r1, #105	; 0x69
   2110e:	f007 fb32 	bl	28776 <assert_post_action>
   21112:	f005 4360 	and.w	r3, r5, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   21116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2111a:	d14c      	bne.n	211b6 <qspi_xfer+0xde>
   2111c:	07ab      	lsls	r3, r5, #30
   2111e:	d14a      	bne.n	211b6 <qspi_xfer+0xde>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   21120:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   21124:	2b01      	cmp	r3, #1
   21126:	d001      	beq.n	2112c <qspi_xfer+0x54>
   21128:	4543      	cmp	r3, r8
   2112a:	d146      	bne.n	211ba <qspi_xfer+0xe2>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   2112c:	6822      	ldr	r2, [r4, #0]
   2112e:	2a00      	cmp	r2, #0
   21130:	d030      	beq.n	21194 <qspi_xfer+0xbc>
    {
        if (m_cb.p_buffer_primary)
   21132:	68a3      	ldr	r3, [r4, #8]
   21134:	b33b      	cbz	r3, 21186 <qspi_xfer+0xae>
        {
            m_cb.p_buffer_secondary = p_buffer;
   21136:	60e5      	str	r5, [r4, #12]
            m_cb.size_secondary     = length;
   21138:	6166      	str	r6, [r4, #20]
            m_cb.addr_secondary     = address;
   2113a:	61e7      	str	r7, [r4, #28]
    bool is_first_buffer = false;
   2113c:	2100      	movs	r1, #0
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   2113e:	4823      	ldr	r0, [pc, #140]	; (211cc <qspi_xfer+0xf4>)
   21140:	f1b8 0f02 	cmp.w	r8, #2
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   21144:	bf0b      	itete	eq
   21146:	f8c0 7510 	streq.w	r7, [r0, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   2114a:	f8c0 7504 	strne.w	r7, [r0, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   2114e:	f8c0 5514 	streq.w	r5, [r0, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   21152:	f8c0 5508 	strne.w	r5, [r0, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   21156:	bf07      	ittee	eq
   21158:	f8c0 6518 	streq.w	r6, [r0, #1304]	; 0x518
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   2115c:	2308      	moveq	r3, #8
    p_reg->READ.CNT = length;
   2115e:	f8c0 650c 	strne.w	r6, [r0, #1292]	; 0x50c
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   21162:	2304      	movne	r3, #4
    }

    if (!m_cb.handler)
   21164:	b9c2      	cbnz	r2, 21198 <qspi_xfer+0xc0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21166:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2116a:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2116e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21172:	2201      	movs	r2, #1
   21174:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21176:	4a15      	ldr	r2, [pc, #84]	; (211cc <qspi_xfer+0xf4>)
   21178:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   2117c:	2b00      	cmp	r3, #0
   2117e:	d0fb      	beq.n	21178 <qspi_xfer+0xa0>
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   21180:	4813      	ldr	r0, [pc, #76]	; (211d0 <qspi_xfer+0xf8>)
}
   21182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            m_cb.p_buffer_primary = p_buffer;
   21186:	60a5      	str	r5, [r4, #8]
            m_cb.size_primary     = length;
   21188:	6126      	str	r6, [r4, #16]
            m_cb.addr_primary     = address;
   2118a:	61a7      	str	r7, [r4, #24]
            m_cb.state = desired_state;
   2118c:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
            is_first_buffer = true;
   21190:	2101      	movs	r1, #1
   21192:	e7d4      	b.n	2113e <qspi_xfer+0x66>
    bool is_first_buffer = false;
   21194:	4611      	mov	r1, r2
   21196:	e7d2      	b.n	2113e <qspi_xfer+0x66>
    else if (is_first_buffer)
   21198:	2900      	cmp	r1, #0
   2119a:	d0f1      	beq.n	21180 <qspi_xfer+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2119c:	490b      	ldr	r1, [pc, #44]	; (211cc <qspi_xfer+0xf4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2119e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   211a2:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   211a4:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   211a8:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   211ac:	2201      	movs	r2, #1
   211ae:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   211b2:	601a      	str	r2, [r3, #0]
   211b4:	e7e4      	b.n	21180 <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   211b6:	4807      	ldr	r0, [pc, #28]	; (211d4 <qspi_xfer+0xfc>)
   211b8:	e7e3      	b.n	21182 <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   211ba:	4807      	ldr	r0, [pc, #28]	; (211d8 <qspi_xfer+0x100>)
   211bc:	e7e1      	b.n	21182 <qspi_xfer+0xaa>
   211be:	bf00      	nop
   211c0:	20002ac4 	.word	0x20002ac4
   211c4:	00030385 	.word	0x00030385
   211c8:	0002d509 	.word	0x0002d509
   211cc:	40029000 	.word	0x40029000
   211d0:	0bad0000 	.word	0x0bad0000
   211d4:	0bad000a 	.word	0x0bad000a
   211d8:	0bad000b 	.word	0x0bad000b

000211dc <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   211dc:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   211de:	4d07      	ldr	r5, [pc, #28]	; (211fc <qspi_ready_wait+0x20>)
   211e0:	2464      	movs	r4, #100	; 0x64
   211e2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   211e6:	b933      	cbnz	r3, 211f6 <qspi_ready_wait+0x1a>
   211e8:	200a      	movs	r0, #10
   211ea:	f00a fcbd 	bl	2bb68 <nrfx_busy_wait>
   211ee:	3c01      	subs	r4, #1
   211f0:	d1f7      	bne.n	211e2 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   211f2:	4803      	ldr	r0, [pc, #12]	; (21200 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   211f4:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   211f6:	4803      	ldr	r0, [pc, #12]	; (21204 <qspi_ready_wait+0x28>)
   211f8:	e7fc      	b.n	211f4 <qspi_ready_wait+0x18>
   211fa:	bf00      	nop
   211fc:	40029000 	.word	0x40029000
   21200:	0bad0007 	.word	0x0bad0007
   21204:	0bad0000 	.word	0x0bad0000

00021208 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   21208:	4b08      	ldr	r3, [pc, #32]	; (2122c <qspi_event_xfer_handle.constprop.0+0x24>)
   2120a:	689a      	ldr	r2, [r3, #8]
   2120c:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   2120e:	691a      	ldr	r2, [r3, #16]
   21210:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   21212:	699a      	ldr	r2, [r3, #24]
   21214:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   21216:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   21218:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   2121a:	b132      	cbz	r2, 2122a <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   2121c:	695a      	ldr	r2, [r3, #20]
   2121e:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   21220:	69da      	ldr	r2, [r3, #28]
   21222:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   21224:	2200      	movs	r2, #0
   21226:	60da      	str	r2, [r3, #12]
   21228:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   2122a:	4770      	bx	lr
   2122c:	20002ac4 	.word	0x20002ac4

00021230 <nrf_qspi_cinstrdata_get.constprop.0>:
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   21230:	4b0e      	ldr	r3, [pc, #56]	; (2126c <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   21232:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   21234:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   21238:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   2123c:	2807      	cmp	r0, #7
   2123e:	d813      	bhi.n	21268 <nrf_qspi_cinstrdata_get.constprop.0+0x38>
   21240:	e8df f000 	tbb	[pc, r0]
   21244:	0b0d0f11 	.word	0x0b0d0f11
   21248:	0406080a 	.word	0x0406080a
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   2124c:	0e10      	lsrs	r0, r2, #24
   2124e:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   21250:	0c10      	lsrs	r0, r2, #16
   21252:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   21254:	0a10      	lsrs	r0, r2, #8
   21256:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   21258:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   2125a:	0e1a      	lsrs	r2, r3, #24
   2125c:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   2125e:	0c1a      	lsrs	r2, r3, #16
   21260:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   21262:	0a1a      	lsrs	r2, r3, #8
   21264:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   21266:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   21268:	4770      	bx	lr
   2126a:	bf00      	nop
   2126c:	40029000 	.word	0x40029000

00021270 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   21270:	3802      	subs	r0, #2
   21272:	2807      	cmp	r0, #7
   21274:	d81f      	bhi.n	212b6 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   21276:	e8df f000 	tbb	[pc, r0]
   2127a:	2729      	.short	0x2729
   2127c:	21231125 	.word	0x21231125
   21280:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   21282:	79cb      	ldrb	r3, [r1, #7]
   21284:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   21286:	798a      	ldrb	r2, [r1, #6]
   21288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   2128c:	794a      	ldrb	r2, [r1, #5]
   2128e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   21292:	790a      	ldrb	r2, [r1, #4]
   21294:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   21296:	4a0e      	ldr	r2, [pc, #56]	; (212d0 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   21298:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   2129c:	78cb      	ldrb	r3, [r1, #3]
   2129e:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   212a0:	788a      	ldrb	r2, [r1, #2]
   212a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   212a6:	784a      	ldrb	r2, [r1, #1]
   212a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   212ac:	780a      	ldrb	r2, [r1, #0]
   212ae:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   212b0:	4a07      	ldr	r2, [pc, #28]	; (212d0 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   212b2:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   212b6:	4770      	bx	lr
    switch (length)
   212b8:	2300      	movs	r3, #0
   212ba:	e7e4      	b.n	21286 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   212bc:	2300      	movs	r3, #0
   212be:	e7e5      	b.n	2128c <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   212c0:	2300      	movs	r3, #0
   212c2:	e7e6      	b.n	21292 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   212c4:	2300      	movs	r3, #0
   212c6:	e7eb      	b.n	212a0 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   212c8:	2300      	movs	r3, #0
   212ca:	e7ec      	b.n	212a6 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   212cc:	2300      	movs	r3, #0
   212ce:	e7ed      	b.n	212ac <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   212d0:	40029000 	.word	0x40029000

000212d4 <nrfx_qspi_init>:
{
   212d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   212d8:	460d      	mov	r5, r1
   212da:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   212dc:	4604      	mov	r4, r0
   212de:	b950      	cbnz	r0, 212f6 <nrfx_qspi_init+0x22>
   212e0:	4974      	ldr	r1, [pc, #464]	; (214b4 <nrfx_qspi_init+0x1e0>)
   212e2:	4875      	ldr	r0, [pc, #468]	; (214b8 <nrfx_qspi_init+0x1e4>)
   212e4:	f44f 7288 	mov.w	r2, #272	; 0x110
   212e8:	f007 fa4c 	bl	28784 <assert_print>
   212ec:	4871      	ldr	r0, [pc, #452]	; (214b4 <nrfx_qspi_init+0x1e0>)
   212ee:	f44f 7188 	mov.w	r1, #272	; 0x110
   212f2:	f007 fa40 	bl	28776 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   212f6:	4f71      	ldr	r7, [pc, #452]	; (214bc <nrfx_qspi_init+0x1e8>)
   212f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   212fc:	2b00      	cmp	r3, #0
   212fe:	f040 80d2 	bne.w	214a6 <nrfx_qspi_init+0x1d2>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   21302:	7ce2      	ldrb	r2, [r4, #19]
   21304:	b11a      	cbz	r2, 2130e <nrfx_qspi_init+0x3a>
   21306:	7d23      	ldrb	r3, [r4, #20]
   21308:	2b00      	cmp	r3, #0
   2130a:	f040 8084 	bne.w	21416 <nrfx_qspi_init+0x142>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2130e:	7923      	ldrb	r3, [r4, #4]
   21310:	2bff      	cmp	r3, #255	; 0xff
   21312:	f000 80cc 	beq.w	214ae <nrfx_qspi_init+0x1da>
   21316:	7961      	ldrb	r1, [r4, #5]
   21318:	29ff      	cmp	r1, #255	; 0xff
   2131a:	f000 80c8 	beq.w	214ae <nrfx_qspi_init+0x1da>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2131e:	79a1      	ldrb	r1, [r4, #6]
   21320:	29ff      	cmp	r1, #255	; 0xff
   21322:	f000 80c4 	beq.w	214ae <nrfx_qspi_init+0x1da>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   21326:	79e1      	ldrb	r1, [r4, #7]
   21328:	29ff      	cmp	r1, #255	; 0xff
   2132a:	f000 80c0 	beq.w	214ae <nrfx_qspi_init+0x1da>
    if (!p_config->skip_gpio_cfg)
   2132e:	2a00      	cmp	r2, #0
   21330:	d142      	bne.n	213b8 <nrfx_qspi_init+0xe4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21332:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   21334:	9301      	str	r3, [sp, #4]
   21336:	f7ff fe93 	bl	21060 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2133a:	9b01      	ldr	r3, [sp, #4]
   2133c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21340:	f240 3802 	movw	r8, #770	; 0x302
   21344:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21348:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   2134a:	7963      	ldrb	r3, [r4, #5]
   2134c:	9301      	str	r3, [sp, #4]
   2134e:	f7ff fe87 	bl	21060 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21352:	9b01      	ldr	r3, [sp, #4]
   21354:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21358:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2135c:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   2135e:	79a3      	ldrb	r3, [r4, #6]
   21360:	9301      	str	r3, [sp, #4]
   21362:	f7ff fe7d 	bl	21060 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21366:	9b01      	ldr	r3, [sp, #4]
   21368:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2136c:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21370:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   21372:	79e3      	ldrb	r3, [r4, #7]
   21374:	9301      	str	r3, [sp, #4]
   21376:	f7ff fe73 	bl	21060 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2137a:	9b01      	ldr	r3, [sp, #4]
   2137c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21380:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   21384:	7a23      	ldrb	r3, [r4, #8]
   21386:	2bff      	cmp	r3, #255	; 0xff
   21388:	d008      	beq.n	2139c <nrfx_qspi_init+0xc8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2138a:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   2138c:	9301      	str	r3, [sp, #4]
   2138e:	f7ff fe67 	bl	21060 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21392:	9b01      	ldr	r3, [sp, #4]
   21394:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21398:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2139c:	7a63      	ldrb	r3, [r4, #9]
   2139e:	2bff      	cmp	r3, #255	; 0xff
   213a0:	d00a      	beq.n	213b8 <nrfx_qspi_init+0xe4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   213a2:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   213a4:	9301      	str	r3, [sp, #4]
   213a6:	f7ff fe5b 	bl	21060 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   213aa:	9b01      	ldr	r3, [sp, #4]
   213ac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   213b0:	f240 3202 	movw	r2, #770	; 0x302
   213b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   213b8:	7d23      	ldrb	r3, [r4, #20]
   213ba:	bb63      	cbnz	r3, 21416 <nrfx_qspi_init+0x142>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   213bc:	7923      	ldrb	r3, [r4, #4]
   213be:	2bff      	cmp	r3, #255	; 0xff
   213c0:	bf18      	it	ne
   213c2:	461a      	movne	r2, r3
   213c4:	4b3e      	ldr	r3, [pc, #248]	; (214c0 <nrfx_qspi_init+0x1ec>)
   213c6:	bf08      	it	eq
   213c8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   213cc:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   213d0:	7962      	ldrb	r2, [r4, #5]
   213d2:	2aff      	cmp	r2, #255	; 0xff
   213d4:	bf08      	it	eq
   213d6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   213da:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   213de:	79a2      	ldrb	r2, [r4, #6]
   213e0:	2aff      	cmp	r2, #255	; 0xff
   213e2:	bf08      	it	eq
   213e4:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   213e8:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   213ec:	79e2      	ldrb	r2, [r4, #7]
   213ee:	2aff      	cmp	r2, #255	; 0xff
   213f0:	bf08      	it	eq
   213f2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   213f6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   213fa:	7a22      	ldrb	r2, [r4, #8]
   213fc:	2aff      	cmp	r2, #255	; 0xff
   213fe:	bf08      	it	eq
   21400:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   21404:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   21408:	7a62      	ldrb	r2, [r4, #9]
   2140a:	2aff      	cmp	r2, #255	; 0xff
   2140c:	bf08      	it	eq
   2140e:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   21412:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->XIPOFFSET = xip_offset;
   21416:	492a      	ldr	r1, [pc, #168]	; (214c0 <nrfx_qspi_init+0x1ec>)
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   21418:	6823      	ldr	r3, [r4, #0]
   2141a:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   2141e:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   21420:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   21422:	7aa2      	ldrb	r2, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   21424:	019b      	lsls	r3, r3, #6
   21426:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   2142a:	4313      	orrs	r3, r2
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   2142c:	7b62      	ldrb	r2, [r4, #13]
   2142e:	2a00      	cmp	r2, #0
   21430:	bf14      	ite	ne
   21432:	2280      	movne	r2, #128	; 0x80
   21434:	2200      	moveq	r2, #0
   21436:	4313      	orrs	r3, r2
    p_reg->IFCONFIG0 = config;
   21438:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   2143c:	f8d1 3600 	ldr.w	r3, [r1, #1536]	; 0x600
    config |= p_config->sck_delay;
   21440:	7ba2      	ldrb	r2, [r4, #14]
   21442:	f894 c010 	ldrb.w	ip, [r4, #16]
   21446:	7c60      	ldrb	r0, [r4, #17]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   21448:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2144c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   21450:	4313      	orrs	r3, r2
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   21452:	7be2      	ldrb	r2, [r4, #15]
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   21454:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   21458:	2a00      	cmp	r2, #0
   2145a:	bf14      	ite	ne
   2145c:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
   21460:	2200      	moveq	r2, #0
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   21462:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
   21466:	4313      	orrs	r3, r2
    p_reg->IFCONFIG1 = config;
   21468:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   2146c:	7ce3      	ldrb	r3, [r4, #19]
   2146e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   21472:	2301      	movs	r3, #1
    m_cb.p_context = p_context;
   21474:	e9c7 5600 	strd	r5, r6, [r7]
   21478:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    if (handler)
   2147c:	b115      	cbz	r5, 21484 <nrfx_qspi_init+0x1b0>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   2147e:	2029      	movs	r0, #41	; 0x29
   21480:	f7f3 f8fa 	bl	14678 <arch_irq_enable>
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   21484:	4b0e      	ldr	r3, [pc, #56]	; (214c0 <nrfx_qspi_init+0x1ec>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   21486:	2201      	movs	r2, #1
    m_cb.p_buffer_primary = NULL;
   21488:	2100      	movs	r1, #0
    m_cb.p_buffer_secondary = NULL;
   2148a:	e9c7 1102 	strd	r1, r1, [r7, #8]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   2148e:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   21492:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21496:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2149a:	601a      	str	r2, [r3, #0]
}
   2149c:	b002      	add	sp, #8
   2149e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return qspi_ready_wait();
   214a2:	f7ff be9b 	b.w	211dc <qspi_ready_wait>
        return NRFX_ERROR_INVALID_STATE;
   214a6:	4807      	ldr	r0, [pc, #28]	; (214c4 <nrfx_qspi_init+0x1f0>)
}
   214a8:	b002      	add	sp, #8
   214aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INVALID_PARAM;
   214ae:	4806      	ldr	r0, [pc, #24]	; (214c8 <nrfx_qspi_init+0x1f4>)
   214b0:	e7fa      	b.n	214a8 <nrfx_qspi_init+0x1d4>
   214b2:	bf00      	nop
   214b4:	00030385 	.word	0x00030385
   214b8:	0002d509 	.word	0x0002d509
   214bc:	20002ac4 	.word	0x20002ac4
   214c0:	40029000 	.word	0x40029000
   214c4:	0bad0005 	.word	0x0bad0005
   214c8:	0bad0004 	.word	0x0bad0004

000214cc <nrfx_qspi_cinstr_xfer>:
{
   214cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   214ce:	4e2a      	ldr	r6, [pc, #168]	; (21578 <nrfx_qspi_cinstr_xfer+0xac>)
   214d0:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
{
   214d4:	4605      	mov	r5, r0
   214d6:	460f      	mov	r7, r1
   214d8:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   214da:	b953      	cbnz	r3, 214f2 <nrfx_qspi_cinstr_xfer+0x26>
   214dc:	4927      	ldr	r1, [pc, #156]	; (2157c <nrfx_qspi_cinstr_xfer+0xb0>)
   214de:	4828      	ldr	r0, [pc, #160]	; (21580 <nrfx_qspi_cinstr_xfer+0xb4>)
   214e0:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   214e4:	f007 f94e 	bl	28784 <assert_print>
   214e8:	4824      	ldr	r0, [pc, #144]	; (2157c <nrfx_qspi_cinstr_xfer+0xb0>)
   214ea:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   214ee:	f007 f942 	bl	28776 <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   214f2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   214f6:	2b01      	cmp	r3, #1
   214f8:	d13c      	bne.n	21574 <nrfx_qspi_cinstr_xfer+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   214fa:	4e22      	ldr	r6, [pc, #136]	; (21584 <nrfx_qspi_cinstr_xfer+0xb8>)
   214fc:	2300      	movs	r3, #0
   214fe:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_tx_buffer)
   21502:	b11f      	cbz	r7, 2150c <nrfx_qspi_cinstr_xfer+0x40>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   21504:	7868      	ldrb	r0, [r5, #1]
   21506:	4639      	mov	r1, r7
   21508:	f7ff feb2 	bl	21270 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   2150c:	2301      	movs	r3, #1
   2150e:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
NRF_STATIC_INLINE void nrf_qspi_cinstr_transfer_start(NRF_QSPI_Type *                p_reg,
                                                      nrf_qspi_cinstr_conf_t const * p_config)
{
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   21512:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   21514:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   21516:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   21518:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   2151c:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   2151e:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   21520:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   21522:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   21526:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   21528:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   2152c:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   2152e:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   21532:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   21536:	f7ff fe51 	bl	211dc <qspi_ready_wait>
   2153a:	4b13      	ldr	r3, [pc, #76]	; (21588 <nrfx_qspi_cinstr_xfer+0xbc>)
   2153c:	4298      	cmp	r0, r3
   2153e:	4607      	mov	r7, r0
   21540:	d10e      	bne.n	21560 <nrfx_qspi_cinstr_xfer+0x94>
        NRFX_ASSERT(p_config->wipwait);
   21542:	792b      	ldrb	r3, [r5, #4]
   21544:	b953      	cbnz	r3, 2155c <nrfx_qspi_cinstr_xfer+0x90>
   21546:	490d      	ldr	r1, [pc, #52]	; (2157c <nrfx_qspi_cinstr_xfer+0xb0>)
   21548:	480d      	ldr	r0, [pc, #52]	; (21580 <nrfx_qspi_cinstr_xfer+0xb4>)
   2154a:	f240 126b 	movw	r2, #363	; 0x16b
   2154e:	f007 f919 	bl	28784 <assert_print>
   21552:	480a      	ldr	r0, [pc, #40]	; (2157c <nrfx_qspi_cinstr_xfer+0xb0>)
   21554:	f240 116b 	movw	r1, #363	; 0x16b
   21558:	f007 f90d 	bl	28776 <assert_post_action>
}
   2155c:	4638      	mov	r0, r7
   2155e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21560:	2300      	movs	r3, #0
   21562:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   21566:	b11c      	cbz	r4, 21570 <nrfx_qspi_cinstr_xfer+0xa4>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   21568:	7868      	ldrb	r0, [r5, #1]
   2156a:	4621      	mov	r1, r4
   2156c:	f7ff fe60 	bl	21230 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   21570:	4f06      	ldr	r7, [pc, #24]	; (2158c <nrfx_qspi_cinstr_xfer+0xc0>)
   21572:	e7f3      	b.n	2155c <nrfx_qspi_cinstr_xfer+0x90>
        return NRFX_ERROR_BUSY;
   21574:	4f06      	ldr	r7, [pc, #24]	; (21590 <nrfx_qspi_cinstr_xfer+0xc4>)
   21576:	e7f1      	b.n	2155c <nrfx_qspi_cinstr_xfer+0x90>
   21578:	20002ac4 	.word	0x20002ac4
   2157c:	00030385 	.word	0x00030385
   21580:	0002d509 	.word	0x0002d509
   21584:	40029000 	.word	0x40029000
   21588:	0bad0007 	.word	0x0bad0007
   2158c:	0bad0000 	.word	0x0bad0000
   21590:	0bad000b 	.word	0x0bad000b

00021594 <nrfx_qspi_mem_busy_check>:
{
   21594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   21596:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   21598:	f8cd 300a 	str.w	r3, [sp, #10]
    uint8_t status_value = 0;
   2159c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   215a0:	2305      	movs	r3, #5
   215a2:	f88d 3008 	strb.w	r3, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   215a6:	f10d 0207 	add.w	r2, sp, #7
    nrf_qspi_cinstr_conf_t const config = {
   215aa:	2302      	movs	r3, #2
   215ac:	f88d 3009 	strb.w	r3, [sp, #9]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   215b0:	4611      	mov	r1, r2
    nrf_qspi_cinstr_conf_t const config = {
   215b2:	2301      	movs	r3, #1
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   215b4:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   215b6:	f88d 300b 	strb.w	r3, [sp, #11]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   215ba:	f7ff ff87 	bl	214cc <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   215be:	4b06      	ldr	r3, [pc, #24]	; (215d8 <nrfx_qspi_mem_busy_check+0x44>)
   215c0:	4298      	cmp	r0, r3
   215c2:	d106      	bne.n	215d2 <nrfx_qspi_mem_busy_check+0x3e>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   215c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   215c8:	f013 0f01 	tst.w	r3, #1
   215cc:	4b03      	ldr	r3, [pc, #12]	; (215dc <nrfx_qspi_mem_busy_check+0x48>)
   215ce:	bf18      	it	ne
   215d0:	4618      	movne	r0, r3
}
   215d2:	b005      	add	sp, #20
   215d4:	f85d fb04 	ldr.w	pc, [sp], #4
   215d8:	0bad0000 	.word	0x0bad0000
   215dc:	0bad000b 	.word	0x0bad000b

000215e0 <nrfx_qspi_uninit>:
{
   215e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   215e4:	4e2d      	ldr	r6, [pc, #180]	; (2169c <nrfx_qspi_uninit+0xbc>)
   215e6:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   215ea:	b953      	cbnz	r3, 21602 <nrfx_qspi_uninit+0x22>
   215ec:	492c      	ldr	r1, [pc, #176]	; (216a0 <nrfx_qspi_uninit+0xc0>)
   215ee:	482d      	ldr	r0, [pc, #180]	; (216a4 <nrfx_qspi_uninit+0xc4>)
   215f0:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   215f4:	f007 f8c6 	bl	28784 <assert_print>
   215f8:	4829      	ldr	r0, [pc, #164]	; (216a0 <nrfx_qspi_uninit+0xc0>)
   215fa:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   215fe:	f007 f8ba 	bl	28776 <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   21602:	2029      	movs	r0, #41	; 0x29
   21604:	f7f3 f848 	bl	14698 <arch_irq_disable>
                         (QSPI_CINSTRCONF_LFEN_Msk));
}

NRF_STATIC_INLINE bool nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI_Type const * p_reg)
{
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   21608:	4b27      	ldr	r3, [pc, #156]	; (216a8 <nrfx_qspi_uninit+0xc8>)
   2160a:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   2160e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   21612:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
                                                              bool                  finalize)
{
    uint32_t mask = (((uint32_t)length << QSPI_CINSTRCONF_LENGTH_Pos) | (QSPI_CINSTRCONF_LFEN_Msk));
    mask |= (finalize ? QSPI_CINSTRCONF_LFSTOP_Msk : 0);

    p_reg->CINSTRCONF = mask;
   21616:	bf04      	itt	eq
   21618:	4a24      	ldreq	r2, [pc, #144]	; (216ac <nrfx_qspi_uninit+0xcc>)
   2161a:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2161e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    p_reg->INTENCLR = mask;
   21622:	2201      	movs	r2, #1
   21624:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21628:	611a      	str	r2, [r3, #16]
            if (var1 == 0x08)
   2162a:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
   2162e:	2908      	cmp	r1, #8
        *(volatile uint32_t *)0x40029054ul = 1ul;
   21630:	bf08      	it	eq
   21632:	655a      	streq	r2, [r3, #84]	; 0x54
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   21634:	4b1c      	ldr	r3, [pc, #112]	; (216a8 <nrfx_qspi_uninit+0xc8>)
   21636:	2200      	movs	r2, #0
   21638:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2163c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   21640:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   21644:	bb22      	cbnz	r2, 21690 <nrfx_qspi_uninit+0xb0>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   21646:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   2164a:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   2164e:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   21652:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   21656:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   2165a:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
    nrf_gpio_cfg_default(pins.sck_pin);
   2165e:	b2c0      	uxtb	r0, r0
   21660:	f00a fb20 	bl	2bca4 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   21664:	fa5f f089 	uxtb.w	r0, r9
   21668:	f00a fb1c 	bl	2bca4 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   2166c:	fa5f f088 	uxtb.w	r0, r8
   21670:	f00a fb18 	bl	2bca4 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   21674:	b2f8      	uxtb	r0, r7
   21676:	f00a fb15 	bl	2bca4 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2167a:	b2e8      	uxtb	r0, r5
   2167c:	28ff      	cmp	r0, #255	; 0xff
   2167e:	b2e4      	uxtb	r4, r4
   21680:	d001      	beq.n	21686 <nrfx_qspi_uninit+0xa6>
        nrf_gpio_cfg_default(pins.io2_pin);
   21682:	f00a fb0f 	bl	2bca4 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   21686:	2cff      	cmp	r4, #255	; 0xff
   21688:	d002      	beq.n	21690 <nrfx_qspi_uninit+0xb0>
        nrf_gpio_cfg_default(pins.io3_pin);
   2168a:	4620      	mov	r0, r4
   2168c:	f00a fb0a 	bl	2bca4 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   21690:	2300      	movs	r3, #0
   21692:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   21696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2169a:	bf00      	nop
   2169c:	20002ac4 	.word	0x20002ac4
   216a0:	00030385 	.word	0x00030385
   216a4:	0002d509 	.word	0x0002d509
   216a8:	40029000 	.word	0x40029000
   216ac:	00030100 	.word	0x00030100

000216b0 <nrfx_qspi_erase>:
{
   216b0:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   216b2:	4c1b      	ldr	r4, [pc, #108]	; (21720 <nrfx_qspi_erase+0x70>)
   216b4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
{
   216b8:	4606      	mov	r6, r0
   216ba:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   216bc:	b953      	cbnz	r3, 216d4 <nrfx_qspi_erase+0x24>
   216be:	4919      	ldr	r1, [pc, #100]	; (21724 <nrfx_qspi_erase+0x74>)
   216c0:	4819      	ldr	r0, [pc, #100]	; (21728 <nrfx_qspi_erase+0x78>)
   216c2:	f44f 720a 	mov.w	r2, #552	; 0x228
   216c6:	f007 f85d 	bl	28784 <assert_print>
   216ca:	4816      	ldr	r0, [pc, #88]	; (21724 <nrfx_qspi_erase+0x74>)
   216cc:	f44f 710a 	mov.w	r1, #552	; 0x228
   216d0:	f007 f851 	bl	28776 <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   216d4:	07ab      	lsls	r3, r5, #30
   216d6:	d11f      	bne.n	21718 <nrfx_qspi_erase+0x68>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   216d8:	6821      	ldr	r1, [r4, #0]
   216da:	b119      	cbz	r1, 216e4 <nrfx_qspi_erase+0x34>
   216dc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   216e0:	2b01      	cmp	r3, #1
   216e2:	d11b      	bne.n	2171c <nrfx_qspi_erase+0x6c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   216e4:	2304      	movs	r3, #4
   216e6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   216ea:	4b10      	ldr	r3, [pc, #64]	; (2172c <nrfx_qspi_erase+0x7c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   216ec:	2200      	movs	r2, #0
    p_reg->ERASE.PTR = erase_addr;
   216ee:	f8c3 551c 	str.w	r5, [r3, #1308]	; 0x51c
    p_reg->ERASE.LEN = len;
   216f2:	f8c3 6520 	str.w	r6, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   216f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   216fa:	2201      	movs	r2, #1
   216fc:	60da      	str	r2, [r3, #12]
    if (!m_cb.handler)
   216fe:	b941      	cbnz	r1, 21712 <nrfx_qspi_erase+0x62>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21700:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   21704:	2a00      	cmp	r2, #0
   21706:	d0fb      	beq.n	21700 <nrfx_qspi_erase+0x50>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   21708:	2301      	movs	r3, #1
   2170a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return NRFX_SUCCESS;
   2170e:	4808      	ldr	r0, [pc, #32]	; (21730 <nrfx_qspi_erase+0x80>)
}
   21710:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   21712:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   21716:	e7fa      	b.n	2170e <nrfx_qspi_erase+0x5e>
        return NRFX_ERROR_INVALID_ADDR;
   21718:	4806      	ldr	r0, [pc, #24]	; (21734 <nrfx_qspi_erase+0x84>)
   2171a:	e7f9      	b.n	21710 <nrfx_qspi_erase+0x60>
        return NRFX_ERROR_BUSY;
   2171c:	4806      	ldr	r0, [pc, #24]	; (21738 <nrfx_qspi_erase+0x88>)
   2171e:	e7f7      	b.n	21710 <nrfx_qspi_erase+0x60>
   21720:	20002ac4 	.word	0x20002ac4
   21724:	00030385 	.word	0x00030385
   21728:	0002d509 	.word	0x0002d509
   2172c:	40029000 	.word	0x40029000
   21730:	0bad0000 	.word	0x0bad0000
   21734:	0bad000a 	.word	0x0bad000a
   21738:	0bad000b 	.word	0x0bad000b

0002173c <nrfx_qspi_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2173c:	4b17      	ldr	r3, [pc, #92]	; (2179c <nrfx_qspi_irq_handler+0x60>)
   2173e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   21742:	b510      	push	{r4, lr}
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   21744:	b1e2      	cbz	r2, 21780 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21746:	2200      	movs	r2, #0
    switch (m_cb.state)
   21748:	4c15      	ldr	r4, [pc, #84]	; (217a0 <nrfx_qspi_irq_handler+0x64>)
   2174a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2174e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   21752:	2a03      	cmp	r2, #3
   21754:	d015      	beq.n	21782 <nrfx_qspi_irq_handler+0x46>
   21756:	2a04      	cmp	r2, #4
   21758:	d015      	beq.n	21786 <nrfx_qspi_irq_handler+0x4a>
   2175a:	2a02      	cmp	r2, #2
   2175c:	d104      	bne.n	21768 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   2175e:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   21760:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   21764:	f7ff fd50 	bl	21208 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   21768:	68a3      	ldr	r3, [r4, #8]
   2176a:	b913      	cbnz	r3, 21772 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   2176c:	2301      	movs	r3, #1
   2176e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   21772:	e9d4 3100 	ldrd	r3, r1, [r4]
   21776:	2000      	movs	r0, #0
   21778:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   2177a:	2300      	movs	r3, #0
   2177c:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   21780:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   21782:	2302      	movs	r3, #2
   21784:	e7ec      	b.n	21760 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   21786:	2203      	movs	r2, #3
   21788:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   2178c:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   21790:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   21792:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   21796:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   2179a:	e7e5      	b.n	21768 <nrfx_qspi_irq_handler+0x2c>
   2179c:	40029000 	.word	0x40029000
   217a0:	20002ac4 	.word	0x20002ac4

000217a4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   217a4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   217a6:	4c14      	ldr	r4, [pc, #80]	; (217f8 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   217a8:	4a14      	ldr	r2, [pc, #80]	; (217fc <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   217aa:	4915      	ldr	r1, [pc, #84]	; (21800 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   217ac:	2303      	movs	r3, #3
   217ae:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   217b0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   217b2:	4b14      	ldr	r3, [pc, #80]	; (21804 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   217b4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   217b6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   217b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   217bc:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   217be:	2300      	movs	r3, #0
   217c0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   217c2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   217c4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   217c6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   217c8:	4a0f      	ldr	r2, [pc, #60]	; (21808 <_DoInit+0x64>)
   217ca:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   217cc:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   217ce:	2210      	movs	r2, #16
   217d0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   217d2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   217d4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   217d6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   217d8:	f00a fd05 	bl	2c1e6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   217dc:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   217e0:	490a      	ldr	r1, [pc, #40]	; (2180c <_DoInit+0x68>)
   217e2:	4620      	mov	r0, r4
   217e4:	f00a fcff 	bl	2c1e6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   217e8:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   217ec:	2320      	movs	r3, #32
   217ee:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   217f0:	f3bf 8f5f 	dmb	sy
}
   217f4:	bd10      	pop	{r4, pc}
   217f6:	bf00      	nop
   217f8:	20002af8 	.word	0x20002af8
   217fc:	000303c1 	.word	0x000303c1
   21800:	000303ca 	.word	0x000303ca
   21804:	20003ff3 	.word	0x20003ff3
   21808:	20003fe3 	.word	0x20003fe3
   2180c:	000303ce 	.word	0x000303ce

00021810 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21810:	4b0e      	ldr	r3, [pc, #56]	; (2184c <z_sys_init_run_level+0x3c>)
{
   21812:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21814:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   21818:	3001      	adds	r0, #1
   2181a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2181e:	42a6      	cmp	r6, r4
   21820:	d800      	bhi.n	21824 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   21822:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   21824:	e9d4 3500 	ldrd	r3, r5, [r4]
   21828:	4628      	mov	r0, r5
   2182a:	4798      	blx	r3
		if (dev != NULL) {
   2182c:	b165      	cbz	r5, 21848 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   2182e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   21830:	b130      	cbz	r0, 21840 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   21832:	2800      	cmp	r0, #0
   21834:	bfb8      	it	lt
   21836:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   21838:	28ff      	cmp	r0, #255	; 0xff
   2183a:	bfa8      	it	ge
   2183c:	20ff      	movge	r0, #255	; 0xff
   2183e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   21840:	785a      	ldrb	r2, [r3, #1]
   21842:	f042 0201 	orr.w	r2, r2, #1
   21846:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21848:	3408      	adds	r4, #8
   2184a:	e7e8      	b.n	2181e <z_sys_init_run_level+0xe>
   2184c:	0002cf28 	.word	0x0002cf28

00021850 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   21850:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   21852:	4605      	mov	r5, r0
   21854:	b910      	cbnz	r0, 2185c <z_impl_device_get_binding+0xc>
		return NULL;
   21856:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   21858:	4620      	mov	r0, r4
   2185a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   2185c:	7803      	ldrb	r3, [r0, #0]
   2185e:	2b00      	cmp	r3, #0
   21860:	d0f9      	beq.n	21856 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   21862:	4c0e      	ldr	r4, [pc, #56]	; (2189c <z_impl_device_get_binding+0x4c>)
   21864:	4e0e      	ldr	r6, [pc, #56]	; (218a0 <z_impl_device_get_binding+0x50>)
   21866:	42b4      	cmp	r4, r6
   21868:	d108      	bne.n	2187c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   2186a:	4c0c      	ldr	r4, [pc, #48]	; (2189c <z_impl_device_get_binding+0x4c>)
   2186c:	42b4      	cmp	r4, r6
   2186e:	d0f2      	beq.n	21856 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   21870:	4620      	mov	r0, r4
   21872:	f00a fa37 	bl	2bce4 <z_device_is_ready>
   21876:	b950      	cbnz	r0, 2188e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   21878:	3418      	adds	r4, #24
   2187a:	e7f7      	b.n	2186c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   2187c:	4620      	mov	r0, r4
   2187e:	f00a fa31 	bl	2bce4 <z_device_is_ready>
   21882:	b110      	cbz	r0, 2188a <z_impl_device_get_binding+0x3a>
   21884:	6823      	ldr	r3, [r4, #0]
   21886:	42ab      	cmp	r3, r5
   21888:	d0e6      	beq.n	21858 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   2188a:	3418      	adds	r4, #24
   2188c:	e7eb      	b.n	21866 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2188e:	6821      	ldr	r1, [r4, #0]
   21890:	4628      	mov	r0, r5
   21892:	f7eb fbc4 	bl	d01e <strcmp>
   21896:	2800      	cmp	r0, #0
   21898:	d1ee      	bne.n	21878 <z_impl_device_get_binding+0x28>
   2189a:	e7dd      	b.n	21858 <z_impl_device_get_binding+0x8>
   2189c:	0002c310 	.word	0x0002c310
   218a0:	0002c418 	.word	0x0002c418

000218a4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   218a4:	4b01      	ldr	r3, [pc, #4]	; (218ac <z_impl_z_errno+0x8>)
   218a6:	6898      	ldr	r0, [r3, #8]
}
   218a8:	3064      	adds	r0, #100	; 0x64
   218aa:	4770      	bx	lr
   218ac:	20002ba0 	.word	0x20002ba0

000218b0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   218b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   218b2:	4604      	mov	r4, r0
   218b4:	460e      	mov	r6, r1
	__asm__ volatile(
   218b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   218ba:	f3ef 8711 	mrs	r7, BASEPRI
   218be:	f383 8812 	msr	BASEPRI_MAX, r3
   218c2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   218c6:	f002 fbab 	bl	24020 <z_impl_z_current_get>
   218ca:	2c04      	cmp	r4, #4
   218cc:	bf96      	itet	ls
   218ce:	4b1e      	ldrls	r3, [pc, #120]	; (21948 <z_fatal_error+0x98>)
   218d0:	4b1e      	ldrhi	r3, [pc, #120]	; (2194c <z_fatal_error+0x9c>)
   218d2:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   218d6:	2200      	movs	r2, #0
   218d8:	4605      	mov	r5, r0
   218da:	9200      	str	r2, [sp, #0]
   218dc:	481c      	ldr	r0, [pc, #112]	; (21950 <z_fatal_error+0xa0>)
   218de:	4622      	mov	r2, r4
   218e0:	2145      	movs	r1, #69	; 0x45
   218e2:	f006 ff5d 	bl	287a0 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   218e6:	b13e      	cbz	r6, 218f8 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   218e8:	69f3      	ldr	r3, [r6, #28]
   218ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
   218ee:	b11b      	cbz	r3, 218f8 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   218f0:	4818      	ldr	r0, [pc, #96]	; (21954 <z_fatal_error+0xa4>)
   218f2:	2145      	movs	r1, #69	; 0x45
   218f4:	f006 ff54 	bl	287a0 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   218f8:	b135      	cbz	r5, 21908 <z_fatal_error+0x58>
   218fa:	4628      	mov	r0, r5
   218fc:	f00a fa2d 	bl	2bd5a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   21900:	4603      	mov	r3, r0
   21902:	b108      	cbz	r0, 21908 <z_fatal_error+0x58>
   21904:	7802      	ldrb	r2, [r0, #0]
   21906:	b902      	cbnz	r2, 2190a <z_fatal_error+0x5a>
		thread_name = "unknown";
   21908:	4b13      	ldr	r3, [pc, #76]	; (21958 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2190a:	4814      	ldr	r0, [pc, #80]	; (2195c <z_fatal_error+0xac>)
   2190c:	462a      	mov	r2, r5
   2190e:	2145      	movs	r1, #69	; 0x45
   21910:	f006 ff46 	bl	287a0 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   21914:	4631      	mov	r1, r6
   21916:	4620      	mov	r0, r4
   21918:	f7fd fd24 	bl	1f364 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2191c:	2c04      	cmp	r4, #4
   2191e:	d108      	bne.n	21932 <z_fatal_error+0x82>
   21920:	490f      	ldr	r1, [pc, #60]	; (21960 <z_fatal_error+0xb0>)
   21922:	4810      	ldr	r0, [pc, #64]	; (21964 <z_fatal_error+0xb4>)
   21924:	2293      	movs	r2, #147	; 0x93
   21926:	f006 ff2d 	bl	28784 <assert_print>
   2192a:	480d      	ldr	r0, [pc, #52]	; (21960 <z_fatal_error+0xb0>)
   2192c:	2193      	movs	r1, #147	; 0x93
   2192e:	f006 ff22 	bl	28776 <assert_post_action>
	__asm__ volatile(
   21932:	f387 8811 	msr	BASEPRI, r7
   21936:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2193a:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2193c:	b003      	add	sp, #12
   2193e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21942:	f7f3 ba9d 	b.w	14e80 <z_impl_k_thread_abort>
   21946:	bf00      	nop
   21948:	0002cf40 	.word	0x0002cf40
   2194c:	000303d5 	.word	0x000303d5
   21950:	000303eb 	.word	0x000303eb
   21954:	00030418 	.word	0x00030418
   21958:	000303e3 	.word	0x000303e3
   2195c:	0003043e 	.word	0x0003043e
   21960:	0003045b 	.word	0x0003045b
   21964:	0002d509 	.word	0x0002d509

00021968 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   21968:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   2196a:	4b0a      	ldr	r3, [pc, #40]	; (21994 <bg_thread_main+0x2c>)
   2196c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2196e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   21970:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21972:	f7ff ff4d 	bl	21810 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   21976:	f003 fb23 	bl	24fc0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   2197a:	2003      	movs	r0, #3
   2197c:	f7ff ff48 	bl	21810 <z_sys_init_run_level>

	z_init_static_threads();
   21980:	f000 fb26 	bl	21fd0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   21984:	f7f0 fa16 	bl	11db4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   21988:	4a03      	ldr	r2, [pc, #12]	; (21998 <bg_thread_main+0x30>)
   2198a:	7b13      	ldrb	r3, [r2, #12]
   2198c:	f023 0301 	bic.w	r3, r3, #1
   21990:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   21992:	bd08      	pop	{r3, pc}
   21994:	200043f3 	.word	0x200043f3
   21998:	20002018 	.word	0x20002018

0002199c <z_bss_zero>:
{
   2199c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2199e:	4803      	ldr	r0, [pc, #12]	; (219ac <z_bss_zero+0x10>)
   219a0:	4a03      	ldr	r2, [pc, #12]	; (219b0 <z_bss_zero+0x14>)
   219a2:	2100      	movs	r1, #0
   219a4:	1a12      	subs	r2, r2, r0
   219a6:	f00a f9a7 	bl	2bcf8 <z_early_memset>
}
   219aa:	bd08      	pop	{r3, pc}
   219ac:	20000c48 	.word	0x20000c48
   219b0:	200043f4 	.word	0x200043f4

000219b4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   219b4:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   219b6:	2300      	movs	r3, #0
{
   219b8:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   219ba:	2201      	movs	r2, #1
   219bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   219c0:	4e13      	ldr	r6, [pc, #76]	; (21a10 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   219c2:	4d14      	ldr	r5, [pc, #80]	; (21a14 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   219c4:	9301      	str	r3, [sp, #4]
   219c6:	220f      	movs	r2, #15
   219c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
   219cc:	4912      	ldr	r1, [pc, #72]	; (21a18 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   219ce:	2318      	movs	r3, #24
   219d0:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   219d4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   219d8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   219da:	f44f 70c0 	mov.w	r0, #384	; 0x180
   219de:	fb00 1104 	mla	r1, r0, r4, r1
   219e2:	4b0e      	ldr	r3, [pc, #56]	; (21a1c <z_init_cpu+0x68>)
   219e4:	9500      	str	r5, [sp, #0]
   219e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   219ea:	4630      	mov	r0, r6
   219ec:	f000 fa50 	bl	21e90 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   219f0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   219f2:	480b      	ldr	r0, [pc, #44]	; (21a20 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   219f4:	752c      	strb	r4, [r5, #20]
   219f6:	f023 0304 	bic.w	r3, r3, #4
   219fa:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   219fc:	f44f 6304 	mov.w	r3, #2112	; 0x840
   21a00:	fb03 0404 	mla	r4, r3, r4, r0
   21a04:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   21a06:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   21a08:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   21a0a:	b006      	add	sp, #24
   21a0c:	bd70      	pop	{r4, r5, r6, pc}
   21a0e:	bf00      	nop
   21a10:	20001f98 	.word	0x20001f98
   21a14:	20002ba0 	.word	0x20002ba0
   21a18:	20006940 	.word	0x20006940
   21a1c:	00022115 	.word	0x00022115
   21a20:	20006ac0 	.word	0x20006ac0

00021a24 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   21a24:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   21a26:	4b2e      	ldr	r3, [pc, #184]	; (21ae0 <z_cstart+0xbc>)
   21a28:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   21a2a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   21a2e:	4d2d      	ldr	r5, [pc, #180]	; (21ae4 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   21a30:	4e2d      	ldr	r6, [pc, #180]	; (21ae8 <z_cstart+0xc4>)
   21a32:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21a34:	4f2d      	ldr	r7, [pc, #180]	; (21aec <z_cstart+0xc8>)
   21a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   21a3a:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21a3c:	23e0      	movs	r3, #224	; 0xe0
   21a3e:	2400      	movs	r4, #0
   21a40:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   21a44:	2320      	movs	r3, #32
   21a46:	77eb      	strb	r3, [r5, #31]
   21a48:	762c      	strb	r4, [r5, #24]
   21a4a:	766c      	strb	r4, [r5, #25]
   21a4c:	76ac      	strb	r4, [r5, #26]
   21a4e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21a52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21a54:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21a58:	626b      	str	r3, [r5, #36]	; 0x24
   21a5a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   21a5e:	f7f3 f983 	bl	14d68 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21a62:	f7f2 fdbd 	bl	145e0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21a6a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21a6c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   21a6e:	f7f3 fae7 	bl	15040 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21a72:	f7f3 fa1b 	bl	14eac <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   21a76:	f240 1301 	movw	r3, #257	; 0x101
   21a7a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   21a7e:	ab06      	add	r3, sp, #24
   21a80:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   21a82:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   21a86:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   21a88:	f00a f92b 	bl	2bce2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21a8c:	4620      	mov	r0, r4
   21a8e:	f7ff febf 	bl	21810 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21a92:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   21a94:	4d16      	ldr	r5, [pc, #88]	; (21af0 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21a96:	f7ff febb 	bl	21810 <z_sys_init_run_level>
	z_sched_init();
   21a9a:	f002 f977 	bl	23d8c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21a9e:	4b15      	ldr	r3, [pc, #84]	; (21af4 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   21aa0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21aa2:	9305      	str	r3, [sp, #20]
   21aa4:	2301      	movs	r3, #1
   21aa6:	4914      	ldr	r1, [pc, #80]	; (21af8 <z_cstart+0xd4>)
   21aa8:	9400      	str	r4, [sp, #0]
   21aaa:	e9cd 4303 	strd	r4, r3, [sp, #12]
   21aae:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21ab2:	463b      	mov	r3, r7
   21ab4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   21ab8:	4628      	mov	r0, r5
   21aba:	f000 f9e9 	bl	21e90 <z_setup_new_thread>
   21abe:	7b6a      	ldrb	r2, [r5, #13]
   21ac0:	4606      	mov	r6, r0
   21ac2:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   21ac6:	4628      	mov	r0, r5
   21ac8:	736a      	strb	r2, [r5, #13]
   21aca:	f001 fe27 	bl	2371c <z_ready_thread>
	z_init_cpu(0);
   21ace:	4620      	mov	r0, r4
   21ad0:	f7ff ff70 	bl	219b4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   21ad4:	463a      	mov	r2, r7
   21ad6:	4631      	mov	r1, r6
   21ad8:	4628      	mov	r0, r5
   21ada:	f7f2 fedf 	bl	1489c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   21ade:	bf00      	nop
   21ae0:	20007300 	.word	0x20007300
   21ae4:	e000ed00 	.word	0xe000ed00
   21ae8:	20002ba0 	.word	0x20002ba0
   21aec:	00021969 	.word	0x00021969
   21af0:	20002018 	.word	0x20002018
   21af4:	000304c7 	.word	0x000304c7
   21af8:	20006100 	.word	0x20006100

00021afc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   21afc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21afe:	4c0c      	ldr	r4, [pc, #48]	; (21b30 <statics_init+0x34>)
   21b00:	4d0c      	ldr	r5, [pc, #48]	; (21b34 <statics_init+0x38>)
   21b02:	4e0d      	ldr	r6, [pc, #52]	; (21b38 <statics_init+0x3c>)
   21b04:	42ac      	cmp	r4, r5
   21b06:	d908      	bls.n	21b1a <statics_init+0x1e>
   21b08:	480c      	ldr	r0, [pc, #48]	; (21b3c <statics_init+0x40>)
   21b0a:	4631      	mov	r1, r6
   21b0c:	2218      	movs	r2, #24
   21b0e:	f006 fe39 	bl	28784 <assert_print>
   21b12:	2118      	movs	r1, #24
   21b14:	4630      	mov	r0, r6
   21b16:	f006 fe2e 	bl	28776 <assert_post_action>
   21b1a:	42ac      	cmp	r4, r5
   21b1c:	d301      	bcc.n	21b22 <statics_init+0x26>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   21b1e:	2000      	movs	r0, #0
   21b20:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   21b22:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   21b26:	4620      	mov	r0, r4
   21b28:	f00a f8ea 	bl	2bd00 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21b2c:	3418      	adds	r4, #24
   21b2e:	e7e9      	b.n	21b04 <statics_init+0x8>
   21b30:	20000a48 	.word	0x20000a48
   21b34:	20000a48 	.word	0x20000a48
   21b38:	000304cf 	.word	0x000304cf
   21b3c:	0002d509 	.word	0x0002d509

00021b40 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   21b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b44:	b085      	sub	sp, #20
   21b46:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   21b4a:	4606      	mov	r6, r0
   21b4c:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21b4e:	4648      	mov	r0, r9
   21b50:	4639      	mov	r1, r7
{
   21b52:	4690      	mov	r8, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21b54:	f00a f9fc 	bl	2bf50 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21b58:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__asm__ volatile(
   21b60:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b64:	f3ef 8411 	mrs	r4, BASEPRI
   21b68:	f383 8812 	msr	BASEPRI_MAX, r3
   21b6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b70:	4628      	mov	r0, r5
   21b72:	f000 faa9 	bl	220c8 <z_spin_lock_valid>
   21b76:	b940      	cbnz	r0, 21b8a <k_heap_aligned_alloc+0x4a>
   21b78:	4932      	ldr	r1, [pc, #200]	; (21c44 <k_heap_aligned_alloc+0x104>)
   21b7a:	4833      	ldr	r0, [pc, #204]	; (21c48 <k_heap_aligned_alloc+0x108>)
   21b7c:	228e      	movs	r2, #142	; 0x8e
   21b7e:	f006 fe01 	bl	28784 <assert_print>
   21b82:	4830      	ldr	r0, [pc, #192]	; (21c44 <k_heap_aligned_alloc+0x104>)
   21b84:	218e      	movs	r1, #142	; 0x8e
   21b86:	f006 fdf6 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   21b8a:	4628      	mov	r0, r5
   21b8c:	f000 faba 	bl	22104 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21b90:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   21b94:	b15b      	cbz	r3, 21bae <k_heap_aligned_alloc+0x6e>
   21b96:	ea59 0307 	orrs.w	r3, r9, r7
   21b9a:	d008      	beq.n	21bae <k_heap_aligned_alloc+0x6e>
   21b9c:	492b      	ldr	r1, [pc, #172]	; (21c4c <k_heap_aligned_alloc+0x10c>)
   21b9e:	482a      	ldr	r0, [pc, #168]	; (21c48 <k_heap_aligned_alloc+0x108>)
   21ba0:	2249      	movs	r2, #73	; 0x49
   21ba2:	f006 fdef 	bl	28784 <assert_print>
   21ba6:	4829      	ldr	r0, [pc, #164]	; (21c4c <k_heap_aligned_alloc+0x10c>)
   21ba8:	2149      	movs	r1, #73	; 0x49
   21baa:	f006 fde4 	bl	28776 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21bae:	f8df 9094 	ldr.w	r9, [pc, #148]	; 21c44 <k_heap_aligned_alloc+0x104>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21bb2:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   21bb6:	4642      	mov	r2, r8
   21bb8:	4659      	mov	r1, fp
   21bba:	4630      	mov	r0, r6
   21bbc:	f7f0 ff90 	bl	12ae0 <sys_heap_aligned_alloc>
   21bc0:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   21bc2:	f002 fdab 	bl	2471c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   21bc6:	b1a7      	cbz	r7, 21bf2 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21bc8:	4628      	mov	r0, r5
   21bca:	f000 fa8b 	bl	220e4 <z_spin_unlock_valid>
   21bce:	b940      	cbnz	r0, 21be2 <k_heap_aligned_alloc+0xa2>
   21bd0:	491c      	ldr	r1, [pc, #112]	; (21c44 <k_heap_aligned_alloc+0x104>)
   21bd2:	481d      	ldr	r0, [pc, #116]	; (21c48 <k_heap_aligned_alloc+0x108>)
   21bd4:	22b9      	movs	r2, #185	; 0xb9
   21bd6:	f006 fdd5 	bl	28784 <assert_print>
   21bda:	481a      	ldr	r0, [pc, #104]	; (21c44 <k_heap_aligned_alloc+0x104>)
   21bdc:	21b9      	movs	r1, #185	; 0xb9
   21bde:	f006 fdca 	bl	28776 <assert_post_action>
	__asm__ volatile(
   21be2:	f384 8811 	msr	BASEPRI, r4
   21be6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   21bea:	4638      	mov	r0, r7
   21bec:	b005      	add	sp, #20
   21bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   21bf2:	9b02      	ldr	r3, [sp, #8]
   21bf4:	1a18      	subs	r0, r3, r0
   21bf6:	9b03      	ldr	r3, [sp, #12]
   21bf8:	eb63 0101 	sbc.w	r1, r3, r1
   21bfc:	2801      	cmp	r0, #1
   21bfe:	f171 0300 	sbcs.w	r3, r1, #0
   21c02:	dbe1      	blt.n	21bc8 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21c04:	e9cd 0100 	strd	r0, r1, [sp]
   21c08:	4652      	mov	r2, sl
   21c0a:	4621      	mov	r1, r4
   21c0c:	4628      	mov	r0, r5
   21c0e:	f001 fee9 	bl	239e4 <z_pend_curr>
	__asm__ volatile(
   21c12:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c16:	f3ef 8411 	mrs	r4, BASEPRI
   21c1a:	f383 8812 	msr	BASEPRI_MAX, r3
   21c1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c22:	4628      	mov	r0, r5
   21c24:	f000 fa50 	bl	220c8 <z_spin_lock_valid>
   21c28:	b940      	cbnz	r0, 21c3c <k_heap_aligned_alloc+0xfc>
   21c2a:	4807      	ldr	r0, [pc, #28]	; (21c48 <k_heap_aligned_alloc+0x108>)
   21c2c:	4649      	mov	r1, r9
   21c2e:	228e      	movs	r2, #142	; 0x8e
   21c30:	f006 fda8 	bl	28784 <assert_print>
   21c34:	218e      	movs	r1, #142	; 0x8e
   21c36:	4648      	mov	r0, r9
   21c38:	f006 fd9d 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   21c3c:	4628      	mov	r0, r5
   21c3e:	f000 fa61 	bl	22104 <z_spin_lock_set_owner>
	return k;
   21c42:	e7b8      	b.n	21bb6 <k_heap_aligned_alloc+0x76>
   21c44:	0002d57d 	.word	0x0002d57d
   21c48:	0002d509 	.word	0x0002d509
   21c4c:	000304cf 	.word	0x000304cf

00021c50 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   21c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c52:	4604      	mov	r4, r0
   21c54:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21c56:	f100 0514 	add.w	r5, r0, #20
   21c5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c5e:	f3ef 8711 	mrs	r7, BASEPRI
   21c62:	f383 8812 	msr	BASEPRI_MAX, r3
   21c66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c6a:	4628      	mov	r0, r5
   21c6c:	f000 fa2c 	bl	220c8 <z_spin_lock_valid>
   21c70:	b940      	cbnz	r0, 21c84 <k_heap_free+0x34>
   21c72:	4916      	ldr	r1, [pc, #88]	; (21ccc <k_heap_free+0x7c>)
   21c74:	4816      	ldr	r0, [pc, #88]	; (21cd0 <k_heap_free+0x80>)
   21c76:	228e      	movs	r2, #142	; 0x8e
   21c78:	f006 fd84 	bl	28784 <assert_print>
   21c7c:	4813      	ldr	r0, [pc, #76]	; (21ccc <k_heap_free+0x7c>)
   21c7e:	218e      	movs	r1, #142	; 0x8e
   21c80:	f006 fd79 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   21c84:	4628      	mov	r0, r5
   21c86:	f000 fa3d 	bl	22104 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   21c8a:	4620      	mov	r0, r4
   21c8c:	4631      	mov	r1, r6
   21c8e:	f7f0 feef 	bl	12a70 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   21c92:	f104 000c 	add.w	r0, r4, #12
   21c96:	f00a f941 	bl	2bf1c <z_unpend_all>
   21c9a:	b128      	cbz	r0, 21ca8 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   21c9c:	4639      	mov	r1, r7
   21c9e:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   21ca0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   21ca4:	f001 bb0a 	b.w	232bc <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ca8:	4628      	mov	r0, r5
   21caa:	f000 fa1b 	bl	220e4 <z_spin_unlock_valid>
   21cae:	b940      	cbnz	r0, 21cc2 <k_heap_free+0x72>
   21cb0:	4906      	ldr	r1, [pc, #24]	; (21ccc <k_heap_free+0x7c>)
   21cb2:	4807      	ldr	r0, [pc, #28]	; (21cd0 <k_heap_free+0x80>)
   21cb4:	22b9      	movs	r2, #185	; 0xb9
   21cb6:	f006 fd65 	bl	28784 <assert_print>
   21cba:	4804      	ldr	r0, [pc, #16]	; (21ccc <k_heap_free+0x7c>)
   21cbc:	21b9      	movs	r1, #185	; 0xb9
   21cbe:	f006 fd5a 	bl	28776 <assert_post_action>
	__asm__ volatile(
   21cc2:	f387 8811 	msr	BASEPRI, r7
   21cc6:	f3bf 8f6f 	isb	sy
}
   21cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21ccc:	0002d57d 	.word	0x0002d57d
   21cd0:	0002d509 	.word	0x0002d509

00021cd4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   21cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21cd6:	4c14      	ldr	r4, [pc, #80]	; (21d28 <init_mem_slab_module+0x54>)
   21cd8:	4d14      	ldr	r5, [pc, #80]	; (21d2c <init_mem_slab_module+0x58>)
   21cda:	4e15      	ldr	r6, [pc, #84]	; (21d30 <init_mem_slab_module+0x5c>)
   21cdc:	42ac      	cmp	r4, r5
   21cde:	d908      	bls.n	21cf2 <init_mem_slab_module+0x1e>
   21ce0:	4814      	ldr	r0, [pc, #80]	; (21d34 <init_mem_slab_module+0x60>)
   21ce2:	4631      	mov	r1, r6
   21ce4:	223d      	movs	r2, #61	; 0x3d
   21ce6:	f006 fd4d 	bl	28784 <assert_print>
   21cea:	213d      	movs	r1, #61	; 0x3d
   21cec:	4630      	mov	r0, r6
   21cee:	f006 fd42 	bl	28776 <assert_post_action>
   21cf2:	42ac      	cmp	r4, r5
   21cf4:	d301      	bcc.n	21cfa <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   21cf6:	2000      	movs	r0, #0
	return rc;
}
   21cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21cfa:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   21cfe:	ea42 0301 	orr.w	r3, r2, r1
   21d02:	f013 0303 	ands.w	r3, r3, #3
   21d06:	d10b      	bne.n	21d20 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   21d08:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   21d0a:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   21d0c:	4283      	cmp	r3, r0
   21d0e:	d101      	bne.n	21d14 <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21d10:	3420      	adds	r4, #32
   21d12:	e7e3      	b.n	21cdc <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   21d14:	69a7      	ldr	r7, [r4, #24]
   21d16:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   21d18:	3301      	adds	r3, #1
		slab->free_list = p;
   21d1a:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   21d1c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   21d1e:	e7f5      	b.n	21d0c <init_mem_slab_module+0x38>
	return rc;
   21d20:	f06f 0015 	mvn.w	r0, #21
   21d24:	e7e8      	b.n	21cf8 <init_mem_slab_module+0x24>
   21d26:	bf00      	nop
   21d28:	200009e8 	.word	0x200009e8
   21d2c:	20000a48 	.word	0x20000a48
   21d30:	000304f1 	.word	0x000304f1
   21d34:	0002d509 	.word	0x0002d509

00021d38 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   21d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21d3c:	4604      	mov	r4, r0
   21d3e:	460d      	mov	r5, r1
   21d40:	4690      	mov	r8, r2
   21d42:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21d44:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   21d48:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d4c:	f3ef 8911 	mrs	r9, BASEPRI
   21d50:	f383 8812 	msr	BASEPRI_MAX, r3
   21d54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d58:	4630      	mov	r0, r6
   21d5a:	f000 f9b5 	bl	220c8 <z_spin_lock_valid>
   21d5e:	b940      	cbnz	r0, 21d72 <k_mem_slab_alloc+0x3a>
   21d60:	491f      	ldr	r1, [pc, #124]	; (21de0 <k_mem_slab_alloc+0xa8>)
   21d62:	4820      	ldr	r0, [pc, #128]	; (21de4 <k_mem_slab_alloc+0xac>)
   21d64:	228e      	movs	r2, #142	; 0x8e
   21d66:	f006 fd0d 	bl	28784 <assert_print>
   21d6a:	481d      	ldr	r0, [pc, #116]	; (21de0 <k_mem_slab_alloc+0xa8>)
   21d6c:	218e      	movs	r1, #142	; 0x8e
   21d6e:	f006 fd02 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   21d72:	4630      	mov	r0, r6
   21d74:	f000 f9c6 	bl	22104 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   21d78:	69a3      	ldr	r3, [r4, #24]
   21d7a:	b1c3      	cbz	r3, 21dae <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   21d7c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   21d7e:	681b      	ldr	r3, [r3, #0]
   21d80:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   21d82:	69e3      	ldr	r3, [r4, #28]
   21d84:	3301      	adds	r3, #1
   21d86:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   21d88:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d8a:	4630      	mov	r0, r6
   21d8c:	f000 f9aa 	bl	220e4 <z_spin_unlock_valid>
   21d90:	b940      	cbnz	r0, 21da4 <k_mem_slab_alloc+0x6c>
   21d92:	4913      	ldr	r1, [pc, #76]	; (21de0 <k_mem_slab_alloc+0xa8>)
   21d94:	4813      	ldr	r0, [pc, #76]	; (21de4 <k_mem_slab_alloc+0xac>)
   21d96:	22b9      	movs	r2, #185	; 0xb9
   21d98:	f006 fcf4 	bl	28784 <assert_print>
   21d9c:	4810      	ldr	r0, [pc, #64]	; (21de0 <k_mem_slab_alloc+0xa8>)
   21d9e:	21b9      	movs	r1, #185	; 0xb9
   21da0:	f006 fce9 	bl	28776 <assert_post_action>
	__asm__ volatile(
   21da4:	f389 8811 	msr	BASEPRI, r9
   21da8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   21dac:	e013      	b.n	21dd6 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   21dae:	ea58 0207 	orrs.w	r2, r8, r7
   21db2:	d103      	bne.n	21dbc <k_mem_slab_alloc+0x84>
		*mem = NULL;
   21db4:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   21db6:	f06f 040b 	mvn.w	r4, #11
   21dba:	e7e6      	b.n	21d8a <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   21dbc:	4622      	mov	r2, r4
   21dbe:	e9cd 8700 	strd	r8, r7, [sp]
   21dc2:	4649      	mov	r1, r9
   21dc4:	4630      	mov	r0, r6
   21dc6:	f001 fe0d 	bl	239e4 <z_pend_curr>
		if (result == 0) {
   21dca:	4604      	mov	r4, r0
   21dcc:	b918      	cbnz	r0, 21dd6 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   21dce:	4b06      	ldr	r3, [pc, #24]	; (21de8 <k_mem_slab_alloc+0xb0>)
   21dd0:	689b      	ldr	r3, [r3, #8]
   21dd2:	695b      	ldr	r3, [r3, #20]
   21dd4:	602b      	str	r3, [r5, #0]
}
   21dd6:	4620      	mov	r0, r4
   21dd8:	b003      	add	sp, #12
   21dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21dde:	bf00      	nop
   21de0:	0002d57d 	.word	0x0002d57d
   21de4:	0002d509 	.word	0x0002d509
   21de8:	20002ba0 	.word	0x20002ba0

00021dec <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   21dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21df0:	4604      	mov	r4, r0
   21df2:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21df4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   21df8:	f04f 0340 	mov.w	r3, #64	; 0x40
   21dfc:	f3ef 8711 	mrs	r7, BASEPRI
   21e00:	f383 8812 	msr	BASEPRI_MAX, r3
   21e04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e08:	4630      	mov	r0, r6
   21e0a:	f000 f95d 	bl	220c8 <z_spin_lock_valid>
   21e0e:	b940      	cbnz	r0, 21e22 <k_mem_slab_free+0x36>
   21e10:	491d      	ldr	r1, [pc, #116]	; (21e88 <k_mem_slab_free+0x9c>)
   21e12:	481e      	ldr	r0, [pc, #120]	; (21e8c <k_mem_slab_free+0xa0>)
   21e14:	228e      	movs	r2, #142	; 0x8e
   21e16:	f006 fcb5 	bl	28784 <assert_print>
   21e1a:	481b      	ldr	r0, [pc, #108]	; (21e88 <k_mem_slab_free+0x9c>)
   21e1c:	218e      	movs	r1, #142	; 0x8e
   21e1e:	f006 fcaa 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   21e22:	4630      	mov	r0, r6
   21e24:	f000 f96e 	bl	22104 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   21e28:	f8d4 8018 	ldr.w	r8, [r4, #24]
   21e2c:	f1b8 0f00 	cmp.w	r8, #0
   21e30:	d10f      	bne.n	21e52 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   21e32:	4620      	mov	r0, r4
   21e34:	f001 ff6c 	bl	23d10 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   21e38:	b158      	cbz	r0, 21e52 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   21e3a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   21e3c:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   21e3e:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   21e42:	f001 fc6b 	bl	2371c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   21e46:	4639      	mov	r1, r7
   21e48:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   21e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   21e4e:	f001 ba35 	b.w	232bc <z_reschedule>
	**(char ***) mem = slab->free_list;
   21e52:	682b      	ldr	r3, [r5, #0]
   21e54:	69a2      	ldr	r2, [r4, #24]
   21e56:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   21e58:	682b      	ldr	r3, [r5, #0]
   21e5a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   21e5c:	69e3      	ldr	r3, [r4, #28]
   21e5e:	3b01      	subs	r3, #1
   21e60:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e62:	4630      	mov	r0, r6
   21e64:	f000 f93e 	bl	220e4 <z_spin_unlock_valid>
   21e68:	b940      	cbnz	r0, 21e7c <k_mem_slab_free+0x90>
   21e6a:	4907      	ldr	r1, [pc, #28]	; (21e88 <k_mem_slab_free+0x9c>)
   21e6c:	4807      	ldr	r0, [pc, #28]	; (21e8c <k_mem_slab_free+0xa0>)
   21e6e:	22b9      	movs	r2, #185	; 0xb9
   21e70:	f006 fc88 	bl	28784 <assert_print>
   21e74:	4804      	ldr	r0, [pc, #16]	; (21e88 <k_mem_slab_free+0x9c>)
   21e76:	21b9      	movs	r1, #185	; 0xb9
   21e78:	f006 fc7d 	bl	28776 <assert_post_action>
	__asm__ volatile(
   21e7c:	f387 8811 	msr	BASEPRI, r7
   21e80:	f3bf 8f6f 	isb	sy
}
   21e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21e88:	0002d57d 	.word	0x0002d57d
   21e8c:	0002d509 	.word	0x0002d509

00021e90 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   21e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21e94:	b085      	sub	sp, #20
   21e96:	4604      	mov	r4, r0
   21e98:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   21e9c:	f1b8 0f0f 	cmp.w	r8, #15
{
   21ea0:	460f      	mov	r7, r1
   21ea2:	4615      	mov	r5, r2
   21ea4:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   21ea6:	d132      	bne.n	21f0e <z_setup_new_thread+0x7e>
   21ea8:	4b21      	ldr	r3, [pc, #132]	; (21f30 <z_setup_new_thread+0xa0>)
   21eaa:	4599      	cmp	r9, r3
   21eac:	d133      	bne.n	21f16 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   21eae:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   21eb2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   21eb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21eb8:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21eba:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   21ebc:	2304      	movs	r3, #4
   21ebe:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21ec0:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   21ec4:	f107 0340 	add.w	r3, r7, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   21ec8:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   21ece:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21ed2:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21ed4:	f105 0840 	add.w	r8, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21eda:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   21edc:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21ee0:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   21ee2:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21ee4:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   21ee6:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   21eea:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   21eec:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   21eee:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21ef0:	4642      	mov	r2, r8
   21ef2:	4639      	mov	r1, r7
   21ef4:	4620      	mov	r0, r4
   21ef6:	f7f2 fc9f 	bl	14838 <arch_new_thread>
	if (!_current) {
   21efa:	4b0e      	ldr	r3, [pc, #56]	; (21f34 <z_setup_new_thread+0xa4>)
	new_thread->init_data = NULL;
   21efc:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   21efe:	689b      	ldr	r3, [r3, #8]
   21f00:	b103      	cbz	r3, 21f04 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   21f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   21f04:	6763      	str	r3, [r4, #116]	; 0x74
}
   21f06:	4640      	mov	r0, r8
   21f08:	b005      	add	sp, #20
   21f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   21f0e:	f108 0310 	add.w	r3, r8, #16
   21f12:	2b1e      	cmp	r3, #30
   21f14:	d9cb      	bls.n	21eae <z_setup_new_thread+0x1e>
   21f16:	4908      	ldr	r1, [pc, #32]	; (21f38 <z_setup_new_thread+0xa8>)
   21f18:	4808      	ldr	r0, [pc, #32]	; (21f3c <z_setup_new_thread+0xac>)
   21f1a:	f44f 7206 	mov.w	r2, #536	; 0x218
   21f1e:	f006 fc31 	bl	28784 <assert_print>
   21f22:	4805      	ldr	r0, [pc, #20]	; (21f38 <z_setup_new_thread+0xa8>)
   21f24:	f44f 7106 	mov.w	r1, #536	; 0x218
   21f28:	f006 fc25 	bl	28776 <assert_post_action>
   21f2c:	e7bf      	b.n	21eae <z_setup_new_thread+0x1e>
   21f2e:	bf00      	nop
   21f30:	00022115 	.word	0x00022115
   21f34:	20002ba0 	.word	0x20002ba0
   21f38:	00030516 	.word	0x00030516
   21f3c:	0002d509 	.word	0x0002d509

00021f40 <z_impl_k_thread_create>:
{
   21f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21f44:	b087      	sub	sp, #28
   21f46:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   21f4a:	4604      	mov	r4, r0
   21f4c:	460f      	mov	r7, r1
   21f4e:	4690      	mov	r8, r2
   21f50:	4699      	mov	r9, r3
   21f52:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   21f56:	b153      	cbz	r3, 21f6e <z_impl_k_thread_create+0x2e>
   21f58:	491a      	ldr	r1, [pc, #104]	; (21fc4 <z_impl_k_thread_create+0x84>)
   21f5a:	481b      	ldr	r0, [pc, #108]	; (21fc8 <z_impl_k_thread_create+0x88>)
   21f5c:	f240 2287 	movw	r2, #647	; 0x287
   21f60:	f006 fc10 	bl	28784 <assert_print>
   21f64:	4817      	ldr	r0, [pc, #92]	; (21fc4 <z_impl_k_thread_create+0x84>)
   21f66:	f240 2187 	movw	r1, #647	; 0x287
   21f6a:	f006 fc04 	bl	28776 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21f6e:	2300      	movs	r3, #0
   21f70:	9305      	str	r3, [sp, #20]
   21f72:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21f74:	9304      	str	r3, [sp, #16]
   21f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21f78:	9303      	str	r3, [sp, #12]
   21f7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21f7c:	9302      	str	r3, [sp, #8]
   21f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21f80:	9301      	str	r3, [sp, #4]
   21f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21f84:	9300      	str	r3, [sp, #0]
   21f86:	4642      	mov	r2, r8
   21f88:	464b      	mov	r3, r9
   21f8a:	4639      	mov	r1, r7
   21f8c:	4620      	mov	r0, r4
   21f8e:	f7ff ff7f 	bl	21e90 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   21f92:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   21f96:	bf08      	it	eq
   21f98:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   21f9c:	d005      	beq.n	21faa <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21f9e:	ea55 0306 	orrs.w	r3, r5, r6
   21fa2:	d106      	bne.n	21fb2 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   21fa4:	4620      	mov	r0, r4
   21fa6:	f001 fbef 	bl	23788 <z_sched_start>
}
   21faa:	4620      	mov	r0, r4
   21fac:	b007      	add	sp, #28
   21fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21fb2:	4906      	ldr	r1, [pc, #24]	; (21fcc <z_impl_k_thread_create+0x8c>)
   21fb4:	4632      	mov	r2, r6
   21fb6:	462b      	mov	r3, r5
   21fb8:	f104 0018 	add.w	r0, r4, #24
   21fbc:	f002 f9ac 	bl	24318 <z_add_timeout>
   21fc0:	e7f3      	b.n	21faa <z_impl_k_thread_create+0x6a>
   21fc2:	bf00      	nop
   21fc4:	00030516 	.word	0x00030516
   21fc8:	0002d509 	.word	0x0002d509
   21fcc:	0002380d 	.word	0x0002380d

00021fd0 <z_init_static_threads>:
{
   21fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21fd4:	4c37      	ldr	r4, [pc, #220]	; (220b4 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   21fd6:	4d38      	ldr	r5, [pc, #224]	; (220b8 <z_init_static_threads+0xe8>)
   21fd8:	4f38      	ldr	r7, [pc, #224]	; (220bc <z_init_static_threads+0xec>)
{
   21fda:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   21fdc:	42ac      	cmp	r4, r5
   21fde:	4626      	mov	r6, r4
   21fe0:	d90a      	bls.n	21ff8 <z_init_static_threads+0x28>
   21fe2:	4837      	ldr	r0, [pc, #220]	; (220c0 <z_init_static_threads+0xf0>)
   21fe4:	4639      	mov	r1, r7
   21fe6:	f240 22ee 	movw	r2, #750	; 0x2ee
   21fea:	f006 fbcb 	bl	28784 <assert_print>
   21fee:	f240 21ee 	movw	r1, #750	; 0x2ee
   21ff2:	4638      	mov	r0, r7
   21ff4:	f006 fbbf 	bl	28776 <assert_post_action>
   21ff8:	42ae      	cmp	r6, r5
   21ffa:	f104 0430 	add.w	r4, r4, #48	; 0x30
   21ffe:	d31b      	bcc.n	22038 <z_init_static_threads+0x68>
	k_sched_lock();
   22000:	f001 f992 	bl	23328 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   22004:	4c2b      	ldr	r4, [pc, #172]	; (220b4 <z_init_static_threads+0xe4>)
   22006:	4e2d      	ldr	r6, [pc, #180]	; (220bc <z_init_static_threads+0xec>)
   22008:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 220c0 <z_init_static_threads+0xf0>
   2200c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 220c4 <z_init_static_threads+0xf4>
   22010:	42ac      	cmp	r4, r5
   22012:	d90a      	bls.n	2202a <z_init_static_threads+0x5a>
   22014:	4631      	mov	r1, r6
   22016:	4640      	mov	r0, r8
   22018:	f240 320d 	movw	r2, #781	; 0x30d
   2201c:	f006 fbb2 	bl	28784 <assert_print>
   22020:	f240 310d 	movw	r1, #781	; 0x30d
   22024:	4630      	mov	r0, r6
   22026:	f006 fba6 	bl	28776 <assert_post_action>
   2202a:	42ac      	cmp	r4, r5
   2202c:	d320      	bcc.n	22070 <z_init_static_threads+0xa0>
}
   2202e:	b007      	add	sp, #28
   22030:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   22034:	f001 bdd6 	b.w	23be4 <k_sched_unlock>
		z_setup_new_thread(
   22038:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2203c:	9305      	str	r3, [sp, #20]
   2203e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   22042:	9304      	str	r3, [sp, #16]
   22044:	f854 3c14 	ldr.w	r3, [r4, #-20]
   22048:	9303      	str	r3, [sp, #12]
   2204a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2204e:	9302      	str	r3, [sp, #8]
   22050:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   22054:	9301      	str	r3, [sp, #4]
   22056:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2205a:	9300      	str	r3, [sp, #0]
   2205c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   22060:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   22064:	f7ff ff14 	bl	21e90 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   22068:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2206c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2206e:	e7b5      	b.n	21fdc <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   22070:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22072:	1c5a      	adds	r2, r3, #1
   22074:	d00f      	beq.n	22096 <z_init_static_threads+0xc6>
					    K_MSEC(thread_data->init_delay));
   22076:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2207a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2207e:	f240 30e7 	movw	r0, #999	; 0x3e7
   22082:	2100      	movs	r1, #0
   22084:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22088:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2208c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2208e:	d104      	bne.n	2209a <z_init_static_threads+0xca>
	z_sched_start(thread);
   22090:	4638      	mov	r0, r7
   22092:	f001 fb79 	bl	23788 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   22096:	3430      	adds	r4, #48	; 0x30
   22098:	e7ba      	b.n	22010 <z_init_static_threads+0x40>
   2209a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2209e:	2300      	movs	r3, #0
   220a0:	f7de ff66 	bl	f70 <__aeabi_uldivmod>
   220a4:	4602      	mov	r2, r0
   220a6:	460b      	mov	r3, r1
   220a8:	f107 0018 	add.w	r0, r7, #24
   220ac:	4649      	mov	r1, r9
   220ae:	f002 f933 	bl	24318 <z_add_timeout>
   220b2:	e7f0      	b.n	22096 <z_init_static_threads+0xc6>
   220b4:	200009e8 	.word	0x200009e8
   220b8:	200009e8 	.word	0x200009e8
   220bc:	00030516 	.word	0x00030516
   220c0:	0002d509 	.word	0x0002d509
   220c4:	0002380d 	.word	0x0002380d

000220c8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   220c8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   220ca:	b138      	cbz	r0, 220dc <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   220cc:	4b04      	ldr	r3, [pc, #16]	; (220e0 <z_spin_lock_valid+0x18>)
   220ce:	7d1b      	ldrb	r3, [r3, #20]
   220d0:	f000 0003 	and.w	r0, r0, #3
   220d4:	1ac0      	subs	r0, r0, r3
   220d6:	bf18      	it	ne
   220d8:	2001      	movne	r0, #1
   220da:	4770      	bx	lr
			return false;
		}
	}
	return true;
   220dc:	2001      	movs	r0, #1
}
   220de:	4770      	bx	lr
   220e0:	20002ba0 	.word	0x20002ba0

000220e4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   220e4:	4906      	ldr	r1, [pc, #24]	; (22100 <z_spin_unlock_valid+0x1c>)
{
   220e6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   220e8:	688a      	ldr	r2, [r1, #8]
   220ea:	7d08      	ldrb	r0, [r1, #20]
   220ec:	6819      	ldr	r1, [r3, #0]
   220ee:	4302      	orrs	r2, r0
   220f0:	4291      	cmp	r1, r2
   220f2:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   220f6:	bf04      	itt	eq
   220f8:	6018      	streq	r0, [r3, #0]
	return true;
   220fa:	2001      	moveq	r0, #1
}
   220fc:	4770      	bx	lr
   220fe:	bf00      	nop
   22100:	20002ba0 	.word	0x20002ba0

00022104 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   22104:	4a02      	ldr	r2, [pc, #8]	; (22110 <z_spin_lock_set_owner+0xc>)
   22106:	7d11      	ldrb	r1, [r2, #20]
   22108:	6893      	ldr	r3, [r2, #8]
   2210a:	430b      	orrs	r3, r1
   2210c:	6003      	str	r3, [r0, #0]
}
   2210e:	4770      	bx	lr
   22110:	20002ba0 	.word	0x20002ba0

00022114 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   22114:	4c12      	ldr	r4, [pc, #72]	; (22160 <idle+0x4c>)
{
   22116:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   22118:	68a3      	ldr	r3, [r4, #8]
   2211a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2211e:	2b00      	cmp	r3, #0
   22120:	da08      	bge.n	22134 <idle+0x20>
   22122:	4910      	ldr	r1, [pc, #64]	; (22164 <idle+0x50>)
   22124:	4810      	ldr	r0, [pc, #64]	; (22168 <idle+0x54>)
   22126:	2227      	movs	r2, #39	; 0x27
   22128:	f006 fb2c 	bl	28784 <assert_print>
   2212c:	480d      	ldr	r0, [pc, #52]	; (22164 <idle+0x50>)
   2212e:	2127      	movs	r1, #39	; 0x27
   22130:	f006 fb21 	bl	28776 <assert_post_action>
	return !z_sys_post_kernel;
   22134:	4d0d      	ldr	r5, [pc, #52]	; (2216c <idle+0x58>)
	__asm__ volatile(
   22136:	f04f 0240 	mov.w	r2, #64	; 0x40
   2213a:	f3ef 8311 	mrs	r3, BASEPRI
   2213e:	f382 8812 	msr	BASEPRI_MAX, r2
   22142:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   22146:	f002 f9d1 	bl	244ec <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2214a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2214c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2214e:	b913      	cbnz	r3, 22156 <idle+0x42>
	arch_cpu_idle();
   22150:	f7f2 fa4c 	bl	145ec <arch_cpu_idle>
}
   22154:	e7ef      	b.n	22136 <idle+0x22>
   22156:	f7f2 f82f 	bl	141b8 <pm_system_suspend>
   2215a:	2800      	cmp	r0, #0
   2215c:	d1eb      	bne.n	22136 <idle+0x22>
   2215e:	e7f7      	b.n	22150 <idle+0x3c>
   22160:	20002ba0 	.word	0x20002ba0
   22164:	00030539 	.word	0x00030539
   22168:	0002d509 	.word	0x0002d509
   2216c:	200043f3 	.word	0x200043f3

00022170 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   22170:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22174:	4604      	mov	r4, r0
   22176:	4617      	mov	r7, r2
   22178:	461e      	mov	r6, r3
   2217a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2217e:	b143      	cbz	r3, 22192 <z_impl_k_mutex_lock+0x22>
   22180:	495f      	ldr	r1, [pc, #380]	; (22300 <z_impl_k_mutex_lock+0x190>)
   22182:	4860      	ldr	r0, [pc, #384]	; (22304 <z_impl_k_mutex_lock+0x194>)
   22184:	2265      	movs	r2, #101	; 0x65
   22186:	f006 fafd 	bl	28784 <assert_print>
   2218a:	485d      	ldr	r0, [pc, #372]	; (22300 <z_impl_k_mutex_lock+0x190>)
   2218c:	2165      	movs	r1, #101	; 0x65
   2218e:	f006 faf2 	bl	28776 <assert_post_action>
   22192:	f04f 0340 	mov.w	r3, #64	; 0x40
   22196:	f3ef 8811 	mrs	r8, BASEPRI
   2219a:	f383 8812 	msr	BASEPRI_MAX, r3
   2219e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   221a2:	4859      	ldr	r0, [pc, #356]	; (22308 <z_impl_k_mutex_lock+0x198>)
   221a4:	f7ff ff90 	bl	220c8 <z_spin_lock_valid>
   221a8:	b940      	cbnz	r0, 221bc <z_impl_k_mutex_lock+0x4c>
   221aa:	4958      	ldr	r1, [pc, #352]	; (2230c <z_impl_k_mutex_lock+0x19c>)
   221ac:	4855      	ldr	r0, [pc, #340]	; (22304 <z_impl_k_mutex_lock+0x194>)
   221ae:	228e      	movs	r2, #142	; 0x8e
   221b0:	f006 fae8 	bl	28784 <assert_print>
   221b4:	4855      	ldr	r0, [pc, #340]	; (2230c <z_impl_k_mutex_lock+0x19c>)
   221b6:	218e      	movs	r1, #142	; 0x8e
   221b8:	f006 fadd 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   221bc:	4852      	ldr	r0, [pc, #328]	; (22308 <z_impl_k_mutex_lock+0x198>)
   221be:	f7ff ffa1 	bl	22104 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   221c2:	68e3      	ldr	r3, [r4, #12]
   221c4:	4a52      	ldr	r2, [pc, #328]	; (22310 <z_impl_k_mutex_lock+0x1a0>)
   221c6:	b1d3      	cbz	r3, 221fe <z_impl_k_mutex_lock+0x8e>
   221c8:	68a0      	ldr	r0, [r4, #8]
   221ca:	6891      	ldr	r1, [r2, #8]
   221cc:	4288      	cmp	r0, r1
   221ce:	d033      	beq.n	22238 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   221d0:	ea57 0306 	orrs.w	r3, r7, r6
   221d4:	d132      	bne.n	2223c <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221d6:	484c      	ldr	r0, [pc, #304]	; (22308 <z_impl_k_mutex_lock+0x198>)
   221d8:	f7ff ff84 	bl	220e4 <z_spin_unlock_valid>
   221dc:	b940      	cbnz	r0, 221f0 <z_impl_k_mutex_lock+0x80>
   221de:	494b      	ldr	r1, [pc, #300]	; (2230c <z_impl_k_mutex_lock+0x19c>)
   221e0:	4848      	ldr	r0, [pc, #288]	; (22304 <z_impl_k_mutex_lock+0x194>)
   221e2:	22b9      	movs	r2, #185	; 0xb9
   221e4:	f006 face 	bl	28784 <assert_print>
   221e8:	4848      	ldr	r0, [pc, #288]	; (2230c <z_impl_k_mutex_lock+0x19c>)
   221ea:	21b9      	movs	r1, #185	; 0xb9
   221ec:	f006 fac3 	bl	28776 <assert_post_action>
	__asm__ volatile(
   221f0:	f388 8811 	msr	BASEPRI, r8
   221f4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   221f8:	f06f 000f 	mvn.w	r0, #15
   221fc:	e019      	b.n	22232 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   221fe:	6891      	ldr	r1, [r2, #8]
   22200:	f991 100e 	ldrsb.w	r1, [r1, #14]
   22204:	4840      	ldr	r0, [pc, #256]	; (22308 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   22206:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   22208:	3301      	adds	r3, #1
   2220a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2220c:	6893      	ldr	r3, [r2, #8]
   2220e:	60a3      	str	r3, [r4, #8]
   22210:	f7ff ff68 	bl	220e4 <z_spin_unlock_valid>
   22214:	b940      	cbnz	r0, 22228 <z_impl_k_mutex_lock+0xb8>
   22216:	493d      	ldr	r1, [pc, #244]	; (2230c <z_impl_k_mutex_lock+0x19c>)
   22218:	483a      	ldr	r0, [pc, #232]	; (22304 <z_impl_k_mutex_lock+0x194>)
   2221a:	22b9      	movs	r2, #185	; 0xb9
   2221c:	f006 fab2 	bl	28784 <assert_print>
   22220:	483a      	ldr	r0, [pc, #232]	; (2230c <z_impl_k_mutex_lock+0x19c>)
   22222:	21b9      	movs	r1, #185	; 0xb9
   22224:	f006 faa7 	bl	28776 <assert_post_action>
   22228:	f388 8811 	msr	BASEPRI, r8
   2222c:	f3bf 8f6f 	isb	sy
		return 0;
   22230:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   22232:	b002      	add	sp, #8
   22234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   22238:	6921      	ldr	r1, [r4, #16]
   2223a:	e7e3      	b.n	22204 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2223c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   22240:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   22244:	4299      	cmp	r1, r3
   22246:	bfa8      	it	ge
   22248:	4619      	movge	r1, r3
   2224a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2224e:	4291      	cmp	r1, r2
   22250:	bfb8      	it	lt
   22252:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   22254:	428b      	cmp	r3, r1
   22256:	dd3e      	ble.n	222d6 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   22258:	f009 fd8a 	bl	2bd70 <adjust_owner_prio.isra.0>
   2225c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2225e:	e9cd 7600 	strd	r7, r6, [sp]
   22262:	4829      	ldr	r0, [pc, #164]	; (22308 <z_impl_k_mutex_lock+0x198>)
   22264:	4622      	mov	r2, r4
   22266:	4641      	mov	r1, r8
   22268:	f001 fbbc 	bl	239e4 <z_pend_curr>
	if (got_mutex == 0) {
   2226c:	2800      	cmp	r0, #0
   2226e:	d0e0      	beq.n	22232 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   22270:	f04f 0340 	mov.w	r3, #64	; 0x40
   22274:	f3ef 8611 	mrs	r6, BASEPRI
   22278:	f383 8812 	msr	BASEPRI_MAX, r3
   2227c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22280:	4821      	ldr	r0, [pc, #132]	; (22308 <z_impl_k_mutex_lock+0x198>)
   22282:	f7ff ff21 	bl	220c8 <z_spin_lock_valid>
   22286:	b940      	cbnz	r0, 2229a <z_impl_k_mutex_lock+0x12a>
   22288:	4920      	ldr	r1, [pc, #128]	; (2230c <z_impl_k_mutex_lock+0x19c>)
   2228a:	481e      	ldr	r0, [pc, #120]	; (22304 <z_impl_k_mutex_lock+0x194>)
   2228c:	228e      	movs	r2, #142	; 0x8e
   2228e:	f006 fa79 	bl	28784 <assert_print>
   22292:	481e      	ldr	r0, [pc, #120]	; (2230c <z_impl_k_mutex_lock+0x19c>)
   22294:	218e      	movs	r1, #142	; 0x8e
   22296:	f006 fa6e 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   2229a:	481b      	ldr	r0, [pc, #108]	; (22308 <z_impl_k_mutex_lock+0x198>)
   2229c:	f7ff ff32 	bl	22104 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   222a0:	6823      	ldr	r3, [r4, #0]
   222a2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   222a4:	429c      	cmp	r4, r3
   222a6:	d00a      	beq.n	222be <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   222a8:	b14b      	cbz	r3, 222be <z_impl_k_mutex_lock+0x14e>
   222aa:	f993 300e 	ldrsb.w	r3, [r3, #14]
   222ae:	4299      	cmp	r1, r3
   222b0:	bfa8      	it	ge
   222b2:	4619      	movge	r1, r3
   222b4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   222b8:	4299      	cmp	r1, r3
   222ba:	bfb8      	it	lt
   222bc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   222be:	68a0      	ldr	r0, [r4, #8]
   222c0:	f009 fd56 	bl	2bd70 <adjust_owner_prio.isra.0>
   222c4:	b900      	cbnz	r0, 222c8 <z_impl_k_mutex_lock+0x158>
	if (resched) {
   222c6:	b145      	cbz	r5, 222da <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   222c8:	480f      	ldr	r0, [pc, #60]	; (22308 <z_impl_k_mutex_lock+0x198>)
   222ca:	4631      	mov	r1, r6
   222cc:	f000 fff6 	bl	232bc <z_reschedule>
	return -EAGAIN;
   222d0:	f06f 000a 	mvn.w	r0, #10
   222d4:	e7ad      	b.n	22232 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   222d6:	2500      	movs	r5, #0
   222d8:	e7c1      	b.n	2225e <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222da:	480b      	ldr	r0, [pc, #44]	; (22308 <z_impl_k_mutex_lock+0x198>)
   222dc:	f7ff ff02 	bl	220e4 <z_spin_unlock_valid>
   222e0:	b940      	cbnz	r0, 222f4 <z_impl_k_mutex_lock+0x184>
   222e2:	490a      	ldr	r1, [pc, #40]	; (2230c <z_impl_k_mutex_lock+0x19c>)
   222e4:	4807      	ldr	r0, [pc, #28]	; (22304 <z_impl_k_mutex_lock+0x194>)
   222e6:	22b9      	movs	r2, #185	; 0xb9
   222e8:	f006 fa4c 	bl	28784 <assert_print>
   222ec:	4807      	ldr	r0, [pc, #28]	; (2230c <z_impl_k_mutex_lock+0x19c>)
   222ee:	21b9      	movs	r1, #185	; 0xb9
   222f0:	f006 fa41 	bl	28776 <assert_post_action>
	__asm__ volatile(
   222f4:	f386 8811 	msr	BASEPRI, r6
   222f8:	f3bf 8f6f 	isb	sy
   222fc:	e7e8      	b.n	222d0 <z_impl_k_mutex_lock+0x160>
   222fe:	bf00      	nop
   22300:	0003055a 	.word	0x0003055a
   22304:	0002d509 	.word	0x0002d509
   22308:	20002bc8 	.word	0x20002bc8
   2230c:	0002d57d 	.word	0x0002d57d
   22310:	20002ba0 	.word	0x20002ba0

00022314 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   22314:	b538      	push	{r3, r4, r5, lr}
   22316:	4604      	mov	r4, r0
   22318:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2231c:	b143      	cbz	r3, 22330 <z_impl_k_mutex_unlock+0x1c>
   2231e:	4934      	ldr	r1, [pc, #208]	; (223f0 <z_impl_k_mutex_unlock+0xdc>)
   22320:	4834      	ldr	r0, [pc, #208]	; (223f4 <z_impl_k_mutex_unlock+0xe0>)
   22322:	22c7      	movs	r2, #199	; 0xc7
   22324:	f006 fa2e 	bl	28784 <assert_print>
   22328:	4831      	ldr	r0, [pc, #196]	; (223f0 <z_impl_k_mutex_unlock+0xdc>)
   2232a:	21c7      	movs	r1, #199	; 0xc7
   2232c:	f006 fa23 	bl	28776 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   22330:	68a3      	ldr	r3, [r4, #8]
   22332:	2b00      	cmp	r3, #0
   22334:	d055      	beq.n	223e2 <z_impl_k_mutex_unlock+0xce>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   22336:	4a30      	ldr	r2, [pc, #192]	; (223f8 <z_impl_k_mutex_unlock+0xe4>)
   22338:	6892      	ldr	r2, [r2, #8]
   2233a:	4293      	cmp	r3, r2
   2233c:	d154      	bne.n	223e8 <z_impl_k_mutex_unlock+0xd4>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2233e:	68e3      	ldr	r3, [r4, #12]
   22340:	b943      	cbnz	r3, 22354 <z_impl_k_mutex_unlock+0x40>
   22342:	492b      	ldr	r1, [pc, #172]	; (223f0 <z_impl_k_mutex_unlock+0xdc>)
   22344:	482b      	ldr	r0, [pc, #172]	; (223f4 <z_impl_k_mutex_unlock+0xe0>)
   22346:	22df      	movs	r2, #223	; 0xdf
   22348:	f006 fa1c 	bl	28784 <assert_print>
   2234c:	4828      	ldr	r0, [pc, #160]	; (223f0 <z_impl_k_mutex_unlock+0xdc>)
   2234e:	21df      	movs	r1, #223	; 0xdf
   22350:	f006 fa11 	bl	28776 <assert_post_action>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   22354:	68e3      	ldr	r3, [r4, #12]
   22356:	2b01      	cmp	r3, #1
   22358:	d903      	bls.n	22362 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count--;
   2235a:	3b01      	subs	r3, #1
   2235c:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2235e:	2000      	movs	r0, #0
}
   22360:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   22362:	f04f 0340 	mov.w	r3, #64	; 0x40
   22366:	f3ef 8511 	mrs	r5, BASEPRI
   2236a:	f383 8812 	msr	BASEPRI_MAX, r3
   2236e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22372:	4822      	ldr	r0, [pc, #136]	; (223fc <z_impl_k_mutex_unlock+0xe8>)
   22374:	f7ff fea8 	bl	220c8 <z_spin_lock_valid>
   22378:	b940      	cbnz	r0, 2238c <z_impl_k_mutex_unlock+0x78>
   2237a:	4921      	ldr	r1, [pc, #132]	; (22400 <z_impl_k_mutex_unlock+0xec>)
   2237c:	481d      	ldr	r0, [pc, #116]	; (223f4 <z_impl_k_mutex_unlock+0xe0>)
   2237e:	228e      	movs	r2, #142	; 0x8e
   22380:	f006 fa00 	bl	28784 <assert_print>
   22384:	481e      	ldr	r0, [pc, #120]	; (22400 <z_impl_k_mutex_unlock+0xec>)
   22386:	218e      	movs	r1, #142	; 0x8e
   22388:	f006 f9f5 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   2238c:	481b      	ldr	r0, [pc, #108]	; (223fc <z_impl_k_mutex_unlock+0xe8>)
   2238e:	f7ff feb9 	bl	22104 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   22392:	6921      	ldr	r1, [r4, #16]
   22394:	68a0      	ldr	r0, [r4, #8]
   22396:	f009 fceb 	bl	2bd70 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2239a:	4620      	mov	r0, r4
   2239c:	f001 fcb8 	bl	23d10 <z_unpend_first_thread>
	mutex->owner = new_owner;
   223a0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   223a2:	b158      	cbz	r0, 223bc <z_impl_k_mutex_unlock+0xa8>
		mutex->owner_orig_prio = new_owner->base.prio;
   223a4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   223a8:	6122      	str	r2, [r4, #16]
   223aa:	2400      	movs	r4, #0
   223ac:	67c4      	str	r4, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   223ae:	f001 f9b5 	bl	2371c <z_ready_thread>
		z_reschedule(&lock, key);
   223b2:	4812      	ldr	r0, [pc, #72]	; (223fc <z_impl_k_mutex_unlock+0xe8>)
   223b4:	4629      	mov	r1, r5
   223b6:	f000 ff81 	bl	232bc <z_reschedule>
   223ba:	e7d0      	b.n	2235e <z_impl_k_mutex_unlock+0x4a>
		mutex->lock_count = 0U;
   223bc:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223be:	480f      	ldr	r0, [pc, #60]	; (223fc <z_impl_k_mutex_unlock+0xe8>)
   223c0:	f7ff fe90 	bl	220e4 <z_spin_unlock_valid>
   223c4:	b940      	cbnz	r0, 223d8 <z_impl_k_mutex_unlock+0xc4>
   223c6:	490e      	ldr	r1, [pc, #56]	; (22400 <z_impl_k_mutex_unlock+0xec>)
   223c8:	480a      	ldr	r0, [pc, #40]	; (223f4 <z_impl_k_mutex_unlock+0xe0>)
   223ca:	22b9      	movs	r2, #185	; 0xb9
   223cc:	f006 f9da 	bl	28784 <assert_print>
   223d0:	480b      	ldr	r0, [pc, #44]	; (22400 <z_impl_k_mutex_unlock+0xec>)
   223d2:	21b9      	movs	r1, #185	; 0xb9
   223d4:	f006 f9cf 	bl	28776 <assert_post_action>
	__asm__ volatile(
   223d8:	f385 8811 	msr	BASEPRI, r5
   223dc:	f3bf 8f6f 	isb	sy
   223e0:	e7bd      	b.n	2235e <z_impl_k_mutex_unlock+0x4a>
		return -EINVAL;
   223e2:	f06f 0015 	mvn.w	r0, #21
   223e6:	e7bb      	b.n	22360 <z_impl_k_mutex_unlock+0x4c>
		return -EPERM;
   223e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   223ec:	e7b8      	b.n	22360 <z_impl_k_mutex_unlock+0x4c>
   223ee:	bf00      	nop
   223f0:	0003055a 	.word	0x0003055a
   223f4:	0002d509 	.word	0x0002d509
   223f8:	20002ba0 	.word	0x20002ba0
   223fc:	20002bc8 	.word	0x20002bc8
   22400:	0002d57d 	.word	0x0002d57d

00022404 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   22404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22408:	4604      	mov	r4, r0
   2240a:	f89d a020 	ldrb.w	sl, [sp, #32]
   2240e:	460d      	mov	r5, r1
   22410:	4690      	mov	r8, r2
   22412:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22414:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   22418:	f04f 0340 	mov.w	r3, #64	; 0x40
   2241c:	f3ef 8711 	mrs	r7, BASEPRI
   22420:	f383 8812 	msr	BASEPRI_MAX, r3
   22424:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22428:	4630      	mov	r0, r6
   2242a:	f7ff fe4d 	bl	220c8 <z_spin_lock_valid>
   2242e:	b940      	cbnz	r0, 22442 <queue_insert+0x3e>
   22430:	4936      	ldr	r1, [pc, #216]	; (2250c <queue_insert+0x108>)
   22432:	4837      	ldr	r0, [pc, #220]	; (22510 <queue_insert+0x10c>)
   22434:	228e      	movs	r2, #142	; 0x8e
   22436:	f006 f9a5 	bl	28784 <assert_print>
   2243a:	4834      	ldr	r0, [pc, #208]	; (2250c <queue_insert+0x108>)
   2243c:	218e      	movs	r1, #142	; 0x8e
   2243e:	f006 f99a 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   22442:	4630      	mov	r0, r6
   22444:	f7ff fe5e 	bl	22104 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   22448:	f1ba 0f00 	cmp.w	sl, #0
   2244c:	d000      	beq.n	22450 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   2244e:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   22450:	f104 000c 	add.w	r0, r4, #12
   22454:	f001 fc5c 	bl	23d10 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   22458:	b158      	cbz	r0, 22472 <queue_insert+0x6e>
   2245a:	2400      	movs	r4, #0
   2245c:	67c4      	str	r4, [r0, #124]	; 0x7c
   2245e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   22462:	f001 f95b 	bl	2371c <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   22466:	4630      	mov	r0, r6
   22468:	4639      	mov	r1, r7
   2246a:	f000 ff27 	bl	232bc <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   2246e:	2000      	movs	r0, #0
   22470:	e019      	b.n	224a6 <queue_insert+0xa2>
	if (alloc) {
   22472:	f1b9 0f00 	cmp.w	r9, #0
   22476:	d028      	beq.n	224ca <queue_insert+0xc6>
	return z_thread_aligned_alloc(0, size);
   22478:	2108      	movs	r1, #8
   2247a:	f002 fd71 	bl	24f60 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2247e:	b9a0      	cbnz	r0, 224aa <queue_insert+0xa6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22480:	4630      	mov	r0, r6
   22482:	f7ff fe2f 	bl	220e4 <z_spin_unlock_valid>
   22486:	b940      	cbnz	r0, 2249a <queue_insert+0x96>
   22488:	4920      	ldr	r1, [pc, #128]	; (2250c <queue_insert+0x108>)
   2248a:	4821      	ldr	r0, [pc, #132]	; (22510 <queue_insert+0x10c>)
   2248c:	22b9      	movs	r2, #185	; 0xb9
   2248e:	f006 f979 	bl	28784 <assert_print>
   22492:	481e      	ldr	r0, [pc, #120]	; (2250c <queue_insert+0x108>)
   22494:	21b9      	movs	r1, #185	; 0xb9
   22496:	f006 f96e 	bl	28776 <assert_post_action>
	__asm__ volatile(
   2249a:	f387 8811 	msr	BASEPRI, r7
   2249e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   224a2:	f06f 000b 	mvn.w	r0, #11
}
   224a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   224aa:	2301      	movs	r3, #1
		anode->data = data;
   224ac:	f8c0 8004 	str.w	r8, [r0, #4]
   224b0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   224b2:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   224b4:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   224b8:	b95d      	cbnz	r5, 224d2 <queue_insert+0xce>
	parent->next_and_flags = cur_flags | (unative_t)child;
   224ba:	6823      	ldr	r3, [r4, #0]
   224bc:	4313      	orrs	r3, r2
   224be:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   224c0:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   224c2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   224c4:	b973      	cbnz	r3, 224e4 <queue_insert+0xe0>
	list->tail = node;
   224c6:	6060      	str	r0, [r4, #4]
}
   224c8:	e00c      	b.n	224e4 <queue_insert+0xe0>
	node->next_and_flags = flags;
   224ca:	f8c8 9000 	str.w	r9, [r8]
}
   224ce:	4640      	mov	r0, r8
   224d0:	e7ef      	b.n	224b2 <queue_insert+0xae>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   224d2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   224d4:	f033 0303 	bics.w	r3, r3, #3
   224d8:	d110      	bne.n	224fc <queue_insert+0xf8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   224da:	6002      	str	r2, [r0, #0]
	return list->tail;
   224dc:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   224de:	b93a      	cbnz	r2, 224f0 <queue_insert+0xec>
	list->head = node;
   224e0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   224e4:	2104      	movs	r1, #4
   224e6:	f104 0014 	add.w	r0, r4, #20
   224ea:	f009 fe02 	bl	2c0f2 <z_handle_obj_poll_events>
   224ee:	e7ba      	b.n	22466 <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   224f0:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   224f2:	f003 0303 	and.w	r3, r3, #3
   224f6:	4303      	orrs	r3, r0
   224f8:	6013      	str	r3, [r2, #0]
   224fa:	e7e4      	b.n	224c6 <queue_insert+0xc2>
   224fc:	4313      	orrs	r3, r2
   224fe:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22500:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22502:	f003 0303 	and.w	r3, r3, #3
   22506:	4303      	orrs	r3, r0
   22508:	602b      	str	r3, [r5, #0]
}
   2250a:	e7eb      	b.n	224e4 <queue_insert+0xe0>
   2250c:	0002d57d 	.word	0x0002d57d
   22510:	0002d509 	.word	0x0002d509

00022514 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   22514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22518:	4605      	mov	r5, r0
   2251a:	4616      	mov	r6, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   2251c:	460c      	mov	r4, r1
   2251e:	2900      	cmp	r1, #0
   22520:	d045      	beq.n	225ae <k_queue_append_list+0x9a>
   22522:	2a00      	cmp	r2, #0
   22524:	d043      	beq.n	225ae <k_queue_append_list+0x9a>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22526:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2252a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2252e:	f3ef 8911 	mrs	r9, BASEPRI
   22532:	f383 8812 	msr	BASEPRI_MAX, r3
   22536:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2253a:	4638      	mov	r0, r7
   2253c:	f7ff fdc4 	bl	220c8 <z_spin_lock_valid>
   22540:	b940      	cbnz	r0, 22554 <k_queue_append_list+0x40>
   22542:	491c      	ldr	r1, [pc, #112]	; (225b4 <k_queue_append_list+0xa0>)
   22544:	481c      	ldr	r0, [pc, #112]	; (225b8 <k_queue_append_list+0xa4>)
   22546:	228e      	movs	r2, #142	; 0x8e
   22548:	f006 f91c 	bl	28784 <assert_print>
   2254c:	4819      	ldr	r0, [pc, #100]	; (225b4 <k_queue_append_list+0xa0>)
   2254e:	218e      	movs	r1, #142	; 0x8e
   22550:	f006 f911 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   22554:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   22556:	f105 080c 	add.w	r8, r5, #12
   2255a:	f7ff fdd3 	bl	22104 <z_spin_lock_set_owner>
   2255e:	4640      	mov	r0, r8
   22560:	f001 fbd6 	bl	23d10 <z_unpend_first_thread>
   22564:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   22568:	b920      	cbnz	r0, 22574 <k_queue_append_list+0x60>
	return list->tail;
   2256a:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2256c:	b9ca      	cbnz	r2, 225a2 <k_queue_append_list+0x8e>
	list->head = node;
   2256e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22570:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22572:	e00a      	b.n	2258a <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   22574:	6144      	str	r4, [r0, #20]
   22576:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2257a:	f001 f8cf 	bl	2371c <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   2257e:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   22580:	4640      	mov	r0, r8
   22582:	f001 fbc5 	bl	23d10 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   22586:	2c00      	cmp	r4, #0
   22588:	d1ee      	bne.n	22568 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2258a:	2104      	movs	r1, #4
   2258c:	f105 0014 	add.w	r0, r5, #20
   22590:	f009 fdaf 	bl	2c0f2 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   22594:	4638      	mov	r0, r7
   22596:	4649      	mov	r1, r9
   22598:	f000 fe90 	bl	232bc <z_reschedule>
	return 0;
   2259c:	2000      	movs	r0, #0
}
   2259e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   225a2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   225a4:	f003 0303 	and.w	r3, r3, #3
   225a8:	431c      	orrs	r4, r3
   225aa:	6014      	str	r4, [r2, #0]
}
   225ac:	e7e0      	b.n	22570 <k_queue_append_list+0x5c>
		return -EINVAL;
   225ae:	f06f 0015 	mvn.w	r0, #21
   225b2:	e7f4      	b.n	2259e <k_queue_append_list+0x8a>
   225b4:	0002d57d 	.word	0x0002d57d
   225b8:	0002d509 	.word	0x0002d509

000225bc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   225bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   225c0:	4605      	mov	r5, r0
   225c2:	4690      	mov	r8, r2
   225c4:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   225c6:	f100 0608 	add.w	r6, r0, #8
   225ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   225ce:	f3ef 8911 	mrs	r9, BASEPRI
   225d2:	f383 8812 	msr	BASEPRI_MAX, r3
   225d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225da:	4630      	mov	r0, r6
   225dc:	f7ff fd74 	bl	220c8 <z_spin_lock_valid>
   225e0:	b940      	cbnz	r0, 225f4 <z_impl_k_queue_get+0x38>
   225e2:	4920      	ldr	r1, [pc, #128]	; (22664 <z_impl_k_queue_get+0xa8>)
   225e4:	4820      	ldr	r0, [pc, #128]	; (22668 <z_impl_k_queue_get+0xac>)
   225e6:	228e      	movs	r2, #142	; 0x8e
   225e8:	f006 f8cc 	bl	28784 <assert_print>
   225ec:	481d      	ldr	r0, [pc, #116]	; (22664 <z_impl_k_queue_get+0xa8>)
   225ee:	218e      	movs	r1, #142	; 0x8e
   225f0:	f006 f8c1 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   225f4:	4630      	mov	r0, r6
   225f6:	f7ff fd85 	bl	22104 <z_spin_lock_set_owner>
	return list->head;
   225fa:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   225fc:	b30c      	cbz	r4, 22642 <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   225fe:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   22600:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22602:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   22606:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   22608:	4620      	mov	r0, r4
	list->head = node;
   2260a:	602b      	str	r3, [r5, #0]
	list->tail = node;
   2260c:	bf08      	it	eq
   2260e:	606b      	streq	r3, [r5, #4]
   22610:	2101      	movs	r1, #1
   22612:	f009 fbbc 	bl	2bd8e <z_queue_node_peek>
   22616:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22618:	4630      	mov	r0, r6
   2261a:	f7ff fd63 	bl	220e4 <z_spin_unlock_valid>
   2261e:	b940      	cbnz	r0, 22632 <z_impl_k_queue_get+0x76>
   22620:	4910      	ldr	r1, [pc, #64]	; (22664 <z_impl_k_queue_get+0xa8>)
   22622:	4811      	ldr	r0, [pc, #68]	; (22668 <z_impl_k_queue_get+0xac>)
   22624:	22b9      	movs	r2, #185	; 0xb9
   22626:	f006 f8ad 	bl	28784 <assert_print>
   2262a:	480e      	ldr	r0, [pc, #56]	; (22664 <z_impl_k_queue_get+0xa8>)
   2262c:	21b9      	movs	r1, #185	; 0xb9
   2262e:	f006 f8a2 	bl	28776 <assert_post_action>
	__asm__ volatile(
   22632:	f389 8811 	msr	BASEPRI, r9
   22636:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2263a:	4620      	mov	r0, r4
   2263c:	b003      	add	sp, #12
   2263e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22642:	ea58 0307 	orrs.w	r3, r8, r7
   22646:	d0e7      	beq.n	22618 <z_impl_k_queue_get+0x5c>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   22648:	e9cd 8700 	strd	r8, r7, [sp]
   2264c:	f105 020c 	add.w	r2, r5, #12
   22650:	4649      	mov	r1, r9
   22652:	4630      	mov	r0, r6
   22654:	f001 f9c6 	bl	239e4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   22658:	2800      	cmp	r0, #0
   2265a:	d1ee      	bne.n	2263a <z_impl_k_queue_get+0x7e>
   2265c:	4b03      	ldr	r3, [pc, #12]	; (2266c <z_impl_k_queue_get+0xb0>)
   2265e:	689b      	ldr	r3, [r3, #8]
   22660:	695c      	ldr	r4, [r3, #20]
   22662:	e7ea      	b.n	2263a <z_impl_k_queue_get+0x7e>
   22664:	0002d57d 	.word	0x0002d57d
   22668:	0002d509 	.word	0x0002d509
   2266c:	20002ba0 	.word	0x20002ba0

00022670 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   22670:	b538      	push	{r3, r4, r5, lr}
   22672:	4604      	mov	r4, r0
	__asm__ volatile(
   22674:	f04f 0340 	mov.w	r3, #64	; 0x40
   22678:	f3ef 8511 	mrs	r5, BASEPRI
   2267c:	f383 8812 	msr	BASEPRI_MAX, r3
   22680:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22684:	4814      	ldr	r0, [pc, #80]	; (226d8 <z_impl_k_sem_give+0x68>)
   22686:	f7ff fd1f 	bl	220c8 <z_spin_lock_valid>
   2268a:	b940      	cbnz	r0, 2269e <z_impl_k_sem_give+0x2e>
   2268c:	4913      	ldr	r1, [pc, #76]	; (226dc <z_impl_k_sem_give+0x6c>)
   2268e:	4814      	ldr	r0, [pc, #80]	; (226e0 <z_impl_k_sem_give+0x70>)
   22690:	228e      	movs	r2, #142	; 0x8e
   22692:	f006 f877 	bl	28784 <assert_print>
   22696:	4811      	ldr	r0, [pc, #68]	; (226dc <z_impl_k_sem_give+0x6c>)
   22698:	218e      	movs	r1, #142	; 0x8e
   2269a:	f006 f86c 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   2269e:	480e      	ldr	r0, [pc, #56]	; (226d8 <z_impl_k_sem_give+0x68>)
   226a0:	f7ff fd30 	bl	22104 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   226a4:	4620      	mov	r0, r4
   226a6:	f001 fb33 	bl	23d10 <z_unpend_first_thread>

	if (thread != NULL) {
   226aa:	b148      	cbz	r0, 226c0 <z_impl_k_sem_give+0x50>
   226ac:	2200      	movs	r2, #0
   226ae:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   226b0:	f001 f834 	bl	2371c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   226b4:	4629      	mov	r1, r5
   226b6:	4808      	ldr	r0, [pc, #32]	; (226d8 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   226b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   226bc:	f000 bdfe 	b.w	232bc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   226c0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   226c4:	429a      	cmp	r2, r3
   226c6:	bf18      	it	ne
   226c8:	3301      	addne	r3, #1
   226ca:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   226cc:	2102      	movs	r1, #2
   226ce:	f104 0010 	add.w	r0, r4, #16
   226d2:	f009 fd0e 	bl	2c0f2 <z_handle_obj_poll_events>
}
   226d6:	e7ed      	b.n	226b4 <z_impl_k_sem_give+0x44>
   226d8:	20002bcc 	.word	0x20002bcc
   226dc:	0002d57d 	.word	0x0002d57d
   226e0:	0002d509 	.word	0x0002d509

000226e4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   226e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   226e6:	4604      	mov	r4, r0
   226e8:	4616      	mov	r6, r2
   226ea:	461d      	mov	r5, r3
   226ec:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   226f0:	b15b      	cbz	r3, 2270a <z_impl_k_sem_take+0x26>
   226f2:	ea52 0305 	orrs.w	r3, r2, r5
   226f6:	d008      	beq.n	2270a <z_impl_k_sem_take+0x26>
   226f8:	492b      	ldr	r1, [pc, #172]	; (227a8 <z_impl_k_sem_take+0xc4>)
   226fa:	482c      	ldr	r0, [pc, #176]	; (227ac <z_impl_k_sem_take+0xc8>)
   226fc:	2279      	movs	r2, #121	; 0x79
   226fe:	f006 f841 	bl	28784 <assert_print>
   22702:	4829      	ldr	r0, [pc, #164]	; (227a8 <z_impl_k_sem_take+0xc4>)
   22704:	2179      	movs	r1, #121	; 0x79
   22706:	f006 f836 	bl	28776 <assert_post_action>
   2270a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2270e:	f3ef 8711 	mrs	r7, BASEPRI
   22712:	f383 8812 	msr	BASEPRI_MAX, r3
   22716:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2271a:	4825      	ldr	r0, [pc, #148]	; (227b0 <z_impl_k_sem_take+0xcc>)
   2271c:	f7ff fcd4 	bl	220c8 <z_spin_lock_valid>
   22720:	b940      	cbnz	r0, 22734 <z_impl_k_sem_take+0x50>
   22722:	4924      	ldr	r1, [pc, #144]	; (227b4 <z_impl_k_sem_take+0xd0>)
   22724:	4821      	ldr	r0, [pc, #132]	; (227ac <z_impl_k_sem_take+0xc8>)
   22726:	228e      	movs	r2, #142	; 0x8e
   22728:	f006 f82c 	bl	28784 <assert_print>
   2272c:	4821      	ldr	r0, [pc, #132]	; (227b4 <z_impl_k_sem_take+0xd0>)
   2272e:	218e      	movs	r1, #142	; 0x8e
   22730:	f006 f821 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   22734:	481e      	ldr	r0, [pc, #120]	; (227b0 <z_impl_k_sem_take+0xcc>)
   22736:	f7ff fce5 	bl	22104 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2273a:	68a3      	ldr	r3, [r4, #8]
   2273c:	b1ab      	cbz	r3, 2276a <z_impl_k_sem_take+0x86>
		sem->count--;
   2273e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22740:	481b      	ldr	r0, [pc, #108]	; (227b0 <z_impl_k_sem_take+0xcc>)
   22742:	60a3      	str	r3, [r4, #8]
   22744:	f7ff fcce 	bl	220e4 <z_spin_unlock_valid>
   22748:	b940      	cbnz	r0, 2275c <z_impl_k_sem_take+0x78>
   2274a:	491a      	ldr	r1, [pc, #104]	; (227b4 <z_impl_k_sem_take+0xd0>)
   2274c:	4817      	ldr	r0, [pc, #92]	; (227ac <z_impl_k_sem_take+0xc8>)
   2274e:	22b9      	movs	r2, #185	; 0xb9
   22750:	f006 f818 	bl	28784 <assert_print>
   22754:	4817      	ldr	r0, [pc, #92]	; (227b4 <z_impl_k_sem_take+0xd0>)
   22756:	21b9      	movs	r1, #185	; 0xb9
   22758:	f006 f80d 	bl	28776 <assert_post_action>
	__asm__ volatile(
   2275c:	f387 8811 	msr	BASEPRI, r7
   22760:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   22764:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   22766:	b003      	add	sp, #12
   22768:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2276a:	ea56 0305 	orrs.w	r3, r6, r5
   2276e:	d113      	bne.n	22798 <z_impl_k_sem_take+0xb4>
   22770:	480f      	ldr	r0, [pc, #60]	; (227b0 <z_impl_k_sem_take+0xcc>)
   22772:	f7ff fcb7 	bl	220e4 <z_spin_unlock_valid>
   22776:	b940      	cbnz	r0, 2278a <z_impl_k_sem_take+0xa6>
   22778:	490e      	ldr	r1, [pc, #56]	; (227b4 <z_impl_k_sem_take+0xd0>)
   2277a:	480c      	ldr	r0, [pc, #48]	; (227ac <z_impl_k_sem_take+0xc8>)
   2277c:	22b9      	movs	r2, #185	; 0xb9
   2277e:	f006 f801 	bl	28784 <assert_print>
   22782:	480c      	ldr	r0, [pc, #48]	; (227b4 <z_impl_k_sem_take+0xd0>)
   22784:	21b9      	movs	r1, #185	; 0xb9
   22786:	f005 fff6 	bl	28776 <assert_post_action>
   2278a:	f387 8811 	msr	BASEPRI, r7
   2278e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   22792:	f06f 000f 	mvn.w	r0, #15
   22796:	e7e6      	b.n	22766 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   22798:	e9cd 6500 	strd	r6, r5, [sp]
   2279c:	4622      	mov	r2, r4
   2279e:	4639      	mov	r1, r7
   227a0:	4803      	ldr	r0, [pc, #12]	; (227b0 <z_impl_k_sem_take+0xcc>)
   227a2:	f001 f91f 	bl	239e4 <z_pend_curr>
	return ret;
   227a6:	e7de      	b.n	22766 <z_impl_k_sem_take+0x82>
   227a8:	0003057c 	.word	0x0003057c
   227ac:	0002d509 	.word	0x0002d509
   227b0:	20002bcc 	.word	0x20002bcc
   227b4:	0002d57d 	.word	0x0002d57d

000227b8 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   227b8:	b570      	push	{r4, r5, r6, lr}
   227ba:	4604      	mov	r4, r0
	__asm__ volatile(
   227bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   227c0:	f3ef 8511 	mrs	r5, BASEPRI
   227c4:	f383 8812 	msr	BASEPRI_MAX, r3
   227c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227cc:	4812      	ldr	r0, [pc, #72]	; (22818 <z_impl_k_sem_reset+0x60>)
   227ce:	f7ff fc7b 	bl	220c8 <z_spin_lock_valid>
   227d2:	b940      	cbnz	r0, 227e6 <z_impl_k_sem_reset+0x2e>
   227d4:	4911      	ldr	r1, [pc, #68]	; (2281c <z_impl_k_sem_reset+0x64>)
   227d6:	4812      	ldr	r0, [pc, #72]	; (22820 <z_impl_k_sem_reset+0x68>)
   227d8:	228e      	movs	r2, #142	; 0x8e
   227da:	f005 ffd3 	bl	28784 <assert_print>
   227de:	480f      	ldr	r0, [pc, #60]	; (2281c <z_impl_k_sem_reset+0x64>)
   227e0:	218e      	movs	r1, #142	; 0x8e
   227e2:	f005 ffc8 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   227e6:	480c      	ldr	r0, [pc, #48]	; (22818 <z_impl_k_sem_reset+0x60>)
   227e8:	f7ff fc8c 	bl	22104 <z_spin_lock_set_owner>
   227ec:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   227f0:	4620      	mov	r0, r4
   227f2:	f001 fa8d 	bl	23d10 <z_unpend_first_thread>
		if (thread == NULL) {
   227f6:	b118      	cbz	r0, 22800 <z_impl_k_sem_reset+0x48>
   227f8:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   227fa:	f000 ff8f 	bl	2371c <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   227fe:	e7f7      	b.n	227f0 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   22800:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22802:	2102      	movs	r1, #2
   22804:	f104 0010 	add.w	r0, r4, #16
   22808:	f009 fc73 	bl	2c0f2 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   2280c:	4629      	mov	r1, r5
   2280e:	4802      	ldr	r0, [pc, #8]	; (22818 <z_impl_k_sem_reset+0x60>)
}
   22810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   22814:	f000 bd52 	b.w	232bc <z_reschedule>
   22818:	20002bcc 	.word	0x20002bcc
   2281c:	0002d57d 	.word	0x0002d57d
   22820:	0002d509 	.word	0x0002d509

00022824 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   22824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   22826:	4b09      	ldr	r3, [pc, #36]	; (2284c <k_sys_work_q_init+0x28>)
   22828:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2282a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   2282c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   2282e:	9300      	str	r3, [sp, #0]
   22830:	4907      	ldr	r1, [pc, #28]	; (22850 <k_sys_work_q_init+0x2c>)
   22832:	4808      	ldr	r0, [pc, #32]	; (22854 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   22834:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   22838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2283c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   22840:	f000 fa76 	bl	22d30 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   22844:	4620      	mov	r0, r4
   22846:	b004      	add	sp, #16
   22848:	bd10      	pop	{r4, pc}
   2284a:	bf00      	nop
   2284c:	0003059c 	.word	0x0003059c
   22850:	20007300 	.word	0x20007300
   22854:	20002098 	.word	0x20002098

00022858 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   22858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2285c:	4e70      	ldr	r6, [pc, #448]	; (22a20 <work_queue_main+0x1c8>)
	return list->head;
   2285e:	4f71      	ldr	r7, [pc, #452]	; (22a24 <work_queue_main+0x1cc>)
   22860:	b085      	sub	sp, #20
   22862:	4604      	mov	r4, r0
   22864:	f04f 0340 	mov.w	r3, #64	; 0x40
   22868:	f3ef 8811 	mrs	r8, BASEPRI
   2286c:	f383 8812 	msr	BASEPRI_MAX, r3
   22870:	f3bf 8f6f 	isb	sy
   22874:	4630      	mov	r0, r6
   22876:	f7ff fc27 	bl	220c8 <z_spin_lock_valid>
   2287a:	b940      	cbnz	r0, 2288e <work_queue_main+0x36>
   2287c:	496a      	ldr	r1, [pc, #424]	; (22a28 <work_queue_main+0x1d0>)
   2287e:	486b      	ldr	r0, [pc, #428]	; (22a2c <work_queue_main+0x1d4>)
   22880:	228e      	movs	r2, #142	; 0x8e
   22882:	f005 ff7f 	bl	28784 <assert_print>
   22886:	4868      	ldr	r0, [pc, #416]	; (22a28 <work_queue_main+0x1d0>)
   22888:	218e      	movs	r1, #142	; 0x8e
   2288a:	f005 ff74 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   2288e:	4630      	mov	r0, r6
   22890:	f7ff fc38 	bl	22104 <z_spin_lock_set_owner>
   22894:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   22898:	b9b5      	cbnz	r5, 228c8 <work_queue_main+0x70>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   2289a:	2102      	movs	r1, #2
   2289c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   228a0:	f009 fab3 	bl	2be0a <flag_test_and_clear>
   228a4:	2800      	cmp	r0, #0
   228a6:	f040 8084 	bne.w	229b2 <work_queue_main+0x15a>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   228aa:	2300      	movs	r3, #0
   228ac:	9302      	str	r3, [sp, #8]
   228ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   228b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   228b6:	e9cd 2300 	strd	r2, r3, [sp]
   228ba:	4641      	mov	r1, r8
   228bc:	f104 0288 	add.w	r2, r4, #136	; 0x88
   228c0:	4630      	mov	r0, r6
   228c2:	f001 fcb3 	bl	2422c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   228c6:	e7cd      	b.n	22864 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   228c8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   228cc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   228ce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   228d2:	4295      	cmp	r5, r2
   228d4:	d101      	bne.n	228da <work_queue_main+0x82>
	list->tail = node;
   228d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   228da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
			handler = work->handler;
   228de:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp |= BIT(bit);
   228e2:	f043 0302 	orr.w	r3, r3, #2
   228e6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   228ea:	68eb      	ldr	r3, [r5, #12]
   228ec:	f023 0304 	bic.w	r3, r3, #4
   228f0:	f043 0301 	orr.w	r3, r3, #1
   228f4:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228f6:	4630      	mov	r0, r6
   228f8:	f7ff fbf4 	bl	220e4 <z_spin_unlock_valid>
   228fc:	b940      	cbnz	r0, 22910 <work_queue_main+0xb8>
   228fe:	494a      	ldr	r1, [pc, #296]	; (22a28 <work_queue_main+0x1d0>)
   22900:	484a      	ldr	r0, [pc, #296]	; (22a2c <work_queue_main+0x1d4>)
   22902:	22b9      	movs	r2, #185	; 0xb9
   22904:	f005 ff3e 	bl	28784 <assert_print>
   22908:	4847      	ldr	r0, [pc, #284]	; (22a28 <work_queue_main+0x1d0>)
   2290a:	21b9      	movs	r1, #185	; 0xb9
   2290c:	f005 ff33 	bl	28776 <assert_post_action>
	__asm__ volatile(
   22910:	f388 8811 	msr	BASEPRI, r8
   22914:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   22918:	f1b9 0f00 	cmp.w	r9, #0
   2291c:	d10a      	bne.n	22934 <work_queue_main+0xdc>
   2291e:	4944      	ldr	r1, [pc, #272]	; (22a30 <work_queue_main+0x1d8>)
   22920:	4842      	ldr	r0, [pc, #264]	; (22a2c <work_queue_main+0x1d4>)
   22922:	f240 229b 	movw	r2, #667	; 0x29b
   22926:	f005 ff2d 	bl	28784 <assert_print>
   2292a:	4841      	ldr	r0, [pc, #260]	; (22a30 <work_queue_main+0x1d8>)
   2292c:	f240 219b 	movw	r1, #667	; 0x29b
   22930:	f005 ff21 	bl	28776 <assert_post_action>
		handler(work);
   22934:	4628      	mov	r0, r5
   22936:	47c8      	blx	r9
	__asm__ volatile(
   22938:	f04f 0340 	mov.w	r3, #64	; 0x40
   2293c:	f3ef 8a11 	mrs	sl, BASEPRI
   22940:	f383 8812 	msr	BASEPRI_MAX, r3
   22944:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22948:	4630      	mov	r0, r6
   2294a:	f7ff fbbd 	bl	220c8 <z_spin_lock_valid>
   2294e:	b940      	cbnz	r0, 22962 <work_queue_main+0x10a>
   22950:	4935      	ldr	r1, [pc, #212]	; (22a28 <work_queue_main+0x1d0>)
   22952:	4836      	ldr	r0, [pc, #216]	; (22a2c <work_queue_main+0x1d4>)
   22954:	228e      	movs	r2, #142	; 0x8e
   22956:	f005 ff15 	bl	28784 <assert_print>
   2295a:	4833      	ldr	r0, [pc, #204]	; (22a28 <work_queue_main+0x1d0>)
   2295c:	218e      	movs	r1, #142	; 0x8e
   2295e:	f005 ff0a 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   22962:	4630      	mov	r0, r6
   22964:	f7ff fbce 	bl	22104 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   22968:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2296a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2296c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22970:	d429      	bmi.n	229c6 <work_queue_main+0x16e>
	*flagp &= ~BIT(bit);
   22972:	60ea      	str	r2, [r5, #12]
   22974:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   22978:	f023 0302 	bic.w	r3, r3, #2
   2297c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22980:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   22982:	f3c3 2500 	ubfx	r5, r3, #8, #1
   22986:	f7ff fbad 	bl	220e4 <z_spin_unlock_valid>
   2298a:	b940      	cbnz	r0, 2299e <work_queue_main+0x146>
   2298c:	4926      	ldr	r1, [pc, #152]	; (22a28 <work_queue_main+0x1d0>)
   2298e:	4827      	ldr	r0, [pc, #156]	; (22a2c <work_queue_main+0x1d4>)
   22990:	22b9      	movs	r2, #185	; 0xb9
   22992:	f005 fef7 	bl	28784 <assert_print>
   22996:	4824      	ldr	r0, [pc, #144]	; (22a28 <work_queue_main+0x1d0>)
   22998:	21b9      	movs	r1, #185	; 0xb9
   2299a:	f005 feec 	bl	28776 <assert_post_action>
	__asm__ volatile(
   2299e:	f38a 8811 	msr	BASEPRI, sl
   229a2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   229a6:	2d00      	cmp	r5, #0
   229a8:	f47f af5c 	bne.w	22864 <work_queue_main+0xc>
	z_impl_k_yield();
   229ac:	f001 f9fa 	bl	23da4 <z_impl_k_yield>
}
   229b0:	e758      	b.n	22864 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   229b2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   229b6:	2200      	movs	r2, #0
   229b8:	2101      	movs	r1, #1
   229ba:	4628      	mov	r0, r5
   229bc:	f001 fbf0 	bl	241a0 <z_sched_wake>
   229c0:	2800      	cmp	r0, #0
   229c2:	d1f8      	bne.n	229b6 <work_queue_main+0x15e>
   229c4:	e771      	b.n	228aa <work_queue_main+0x52>
	return list->head;
   229c6:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   229c8:	f023 0303 	bic.w	r3, r3, #3
   229cc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   229ce:	2800      	cmp	r0, #0
   229d0:	d0d0      	beq.n	22974 <work_queue_main+0x11c>
	return node->next;
   229d2:	f04f 0800 	mov.w	r8, #0
   229d6:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   229da:	46c3      	mov	fp, r8
		if (wc->work == work) {
   229dc:	6843      	ldr	r3, [r0, #4]
   229de:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   229e0:	4602      	mov	r2, r0
		if (wc->work == work) {
   229e2:	d10d      	bne.n	22a00 <work_queue_main+0x1a8>
	return node->next;
   229e4:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   229e6:	f1b8 0f00 	cmp.w	r8, #0
   229ea:	d111      	bne.n	22a10 <work_queue_main+0x1b8>
   229ec:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   229ee:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   229f0:	4283      	cmp	r3, r0
   229f2:	d100      	bne.n	229f6 <work_queue_main+0x19e>
	list->tail = node;
   229f4:	607a      	str	r2, [r7, #4]
	parent->next = child;
   229f6:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   229fa:	f7ff fe39 	bl	22670 <z_impl_k_sem_give>
}
   229fe:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22a00:	f1b9 0f00 	cmp.w	r9, #0
   22a04:	d0b6      	beq.n	22974 <work_queue_main+0x11c>
	return node->next;
   22a06:	4648      	mov	r0, r9
   22a08:	4690      	mov	r8, r2
   22a0a:	f8d9 9000 	ldr.w	r9, [r9]
   22a0e:	e7e5      	b.n	229dc <work_queue_main+0x184>
	return list->tail;
   22a10:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   22a12:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   22a16:	4298      	cmp	r0, r3
	list->tail = node;
   22a18:	bf08      	it	eq
   22a1a:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   22a1e:	e7ea      	b.n	229f6 <work_queue_main+0x19e>
   22a20:	20002bd0 	.word	0x20002bd0
   22a24:	20002bd4 	.word	0x20002bd4
   22a28:	0002d57d 	.word	0x0002d57d
   22a2c:	0002d509 	.word	0x0002d509
   22a30:	000305a5 	.word	0x000305a5

00022a34 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   22a34:	68c3      	ldr	r3, [r0, #12]
{
   22a36:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   22a38:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   22a3c:	079b      	lsls	r3, r3, #30
{
   22a3e:	4605      	mov	r5, r0
   22a40:	460c      	mov	r4, r1
	if (ret) {
   22a42:	d50d      	bpl.n	22a60 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   22a44:	2201      	movs	r2, #1
   22a46:	2100      	movs	r1, #0
   22a48:	f104 0008 	add.w	r0, r4, #8
   22a4c:	f009 f9cd 	bl	2bdea <z_impl_k_sem_init>
	parent->next = child;
   22a50:	2300      	movs	r3, #0
   22a52:	6023      	str	r3, [r4, #0]
	return list->tail;
   22a54:	4b05      	ldr	r3, [pc, #20]	; (22a6c <cancel_sync_locked+0x38>)
	canceler->work = work;
   22a56:	6065      	str	r5, [r4, #4]
   22a58:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   22a5a:	b91a      	cbnz	r2, 22a64 <cancel_sync_locked+0x30>
	list->head = node;
   22a5c:	e9c3 4400 	strd	r4, r4, [r3]
}
   22a60:	4630      	mov	r0, r6
   22a62:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   22a64:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22a66:	605c      	str	r4, [r3, #4]
}
   22a68:	e7fa      	b.n	22a60 <cancel_sync_locked+0x2c>
   22a6a:	bf00      	nop
   22a6c:	20002bd4 	.word	0x20002bd4

00022a70 <submit_to_queue_locked>:
{
   22a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   22a72:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22a74:	079a      	lsls	r2, r3, #30
{
   22a76:	4604      	mov	r4, r0
   22a78:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22a7a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   22a7e:	d42a      	bmi.n	22ad6 <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   22a80:	075f      	lsls	r7, r3, #29
   22a82:	d42a      	bmi.n	22ada <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   22a84:	680a      	ldr	r2, [r1, #0]
   22a86:	b90a      	cbnz	r2, 22a8c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   22a88:	6882      	ldr	r2, [r0, #8]
   22a8a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   22a8c:	07d8      	lsls	r0, r3, #31
   22a8e:	d527      	bpl.n	22ae0 <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   22a90:	68a3      	ldr	r3, [r4, #8]
   22a92:	b953      	cbnz	r3, 22aaa <submit_to_queue_locked+0x3a>
   22a94:	4923      	ldr	r1, [pc, #140]	; (22b24 <submit_to_queue_locked+0xb4>)
   22a96:	4824      	ldr	r0, [pc, #144]	; (22b28 <submit_to_queue_locked+0xb8>)
   22a98:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   22a9c:	f005 fe72 	bl	28784 <assert_print>
   22aa0:	4820      	ldr	r0, [pc, #128]	; (22b24 <submit_to_queue_locked+0xb4>)
   22aa2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   22aa6:	f005 fe66 	bl	28776 <assert_post_action>
			*queuep = work->queue;
   22aaa:	68a3      	ldr	r3, [r4, #8]
   22aac:	6033      	str	r3, [r6, #0]
			ret = 2;
   22aae:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   22ab0:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   22ab2:	b38f      	cbz	r7, 22b18 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22ab4:	4b1d      	ldr	r3, [pc, #116]	; (22b2c <submit_to_queue_locked+0xbc>)
   22ab6:	689b      	ldr	r3, [r3, #8]
   22ab8:	42bb      	cmp	r3, r7
   22aba:	d113      	bne.n	22ae4 <submit_to_queue_locked+0x74>
   22abc:	f009 f944 	bl	2bd48 <k_is_in_isr>
   22ac0:	f080 0001 	eor.w	r0, r0, #1
   22ac4:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   22ac6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   22aca:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   22acc:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   22ad0:	d525      	bpl.n	22b1e <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   22ad2:	b14a      	cbz	r2, 22ae8 <submit_to_queue_locked+0x78>
   22ad4:	b950      	cbnz	r0, 22aec <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   22ad6:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   22ada:	2300      	movs	r3, #0
   22adc:	6033      	str	r3, [r6, #0]
	return ret;
   22ade:	e015      	b.n	22b0c <submit_to_queue_locked+0x9c>
		ret = 1;
   22ae0:	2501      	movs	r5, #1
   22ae2:	e7e5      	b.n	22ab0 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22ae4:	2000      	movs	r0, #0
   22ae6:	e7ee      	b.n	22ac6 <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   22ae8:	071b      	lsls	r3, r3, #28
   22aea:	d4f4      	bmi.n	22ad6 <submit_to_queue_locked+0x66>
	parent->next = child;
   22aec:	2300      	movs	r3, #0
   22aee:	6023      	str	r3, [r4, #0]
	return list->tail;
   22af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   22af4:	b963      	cbnz	r3, 22b10 <submit_to_queue_locked+0xa0>
	list->head = node;
   22af6:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   22afa:	4638      	mov	r0, r7
   22afc:	f009 f99e 	bl	2be3c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   22b00:	68e3      	ldr	r3, [r4, #12]
   22b02:	f043 0304 	orr.w	r3, r3, #4
   22b06:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   22b08:	6833      	ldr	r3, [r6, #0]
   22b0a:	60a3      	str	r3, [r4, #8]
}
   22b0c:	4628      	mov	r0, r5
   22b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   22b10:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22b12:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   22b16:	e7f0      	b.n	22afa <submit_to_queue_locked+0x8a>
		return -EINVAL;
   22b18:	f06f 0515 	mvn.w	r5, #21
   22b1c:	e7dd      	b.n	22ada <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   22b1e:	f06f 0512 	mvn.w	r5, #18
   22b22:	e7da      	b.n	22ada <submit_to_queue_locked+0x6a>
   22b24:	000305a5 	.word	0x000305a5
   22b28:	0002d509 	.word	0x0002d509
   22b2c:	20002ba0 	.word	0x20002ba0

00022b30 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   22b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22b32:	4604      	mov	r4, r0
	__asm__ volatile(
   22b34:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b38:	f3ef 8511 	mrs	r5, BASEPRI
   22b3c:	f383 8812 	msr	BASEPRI_MAX, r3
   22b40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b44:	4818      	ldr	r0, [pc, #96]	; (22ba8 <work_timeout+0x78>)
   22b46:	f7ff fabf 	bl	220c8 <z_spin_lock_valid>
   22b4a:	b940      	cbnz	r0, 22b5e <work_timeout+0x2e>
   22b4c:	4917      	ldr	r1, [pc, #92]	; (22bac <work_timeout+0x7c>)
   22b4e:	4818      	ldr	r0, [pc, #96]	; (22bb0 <work_timeout+0x80>)
   22b50:	228e      	movs	r2, #142	; 0x8e
   22b52:	f005 fe17 	bl	28784 <assert_print>
   22b56:	4815      	ldr	r0, [pc, #84]	; (22bac <work_timeout+0x7c>)
   22b58:	218e      	movs	r1, #142	; 0x8e
   22b5a:	f005 fe0c 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   22b5e:	4812      	ldr	r0, [pc, #72]	; (22ba8 <work_timeout+0x78>)
   22b60:	f7ff fad0 	bl	22104 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   22b64:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22b66:	2103      	movs	r1, #3
   22b68:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   22b6a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22b6c:	f1a4 0610 	sub.w	r6, r4, #16
   22b70:	f009 f94b 	bl	2be0a <flag_test_and_clear>
   22b74:	b128      	cbz	r0, 22b82 <work_timeout+0x52>
		queue = dw->queue;
   22b76:	69a3      	ldr	r3, [r4, #24]
   22b78:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   22b7a:	a901      	add	r1, sp, #4
   22b7c:	4630      	mov	r0, r6
   22b7e:	f7ff ff77 	bl	22a70 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b82:	4809      	ldr	r0, [pc, #36]	; (22ba8 <work_timeout+0x78>)
   22b84:	f7ff faae 	bl	220e4 <z_spin_unlock_valid>
   22b88:	b940      	cbnz	r0, 22b9c <work_timeout+0x6c>
   22b8a:	4908      	ldr	r1, [pc, #32]	; (22bac <work_timeout+0x7c>)
   22b8c:	4808      	ldr	r0, [pc, #32]	; (22bb0 <work_timeout+0x80>)
   22b8e:	22b9      	movs	r2, #185	; 0xb9
   22b90:	f005 fdf8 	bl	28784 <assert_print>
   22b94:	4805      	ldr	r0, [pc, #20]	; (22bac <work_timeout+0x7c>)
   22b96:	21b9      	movs	r1, #185	; 0xb9
   22b98:	f005 fded 	bl	28776 <assert_post_action>
	__asm__ volatile(
   22b9c:	f385 8811 	msr	BASEPRI, r5
   22ba0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   22ba4:	b002      	add	sp, #8
   22ba6:	bd70      	pop	{r4, r5, r6, pc}
   22ba8:	20002bd0 	.word	0x20002bd0
   22bac:	0002d57d 	.word	0x0002d57d
   22bb0:	0002d509 	.word	0x0002d509

00022bb4 <k_work_init>:
{
   22bb4:	b538      	push	{r3, r4, r5, lr}
   22bb6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   22bb8:	4604      	mov	r4, r0
   22bba:	b940      	cbnz	r0, 22bce <k_work_init+0x1a>
   22bbc:	490c      	ldr	r1, [pc, #48]	; (22bf0 <k_work_init+0x3c>)
   22bbe:	480d      	ldr	r0, [pc, #52]	; (22bf4 <k_work_init+0x40>)
   22bc0:	2289      	movs	r2, #137	; 0x89
   22bc2:	f005 fddf 	bl	28784 <assert_print>
   22bc6:	480a      	ldr	r0, [pc, #40]	; (22bf0 <k_work_init+0x3c>)
   22bc8:	2189      	movs	r1, #137	; 0x89
   22bca:	f005 fdd4 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   22bce:	b945      	cbnz	r5, 22be2 <k_work_init+0x2e>
   22bd0:	4907      	ldr	r1, [pc, #28]	; (22bf0 <k_work_init+0x3c>)
   22bd2:	4808      	ldr	r0, [pc, #32]	; (22bf4 <k_work_init+0x40>)
   22bd4:	228a      	movs	r2, #138	; 0x8a
   22bd6:	f005 fdd5 	bl	28784 <assert_print>
   22bda:	4805      	ldr	r0, [pc, #20]	; (22bf0 <k_work_init+0x3c>)
   22bdc:	218a      	movs	r1, #138	; 0x8a
   22bde:	f005 fdca 	bl	28776 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22be2:	2210      	movs	r2, #16
   22be4:	2100      	movs	r1, #0
   22be6:	4620      	mov	r0, r4
   22be8:	f009 faec 	bl	2c1c4 <memset>
   22bec:	6065      	str	r5, [r4, #4]
}
   22bee:	bd38      	pop	{r3, r4, r5, pc}
   22bf0:	000305a5 	.word	0x000305a5
   22bf4:	0002d509 	.word	0x0002d509

00022bf8 <k_work_busy_get>:
{
   22bf8:	b538      	push	{r3, r4, r5, lr}
   22bfa:	4604      	mov	r4, r0
	__asm__ volatile(
   22bfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c00:	f3ef 8511 	mrs	r5, BASEPRI
   22c04:	f383 8812 	msr	BASEPRI_MAX, r3
   22c08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c0c:	4812      	ldr	r0, [pc, #72]	; (22c58 <k_work_busy_get+0x60>)
   22c0e:	f7ff fa5b 	bl	220c8 <z_spin_lock_valid>
   22c12:	b940      	cbnz	r0, 22c26 <k_work_busy_get+0x2e>
   22c14:	4911      	ldr	r1, [pc, #68]	; (22c5c <k_work_busy_get+0x64>)
   22c16:	4812      	ldr	r0, [pc, #72]	; (22c60 <k_work_busy_get+0x68>)
   22c18:	228e      	movs	r2, #142	; 0x8e
   22c1a:	f005 fdb3 	bl	28784 <assert_print>
   22c1e:	480f      	ldr	r0, [pc, #60]	; (22c5c <k_work_busy_get+0x64>)
   22c20:	218e      	movs	r1, #142	; 0x8e
   22c22:	f005 fda8 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   22c26:	480c      	ldr	r0, [pc, #48]	; (22c58 <k_work_busy_get+0x60>)
   22c28:	f7ff fa6c 	bl	22104 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   22c2c:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c2e:	480a      	ldr	r0, [pc, #40]	; (22c58 <k_work_busy_get+0x60>)
   22c30:	f004 040f 	and.w	r4, r4, #15
   22c34:	f7ff fa56 	bl	220e4 <z_spin_unlock_valid>
   22c38:	b940      	cbnz	r0, 22c4c <k_work_busy_get+0x54>
   22c3a:	4908      	ldr	r1, [pc, #32]	; (22c5c <k_work_busy_get+0x64>)
   22c3c:	4808      	ldr	r0, [pc, #32]	; (22c60 <k_work_busy_get+0x68>)
   22c3e:	22b9      	movs	r2, #185	; 0xb9
   22c40:	f005 fda0 	bl	28784 <assert_print>
   22c44:	4805      	ldr	r0, [pc, #20]	; (22c5c <k_work_busy_get+0x64>)
   22c46:	21b9      	movs	r1, #185	; 0xb9
   22c48:	f005 fd95 	bl	28776 <assert_post_action>
	__asm__ volatile(
   22c4c:	f385 8811 	msr	BASEPRI, r5
   22c50:	f3bf 8f6f 	isb	sy
}
   22c54:	4620      	mov	r0, r4
   22c56:	bd38      	pop	{r3, r4, r5, pc}
   22c58:	20002bd0 	.word	0x20002bd0
   22c5c:	0002d57d 	.word	0x0002d57d
   22c60:	0002d509 	.word	0x0002d509

00022c64 <z_work_submit_to_queue>:
{
   22c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   22c66:	460c      	mov	r4, r1
{
   22c68:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   22c6a:	b951      	cbnz	r1, 22c82 <z_work_submit_to_queue+0x1e>
   22c6c:	491d      	ldr	r1, [pc, #116]	; (22ce4 <z_work_submit_to_queue+0x80>)
   22c6e:	481e      	ldr	r0, [pc, #120]	; (22ce8 <z_work_submit_to_queue+0x84>)
   22c70:	f44f 72ba 	mov.w	r2, #372	; 0x174
   22c74:	f005 fd86 	bl	28784 <assert_print>
   22c78:	481a      	ldr	r0, [pc, #104]	; (22ce4 <z_work_submit_to_queue+0x80>)
   22c7a:	f44f 71ba 	mov.w	r1, #372	; 0x174
   22c7e:	f005 fd7a 	bl	28776 <assert_post_action>
	__asm__ volatile(
   22c82:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c86:	f3ef 8511 	mrs	r5, BASEPRI
   22c8a:	f383 8812 	msr	BASEPRI_MAX, r3
   22c8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c92:	4816      	ldr	r0, [pc, #88]	; (22cec <z_work_submit_to_queue+0x88>)
   22c94:	f7ff fa18 	bl	220c8 <z_spin_lock_valid>
   22c98:	b940      	cbnz	r0, 22cac <z_work_submit_to_queue+0x48>
   22c9a:	4915      	ldr	r1, [pc, #84]	; (22cf0 <z_work_submit_to_queue+0x8c>)
   22c9c:	4812      	ldr	r0, [pc, #72]	; (22ce8 <z_work_submit_to_queue+0x84>)
   22c9e:	228e      	movs	r2, #142	; 0x8e
   22ca0:	f005 fd70 	bl	28784 <assert_print>
   22ca4:	4812      	ldr	r0, [pc, #72]	; (22cf0 <z_work_submit_to_queue+0x8c>)
   22ca6:	218e      	movs	r1, #142	; 0x8e
   22ca8:	f005 fd65 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   22cac:	480f      	ldr	r0, [pc, #60]	; (22cec <z_work_submit_to_queue+0x88>)
   22cae:	f7ff fa29 	bl	22104 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   22cb2:	4620      	mov	r0, r4
   22cb4:	a901      	add	r1, sp, #4
   22cb6:	f7ff fedb 	bl	22a70 <submit_to_queue_locked>
   22cba:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cbc:	480b      	ldr	r0, [pc, #44]	; (22cec <z_work_submit_to_queue+0x88>)
   22cbe:	f7ff fa11 	bl	220e4 <z_spin_unlock_valid>
   22cc2:	b940      	cbnz	r0, 22cd6 <z_work_submit_to_queue+0x72>
   22cc4:	490a      	ldr	r1, [pc, #40]	; (22cf0 <z_work_submit_to_queue+0x8c>)
   22cc6:	4808      	ldr	r0, [pc, #32]	; (22ce8 <z_work_submit_to_queue+0x84>)
   22cc8:	22b9      	movs	r2, #185	; 0xb9
   22cca:	f005 fd5b 	bl	28784 <assert_print>
   22cce:	4808      	ldr	r0, [pc, #32]	; (22cf0 <z_work_submit_to_queue+0x8c>)
   22cd0:	21b9      	movs	r1, #185	; 0xb9
   22cd2:	f005 fd50 	bl	28776 <assert_post_action>
	__asm__ volatile(
   22cd6:	f385 8811 	msr	BASEPRI, r5
   22cda:	f3bf 8f6f 	isb	sy
}
   22cde:	4620      	mov	r0, r4
   22ce0:	b003      	add	sp, #12
   22ce2:	bd30      	pop	{r4, r5, pc}
   22ce4:	000305a5 	.word	0x000305a5
   22ce8:	0002d509 	.word	0x0002d509
   22cec:	20002bd0 	.word	0x20002bd0
   22cf0:	0002d57d 	.word	0x0002d57d

00022cf4 <k_work_submit>:
{
   22cf4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   22cf6:	4801      	ldr	r0, [pc, #4]	; (22cfc <k_work_submit+0x8>)
   22cf8:	f009 b8d8 	b.w	2beac <k_work_submit_to_queue>
   22cfc:	20002098 	.word	0x20002098

00022d00 <k_work_queue_init>:
{
   22d00:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(queue != NULL);
   22d02:	4604      	mov	r4, r0
   22d04:	b950      	cbnz	r0, 22d1c <k_work_queue_init+0x1c>
   22d06:	4908      	ldr	r1, [pc, #32]	; (22d28 <k_work_queue_init+0x28>)
   22d08:	4808      	ldr	r0, [pc, #32]	; (22d2c <k_work_queue_init+0x2c>)
   22d0a:	f240 22b9 	movw	r2, #697	; 0x2b9
   22d0e:	f005 fd39 	bl	28784 <assert_print>
   22d12:	4805      	ldr	r0, [pc, #20]	; (22d28 <k_work_queue_init+0x28>)
   22d14:	f240 21b9 	movw	r1, #697	; 0x2b9
   22d18:	f005 fd2d 	bl	28776 <assert_post_action>
	*queue = (struct k_work_q) {
   22d1c:	22a0      	movs	r2, #160	; 0xa0
   22d1e:	2100      	movs	r1, #0
   22d20:	4620      	mov	r0, r4
   22d22:	f009 fa4f 	bl	2c1c4 <memset>
}
   22d26:	bd10      	pop	{r4, pc}
   22d28:	000305a5 	.word	0x000305a5
   22d2c:	0002d509 	.word	0x0002d509

00022d30 <k_work_queue_start>:
{
   22d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d34:	b088      	sub	sp, #32
   22d36:	460e      	mov	r6, r1
   22d38:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   22d3a:	4617      	mov	r7, r2
   22d3c:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   22d3e:	4604      	mov	r4, r0
   22d40:	b950      	cbnz	r0, 22d58 <k_work_queue_start+0x28>
   22d42:	492d      	ldr	r1, [pc, #180]	; (22df8 <k_work_queue_start+0xc8>)
   22d44:	482d      	ldr	r0, [pc, #180]	; (22dfc <k_work_queue_start+0xcc>)
   22d46:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   22d4a:	f005 fd1b 	bl	28784 <assert_print>
   22d4e:	482a      	ldr	r0, [pc, #168]	; (22df8 <k_work_queue_start+0xc8>)
   22d50:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   22d54:	f005 fd0f 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   22d58:	b956      	cbnz	r6, 22d70 <k_work_queue_start+0x40>
   22d5a:	4927      	ldr	r1, [pc, #156]	; (22df8 <k_work_queue_start+0xc8>)
   22d5c:	4827      	ldr	r0, [pc, #156]	; (22dfc <k_work_queue_start+0xcc>)
   22d5e:	f240 22c9 	movw	r2, #713	; 0x2c9
   22d62:	f005 fd0f 	bl	28784 <assert_print>
   22d66:	4824      	ldr	r0, [pc, #144]	; (22df8 <k_work_queue_start+0xc8>)
   22d68:	f240 21c9 	movw	r1, #713	; 0x2c9
   22d6c:	f005 fd03 	bl	28776 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   22d70:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   22d74:	07db      	lsls	r3, r3, #31
   22d76:	d50a      	bpl.n	22d8e <k_work_queue_start+0x5e>
   22d78:	491f      	ldr	r1, [pc, #124]	; (22df8 <k_work_queue_start+0xc8>)
   22d7a:	4820      	ldr	r0, [pc, #128]	; (22dfc <k_work_queue_start+0xcc>)
   22d7c:	f240 22ca 	movw	r2, #714	; 0x2ca
   22d80:	f005 fd00 	bl	28784 <assert_print>
   22d84:	481c      	ldr	r0, [pc, #112]	; (22df8 <k_work_queue_start+0xc8>)
   22d86:	f240 21ca 	movw	r1, #714	; 0x2ca
   22d8a:	f005 fcf4 	bl	28776 <assert_post_action>
	list->head = NULL;
   22d8e:	2300      	movs	r3, #0
	list->tail = NULL;
   22d90:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   22d94:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   22d98:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   22d9c:	f104 0390 	add.w	r3, r4, #144	; 0x90
   22da0:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   22da4:	b32d      	cbz	r5, 22df2 <k_work_queue_start+0xc2>
   22da6:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   22da8:	2b00      	cmp	r3, #0
   22daa:	f240 1101 	movw	r1, #257	; 0x101
   22dae:	bf08      	it	eq
   22db0:	2101      	moveq	r1, #1
	*flagp = flags;
   22db2:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22dbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
   22dc2:	2200      	movs	r2, #0
   22dc4:	e9cd 8203 	strd	r8, r2, [sp, #12]
   22dc8:	e9cd 2201 	strd	r2, r2, [sp, #4]
   22dcc:	4b0c      	ldr	r3, [pc, #48]	; (22e00 <k_work_queue_start+0xd0>)
   22dce:	9400      	str	r4, [sp, #0]
   22dd0:	463a      	mov	r2, r7
   22dd2:	4631      	mov	r1, r6
   22dd4:	4620      	mov	r0, r4
   22dd6:	f7ff f8b3 	bl	21f40 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   22dda:	b125      	cbz	r5, 22de6 <k_work_queue_start+0xb6>
   22ddc:	6829      	ldr	r1, [r5, #0]
   22dde:	b111      	cbz	r1, 22de6 <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   22de0:	4620      	mov	r0, r4
   22de2:	f008 ffb7 	bl	2bd54 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   22de6:	4620      	mov	r0, r4
}
   22de8:	b008      	add	sp, #32
   22dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22dee:	f008 bfb6 	b.w	2bd5e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22df2:	2101      	movs	r1, #1
   22df4:	e7dd      	b.n	22db2 <k_work_queue_start+0x82>
   22df6:	bf00      	nop
   22df8:	000305a5 	.word	0x000305a5
   22dfc:	0002d509 	.word	0x0002d509
   22e00:	00022859 	.word	0x00022859

00022e04 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   22e04:	b538      	push	{r3, r4, r5, lr}
   22e06:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   22e08:	4604      	mov	r4, r0
   22e0a:	b950      	cbnz	r0, 22e22 <k_work_init_delayable+0x1e>
   22e0c:	4910      	ldr	r1, [pc, #64]	; (22e50 <k_work_init_delayable+0x4c>)
   22e0e:	4811      	ldr	r0, [pc, #68]	; (22e54 <k_work_init_delayable+0x50>)
   22e10:	f44f 7250 	mov.w	r2, #832	; 0x340
   22e14:	f005 fcb6 	bl	28784 <assert_print>
   22e18:	480d      	ldr	r0, [pc, #52]	; (22e50 <k_work_init_delayable+0x4c>)
   22e1a:	f44f 7150 	mov.w	r1, #832	; 0x340
   22e1e:	f005 fcaa 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   22e22:	b955      	cbnz	r5, 22e3a <k_work_init_delayable+0x36>
   22e24:	490a      	ldr	r1, [pc, #40]	; (22e50 <k_work_init_delayable+0x4c>)
   22e26:	480b      	ldr	r0, [pc, #44]	; (22e54 <k_work_init_delayable+0x50>)
   22e28:	f240 3241 	movw	r2, #833	; 0x341
   22e2c:	f005 fcaa 	bl	28784 <assert_print>
   22e30:	4807      	ldr	r0, [pc, #28]	; (22e50 <k_work_init_delayable+0x4c>)
   22e32:	f240 3141 	movw	r1, #833	; 0x341
   22e36:	f005 fc9e 	bl	28776 <assert_post_action>

	*dwork = (struct k_work_delayable){
   22e3a:	2230      	movs	r2, #48	; 0x30
   22e3c:	2100      	movs	r1, #0
   22e3e:	4620      	mov	r0, r4
   22e40:	f009 f9c0 	bl	2c1c4 <memset>
   22e44:	f44f 7380 	mov.w	r3, #256	; 0x100
   22e48:	6065      	str	r5, [r4, #4]
   22e4a:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   22e4c:	bd38      	pop	{r3, r4, r5, pc}
   22e4e:	bf00      	nop
   22e50:	000305a5 	.word	0x000305a5
   22e54:	0002d509 	.word	0x0002d509

00022e58 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   22e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22e5a:	4616      	mov	r6, r2
   22e5c:	9001      	str	r0, [sp, #4]
   22e5e:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   22e60:	460c      	mov	r4, r1
   22e62:	b951      	cbnz	r1, 22e7a <k_work_schedule_for_queue+0x22>
   22e64:	4929      	ldr	r1, [pc, #164]	; (22f0c <k_work_schedule_for_queue+0xb4>)
   22e66:	482a      	ldr	r0, [pc, #168]	; (22f10 <k_work_schedule_for_queue+0xb8>)
   22e68:	f240 32b7 	movw	r2, #951	; 0x3b7
   22e6c:	f005 fc8a 	bl	28784 <assert_print>
   22e70:	4826      	ldr	r0, [pc, #152]	; (22f0c <k_work_schedule_for_queue+0xb4>)
   22e72:	f240 31b7 	movw	r1, #951	; 0x3b7
   22e76:	f005 fc7e 	bl	28776 <assert_post_action>
	__asm__ volatile(
   22e7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e7e:	f3ef 8711 	mrs	r7, BASEPRI
   22e82:	f383 8812 	msr	BASEPRI_MAX, r3
   22e86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22e8a:	4822      	ldr	r0, [pc, #136]	; (22f14 <k_work_schedule_for_queue+0xbc>)
   22e8c:	f7ff f91c 	bl	220c8 <z_spin_lock_valid>
   22e90:	b940      	cbnz	r0, 22ea4 <k_work_schedule_for_queue+0x4c>
   22e92:	4921      	ldr	r1, [pc, #132]	; (22f18 <k_work_schedule_for_queue+0xc0>)
   22e94:	481e      	ldr	r0, [pc, #120]	; (22f10 <k_work_schedule_for_queue+0xb8>)
   22e96:	228e      	movs	r2, #142	; 0x8e
   22e98:	f005 fc74 	bl	28784 <assert_print>
   22e9c:	481e      	ldr	r0, [pc, #120]	; (22f18 <k_work_schedule_for_queue+0xc0>)
   22e9e:	218e      	movs	r1, #142	; 0x8e
   22ea0:	f005 fc69 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ea4:	481b      	ldr	r0, [pc, #108]	; (22f14 <k_work_schedule_for_queue+0xbc>)
   22ea6:	f7ff f92d 	bl	22104 <z_spin_lock_set_owner>
	return *flagp;
   22eaa:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   22eac:	f013 0f0e 	tst.w	r3, #14
   22eb0:	d129      	bne.n	22f06 <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22eb2:	ea55 0206 	orrs.w	r2, r5, r6
   22eb6:	d118      	bne.n	22eea <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   22eb8:	4620      	mov	r0, r4
   22eba:	a901      	add	r1, sp, #4
   22ebc:	f7ff fdd8 	bl	22a70 <submit_to_queue_locked>
   22ec0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ec2:	4814      	ldr	r0, [pc, #80]	; (22f14 <k_work_schedule_for_queue+0xbc>)
   22ec4:	f7ff f90e 	bl	220e4 <z_spin_unlock_valid>
   22ec8:	b940      	cbnz	r0, 22edc <k_work_schedule_for_queue+0x84>
   22eca:	4913      	ldr	r1, [pc, #76]	; (22f18 <k_work_schedule_for_queue+0xc0>)
   22ecc:	4810      	ldr	r0, [pc, #64]	; (22f10 <k_work_schedule_for_queue+0xb8>)
   22ece:	22b9      	movs	r2, #185	; 0xb9
   22ed0:	f005 fc58 	bl	28784 <assert_print>
   22ed4:	4810      	ldr	r0, [pc, #64]	; (22f18 <k_work_schedule_for_queue+0xc0>)
   22ed6:	21b9      	movs	r1, #185	; 0xb9
   22ed8:	f005 fc4d 	bl	28776 <assert_post_action>
	__asm__ volatile(
   22edc:	f387 8811 	msr	BASEPRI, r7
   22ee0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   22ee4:	4620      	mov	r0, r4
   22ee6:	b003      	add	sp, #12
   22ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   22eea:	f043 0308 	orr.w	r3, r3, #8
   22eee:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   22ef0:	9b01      	ldr	r3, [sp, #4]
   22ef2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22ef4:	f104 0010 	add.w	r0, r4, #16
   22ef8:	4908      	ldr	r1, [pc, #32]	; (22f1c <k_work_schedule_for_queue+0xc4>)
   22efa:	4632      	mov	r2, r6
   22efc:	462b      	mov	r3, r5
   22efe:	f001 fa0b 	bl	24318 <z_add_timeout>
	return ret;
   22f02:	2401      	movs	r4, #1
   22f04:	e7dd      	b.n	22ec2 <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   22f06:	2400      	movs	r4, #0
   22f08:	e7db      	b.n	22ec2 <k_work_schedule_for_queue+0x6a>
   22f0a:	bf00      	nop
   22f0c:	000305a5 	.word	0x000305a5
   22f10:	0002d509 	.word	0x0002d509
   22f14:	20002bd0 	.word	0x20002bd0
   22f18:	0002d57d 	.word	0x0002d57d
   22f1c:	00022b31 	.word	0x00022b31

00022f20 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   22f20:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   22f22:	4801      	ldr	r0, [pc, #4]	; (22f28 <k_work_schedule+0x8>)
   22f24:	f7ff bf98 	b.w	22e58 <k_work_schedule_for_queue>
   22f28:	20002098 	.word	0x20002098

00022f2c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   22f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22f2e:	4616      	mov	r6, r2
   22f30:	9001      	str	r0, [sp, #4]
   22f32:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   22f34:	460c      	mov	r4, r1
   22f36:	b951      	cbnz	r1, 22f4e <k_work_reschedule_for_queue+0x22>
   22f38:	4928      	ldr	r1, [pc, #160]	; (22fdc <k_work_reschedule_for_queue+0xb0>)
   22f3a:	4829      	ldr	r0, [pc, #164]	; (22fe0 <k_work_reschedule_for_queue+0xb4>)
   22f3c:	f240 32db 	movw	r2, #987	; 0x3db
   22f40:	f005 fc20 	bl	28784 <assert_print>
   22f44:	4825      	ldr	r0, [pc, #148]	; (22fdc <k_work_reschedule_for_queue+0xb0>)
   22f46:	f240 31db 	movw	r1, #987	; 0x3db
   22f4a:	f005 fc14 	bl	28776 <assert_post_action>
	__asm__ volatile(
   22f4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f52:	f3ef 8711 	mrs	r7, BASEPRI
   22f56:	f383 8812 	msr	BASEPRI_MAX, r3
   22f5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f5e:	4821      	ldr	r0, [pc, #132]	; (22fe4 <k_work_reschedule_for_queue+0xb8>)
   22f60:	f7ff f8b2 	bl	220c8 <z_spin_lock_valid>
   22f64:	b940      	cbnz	r0, 22f78 <k_work_reschedule_for_queue+0x4c>
   22f66:	4920      	ldr	r1, [pc, #128]	; (22fe8 <k_work_reschedule_for_queue+0xbc>)
   22f68:	481d      	ldr	r0, [pc, #116]	; (22fe0 <k_work_reschedule_for_queue+0xb4>)
   22f6a:	228e      	movs	r2, #142	; 0x8e
   22f6c:	f005 fc0a 	bl	28784 <assert_print>
   22f70:	481d      	ldr	r0, [pc, #116]	; (22fe8 <k_work_reschedule_for_queue+0xbc>)
   22f72:	218e      	movs	r1, #142	; 0x8e
   22f74:	f005 fbff 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   22f78:	481a      	ldr	r0, [pc, #104]	; (22fe4 <k_work_reschedule_for_queue+0xb8>)
   22f7a:	f7ff f8c3 	bl	22104 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   22f7e:	4620      	mov	r0, r4
   22f80:	f008 ff4e 	bl	2be20 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22f84:	ea55 0306 	orrs.w	r3, r5, r6
   22f88:	d118      	bne.n	22fbc <k_work_reschedule_for_queue+0x90>
		return submit_to_queue_locked(work, queuep);
   22f8a:	4620      	mov	r0, r4
   22f8c:	a901      	add	r1, sp, #4
   22f8e:	f7ff fd6f 	bl	22a70 <submit_to_queue_locked>
   22f92:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22f94:	4813      	ldr	r0, [pc, #76]	; (22fe4 <k_work_reschedule_for_queue+0xb8>)
   22f96:	f7ff f8a5 	bl	220e4 <z_spin_unlock_valid>
   22f9a:	b940      	cbnz	r0, 22fae <k_work_reschedule_for_queue+0x82>
   22f9c:	4912      	ldr	r1, [pc, #72]	; (22fe8 <k_work_reschedule_for_queue+0xbc>)
   22f9e:	4810      	ldr	r0, [pc, #64]	; (22fe0 <k_work_reschedule_for_queue+0xb4>)
   22fa0:	22b9      	movs	r2, #185	; 0xb9
   22fa2:	f005 fbef 	bl	28784 <assert_print>
   22fa6:	4810      	ldr	r0, [pc, #64]	; (22fe8 <k_work_reschedule_for_queue+0xbc>)
   22fa8:	21b9      	movs	r1, #185	; 0xb9
   22faa:	f005 fbe4 	bl	28776 <assert_post_action>
	__asm__ volatile(
   22fae:	f387 8811 	msr	BASEPRI, r7
   22fb2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   22fb6:	4620      	mov	r0, r4
   22fb8:	b003      	add	sp, #12
   22fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   22fbc:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22fbe:	490b      	ldr	r1, [pc, #44]	; (22fec <k_work_reschedule_for_queue+0xc0>)
	*flagp |= BIT(bit);
   22fc0:	f043 0308 	orr.w	r3, r3, #8
   22fc4:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   22fc6:	9b01      	ldr	r3, [sp, #4]
   22fc8:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22fca:	f104 0010 	add.w	r0, r4, #16
   22fce:	4632      	mov	r2, r6
   22fd0:	462b      	mov	r3, r5
   22fd2:	f001 f9a1 	bl	24318 <z_add_timeout>
	return ret;
   22fd6:	2401      	movs	r4, #1
   22fd8:	e7dc      	b.n	22f94 <k_work_reschedule_for_queue+0x68>
   22fda:	bf00      	nop
   22fdc:	000305a5 	.word	0x000305a5
   22fe0:	0002d509 	.word	0x0002d509
   22fe4:	20002bd0 	.word	0x20002bd0
   22fe8:	0002d57d 	.word	0x0002d57d
   22fec:	00022b31 	.word	0x00022b31

00022ff0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   22ff0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   22ff2:	4801      	ldr	r0, [pc, #4]	; (22ff8 <k_work_reschedule+0x8>)
   22ff4:	f7ff bf9a 	b.w	22f2c <k_work_reschedule_for_queue>
   22ff8:	20002098 	.word	0x20002098

00022ffc <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   22ffc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   22ffe:	4604      	mov	r4, r0
   23000:	b950      	cbnz	r0, 23018 <k_work_cancel_delayable+0x1c>
   23002:	491e      	ldr	r1, [pc, #120]	; (2307c <k_work_cancel_delayable+0x80>)
   23004:	481e      	ldr	r0, [pc, #120]	; (23080 <k_work_cancel_delayable+0x84>)
   23006:	f240 32fd 	movw	r2, #1021	; 0x3fd
   2300a:	f005 fbbb 	bl	28784 <assert_print>
   2300e:	481b      	ldr	r0, [pc, #108]	; (2307c <k_work_cancel_delayable+0x80>)
   23010:	f240 31fd 	movw	r1, #1021	; 0x3fd
   23014:	f005 fbaf 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23018:	f04f 0340 	mov.w	r3, #64	; 0x40
   2301c:	f3ef 8511 	mrs	r5, BASEPRI
   23020:	f383 8812 	msr	BASEPRI_MAX, r3
   23024:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23028:	4816      	ldr	r0, [pc, #88]	; (23084 <k_work_cancel_delayable+0x88>)
   2302a:	f7ff f84d 	bl	220c8 <z_spin_lock_valid>
   2302e:	b940      	cbnz	r0, 23042 <k_work_cancel_delayable+0x46>
   23030:	4915      	ldr	r1, [pc, #84]	; (23088 <k_work_cancel_delayable+0x8c>)
   23032:	4813      	ldr	r0, [pc, #76]	; (23080 <k_work_cancel_delayable+0x84>)
   23034:	228e      	movs	r2, #142	; 0x8e
   23036:	f005 fba5 	bl	28784 <assert_print>
   2303a:	4813      	ldr	r0, [pc, #76]	; (23088 <k_work_cancel_delayable+0x8c>)
   2303c:	218e      	movs	r1, #142	; 0x8e
   2303e:	f005 fb9a 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   23042:	4810      	ldr	r0, [pc, #64]	; (23084 <k_work_cancel_delayable+0x88>)
   23044:	f7ff f85e 	bl	22104 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   23048:	4620      	mov	r0, r4
   2304a:	f008 fee9 	bl	2be20 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2304e:	4620      	mov	r0, r4
   23050:	f008 fefb 	bl	2be4a <cancel_async_locked>
   23054:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23056:	480b      	ldr	r0, [pc, #44]	; (23084 <k_work_cancel_delayable+0x88>)
   23058:	f7ff f844 	bl	220e4 <z_spin_unlock_valid>
   2305c:	b940      	cbnz	r0, 23070 <k_work_cancel_delayable+0x74>
   2305e:	490a      	ldr	r1, [pc, #40]	; (23088 <k_work_cancel_delayable+0x8c>)
   23060:	4807      	ldr	r0, [pc, #28]	; (23080 <k_work_cancel_delayable+0x84>)
   23062:	22b9      	movs	r2, #185	; 0xb9
   23064:	f005 fb8e 	bl	28784 <assert_print>
   23068:	4807      	ldr	r0, [pc, #28]	; (23088 <k_work_cancel_delayable+0x8c>)
   2306a:	21b9      	movs	r1, #185	; 0xb9
   2306c:	f005 fb83 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23070:	f385 8811 	msr	BASEPRI, r5
   23074:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   23078:	4620      	mov	r0, r4
   2307a:	bd38      	pop	{r3, r4, r5, pc}
   2307c:	000305a5 	.word	0x000305a5
   23080:	0002d509 	.word	0x0002d509
   23084:	20002bd0 	.word	0x20002bd0
   23088:	0002d57d 	.word	0x0002d57d

0002308c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2308c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23090:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   23092:	4605      	mov	r5, r0
   23094:	b950      	cbnz	r0, 230ac <k_work_cancel_delayable_sync+0x20>
   23096:	4936      	ldr	r1, [pc, #216]	; (23170 <k_work_cancel_delayable_sync+0xe4>)
   23098:	4836      	ldr	r0, [pc, #216]	; (23174 <k_work_cancel_delayable_sync+0xe8>)
   2309a:	f240 420e 	movw	r2, #1038	; 0x40e
   2309e:	f005 fb71 	bl	28784 <assert_print>
   230a2:	4833      	ldr	r0, [pc, #204]	; (23170 <k_work_cancel_delayable_sync+0xe4>)
   230a4:	f240 410e 	movw	r1, #1038	; 0x40e
   230a8:	f005 fb65 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   230ac:	b956      	cbnz	r6, 230c4 <k_work_cancel_delayable_sync+0x38>
   230ae:	4930      	ldr	r1, [pc, #192]	; (23170 <k_work_cancel_delayable_sync+0xe4>)
   230b0:	4830      	ldr	r0, [pc, #192]	; (23174 <k_work_cancel_delayable_sync+0xe8>)
   230b2:	f240 420f 	movw	r2, #1039	; 0x40f
   230b6:	f005 fb65 	bl	28784 <assert_print>
   230ba:	482d      	ldr	r0, [pc, #180]	; (23170 <k_work_cancel_delayable_sync+0xe4>)
   230bc:	f240 410f 	movw	r1, #1039	; 0x40f
   230c0:	f005 fb59 	bl	28776 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   230c4:	f008 fe40 	bl	2bd48 <k_is_in_isr>
   230c8:	b150      	cbz	r0, 230e0 <k_work_cancel_delayable_sync+0x54>
   230ca:	4929      	ldr	r1, [pc, #164]	; (23170 <k_work_cancel_delayable_sync+0xe4>)
   230cc:	4829      	ldr	r0, [pc, #164]	; (23174 <k_work_cancel_delayable_sync+0xe8>)
   230ce:	f44f 6282 	mov.w	r2, #1040	; 0x410
   230d2:	f005 fb57 	bl	28784 <assert_print>
   230d6:	4826      	ldr	r0, [pc, #152]	; (23170 <k_work_cancel_delayable_sync+0xe4>)
   230d8:	f44f 6182 	mov.w	r1, #1040	; 0x410
   230dc:	f005 fb4b 	bl	28776 <assert_post_action>
	__asm__ volatile(
   230e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   230e4:	f3ef 8811 	mrs	r8, BASEPRI
   230e8:	f383 8812 	msr	BASEPRI_MAX, r3
   230ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   230f0:	4821      	ldr	r0, [pc, #132]	; (23178 <k_work_cancel_delayable_sync+0xec>)
   230f2:	f7fe ffe9 	bl	220c8 <z_spin_lock_valid>
   230f6:	b940      	cbnz	r0, 2310a <k_work_cancel_delayable_sync+0x7e>
   230f8:	4920      	ldr	r1, [pc, #128]	; (2317c <k_work_cancel_delayable_sync+0xf0>)
   230fa:	481e      	ldr	r0, [pc, #120]	; (23174 <k_work_cancel_delayable_sync+0xe8>)
   230fc:	228e      	movs	r2, #142	; 0x8e
   230fe:	f005 fb41 	bl	28784 <assert_print>
   23102:	481e      	ldr	r0, [pc, #120]	; (2317c <k_work_cancel_delayable_sync+0xf0>)
   23104:	218e      	movs	r1, #142	; 0x8e
   23106:	f005 fb36 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   2310a:	481b      	ldr	r0, [pc, #108]	; (23178 <k_work_cancel_delayable_sync+0xec>)
   2310c:	f7fe fffa 	bl	22104 <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   23110:	68ec      	ldr	r4, [r5, #12]
   23112:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   23116:	2c00      	cmp	r4, #0
   23118:	bf14      	ite	ne
   2311a:	2701      	movne	r7, #1
   2311c:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2311e:	d00a      	beq.n	23136 <k_work_cancel_delayable_sync+0xaa>
	(void)unschedule_locked(dwork);
   23120:	4628      	mov	r0, r5
   23122:	f008 fe7d 	bl	2be20 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   23126:	4628      	mov	r0, r5
   23128:	f008 fe8f 	bl	2be4a <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2312c:	4631      	mov	r1, r6
   2312e:	4628      	mov	r0, r5
   23130:	f7ff fc80 	bl	22a34 <cancel_sync_locked>
   23134:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23136:	4810      	ldr	r0, [pc, #64]	; (23178 <k_work_cancel_delayable_sync+0xec>)
   23138:	f7fe ffd4 	bl	220e4 <z_spin_unlock_valid>
   2313c:	b940      	cbnz	r0, 23150 <k_work_cancel_delayable_sync+0xc4>
   2313e:	490f      	ldr	r1, [pc, #60]	; (2317c <k_work_cancel_delayable_sync+0xf0>)
   23140:	480c      	ldr	r0, [pc, #48]	; (23174 <k_work_cancel_delayable_sync+0xe8>)
   23142:	22b9      	movs	r2, #185	; 0xb9
   23144:	f005 fb1e 	bl	28784 <assert_print>
   23148:	480c      	ldr	r0, [pc, #48]	; (2317c <k_work_cancel_delayable_sync+0xf0>)
   2314a:	21b9      	movs	r1, #185	; 0xb9
   2314c:	f005 fb13 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23150:	f388 8811 	msr	BASEPRI, r8
   23154:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   23158:	b13c      	cbz	r4, 2316a <k_work_cancel_delayable_sync+0xde>
	return z_impl_k_sem_take(sem, timeout);
   2315a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2315e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23162:	f106 0008 	add.w	r0, r6, #8
   23166:	f7ff fabd 	bl	226e4 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2316a:	4638      	mov	r0, r7
   2316c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23170:	000305a5 	.word	0x000305a5
   23174:	0002d509 	.word	0x0002d509
   23178:	20002bd0 	.word	0x20002bd0
   2317c:	0002d57d 	.word	0x0002d57d

00023180 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   23180:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   23182:	4d07      	ldr	r5, [pc, #28]	; (231a0 <z_reset_time_slice+0x20>)
   23184:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   23186:	b154      	cbz	r4, 2319e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   23188:	f7fc f898 	bl	1f2bc <sys_clock_elapsed>
   2318c:	4b05      	ldr	r3, [pc, #20]	; (231a4 <z_reset_time_slice+0x24>)
   2318e:	4404      	add	r4, r0
   23190:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   23192:	6828      	ldr	r0, [r5, #0]
   23194:	2100      	movs	r1, #0
	}
}
   23196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   2319a:	f001 b9dd 	b.w	24558 <z_set_timeout_expiry>
}
   2319e:	bd38      	pop	{r3, r4, r5, pc}
   231a0:	20002be8 	.word	0x20002be8
   231a4:	20002ba0 	.word	0x20002ba0

000231a8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   231a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   231aa:	4604      	mov	r4, r0
   231ac:	460d      	mov	r5, r1
	__asm__ volatile(
   231ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   231b2:	f3ef 8711 	mrs	r7, BASEPRI
   231b6:	f383 8812 	msr	BASEPRI_MAX, r3
   231ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   231be:	481e      	ldr	r0, [pc, #120]	; (23238 <k_sched_time_slice_set+0x90>)
   231c0:	f7fe ff82 	bl	220c8 <z_spin_lock_valid>
   231c4:	b940      	cbnz	r0, 231d8 <k_sched_time_slice_set+0x30>
   231c6:	491d      	ldr	r1, [pc, #116]	; (2323c <k_sched_time_slice_set+0x94>)
   231c8:	481d      	ldr	r0, [pc, #116]	; (23240 <k_sched_time_slice_set+0x98>)
   231ca:	228e      	movs	r2, #142	; 0x8e
   231cc:	f005 fada 	bl	28784 <assert_print>
   231d0:	481a      	ldr	r0, [pc, #104]	; (2323c <k_sched_time_slice_set+0x94>)
   231d2:	218e      	movs	r1, #142	; 0x8e
   231d4:	f005 facf 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   231d8:	4817      	ldr	r0, [pc, #92]	; (23238 <k_sched_time_slice_set+0x90>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   231da:	4e1a      	ldr	r6, [pc, #104]	; (23244 <k_sched_time_slice_set+0x9c>)
   231dc:	f7fe ff92 	bl	22104 <z_spin_lock_set_owner>
   231e0:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   231e2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   231e6:	f240 30e7 	movw	r0, #999	; 0x3e7
   231ea:	6131      	str	r1, [r6, #16]
   231ec:	2300      	movs	r3, #0
   231ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   231f2:	fbe4 010c 	umlal	r0, r1, r4, ip
   231f6:	f7dd febb 	bl	f70 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   231fa:	2c00      	cmp	r4, #0
   231fc:	4b12      	ldr	r3, [pc, #72]	; (23248 <k_sched_time_slice_set+0xa0>)
   231fe:	dc17      	bgt.n	23230 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   23200:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   23202:	4b12      	ldr	r3, [pc, #72]	; (2324c <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
   23204:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   23206:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   23208:	f7ff ffba 	bl	23180 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2320c:	480a      	ldr	r0, [pc, #40]	; (23238 <k_sched_time_slice_set+0x90>)
   2320e:	f7fe ff69 	bl	220e4 <z_spin_unlock_valid>
   23212:	b940      	cbnz	r0, 23226 <k_sched_time_slice_set+0x7e>
   23214:	4909      	ldr	r1, [pc, #36]	; (2323c <k_sched_time_slice_set+0x94>)
   23216:	480a      	ldr	r0, [pc, #40]	; (23240 <k_sched_time_slice_set+0x98>)
   23218:	22b9      	movs	r2, #185	; 0xb9
   2321a:	f005 fab3 	bl	28784 <assert_print>
   2321e:	4807      	ldr	r0, [pc, #28]	; (2323c <k_sched_time_slice_set+0x94>)
   23220:	21b9      	movs	r1, #185	; 0xb9
   23222:	f005 faa8 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23226:	f387 8811 	msr	BASEPRI, r7
   2322a:	f3bf 8f6f 	isb	sy
	}
}
   2322e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   23230:	2802      	cmp	r0, #2
   23232:	bfb8      	it	lt
   23234:	2002      	movlt	r0, #2
   23236:	e7e3      	b.n	23200 <k_sched_time_slice_set+0x58>
   23238:	20002be0 	.word	0x20002be0
   2323c:	0002d57d 	.word	0x0002d57d
   23240:	0002d509 	.word	0x0002d509
   23244:	20002ba0 	.word	0x20002ba0
   23248:	20002be8 	.word	0x20002be8
   2324c:	20002be4 	.word	0x20002be4

00023250 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   23250:	b538      	push	{r3, r4, r5, lr}
   23252:	4604      	mov	r4, r0
	__asm__ volatile(
   23254:	f04f 0340 	mov.w	r3, #64	; 0x40
   23258:	f3ef 8511 	mrs	r5, BASEPRI
   2325c:	f383 8812 	msr	BASEPRI_MAX, r3
   23260:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23264:	4812      	ldr	r0, [pc, #72]	; (232b0 <z_unpend_thread_no_timeout+0x60>)
   23266:	f7fe ff2f 	bl	220c8 <z_spin_lock_valid>
   2326a:	b940      	cbnz	r0, 2327e <z_unpend_thread_no_timeout+0x2e>
   2326c:	4911      	ldr	r1, [pc, #68]	; (232b4 <z_unpend_thread_no_timeout+0x64>)
   2326e:	4812      	ldr	r0, [pc, #72]	; (232b8 <z_unpend_thread_no_timeout+0x68>)
   23270:	228e      	movs	r2, #142	; 0x8e
   23272:	f005 fa87 	bl	28784 <assert_print>
   23276:	480f      	ldr	r0, [pc, #60]	; (232b4 <z_unpend_thread_no_timeout+0x64>)
   23278:	218e      	movs	r1, #142	; 0x8e
   2327a:	f005 fa7c 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   2327e:	480c      	ldr	r0, [pc, #48]	; (232b0 <z_unpend_thread_no_timeout+0x60>)
   23280:	f7fe ff40 	bl	22104 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   23284:	4620      	mov	r0, r4
   23286:	f000 f8c1 	bl	2340c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2328a:	4809      	ldr	r0, [pc, #36]	; (232b0 <z_unpend_thread_no_timeout+0x60>)
   2328c:	f7fe ff2a 	bl	220e4 <z_spin_unlock_valid>
   23290:	b940      	cbnz	r0, 232a4 <z_unpend_thread_no_timeout+0x54>
   23292:	4908      	ldr	r1, [pc, #32]	; (232b4 <z_unpend_thread_no_timeout+0x64>)
   23294:	4808      	ldr	r0, [pc, #32]	; (232b8 <z_unpend_thread_no_timeout+0x68>)
   23296:	22b9      	movs	r2, #185	; 0xb9
   23298:	f005 fa74 	bl	28784 <assert_print>
   2329c:	4805      	ldr	r0, [pc, #20]	; (232b4 <z_unpend_thread_no_timeout+0x64>)
   2329e:	21b9      	movs	r1, #185	; 0xb9
   232a0:	f005 fa69 	bl	28776 <assert_post_action>
	__asm__ volatile(
   232a4:	f385 8811 	msr	BASEPRI, r5
   232a8:	f3bf 8f6f 	isb	sy
	}
}
   232ac:	bd38      	pop	{r3, r4, r5, pc}
   232ae:	bf00      	nop
   232b0:	20002be0 	.word	0x20002be0
   232b4:	0002d57d 	.word	0x0002d57d
   232b8:	0002d509 	.word	0x0002d509

000232bc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   232bc:	b510      	push	{r4, lr}
   232be:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   232c0:	460c      	mov	r4, r1
   232c2:	b9c1      	cbnz	r1, 232f6 <z_reschedule+0x3a>
   232c4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   232c8:	b9aa      	cbnz	r2, 232f6 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   232ca:	4a14      	ldr	r2, [pc, #80]	; (2331c <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   232cc:	69d1      	ldr	r1, [r2, #28]
   232ce:	6892      	ldr	r2, [r2, #8]
   232d0:	4291      	cmp	r1, r2
   232d2:	d010      	beq.n	232f6 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   232d4:	f7fe ff06 	bl	220e4 <z_spin_unlock_valid>
   232d8:	b940      	cbnz	r0, 232ec <z_reschedule+0x30>
   232da:	4911      	ldr	r1, [pc, #68]	; (23320 <z_reschedule+0x64>)
   232dc:	4811      	ldr	r0, [pc, #68]	; (23324 <z_reschedule+0x68>)
   232de:	22d0      	movs	r2, #208	; 0xd0
   232e0:	f005 fa50 	bl	28784 <assert_print>
   232e4:	480e      	ldr	r0, [pc, #56]	; (23320 <z_reschedule+0x64>)
   232e6:	21d0      	movs	r1, #208	; 0xd0
   232e8:	f005 fa45 	bl	28776 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   232ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   232f0:	2000      	movs	r0, #0
   232f2:	f7f1 ba4d 	b.w	14790 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   232f6:	4618      	mov	r0, r3
   232f8:	f7fe fef4 	bl	220e4 <z_spin_unlock_valid>
   232fc:	b940      	cbnz	r0, 23310 <z_reschedule+0x54>
   232fe:	4908      	ldr	r1, [pc, #32]	; (23320 <z_reschedule+0x64>)
   23300:	4808      	ldr	r0, [pc, #32]	; (23324 <z_reschedule+0x68>)
   23302:	22b9      	movs	r2, #185	; 0xb9
   23304:	f005 fa3e 	bl	28784 <assert_print>
   23308:	4805      	ldr	r0, [pc, #20]	; (23320 <z_reschedule+0x64>)
   2330a:	21b9      	movs	r1, #185	; 0xb9
   2330c:	f005 fa33 	bl	28776 <assert_post_action>
   23310:	f384 8811 	msr	BASEPRI, r4
   23314:	f3bf 8f6f 	isb	sy
   23318:	bd10      	pop	{r4, pc}
   2331a:	bf00      	nop
   2331c:	20002ba0 	.word	0x20002ba0
   23320:	0002d57d 	.word	0x0002d57d
   23324:	0002d509 	.word	0x0002d509

00023328 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   23328:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2332a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2332e:	f3ef 8511 	mrs	r5, BASEPRI
   23332:	f383 8812 	msr	BASEPRI_MAX, r3
   23336:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2333a:	4820      	ldr	r0, [pc, #128]	; (233bc <k_sched_lock+0x94>)
   2333c:	f7fe fec4 	bl	220c8 <z_spin_lock_valid>
   23340:	b940      	cbnz	r0, 23354 <k_sched_lock+0x2c>
   23342:	491f      	ldr	r1, [pc, #124]	; (233c0 <k_sched_lock+0x98>)
   23344:	481f      	ldr	r0, [pc, #124]	; (233c4 <k_sched_lock+0x9c>)
   23346:	228e      	movs	r2, #142	; 0x8e
   23348:	f005 fa1c 	bl	28784 <assert_print>
   2334c:	481c      	ldr	r0, [pc, #112]	; (233c0 <k_sched_lock+0x98>)
   2334e:	218e      	movs	r1, #142	; 0x8e
   23350:	f005 fa11 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   23354:	4819      	ldr	r0, [pc, #100]	; (233bc <k_sched_lock+0x94>)
   23356:	f7fe fed5 	bl	22104 <z_spin_lock_set_owner>
   2335a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2335e:	b143      	cbz	r3, 23372 <k_sched_lock+0x4a>
   23360:	4919      	ldr	r1, [pc, #100]	; (233c8 <k_sched_lock+0xa0>)
   23362:	4818      	ldr	r0, [pc, #96]	; (233c4 <k_sched_lock+0x9c>)
   23364:	22fd      	movs	r2, #253	; 0xfd
   23366:	f005 fa0d 	bl	28784 <assert_print>
   2336a:	4817      	ldr	r0, [pc, #92]	; (233c8 <k_sched_lock+0xa0>)
   2336c:	21fd      	movs	r1, #253	; 0xfd
   2336e:	f005 fa02 	bl	28776 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   23372:	4c16      	ldr	r4, [pc, #88]	; (233cc <k_sched_lock+0xa4>)
   23374:	68a3      	ldr	r3, [r4, #8]
   23376:	7bdb      	ldrb	r3, [r3, #15]
   23378:	2b01      	cmp	r3, #1
   2337a:	d108      	bne.n	2338e <k_sched_lock+0x66>
   2337c:	4912      	ldr	r1, [pc, #72]	; (233c8 <k_sched_lock+0xa0>)
   2337e:	4811      	ldr	r0, [pc, #68]	; (233c4 <k_sched_lock+0x9c>)
   23380:	22fe      	movs	r2, #254	; 0xfe
   23382:	f005 f9ff 	bl	28784 <assert_print>
   23386:	4810      	ldr	r0, [pc, #64]	; (233c8 <k_sched_lock+0xa0>)
   23388:	21fe      	movs	r1, #254	; 0xfe
   2338a:	f005 f9f4 	bl	28776 <assert_post_action>
	--_current->base.sched_locked;
   2338e:	68a2      	ldr	r2, [r4, #8]
   23390:	7bd3      	ldrb	r3, [r2, #15]
   23392:	3b01      	subs	r3, #1
   23394:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23396:	4809      	ldr	r0, [pc, #36]	; (233bc <k_sched_lock+0x94>)
   23398:	f7fe fea4 	bl	220e4 <z_spin_unlock_valid>
   2339c:	b940      	cbnz	r0, 233b0 <k_sched_lock+0x88>
   2339e:	4908      	ldr	r1, [pc, #32]	; (233c0 <k_sched_lock+0x98>)
   233a0:	4808      	ldr	r0, [pc, #32]	; (233c4 <k_sched_lock+0x9c>)
   233a2:	22b9      	movs	r2, #185	; 0xb9
   233a4:	f005 f9ee 	bl	28784 <assert_print>
   233a8:	4805      	ldr	r0, [pc, #20]	; (233c0 <k_sched_lock+0x98>)
   233aa:	21b9      	movs	r1, #185	; 0xb9
   233ac:	f005 f9e3 	bl	28776 <assert_post_action>
	__asm__ volatile(
   233b0:	f385 8811 	msr	BASEPRI, r5
   233b4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   233b8:	bd38      	pop	{r3, r4, r5, pc}
   233ba:	bf00      	nop
   233bc:	20002be0 	.word	0x20002be0
   233c0:	0002d57d 	.word	0x0002d57d
   233c4:	0002d509 	.word	0x0002d509
   233c8:	000305c6 	.word	0x000305c6
   233cc:	20002ba0 	.word	0x20002ba0

000233d0 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   233d0:	4b0b      	ldr	r3, [pc, #44]	; (23400 <z_priq_dumb_remove+0x30>)
   233d2:	4299      	cmp	r1, r3
{
   233d4:	b510      	push	{r4, lr}
   233d6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   233d8:	d10a      	bne.n	233f0 <z_priq_dumb_remove+0x20>
   233da:	490a      	ldr	r1, [pc, #40]	; (23404 <z_priq_dumb_remove+0x34>)
   233dc:	480a      	ldr	r0, [pc, #40]	; (23408 <z_priq_dumb_remove+0x38>)
   233de:	f240 4262 	movw	r2, #1122	; 0x462
   233e2:	f005 f9cf 	bl	28784 <assert_print>
   233e6:	4807      	ldr	r0, [pc, #28]	; (23404 <z_priq_dumb_remove+0x34>)
   233e8:	f240 4162 	movw	r1, #1122	; 0x462
   233ec:	f005 f9c3 	bl	28776 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   233f0:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   233f4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   233f6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   233f8:	2300      	movs	r3, #0
	node->prev = NULL;
   233fa:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   233fe:	bd10      	pop	{r4, pc}
   23400:	20001f98 	.word	0x20001f98
   23404:	000305f1 	.word	0x000305f1
   23408:	0002d509 	.word	0x0002d509

0002340c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   2340c:	6883      	ldr	r3, [r0, #8]
{
   2340e:	b510      	push	{r4, lr}
   23410:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   23412:	b953      	cbnz	r3, 2342a <unpend_thread_no_timeout+0x1e>
   23414:	490a      	ldr	r1, [pc, #40]	; (23440 <unpend_thread_no_timeout+0x34>)
   23416:	480b      	ldr	r0, [pc, #44]	; (23444 <unpend_thread_no_timeout+0x38>)
   23418:	f44f 7235 	mov.w	r2, #724	; 0x2d4
   2341c:	f005 f9b2 	bl	28784 <assert_print>
   23420:	4807      	ldr	r0, [pc, #28]	; (23440 <unpend_thread_no_timeout+0x34>)
   23422:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   23426:	f005 f9a6 	bl	28776 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2342a:	68a0      	ldr	r0, [r4, #8]
   2342c:	4621      	mov	r1, r4
   2342e:	f7ff ffcf 	bl	233d0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   23432:	7b63      	ldrb	r3, [r4, #13]
   23434:	f023 0302 	bic.w	r3, r3, #2
   23438:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2343a:	2300      	movs	r3, #0
   2343c:	60a3      	str	r3, [r4, #8]
}
   2343e:	bd10      	pop	{r4, pc}
   23440:	000305f1 	.word	0x000305f1
   23444:	0002d509 	.word	0x0002d509

00023448 <z_unpend_thread>:
{
   23448:	b538      	push	{r3, r4, r5, lr}
   2344a:	4604      	mov	r4, r0
	__asm__ volatile(
   2344c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23450:	f3ef 8511 	mrs	r5, BASEPRI
   23454:	f383 8812 	msr	BASEPRI_MAX, r3
   23458:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2345c:	4814      	ldr	r0, [pc, #80]	; (234b0 <z_unpend_thread+0x68>)
   2345e:	f7fe fe33 	bl	220c8 <z_spin_lock_valid>
   23462:	b940      	cbnz	r0, 23476 <z_unpend_thread+0x2e>
   23464:	4913      	ldr	r1, [pc, #76]	; (234b4 <z_unpend_thread+0x6c>)
   23466:	4814      	ldr	r0, [pc, #80]	; (234b8 <z_unpend_thread+0x70>)
   23468:	228e      	movs	r2, #142	; 0x8e
   2346a:	f005 f98b 	bl	28784 <assert_print>
   2346e:	4811      	ldr	r0, [pc, #68]	; (234b4 <z_unpend_thread+0x6c>)
   23470:	218e      	movs	r1, #142	; 0x8e
   23472:	f005 f980 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   23476:	480e      	ldr	r0, [pc, #56]	; (234b0 <z_unpend_thread+0x68>)
   23478:	f7fe fe44 	bl	22104 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   2347c:	4620      	mov	r0, r4
   2347e:	f7ff ffc5 	bl	2340c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23482:	480b      	ldr	r0, [pc, #44]	; (234b0 <z_unpend_thread+0x68>)
   23484:	f7fe fe2e 	bl	220e4 <z_spin_unlock_valid>
   23488:	b940      	cbnz	r0, 2349c <z_unpend_thread+0x54>
   2348a:	490a      	ldr	r1, [pc, #40]	; (234b4 <z_unpend_thread+0x6c>)
   2348c:	480a      	ldr	r0, [pc, #40]	; (234b8 <z_unpend_thread+0x70>)
   2348e:	22b9      	movs	r2, #185	; 0xb9
   23490:	f005 f978 	bl	28784 <assert_print>
   23494:	4807      	ldr	r0, [pc, #28]	; (234b4 <z_unpend_thread+0x6c>)
   23496:	21b9      	movs	r1, #185	; 0xb9
   23498:	f005 f96d 	bl	28776 <assert_post_action>
	__asm__ volatile(
   2349c:	f385 8811 	msr	BASEPRI, r5
   234a0:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   234a4:	f104 0018 	add.w	r0, r4, #24
}
   234a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   234ac:	f000 bfe2 	b.w	24474 <z_abort_timeout>
   234b0:	20002be0 	.word	0x20002be0
   234b4:	0002d57d 	.word	0x0002d57d
   234b8:	0002d509 	.word	0x0002d509

000234bc <update_cache>:
{
   234bc:	b538      	push	{r3, r4, r5, lr}
   234be:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   234c0:	4812      	ldr	r0, [pc, #72]	; (2350c <update_cache+0x50>)
   234c2:	4d13      	ldr	r5, [pc, #76]	; (23510 <update_cache+0x54>)
   234c4:	f008 fd24 	bl	2bf10 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   234c8:	4604      	mov	r4, r0
   234ca:	b900      	cbnz	r0, 234ce <update_cache+0x12>
   234cc:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   234ce:	b9aa      	cbnz	r2, 234fc <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   234d0:	68ab      	ldr	r3, [r5, #8]
   234d2:	b943      	cbnz	r3, 234e6 <update_cache+0x2a>
   234d4:	490f      	ldr	r1, [pc, #60]	; (23514 <update_cache+0x58>)
   234d6:	4810      	ldr	r0, [pc, #64]	; (23518 <update_cache+0x5c>)
   234d8:	2289      	movs	r2, #137	; 0x89
   234da:	f005 f953 	bl	28784 <assert_print>
   234de:	480d      	ldr	r0, [pc, #52]	; (23514 <update_cache+0x58>)
   234e0:	2189      	movs	r1, #137	; 0x89
   234e2:	f005 f948 	bl	28776 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   234e6:	68ab      	ldr	r3, [r5, #8]
   234e8:	7b5a      	ldrb	r2, [r3, #13]
   234ea:	06d2      	lsls	r2, r2, #27
   234ec:	d106      	bne.n	234fc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   234ee:	69a2      	ldr	r2, [r4, #24]
   234f0:	b922      	cbnz	r2, 234fc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   234f2:	89da      	ldrh	r2, [r3, #14]
   234f4:	2a7f      	cmp	r2, #127	; 0x7f
   234f6:	d901      	bls.n	234fc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   234f8:	61eb      	str	r3, [r5, #28]
}
   234fa:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   234fc:	68ab      	ldr	r3, [r5, #8]
   234fe:	42a3      	cmp	r3, r4
   23500:	d002      	beq.n	23508 <update_cache+0x4c>
			z_reset_time_slice(thread);
   23502:	4620      	mov	r0, r4
   23504:	f7ff fe3c 	bl	23180 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   23508:	61ec      	str	r4, [r5, #28]
}
   2350a:	e7f6      	b.n	234fa <update_cache+0x3e>
   2350c:	20002bc0 	.word	0x20002bc0
   23510:	20002ba0 	.word	0x20002ba0
   23514:	000305f1 	.word	0x000305f1
   23518:	0002d509 	.word	0x0002d509

0002351c <move_thread_to_end_of_prio_q>:
{
   2351c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2351e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   23522:	7b43      	ldrb	r3, [r0, #13]
   23524:	2a00      	cmp	r2, #0
{
   23526:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   23528:	da06      	bge.n	23538 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2352a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2352e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23530:	4601      	mov	r1, r0
   23532:	481d      	ldr	r0, [pc, #116]	; (235a8 <move_thread_to_end_of_prio_q+0x8c>)
   23534:	f7ff ff4c 	bl	233d0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23538:	7b63      	ldrb	r3, [r4, #13]
   2353a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2353e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23540:	4b1a      	ldr	r3, [pc, #104]	; (235ac <move_thread_to_end_of_prio_q+0x90>)
   23542:	429c      	cmp	r4, r3
   23544:	d108      	bne.n	23558 <move_thread_to_end_of_prio_q+0x3c>
   23546:	491a      	ldr	r1, [pc, #104]	; (235b0 <move_thread_to_end_of_prio_q+0x94>)
   23548:	481a      	ldr	r0, [pc, #104]	; (235b4 <move_thread_to_end_of_prio_q+0x98>)
   2354a:	22ba      	movs	r2, #186	; 0xba
   2354c:	f005 f91a 	bl	28784 <assert_print>
   23550:	4817      	ldr	r0, [pc, #92]	; (235b0 <move_thread_to_end_of_prio_q+0x94>)
   23552:	21ba      	movs	r1, #186	; 0xba
   23554:	f005 f90f 	bl	28776 <assert_post_action>
	return list->head == list;
   23558:	4a17      	ldr	r2, [pc, #92]	; (235b8 <move_thread_to_end_of_prio_q+0x9c>)
	return (node == list->tail) ? NULL : node->next;
   2355a:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2355e:	f102 0520 	add.w	r5, r2, #32
   23562:	42ab      	cmp	r3, r5
   23564:	d01b      	beq.n	2359e <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23566:	b1d3      	cbz	r3, 2359e <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   23568:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2356c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   23570:	428e      	cmp	r6, r1
   23572:	d00f      	beq.n	23594 <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   23574:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   23576:	2900      	cmp	r1, #0
   23578:	dd0c      	ble.n	23594 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   2357a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2357c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   23580:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   23582:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   23584:	6890      	ldr	r0, [r2, #8]
   23586:	1b03      	subs	r3, r0, r4
   23588:	4258      	negs	r0, r3
}
   2358a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2358e:	4158      	adcs	r0, r3
   23590:	f7ff bf94 	b.w	234bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23594:	4283      	cmp	r3, r0
   23596:	d002      	beq.n	2359e <move_thread_to_end_of_prio_q+0x82>
   23598:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2359a:	2b00      	cmp	r3, #0
   2359c:	d1e6      	bne.n	2356c <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   2359e:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   235a2:	6004      	str	r4, [r0, #0]
	list->tail = node;
   235a4:	6254      	str	r4, [r2, #36]	; 0x24
}
   235a6:	e7ed      	b.n	23584 <move_thread_to_end_of_prio_q+0x68>
   235a8:	20002bc0 	.word	0x20002bc0
   235ac:	20001f98 	.word	0x20001f98
   235b0:	000305f1 	.word	0x000305f1
   235b4:	0002d509 	.word	0x0002d509
   235b8:	20002ba0 	.word	0x20002ba0

000235bc <z_time_slice>:
{
   235bc:	b570      	push	{r4, r5, r6, lr}
   235be:	4605      	mov	r5, r0
	__asm__ volatile(
   235c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   235c4:	f3ef 8611 	mrs	r6, BASEPRI
   235c8:	f383 8812 	msr	BASEPRI_MAX, r3
   235cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   235d0:	4825      	ldr	r0, [pc, #148]	; (23668 <z_time_slice+0xac>)
   235d2:	f7fe fd79 	bl	220c8 <z_spin_lock_valid>
   235d6:	b940      	cbnz	r0, 235ea <z_time_slice+0x2e>
   235d8:	4924      	ldr	r1, [pc, #144]	; (2366c <z_time_slice+0xb0>)
   235da:	4825      	ldr	r0, [pc, #148]	; (23670 <z_time_slice+0xb4>)
   235dc:	228e      	movs	r2, #142	; 0x8e
   235de:	f005 f8d1 	bl	28784 <assert_print>
   235e2:	4822      	ldr	r0, [pc, #136]	; (2366c <z_time_slice+0xb0>)
   235e4:	218e      	movs	r1, #142	; 0x8e
   235e6:	f005 f8c6 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   235ea:	481f      	ldr	r0, [pc, #124]	; (23668 <z_time_slice+0xac>)
   235ec:	f7fe fd8a 	bl	22104 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   235f0:	4b20      	ldr	r3, [pc, #128]	; (23674 <z_time_slice+0xb8>)
   235f2:	4a21      	ldr	r2, [pc, #132]	; (23678 <z_time_slice+0xbc>)
   235f4:	689c      	ldr	r4, [r3, #8]
   235f6:	6811      	ldr	r1, [r2, #0]
   235f8:	428c      	cmp	r4, r1
   235fa:	d114      	bne.n	23626 <z_time_slice+0x6a>
	z_reset_time_slice(curr);
   235fc:	4620      	mov	r0, r4
   235fe:	f7ff fdbf 	bl	23180 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23602:	4819      	ldr	r0, [pc, #100]	; (23668 <z_time_slice+0xac>)
   23604:	f7fe fd6e 	bl	220e4 <z_spin_unlock_valid>
   23608:	b940      	cbnz	r0, 2361c <z_time_slice+0x60>
   2360a:	4918      	ldr	r1, [pc, #96]	; (2366c <z_time_slice+0xb0>)
   2360c:	4818      	ldr	r0, [pc, #96]	; (23670 <z_time_slice+0xb4>)
   2360e:	22b9      	movs	r2, #185	; 0xb9
   23610:	f005 f8b8 	bl	28784 <assert_print>
   23614:	4815      	ldr	r0, [pc, #84]	; (2366c <z_time_slice+0xb0>)
   23616:	21b9      	movs	r1, #185	; 0xb9
   23618:	f005 f8ad 	bl	28776 <assert_post_action>
	__asm__ volatile(
   2361c:	f386 8811 	msr	BASEPRI, r6
   23620:	f3bf 8f6f 	isb	sy
}
   23624:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   23626:	2100      	movs	r1, #0
   23628:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   2362a:	4a14      	ldr	r2, [pc, #80]	; (2367c <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
   2362c:	6812      	ldr	r2, [r2, #0]
   2362e:	b1c2      	cbz	r2, 23662 <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
   23630:	89e2      	ldrh	r2, [r4, #14]
   23632:	2a7f      	cmp	r2, #127	; 0x7f
   23634:	d815      	bhi.n	23662 <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
   23636:	7b62      	ldrb	r2, [r4, #13]
   23638:	06d2      	lsls	r2, r2, #27
   2363a:	d112      	bne.n	23662 <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2363c:	4a10      	ldr	r2, [pc, #64]	; (23680 <z_time_slice+0xc4>)
   2363e:	f994 100e 	ldrsb.w	r1, [r4, #14]
   23642:	6812      	ldr	r2, [r2, #0]
   23644:	4291      	cmp	r1, r2
   23646:	db0c      	blt.n	23662 <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
   23648:	4a0e      	ldr	r2, [pc, #56]	; (23684 <z_time_slice+0xc8>)
   2364a:	4294      	cmp	r4, r2
   2364c:	d009      	beq.n	23662 <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
   2364e:	691a      	ldr	r2, [r3, #16]
   23650:	42aa      	cmp	r2, r5
   23652:	dc03      	bgt.n	2365c <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
   23654:	4620      	mov	r0, r4
   23656:	f7ff ff61 	bl	2351c <move_thread_to_end_of_prio_q>
   2365a:	e7cf      	b.n	235fc <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   2365c:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   2365e:	611a      	str	r2, [r3, #16]
   23660:	e7cf      	b.n	23602 <z_time_slice+0x46>
   23662:	2200      	movs	r2, #0
   23664:	e7fb      	b.n	2365e <z_time_slice+0xa2>
   23666:	bf00      	nop
   23668:	20002be0 	.word	0x20002be0
   2366c:	0002d57d 	.word	0x0002d57d
   23670:	0002d509 	.word	0x0002d509
   23674:	20002ba0 	.word	0x20002ba0
   23678:	20002bdc 	.word	0x20002bdc
   2367c:	20002be8 	.word	0x20002be8
   23680:	20002be4 	.word	0x20002be4
   23684:	20001f98 	.word	0x20001f98

00023688 <ready_thread>:
{
   23688:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2368a:	f990 200d 	ldrsb.w	r2, [r0, #13]
   2368e:	7b43      	ldrb	r3, [r0, #13]
   23690:	2a00      	cmp	r2, #0
{
   23692:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   23694:	db38      	blt.n	23708 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23696:	06da      	lsls	r2, r3, #27
   23698:	d136      	bne.n	23708 <ready_thread+0x80>
   2369a:	6982      	ldr	r2, [r0, #24]
   2369c:	2a00      	cmp	r2, #0
   2369e:	d133      	bne.n	23708 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   236a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   236a4:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   236a6:	4b19      	ldr	r3, [pc, #100]	; (2370c <ready_thread+0x84>)
   236a8:	4298      	cmp	r0, r3
   236aa:	d108      	bne.n	236be <ready_thread+0x36>
   236ac:	4918      	ldr	r1, [pc, #96]	; (23710 <ready_thread+0x88>)
   236ae:	4819      	ldr	r0, [pc, #100]	; (23714 <ready_thread+0x8c>)
   236b0:	22ba      	movs	r2, #186	; 0xba
   236b2:	f005 f867 	bl	28784 <assert_print>
   236b6:	4816      	ldr	r0, [pc, #88]	; (23710 <ready_thread+0x88>)
   236b8:	21ba      	movs	r1, #186	; 0xba
   236ba:	f005 f85c 	bl	28776 <assert_post_action>
	return list->head == list;
   236be:	4a16      	ldr	r2, [pc, #88]	; (23718 <ready_thread+0x90>)
	return (node == list->tail) ? NULL : node->next;
   236c0:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   236c4:	f102 0520 	add.w	r5, r2, #32
   236c8:	42ab      	cmp	r3, r5
   236ca:	d018      	beq.n	236fe <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   236cc:	b1bb      	cbz	r3, 236fe <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   236ce:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   236d2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   236d6:	428e      	cmp	r6, r1
   236d8:	d00c      	beq.n	236f4 <ready_thread+0x6c>
		return b2 - b1;
   236da:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   236dc:	2900      	cmp	r1, #0
   236de:	dd09      	ble.n	236f4 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   236e0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   236e2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   236e6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   236e8:	605c      	str	r4, [r3, #4]
}
   236ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   236ee:	2000      	movs	r0, #0
   236f0:	f7ff bee4 	b.w	234bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   236f4:	4298      	cmp	r0, r3
   236f6:	d002      	beq.n	236fe <ready_thread+0x76>
   236f8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   236fa:	2b00      	cmp	r3, #0
   236fc:	d1e9      	bne.n	236d2 <ready_thread+0x4a>
	node->prev = tail;
   236fe:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   23702:	6004      	str	r4, [r0, #0]
	list->tail = node;
   23704:	6254      	str	r4, [r2, #36]	; 0x24
}
   23706:	e7f0      	b.n	236ea <ready_thread+0x62>
}
   23708:	bd70      	pop	{r4, r5, r6, pc}
   2370a:	bf00      	nop
   2370c:	20001f98 	.word	0x20001f98
   23710:	000305f1 	.word	0x000305f1
   23714:	0002d509 	.word	0x0002d509
   23718:	20002ba0 	.word	0x20002ba0

0002371c <z_ready_thread>:
{
   2371c:	b538      	push	{r3, r4, r5, lr}
   2371e:	4604      	mov	r4, r0
	__asm__ volatile(
   23720:	f04f 0340 	mov.w	r3, #64	; 0x40
   23724:	f3ef 8511 	mrs	r5, BASEPRI
   23728:	f383 8812 	msr	BASEPRI_MAX, r3
   2372c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23730:	4812      	ldr	r0, [pc, #72]	; (2377c <z_ready_thread+0x60>)
   23732:	f7fe fcc9 	bl	220c8 <z_spin_lock_valid>
   23736:	b940      	cbnz	r0, 2374a <z_ready_thread+0x2e>
   23738:	4911      	ldr	r1, [pc, #68]	; (23780 <z_ready_thread+0x64>)
   2373a:	4812      	ldr	r0, [pc, #72]	; (23784 <z_ready_thread+0x68>)
   2373c:	228e      	movs	r2, #142	; 0x8e
   2373e:	f005 f821 	bl	28784 <assert_print>
   23742:	480f      	ldr	r0, [pc, #60]	; (23780 <z_ready_thread+0x64>)
   23744:	218e      	movs	r1, #142	; 0x8e
   23746:	f005 f816 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   2374a:	480c      	ldr	r0, [pc, #48]	; (2377c <z_ready_thread+0x60>)
   2374c:	f7fe fcda 	bl	22104 <z_spin_lock_set_owner>
			ready_thread(thread);
   23750:	4620      	mov	r0, r4
   23752:	f7ff ff99 	bl	23688 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23756:	4809      	ldr	r0, [pc, #36]	; (2377c <z_ready_thread+0x60>)
   23758:	f7fe fcc4 	bl	220e4 <z_spin_unlock_valid>
   2375c:	b940      	cbnz	r0, 23770 <z_ready_thread+0x54>
   2375e:	4908      	ldr	r1, [pc, #32]	; (23780 <z_ready_thread+0x64>)
   23760:	4808      	ldr	r0, [pc, #32]	; (23784 <z_ready_thread+0x68>)
   23762:	22b9      	movs	r2, #185	; 0xb9
   23764:	f005 f80e 	bl	28784 <assert_print>
   23768:	4805      	ldr	r0, [pc, #20]	; (23780 <z_ready_thread+0x64>)
   2376a:	21b9      	movs	r1, #185	; 0xb9
   2376c:	f005 f803 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23770:	f385 8811 	msr	BASEPRI, r5
   23774:	f3bf 8f6f 	isb	sy
}
   23778:	bd38      	pop	{r3, r4, r5, pc}
   2377a:	bf00      	nop
   2377c:	20002be0 	.word	0x20002be0
   23780:	0002d57d 	.word	0x0002d57d
   23784:	0002d509 	.word	0x0002d509

00023788 <z_sched_start>:
{
   23788:	b538      	push	{r3, r4, r5, lr}
   2378a:	4604      	mov	r4, r0
	__asm__ volatile(
   2378c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23790:	f3ef 8511 	mrs	r5, BASEPRI
   23794:	f383 8812 	msr	BASEPRI_MAX, r3
   23798:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2379c:	4818      	ldr	r0, [pc, #96]	; (23800 <z_sched_start+0x78>)
   2379e:	f7fe fc93 	bl	220c8 <z_spin_lock_valid>
   237a2:	b940      	cbnz	r0, 237b6 <z_sched_start+0x2e>
   237a4:	4917      	ldr	r1, [pc, #92]	; (23804 <z_sched_start+0x7c>)
   237a6:	4818      	ldr	r0, [pc, #96]	; (23808 <z_sched_start+0x80>)
   237a8:	228e      	movs	r2, #142	; 0x8e
   237aa:	f004 ffeb 	bl	28784 <assert_print>
   237ae:	4815      	ldr	r0, [pc, #84]	; (23804 <z_sched_start+0x7c>)
   237b0:	218e      	movs	r1, #142	; 0x8e
   237b2:	f004 ffe0 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   237b6:	4812      	ldr	r0, [pc, #72]	; (23800 <z_sched_start+0x78>)
   237b8:	f7fe fca4 	bl	22104 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   237bc:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   237be:	075a      	lsls	r2, r3, #29
   237c0:	d411      	bmi.n	237e6 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237c2:	480f      	ldr	r0, [pc, #60]	; (23800 <z_sched_start+0x78>)
   237c4:	f7fe fc8e 	bl	220e4 <z_spin_unlock_valid>
   237c8:	b940      	cbnz	r0, 237dc <z_sched_start+0x54>
   237ca:	490e      	ldr	r1, [pc, #56]	; (23804 <z_sched_start+0x7c>)
   237cc:	480e      	ldr	r0, [pc, #56]	; (23808 <z_sched_start+0x80>)
   237ce:	22b9      	movs	r2, #185	; 0xb9
   237d0:	f004 ffd8 	bl	28784 <assert_print>
   237d4:	480b      	ldr	r0, [pc, #44]	; (23804 <z_sched_start+0x7c>)
   237d6:	21b9      	movs	r1, #185	; 0xb9
   237d8:	f004 ffcd 	bl	28776 <assert_post_action>
	__asm__ volatile(
   237dc:	f385 8811 	msr	BASEPRI, r5
   237e0:	f3bf 8f6f 	isb	sy
}
   237e4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   237e6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   237ea:	4620      	mov	r0, r4
   237ec:	7363      	strb	r3, [r4, #13]
   237ee:	f7ff ff4b 	bl	23688 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   237f2:	4629      	mov	r1, r5
   237f4:	4802      	ldr	r0, [pc, #8]	; (23800 <z_sched_start+0x78>)
}
   237f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   237fa:	f7ff bd5f 	b.w	232bc <z_reschedule>
   237fe:	bf00      	nop
   23800:	20002be0 	.word	0x20002be0
   23804:	0002d57d 	.word	0x0002d57d
   23808:	0002d509 	.word	0x0002d509

0002380c <z_thread_timeout>:
{
   2380c:	b570      	push	{r4, r5, r6, lr}
   2380e:	4604      	mov	r4, r0
	__asm__ volatile(
   23810:	f04f 0340 	mov.w	r3, #64	; 0x40
   23814:	f3ef 8611 	mrs	r6, BASEPRI
   23818:	f383 8812 	msr	BASEPRI_MAX, r3
   2381c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23820:	481b      	ldr	r0, [pc, #108]	; (23890 <z_thread_timeout+0x84>)
   23822:	f7fe fc51 	bl	220c8 <z_spin_lock_valid>
   23826:	b940      	cbnz	r0, 2383a <z_thread_timeout+0x2e>
   23828:	491a      	ldr	r1, [pc, #104]	; (23894 <z_thread_timeout+0x88>)
   2382a:	481b      	ldr	r0, [pc, #108]	; (23898 <z_thread_timeout+0x8c>)
   2382c:	228e      	movs	r2, #142	; 0x8e
   2382e:	f004 ffa9 	bl	28784 <assert_print>
   23832:	4818      	ldr	r0, [pc, #96]	; (23894 <z_thread_timeout+0x88>)
   23834:	218e      	movs	r1, #142	; 0x8e
   23836:	f004 ff9e 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   2383a:	4815      	ldr	r0, [pc, #84]	; (23890 <z_thread_timeout+0x84>)
   2383c:	f7fe fc62 	bl	22104 <z_spin_lock_set_owner>
		if (!killed) {
   23840:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   23844:	f013 0f28 	tst.w	r3, #40	; 0x28
   23848:	d110      	bne.n	2386c <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   2384a:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2384e:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   23852:	b113      	cbz	r3, 2385a <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   23854:	4628      	mov	r0, r5
   23856:	f7ff fdd9 	bl	2340c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2385a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2385e:	f023 0314 	bic.w	r3, r3, #20
   23862:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   23866:	4628      	mov	r0, r5
   23868:	f7ff ff0e 	bl	23688 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2386c:	4808      	ldr	r0, [pc, #32]	; (23890 <z_thread_timeout+0x84>)
   2386e:	f7fe fc39 	bl	220e4 <z_spin_unlock_valid>
   23872:	b940      	cbnz	r0, 23886 <z_thread_timeout+0x7a>
   23874:	4907      	ldr	r1, [pc, #28]	; (23894 <z_thread_timeout+0x88>)
   23876:	4808      	ldr	r0, [pc, #32]	; (23898 <z_thread_timeout+0x8c>)
   23878:	22b9      	movs	r2, #185	; 0xb9
   2387a:	f004 ff83 	bl	28784 <assert_print>
   2387e:	4805      	ldr	r0, [pc, #20]	; (23894 <z_thread_timeout+0x88>)
   23880:	21b9      	movs	r1, #185	; 0xb9
   23882:	f004 ff78 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23886:	f386 8811 	msr	BASEPRI, r6
   2388a:	f3bf 8f6f 	isb	sy
}
   2388e:	bd70      	pop	{r4, r5, r6, pc}
   23890:	20002be0 	.word	0x20002be0
   23894:	0002d57d 	.word	0x0002d57d
   23898:	0002d509 	.word	0x0002d509

0002389c <unready_thread>:
{
   2389c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2389e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   238a2:	7b43      	ldrb	r3, [r0, #13]
   238a4:	2a00      	cmp	r2, #0
{
   238a6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   238a8:	da06      	bge.n	238b8 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   238aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   238ae:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   238b0:	4601      	mov	r1, r0
   238b2:	4806      	ldr	r0, [pc, #24]	; (238cc <unready_thread+0x30>)
   238b4:	f7ff fd8c 	bl	233d0 <z_priq_dumb_remove>
	update_cache(thread == _current);
   238b8:	4b05      	ldr	r3, [pc, #20]	; (238d0 <unready_thread+0x34>)
   238ba:	6898      	ldr	r0, [r3, #8]
   238bc:	1b03      	subs	r3, r0, r4
   238be:	4258      	negs	r0, r3
}
   238c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   238c4:	4158      	adcs	r0, r3
   238c6:	f7ff bdf9 	b.w	234bc <update_cache>
   238ca:	bf00      	nop
   238cc:	20002bc0 	.word	0x20002bc0
   238d0:	20002ba0 	.word	0x20002ba0

000238d4 <add_to_waitq_locked>:
{
   238d4:	b538      	push	{r3, r4, r5, lr}
   238d6:	4604      	mov	r4, r0
   238d8:	460d      	mov	r5, r1
	unready_thread(thread);
   238da:	f7ff ffdf 	bl	2389c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   238de:	7b63      	ldrb	r3, [r4, #13]
   238e0:	f043 0302 	orr.w	r3, r3, #2
   238e4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   238e6:	b1f5      	cbz	r5, 23926 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   238e8:	4b15      	ldr	r3, [pc, #84]	; (23940 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   238ea:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   238ec:	429c      	cmp	r4, r3
   238ee:	d108      	bne.n	23902 <add_to_waitq_locked+0x2e>
   238f0:	4914      	ldr	r1, [pc, #80]	; (23944 <add_to_waitq_locked+0x70>)
   238f2:	4815      	ldr	r0, [pc, #84]	; (23948 <add_to_waitq_locked+0x74>)
   238f4:	22ba      	movs	r2, #186	; 0xba
   238f6:	f004 ff45 	bl	28784 <assert_print>
   238fa:	4812      	ldr	r0, [pc, #72]	; (23944 <add_to_waitq_locked+0x70>)
   238fc:	21ba      	movs	r1, #186	; 0xba
   238fe:	f004 ff3a 	bl	28776 <assert_post_action>
	return list->head == list;
   23902:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23904:	429d      	cmp	r5, r3
   23906:	d015      	beq.n	23934 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23908:	b1a3      	cbz	r3, 23934 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   2390a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2390e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   23912:	4291      	cmp	r1, r2
   23914:	d008      	beq.n	23928 <add_to_waitq_locked+0x54>
		return b2 - b1;
   23916:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   23918:	2a00      	cmp	r2, #0
   2391a:	dd05      	ble.n	23928 <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   2391c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2391e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23922:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23924:	605c      	str	r4, [r3, #4]
}
   23926:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   23928:	686a      	ldr	r2, [r5, #4]
   2392a:	4293      	cmp	r3, r2
   2392c:	d002      	beq.n	23934 <add_to_waitq_locked+0x60>
   2392e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23930:	2b00      	cmp	r3, #0
   23932:	d1ec      	bne.n	2390e <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   23934:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   23936:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2393a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2393c:	606c      	str	r4, [r5, #4]
}
   2393e:	e7f2      	b.n	23926 <add_to_waitq_locked+0x52>
   23940:	20001f98 	.word	0x20001f98
   23944:	000305f1 	.word	0x000305f1
   23948:	0002d509 	.word	0x0002d509

0002394c <pend>:
{
   2394c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23950:	4604      	mov	r4, r0
   23952:	4688      	mov	r8, r1
   23954:	4616      	mov	r6, r2
   23956:	461d      	mov	r5, r3
	__asm__ volatile(
   23958:	f04f 0340 	mov.w	r3, #64	; 0x40
   2395c:	f3ef 8711 	mrs	r7, BASEPRI
   23960:	f383 8812 	msr	BASEPRI_MAX, r3
   23964:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23968:	481a      	ldr	r0, [pc, #104]	; (239d4 <pend+0x88>)
   2396a:	f7fe fbad 	bl	220c8 <z_spin_lock_valid>
   2396e:	b940      	cbnz	r0, 23982 <pend+0x36>
   23970:	4919      	ldr	r1, [pc, #100]	; (239d8 <pend+0x8c>)
   23972:	481a      	ldr	r0, [pc, #104]	; (239dc <pend+0x90>)
   23974:	228e      	movs	r2, #142	; 0x8e
   23976:	f004 ff05 	bl	28784 <assert_print>
   2397a:	4817      	ldr	r0, [pc, #92]	; (239d8 <pend+0x8c>)
   2397c:	218e      	movs	r1, #142	; 0x8e
   2397e:	f004 fefa 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   23982:	4814      	ldr	r0, [pc, #80]	; (239d4 <pend+0x88>)
   23984:	f7fe fbbe 	bl	22104 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   23988:	4620      	mov	r0, r4
   2398a:	4641      	mov	r1, r8
   2398c:	f7ff ffa2 	bl	238d4 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23990:	4810      	ldr	r0, [pc, #64]	; (239d4 <pend+0x88>)
   23992:	f7fe fba7 	bl	220e4 <z_spin_unlock_valid>
   23996:	b940      	cbnz	r0, 239aa <pend+0x5e>
   23998:	490f      	ldr	r1, [pc, #60]	; (239d8 <pend+0x8c>)
   2399a:	4810      	ldr	r0, [pc, #64]	; (239dc <pend+0x90>)
   2399c:	22b9      	movs	r2, #185	; 0xb9
   2399e:	f004 fef1 	bl	28784 <assert_print>
   239a2:	480d      	ldr	r0, [pc, #52]	; (239d8 <pend+0x8c>)
   239a4:	21b9      	movs	r1, #185	; 0xb9
   239a6:	f004 fee6 	bl	28776 <assert_post_action>
	__asm__ volatile(
   239aa:	f387 8811 	msr	BASEPRI, r7
   239ae:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   239b2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   239b6:	bf08      	it	eq
   239b8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   239bc:	d008      	beq.n	239d0 <pend+0x84>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   239be:	4632      	mov	r2, r6
   239c0:	462b      	mov	r3, r5
   239c2:	f104 0018 	add.w	r0, r4, #24
   239c6:	4906      	ldr	r1, [pc, #24]	; (239e0 <pend+0x94>)
}
   239c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   239cc:	f000 bca4 	b.w	24318 <z_add_timeout>
   239d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   239d4:	20002be0 	.word	0x20002be0
   239d8:	0002d57d 	.word	0x0002d57d
   239dc:	0002d509 	.word	0x0002d509
   239e0:	0002380d 	.word	0x0002380d

000239e4 <z_pend_curr>:
{
   239e4:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   239e6:	4b0e      	ldr	r3, [pc, #56]	; (23a20 <z_pend_curr+0x3c>)
{
   239e8:	4605      	mov	r5, r0
	pending_current = _current;
   239ea:	6898      	ldr	r0, [r3, #8]
   239ec:	4b0d      	ldr	r3, [pc, #52]	; (23a24 <z_pend_curr+0x40>)
{
   239ee:	460c      	mov	r4, r1
	pending_current = _current;
   239f0:	6018      	str	r0, [r3, #0]
{
   239f2:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   239f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   239f8:	f7ff ffa8 	bl	2394c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239fc:	4628      	mov	r0, r5
   239fe:	f7fe fb71 	bl	220e4 <z_spin_unlock_valid>
   23a02:	b940      	cbnz	r0, 23a16 <z_pend_curr+0x32>
   23a04:	4908      	ldr	r1, [pc, #32]	; (23a28 <z_pend_curr+0x44>)
   23a06:	4809      	ldr	r0, [pc, #36]	; (23a2c <z_pend_curr+0x48>)
   23a08:	22d0      	movs	r2, #208	; 0xd0
   23a0a:	f004 febb 	bl	28784 <assert_print>
   23a0e:	4806      	ldr	r0, [pc, #24]	; (23a28 <z_pend_curr+0x44>)
   23a10:	21d0      	movs	r1, #208	; 0xd0
   23a12:	f004 feb0 	bl	28776 <assert_post_action>
   23a16:	4620      	mov	r0, r4
}
   23a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23a1c:	f7f0 beb8 	b.w	14790 <arch_swap>
   23a20:	20002ba0 	.word	0x20002ba0
   23a24:	20002bdc 	.word	0x20002bdc
   23a28:	0002d57d 	.word	0x0002d57d
   23a2c:	0002d509 	.word	0x0002d509

00023a30 <z_set_prio>:
{
   23a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a32:	4604      	mov	r4, r0
   23a34:	460d      	mov	r5, r1
	__asm__ volatile(
   23a36:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a3a:	f3ef 8611 	mrs	r6, BASEPRI
   23a3e:	f383 8812 	msr	BASEPRI_MAX, r3
   23a42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a46:	4834      	ldr	r0, [pc, #208]	; (23b18 <z_set_prio+0xe8>)
   23a48:	f7fe fb3e 	bl	220c8 <z_spin_lock_valid>
   23a4c:	b940      	cbnz	r0, 23a60 <z_set_prio+0x30>
   23a4e:	4933      	ldr	r1, [pc, #204]	; (23b1c <z_set_prio+0xec>)
   23a50:	4833      	ldr	r0, [pc, #204]	; (23b20 <z_set_prio+0xf0>)
   23a52:	228e      	movs	r2, #142	; 0x8e
   23a54:	f004 fe96 	bl	28784 <assert_print>
   23a58:	4830      	ldr	r0, [pc, #192]	; (23b1c <z_set_prio+0xec>)
   23a5a:	218e      	movs	r1, #142	; 0x8e
   23a5c:	f004 fe8b 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   23a60:	482d      	ldr	r0, [pc, #180]	; (23b18 <z_set_prio+0xe8>)
   23a62:	f7fe fb4f 	bl	22104 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   23a66:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23a68:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   23a6a:	b26d      	sxtb	r5, r5
   23a6c:	d151      	bne.n	23b12 <z_set_prio+0xe2>
		if (need_sched) {
   23a6e:	69a2      	ldr	r2, [r4, #24]
   23a70:	2a00      	cmp	r2, #0
   23a72:	d14e      	bne.n	23b12 <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23a78:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23a7a:	482a      	ldr	r0, [pc, #168]	; (23b24 <z_set_prio+0xf4>)
   23a7c:	4621      	mov	r1, r4
   23a7e:	f7ff fca7 	bl	233d0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23a82:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   23a84:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   23a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23a8a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23a8c:	4b26      	ldr	r3, [pc, #152]	; (23b28 <z_set_prio+0xf8>)
   23a8e:	429c      	cmp	r4, r3
   23a90:	d108      	bne.n	23aa4 <z_set_prio+0x74>
   23a92:	4926      	ldr	r1, [pc, #152]	; (23b2c <z_set_prio+0xfc>)
   23a94:	4822      	ldr	r0, [pc, #136]	; (23b20 <z_set_prio+0xf0>)
   23a96:	22ba      	movs	r2, #186	; 0xba
   23a98:	f004 fe74 	bl	28784 <assert_print>
   23a9c:	4823      	ldr	r0, [pc, #140]	; (23b2c <z_set_prio+0xfc>)
   23a9e:	21ba      	movs	r1, #186	; 0xba
   23aa0:	f004 fe69 	bl	28776 <assert_post_action>
	return list->head == list;
   23aa4:	4a22      	ldr	r2, [pc, #136]	; (23b30 <z_set_prio+0x100>)
	return (node == list->tail) ? NULL : node->next;
   23aa6:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23aaa:	f102 0520 	add.w	r5, r2, #32
   23aae:	42ab      	cmp	r3, r5
   23ab0:	d02a      	beq.n	23b08 <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23ab2:	b34b      	cbz	r3, 23b08 <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   23ab4:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23ab8:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   23abc:	428f      	cmp	r7, r1
   23abe:	d01e      	beq.n	23afe <z_set_prio+0xce>
		return b2 - b1;
   23ac0:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   23ac2:	2900      	cmp	r1, #0
   23ac4:	dd1b      	ble.n	23afe <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   23ac6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23ac8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23acc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23ace:	605c      	str	r4, [r3, #4]
			update_cache(1);
   23ad0:	2001      	movs	r0, #1
   23ad2:	f7ff fcf3 	bl	234bc <update_cache>
   23ad6:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ad8:	480f      	ldr	r0, [pc, #60]	; (23b18 <z_set_prio+0xe8>)
   23ada:	f7fe fb03 	bl	220e4 <z_spin_unlock_valid>
   23ade:	b940      	cbnz	r0, 23af2 <z_set_prio+0xc2>
   23ae0:	490e      	ldr	r1, [pc, #56]	; (23b1c <z_set_prio+0xec>)
   23ae2:	480f      	ldr	r0, [pc, #60]	; (23b20 <z_set_prio+0xf0>)
   23ae4:	22b9      	movs	r2, #185	; 0xb9
   23ae6:	f004 fe4d 	bl	28784 <assert_print>
   23aea:	480c      	ldr	r0, [pc, #48]	; (23b1c <z_set_prio+0xec>)
   23aec:	21b9      	movs	r1, #185	; 0xb9
   23aee:	f004 fe42 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23af2:	f386 8811 	msr	BASEPRI, r6
   23af6:	f3bf 8f6f 	isb	sy
}
   23afa:	4620      	mov	r0, r4
   23afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   23afe:	4283      	cmp	r3, r0
   23b00:	d002      	beq.n	23b08 <z_set_prio+0xd8>
   23b02:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23b04:	2b00      	cmp	r3, #0
   23b06:	d1d7      	bne.n	23ab8 <z_set_prio+0x88>
	node->prev = tail;
   23b08:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   23b0c:	6004      	str	r4, [r0, #0]
	list->tail = node;
   23b0e:	6254      	str	r4, [r2, #36]	; 0x24
}
   23b10:	e7de      	b.n	23ad0 <z_set_prio+0xa0>
			thread->base.prio = prio;
   23b12:	73a5      	strb	r5, [r4, #14]
   23b14:	2400      	movs	r4, #0
   23b16:	e7df      	b.n	23ad8 <z_set_prio+0xa8>
   23b18:	20002be0 	.word	0x20002be0
   23b1c:	0002d57d 	.word	0x0002d57d
   23b20:	0002d509 	.word	0x0002d509
   23b24:	20002bc0 	.word	0x20002bc0
   23b28:	20001f98 	.word	0x20001f98
   23b2c:	000305f1 	.word	0x000305f1
   23b30:	20002ba0 	.word	0x20002ba0

00023b34 <z_impl_k_thread_suspend>:
{
   23b34:	b570      	push	{r4, r5, r6, lr}
   23b36:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   23b38:	3018      	adds	r0, #24
   23b3a:	f000 fc9b 	bl	24474 <z_abort_timeout>
	__asm__ volatile(
   23b3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b42:	f3ef 8611 	mrs	r6, BASEPRI
   23b46:	f383 8812 	msr	BASEPRI_MAX, r3
   23b4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b4e:	4820      	ldr	r0, [pc, #128]	; (23bd0 <z_impl_k_thread_suspend+0x9c>)
   23b50:	f7fe faba 	bl	220c8 <z_spin_lock_valid>
   23b54:	b940      	cbnz	r0, 23b68 <z_impl_k_thread_suspend+0x34>
   23b56:	491f      	ldr	r1, [pc, #124]	; (23bd4 <z_impl_k_thread_suspend+0xa0>)
   23b58:	481f      	ldr	r0, [pc, #124]	; (23bd8 <z_impl_k_thread_suspend+0xa4>)
   23b5a:	228e      	movs	r2, #142	; 0x8e
   23b5c:	f004 fe12 	bl	28784 <assert_print>
   23b60:	481c      	ldr	r0, [pc, #112]	; (23bd4 <z_impl_k_thread_suspend+0xa0>)
   23b62:	218e      	movs	r1, #142	; 0x8e
   23b64:	f004 fe07 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   23b68:	4819      	ldr	r0, [pc, #100]	; (23bd0 <z_impl_k_thread_suspend+0x9c>)
   23b6a:	f7fe facb 	bl	22104 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   23b6e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   23b72:	7b63      	ldrb	r3, [r4, #13]
   23b74:	2a00      	cmp	r2, #0
   23b76:	da06      	bge.n	23b86 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   23b7c:	4817      	ldr	r0, [pc, #92]	; (23bdc <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23b7e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23b80:	4621      	mov	r1, r4
   23b82:	f7ff fc25 	bl	233d0 <z_priq_dumb_remove>
		update_cache(thread == _current);
   23b86:	4d16      	ldr	r5, [pc, #88]	; (23be0 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23b88:	7b63      	ldrb	r3, [r4, #13]
   23b8a:	68a8      	ldr	r0, [r5, #8]
   23b8c:	f043 0310 	orr.w	r3, r3, #16
   23b90:	7363      	strb	r3, [r4, #13]
   23b92:	1b03      	subs	r3, r0, r4
   23b94:	4258      	negs	r0, r3
   23b96:	4158      	adcs	r0, r3
   23b98:	f7ff fc90 	bl	234bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b9c:	480c      	ldr	r0, [pc, #48]	; (23bd0 <z_impl_k_thread_suspend+0x9c>)
   23b9e:	f7fe faa1 	bl	220e4 <z_spin_unlock_valid>
   23ba2:	b940      	cbnz	r0, 23bb6 <z_impl_k_thread_suspend+0x82>
   23ba4:	490b      	ldr	r1, [pc, #44]	; (23bd4 <z_impl_k_thread_suspend+0xa0>)
   23ba6:	480c      	ldr	r0, [pc, #48]	; (23bd8 <z_impl_k_thread_suspend+0xa4>)
   23ba8:	22b9      	movs	r2, #185	; 0xb9
   23baa:	f004 fdeb 	bl	28784 <assert_print>
   23bae:	4809      	ldr	r0, [pc, #36]	; (23bd4 <z_impl_k_thread_suspend+0xa0>)
   23bb0:	21b9      	movs	r1, #185	; 0xb9
   23bb2:	f004 fde0 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23bb6:	f386 8811 	msr	BASEPRI, r6
   23bba:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   23bbe:	68ab      	ldr	r3, [r5, #8]
   23bc0:	42a3      	cmp	r3, r4
   23bc2:	d103      	bne.n	23bcc <z_impl_k_thread_suspend+0x98>
}
   23bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   23bc8:	f008 b998 	b.w	2befc <z_reschedule_unlocked>
}
   23bcc:	bd70      	pop	{r4, r5, r6, pc}
   23bce:	bf00      	nop
   23bd0:	20002be0 	.word	0x20002be0
   23bd4:	0002d57d 	.word	0x0002d57d
   23bd8:	0002d509 	.word	0x0002d509
   23bdc:	20002bc0 	.word	0x20002bc0
   23be0:	20002ba0 	.word	0x20002ba0

00023be4 <k_sched_unlock>:
{
   23be4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23be6:	f04f 0340 	mov.w	r3, #64	; 0x40
   23bea:	f3ef 8511 	mrs	r5, BASEPRI
   23bee:	f383 8812 	msr	BASEPRI_MAX, r3
   23bf2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bf6:	4824      	ldr	r0, [pc, #144]	; (23c88 <k_sched_unlock+0xa4>)
   23bf8:	f7fe fa66 	bl	220c8 <z_spin_lock_valid>
   23bfc:	b940      	cbnz	r0, 23c10 <k_sched_unlock+0x2c>
   23bfe:	4923      	ldr	r1, [pc, #140]	; (23c8c <k_sched_unlock+0xa8>)
   23c00:	4823      	ldr	r0, [pc, #140]	; (23c90 <k_sched_unlock+0xac>)
   23c02:	228e      	movs	r2, #142	; 0x8e
   23c04:	f004 fdbe 	bl	28784 <assert_print>
   23c08:	4820      	ldr	r0, [pc, #128]	; (23c8c <k_sched_unlock+0xa8>)
   23c0a:	218e      	movs	r1, #142	; 0x8e
   23c0c:	f004 fdb3 	bl	28776 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   23c10:	4c20      	ldr	r4, [pc, #128]	; (23c94 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   23c12:	481d      	ldr	r0, [pc, #116]	; (23c88 <k_sched_unlock+0xa4>)
   23c14:	f7fe fa76 	bl	22104 <z_spin_lock_set_owner>
   23c18:	68a3      	ldr	r3, [r4, #8]
   23c1a:	7bdb      	ldrb	r3, [r3, #15]
   23c1c:	b953      	cbnz	r3, 23c34 <k_sched_unlock+0x50>
   23c1e:	491e      	ldr	r1, [pc, #120]	; (23c98 <k_sched_unlock+0xb4>)
   23c20:	481b      	ldr	r0, [pc, #108]	; (23c90 <k_sched_unlock+0xac>)
   23c22:	f240 32d6 	movw	r2, #982	; 0x3d6
   23c26:	f004 fdad 	bl	28784 <assert_print>
   23c2a:	481b      	ldr	r0, [pc, #108]	; (23c98 <k_sched_unlock+0xb4>)
   23c2c:	f240 31d6 	movw	r1, #982	; 0x3d6
   23c30:	f004 fda1 	bl	28776 <assert_post_action>
   23c34:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   23c38:	b153      	cbz	r3, 23c50 <k_sched_unlock+0x6c>
   23c3a:	4917      	ldr	r1, [pc, #92]	; (23c98 <k_sched_unlock+0xb4>)
   23c3c:	4814      	ldr	r0, [pc, #80]	; (23c90 <k_sched_unlock+0xac>)
   23c3e:	f240 32d7 	movw	r2, #983	; 0x3d7
   23c42:	f004 fd9f 	bl	28784 <assert_print>
   23c46:	4814      	ldr	r0, [pc, #80]	; (23c98 <k_sched_unlock+0xb4>)
   23c48:	f240 31d7 	movw	r1, #983	; 0x3d7
   23c4c:	f004 fd93 	bl	28776 <assert_post_action>
		++_current->base.sched_locked;
   23c50:	68a2      	ldr	r2, [r4, #8]
   23c52:	7bd3      	ldrb	r3, [r2, #15]
   23c54:	3301      	adds	r3, #1
		update_cache(0);
   23c56:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   23c58:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   23c5a:	f7ff fc2f 	bl	234bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c5e:	480a      	ldr	r0, [pc, #40]	; (23c88 <k_sched_unlock+0xa4>)
   23c60:	f7fe fa40 	bl	220e4 <z_spin_unlock_valid>
   23c64:	b940      	cbnz	r0, 23c78 <k_sched_unlock+0x94>
   23c66:	4909      	ldr	r1, [pc, #36]	; (23c8c <k_sched_unlock+0xa8>)
   23c68:	4809      	ldr	r0, [pc, #36]	; (23c90 <k_sched_unlock+0xac>)
   23c6a:	22b9      	movs	r2, #185	; 0xb9
   23c6c:	f004 fd8a 	bl	28784 <assert_print>
   23c70:	4806      	ldr	r0, [pc, #24]	; (23c8c <k_sched_unlock+0xa8>)
   23c72:	21b9      	movs	r1, #185	; 0xb9
   23c74:	f004 fd7f 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23c78:	f385 8811 	msr	BASEPRI, r5
   23c7c:	f3bf 8f6f 	isb	sy
}
   23c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   23c84:	f008 b93a 	b.w	2befc <z_reschedule_unlocked>
   23c88:	20002be0 	.word	0x20002be0
   23c8c:	0002d57d 	.word	0x0002d57d
   23c90:	0002d509 	.word	0x0002d509
   23c94:	20002ba0 	.word	0x20002ba0
   23c98:	000305f1 	.word	0x000305f1

00023c9c <z_unpend1_no_timeout>:
{
   23c9c:	b538      	push	{r3, r4, r5, lr}
   23c9e:	4604      	mov	r4, r0
	__asm__ volatile(
   23ca0:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ca4:	f3ef 8511 	mrs	r5, BASEPRI
   23ca8:	f383 8812 	msr	BASEPRI_MAX, r3
   23cac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23cb0:	4814      	ldr	r0, [pc, #80]	; (23d04 <z_unpend1_no_timeout+0x68>)
   23cb2:	f7fe fa09 	bl	220c8 <z_spin_lock_valid>
   23cb6:	b940      	cbnz	r0, 23cca <z_unpend1_no_timeout+0x2e>
   23cb8:	4913      	ldr	r1, [pc, #76]	; (23d08 <z_unpend1_no_timeout+0x6c>)
   23cba:	4814      	ldr	r0, [pc, #80]	; (23d0c <z_unpend1_no_timeout+0x70>)
   23cbc:	228e      	movs	r2, #142	; 0x8e
   23cbe:	f004 fd61 	bl	28784 <assert_print>
   23cc2:	4811      	ldr	r0, [pc, #68]	; (23d08 <z_unpend1_no_timeout+0x6c>)
   23cc4:	218e      	movs	r1, #142	; 0x8e
   23cc6:	f004 fd56 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   23cca:	480e      	ldr	r0, [pc, #56]	; (23d04 <z_unpend1_no_timeout+0x68>)
   23ccc:	f7fe fa1a 	bl	22104 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   23cd0:	4620      	mov	r0, r4
   23cd2:	f008 f91d 	bl	2bf10 <z_priq_dumb_best>
		if (thread != NULL) {
   23cd6:	4604      	mov	r4, r0
   23cd8:	b108      	cbz	r0, 23cde <z_unpend1_no_timeout+0x42>
			unpend_thread_no_timeout(thread);
   23cda:	f7ff fb97 	bl	2340c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cde:	4809      	ldr	r0, [pc, #36]	; (23d04 <z_unpend1_no_timeout+0x68>)
   23ce0:	f7fe fa00 	bl	220e4 <z_spin_unlock_valid>
   23ce4:	b940      	cbnz	r0, 23cf8 <z_unpend1_no_timeout+0x5c>
   23ce6:	4908      	ldr	r1, [pc, #32]	; (23d08 <z_unpend1_no_timeout+0x6c>)
   23ce8:	4808      	ldr	r0, [pc, #32]	; (23d0c <z_unpend1_no_timeout+0x70>)
   23cea:	22b9      	movs	r2, #185	; 0xb9
   23cec:	f004 fd4a 	bl	28784 <assert_print>
   23cf0:	4805      	ldr	r0, [pc, #20]	; (23d08 <z_unpend1_no_timeout+0x6c>)
   23cf2:	21b9      	movs	r1, #185	; 0xb9
   23cf4:	f004 fd3f 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23cf8:	f385 8811 	msr	BASEPRI, r5
   23cfc:	f3bf 8f6f 	isb	sy
}
   23d00:	4620      	mov	r0, r4
   23d02:	bd38      	pop	{r3, r4, r5, pc}
   23d04:	20002be0 	.word	0x20002be0
   23d08:	0002d57d 	.word	0x0002d57d
   23d0c:	0002d509 	.word	0x0002d509

00023d10 <z_unpend_first_thread>:
{
   23d10:	b538      	push	{r3, r4, r5, lr}
   23d12:	4604      	mov	r4, r0
	__asm__ volatile(
   23d14:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d18:	f3ef 8511 	mrs	r5, BASEPRI
   23d1c:	f383 8812 	msr	BASEPRI_MAX, r3
   23d20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d24:	4816      	ldr	r0, [pc, #88]	; (23d80 <z_unpend_first_thread+0x70>)
   23d26:	f7fe f9cf 	bl	220c8 <z_spin_lock_valid>
   23d2a:	b940      	cbnz	r0, 23d3e <z_unpend_first_thread+0x2e>
   23d2c:	4915      	ldr	r1, [pc, #84]	; (23d84 <z_unpend_first_thread+0x74>)
   23d2e:	4816      	ldr	r0, [pc, #88]	; (23d88 <z_unpend_first_thread+0x78>)
   23d30:	228e      	movs	r2, #142	; 0x8e
   23d32:	f004 fd27 	bl	28784 <assert_print>
   23d36:	4813      	ldr	r0, [pc, #76]	; (23d84 <z_unpend_first_thread+0x74>)
   23d38:	218e      	movs	r1, #142	; 0x8e
   23d3a:	f004 fd1c 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   23d3e:	4810      	ldr	r0, [pc, #64]	; (23d80 <z_unpend_first_thread+0x70>)
   23d40:	f7fe f9e0 	bl	22104 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   23d44:	4620      	mov	r0, r4
   23d46:	f008 f8e3 	bl	2bf10 <z_priq_dumb_best>
		if (thread != NULL) {
   23d4a:	4604      	mov	r4, r0
   23d4c:	b128      	cbz	r0, 23d5a <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   23d4e:	f7ff fb5d 	bl	2340c <unpend_thread_no_timeout>
   23d52:	f104 0018 	add.w	r0, r4, #24
   23d56:	f000 fb8d 	bl	24474 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d5a:	4809      	ldr	r0, [pc, #36]	; (23d80 <z_unpend_first_thread+0x70>)
   23d5c:	f7fe f9c2 	bl	220e4 <z_spin_unlock_valid>
   23d60:	b940      	cbnz	r0, 23d74 <z_unpend_first_thread+0x64>
   23d62:	4908      	ldr	r1, [pc, #32]	; (23d84 <z_unpend_first_thread+0x74>)
   23d64:	4808      	ldr	r0, [pc, #32]	; (23d88 <z_unpend_first_thread+0x78>)
   23d66:	22b9      	movs	r2, #185	; 0xb9
   23d68:	f004 fd0c 	bl	28784 <assert_print>
   23d6c:	4805      	ldr	r0, [pc, #20]	; (23d84 <z_unpend_first_thread+0x74>)
   23d6e:	21b9      	movs	r1, #185	; 0xb9
   23d70:	f004 fd01 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23d74:	f385 8811 	msr	BASEPRI, r5
   23d78:	f3bf 8f6f 	isb	sy
}
   23d7c:	4620      	mov	r0, r4
   23d7e:	bd38      	pop	{r3, r4, r5, pc}
   23d80:	20002be0 	.word	0x20002be0
   23d84:	0002d57d 	.word	0x0002d57d
   23d88:	0002d509 	.word	0x0002d509

00023d8c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   23d8c:	4b04      	ldr	r3, [pc, #16]	; (23da0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   23d8e:	2100      	movs	r1, #0
   23d90:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   23d94:	e9c3 2208 	strd	r2, r2, [r3, #32]
   23d98:	4608      	mov	r0, r1
   23d9a:	f7ff ba05 	b.w	231a8 <k_sched_time_slice_set>
   23d9e:	bf00      	nop
   23da0:	20002ba0 	.word	0x20002ba0

00023da4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   23da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23da6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   23daa:	b153      	cbz	r3, 23dc2 <z_impl_k_yield+0x1e>
   23dac:	4938      	ldr	r1, [pc, #224]	; (23e90 <z_impl_k_yield+0xec>)
   23dae:	4839      	ldr	r0, [pc, #228]	; (23e94 <z_impl_k_yield+0xf0>)
   23db0:	f240 525d 	movw	r2, #1373	; 0x55d
   23db4:	f004 fce6 	bl	28784 <assert_print>
   23db8:	4835      	ldr	r0, [pc, #212]	; (23e90 <z_impl_k_yield+0xec>)
   23dba:	f240 515d 	movw	r1, #1373	; 0x55d
   23dbe:	f004 fcda 	bl	28776 <assert_post_action>
	__asm__ volatile(
   23dc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   23dc6:	f3ef 8611 	mrs	r6, BASEPRI
   23dca:	f383 8812 	msr	BASEPRI_MAX, r3
   23dce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23dd2:	4831      	ldr	r0, [pc, #196]	; (23e98 <z_impl_k_yield+0xf4>)
   23dd4:	f7fe f978 	bl	220c8 <z_spin_lock_valid>
   23dd8:	b940      	cbnz	r0, 23dec <z_impl_k_yield+0x48>
   23dda:	4930      	ldr	r1, [pc, #192]	; (23e9c <z_impl_k_yield+0xf8>)
   23ddc:	482d      	ldr	r0, [pc, #180]	; (23e94 <z_impl_k_yield+0xf0>)
   23dde:	228e      	movs	r2, #142	; 0x8e
   23de0:	f004 fcd0 	bl	28784 <assert_print>
   23de4:	482d      	ldr	r0, [pc, #180]	; (23e9c <z_impl_k_yield+0xf8>)
   23de6:	218e      	movs	r1, #142	; 0x8e
   23de8:	f004 fcc5 	bl	28776 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   23dec:	4d2c      	ldr	r5, [pc, #176]	; (23ea0 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   23dee:	482a      	ldr	r0, [pc, #168]	; (23e98 <z_impl_k_yield+0xf4>)
   23df0:	f7fe f988 	bl	22104 <z_spin_lock_set_owner>
   23df4:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23df6:	7b4b      	ldrb	r3, [r1, #13]
   23df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23dfc:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23dfe:	f105 0020 	add.w	r0, r5, #32
   23e02:	f7ff fae5 	bl	233d0 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   23e06:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   23e08:	7b63      	ldrb	r3, [r4, #13]
   23e0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23e0e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23e10:	4b24      	ldr	r3, [pc, #144]	; (23ea4 <z_impl_k_yield+0x100>)
   23e12:	429c      	cmp	r4, r3
   23e14:	d108      	bne.n	23e28 <z_impl_k_yield+0x84>
   23e16:	491e      	ldr	r1, [pc, #120]	; (23e90 <z_impl_k_yield+0xec>)
   23e18:	481e      	ldr	r0, [pc, #120]	; (23e94 <z_impl_k_yield+0xf0>)
   23e1a:	22ba      	movs	r2, #186	; 0xba
   23e1c:	f004 fcb2 	bl	28784 <assert_print>
   23e20:	481b      	ldr	r0, [pc, #108]	; (23e90 <z_impl_k_yield+0xec>)
   23e22:	21ba      	movs	r1, #186	; 0xba
   23e24:	f004 fca7 	bl	28776 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   23e28:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e2c:	481e      	ldr	r0, [pc, #120]	; (23ea8 <z_impl_k_yield+0x104>)
   23e2e:	4283      	cmp	r3, r0
   23e30:	d028      	beq.n	23e84 <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23e32:	b33b      	cbz	r3, 23e84 <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   23e34:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23e38:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   23e3c:	4297      	cmp	r7, r2
   23e3e:	d01c      	beq.n	23e7a <z_impl_k_yield+0xd6>
		return b2 - b1;
   23e40:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   23e42:	2a00      	cmp	r2, #0
   23e44:	dd19      	ble.n	23e7a <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   23e46:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23e48:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23e4c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23e4e:	605c      	str	r4, [r3, #4]
	update_cache(1);
   23e50:	2001      	movs	r0, #1
   23e52:	f7ff fb33 	bl	234bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23e56:	4810      	ldr	r0, [pc, #64]	; (23e98 <z_impl_k_yield+0xf4>)
   23e58:	f7fe f944 	bl	220e4 <z_spin_unlock_valid>
   23e5c:	b940      	cbnz	r0, 23e70 <z_impl_k_yield+0xcc>
   23e5e:	490f      	ldr	r1, [pc, #60]	; (23e9c <z_impl_k_yield+0xf8>)
   23e60:	480c      	ldr	r0, [pc, #48]	; (23e94 <z_impl_k_yield+0xf0>)
   23e62:	22d0      	movs	r2, #208	; 0xd0
   23e64:	f004 fc8e 	bl	28784 <assert_print>
   23e68:	480c      	ldr	r0, [pc, #48]	; (23e9c <z_impl_k_yield+0xf8>)
   23e6a:	21d0      	movs	r1, #208	; 0xd0
   23e6c:	f004 fc83 	bl	28776 <assert_post_action>
   23e70:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   23e72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23e76:	f7f0 bc8b 	b.w	14790 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   23e7a:	428b      	cmp	r3, r1
   23e7c:	d002      	beq.n	23e84 <z_impl_k_yield+0xe0>
   23e7e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23e80:	2b00      	cmp	r3, #0
   23e82:	d1d9      	bne.n	23e38 <z_impl_k_yield+0x94>
	node->prev = tail;
   23e84:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   23e88:	600c      	str	r4, [r1, #0]
	list->tail = node;
   23e8a:	626c      	str	r4, [r5, #36]	; 0x24
}
   23e8c:	e7e0      	b.n	23e50 <z_impl_k_yield+0xac>
   23e8e:	bf00      	nop
   23e90:	000305f1 	.word	0x000305f1
   23e94:	0002d509 	.word	0x0002d509
   23e98:	20002be0 	.word	0x20002be0
   23e9c:	0002d57d 	.word	0x0002d57d
   23ea0:	20002ba0 	.word	0x20002ba0
   23ea4:	20001f98 	.word	0x20001f98
   23ea8:	20002bc0 	.word	0x20002bc0

00023eac <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   23eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23eb0:	4605      	mov	r5, r0
   23eb2:	460e      	mov	r6, r1
   23eb4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   23eb8:	b153      	cbz	r3, 23ed0 <z_tick_sleep+0x24>
   23eba:	493a      	ldr	r1, [pc, #232]	; (23fa4 <z_tick_sleep+0xf8>)
   23ebc:	483a      	ldr	r0, [pc, #232]	; (23fa8 <z_tick_sleep+0xfc>)
   23ebe:	f240 5279 	movw	r2, #1401	; 0x579
   23ec2:	f004 fc5f 	bl	28784 <assert_print>
   23ec6:	4837      	ldr	r0, [pc, #220]	; (23fa4 <z_tick_sleep+0xf8>)
   23ec8:	f240 5179 	movw	r1, #1401	; 0x579
   23ecc:	f004 fc53 	bl	28776 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   23ed0:	ea55 0306 	orrs.w	r3, r5, r6
   23ed4:	d103      	bne.n	23ede <z_tick_sleep+0x32>
	z_impl_k_yield();
   23ed6:	f7ff ff65 	bl	23da4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   23eda:	2000      	movs	r0, #0
   23edc:	e05f      	b.n	23f9e <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   23ede:	f06f 0401 	mvn.w	r4, #1
   23ee2:	1b64      	subs	r4, r4, r5
   23ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23ee8:	eb63 0306 	sbc.w	r3, r3, r6
   23eec:	2c01      	cmp	r4, #1
   23eee:	f173 0300 	sbcs.w	r3, r3, #0
   23ef2:	da02      	bge.n	23efa <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   23ef4:	f008 f822 	bl	2bf3c <sys_clock_tick_get_32>
   23ef8:	1944      	adds	r4, r0, r5
   23efa:	f04f 0340 	mov.w	r3, #64	; 0x40
   23efe:	f3ef 8811 	mrs	r8, BASEPRI
   23f02:	f383 8812 	msr	BASEPRI_MAX, r3
   23f06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23f0a:	4828      	ldr	r0, [pc, #160]	; (23fac <z_tick_sleep+0x100>)
   23f0c:	f7fe f8dc 	bl	220c8 <z_spin_lock_valid>
   23f10:	b940      	cbnz	r0, 23f24 <z_tick_sleep+0x78>
   23f12:	4927      	ldr	r1, [pc, #156]	; (23fb0 <z_tick_sleep+0x104>)
   23f14:	4824      	ldr	r0, [pc, #144]	; (23fa8 <z_tick_sleep+0xfc>)
   23f16:	228e      	movs	r2, #142	; 0x8e
   23f18:	f004 fc34 	bl	28784 <assert_print>
   23f1c:	4824      	ldr	r0, [pc, #144]	; (23fb0 <z_tick_sleep+0x104>)
   23f1e:	218e      	movs	r1, #142	; 0x8e
   23f20:	f004 fc29 	bl	28776 <assert_post_action>
	pending_current = _current;
   23f24:	4f23      	ldr	r7, [pc, #140]	; (23fb4 <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   23f26:	4821      	ldr	r0, [pc, #132]	; (23fac <z_tick_sleep+0x100>)
   23f28:	f7fe f8ec 	bl	22104 <z_spin_lock_set_owner>
   23f2c:	4b22      	ldr	r3, [pc, #136]	; (23fb8 <z_tick_sleep+0x10c>)
   23f2e:	68b8      	ldr	r0, [r7, #8]
   23f30:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   23f32:	f7ff fcb3 	bl	2389c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   23f36:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23f38:	4920      	ldr	r1, [pc, #128]	; (23fbc <z_tick_sleep+0x110>)
   23f3a:	462a      	mov	r2, r5
   23f3c:	4633      	mov	r3, r6
   23f3e:	3018      	adds	r0, #24
   23f40:	f000 f9ea 	bl	24318 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   23f44:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23f46:	4819      	ldr	r0, [pc, #100]	; (23fac <z_tick_sleep+0x100>)
   23f48:	7b53      	ldrb	r3, [r2, #13]
   23f4a:	f043 0310 	orr.w	r3, r3, #16
   23f4e:	7353      	strb	r3, [r2, #13]
   23f50:	f7fe f8c8 	bl	220e4 <z_spin_unlock_valid>
   23f54:	b940      	cbnz	r0, 23f68 <z_tick_sleep+0xbc>
   23f56:	4916      	ldr	r1, [pc, #88]	; (23fb0 <z_tick_sleep+0x104>)
   23f58:	4813      	ldr	r0, [pc, #76]	; (23fa8 <z_tick_sleep+0xfc>)
   23f5a:	22d0      	movs	r2, #208	; 0xd0
   23f5c:	f004 fc12 	bl	28784 <assert_print>
   23f60:	4813      	ldr	r0, [pc, #76]	; (23fb0 <z_tick_sleep+0x104>)
   23f62:	21d0      	movs	r1, #208	; 0xd0
   23f64:	f004 fc07 	bl	28776 <assert_post_action>
   23f68:	4640      	mov	r0, r8
   23f6a:	f7f0 fc11 	bl	14790 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   23f6e:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   23f70:	7b5b      	ldrb	r3, [r3, #13]
   23f72:	06db      	lsls	r3, r3, #27
   23f74:	d50a      	bpl.n	23f8c <z_tick_sleep+0xe0>
   23f76:	490b      	ldr	r1, [pc, #44]	; (23fa4 <z_tick_sleep+0xf8>)
   23f78:	480b      	ldr	r0, [pc, #44]	; (23fa8 <z_tick_sleep+0xfc>)
   23f7a:	f240 529a 	movw	r2, #1434	; 0x59a
   23f7e:	f004 fc01 	bl	28784 <assert_print>
   23f82:	4808      	ldr	r0, [pc, #32]	; (23fa4 <z_tick_sleep+0xf8>)
   23f84:	f240 519a 	movw	r1, #1434	; 0x59a
   23f88:	f004 fbf5 	bl	28776 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   23f8c:	f007 ffd6 	bl	2bf3c <sys_clock_tick_get_32>
   23f90:	1a20      	subs	r0, r4, r0
   23f92:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   23f96:	2801      	cmp	r0, #1
   23f98:	f173 0300 	sbcs.w	r3, r3, #0
   23f9c:	db9d      	blt.n	23eda <z_tick_sleep+0x2e>
}
   23f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23fa2:	bf00      	nop
   23fa4:	000305f1 	.word	0x000305f1
   23fa8:	0002d509 	.word	0x0002d509
   23fac:	20002be0 	.word	0x20002be0
   23fb0:	0002d57d 	.word	0x0002d57d
   23fb4:	20002ba0 	.word	0x20002ba0
   23fb8:	20002bdc 	.word	0x20002bdc
   23fbc:	0002380d 	.word	0x0002380d

00023fc0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   23fc0:	b538      	push	{r3, r4, r5, lr}
   23fc2:	4605      	mov	r5, r0
   23fc4:	460c      	mov	r4, r1
   23fc6:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   23fca:	b153      	cbz	r3, 23fe2 <z_impl_k_sleep+0x22>
   23fcc:	4911      	ldr	r1, [pc, #68]	; (24014 <z_impl_k_sleep+0x54>)
   23fce:	4812      	ldr	r0, [pc, #72]	; (24018 <z_impl_k_sleep+0x58>)
   23fd0:	f240 52a9 	movw	r2, #1449	; 0x5a9
   23fd4:	f004 fbd6 	bl	28784 <assert_print>
   23fd8:	480e      	ldr	r0, [pc, #56]	; (24014 <z_impl_k_sleep+0x54>)
   23fda:	f240 51a9 	movw	r1, #1449	; 0x5a9
   23fde:	f004 fbca 	bl	28776 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23fe2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   23fe6:	bf08      	it	eq
   23fe8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   23fec:	d106      	bne.n	23ffc <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   23fee:	4b0b      	ldr	r3, [pc, #44]	; (2401c <z_impl_k_sleep+0x5c>)
   23ff0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   23ff2:	f7ff fd9f 	bl	23b34 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   23ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   23ffa:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   23ffc:	4628      	mov	r0, r5
   23ffe:	4621      	mov	r1, r4
   24000:	f7ff ff54 	bl	23eac <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   24004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24008:	fb80 0303 	smull	r0, r3, r0, r3
   2400c:	0bc0      	lsrs	r0, r0, #15
   2400e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   24012:	e7f2      	b.n	23ffa <z_impl_k_sleep+0x3a>
   24014:	000305f1 	.word	0x000305f1
   24018:	0002d509 	.word	0x0002d509
   2401c:	20002ba0 	.word	0x20002ba0

00024020 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   24020:	4b01      	ldr	r3, [pc, #4]	; (24028 <z_impl_z_current_get+0x8>)
   24022:	6898      	ldr	r0, [r3, #8]
   24024:	4770      	bx	lr
   24026:	bf00      	nop
   24028:	20002ba0 	.word	0x20002ba0

0002402c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2402c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24030:	4604      	mov	r4, r0
   24032:	f04f 0340 	mov.w	r3, #64	; 0x40
   24036:	f3ef 8611 	mrs	r6, BASEPRI
   2403a:	f383 8812 	msr	BASEPRI_MAX, r3
   2403e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24042:	4851      	ldr	r0, [pc, #324]	; (24188 <z_thread_abort+0x15c>)
   24044:	f7fe f840 	bl	220c8 <z_spin_lock_valid>
   24048:	b940      	cbnz	r0, 2405c <z_thread_abort+0x30>
   2404a:	4950      	ldr	r1, [pc, #320]	; (2418c <z_thread_abort+0x160>)
   2404c:	4850      	ldr	r0, [pc, #320]	; (24190 <z_thread_abort+0x164>)
   2404e:	228e      	movs	r2, #142	; 0x8e
   24050:	f004 fb98 	bl	28784 <assert_print>
   24054:	484d      	ldr	r0, [pc, #308]	; (2418c <z_thread_abort+0x160>)
   24056:	218e      	movs	r1, #142	; 0x8e
   24058:	f004 fb8d 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   2405c:	484a      	ldr	r0, [pc, #296]	; (24188 <z_thread_abort+0x15c>)
   2405e:	f7fe f851 	bl	22104 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   24062:	7b23      	ldrb	r3, [r4, #12]
   24064:	07d9      	lsls	r1, r3, #31
   24066:	d523      	bpl.n	240b0 <z_thread_abort+0x84>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24068:	4847      	ldr	r0, [pc, #284]	; (24188 <z_thread_abort+0x15c>)
   2406a:	f7fe f83b 	bl	220e4 <z_spin_unlock_valid>
   2406e:	b940      	cbnz	r0, 24082 <z_thread_abort+0x56>
   24070:	4946      	ldr	r1, [pc, #280]	; (2418c <z_thread_abort+0x160>)
   24072:	4847      	ldr	r0, [pc, #284]	; (24190 <z_thread_abort+0x164>)
   24074:	22b9      	movs	r2, #185	; 0xb9
   24076:	f004 fb85 	bl	28784 <assert_print>
   2407a:	4844      	ldr	r0, [pc, #272]	; (2418c <z_thread_abort+0x160>)
   2407c:	21b9      	movs	r1, #185	; 0xb9
   2407e:	f004 fb7a 	bl	28776 <assert_post_action>
	__asm__ volatile(
   24082:	f386 8811 	msr	BASEPRI, r6
   24086:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   2408a:	f240 62b5 	movw	r2, #1717	; 0x6b5
   2408e:	4941      	ldr	r1, [pc, #260]	; (24194 <z_thread_abort+0x168>)
   24090:	483f      	ldr	r0, [pc, #252]	; (24190 <z_thread_abort+0x164>)
   24092:	f004 fb77 	bl	28784 <assert_print>
   24096:	483f      	ldr	r0, [pc, #252]	; (24194 <z_thread_abort+0x168>)
   24098:	f240 61b5 	movw	r1, #1717	; 0x6b5
   2409c:	f004 fb6b 	bl	28776 <assert_post_action>
		k_panic();
   240a0:	4040      	eors	r0, r0
   240a2:	f380 8811 	msr	BASEPRI, r0
   240a6:	f04f 0004 	mov.w	r0, #4
   240aa:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   240ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   240b0:	7b63      	ldrb	r3, [r4, #13]
   240b2:	071a      	lsls	r2, r3, #28
   240b4:	d511      	bpl.n	240da <z_thread_abort+0xae>
   240b6:	4834      	ldr	r0, [pc, #208]	; (24188 <z_thread_abort+0x15c>)
   240b8:	f7fe f814 	bl	220e4 <z_spin_unlock_valid>
   240bc:	b940      	cbnz	r0, 240d0 <z_thread_abort+0xa4>
   240be:	4933      	ldr	r1, [pc, #204]	; (2418c <z_thread_abort+0x160>)
   240c0:	4833      	ldr	r0, [pc, #204]	; (24190 <z_thread_abort+0x164>)
   240c2:	22b9      	movs	r2, #185	; 0xb9
   240c4:	f004 fb5e 	bl	28784 <assert_print>
   240c8:	4830      	ldr	r0, [pc, #192]	; (2418c <z_thread_abort+0x160>)
   240ca:	21b9      	movs	r1, #185	; 0xb9
   240cc:	f004 fb53 	bl	28776 <assert_post_action>
   240d0:	f386 8811 	msr	BASEPRI, r6
   240d4:	f3bf 8f6f 	isb	sy
   240d8:	e7e8      	b.n	240ac <z_thread_abort+0x80>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   240da:	f023 0220 	bic.w	r2, r3, #32
   240de:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   240e2:	09d2      	lsrs	r2, r2, #7
   240e4:	d138      	bne.n	24158 <z_thread_abort+0x12c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   240e6:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   240e8:	68a3      	ldr	r3, [r4, #8]
   240ea:	b113      	cbz	r3, 240f2 <z_thread_abort+0xc6>
			unpend_thread_no_timeout(thread);
   240ec:	4620      	mov	r0, r4
   240ee:	f7ff f98d 	bl	2340c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   240f2:	f104 0018 	add.w	r0, r4, #24
   240f6:	f000 f9bd 	bl	24474 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   240fa:	f104 0758 	add.w	r7, r4, #88	; 0x58
   240fe:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   24102:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24104:	42bd      	cmp	r5, r7
   24106:	d000      	beq.n	2410a <z_thread_abort+0xde>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24108:	bb85      	cbnz	r5, 2416c <z_thread_abort+0x140>
		update_cache(1);
   2410a:	2001      	movs	r0, #1
   2410c:	f7ff f9d6 	bl	234bc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   24110:	4b21      	ldr	r3, [pc, #132]	; (24198 <z_thread_abort+0x16c>)
   24112:	689b      	ldr	r3, [r3, #8]
   24114:	42a3      	cmp	r3, r4
   24116:	d1ce      	bne.n	240b6 <z_thread_abort+0x8a>
   24118:	f3ef 8305 	mrs	r3, IPSR
   2411c:	2b00      	cmp	r3, #0
   2411e:	d1ca      	bne.n	240b6 <z_thread_abort+0x8a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24120:	4819      	ldr	r0, [pc, #100]	; (24188 <z_thread_abort+0x15c>)
   24122:	f7fd ffdf 	bl	220e4 <z_spin_unlock_valid>
   24126:	b940      	cbnz	r0, 2413a <z_thread_abort+0x10e>
   24128:	4918      	ldr	r1, [pc, #96]	; (2418c <z_thread_abort+0x160>)
   2412a:	4819      	ldr	r0, [pc, #100]	; (24190 <z_thread_abort+0x164>)
   2412c:	22d0      	movs	r2, #208	; 0xd0
   2412e:	f004 fb29 	bl	28784 <assert_print>
   24132:	4816      	ldr	r0, [pc, #88]	; (2418c <z_thread_abort+0x160>)
   24134:	21d0      	movs	r1, #208	; 0xd0
   24136:	f004 fb1e 	bl	28776 <assert_post_action>
   2413a:	4630      	mov	r0, r6
   2413c:	f7f0 fb28 	bl	14790 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   24140:	4914      	ldr	r1, [pc, #80]	; (24194 <z_thread_abort+0x168>)
   24142:	4813      	ldr	r0, [pc, #76]	; (24190 <z_thread_abort+0x164>)
   24144:	f240 62e4 	movw	r2, #1764	; 0x6e4
   24148:	f004 fb1c 	bl	28784 <assert_print>
   2414c:	4811      	ldr	r0, [pc, #68]	; (24194 <z_thread_abort+0x168>)
   2414e:	f240 61e4 	movw	r1, #1764	; 0x6e4
   24152:	f004 fb10 	bl	28776 <assert_post_action>
   24156:	e7ae      	b.n	240b6 <z_thread_abort+0x8a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24158:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2415c:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   24160:	480e      	ldr	r0, [pc, #56]	; (2419c <z_thread_abort+0x170>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24162:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   24164:	4621      	mov	r1, r4
   24166:	f7ff f933 	bl	233d0 <z_priq_dumb_remove>
}
   2416a:	e7bd      	b.n	240e8 <z_thread_abort+0xbc>
		unpend_thread_no_timeout(thread);
   2416c:	4628      	mov	r0, r5
   2416e:	f7ff f94d 	bl	2340c <unpend_thread_no_timeout>
   24172:	f105 0018 	add.w	r0, r5, #24
   24176:	f000 f97d 	bl	24474 <z_abort_timeout>
   2417a:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   2417e:	4628      	mov	r0, r5
   24180:	f7ff fa82 	bl	23688 <ready_thread>
   24184:	e7bd      	b.n	24102 <z_thread_abort+0xd6>
   24186:	bf00      	nop
   24188:	20002be0 	.word	0x20002be0
   2418c:	0002d57d 	.word	0x0002d57d
   24190:	0002d509 	.word	0x0002d509
   24194:	000305f1 	.word	0x000305f1
   24198:	20002ba0 	.word	0x20002ba0
   2419c:	20002bc0 	.word	0x20002bc0

000241a0 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   241a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   241a2:	4604      	mov	r4, r0
   241a4:	460e      	mov	r6, r1
   241a6:	4615      	mov	r5, r2
	__asm__ volatile(
   241a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   241ac:	f3ef 8711 	mrs	r7, BASEPRI
   241b0:	f383 8812 	msr	BASEPRI_MAX, r3
   241b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   241b8:	4819      	ldr	r0, [pc, #100]	; (24220 <z_sched_wake+0x80>)
   241ba:	f7fd ff85 	bl	220c8 <z_spin_lock_valid>
   241be:	b940      	cbnz	r0, 241d2 <z_sched_wake+0x32>
   241c0:	4918      	ldr	r1, [pc, #96]	; (24224 <z_sched_wake+0x84>)
   241c2:	4819      	ldr	r0, [pc, #100]	; (24228 <z_sched_wake+0x88>)
   241c4:	228e      	movs	r2, #142	; 0x8e
   241c6:	f004 fadd 	bl	28784 <assert_print>
   241ca:	4816      	ldr	r0, [pc, #88]	; (24224 <z_sched_wake+0x84>)
   241cc:	218e      	movs	r1, #142	; 0x8e
   241ce:	f004 fad2 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   241d2:	4813      	ldr	r0, [pc, #76]	; (24220 <z_sched_wake+0x80>)
   241d4:	f7fd ff96 	bl	22104 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   241d8:	4620      	mov	r0, r4
   241da:	f007 fe99 	bl	2bf10 <z_priq_dumb_best>

		if (thread != NULL) {
   241de:	4604      	mov	r4, r0
   241e0:	b158      	cbz	r0, 241fa <z_sched_wake+0x5a>
   241e2:	67c6      	str	r6, [r0, #124]	; 0x7c
   241e4:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   241e6:	f7ff f911 	bl	2340c <unpend_thread_no_timeout>
   241ea:	f104 0018 	add.w	r0, r4, #24
   241ee:	f000 f941 	bl	24474 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   241f2:	4620      	mov	r0, r4
   241f4:	f7ff fa48 	bl	23688 <ready_thread>
			ret = true;
   241f8:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   241fa:	4809      	ldr	r0, [pc, #36]	; (24220 <z_sched_wake+0x80>)
   241fc:	f7fd ff72 	bl	220e4 <z_spin_unlock_valid>
   24200:	b940      	cbnz	r0, 24214 <z_sched_wake+0x74>
   24202:	4908      	ldr	r1, [pc, #32]	; (24224 <z_sched_wake+0x84>)
   24204:	4808      	ldr	r0, [pc, #32]	; (24228 <z_sched_wake+0x88>)
   24206:	22b9      	movs	r2, #185	; 0xb9
   24208:	f004 fabc 	bl	28784 <assert_print>
   2420c:	4805      	ldr	r0, [pc, #20]	; (24224 <z_sched_wake+0x84>)
   2420e:	21b9      	movs	r1, #185	; 0xb9
   24210:	f004 fab1 	bl	28776 <assert_post_action>
	__asm__ volatile(
   24214:	f387 8811 	msr	BASEPRI, r7
   24218:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2421c:	4620      	mov	r0, r4
   2421e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24220:	20002be0 	.word	0x20002be0
   24224:	0002d57d 	.word	0x0002d57d
   24228:	0002d509 	.word	0x0002d509

0002422c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2422c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2422e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   24232:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   24234:	e9cd 6700 	strd	r6, r7, [sp]
   24238:	f7ff fbd4 	bl	239e4 <z_pend_curr>

	if (data != NULL) {
   2423c:	b11c      	cbz	r4, 24246 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2423e:	4b03      	ldr	r3, [pc, #12]	; (2424c <z_sched_wait+0x20>)
   24240:	689b      	ldr	r3, [r3, #8]
   24242:	695b      	ldr	r3, [r3, #20]
   24244:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   24246:	b002      	add	sp, #8
   24248:	bdd0      	pop	{r4, r6, r7, pc}
   2424a:	bf00      	nop
   2424c:	20002ba0 	.word	0x20002ba0

00024250 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   24250:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   24252:	4806      	ldr	r0, [pc, #24]	; (2426c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   24254:	4a06      	ldr	r2, [pc, #24]	; (24270 <z_data_copy+0x20>)
   24256:	4907      	ldr	r1, [pc, #28]	; (24274 <z_data_copy+0x24>)
   24258:	1a12      	subs	r2, r2, r0
   2425a:	f007 fd4f 	bl	2bcfc <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2425e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   24262:	4a05      	ldr	r2, [pc, #20]	; (24278 <z_data_copy+0x28>)
   24264:	4905      	ldr	r1, [pc, #20]	; (2427c <z_data_copy+0x2c>)
   24266:	4806      	ldr	r0, [pc, #24]	; (24280 <z_data_copy+0x30>)
   24268:	f007 bd48 	b.w	2bcfc <z_early_memcpy>
   2426c:	20000000 	.word	0x20000000
   24270:	20000c48 	.word	0x20000c48
   24274:	000307b4 	.word	0x000307b4
   24278:	00000000 	.word	0x00000000
   2427c:	000307b4 	.word	0x000307b4
   24280:	20000000 	.word	0x20000000

00024284 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   24284:	4b03      	ldr	r3, [pc, #12]	; (24294 <elapsed+0x10>)
   24286:	681b      	ldr	r3, [r3, #0]
   24288:	b90b      	cbnz	r3, 2428e <elapsed+0xa>
   2428a:	f7fb b817 	b.w	1f2bc <sys_clock_elapsed>
}
   2428e:	2000      	movs	r0, #0
   24290:	4770      	bx	lr
   24292:	bf00      	nop
   24294:	20002bec 	.word	0x20002bec

00024298 <next_timeout>:
	return list->head == list;
   24298:	4b10      	ldr	r3, [pc, #64]	; (242dc <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   2429a:	b510      	push	{r4, lr}
   2429c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2429e:	429c      	cmp	r4, r3
   242a0:	bf08      	it	eq
   242a2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   242a4:	f7ff ffee 	bl	24284 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   242a8:	b1a4      	cbz	r4, 242d4 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   242aa:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   242ae:	1a1b      	subs	r3, r3, r0
   242b0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   242b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   242b8:	f170 0200 	sbcs.w	r2, r0, #0
   242bc:	da0a      	bge.n	242d4 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   242be:	2800      	cmp	r0, #0
   242c0:	bfac      	ite	ge
   242c2:	4618      	movge	r0, r3
   242c4:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   242c6:	4b06      	ldr	r3, [pc, #24]	; (242e0 <next_timeout+0x48>)
   242c8:	691b      	ldr	r3, [r3, #16]
   242ca:	b113      	cbz	r3, 242d2 <next_timeout+0x3a>
   242cc:	4298      	cmp	r0, r3
   242ce:	bfa8      	it	ge
   242d0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   242d2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   242d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   242d8:	e7f5      	b.n	242c6 <next_timeout+0x2e>
   242da:	bf00      	nop
   242dc:	200007f8 	.word	0x200007f8
   242e0:	20002ba0 	.word	0x20002ba0

000242e4 <remove_timeout>:
{
   242e4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   242e6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   242e8:	b168      	cbz	r0, 24306 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   242ea:	4a0a      	ldr	r2, [pc, #40]	; (24314 <remove_timeout+0x30>)
   242ec:	6852      	ldr	r2, [r2, #4]
   242ee:	4290      	cmp	r0, r2
   242f0:	d009      	beq.n	24306 <remove_timeout+0x22>
	if (next(t) != NULL) {
   242f2:	b143      	cbz	r3, 24306 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   242f4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   242f8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   242fc:	1912      	adds	r2, r2, r4
   242fe:	eb41 0105 	adc.w	r1, r1, r5
   24302:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   24306:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   24308:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2430a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2430c:	2300      	movs	r3, #0
	node->prev = NULL;
   2430e:	e9c0 3300 	strd	r3, r3, [r0]
}
   24312:	bd30      	pop	{r4, r5, pc}
   24314:	200007f8 	.word	0x200007f8

00024318 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2431c:	bf08      	it	eq
   2431e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   24322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24326:	4604      	mov	r4, r0
   24328:	460e      	mov	r6, r1
   2432a:	4698      	mov	r8, r3
   2432c:	4615      	mov	r5, r2
   2432e:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24330:	f000 8090 	beq.w	24454 <z_add_timeout+0x13c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   24334:	6803      	ldr	r3, [r0, #0]
   24336:	b143      	cbz	r3, 2434a <z_add_timeout+0x32>
   24338:	4947      	ldr	r1, [pc, #284]	; (24458 <z_add_timeout+0x140>)
   2433a:	4848      	ldr	r0, [pc, #288]	; (2445c <z_add_timeout+0x144>)
   2433c:	2263      	movs	r2, #99	; 0x63
   2433e:	f004 fa21 	bl	28784 <assert_print>
   24342:	4845      	ldr	r0, [pc, #276]	; (24458 <z_add_timeout+0x140>)
   24344:	2163      	movs	r1, #99	; 0x63
   24346:	f004 fa16 	bl	28776 <assert_post_action>
	to->fn = fn;
   2434a:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   2434c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24350:	f3ef 8611 	mrs	r6, BASEPRI
   24354:	f383 8812 	msr	BASEPRI_MAX, r3
   24358:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2435c:	4840      	ldr	r0, [pc, #256]	; (24460 <z_add_timeout+0x148>)
   2435e:	f7fd feb3 	bl	220c8 <z_spin_lock_valid>
   24362:	b940      	cbnz	r0, 24376 <z_add_timeout+0x5e>
   24364:	493f      	ldr	r1, [pc, #252]	; (24464 <z_add_timeout+0x14c>)
   24366:	483d      	ldr	r0, [pc, #244]	; (2445c <z_add_timeout+0x144>)
   24368:	228e      	movs	r2, #142	; 0x8e
   2436a:	f004 fa0b 	bl	28784 <assert_print>
   2436e:	483d      	ldr	r0, [pc, #244]	; (24464 <z_add_timeout+0x14c>)
   24370:	218e      	movs	r1, #142	; 0x8e
   24372:	f004 fa00 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   24376:	483a      	ldr	r0, [pc, #232]	; (24460 <z_add_timeout+0x148>)
   24378:	f7fd fec4 	bl	22104 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2437c:	f06f 0201 	mvn.w	r2, #1
   24380:	1b53      	subs	r3, r2, r5
   24382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24386:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2438a:	2b00      	cmp	r3, #0
   2438c:	db1b      	blt.n	243c6 <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2438e:	4b36      	ldr	r3, [pc, #216]	; (24468 <z_add_timeout+0x150>)
   24390:	e9d3 1300 	ldrd	r1, r3, [r3]
   24394:	1a52      	subs	r2, r2, r1
   24396:	eb60 0303 	sbc.w	r3, r0, r3
   2439a:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   2439c:	eb63 0707 	sbc.w	r7, r3, r7
   243a0:	2d01      	cmp	r5, #1
   243a2:	f177 0300 	sbcs.w	r3, r7, #0
   243a6:	bfbc      	itt	lt
   243a8:	2501      	movlt	r5, #1
   243aa:	2700      	movlt	r7, #0
   243ac:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   243b0:	4a2e      	ldr	r2, [pc, #184]	; (2446c <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   243b2:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   243b6:	4293      	cmp	r3, r2
   243b8:	d118      	bne.n	243ec <z_add_timeout+0xd4>
	node->prev = tail;
   243ba:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   243be:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   243c2:	6054      	str	r4, [r2, #4]
}
   243c4:	e026      	b.n	24414 <z_add_timeout+0xfc>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   243c6:	f7ff ff5d 	bl	24284 <elapsed>
   243ca:	3501      	adds	r5, #1
   243cc:	f148 0800 	adc.w	r8, r8, #0
   243d0:	182d      	adds	r5, r5, r0
   243d2:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   243d6:	e9c4 5004 	strd	r5, r0, [r4, #16]
   243da:	e7e9      	b.n	243b0 <z_add_timeout+0x98>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   243dc:	1a09      	subs	r1, r1, r0
   243de:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   243e2:	459c      	cmp	ip, r3
   243e4:	e9c4 1504 	strd	r1, r5, [r4, #16]
   243e8:	d0e7      	beq.n	243ba <z_add_timeout+0xa2>
   243ea:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   243ec:	2b00      	cmp	r3, #0
   243ee:	d0e4      	beq.n	243ba <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   243f0:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   243f4:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   243f8:	4281      	cmp	r1, r0
   243fa:	eb75 0e07 	sbcs.w	lr, r5, r7
   243fe:	daed      	bge.n	243dc <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   24400:	1a41      	subs	r1, r0, r1
   24402:	eb67 0505 	sbc.w	r5, r7, r5
   24406:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   2440a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2440c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   24410:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   24412:	605c      	str	r4, [r3, #4]
	return list->head == list;
   24414:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24416:	4293      	cmp	r3, r2
   24418:	d00b      	beq.n	24432 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2441a:	429c      	cmp	r4, r3
   2441c:	d109      	bne.n	24432 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2441e:	f7ff ff3b 	bl	24298 <next_timeout>

			if (next_time == 0 ||
   24422:	b118      	cbz	r0, 2442c <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   24424:	4b12      	ldr	r3, [pc, #72]	; (24470 <z_add_timeout+0x158>)
			if (next_time == 0 ||
   24426:	691b      	ldr	r3, [r3, #16]
   24428:	4283      	cmp	r3, r0
   2442a:	d002      	beq.n	24432 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   2442c:	2100      	movs	r1, #0
   2442e:	f7fa ff13 	bl	1f258 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24432:	480b      	ldr	r0, [pc, #44]	; (24460 <z_add_timeout+0x148>)
   24434:	f7fd fe56 	bl	220e4 <z_spin_unlock_valid>
   24438:	b940      	cbnz	r0, 2444c <z_add_timeout+0x134>
   2443a:	490a      	ldr	r1, [pc, #40]	; (24464 <z_add_timeout+0x14c>)
   2443c:	4807      	ldr	r0, [pc, #28]	; (2445c <z_add_timeout+0x144>)
   2443e:	22b9      	movs	r2, #185	; 0xb9
   24440:	f004 f9a0 	bl	28784 <assert_print>
   24444:	4807      	ldr	r0, [pc, #28]	; (24464 <z_add_timeout+0x14c>)
   24446:	21b9      	movs	r1, #185	; 0xb9
   24448:	f004 f995 	bl	28776 <assert_post_action>
	__asm__ volatile(
   2444c:	f386 8811 	msr	BASEPRI, r6
   24450:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   24454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24458:	00030613 	.word	0x00030613
   2445c:	0002d509 	.word	0x0002d509
   24460:	20002bf0 	.word	0x20002bf0
   24464:	0002d57d 	.word	0x0002d57d
   24468:	20002138 	.word	0x20002138
   2446c:	200007f8 	.word	0x200007f8
   24470:	20002ba0 	.word	0x20002ba0

00024474 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   24474:	b538      	push	{r3, r4, r5, lr}
   24476:	4604      	mov	r4, r0
	__asm__ volatile(
   24478:	f04f 0340 	mov.w	r3, #64	; 0x40
   2447c:	f3ef 8511 	mrs	r5, BASEPRI
   24480:	f383 8812 	msr	BASEPRI_MAX, r3
   24484:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24488:	4815      	ldr	r0, [pc, #84]	; (244e0 <z_abort_timeout+0x6c>)
   2448a:	f7fd fe1d 	bl	220c8 <z_spin_lock_valid>
   2448e:	b940      	cbnz	r0, 244a2 <z_abort_timeout+0x2e>
   24490:	4914      	ldr	r1, [pc, #80]	; (244e4 <z_abort_timeout+0x70>)
   24492:	4815      	ldr	r0, [pc, #84]	; (244e8 <z_abort_timeout+0x74>)
   24494:	228e      	movs	r2, #142	; 0x8e
   24496:	f004 f975 	bl	28784 <assert_print>
   2449a:	4812      	ldr	r0, [pc, #72]	; (244e4 <z_abort_timeout+0x70>)
   2449c:	218e      	movs	r1, #142	; 0x8e
   2449e:	f004 f96a 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   244a2:	480f      	ldr	r0, [pc, #60]	; (244e0 <z_abort_timeout+0x6c>)
   244a4:	f7fd fe2e 	bl	22104 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   244a8:	6823      	ldr	r3, [r4, #0]
   244aa:	b1b3      	cbz	r3, 244da <z_abort_timeout+0x66>
			remove_timeout(to);
   244ac:	4620      	mov	r0, r4
   244ae:	f7ff ff19 	bl	242e4 <remove_timeout>
			ret = 0;
   244b2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   244b4:	480a      	ldr	r0, [pc, #40]	; (244e0 <z_abort_timeout+0x6c>)
   244b6:	f7fd fe15 	bl	220e4 <z_spin_unlock_valid>
   244ba:	b940      	cbnz	r0, 244ce <z_abort_timeout+0x5a>
   244bc:	4909      	ldr	r1, [pc, #36]	; (244e4 <z_abort_timeout+0x70>)
   244be:	480a      	ldr	r0, [pc, #40]	; (244e8 <z_abort_timeout+0x74>)
   244c0:	22b9      	movs	r2, #185	; 0xb9
   244c2:	f004 f95f 	bl	28784 <assert_print>
   244c6:	4807      	ldr	r0, [pc, #28]	; (244e4 <z_abort_timeout+0x70>)
   244c8:	21b9      	movs	r1, #185	; 0xb9
   244ca:	f004 f954 	bl	28776 <assert_post_action>
	__asm__ volatile(
   244ce:	f385 8811 	msr	BASEPRI, r5
   244d2:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   244d6:	4620      	mov	r0, r4
   244d8:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   244da:	f06f 0415 	mvn.w	r4, #21
   244de:	e7e9      	b.n	244b4 <z_abort_timeout+0x40>
   244e0:	20002bf0 	.word	0x20002bf0
   244e4:	0002d57d 	.word	0x0002d57d
   244e8:	0002d509 	.word	0x0002d509

000244ec <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   244ec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   244ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   244f2:	f3ef 8511 	mrs	r5, BASEPRI
   244f6:	f383 8812 	msr	BASEPRI_MAX, r3
   244fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   244fe:	4813      	ldr	r0, [pc, #76]	; (2454c <z_get_next_timeout_expiry+0x60>)
   24500:	f7fd fde2 	bl	220c8 <z_spin_lock_valid>
   24504:	b940      	cbnz	r0, 24518 <z_get_next_timeout_expiry+0x2c>
   24506:	4912      	ldr	r1, [pc, #72]	; (24550 <z_get_next_timeout_expiry+0x64>)
   24508:	4812      	ldr	r0, [pc, #72]	; (24554 <z_get_next_timeout_expiry+0x68>)
   2450a:	228e      	movs	r2, #142	; 0x8e
   2450c:	f004 f93a 	bl	28784 <assert_print>
   24510:	480f      	ldr	r0, [pc, #60]	; (24550 <z_get_next_timeout_expiry+0x64>)
   24512:	218e      	movs	r1, #142	; 0x8e
   24514:	f004 f92f 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   24518:	480c      	ldr	r0, [pc, #48]	; (2454c <z_get_next_timeout_expiry+0x60>)
   2451a:	f7fd fdf3 	bl	22104 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2451e:	f7ff febb 	bl	24298 <next_timeout>
   24522:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24524:	4809      	ldr	r0, [pc, #36]	; (2454c <z_get_next_timeout_expiry+0x60>)
   24526:	f7fd fddd 	bl	220e4 <z_spin_unlock_valid>
   2452a:	b940      	cbnz	r0, 2453e <z_get_next_timeout_expiry+0x52>
   2452c:	4908      	ldr	r1, [pc, #32]	; (24550 <z_get_next_timeout_expiry+0x64>)
   2452e:	4809      	ldr	r0, [pc, #36]	; (24554 <z_get_next_timeout_expiry+0x68>)
   24530:	22b9      	movs	r2, #185	; 0xb9
   24532:	f004 f927 	bl	28784 <assert_print>
   24536:	4806      	ldr	r0, [pc, #24]	; (24550 <z_get_next_timeout_expiry+0x64>)
   24538:	21b9      	movs	r1, #185	; 0xb9
   2453a:	f004 f91c 	bl	28776 <assert_post_action>
	__asm__ volatile(
   2453e:	f385 8811 	msr	BASEPRI, r5
   24542:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   24546:	4620      	mov	r0, r4
   24548:	bd38      	pop	{r3, r4, r5, pc}
   2454a:	bf00      	nop
   2454c:	20002bf0 	.word	0x20002bf0
   24550:	0002d57d 	.word	0x0002d57d
   24554:	0002d509 	.word	0x0002d509

00024558 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   24558:	b570      	push	{r4, r5, r6, lr}
   2455a:	4604      	mov	r4, r0
   2455c:	460d      	mov	r5, r1
	__asm__ volatile(
   2455e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24562:	f3ef 8611 	mrs	r6, BASEPRI
   24566:	f383 8812 	msr	BASEPRI_MAX, r3
   2456a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2456e:	4816      	ldr	r0, [pc, #88]	; (245c8 <z_set_timeout_expiry+0x70>)
   24570:	f7fd fdaa 	bl	220c8 <z_spin_lock_valid>
   24574:	b940      	cbnz	r0, 24588 <z_set_timeout_expiry+0x30>
   24576:	4915      	ldr	r1, [pc, #84]	; (245cc <z_set_timeout_expiry+0x74>)
   24578:	4815      	ldr	r0, [pc, #84]	; (245d0 <z_set_timeout_expiry+0x78>)
   2457a:	228e      	movs	r2, #142	; 0x8e
   2457c:	f004 f902 	bl	28784 <assert_print>
   24580:	4812      	ldr	r0, [pc, #72]	; (245cc <z_set_timeout_expiry+0x74>)
   24582:	218e      	movs	r1, #142	; 0x8e
   24584:	f004 f8f7 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   24588:	480f      	ldr	r0, [pc, #60]	; (245c8 <z_set_timeout_expiry+0x70>)
   2458a:	f7fd fdbb 	bl	22104 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   2458e:	f7ff fe83 	bl	24298 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   24592:	2801      	cmp	r0, #1
   24594:	dd05      	ble.n	245a2 <z_set_timeout_expiry+0x4a>
   24596:	42a0      	cmp	r0, r4
   24598:	db03      	blt.n	245a2 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2459a:	4629      	mov	r1, r5
   2459c:	4620      	mov	r0, r4
   2459e:	f7fa fe5b 	bl	1f258 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   245a2:	4809      	ldr	r0, [pc, #36]	; (245c8 <z_set_timeout_expiry+0x70>)
   245a4:	f7fd fd9e 	bl	220e4 <z_spin_unlock_valid>
   245a8:	b940      	cbnz	r0, 245bc <z_set_timeout_expiry+0x64>
   245aa:	4908      	ldr	r1, [pc, #32]	; (245cc <z_set_timeout_expiry+0x74>)
   245ac:	4808      	ldr	r0, [pc, #32]	; (245d0 <z_set_timeout_expiry+0x78>)
   245ae:	22b9      	movs	r2, #185	; 0xb9
   245b0:	f004 f8e8 	bl	28784 <assert_print>
   245b4:	4805      	ldr	r0, [pc, #20]	; (245cc <z_set_timeout_expiry+0x74>)
   245b6:	21b9      	movs	r1, #185	; 0xb9
   245b8:	f004 f8dd 	bl	28776 <assert_post_action>
	__asm__ volatile(
   245bc:	f386 8811 	msr	BASEPRI, r6
   245c0:	f3bf 8f6f 	isb	sy
		}
	}
}
   245c4:	bd70      	pop	{r4, r5, r6, pc}
   245c6:	bf00      	nop
   245c8:	20002bf0 	.word	0x20002bf0
   245cc:	0002d57d 	.word	0x0002d57d
   245d0:	0002d509 	.word	0x0002d509

000245d4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   245d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   245d8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   245da:	f7fe ffef 	bl	235bc <z_time_slice>
	__asm__ volatile(
   245de:	f04f 0340 	mov.w	r3, #64	; 0x40
   245e2:	f3ef 8611 	mrs	r6, BASEPRI
   245e6:	f383 8812 	msr	BASEPRI_MAX, r3
   245ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245ee:	4845      	ldr	r0, [pc, #276]	; (24704 <sys_clock_announce+0x130>)
   245f0:	f7fd fd6a 	bl	220c8 <z_spin_lock_valid>
   245f4:	b940      	cbnz	r0, 24608 <sys_clock_announce+0x34>
   245f6:	4944      	ldr	r1, [pc, #272]	; (24708 <sys_clock_announce+0x134>)
   245f8:	4844      	ldr	r0, [pc, #272]	; (2470c <sys_clock_announce+0x138>)
   245fa:	228e      	movs	r2, #142	; 0x8e
   245fc:	f004 f8c2 	bl	28784 <assert_print>
   24600:	4841      	ldr	r0, [pc, #260]	; (24708 <sys_clock_announce+0x134>)
   24602:	218e      	movs	r1, #142	; 0x8e
   24604:	f004 f8b7 	bl	28776 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   24608:	f8df 8104 	ldr.w	r8, [pc, #260]	; 24710 <sys_clock_announce+0x13c>
	z_spin_lock_set_owner(l);
   2460c:	483d      	ldr	r0, [pc, #244]	; (24704 <sys_clock_announce+0x130>)
	return list->head == list;
   2460e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 24714 <sys_clock_announce+0x140>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   24612:	4f41      	ldr	r7, [pc, #260]	; (24718 <sys_clock_announce+0x144>)
   24614:	f7fd fd76 	bl	22104 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   24618:	f8c8 4000 	str.w	r4, [r8]
   2461c:	f8d9 4000 	ldr.w	r4, [r9]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   24620:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24624:	454c      	cmp	r4, r9
		curr_tick += dt;
   24626:	e9d7 2c00 	ldrd	r2, ip, [r7]
   2462a:	ea4f 71e3 	mov.w	r1, r3, asr #31
   2462e:	d00b      	beq.n	24648 <sys_clock_announce+0x74>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   24630:	b154      	cbz	r4, 24648 <sys_clock_announce+0x74>
   24632:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
   24636:	42ab      	cmp	r3, r5
   24638:	eb71 0e00 	sbcs.w	lr, r1, r0
   2463c:	da24      	bge.n	24688 <sys_clock_announce+0xb4>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2463e:	1aed      	subs	r5, r5, r3
   24640:	eb60 0001 	sbc.w	r0, r0, r1
   24644:	e9c4 5004 	strd	r5, r0, [r4, #16]
	}

	curr_tick += announce_remaining;
   24648:	189b      	adds	r3, r3, r2
   2464a:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
   2464e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   24650:	e9c7 3100 	strd	r3, r1, [r7]
	announce_remaining = 0;
   24654:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   24658:	f7ff fe1e 	bl	24298 <next_timeout>
   2465c:	4621      	mov	r1, r4
   2465e:	f7fa fdfb 	bl	1f258 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24662:	4828      	ldr	r0, [pc, #160]	; (24704 <sys_clock_announce+0x130>)
   24664:	f7fd fd3e 	bl	220e4 <z_spin_unlock_valid>
   24668:	b940      	cbnz	r0, 2467c <sys_clock_announce+0xa8>
   2466a:	4927      	ldr	r1, [pc, #156]	; (24708 <sys_clock_announce+0x134>)
   2466c:	4827      	ldr	r0, [pc, #156]	; (2470c <sys_clock_announce+0x138>)
   2466e:	22b9      	movs	r2, #185	; 0xb9
   24670:	f004 f888 	bl	28784 <assert_print>
   24674:	4824      	ldr	r0, [pc, #144]	; (24708 <sys_clock_announce+0x134>)
   24676:	21b9      	movs	r1, #185	; 0xb9
   24678:	f004 f87d 	bl	28776 <assert_post_action>
	__asm__ volatile(
   2467c:	f386 8811 	msr	BASEPRI, r6
   24680:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   24684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   24688:	18aa      	adds	r2, r5, r2
   2468a:	eb4c 71e5 	adc.w	r1, ip, r5, asr #31
   2468e:	e9c7 2100 	strd	r2, r1, [r7]
		t->dticks = 0;
   24692:	2300      	movs	r3, #0
   24694:	2200      	movs	r2, #0
		remove_timeout(t);
   24696:	4620      	mov	r0, r4
		t->dticks = 0;
   24698:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   2469c:	f7ff fe22 	bl	242e4 <remove_timeout>
   246a0:	4818      	ldr	r0, [pc, #96]	; (24704 <sys_clock_announce+0x130>)
   246a2:	f7fd fd1f 	bl	220e4 <z_spin_unlock_valid>
   246a6:	b940      	cbnz	r0, 246ba <sys_clock_announce+0xe6>
   246a8:	4917      	ldr	r1, [pc, #92]	; (24708 <sys_clock_announce+0x134>)
   246aa:	4818      	ldr	r0, [pc, #96]	; (2470c <sys_clock_announce+0x138>)
   246ac:	22b9      	movs	r2, #185	; 0xb9
   246ae:	f004 f869 	bl	28784 <assert_print>
   246b2:	4815      	ldr	r0, [pc, #84]	; (24708 <sys_clock_announce+0x134>)
   246b4:	21b9      	movs	r1, #185	; 0xb9
   246b6:	f004 f85e 	bl	28776 <assert_post_action>
   246ba:	f386 8811 	msr	BASEPRI, r6
   246be:	f3bf 8f6f 	isb	sy
		t->fn(t);
   246c2:	68a3      	ldr	r3, [r4, #8]
   246c4:	4620      	mov	r0, r4
   246c6:	4798      	blx	r3
	__asm__ volatile(
   246c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   246cc:	f3ef 8611 	mrs	r6, BASEPRI
   246d0:	f383 8812 	msr	BASEPRI_MAX, r3
   246d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   246d8:	480a      	ldr	r0, [pc, #40]	; (24704 <sys_clock_announce+0x130>)
   246da:	f7fd fcf5 	bl	220c8 <z_spin_lock_valid>
   246de:	b940      	cbnz	r0, 246f2 <sys_clock_announce+0x11e>
   246e0:	4909      	ldr	r1, [pc, #36]	; (24708 <sys_clock_announce+0x134>)
   246e2:	480a      	ldr	r0, [pc, #40]	; (2470c <sys_clock_announce+0x138>)
   246e4:	228e      	movs	r2, #142	; 0x8e
   246e6:	f004 f84d 	bl	28784 <assert_print>
   246ea:	4807      	ldr	r0, [pc, #28]	; (24708 <sys_clock_announce+0x134>)
   246ec:	218e      	movs	r1, #142	; 0x8e
   246ee:	f004 f842 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   246f2:	4804      	ldr	r0, [pc, #16]	; (24704 <sys_clock_announce+0x130>)
   246f4:	f7fd fd06 	bl	22104 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   246f8:	f8d8 3000 	ldr.w	r3, [r8]
   246fc:	1b5b      	subs	r3, r3, r5
   246fe:	f8c8 3000 	str.w	r3, [r8]
   24702:	e78b      	b.n	2461c <sys_clock_announce+0x48>
   24704:	20002bf0 	.word	0x20002bf0
   24708:	0002d57d 	.word	0x0002d57d
   2470c:	0002d509 	.word	0x0002d509
   24710:	20002bec 	.word	0x20002bec
   24714:	200007f8 	.word	0x200007f8
   24718:	20002138 	.word	0x20002138

0002471c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2471c:	b570      	push	{r4, r5, r6, lr}
   2471e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24722:	f3ef 8611 	mrs	r6, BASEPRI
   24726:	f383 8812 	msr	BASEPRI_MAX, r3
   2472a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2472e:	4816      	ldr	r0, [pc, #88]	; (24788 <sys_clock_tick_get+0x6c>)
   24730:	f7fd fcca 	bl	220c8 <z_spin_lock_valid>
   24734:	b940      	cbnz	r0, 24748 <sys_clock_tick_get+0x2c>
   24736:	4915      	ldr	r1, [pc, #84]	; (2478c <sys_clock_tick_get+0x70>)
   24738:	4815      	ldr	r0, [pc, #84]	; (24790 <sys_clock_tick_get+0x74>)
   2473a:	228e      	movs	r2, #142	; 0x8e
   2473c:	f004 f822 	bl	28784 <assert_print>
   24740:	4812      	ldr	r0, [pc, #72]	; (2478c <sys_clock_tick_get+0x70>)
   24742:	218e      	movs	r1, #142	; 0x8e
   24744:	f004 f817 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   24748:	480f      	ldr	r0, [pc, #60]	; (24788 <sys_clock_tick_get+0x6c>)
   2474a:	f7fd fcdb 	bl	22104 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   2474e:	f7ff fd99 	bl	24284 <elapsed>
   24752:	4a10      	ldr	r2, [pc, #64]	; (24794 <sys_clock_tick_get+0x78>)
   24754:	e9d2 4500 	ldrd	r4, r5, [r2]
   24758:	1904      	adds	r4, r0, r4
   2475a:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2475e:	480a      	ldr	r0, [pc, #40]	; (24788 <sys_clock_tick_get+0x6c>)
   24760:	f7fd fcc0 	bl	220e4 <z_spin_unlock_valid>
   24764:	b940      	cbnz	r0, 24778 <sys_clock_tick_get+0x5c>
   24766:	4909      	ldr	r1, [pc, #36]	; (2478c <sys_clock_tick_get+0x70>)
   24768:	4809      	ldr	r0, [pc, #36]	; (24790 <sys_clock_tick_get+0x74>)
   2476a:	22b9      	movs	r2, #185	; 0xb9
   2476c:	f004 f80a 	bl	28784 <assert_print>
   24770:	4806      	ldr	r0, [pc, #24]	; (2478c <sys_clock_tick_get+0x70>)
   24772:	21b9      	movs	r1, #185	; 0xb9
   24774:	f003 ffff 	bl	28776 <assert_post_action>
	__asm__ volatile(
   24778:	f386 8811 	msr	BASEPRI, r6
   2477c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   24780:	4620      	mov	r0, r4
   24782:	4629      	mov	r1, r5
   24784:	bd70      	pop	{r4, r5, r6, pc}
   24786:	bf00      	nop
   24788:	20002bf0 	.word	0x20002bf0
   2478c:	0002d57d 	.word	0x0002d57d
   24790:	0002d509 	.word	0x0002d509
   24794:	20002138 	.word	0x20002138

00024798 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   24798:	b570      	push	{r4, r5, r6, lr}
   2479a:	4604      	mov	r4, r0
	__asm__ volatile(
   2479c:	f04f 0340 	mov.w	r3, #64	; 0x40
   247a0:	f3ef 8511 	mrs	r5, BASEPRI
   247a4:	f383 8812 	msr	BASEPRI_MAX, r3
   247a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247ac:	4851      	ldr	r0, [pc, #324]	; (248f4 <z_timer_expiration_handler+0x15c>)
   247ae:	f7fd fc8b 	bl	220c8 <z_spin_lock_valid>
   247b2:	b940      	cbnz	r0, 247c6 <z_timer_expiration_handler+0x2e>
   247b4:	4950      	ldr	r1, [pc, #320]	; (248f8 <z_timer_expiration_handler+0x160>)
   247b6:	4851      	ldr	r0, [pc, #324]	; (248fc <z_timer_expiration_handler+0x164>)
   247b8:	228e      	movs	r2, #142	; 0x8e
   247ba:	f003 ffe3 	bl	28784 <assert_print>
   247be:	484e      	ldr	r0, [pc, #312]	; (248f8 <z_timer_expiration_handler+0x160>)
   247c0:	218e      	movs	r1, #142	; 0x8e
   247c2:	f003 ffd8 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   247c6:	484b      	ldr	r0, [pc, #300]	; (248f4 <z_timer_expiration_handler+0x15c>)
   247c8:	f7fd fc9c 	bl	22104 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   247cc:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   247d0:	3301      	adds	r3, #1
   247d2:	f142 0200 	adc.w	r2, r2, #0
   247d6:	2b02      	cmp	r3, #2
   247d8:	f172 0300 	sbcs.w	r3, r2, #0
   247dc:	d322      	bcc.n	24824 <z_timer_expiration_handler+0x8c>
	return z_impl_k_uptime_ticks();
   247de:	f007 fbb1 	bl	2bf44 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   247e2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   247e6:	3001      	adds	r0, #1
   247e8:	f141 0100 	adc.w	r1, r1, #0
   247ec:	18c0      	adds	r0, r0, r3
   247ee:	eb41 0102 	adc.w	r1, r1, r2
   247f2:	2801      	cmp	r0, #1
   247f4:	f171 0300 	sbcs.w	r3, r1, #0
   247f8:	db5c      	blt.n	248b4 <z_timer_expiration_handler+0x11c>
   247fa:	f007 fba3 	bl	2bf44 <z_impl_k_uptime_ticks>
   247fe:	3001      	adds	r0, #1
   24800:	f141 0300 	adc.w	r3, r1, #0
   24804:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   24808:	1880      	adds	r0, r0, r2
   2480a:	f06f 0201 	mvn.w	r2, #1
   2480e:	eb43 0301 	adc.w	r3, r3, r1
   24812:	1a12      	subs	r2, r2, r0
   24814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24818:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2481c:	4938      	ldr	r1, [pc, #224]	; (24900 <z_timer_expiration_handler+0x168>)
   2481e:	4620      	mov	r0, r4
   24820:	f7ff fd7a 	bl	24318 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   24824:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24826:	3301      	adds	r3, #1
   24828:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2482a:	6a23      	ldr	r3, [r4, #32]
   2482c:	b35b      	cbz	r3, 24886 <z_timer_expiration_handler+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2482e:	4831      	ldr	r0, [pc, #196]	; (248f4 <z_timer_expiration_handler+0x15c>)
   24830:	f7fd fc58 	bl	220e4 <z_spin_unlock_valid>
   24834:	b940      	cbnz	r0, 24848 <z_timer_expiration_handler+0xb0>
   24836:	4930      	ldr	r1, [pc, #192]	; (248f8 <z_timer_expiration_handler+0x160>)
   24838:	4830      	ldr	r0, [pc, #192]	; (248fc <z_timer_expiration_handler+0x164>)
   2483a:	22b9      	movs	r2, #185	; 0xb9
   2483c:	f003 ffa2 	bl	28784 <assert_print>
   24840:	482d      	ldr	r0, [pc, #180]	; (248f8 <z_timer_expiration_handler+0x160>)
   24842:	21b9      	movs	r1, #185	; 0xb9
   24844:	f003 ff97 	bl	28776 <assert_post_action>
	__asm__ volatile(
   24848:	f385 8811 	msr	BASEPRI, r5
   2484c:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   24850:	6a23      	ldr	r3, [r4, #32]
   24852:	4620      	mov	r0, r4
   24854:	4798      	blx	r3
	__asm__ volatile(
   24856:	f04f 0340 	mov.w	r3, #64	; 0x40
   2485a:	f3ef 8511 	mrs	r5, BASEPRI
   2485e:	f383 8812 	msr	BASEPRI_MAX, r3
   24862:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24866:	4823      	ldr	r0, [pc, #140]	; (248f4 <z_timer_expiration_handler+0x15c>)
   24868:	f7fd fc2e 	bl	220c8 <z_spin_lock_valid>
   2486c:	b940      	cbnz	r0, 24880 <z_timer_expiration_handler+0xe8>
   2486e:	4922      	ldr	r1, [pc, #136]	; (248f8 <z_timer_expiration_handler+0x160>)
   24870:	4822      	ldr	r0, [pc, #136]	; (248fc <z_timer_expiration_handler+0x164>)
   24872:	228e      	movs	r2, #142	; 0x8e
   24874:	f003 ff86 	bl	28784 <assert_print>
   24878:	481f      	ldr	r0, [pc, #124]	; (248f8 <z_timer_expiration_handler+0x160>)
   2487a:	218e      	movs	r1, #142	; 0x8e
   2487c:	f003 ff7b 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   24880:	481c      	ldr	r0, [pc, #112]	; (248f4 <z_timer_expiration_handler+0x15c>)
   24882:	f7fd fc3f 	bl	22104 <z_spin_lock_set_owner>
	return list->head == list;
   24886:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2488a:	42a6      	cmp	r6, r4
   2488c:	d000      	beq.n	24890 <z_timer_expiration_handler+0xf8>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2488e:	b9b6      	cbnz	r6, 248be <z_timer_expiration_handler+0x126>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24890:	4818      	ldr	r0, [pc, #96]	; (248f4 <z_timer_expiration_handler+0x15c>)
   24892:	f7fd fc27 	bl	220e4 <z_spin_unlock_valid>
   24896:	b940      	cbnz	r0, 248aa <z_timer_expiration_handler+0x112>
   24898:	4917      	ldr	r1, [pc, #92]	; (248f8 <z_timer_expiration_handler+0x160>)
   2489a:	4818      	ldr	r0, [pc, #96]	; (248fc <z_timer_expiration_handler+0x164>)
   2489c:	22b9      	movs	r2, #185	; 0xb9
   2489e:	f003 ff71 	bl	28784 <assert_print>
   248a2:	4815      	ldr	r0, [pc, #84]	; (248f8 <z_timer_expiration_handler+0x160>)
   248a4:	21b9      	movs	r1, #185	; 0xb9
   248a6:	f003 ff66 	bl	28776 <assert_post_action>
	__asm__ volatile(
   248aa:	f385 8811 	msr	BASEPRI, r5
   248ae:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   248b2:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   248b4:	f06f 0201 	mvn.w	r2, #1
   248b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   248bc:	e7ae      	b.n	2481c <z_timer_expiration_handler+0x84>
	z_unpend_thread_no_timeout(thread);
   248be:	4630      	mov	r0, r6
   248c0:	f7fe fcc6 	bl	23250 <z_unpend_thread_no_timeout>
   248c4:	2300      	movs	r3, #0
   248c6:	480b      	ldr	r0, [pc, #44]	; (248f4 <z_timer_expiration_handler+0x15c>)
   248c8:	67f3      	str	r3, [r6, #124]	; 0x7c
   248ca:	f7fd fc0b 	bl	220e4 <z_spin_unlock_valid>
   248ce:	b940      	cbnz	r0, 248e2 <z_timer_expiration_handler+0x14a>
   248d0:	4909      	ldr	r1, [pc, #36]	; (248f8 <z_timer_expiration_handler+0x160>)
   248d2:	480a      	ldr	r0, [pc, #40]	; (248fc <z_timer_expiration_handler+0x164>)
   248d4:	22b9      	movs	r2, #185	; 0xb9
   248d6:	f003 ff55 	bl	28784 <assert_print>
   248da:	4807      	ldr	r0, [pc, #28]	; (248f8 <z_timer_expiration_handler+0x160>)
   248dc:	21b9      	movs	r1, #185	; 0xb9
   248de:	f003 ff4a 	bl	28776 <assert_post_action>
   248e2:	f385 8811 	msr	BASEPRI, r5
   248e6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   248ea:	4630      	mov	r0, r6
}
   248ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   248f0:	f7fe bf14 	b.w	2371c <z_ready_thread>
   248f4:	20002bf4 	.word	0x20002bf4
   248f8:	0002d57d 	.word	0x0002d57d
   248fc:	0002d509 	.word	0x0002d509
   24900:	00024799 	.word	0x00024799

00024904 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   24904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24908:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2490a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2490e:	bf08      	it	eq
   24910:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   24914:	4606      	mov	r6, r0
   24916:	461c      	mov	r4, r3
   24918:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   2491c:	4689      	mov	r9, r1
   2491e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24920:	d03e      	beq.n	249a0 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24922:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   24926:	bf08      	it	eq
   24928:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2492c:	4615      	mov	r5, r2
   2492e:	4607      	mov	r7, r0
   24930:	d014      	beq.n	2495c <z_impl_k_timer_start+0x58>
   24932:	ea50 0302 	orrs.w	r3, r0, r2
   24936:	d011      	beq.n	2495c <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   24938:	f06f 0301 	mvn.w	r3, #1
   2493c:	1a9b      	subs	r3, r3, r2
   2493e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24942:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24946:	2b00      	cmp	r3, #0
   24948:	da08      	bge.n	2495c <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   2494a:	2a02      	cmp	r2, #2
   2494c:	f170 0300 	sbcs.w	r3, r0, #0
   24950:	bfbc      	itt	lt
   24952:	2502      	movlt	r5, #2
   24954:	2700      	movlt	r7, #0
   24956:	3d01      	subs	r5, #1
   24958:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2495c:	f06f 0301 	mvn.w	r3, #1
   24960:	1a5b      	subs	r3, r3, r1
   24962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24966:	eb63 0304 	sbc.w	r3, r3, r4
   2496a:	2b00      	cmp	r3, #0
   2496c:	da09      	bge.n	24982 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2496e:	2901      	cmp	r1, #1
   24970:	f174 0300 	sbcs.w	r3, r4, #0
   24974:	bfbc      	itt	lt
   24976:	2101      	movlt	r1, #1
   24978:	2400      	movlt	r4, #0
   2497a:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   2497e:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   24982:	4630      	mov	r0, r6
   24984:	f7ff fd76 	bl	24474 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   24988:	2300      	movs	r3, #0
   2498a:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   2498c:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24990:	464a      	mov	r2, r9
   24992:	4643      	mov	r3, r8
   24994:	4630      	mov	r0, r6
   24996:	4903      	ldr	r1, [pc, #12]	; (249a4 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   24998:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2499c:	f7ff bcbc 	b.w	24318 <z_add_timeout>
}
   249a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   249a4:	00024799 	.word	0x00024799

000249a8 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   249a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   249ac:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   249ae:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 24b78 <register_events+0x1d0>
   249b2:	4f72      	ldr	r7, [pc, #456]	; (24b7c <register_events+0x1d4>)
   249b4:	4d72      	ldr	r5, [pc, #456]	; (24b80 <register_events+0x1d8>)
{
   249b6:	9100      	str	r1, [sp, #0]
   249b8:	4614      	mov	r4, r2
   249ba:	9301      	str	r3, [sp, #4]
   249bc:	4681      	mov	r9, r0
	int events_registered = 0;
   249be:	46b0      	mov	r8, r6
	for (int ii = 0; ii < num_events; ii++) {
   249c0:	9b00      	ldr	r3, [sp, #0]
   249c2:	429e      	cmp	r6, r3
   249c4:	db03      	blt.n	249ce <register_events+0x26>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   249c6:	4640      	mov	r0, r8
   249c8:	b003      	add	sp, #12
   249ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   249ce:	f04f 0240 	mov.w	r2, #64	; 0x40
   249d2:	f3ef 8b11 	mrs	fp, BASEPRI
   249d6:	f382 8812 	msr	BASEPRI_MAX, r2
   249da:	f3bf 8f6f 	isb	sy
   249de:	4650      	mov	r0, sl
   249e0:	f7fd fb72 	bl	220c8 <z_spin_lock_valid>
   249e4:	b940      	cbnz	r0, 249f8 <register_events+0x50>
   249e6:	4639      	mov	r1, r7
   249e8:	4628      	mov	r0, r5
   249ea:	228e      	movs	r2, #142	; 0x8e
   249ec:	f003 feca 	bl	28784 <assert_print>
   249f0:	218e      	movs	r1, #142	; 0x8e
   249f2:	4638      	mov	r0, r7
   249f4:	f003 febf 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   249f8:	4650      	mov	r0, sl
   249fa:	f7fd fb83 	bl	22104 <z_spin_lock_set_owner>
	switch (event->type) {
   249fe:	f899 200d 	ldrb.w	r2, [r9, #13]
   24a02:	f002 021f 	and.w	r2, r2, #31
   24a06:	2a08      	cmp	r2, #8
   24a08:	d853      	bhi.n	24ab2 <register_events+0x10a>
   24a0a:	e8df f002 	tbb	[pc, r2]
   24a0e:	4431      	.short	0x4431
   24a10:	522d5205 	.word	0x522d5205
   24a14:	5252      	.short	0x5252
   24a16:	4b          	.byte	0x4b
   24a17:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   24a18:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24a1c:	6892      	ldr	r2, [r2, #8]
   24a1e:	b33a      	cbz	r2, 24a70 <register_events+0xc8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   24a20:	2202      	movs	r2, #2
	event->state |= state;
   24a22:	f8d9 100c 	ldr.w	r1, [r9, #12]
   24a26:	f3c1 3c45 	ubfx	ip, r1, #13, #6
   24a2a:	ea42 020c 	orr.w	r2, r2, ip
	event->poller = NULL;
   24a2e:	2000      	movs	r0, #0
	event->state |= state;
   24a30:	f362 3152 	bfi	r1, r2, #13, #6
	event->poller = NULL;
   24a34:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   24a38:	f8c9 100c 	str.w	r1, [r9, #12]
			poller->is_polling = false;
   24a3c:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a3e:	4650      	mov	r0, sl
   24a40:	f7fd fb50 	bl	220e4 <z_spin_unlock_valid>
   24a44:	b940      	cbnz	r0, 24a58 <register_events+0xb0>
   24a46:	4639      	mov	r1, r7
   24a48:	4628      	mov	r0, r5
   24a4a:	22b9      	movs	r2, #185	; 0xb9
   24a4c:	f003 fe9a 	bl	28784 <assert_print>
   24a50:	21b9      	movs	r1, #185	; 0xb9
   24a52:	4638      	mov	r0, r7
   24a54:	f003 fe8f 	bl	28776 <assert_post_action>
	__asm__ volatile(
   24a58:	f38b 8811 	msr	BASEPRI, fp
   24a5c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   24a60:	3601      	adds	r6, #1
   24a62:	f109 0914 	add.w	r9, r9, #20
   24a66:	e7ab      	b.n	249c0 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   24a68:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24a6c:	6812      	ldr	r2, [r2, #0]
   24a6e:	bb52      	cbnz	r2, 24ac6 <register_events+0x11e>
		} else if (!just_check && poller->is_polling) {
   24a70:	9b01      	ldr	r3, [sp, #4]
   24a72:	2b00      	cmp	r3, #0
   24a74:	d1e3      	bne.n	24a3e <register_events+0x96>
   24a76:	7822      	ldrb	r2, [r4, #0]
   24a78:	2a00      	cmp	r2, #0
   24a7a:	d0e0      	beq.n	24a3e <register_events+0x96>
	switch (event->type) {
   24a7c:	f899 200d 	ldrb.w	r2, [r9, #13]
   24a80:	f002 021f 	and.w	r2, r2, #31
   24a84:	2a08      	cmp	r2, #8
   24a86:	d86d      	bhi.n	24b64 <register_events+0x1bc>
   24a88:	e8df f002 	tbb	[pc, r2]
   24a8c:	6c1f4932 	.word	0x6c1f4932
   24a90:	6c6c6c37 	.word	0x6c6c6c37
   24a94:	5a          	.byte	0x5a
   24a95:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   24a96:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24a9a:	6892      	ldr	r2, [r2, #8]
   24a9c:	2a00      	cmp	r2, #0
   24a9e:	d0e7      	beq.n	24a70 <register_events+0xc8>
			*state = K_POLL_STATE_SIGNALED;
   24aa0:	2201      	movs	r2, #1
   24aa2:	e7be      	b.n	24a22 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   24aa4:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
   24aaa:	2a00      	cmp	r2, #0
   24aac:	d0e0      	beq.n	24a70 <register_events+0xc8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   24aae:	2210      	movs	r2, #16
   24ab0:	e7b7      	b.n	24a22 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   24ab2:	4628      	mov	r0, r5
   24ab4:	4933      	ldr	r1, [pc, #204]	; (24b84 <register_events+0x1dc>)
   24ab6:	225c      	movs	r2, #92	; 0x5c
   24ab8:	f003 fe64 	bl	28784 <assert_print>
   24abc:	4831      	ldr	r0, [pc, #196]	; (24b84 <register_events+0x1dc>)
   24abe:	215c      	movs	r1, #92	; 0x5c
   24ac0:	f003 fe59 	bl	28776 <assert_post_action>
		break;
   24ac4:	e7d4      	b.n	24a70 <register_events+0xc8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   24ac6:	2204      	movs	r2, #4
   24ac8:	e7ab      	b.n	24a22 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   24aca:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24ace:	b942      	cbnz	r2, 24ae2 <register_events+0x13a>
   24ad0:	492c      	ldr	r1, [pc, #176]	; (24b84 <register_events+0x1dc>)
   24ad2:	4628      	mov	r0, r5
   24ad4:	2286      	movs	r2, #134	; 0x86
   24ad6:	f003 fe55 	bl	28784 <assert_print>
   24ada:	482a      	ldr	r0, [pc, #168]	; (24b84 <register_events+0x1dc>)
   24adc:	2186      	movs	r1, #134	; 0x86
   24ade:	f003 fe4a 	bl	28776 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   24ae2:	f8d9 0010 	ldr.w	r0, [r9, #16]
   24ae6:	4622      	mov	r2, r4
   24ae8:	4649      	mov	r1, r9
   24aea:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   24aec:	f007 fa78 	bl	2bfe0 <add_event>
	event->poller = poller;
   24af0:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   24af4:	f108 0801 	add.w	r8, r8, #1
   24af8:	e7a1      	b.n	24a3e <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24afa:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24afe:	b942      	cbnz	r2, 24b12 <register_events+0x16a>
   24b00:	4920      	ldr	r1, [pc, #128]	; (24b84 <register_events+0x1dc>)
   24b02:	4628      	mov	r0, r5
   24b04:	228a      	movs	r2, #138	; 0x8a
   24b06:	f003 fe3d 	bl	28784 <assert_print>
   24b0a:	481e      	ldr	r0, [pc, #120]	; (24b84 <register_events+0x1dc>)
   24b0c:	218a      	movs	r1, #138	; 0x8a
   24b0e:	f003 fe32 	bl	28776 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   24b12:	f8d9 0010 	ldr.w	r0, [r9, #16]
   24b16:	4622      	mov	r2, r4
   24b18:	4649      	mov	r1, r9
   24b1a:	3014      	adds	r0, #20
   24b1c:	e7e6      	b.n	24aec <register_events+0x144>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24b1e:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24b22:	b942      	cbnz	r2, 24b36 <register_events+0x18e>
   24b24:	4917      	ldr	r1, [pc, #92]	; (24b84 <register_events+0x1dc>)
   24b26:	4628      	mov	r0, r5
   24b28:	228e      	movs	r2, #142	; 0x8e
   24b2a:	f003 fe2b 	bl	28784 <assert_print>
   24b2e:	4815      	ldr	r0, [pc, #84]	; (24b84 <register_events+0x1dc>)
   24b30:	218e      	movs	r1, #142	; 0x8e
   24b32:	f003 fe20 	bl	28776 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   24b36:	f8d9 0010 	ldr.w	r0, [r9, #16]
   24b3a:	4622      	mov	r2, r4
   24b3c:	4649      	mov	r1, r9
   24b3e:	e7d5      	b.n	24aec <register_events+0x144>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24b40:	f8d9 2010 	ldr.w	r2, [r9, #16]
   24b44:	b942      	cbnz	r2, 24b58 <register_events+0x1b0>
   24b46:	490f      	ldr	r1, [pc, #60]	; (24b84 <register_events+0x1dc>)
   24b48:	4628      	mov	r0, r5
   24b4a:	2292      	movs	r2, #146	; 0x92
   24b4c:	f003 fe1a 	bl	28784 <assert_print>
   24b50:	480c      	ldr	r0, [pc, #48]	; (24b84 <register_events+0x1dc>)
   24b52:	2192      	movs	r1, #146	; 0x92
   24b54:	f003 fe0f 	bl	28776 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   24b58:	f8d9 0010 	ldr.w	r0, [r9, #16]
   24b5c:	4622      	mov	r2, r4
   24b5e:	4649      	mov	r1, r9
   24b60:	3028      	adds	r0, #40	; 0x28
   24b62:	e7c3      	b.n	24aec <register_events+0x144>
		__ASSERT(false, "invalid event type\n");
   24b64:	4628      	mov	r0, r5
   24b66:	4907      	ldr	r1, [pc, #28]	; (24b84 <register_events+0x1dc>)
   24b68:	2299      	movs	r2, #153	; 0x99
   24b6a:	f003 fe0b 	bl	28784 <assert_print>
   24b6e:	4805      	ldr	r0, [pc, #20]	; (24b84 <register_events+0x1dc>)
   24b70:	2199      	movs	r1, #153	; 0x99
   24b72:	f003 fe00 	bl	28776 <assert_post_action>
		break;
   24b76:	e7bb      	b.n	24af0 <register_events+0x148>
   24b78:	20002bf8 	.word	0x20002bf8
   24b7c:	0002d57d 	.word	0x0002d57d
   24b80:	0002d509 	.word	0x0002d509
   24b84:	00030637 	.word	0x00030637

00024b88 <clear_event_registrations>:
{
   24b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24b8c:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   24b8e:	4d45      	ldr	r5, [pc, #276]	; (24ca4 <clear_event_registrations+0x11c>)
   24b90:	4e45      	ldr	r6, [pc, #276]	; (24ca8 <clear_event_registrations+0x120>)
   24b92:	f8df 9118 	ldr.w	r9, [pc, #280]	; 24cac <clear_event_registrations+0x124>
{
   24b96:	4690      	mov	r8, r2
	while (num_events--) {
   24b98:	460f      	mov	r7, r1
   24b9a:	fb04 0401 	mla	r4, r4, r1, r0
   24b9e:	b90f      	cbnz	r7, 24ba4 <clear_event_registrations+0x1c>
}
   24ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   24ba4:	2300      	movs	r3, #0
   24ba6:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   24baa:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   24bae:	f003 031f 	and.w	r3, r3, #31
   24bb2:	f1a4 0a14 	sub.w	sl, r4, #20
   24bb6:	2b08      	cmp	r3, #8
   24bb8:	d83e      	bhi.n	24c38 <clear_event_registrations+0xb0>
   24bba:	e8df f003 	tbb	[pc, r3]
   24bbe:	2746      	.short	0x2746
   24bc0:	3d1c3d05 	.word	0x3d1c3d05
   24bc4:	3d3d      	.short	0x3d3d
   24bc6:	32          	.byte	0x32
   24bc7:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   24bc8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24bcc:	b943      	cbnz	r3, 24be0 <clear_event_registrations+0x58>
   24bce:	4629      	mov	r1, r5
   24bd0:	22a9      	movs	r2, #169	; 0xa9
   24bd2:	4630      	mov	r0, r6
   24bd4:	f003 fdd6 	bl	28784 <assert_print>
   24bd8:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24bda:	4628      	mov	r0, r5
   24bdc:	f003 fdcb 	bl	28776 <assert_post_action>
	return node->next != NULL;
   24be0:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   24be4:	b38b      	cbz	r3, 24c4a <clear_event_registrations+0xc2>
	sys_dnode_t *const prev = node->prev;
   24be6:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   24bea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24bec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24bee:	2300      	movs	r3, #0
	node->prev = NULL;
   24bf0:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   24bf4:	e029      	b.n	24c4a <clear_event_registrations+0xc2>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24bf6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24bfa:	2b00      	cmp	r3, #0
   24bfc:	d1f0      	bne.n	24be0 <clear_event_registrations+0x58>
   24bfe:	4629      	mov	r1, r5
   24c00:	22ad      	movs	r2, #173	; 0xad
   24c02:	4630      	mov	r0, r6
   24c04:	f003 fdbe 	bl	28784 <assert_print>
   24c08:	21ad      	movs	r1, #173	; 0xad
   24c0a:	e7e6      	b.n	24bda <clear_event_registrations+0x52>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24c0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24c10:	2b00      	cmp	r3, #0
   24c12:	d1e5      	bne.n	24be0 <clear_event_registrations+0x58>
   24c14:	4629      	mov	r1, r5
   24c16:	22b1      	movs	r2, #177	; 0xb1
   24c18:	4630      	mov	r0, r6
   24c1a:	f003 fdb3 	bl	28784 <assert_print>
   24c1e:	21b1      	movs	r1, #177	; 0xb1
   24c20:	e7db      	b.n	24bda <clear_event_registrations+0x52>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   24c22:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24c26:	2b00      	cmp	r3, #0
   24c28:	d1da      	bne.n	24be0 <clear_event_registrations+0x58>
   24c2a:	4629      	mov	r1, r5
   24c2c:	22b5      	movs	r2, #181	; 0xb5
   24c2e:	4630      	mov	r0, r6
   24c30:	f003 fda8 	bl	28784 <assert_print>
   24c34:	21b5      	movs	r1, #181	; 0xb5
   24c36:	e7d0      	b.n	24bda <clear_event_registrations+0x52>
		__ASSERT(false, "invalid event type\n");
   24c38:	4629      	mov	r1, r5
   24c3a:	4630      	mov	r0, r6
   24c3c:	22bc      	movs	r2, #188	; 0xbc
   24c3e:	f003 fda1 	bl	28784 <assert_print>
   24c42:	21bc      	movs	r1, #188	; 0xbc
   24c44:	4628      	mov	r0, r5
   24c46:	f003 fd96 	bl	28776 <assert_post_action>
   24c4a:	4648      	mov	r0, r9
   24c4c:	f7fd fa4a 	bl	220e4 <z_spin_unlock_valid>
   24c50:	b940      	cbnz	r0, 24c64 <clear_event_registrations+0xdc>
   24c52:	4917      	ldr	r1, [pc, #92]	; (24cb0 <clear_event_registrations+0x128>)
   24c54:	4630      	mov	r0, r6
   24c56:	22b9      	movs	r2, #185	; 0xb9
   24c58:	f003 fd94 	bl	28784 <assert_print>
   24c5c:	4814      	ldr	r0, [pc, #80]	; (24cb0 <clear_event_registrations+0x128>)
   24c5e:	21b9      	movs	r1, #185	; 0xb9
   24c60:	f003 fd89 	bl	28776 <assert_post_action>
   24c64:	f388 8811 	msr	BASEPRI, r8
   24c68:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   24c6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c70:	f3ef 8811 	mrs	r8, BASEPRI
   24c74:	f383 8812 	msr	BASEPRI_MAX, r3
   24c78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c7c:	4648      	mov	r0, r9
   24c7e:	f7fd fa23 	bl	220c8 <z_spin_lock_valid>
   24c82:	b940      	cbnz	r0, 24c96 <clear_event_registrations+0x10e>
   24c84:	490a      	ldr	r1, [pc, #40]	; (24cb0 <clear_event_registrations+0x128>)
   24c86:	4630      	mov	r0, r6
   24c88:	228e      	movs	r2, #142	; 0x8e
   24c8a:	f003 fd7b 	bl	28784 <assert_print>
   24c8e:	4808      	ldr	r0, [pc, #32]	; (24cb0 <clear_event_registrations+0x128>)
   24c90:	218e      	movs	r1, #142	; 0x8e
   24c92:	f003 fd70 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   24c96:	4648      	mov	r0, r9
   24c98:	f7fd fa34 	bl	22104 <z_spin_lock_set_owner>
	return k;
   24c9c:	3f01      	subs	r7, #1
   24c9e:	4654      	mov	r4, sl
   24ca0:	e77d      	b.n	24b9e <clear_event_registrations+0x16>
   24ca2:	bf00      	nop
   24ca4:	00030637 	.word	0x00030637
   24ca8:	0002d509 	.word	0x0002d509
   24cac:	20002bf8 	.word	0x20002bf8
   24cb0:	0002d57d 	.word	0x0002d57d

00024cb4 <k_poll_event_init>:
{
   24cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24cb6:	4605      	mov	r5, r0
   24cb8:	460f      	mov	r7, r1
   24cba:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   24cbc:	4614      	mov	r4, r2
   24cbe:	b142      	cbz	r2, 24cd2 <k_poll_event_init+0x1e>
   24cc0:	4915      	ldr	r1, [pc, #84]	; (24d18 <k_poll_event_init+0x64>)
   24cc2:	4816      	ldr	r0, [pc, #88]	; (24d1c <k_poll_event_init+0x68>)
   24cc4:	222d      	movs	r2, #45	; 0x2d
   24cc6:	f003 fd5d 	bl	28784 <assert_print>
   24cca:	4813      	ldr	r0, [pc, #76]	; (24d18 <k_poll_event_init+0x64>)
   24ccc:	212d      	movs	r1, #45	; 0x2d
   24cce:	f003 fd52 	bl	28776 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   24cd2:	2f1f      	cmp	r7, #31
   24cd4:	d908      	bls.n	24ce8 <k_poll_event_init+0x34>
   24cd6:	4910      	ldr	r1, [pc, #64]	; (24d18 <k_poll_event_init+0x64>)
   24cd8:	4810      	ldr	r0, [pc, #64]	; (24d1c <k_poll_event_init+0x68>)
   24cda:	222f      	movs	r2, #47	; 0x2f
   24cdc:	f003 fd52 	bl	28784 <assert_print>
   24ce0:	480d      	ldr	r0, [pc, #52]	; (24d18 <k_poll_event_init+0x64>)
   24ce2:	212f      	movs	r1, #47	; 0x2f
   24ce4:	f003 fd47 	bl	28776 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   24ce8:	b946      	cbnz	r6, 24cfc <k_poll_event_init+0x48>
   24cea:	490b      	ldr	r1, [pc, #44]	; (24d18 <k_poll_event_init+0x64>)
   24cec:	480b      	ldr	r0, [pc, #44]	; (24d1c <k_poll_event_init+0x68>)
   24cee:	2230      	movs	r2, #48	; 0x30
   24cf0:	f003 fd48 	bl	28784 <assert_print>
   24cf4:	4808      	ldr	r0, [pc, #32]	; (24d18 <k_poll_event_init+0x64>)
   24cf6:	2130      	movs	r1, #48	; 0x30
   24cf8:	f003 fd3d 	bl	28776 <assert_post_action>
	event->poller = NULL;
   24cfc:	2300      	movs	r3, #0
	event->type = type;
   24cfe:	04e4      	lsls	r4, r4, #19
   24d00:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   24d02:	60ab      	str	r3, [r5, #8]
	event->type = type;
   24d04:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   24d08:	7b2b      	ldrb	r3, [r5, #12]
   24d0a:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   24d0e:	433c      	orrs	r4, r7
   24d10:	431c      	orrs	r4, r3
	event->obj = obj;
   24d12:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   24d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24d18:	00030637 	.word	0x00030637
   24d1c:	0002d509 	.word	0x0002d509

00024d20 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   24d20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24d24:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   24d26:	4b63      	ldr	r3, [pc, #396]	; (24eb4 <z_impl_k_poll+0x194>)
   24d28:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   24d2a:	2301      	movs	r3, #1
{
   24d2c:	4604      	mov	r4, r0
   24d2e:	4688      	mov	r8, r1
   24d30:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   24d32:	f107 0960 	add.w	r9, r7, #96	; 0x60
	poller->is_polling = true;
   24d36:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   24d3a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
   24d3e:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   24d42:	b153      	cbz	r3, 24d5a <z_impl_k_poll+0x3a>
   24d44:	495c      	ldr	r1, [pc, #368]	; (24eb8 <z_impl_k_poll+0x198>)
   24d46:	485d      	ldr	r0, [pc, #372]	; (24ebc <z_impl_k_poll+0x19c>)
   24d48:	f44f 728d 	mov.w	r2, #282	; 0x11a
   24d4c:	f003 fd1a 	bl	28784 <assert_print>
   24d50:	4859      	ldr	r0, [pc, #356]	; (24eb8 <z_impl_k_poll+0x198>)
   24d52:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24d56:	f003 fd0e 	bl	28776 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   24d5a:	b954      	cbnz	r4, 24d72 <z_impl_k_poll+0x52>
   24d5c:	4956      	ldr	r1, [pc, #344]	; (24eb8 <z_impl_k_poll+0x198>)
   24d5e:	4857      	ldr	r0, [pc, #348]	; (24ebc <z_impl_k_poll+0x19c>)
   24d60:	f240 121b 	movw	r2, #283	; 0x11b
   24d64:	f003 fd0e 	bl	28784 <assert_print>
   24d68:	4853      	ldr	r0, [pc, #332]	; (24eb8 <z_impl_k_poll+0x198>)
   24d6a:	f240 111b 	movw	r1, #283	; 0x11b
   24d6e:	f003 fd02 	bl	28776 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   24d72:	f1b8 0f00 	cmp.w	r8, #0
   24d76:	da0a      	bge.n	24d8e <z_impl_k_poll+0x6e>
   24d78:	494f      	ldr	r1, [pc, #316]	; (24eb8 <z_impl_k_poll+0x198>)
   24d7a:	4850      	ldr	r0, [pc, #320]	; (24ebc <z_impl_k_poll+0x19c>)
   24d7c:	f44f 728e 	mov.w	r2, #284	; 0x11c
   24d80:	f003 fd00 	bl	28784 <assert_print>
   24d84:	484c      	ldr	r0, [pc, #304]	; (24eb8 <z_impl_k_poll+0x198>)
   24d86:	f44f 718e 	mov.w	r1, #284	; 0x11c
   24d8a:	f003 fcf4 	bl	28776 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   24d8e:	ea56 0305 	orrs.w	r3, r6, r5
   24d92:	bf0c      	ite	eq
   24d94:	2301      	moveq	r3, #1
   24d96:	2300      	movne	r3, #0
   24d98:	4641      	mov	r1, r8
   24d9a:	464a      	mov	r2, r9
   24d9c:	4620      	mov	r0, r4
   24d9e:	f7ff fe03 	bl	249a8 <register_events>
   24da2:	4680      	mov	r8, r0
   24da4:	f04f 0340 	mov.w	r3, #64	; 0x40
   24da8:	f3ef 8911 	mrs	r9, BASEPRI
   24dac:	f383 8812 	msr	BASEPRI_MAX, r3
   24db0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24db4:	4842      	ldr	r0, [pc, #264]	; (24ec0 <z_impl_k_poll+0x1a0>)
   24db6:	f7fd f987 	bl	220c8 <z_spin_lock_valid>
   24dba:	b940      	cbnz	r0, 24dce <z_impl_k_poll+0xae>
   24dbc:	4941      	ldr	r1, [pc, #260]	; (24ec4 <z_impl_k_poll+0x1a4>)
   24dbe:	483f      	ldr	r0, [pc, #252]	; (24ebc <z_impl_k_poll+0x19c>)
   24dc0:	228e      	movs	r2, #142	; 0x8e
   24dc2:	f003 fcdf 	bl	28784 <assert_print>
   24dc6:	483f      	ldr	r0, [pc, #252]	; (24ec4 <z_impl_k_poll+0x1a4>)
   24dc8:	218e      	movs	r1, #142	; 0x8e
   24dca:	f003 fcd4 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   24dce:	483c      	ldr	r0, [pc, #240]	; (24ec0 <z_impl_k_poll+0x1a0>)
   24dd0:	f7fd f998 	bl	22104 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   24dd4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   24dd8:	b9d3      	cbnz	r3, 24e10 <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   24dda:	4620      	mov	r0, r4
   24ddc:	464a      	mov	r2, r9
   24dde:	4641      	mov	r1, r8
   24de0:	f7ff fed2 	bl	24b88 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24de4:	4836      	ldr	r0, [pc, #216]	; (24ec0 <z_impl_k_poll+0x1a0>)
   24de6:	f7fd f97d 	bl	220e4 <z_spin_unlock_valid>
   24dea:	b940      	cbnz	r0, 24dfe <z_impl_k_poll+0xde>
   24dec:	4935      	ldr	r1, [pc, #212]	; (24ec4 <z_impl_k_poll+0x1a4>)
   24dee:	4833      	ldr	r0, [pc, #204]	; (24ebc <z_impl_k_poll+0x19c>)
   24df0:	22b9      	movs	r2, #185	; 0xb9
   24df2:	f003 fcc7 	bl	28784 <assert_print>
   24df6:	4833      	ldr	r0, [pc, #204]	; (24ec4 <z_impl_k_poll+0x1a4>)
   24df8:	21b9      	movs	r1, #185	; 0xb9
   24dfa:	f003 fcbc 	bl	28776 <assert_post_action>
	__asm__ volatile(
   24dfe:	f389 8811 	msr	BASEPRI, r9
   24e02:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
   24e06:	2500      	movs	r5, #0
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   24e08:	4628      	mov	r0, r5
   24e0a:	b003      	add	sp, #12
   24e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   24e10:	2300      	movs	r3, #0
   24e12:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24e16:	ea56 0305 	orrs.w	r3, r6, r5
   24e1a:	d113      	bne.n	24e44 <z_impl_k_poll+0x124>
   24e1c:	4828      	ldr	r0, [pc, #160]	; (24ec0 <z_impl_k_poll+0x1a0>)
   24e1e:	f7fd f961 	bl	220e4 <z_spin_unlock_valid>
   24e22:	b940      	cbnz	r0, 24e36 <z_impl_k_poll+0x116>
   24e24:	4927      	ldr	r1, [pc, #156]	; (24ec4 <z_impl_k_poll+0x1a4>)
   24e26:	4825      	ldr	r0, [pc, #148]	; (24ebc <z_impl_k_poll+0x19c>)
   24e28:	22b9      	movs	r2, #185	; 0xb9
   24e2a:	f003 fcab 	bl	28784 <assert_print>
   24e2e:	4825      	ldr	r0, [pc, #148]	; (24ec4 <z_impl_k_poll+0x1a4>)
   24e30:	21b9      	movs	r1, #185	; 0xb9
   24e32:	f003 fca0 	bl	28776 <assert_post_action>
   24e36:	f389 8811 	msr	BASEPRI, r9
   24e3a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   24e3e:	f06f 050a 	mvn.w	r5, #10
   24e42:	e7e1      	b.n	24e08 <z_impl_k_poll+0xe8>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   24e44:	e9cd 6500 	strd	r6, r5, [sp]
   24e48:	4a1f      	ldr	r2, [pc, #124]	; (24ec8 <z_impl_k_poll+0x1a8>)
   24e4a:	481d      	ldr	r0, [pc, #116]	; (24ec0 <z_impl_k_poll+0x1a0>)
   24e4c:	4649      	mov	r1, r9
   24e4e:	f7fe fdc9 	bl	239e4 <z_pend_curr>
   24e52:	4605      	mov	r5, r0
	__asm__ volatile(
   24e54:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e58:	f3ef 8611 	mrs	r6, BASEPRI
   24e5c:	f383 8812 	msr	BASEPRI_MAX, r3
   24e60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24e64:	4816      	ldr	r0, [pc, #88]	; (24ec0 <z_impl_k_poll+0x1a0>)
   24e66:	f7fd f92f 	bl	220c8 <z_spin_lock_valid>
   24e6a:	b940      	cbnz	r0, 24e7e <z_impl_k_poll+0x15e>
   24e6c:	4915      	ldr	r1, [pc, #84]	; (24ec4 <z_impl_k_poll+0x1a4>)
   24e6e:	4813      	ldr	r0, [pc, #76]	; (24ebc <z_impl_k_poll+0x19c>)
   24e70:	228e      	movs	r2, #142	; 0x8e
   24e72:	f003 fc87 	bl	28784 <assert_print>
   24e76:	4813      	ldr	r0, [pc, #76]	; (24ec4 <z_impl_k_poll+0x1a4>)
   24e78:	218e      	movs	r1, #142	; 0x8e
   24e7a:	f003 fc7c 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   24e7e:	4810      	ldr	r0, [pc, #64]	; (24ec0 <z_impl_k_poll+0x1a0>)
   24e80:	f7fd f940 	bl	22104 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   24e84:	4620      	mov	r0, r4
   24e86:	4632      	mov	r2, r6
   24e88:	4641      	mov	r1, r8
   24e8a:	f7ff fe7d 	bl	24b88 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e8e:	480c      	ldr	r0, [pc, #48]	; (24ec0 <z_impl_k_poll+0x1a0>)
   24e90:	f7fd f928 	bl	220e4 <z_spin_unlock_valid>
   24e94:	b940      	cbnz	r0, 24ea8 <z_impl_k_poll+0x188>
   24e96:	490b      	ldr	r1, [pc, #44]	; (24ec4 <z_impl_k_poll+0x1a4>)
   24e98:	4808      	ldr	r0, [pc, #32]	; (24ebc <z_impl_k_poll+0x19c>)
   24e9a:	22b9      	movs	r2, #185	; 0xb9
   24e9c:	f003 fc72 	bl	28784 <assert_print>
   24ea0:	4808      	ldr	r0, [pc, #32]	; (24ec4 <z_impl_k_poll+0x1a4>)
   24ea2:	21b9      	movs	r1, #185	; 0xb9
   24ea4:	f003 fc67 	bl	28776 <assert_post_action>
	__asm__ volatile(
   24ea8:	f386 8811 	msr	BASEPRI, r6
   24eac:	f3bf 8f6f 	isb	sy
	return swap_rc;
   24eb0:	e7aa      	b.n	24e08 <z_impl_k_poll+0xe8>
   24eb2:	bf00      	nop
   24eb4:	20002ba0 	.word	0x20002ba0
   24eb8:	00030637 	.word	0x00030637
   24ebc:	0002d509 	.word	0x0002d509
   24ec0:	20002bf8 	.word	0x20002bf8
   24ec4:	0002d57d 	.word	0x0002d57d
   24ec8:	20000800 	.word	0x20000800

00024ecc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   24ecc:	b570      	push	{r4, r5, r6, lr}
   24ece:	4604      	mov	r4, r0
   24ed0:	460d      	mov	r5, r1
	__asm__ volatile(
   24ed2:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ed6:	f3ef 8611 	mrs	r6, BASEPRI
   24eda:	f383 8812 	msr	BASEPRI_MAX, r3
   24ede:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ee2:	481c      	ldr	r0, [pc, #112]	; (24f54 <z_impl_k_poll_signal_raise+0x88>)
   24ee4:	f7fd f8f0 	bl	220c8 <z_spin_lock_valid>
   24ee8:	b940      	cbnz	r0, 24efc <z_impl_k_poll_signal_raise+0x30>
   24eea:	491b      	ldr	r1, [pc, #108]	; (24f58 <z_impl_k_poll_signal_raise+0x8c>)
   24eec:	481b      	ldr	r0, [pc, #108]	; (24f5c <z_impl_k_poll_signal_raise+0x90>)
   24eee:	228e      	movs	r2, #142	; 0x8e
   24ef0:	f003 fc48 	bl	28784 <assert_print>
   24ef4:	4818      	ldr	r0, [pc, #96]	; (24f58 <z_impl_k_poll_signal_raise+0x8c>)
   24ef6:	218e      	movs	r1, #142	; 0x8e
   24ef8:	f003 fc3d 	bl	28776 <assert_post_action>
	z_spin_lock_set_owner(l);
   24efc:	4815      	ldr	r0, [pc, #84]	; (24f54 <z_impl_k_poll_signal_raise+0x88>)
   24efe:	f7fd f901 	bl	22104 <z_spin_lock_set_owner>
	return list->head == list;
   24f02:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   24f04:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   24f06:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24f08:	4284      	cmp	r4, r0
   24f0a:	60a1      	str	r1, [r4, #8]
   24f0c:	d112      	bne.n	24f34 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f0e:	4811      	ldr	r0, [pc, #68]	; (24f54 <z_impl_k_poll_signal_raise+0x88>)
   24f10:	f7fd f8e8 	bl	220e4 <z_spin_unlock_valid>
   24f14:	b940      	cbnz	r0, 24f28 <z_impl_k_poll_signal_raise+0x5c>
   24f16:	4910      	ldr	r1, [pc, #64]	; (24f58 <z_impl_k_poll_signal_raise+0x8c>)
   24f18:	4810      	ldr	r0, [pc, #64]	; (24f5c <z_impl_k_poll_signal_raise+0x90>)
   24f1a:	22b9      	movs	r2, #185	; 0xb9
   24f1c:	f003 fc32 	bl	28784 <assert_print>
   24f20:	480d      	ldr	r0, [pc, #52]	; (24f58 <z_impl_k_poll_signal_raise+0x8c>)
   24f22:	21b9      	movs	r1, #185	; 0xb9
   24f24:	f003 fc27 	bl	28776 <assert_post_action>
	__asm__ volatile(
   24f28:	f386 8811 	msr	BASEPRI, r6
   24f2c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   24f30:	2400      	movs	r4, #0
   24f32:	e00d      	b.n	24f50 <z_impl_k_poll_signal_raise+0x84>
	sys_dnode_t *const next = node->next;
   24f34:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24f38:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24f3a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24f3c:	2300      	movs	r3, #0
	node->prev = NULL;
   24f3e:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24f42:	f007 f87c 	bl	2c03e <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   24f46:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24f48:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24f4a:	4802      	ldr	r0, [pc, #8]	; (24f54 <z_impl_k_poll_signal_raise+0x88>)
   24f4c:	f7fe f9b6 	bl	232bc <z_reschedule>
	return rc;
}
   24f50:	4620      	mov	r0, r4
   24f52:	bd70      	pop	{r4, r5, r6, pc}
   24f54:	20002bf8 	.word	0x20002bf8
   24f58:	0002d57d 	.word	0x0002d57d
   24f5c:	0002d509 	.word	0x0002d509

00024f60 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24f62:	4605      	mov	r5, r0
   24f64:	460e      	mov	r6, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   24f66:	f006 feef 	bl	2bd48 <k_is_in_isr>
   24f6a:	b978      	cbnz	r0, 24f8c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24f6c:	4b11      	ldr	r3, [pc, #68]	; (24fb4 <z_thread_aligned_alloc+0x54>)
   24f6e:	689b      	ldr	r3, [r3, #8]
   24f70:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   24f72:	b1e4      	cbz	r4, 24fae <z_thread_aligned_alloc+0x4e>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24f74:	1d32      	adds	r2, r6, #4
   24f76:	d209      	bcs.n	24f8c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   24f78:	2000      	movs	r0, #0
   24f7a:	2100      	movs	r1, #0
   24f7c:	e9cd 0100 	strd	r0, r1, [sp]
   24f80:	f045 0104 	orr.w	r1, r5, #4
   24f84:	4620      	mov	r0, r4
   24f86:	f7fc fddb 	bl	21b40 <k_heap_aligned_alloc>
	if (mem == NULL) {
   24f8a:	b908      	cbnz	r0, 24f90 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   24f8c:	2400      	movs	r4, #0
	}

	return ret;
   24f8e:	e00e      	b.n	24fae <z_thread_aligned_alloc+0x4e>
	*heap_ref = heap;
   24f90:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   24f92:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   24f94:	b15d      	cbz	r5, 24fae <z_thread_aligned_alloc+0x4e>
   24f96:	3d01      	subs	r5, #1
   24f98:	422c      	tst	r4, r5
   24f9a:	d008      	beq.n	24fae <z_thread_aligned_alloc+0x4e>
   24f9c:	4906      	ldr	r1, [pc, #24]	; (24fb8 <z_thread_aligned_alloc+0x58>)
   24f9e:	4807      	ldr	r0, [pc, #28]	; (24fbc <z_thread_aligned_alloc+0x5c>)
   24fa0:	2225      	movs	r2, #37	; 0x25
   24fa2:	f003 fbef 	bl	28784 <assert_print>
   24fa6:	4804      	ldr	r0, [pc, #16]	; (24fb8 <z_thread_aligned_alloc+0x58>)
   24fa8:	2125      	movs	r1, #37	; 0x25
   24faa:	f003 fbe4 	bl	28776 <assert_post_action>
}
   24fae:	4620      	mov	r0, r4
   24fb0:	b002      	add	sp, #8
   24fb2:	bd70      	pop	{r4, r5, r6, pc}
   24fb4:	20002ba0 	.word	0x20002ba0
   24fb8:	00030658 	.word	0x00030658
   24fbc:	0002d509 	.word	0x0002d509

00024fc0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   24fc0:	4a02      	ldr	r2, [pc, #8]	; (24fcc <boot_banner+0xc>)
   24fc2:	4903      	ldr	r1, [pc, #12]	; (24fd0 <boot_banner+0x10>)
   24fc4:	4803      	ldr	r0, [pc, #12]	; (24fd4 <boot_banner+0x14>)
   24fc6:	f003 ba32 	b.w	2842e <printk>
   24fca:	bf00      	nop
   24fcc:	0003043d 	.word	0x0003043d
   24fd0:	0003067c 	.word	0x0003067c
   24fd4:	00030689 	.word	0x00030689

00024fd8 <ocrypto_ecdh_p256_public_key>:
   24fd8:	b530      	push	{r4, r5, lr}
   24fda:	b099      	sub	sp, #100	; 0x64
   24fdc:	4605      	mov	r5, r0
   24fde:	4668      	mov	r0, sp
   24fe0:	f000 f828 	bl	25034 <ocrypto_sc_p256_from32bytes>
   24fe4:	4669      	mov	r1, sp
   24fe6:	4604      	mov	r4, r0
   24fe8:	a808      	add	r0, sp, #32
   24fea:	f000 fa53 	bl	25494 <ocrypto_curve_p256_scalarmult_base>
   24fee:	a908      	add	r1, sp, #32
   24ff0:	4304      	orrs	r4, r0
   24ff2:	4628      	mov	r0, r5
   24ff4:	f000 f98a 	bl	2530c <ocrypto_curve_p256_to64bytes>
   24ff8:	4620      	mov	r0, r4
   24ffa:	b019      	add	sp, #100	; 0x64
   24ffc:	bd30      	pop	{r4, r5, pc}
   24ffe:	bf00      	nop

00025000 <ocrypto_ecdh_p256_common_secret>:
   25000:	b570      	push	{r4, r5, r6, lr}
   25002:	b098      	sub	sp, #96	; 0x60
   25004:	4605      	mov	r5, r0
   25006:	4668      	mov	r0, sp
   25008:	4616      	mov	r6, r2
   2500a:	f000 f813 	bl	25034 <ocrypto_sc_p256_from32bytes>
   2500e:	4631      	mov	r1, r6
   25010:	4604      	mov	r4, r0
   25012:	a808      	add	r0, sp, #32
   25014:	f000 f946 	bl	252a4 <ocrypto_curve_p256_from64bytes>
   25018:	a908      	add	r1, sp, #32
   2501a:	466a      	mov	r2, sp
   2501c:	4304      	orrs	r4, r0
   2501e:	4608      	mov	r0, r1
   25020:	f000 f982 	bl	25328 <ocrypto_curve_p256_scalarmult>
   25024:	a908      	add	r1, sp, #32
   25026:	4304      	orrs	r4, r0
   25028:	4628      	mov	r0, r5
   2502a:	f000 f96d 	bl	25308 <ocrypto_curve_p256_to32bytes>
   2502e:	4620      	mov	r0, r4
   25030:	b018      	add	sp, #96	; 0x60
   25032:	bd70      	pop	{r4, r5, r6, pc}

00025034 <ocrypto_sc_p256_from32bytes>:
   25034:	b570      	push	{r4, r5, r6, lr}
   25036:	680b      	ldr	r3, [r1, #0]
   25038:	4e12      	ldr	r6, [pc, #72]	; (25084 <ocrypto_sc_p256_from32bytes+0x50>)
   2503a:	ba1b      	rev	r3, r3
   2503c:	61c3      	str	r3, [r0, #28]
   2503e:	684b      	ldr	r3, [r1, #4]
   25040:	ba1b      	rev	r3, r3
   25042:	6183      	str	r3, [r0, #24]
   25044:	688b      	ldr	r3, [r1, #8]
   25046:	ba1b      	rev	r3, r3
   25048:	6143      	str	r3, [r0, #20]
   2504a:	68cb      	ldr	r3, [r1, #12]
   2504c:	ba1b      	rev	r3, r3
   2504e:	6103      	str	r3, [r0, #16]
   25050:	690b      	ldr	r3, [r1, #16]
   25052:	ba1b      	rev	r3, r3
   25054:	60c3      	str	r3, [r0, #12]
   25056:	694b      	ldr	r3, [r1, #20]
   25058:	ba1b      	rev	r3, r3
   2505a:	6083      	str	r3, [r0, #8]
   2505c:	698b      	ldr	r3, [r1, #24]
   2505e:	ba1b      	rev	r3, r3
   25060:	6043      	str	r3, [r0, #4]
   25062:	69cb      	ldr	r3, [r1, #28]
   25064:	ba1b      	rev	r3, r3
   25066:	4632      	mov	r2, r6
   25068:	6003      	str	r3, [r0, #0]
   2506a:	4601      	mov	r1, r0
   2506c:	4604      	mov	r4, r0
   2506e:	f7dc f841 	bl	10f4 <ocrypto_bigint_sub256>
   25072:	4631      	mov	r1, r6
   25074:	4605      	mov	r5, r0
   25076:	4602      	mov	r2, r0
   25078:	4620      	mov	r0, r4
   2507a:	f7dc f85b 	bl	1134 <ocrypto_bigint_cadd256>
   2507e:	1e68      	subs	r0, r5, #1
   25080:	bd70      	pop	{r4, r5, r6, pc}
   25082:	bf00      	nop
   25084:	0002cf54 	.word	0x0002cf54

00025088 <p256_zdblu>:
   25088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2508c:	b088      	sub	sp, #32
   2508e:	460c      	mov	r4, r1
   25090:	4606      	mov	r6, r0
   25092:	f102 0120 	add.w	r1, r2, #32
   25096:	4668      	mov	r0, sp
   25098:	f106 0720 	add.w	r7, r6, #32
   2509c:	4690      	mov	r8, r2
   2509e:	f7dc fb33 	bl	1708 <ocrypto_mod_p256_sqr>
   250a2:	466a      	mov	r2, sp
   250a4:	4669      	mov	r1, sp
   250a6:	4668      	mov	r0, sp
   250a8:	f7dc fa40 	bl	152c <ocrypto_mod_p256_add>
   250ac:	4669      	mov	r1, sp
   250ae:	4638      	mov	r0, r7
   250b0:	f7dc fb2a 	bl	1708 <ocrypto_mod_p256_sqr>
   250b4:	463a      	mov	r2, r7
   250b6:	4639      	mov	r1, r7
   250b8:	4638      	mov	r0, r7
   250ba:	f104 0520 	add.w	r5, r4, #32
   250be:	f7dc fa35 	bl	152c <ocrypto_mod_p256_add>
   250c2:	466a      	mov	r2, sp
   250c4:	4669      	mov	r1, sp
   250c6:	4668      	mov	r0, sp
   250c8:	f7dc fa30 	bl	152c <ocrypto_mod_p256_add>
   250cc:	4641      	mov	r1, r8
   250ce:	4628      	mov	r0, r5
   250d0:	f7dc fb1a 	bl	1708 <ocrypto_mod_p256_sqr>
   250d4:	466a      	mov	r2, sp
   250d6:	4641      	mov	r1, r8
   250d8:	4630      	mov	r0, r6
   250da:	f7dc fafd 	bl	16d8 <ocrypto_mod_p256_mul>
   250de:	462a      	mov	r2, r5
   250e0:	4629      	mov	r1, r5
   250e2:	4668      	mov	r0, sp
   250e4:	f7dc fa22 	bl	152c <ocrypto_mod_p256_add>
   250e8:	462a      	mov	r2, r5
   250ea:	4669      	mov	r1, sp
   250ec:	4668      	mov	r0, sp
   250ee:	f7dc fa1d 	bl	152c <ocrypto_mod_p256_add>
   250f2:	4a12      	ldr	r2, [pc, #72]	; (2513c <p256_zdblu+0xb4>)
   250f4:	4669      	mov	r1, sp
   250f6:	4668      	mov	r0, sp
   250f8:	f7dc fa18 	bl	152c <ocrypto_mod_p256_add>
   250fc:	4669      	mov	r1, sp
   250fe:	4620      	mov	r0, r4
   25100:	f7dc fb02 	bl	1708 <ocrypto_mod_p256_sqr>
   25104:	4632      	mov	r2, r6
   25106:	4621      	mov	r1, r4
   25108:	4620      	mov	r0, r4
   2510a:	f7dc fa4d 	bl	15a8 <ocrypto_mod_p256_sub>
   2510e:	4632      	mov	r2, r6
   25110:	4621      	mov	r1, r4
   25112:	4620      	mov	r0, r4
   25114:	f7dc fa48 	bl	15a8 <ocrypto_mod_p256_sub>
   25118:	4622      	mov	r2, r4
   2511a:	4631      	mov	r1, r6
   2511c:	4628      	mov	r0, r5
   2511e:	f7dc fa43 	bl	15a8 <ocrypto_mod_p256_sub>
   25122:	466a      	mov	r2, sp
   25124:	4629      	mov	r1, r5
   25126:	4628      	mov	r0, r5
   25128:	f7dc fad6 	bl	16d8 <ocrypto_mod_p256_mul>
   2512c:	463a      	mov	r2, r7
   2512e:	4629      	mov	r1, r5
   25130:	4628      	mov	r0, r5
   25132:	f7dc fa39 	bl	15a8 <ocrypto_mod_p256_sub>
   25136:	b008      	add	sp, #32
   25138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2513c:	0002cff4 	.word	0x0002cff4

00025140 <p256_zaddc>:
   25140:	b5f0      	push	{r4, r5, r6, r7, lr}
   25142:	b099      	sub	sp, #100	; 0x64
   25144:	4604      	mov	r4, r0
   25146:	460d      	mov	r5, r1
   25148:	460a      	mov	r2, r1
   2514a:	4601      	mov	r1, r0
   2514c:	4668      	mov	r0, sp
   2514e:	f7dc fa2b 	bl	15a8 <ocrypto_mod_p256_sub>
   25152:	4669      	mov	r1, sp
   25154:	4668      	mov	r0, sp
   25156:	f7dc fad7 	bl	1708 <ocrypto_mod_p256_sqr>
   2515a:	466a      	mov	r2, sp
   2515c:	4621      	mov	r1, r4
   2515e:	a808      	add	r0, sp, #32
   25160:	f105 0620 	add.w	r6, r5, #32
   25164:	f104 0720 	add.w	r7, r4, #32
   25168:	f7dc fab6 	bl	16d8 <ocrypto_mod_p256_mul>
   2516c:	466a      	mov	r2, sp
   2516e:	4629      	mov	r1, r5
   25170:	4668      	mov	r0, sp
   25172:	f7dc fab1 	bl	16d8 <ocrypto_mod_p256_mul>
   25176:	4632      	mov	r2, r6
   25178:	4639      	mov	r1, r7
   2517a:	a810      	add	r0, sp, #64	; 0x40
   2517c:	f7dc f9d6 	bl	152c <ocrypto_mod_p256_add>
   25180:	4632      	mov	r2, r6
   25182:	4639      	mov	r1, r7
   25184:	4630      	mov	r0, r6
   25186:	f7dc fa0f 	bl	15a8 <ocrypto_mod_p256_sub>
   2518a:	4631      	mov	r1, r6
   2518c:	4628      	mov	r0, r5
   2518e:	f7dc fabb 	bl	1708 <ocrypto_mod_p256_sqr>
   25192:	466a      	mov	r2, sp
   25194:	a908      	add	r1, sp, #32
   25196:	4620      	mov	r0, r4
   25198:	f7dc f9c8 	bl	152c <ocrypto_mod_p256_add>
   2519c:	4622      	mov	r2, r4
   2519e:	4629      	mov	r1, r5
   251a0:	4628      	mov	r0, r5
   251a2:	f7dc fa01 	bl	15a8 <ocrypto_mod_p256_sub>
   251a6:	466a      	mov	r2, sp
   251a8:	a908      	add	r1, sp, #32
   251aa:	4668      	mov	r0, sp
   251ac:	f7dc f9fc 	bl	15a8 <ocrypto_mod_p256_sub>
   251b0:	466a      	mov	r2, sp
   251b2:	4639      	mov	r1, r7
   251b4:	4638      	mov	r0, r7
   251b6:	f7dc fa8f 	bl	16d8 <ocrypto_mod_p256_mul>
   251ba:	462a      	mov	r2, r5
   251bc:	a908      	add	r1, sp, #32
   251be:	4668      	mov	r0, sp
   251c0:	f7dc f9f2 	bl	15a8 <ocrypto_mod_p256_sub>
   251c4:	466a      	mov	r2, sp
   251c6:	4631      	mov	r1, r6
   251c8:	4630      	mov	r0, r6
   251ca:	f7dc fa85 	bl	16d8 <ocrypto_mod_p256_mul>
   251ce:	463a      	mov	r2, r7
   251d0:	4631      	mov	r1, r6
   251d2:	4630      	mov	r0, r6
   251d4:	f7dc f9e8 	bl	15a8 <ocrypto_mod_p256_sub>
   251d8:	a910      	add	r1, sp, #64	; 0x40
   251da:	4668      	mov	r0, sp
   251dc:	f7dc fa94 	bl	1708 <ocrypto_mod_p256_sqr>
   251e0:	4622      	mov	r2, r4
   251e2:	4669      	mov	r1, sp
   251e4:	4620      	mov	r0, r4
   251e6:	f7dc f9df 	bl	15a8 <ocrypto_mod_p256_sub>
   251ea:	a908      	add	r1, sp, #32
   251ec:	4622      	mov	r2, r4
   251ee:	4608      	mov	r0, r1
   251f0:	f7dc f9da 	bl	15a8 <ocrypto_mod_p256_sub>
   251f4:	a910      	add	r1, sp, #64	; 0x40
   251f6:	aa08      	add	r2, sp, #32
   251f8:	4608      	mov	r0, r1
   251fa:	f7dc fa6d 	bl	16d8 <ocrypto_mod_p256_mul>
   251fe:	463a      	mov	r2, r7
   25200:	a910      	add	r1, sp, #64	; 0x40
   25202:	4638      	mov	r0, r7
   25204:	f7dc f9d0 	bl	15a8 <ocrypto_mod_p256_sub>
   25208:	b019      	add	sp, #100	; 0x64
   2520a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002520c <p256_zaddu>:
   2520c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25210:	b088      	sub	sp, #32
   25212:	460c      	mov	r4, r1
   25214:	4605      	mov	r5, r0
   25216:	4690      	mov	r8, r2
   25218:	460a      	mov	r2, r1
   2521a:	4601      	mov	r1, r0
   2521c:	4668      	mov	r0, sp
   2521e:	f7dc f9c3 	bl	15a8 <ocrypto_mod_p256_sub>
   25222:	4669      	mov	r1, sp
   25224:	4668      	mov	r0, sp
   25226:	f7dc fa6f 	bl	1708 <ocrypto_mod_p256_sqr>
   2522a:	466a      	mov	r2, sp
   2522c:	4629      	mov	r1, r5
   2522e:	4628      	mov	r0, r5
   25230:	f104 0620 	add.w	r6, r4, #32
   25234:	f7dc fa50 	bl	16d8 <ocrypto_mod_p256_mul>
   25238:	f105 0720 	add.w	r7, r5, #32
   2523c:	466a      	mov	r2, sp
   2523e:	4621      	mov	r1, r4
   25240:	4668      	mov	r0, sp
   25242:	f7dc fa49 	bl	16d8 <ocrypto_mod_p256_mul>
   25246:	4632      	mov	r2, r6
   25248:	4639      	mov	r1, r7
   2524a:	4630      	mov	r0, r6
   2524c:	f7dc f9ac 	bl	15a8 <ocrypto_mod_p256_sub>
   25250:	4631      	mov	r1, r6
   25252:	4620      	mov	r0, r4
   25254:	f7dc fa58 	bl	1708 <ocrypto_mod_p256_sqr>
   25258:	462a      	mov	r2, r5
   2525a:	4621      	mov	r1, r4
   2525c:	4620      	mov	r0, r4
   2525e:	f7dc f9a3 	bl	15a8 <ocrypto_mod_p256_sub>
   25262:	466a      	mov	r2, sp
   25264:	4621      	mov	r1, r4
   25266:	4620      	mov	r0, r4
   25268:	f7dc f99e 	bl	15a8 <ocrypto_mod_p256_sub>
   2526c:	466a      	mov	r2, sp
   2526e:	4629      	mov	r1, r5
   25270:	4640      	mov	r0, r8
   25272:	f7dc f999 	bl	15a8 <ocrypto_mod_p256_sub>
   25276:	4642      	mov	r2, r8
   25278:	4639      	mov	r1, r7
   2527a:	4638      	mov	r0, r7
   2527c:	f7dc fa2c 	bl	16d8 <ocrypto_mod_p256_mul>
   25280:	4622      	mov	r2, r4
   25282:	4629      	mov	r1, r5
   25284:	4668      	mov	r0, sp
   25286:	f7dc f98f 	bl	15a8 <ocrypto_mod_p256_sub>
   2528a:	466a      	mov	r2, sp
   2528c:	4631      	mov	r1, r6
   2528e:	4630      	mov	r0, r6
   25290:	f7dc fa22 	bl	16d8 <ocrypto_mod_p256_mul>
   25294:	463a      	mov	r2, r7
   25296:	4631      	mov	r1, r6
   25298:	4630      	mov	r0, r6
   2529a:	f7dc f985 	bl	15a8 <ocrypto_mod_p256_sub>
   2529e:	b008      	add	sp, #32
   252a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000252a4 <ocrypto_curve_p256_from64bytes>:
   252a4:	b570      	push	{r4, r5, r6, lr}
   252a6:	f100 0620 	add.w	r6, r0, #32
   252aa:	b090      	sub	sp, #64	; 0x40
   252ac:	460d      	mov	r5, r1
   252ae:	4604      	mov	r4, r0
   252b0:	f000 f914 	bl	254dc <ocrypto_mod_p256_from_bytes>
   252b4:	f105 0120 	add.w	r1, r5, #32
   252b8:	4630      	mov	r0, r6
   252ba:	f000 f90f 	bl	254dc <ocrypto_mod_p256_from_bytes>
   252be:	4621      	mov	r1, r4
   252c0:	a808      	add	r0, sp, #32
   252c2:	f7dc fa21 	bl	1708 <ocrypto_mod_p256_sqr>
   252c6:	a908      	add	r1, sp, #32
   252c8:	4608      	mov	r0, r1
   252ca:	4a0d      	ldr	r2, [pc, #52]	; (25300 <ocrypto_curve_p256_from64bytes+0x5c>)
   252cc:	f7dc f92e 	bl	152c <ocrypto_mod_p256_add>
   252d0:	a908      	add	r1, sp, #32
   252d2:	4622      	mov	r2, r4
   252d4:	4608      	mov	r0, r1
   252d6:	f7dc f9ff 	bl	16d8 <ocrypto_mod_p256_mul>
   252da:	a908      	add	r1, sp, #32
   252dc:	4a09      	ldr	r2, [pc, #36]	; (25304 <ocrypto_curve_p256_from64bytes+0x60>)
   252de:	4608      	mov	r0, r1
   252e0:	f7dc f924 	bl	152c <ocrypto_mod_p256_add>
   252e4:	4631      	mov	r1, r6
   252e6:	4668      	mov	r0, sp
   252e8:	f7dc fa0e 	bl	1708 <ocrypto_mod_p256_sqr>
   252ec:	2220      	movs	r2, #32
   252ee:	4669      	mov	r1, sp
   252f0:	eb0d 0002 	add.w	r0, sp, r2
   252f4:	f7dc f8ec 	bl	14d0 <ocrypto_constant_time_equal>
   252f8:	3801      	subs	r0, #1
   252fa:	b010      	add	sp, #64	; 0x40
   252fc:	bd70      	pop	{r4, r5, r6, pc}
   252fe:	bf00      	nop
   25300:	0002cff4 	.word	0x0002cff4
   25304:	0002d014 	.word	0x0002d014

00025308 <ocrypto_curve_p256_to32bytes>:
   25308:	f000 b902 	b.w	25510 <ocrypto_mod_p256_to_bytes>

0002530c <ocrypto_curve_p256_to64bytes>:
   2530c:	b538      	push	{r3, r4, r5, lr}
   2530e:	4604      	mov	r4, r0
   25310:	460d      	mov	r5, r1
   25312:	f000 f8fd 	bl	25510 <ocrypto_mod_p256_to_bytes>
   25316:	f105 0120 	add.w	r1, r5, #32
   2531a:	f104 0020 	add.w	r0, r4, #32
   2531e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25322:	f000 b8f5 	b.w	25510 <ocrypto_mod_p256_to_bytes>
   25326:	bf00      	nop

00025328 <ocrypto_curve_p256_scalarmult>:
   25328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2532c:	4613      	mov	r3, r2
   2532e:	b0b8      	sub	sp, #224	; 0xe0
   25330:	4a54      	ldr	r2, [pc, #336]	; (25484 <ocrypto_curve_p256_scalarmult+0x15c>)
   25332:	4689      	mov	r9, r1
   25334:	4680      	mov	r8, r0
   25336:	4619      	mov	r1, r3
   25338:	a810      	add	r0, sp, #64	; 0x40
   2533a:	f7db fedb 	bl	10f4 <ocrypto_bigint_sub256>
   2533e:	4952      	ldr	r1, [pc, #328]	; (25488 <ocrypto_curve_p256_scalarmult+0x160>)
   25340:	4602      	mov	r2, r0
   25342:	a810      	add	r0, sp, #64	; 0x40
   25344:	f7db fef6 	bl	1134 <ocrypto_bigint_cadd256>
   25348:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   2534a:	494e      	ldr	r1, [pc, #312]	; (25484 <ocrypto_curve_p256_scalarmult+0x15c>)
   2534c:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   25350:	4607      	mov	r7, r0
   25352:	f1c6 0201 	rsb	r2, r6, #1
   25356:	a810      	add	r0, sp, #64	; 0x40
   25358:	f7db feec 	bl	1134 <ocrypto_bigint_cadd256>
   2535c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2535e:	464a      	mov	r2, r9
   25360:	ea6f 0a03 	mvn.w	sl, r3
   25364:	a928      	add	r1, sp, #160	; 0xa0
   25366:	a818      	add	r0, sp, #96	; 0x60
   25368:	f7ff fe8e 	bl	25088 <p256_zdblu>
   2536c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   25370:	a920      	add	r1, sp, #128	; 0x80
   25372:	f1ca 0201 	rsb	r2, sl, #1
   25376:	4608      	mov	r0, r1
   25378:	f000 f892 	bl	254a0 <ocrypto_mod_p256_cneg>
   2537c:	f1c7 0701 	rsb	r7, r7, #1
   25380:	24fe      	movs	r4, #254	; 0xfe
   25382:	466a      	mov	r2, sp
   25384:	a918      	add	r1, sp, #96	; 0x60
   25386:	a828      	add	r0, sp, #160	; 0xa0
   25388:	f7ff ff40 	bl	2520c <p256_zaddu>
   2538c:	1162      	asrs	r2, r4, #5
   2538e:	ab38      	add	r3, sp, #224	; 0xe0
   25390:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   25394:	f004 011f 	and.w	r1, r4, #31
   25398:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   2539c:	40cb      	lsrs	r3, r1
   2539e:	4655      	mov	r5, sl
   253a0:	f003 0a01 	and.w	sl, r3, #1
   253a4:	ea8a 0505 	eor.w	r5, sl, r5
   253a8:	462a      	mov	r2, r5
   253aa:	a928      	add	r1, sp, #160	; 0xa0
   253ac:	a818      	add	r0, sp, #96	; 0x60
   253ae:	f7db ff1d 	bl	11ec <ocrypto_bigint_cswap256>
   253b2:	462a      	mov	r2, r5
   253b4:	a930      	add	r1, sp, #192	; 0xc0
   253b6:	a820      	add	r0, sp, #128	; 0x80
   253b8:	f7db ff18 	bl	11ec <ocrypto_bigint_cswap256>
   253bc:	3c01      	subs	r4, #1
   253be:	a928      	add	r1, sp, #160	; 0xa0
   253c0:	a818      	add	r0, sp, #96	; 0x60
   253c2:	f7ff febd 	bl	25140 <p256_zaddc>
   253c6:	1c63      	adds	r3, r4, #1
   253c8:	d1db      	bne.n	25382 <ocrypto_curve_p256_scalarmult+0x5a>
   253ca:	f1ca 0201 	rsb	r2, sl, #1
   253ce:	a920      	add	r1, sp, #128	; 0x80
   253d0:	a808      	add	r0, sp, #32
   253d2:	f000 f865 	bl	254a0 <ocrypto_mod_p256_cneg>
   253d6:	ea86 060a 	eor.w	r6, r6, sl
   253da:	466a      	mov	r2, sp
   253dc:	a918      	add	r1, sp, #96	; 0x60
   253de:	a828      	add	r0, sp, #160	; 0xa0
   253e0:	f7ff ff14 	bl	2520c <p256_zaddu>
   253e4:	a928      	add	r1, sp, #160	; 0xa0
   253e6:	4632      	mov	r2, r6
   253e8:	a818      	add	r0, sp, #96	; 0x60
   253ea:	f7db feff 	bl	11ec <ocrypto_bigint_cswap256>
   253ee:	4632      	mov	r2, r6
   253f0:	a930      	add	r1, sp, #192	; 0xc0
   253f2:	a820      	add	r0, sp, #128	; 0x80
   253f4:	f7db fefa 	bl	11ec <ocrypto_bigint_cswap256>
   253f8:	a908      	add	r1, sp, #32
   253fa:	466a      	mov	r2, sp
   253fc:	4608      	mov	r0, r1
   253fe:	f7dc f96b 	bl	16d8 <ocrypto_mod_p256_mul>
   25402:	a908      	add	r1, sp, #32
   25404:	4608      	mov	r0, r1
   25406:	f000 f89d 	bl	25544 <ocrypto_mod_p256_inv>
   2540a:	a908      	add	r1, sp, #32
   2540c:	f108 0420 	add.w	r4, r8, #32
   25410:	f109 0220 	add.w	r2, r9, #32
   25414:	4608      	mov	r0, r1
   25416:	f7dc f95f 	bl	16d8 <ocrypto_mod_p256_mul>
   2541a:	a920      	add	r1, sp, #128	; 0x80
   2541c:	aa08      	add	r2, sp, #32
   2541e:	4620      	mov	r0, r4
   25420:	f7dc f95a 	bl	16d8 <ocrypto_mod_p256_mul>
   25424:	aa08      	add	r2, sp, #32
   25426:	a918      	add	r1, sp, #96	; 0x60
   25428:	4668      	mov	r0, sp
   2542a:	f7dc f955 	bl	16d8 <ocrypto_mod_p256_mul>
   2542e:	4669      	mov	r1, sp
   25430:	4668      	mov	r0, sp
   25432:	f7dc f969 	bl	1708 <ocrypto_mod_p256_sqr>
   25436:	aa18      	add	r2, sp, #96	; 0x60
   25438:	4669      	mov	r1, sp
   2543a:	a808      	add	r0, sp, #32
   2543c:	f7dc f94c 	bl	16d8 <ocrypto_mod_p256_mul>
   25440:	4621      	mov	r1, r4
   25442:	4668      	mov	r0, sp
   25444:	f7dc f960 	bl	1708 <ocrypto_mod_p256_sqr>
   25448:	aa08      	add	r2, sp, #32
   2544a:	4669      	mov	r1, sp
   2544c:	4610      	mov	r0, r2
   2544e:	f7dc f8ab 	bl	15a8 <ocrypto_mod_p256_sub>
   25452:	4a0e      	ldr	r2, [pc, #56]	; (2548c <ocrypto_curve_p256_scalarmult+0x164>)
   25454:	a908      	add	r1, sp, #32
   25456:	4668      	mov	r0, sp
   25458:	f7dc f8a6 	bl	15a8 <ocrypto_mod_p256_sub>
   2545c:	4620      	mov	r0, r4
   2545e:	2120      	movs	r1, #32
   25460:	f7dc f84a 	bl	14f8 <ocrypto_constant_time_is_zero>
   25464:	a908      	add	r1, sp, #32
   25466:	4243      	negs	r3, r0
   25468:	4602      	mov	r2, r0
   2546a:	4668      	mov	r0, sp
   2546c:	431f      	orrs	r7, r3
   2546e:	f7db febd 	bl	11ec <ocrypto_bigint_cswap256>
   25472:	4640      	mov	r0, r8
   25474:	4a06      	ldr	r2, [pc, #24]	; (25490 <ocrypto_curve_p256_scalarmult+0x168>)
   25476:	4669      	mov	r1, sp
   25478:	f7dc f92e 	bl	16d8 <ocrypto_mod_p256_mul>
   2547c:	4638      	mov	r0, r7
   2547e:	b038      	add	sp, #224	; 0xe0
   25480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25484:	0002d034 	.word	0x0002d034
   25488:	0002cfb4 	.word	0x0002cfb4
   2548c:	0002d014 	.word	0x0002d014
   25490:	0002cfd4 	.word	0x0002cfd4

00025494 <ocrypto_curve_p256_scalarmult_base>:
   25494:	460a      	mov	r2, r1
   25496:	4901      	ldr	r1, [pc, #4]	; (2549c <ocrypto_curve_p256_scalarmult_base+0x8>)
   25498:	f7ff bf46 	b.w	25328 <ocrypto_curve_p256_scalarmult>
   2549c:	0002cf74 	.word	0x0002cf74

000254a0 <ocrypto_mod_p256_cneg>:
   254a0:	b570      	push	{r4, r5, r6, lr}
   254a2:	b088      	sub	sp, #32
   254a4:	4604      	mov	r4, r0
   254a6:	460d      	mov	r5, r1
   254a8:	4616      	mov	r6, r2
   254aa:	2100      	movs	r1, #0
   254ac:	2220      	movs	r2, #32
   254ae:	4668      	mov	r0, sp
   254b0:	f006 fe88 	bl	2c1c4 <memset>
   254b4:	2300      	movs	r3, #0
   254b6:	4629      	mov	r1, r5
   254b8:	2220      	movs	r2, #32
   254ba:	4620      	mov	r0, r4
   254bc:	9300      	str	r3, [sp, #0]
   254be:	f006 fe46 	bl	2c14e <memcpy>
   254c2:	462a      	mov	r2, r5
   254c4:	4669      	mov	r1, sp
   254c6:	4668      	mov	r0, sp
   254c8:	f7dc f86e 	bl	15a8 <ocrypto_mod_p256_sub>
   254cc:	4632      	mov	r2, r6
   254ce:	4669      	mov	r1, sp
   254d0:	4620      	mov	r0, r4
   254d2:	f7db fe8b 	bl	11ec <ocrypto_bigint_cswap256>
   254d6:	b008      	add	sp, #32
   254d8:	bd70      	pop	{r4, r5, r6, pc}
   254da:	bf00      	nop

000254dc <ocrypto_mod_p256_from_bytes>:
   254dc:	680b      	ldr	r3, [r1, #0]
   254de:	ba1b      	rev	r3, r3
   254e0:	61c3      	str	r3, [r0, #28]
   254e2:	684b      	ldr	r3, [r1, #4]
   254e4:	ba1b      	rev	r3, r3
   254e6:	6183      	str	r3, [r0, #24]
   254e8:	688b      	ldr	r3, [r1, #8]
   254ea:	ba1b      	rev	r3, r3
   254ec:	6143      	str	r3, [r0, #20]
   254ee:	68cb      	ldr	r3, [r1, #12]
   254f0:	ba1b      	rev	r3, r3
   254f2:	6103      	str	r3, [r0, #16]
   254f4:	690b      	ldr	r3, [r1, #16]
   254f6:	ba1b      	rev	r3, r3
   254f8:	60c3      	str	r3, [r0, #12]
   254fa:	694b      	ldr	r3, [r1, #20]
   254fc:	ba1b      	rev	r3, r3
   254fe:	6083      	str	r3, [r0, #8]
   25500:	698b      	ldr	r3, [r1, #24]
   25502:	ba1b      	rev	r3, r3
   25504:	6043      	str	r3, [r0, #4]
   25506:	69cb      	ldr	r3, [r1, #28]
   25508:	ba1b      	rev	r3, r3
   2550a:	6003      	str	r3, [r0, #0]
   2550c:	4770      	bx	lr
   2550e:	bf00      	nop

00025510 <ocrypto_mod_p256_to_bytes>:
   25510:	69cb      	ldr	r3, [r1, #28]
   25512:	ba1b      	rev	r3, r3
   25514:	6003      	str	r3, [r0, #0]
   25516:	698b      	ldr	r3, [r1, #24]
   25518:	ba1b      	rev	r3, r3
   2551a:	6043      	str	r3, [r0, #4]
   2551c:	694b      	ldr	r3, [r1, #20]
   2551e:	ba1b      	rev	r3, r3
   25520:	6083      	str	r3, [r0, #8]
   25522:	690b      	ldr	r3, [r1, #16]
   25524:	ba1b      	rev	r3, r3
   25526:	60c3      	str	r3, [r0, #12]
   25528:	68cb      	ldr	r3, [r1, #12]
   2552a:	ba1b      	rev	r3, r3
   2552c:	6103      	str	r3, [r0, #16]
   2552e:	688b      	ldr	r3, [r1, #8]
   25530:	ba1b      	rev	r3, r3
   25532:	6143      	str	r3, [r0, #20]
   25534:	684b      	ldr	r3, [r1, #4]
   25536:	ba1b      	rev	r3, r3
   25538:	6183      	str	r3, [r0, #24]
   2553a:	680b      	ldr	r3, [r1, #0]
   2553c:	ba1b      	rev	r3, r3
   2553e:	61c3      	str	r3, [r0, #28]
   25540:	4770      	bx	lr
   25542:	bf00      	nop

00025544 <ocrypto_mod_p256_inv>:
   25544:	b570      	push	{r4, r5, r6, lr}
   25546:	b098      	sub	sp, #96	; 0x60
   25548:	460d      	mov	r5, r1
   2554a:	4606      	mov	r6, r0
   2554c:	a810      	add	r0, sp, #64	; 0x40
   2554e:	f7dc f8db 	bl	1708 <ocrypto_mod_p256_sqr>
   25552:	462a      	mov	r2, r5
   25554:	a910      	add	r1, sp, #64	; 0x40
   25556:	4668      	mov	r0, sp
   25558:	f7dc f8be 	bl	16d8 <ocrypto_mod_p256_mul>
   2555c:	4669      	mov	r1, sp
   2555e:	a810      	add	r0, sp, #64	; 0x40
   25560:	f7dc f8d2 	bl	1708 <ocrypto_mod_p256_sqr>
   25564:	a910      	add	r1, sp, #64	; 0x40
   25566:	4608      	mov	r0, r1
   25568:	f7dc f8ce 	bl	1708 <ocrypto_mod_p256_sqr>
   2556c:	466a      	mov	r2, sp
   2556e:	a910      	add	r1, sp, #64	; 0x40
   25570:	a808      	add	r0, sp, #32
   25572:	f7dc f8b1 	bl	16d8 <ocrypto_mod_p256_mul>
   25576:	a908      	add	r1, sp, #32
   25578:	a810      	add	r0, sp, #64	; 0x40
   2557a:	f7dc f8c5 	bl	1708 <ocrypto_mod_p256_sqr>
   2557e:	a910      	add	r1, sp, #64	; 0x40
   25580:	4608      	mov	r0, r1
   25582:	f7dc f8c1 	bl	1708 <ocrypto_mod_p256_sqr>
   25586:	a910      	add	r1, sp, #64	; 0x40
   25588:	4608      	mov	r0, r1
   2558a:	f7dc f8bd 	bl	1708 <ocrypto_mod_p256_sqr>
   2558e:	a910      	add	r1, sp, #64	; 0x40
   25590:	4608      	mov	r0, r1
   25592:	f7dc f8b9 	bl	1708 <ocrypto_mod_p256_sqr>
   25596:	a910      	add	r1, sp, #64	; 0x40
   25598:	aa08      	add	r2, sp, #32
   2559a:	4608      	mov	r0, r1
   2559c:	f7dc f89c 	bl	16d8 <ocrypto_mod_p256_mul>
   255a0:	a910      	add	r1, sp, #64	; 0x40
   255a2:	4608      	mov	r0, r1
   255a4:	f7dc f8b0 	bl	1708 <ocrypto_mod_p256_sqr>
   255a8:	a910      	add	r1, sp, #64	; 0x40
   255aa:	4608      	mov	r0, r1
   255ac:	f7dc f8ac 	bl	1708 <ocrypto_mod_p256_sqr>
   255b0:	a910      	add	r1, sp, #64	; 0x40
   255b2:	466a      	mov	r2, sp
   255b4:	a808      	add	r0, sp, #32
   255b6:	f7dc f88f 	bl	16d8 <ocrypto_mod_p256_mul>
   255ba:	2405      	movs	r4, #5
   255bc:	a908      	add	r1, sp, #32
   255be:	a810      	add	r0, sp, #64	; 0x40
   255c0:	f7dc f8a2 	bl	1708 <ocrypto_mod_p256_sqr>
   255c4:	a910      	add	r1, sp, #64	; 0x40
   255c6:	4608      	mov	r0, r1
   255c8:	f7dc f89e 	bl	1708 <ocrypto_mod_p256_sqr>
   255cc:	3c01      	subs	r4, #1
   255ce:	a910      	add	r1, sp, #64	; 0x40
   255d0:	d1f5      	bne.n	255be <ocrypto_mod_p256_inv+0x7a>
   255d2:	aa08      	add	r2, sp, #32
   255d4:	4608      	mov	r0, r1
   255d6:	f7dc f87f 	bl	16d8 <ocrypto_mod_p256_mul>
   255da:	2405      	movs	r4, #5
   255dc:	a910      	add	r1, sp, #64	; 0x40
   255de:	4608      	mov	r0, r1
   255e0:	f7dc f892 	bl	1708 <ocrypto_mod_p256_sqr>
   255e4:	a910      	add	r1, sp, #64	; 0x40
   255e6:	4608      	mov	r0, r1
   255e8:	f7dc f88e 	bl	1708 <ocrypto_mod_p256_sqr>
   255ec:	3c01      	subs	r4, #1
   255ee:	d1f5      	bne.n	255dc <ocrypto_mod_p256_inv+0x98>
   255f0:	a910      	add	r1, sp, #64	; 0x40
   255f2:	aa08      	add	r2, sp, #32
   255f4:	4608      	mov	r0, r1
   255f6:	f7dc f86f 	bl	16d8 <ocrypto_mod_p256_mul>
   255fa:	a910      	add	r1, sp, #64	; 0x40
   255fc:	a808      	add	r0, sp, #32
   255fe:	f7dc f883 	bl	1708 <ocrypto_mod_p256_sqr>
   25602:	a908      	add	r1, sp, #32
   25604:	4608      	mov	r0, r1
   25606:	f7dc f87f 	bl	1708 <ocrypto_mod_p256_sqr>
   2560a:	a908      	add	r1, sp, #32
   2560c:	466a      	mov	r2, sp
   2560e:	4668      	mov	r0, sp
   25610:	f7dc f862 	bl	16d8 <ocrypto_mod_p256_mul>
   25614:	2410      	movs	r4, #16
   25616:	4669      	mov	r1, sp
   25618:	a810      	add	r0, sp, #64	; 0x40
   2561a:	f7dc f875 	bl	1708 <ocrypto_mod_p256_sqr>
   2561e:	a910      	add	r1, sp, #64	; 0x40
   25620:	4608      	mov	r0, r1
   25622:	f7dc f871 	bl	1708 <ocrypto_mod_p256_sqr>
   25626:	3c01      	subs	r4, #1
   25628:	a910      	add	r1, sp, #64	; 0x40
   2562a:	d1f5      	bne.n	25618 <ocrypto_mod_p256_inv+0xd4>
   2562c:	462a      	mov	r2, r5
   2562e:	4608      	mov	r0, r1
   25630:	f7dc f852 	bl	16d8 <ocrypto_mod_p256_mul>
   25634:	2440      	movs	r4, #64	; 0x40
   25636:	a910      	add	r1, sp, #64	; 0x40
   25638:	4608      	mov	r0, r1
   2563a:	f7dc f865 	bl	1708 <ocrypto_mod_p256_sqr>
   2563e:	a910      	add	r1, sp, #64	; 0x40
   25640:	4608      	mov	r0, r1
   25642:	f7dc f861 	bl	1708 <ocrypto_mod_p256_sqr>
   25646:	3c01      	subs	r4, #1
   25648:	d1f5      	bne.n	25636 <ocrypto_mod_p256_inv+0xf2>
   2564a:	a910      	add	r1, sp, #64	; 0x40
   2564c:	466a      	mov	r2, sp
   2564e:	4608      	mov	r0, r1
   25650:	f7dc f842 	bl	16d8 <ocrypto_mod_p256_mul>
   25654:	2410      	movs	r4, #16
   25656:	a910      	add	r1, sp, #64	; 0x40
   25658:	4608      	mov	r0, r1
   2565a:	f7dc f855 	bl	1708 <ocrypto_mod_p256_sqr>
   2565e:	a910      	add	r1, sp, #64	; 0x40
   25660:	4608      	mov	r0, r1
   25662:	f7dc f851 	bl	1708 <ocrypto_mod_p256_sqr>
   25666:	3c01      	subs	r4, #1
   25668:	d1f5      	bne.n	25656 <ocrypto_mod_p256_inv+0x112>
   2566a:	a910      	add	r1, sp, #64	; 0x40
   2566c:	466a      	mov	r2, sp
   2566e:	4608      	mov	r0, r1
   25670:	f7dc f832 	bl	16d8 <ocrypto_mod_p256_mul>
   25674:	2410      	movs	r4, #16
   25676:	a910      	add	r1, sp, #64	; 0x40
   25678:	4608      	mov	r0, r1
   2567a:	f7dc f845 	bl	1708 <ocrypto_mod_p256_sqr>
   2567e:	a910      	add	r1, sp, #64	; 0x40
   25680:	4608      	mov	r0, r1
   25682:	f7dc f841 	bl	1708 <ocrypto_mod_p256_sqr>
   25686:	3c01      	subs	r4, #1
   25688:	d1f5      	bne.n	25676 <ocrypto_mod_p256_inv+0x132>
   2568a:	a910      	add	r1, sp, #64	; 0x40
   2568c:	aa08      	add	r2, sp, #32
   2568e:	4608      	mov	r0, r1
   25690:	f7dc f822 	bl	16d8 <ocrypto_mod_p256_mul>
   25694:	462a      	mov	r2, r5
   25696:	a910      	add	r1, sp, #64	; 0x40
   25698:	4630      	mov	r0, r6
   2569a:	f7dc f81d 	bl	16d8 <ocrypto_mod_p256_mul>
   2569e:	b018      	add	sp, #96	; 0x60
   256a0:	bd70      	pop	{r4, r5, r6, pc}
   256a2:	bf00      	nop

000256a4 <sqrt>:
   256a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   256a6:	4606      	mov	r6, r0
   256a8:	460f      	mov	r7, r1
   256aa:	f000 f827 	bl	256fc <__ieee754_sqrt>
   256ae:	4b12      	ldr	r3, [pc, #72]	; (256f8 <sqrt+0x54>)
   256b0:	f993 3000 	ldrsb.w	r3, [r3]
   256b4:	3301      	adds	r3, #1
   256b6:	4604      	mov	r4, r0
   256b8:	460d      	mov	r5, r1
   256ba:	d019      	beq.n	256f0 <sqrt+0x4c>
   256bc:	4632      	mov	r2, r6
   256be:	463b      	mov	r3, r7
   256c0:	4630      	mov	r0, r6
   256c2:	4639      	mov	r1, r7
   256c4:	f7dc f838 	bl	1738 <__aeabi_dcmpun>
   256c8:	b990      	cbnz	r0, 256f0 <sqrt+0x4c>
   256ca:	2200      	movs	r2, #0
   256cc:	2300      	movs	r3, #0
   256ce:	4630      	mov	r0, r6
   256d0:	4639      	mov	r1, r7
   256d2:	f7db fcc7 	bl	1064 <__aeabi_dcmplt>
   256d6:	b158      	cbz	r0, 256f0 <sqrt+0x4c>
   256d8:	f003 fe13 	bl	29302 <__errno>
   256dc:	2321      	movs	r3, #33	; 0x21
   256de:	6003      	str	r3, [r0, #0]
   256e0:	2200      	movs	r2, #0
   256e2:	2300      	movs	r3, #0
   256e4:	4610      	mov	r0, r2
   256e6:	4619      	mov	r1, r3
   256e8:	f7da fff0 	bl	6cc <__aeabi_ddiv>
   256ec:	4604      	mov	r4, r0
   256ee:	460d      	mov	r5, r1
   256f0:	4620      	mov	r0, r4
   256f2:	4629      	mov	r1, r5
   256f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   256f6:	bf00      	nop
   256f8:	200009b8 	.word	0x200009b8

000256fc <__ieee754_sqrt>:
   256fc:	f8df c154 	ldr.w	ip, [pc, #340]	; 25854 <__ieee754_sqrt+0x158>
   25700:	ea3c 0c01 	bics.w	ip, ip, r1
   25704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25708:	460a      	mov	r2, r1
   2570a:	4606      	mov	r6, r0
   2570c:	460d      	mov	r5, r1
   2570e:	460c      	mov	r4, r1
   25710:	4607      	mov	r7, r0
   25712:	4603      	mov	r3, r0
   25714:	d10f      	bne.n	25736 <__ieee754_sqrt+0x3a>
   25716:	4602      	mov	r2, r0
   25718:	460b      	mov	r3, r1
   2571a:	f7da fead 	bl	478 <__aeabi_dmul>
   2571e:	4602      	mov	r2, r0
   25720:	460b      	mov	r3, r1
   25722:	4630      	mov	r0, r6
   25724:	4629      	mov	r1, r5
   25726:	f7da fcf1 	bl	10c <__adddf3>
   2572a:	4606      	mov	r6, r0
   2572c:	460d      	mov	r5, r1
   2572e:	4630      	mov	r0, r6
   25730:	4629      	mov	r1, r5
   25732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25736:	2900      	cmp	r1, #0
   25738:	dc0e      	bgt.n	25758 <__ieee754_sqrt+0x5c>
   2573a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   2573e:	ea5c 0707 	orrs.w	r7, ip, r7
   25742:	d0f4      	beq.n	2572e <__ieee754_sqrt+0x32>
   25744:	b141      	cbz	r1, 25758 <__ieee754_sqrt+0x5c>
   25746:	4602      	mov	r2, r0
   25748:	460b      	mov	r3, r1
   2574a:	f7da fcdd 	bl	108 <__aeabi_dsub>
   2574e:	4602      	mov	r2, r0
   25750:	460b      	mov	r3, r1
   25752:	f7da ffbb 	bl	6cc <__aeabi_ddiv>
   25756:	e7e8      	b.n	2572a <__ieee754_sqrt+0x2e>
   25758:	1521      	asrs	r1, r4, #20
   2575a:	d074      	beq.n	25846 <__ieee754_sqrt+0x14a>
   2575c:	07cc      	lsls	r4, r1, #31
   2575e:	f3c2 0213 	ubfx	r2, r2, #0, #20
   25762:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   25766:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2576a:	bf5e      	ittt	pl
   2576c:	0fd9      	lsrpl	r1, r3, #31
   2576e:	005b      	lslpl	r3, r3, #1
   25770:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
   25774:	2400      	movs	r4, #0
   25776:	0fd9      	lsrs	r1, r3, #31
   25778:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   2577c:	107f      	asrs	r7, r7, #1
   2577e:	005b      	lsls	r3, r3, #1
   25780:	2516      	movs	r5, #22
   25782:	4620      	mov	r0, r4
   25784:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   25788:	1846      	adds	r6, r0, r1
   2578a:	4296      	cmp	r6, r2
   2578c:	bfde      	ittt	le
   2578e:	1b92      	suble	r2, r2, r6
   25790:	1870      	addle	r0, r6, r1
   25792:	1864      	addle	r4, r4, r1
   25794:	0052      	lsls	r2, r2, #1
   25796:	3d01      	subs	r5, #1
   25798:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
   2579c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   257a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   257a4:	d1f0      	bne.n	25788 <__ieee754_sqrt+0x8c>
   257a6:	4629      	mov	r1, r5
   257a8:	f04f 0e20 	mov.w	lr, #32
   257ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
   257b0:	4282      	cmp	r2, r0
   257b2:	eb06 0c05 	add.w	ip, r6, r5
   257b6:	dc02      	bgt.n	257be <__ieee754_sqrt+0xc2>
   257b8:	d113      	bne.n	257e2 <__ieee754_sqrt+0xe6>
   257ba:	459c      	cmp	ip, r3
   257bc:	d811      	bhi.n	257e2 <__ieee754_sqrt+0xe6>
   257be:	f1bc 0f00 	cmp.w	ip, #0
   257c2:	eb0c 0506 	add.w	r5, ip, r6
   257c6:	da43      	bge.n	25850 <__ieee754_sqrt+0x154>
   257c8:	2d00      	cmp	r5, #0
   257ca:	db41      	blt.n	25850 <__ieee754_sqrt+0x154>
   257cc:	f100 0801 	add.w	r8, r0, #1
   257d0:	1a12      	subs	r2, r2, r0
   257d2:	459c      	cmp	ip, r3
   257d4:	bf88      	it	hi
   257d6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
   257da:	eba3 030c 	sub.w	r3, r3, ip
   257de:	4431      	add	r1, r6
   257e0:	4640      	mov	r0, r8
   257e2:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
   257e6:	f1be 0e01 	subs.w	lr, lr, #1
   257ea:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
   257ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
   257f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
   257f6:	d1db      	bne.n	257b0 <__ieee754_sqrt+0xb4>
   257f8:	4313      	orrs	r3, r2
   257fa:	d006      	beq.n	2580a <__ieee754_sqrt+0x10e>
   257fc:	1c48      	adds	r0, r1, #1
   257fe:	bf13      	iteet	ne
   25800:	3101      	addne	r1, #1
   25802:	3401      	addeq	r4, #1
   25804:	4671      	moveq	r1, lr
   25806:	f021 0101 	bicne.w	r1, r1, #1
   2580a:	1063      	asrs	r3, r4, #1
   2580c:	0849      	lsrs	r1, r1, #1
   2580e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   25812:	07e2      	lsls	r2, r4, #31
   25814:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   25818:	bf48      	it	mi
   2581a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
   2581e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
   25822:	460e      	mov	r6, r1
   25824:	e783      	b.n	2572e <__ieee754_sqrt+0x32>
   25826:	0ada      	lsrs	r2, r3, #11
   25828:	3815      	subs	r0, #21
   2582a:	055b      	lsls	r3, r3, #21
   2582c:	2a00      	cmp	r2, #0
   2582e:	d0fa      	beq.n	25826 <__ieee754_sqrt+0x12a>
   25830:	02d5      	lsls	r5, r2, #11
   25832:	d50a      	bpl.n	2584a <__ieee754_sqrt+0x14e>
   25834:	f1c1 0420 	rsb	r4, r1, #32
   25838:	fa23 f404 	lsr.w	r4, r3, r4
   2583c:	1e4d      	subs	r5, r1, #1
   2583e:	408b      	lsls	r3, r1
   25840:	4322      	orrs	r2, r4
   25842:	1b41      	subs	r1, r0, r5
   25844:	e78a      	b.n	2575c <__ieee754_sqrt+0x60>
   25846:	4608      	mov	r0, r1
   25848:	e7f0      	b.n	2582c <__ieee754_sqrt+0x130>
   2584a:	0052      	lsls	r2, r2, #1
   2584c:	3101      	adds	r1, #1
   2584e:	e7ef      	b.n	25830 <__ieee754_sqrt+0x134>
   25850:	4680      	mov	r8, r0
   25852:	e7bd      	b.n	257d0 <__ieee754_sqrt+0xd4>
   25854:	7ff00000 	.word	0x7ff00000

00025858 <_strtoul_l.constprop.0>:
   25858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2585c:	4f36      	ldr	r7, [pc, #216]	; (25938 <_strtoul_l.constprop.0+0xe0>)
   2585e:	4686      	mov	lr, r0
   25860:	460d      	mov	r5, r1
   25862:	4628      	mov	r0, r5
   25864:	f815 4b01 	ldrb.w	r4, [r5], #1
   25868:	5de6      	ldrb	r6, [r4, r7]
   2586a:	f016 0608 	ands.w	r6, r6, #8
   2586e:	d1f8      	bne.n	25862 <_strtoul_l.constprop.0+0xa>
   25870:	2c2d      	cmp	r4, #45	; 0x2d
   25872:	d12f      	bne.n	258d4 <_strtoul_l.constprop.0+0x7c>
   25874:	782c      	ldrb	r4, [r5, #0]
   25876:	2601      	movs	r6, #1
   25878:	1c85      	adds	r5, r0, #2
   2587a:	2b00      	cmp	r3, #0
   2587c:	d057      	beq.n	2592e <_strtoul_l.constprop.0+0xd6>
   2587e:	2b10      	cmp	r3, #16
   25880:	d109      	bne.n	25896 <_strtoul_l.constprop.0+0x3e>
   25882:	2c30      	cmp	r4, #48	; 0x30
   25884:	d107      	bne.n	25896 <_strtoul_l.constprop.0+0x3e>
   25886:	7828      	ldrb	r0, [r5, #0]
   25888:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2588c:	2858      	cmp	r0, #88	; 0x58
   2588e:	d149      	bne.n	25924 <_strtoul_l.constprop.0+0xcc>
   25890:	786c      	ldrb	r4, [r5, #1]
   25892:	2310      	movs	r3, #16
   25894:	3502      	adds	r5, #2
   25896:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2589a:	2700      	movs	r7, #0
   2589c:	fbb8 f8f3 	udiv	r8, r8, r3
   258a0:	fb03 f908 	mul.w	r9, r3, r8
   258a4:	ea6f 0909 	mvn.w	r9, r9
   258a8:	4638      	mov	r0, r7
   258aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   258ae:	f1bc 0f09 	cmp.w	ip, #9
   258b2:	d814      	bhi.n	258de <_strtoul_l.constprop.0+0x86>
   258b4:	4664      	mov	r4, ip
   258b6:	42a3      	cmp	r3, r4
   258b8:	dd22      	ble.n	25900 <_strtoul_l.constprop.0+0xa8>
   258ba:	2f00      	cmp	r7, #0
   258bc:	db1d      	blt.n	258fa <_strtoul_l.constprop.0+0xa2>
   258be:	4580      	cmp	r8, r0
   258c0:	d31b      	bcc.n	258fa <_strtoul_l.constprop.0+0xa2>
   258c2:	d101      	bne.n	258c8 <_strtoul_l.constprop.0+0x70>
   258c4:	45a1      	cmp	r9, r4
   258c6:	db18      	blt.n	258fa <_strtoul_l.constprop.0+0xa2>
   258c8:	fb00 4003 	mla	r0, r0, r3, r4
   258cc:	2701      	movs	r7, #1
   258ce:	f815 4b01 	ldrb.w	r4, [r5], #1
   258d2:	e7ea      	b.n	258aa <_strtoul_l.constprop.0+0x52>
   258d4:	2c2b      	cmp	r4, #43	; 0x2b
   258d6:	bf04      	itt	eq
   258d8:	782c      	ldrbeq	r4, [r5, #0]
   258da:	1c85      	addeq	r5, r0, #2
   258dc:	e7cd      	b.n	2587a <_strtoul_l.constprop.0+0x22>
   258de:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   258e2:	f1bc 0f19 	cmp.w	ip, #25
   258e6:	d801      	bhi.n	258ec <_strtoul_l.constprop.0+0x94>
   258e8:	3c37      	subs	r4, #55	; 0x37
   258ea:	e7e4      	b.n	258b6 <_strtoul_l.constprop.0+0x5e>
   258ec:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   258f0:	f1bc 0f19 	cmp.w	ip, #25
   258f4:	d804      	bhi.n	25900 <_strtoul_l.constprop.0+0xa8>
   258f6:	3c57      	subs	r4, #87	; 0x57
   258f8:	e7dd      	b.n	258b6 <_strtoul_l.constprop.0+0x5e>
   258fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   258fe:	e7e6      	b.n	258ce <_strtoul_l.constprop.0+0x76>
   25900:	2f00      	cmp	r7, #0
   25902:	da07      	bge.n	25914 <_strtoul_l.constprop.0+0xbc>
   25904:	2322      	movs	r3, #34	; 0x22
   25906:	f8ce 3000 	str.w	r3, [lr]
   2590a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2590e:	b932      	cbnz	r2, 2591e <_strtoul_l.constprop.0+0xc6>
   25910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25914:	b106      	cbz	r6, 25918 <_strtoul_l.constprop.0+0xc0>
   25916:	4240      	negs	r0, r0
   25918:	2a00      	cmp	r2, #0
   2591a:	d0f9      	beq.n	25910 <_strtoul_l.constprop.0+0xb8>
   2591c:	b107      	cbz	r7, 25920 <_strtoul_l.constprop.0+0xc8>
   2591e:	1e69      	subs	r1, r5, #1
   25920:	6011      	str	r1, [r2, #0]
   25922:	e7f5      	b.n	25910 <_strtoul_l.constprop.0+0xb8>
   25924:	2430      	movs	r4, #48	; 0x30
   25926:	2b00      	cmp	r3, #0
   25928:	d1b5      	bne.n	25896 <_strtoul_l.constprop.0+0x3e>
   2592a:	2308      	movs	r3, #8
   2592c:	e7b3      	b.n	25896 <_strtoul_l.constprop.0+0x3e>
   2592e:	2c30      	cmp	r4, #48	; 0x30
   25930:	d0a9      	beq.n	25886 <_strtoul_l.constprop.0+0x2e>
   25932:	230a      	movs	r3, #10
   25934:	e7af      	b.n	25896 <_strtoul_l.constprop.0+0x3e>
   25936:	bf00      	nop
   25938:	000306b1 	.word	0x000306b1

0002593c <strtoul>:
   2593c:	4613      	mov	r3, r2
   2593e:	460a      	mov	r2, r1
   25940:	4601      	mov	r1, r0
   25942:	4802      	ldr	r0, [pc, #8]	; (2594c <strtoul+0x10>)
   25944:	6800      	ldr	r0, [r0, #0]
   25946:	f7ff bf87 	b.w	25858 <_strtoul_l.constprop.0>
   2594a:	bf00      	nop
   2594c:	20000808 	.word	0x20000808

00025950 <nrf_cc3xx_platform_init>:
   25950:	b510      	push	{r4, lr}
   25952:	4c0c      	ldr	r4, [pc, #48]	; (25984 <nrf_cc3xx_platform_init+0x34>)
   25954:	6823      	ldr	r3, [r4, #0]
   25956:	b113      	cbz	r3, 2595e <nrf_cc3xx_platform_init+0xe>
   25958:	4b0b      	ldr	r3, [pc, #44]	; (25988 <nrf_cc3xx_platform_init+0x38>)
   2595a:	681b      	ldr	r3, [r3, #0]
   2595c:	b92b      	cbnz	r3, 2596a <nrf_cc3xx_platform_init+0x1a>
   2595e:	f000 fe7d 	bl	2665c <CC_LibInit>
   25962:	b930      	cbnz	r0, 25972 <nrf_cc3xx_platform_init+0x22>
   25964:	4b08      	ldr	r3, [pc, #32]	; (25988 <nrf_cc3xx_platform_init+0x38>)
   25966:	2201      	movs	r2, #1
   25968:	601a      	str	r2, [r3, #0]
   2596a:	2301      	movs	r3, #1
   2596c:	6023      	str	r3, [r4, #0]
   2596e:	2000      	movs	r0, #0
   25970:	bd10      	pop	{r4, pc}
   25972:	3801      	subs	r0, #1
   25974:	2806      	cmp	r0, #6
   25976:	d901      	bls.n	2597c <nrf_cc3xx_platform_init+0x2c>
   25978:	4804      	ldr	r0, [pc, #16]	; (2598c <nrf_cc3xx_platform_init+0x3c>)
   2597a:	bd10      	pop	{r4, pc}
   2597c:	4b04      	ldr	r3, [pc, #16]	; (25990 <nrf_cc3xx_platform_init+0x40>)
   2597e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   25982:	bd10      	pop	{r4, pc}
   25984:	20002bfc 	.word	0x20002bfc
   25988:	20002c00 	.word	0x20002c00
   2598c:	ffff8ffe 	.word	0xffff8ffe
   25990:	0002d0b4 	.word	0x0002d0b4

00025994 <nrf_cc3xx_platform_abort>:
   25994:	f3bf 8f4f 	dsb	sy
   25998:	4905      	ldr	r1, [pc, #20]	; (259b0 <nrf_cc3xx_platform_abort+0x1c>)
   2599a:	4b06      	ldr	r3, [pc, #24]	; (259b4 <nrf_cc3xx_platform_abort+0x20>)
   2599c:	68ca      	ldr	r2, [r1, #12]
   2599e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   259a2:	4313      	orrs	r3, r2
   259a4:	60cb      	str	r3, [r1, #12]
   259a6:	f3bf 8f4f 	dsb	sy
   259aa:	bf00      	nop
   259ac:	e7fd      	b.n	259aa <nrf_cc3xx_platform_abort+0x16>
   259ae:	bf00      	nop
   259b0:	e000ed00 	.word	0xe000ed00
   259b4:	05fa0004 	.word	0x05fa0004

000259b8 <CC_PalAbort>:
   259b8:	b410      	push	{r4}
   259ba:	4b09      	ldr	r3, [pc, #36]	; (259e0 <CC_PalAbort+0x28>)
   259bc:	4909      	ldr	r1, [pc, #36]	; (259e4 <CC_PalAbort+0x2c>)
   259be:	4c0a      	ldr	r4, [pc, #40]	; (259e8 <CC_PalAbort+0x30>)
   259c0:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   259c4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   259c8:	6849      	ldr	r1, [r1, #4]
   259ca:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   259ce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   259d2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   259d6:	2300      	movs	r3, #0
   259d8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   259dc:	bc10      	pop	{r4}
   259de:	4708      	bx	r1
   259e0:	5002b000 	.word	0x5002b000
   259e4:	2000086c 	.word	0x2000086c
   259e8:	5002a000 	.word	0x5002a000

000259ec <nrf_cc3xx_platform_set_abort>:
   259ec:	e9d0 1200 	ldrd	r1, r2, [r0]
   259f0:	4b01      	ldr	r3, [pc, #4]	; (259f8 <nrf_cc3xx_platform_set_abort+0xc>)
   259f2:	e9c3 1200 	strd	r1, r2, [r3]
   259f6:	4770      	bx	lr
   259f8:	2000086c 	.word	0x2000086c

000259fc <nrf_cc3xx_platform_ctr_drbg_init>:
   259fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25a00:	4c14      	ldr	r4, [pc, #80]	; (25a54 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   25a02:	4e15      	ldr	r6, [pc, #84]	; (25a58 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   25a04:	2800      	cmp	r0, #0
   25a06:	bf18      	it	ne
   25a08:	4604      	movne	r4, r0
   25a0a:	b083      	sub	sp, #12
   25a0c:	6823      	ldr	r3, [r4, #0]
   25a0e:	42b3      	cmp	r3, r6
   25a10:	d01c      	beq.n	25a4c <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   25a12:	460d      	mov	r5, r1
   25a14:	4620      	mov	r0, r4
   25a16:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   25a1a:	f104 0904 	add.w	r9, r4, #4
   25a1e:	4617      	mov	r7, r2
   25a20:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   25a24:	f000 f8d0 	bl	25bc8 <mbedtls_platform_zeroize>
   25a28:	4648      	mov	r0, r9
   25a2a:	f000 fd05 	bl	26438 <cc_mbedtls_entropy_init>
   25a2e:	4640      	mov	r0, r8
   25a30:	f000 fb32 	bl	26098 <cc_mbedtls_ctr_drbg_init>
   25a34:	4909      	ldr	r1, [pc, #36]	; (25a5c <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   25a36:	9700      	str	r7, [sp, #0]
   25a38:	462b      	mov	r3, r5
   25a3a:	464a      	mov	r2, r9
   25a3c:	4640      	mov	r0, r8
   25a3e:	f000 fb41 	bl	260c4 <cc_mbedtls_ctr_drbg_seed>
   25a42:	b900      	cbnz	r0, 25a46 <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   25a44:	6026      	str	r6, [r4, #0]
   25a46:	b003      	add	sp, #12
   25a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25a4c:	2000      	movs	r0, #0
   25a4e:	b003      	add	sp, #12
   25a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25a54:	20002c04 	.word	0x20002c04
   25a58:	5ac9bca5 	.word	0x5ac9bca5
   25a5c:	000264b9 	.word	0x000264b9

00025a60 <nrf_cc3xx_platform_ctr_drbg_get>:
   25a60:	b570      	push	{r4, r5, r6, lr}
   25a62:	4d0d      	ldr	r5, [pc, #52]	; (25a98 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   25a64:	2800      	cmp	r0, #0
   25a66:	bf18      	it	ne
   25a68:	4605      	movne	r5, r0
   25a6a:	461e      	mov	r6, r3
   25a6c:	6828      	ldr	r0, [r5, #0]
   25a6e:	4b0b      	ldr	r3, [pc, #44]	; (25a9c <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   25a70:	4298      	cmp	r0, r3
   25a72:	b082      	sub	sp, #8
   25a74:	d10d      	bne.n	25a92 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   25a76:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   25a7a:	2500      	movs	r5, #0
   25a7c:	9500      	str	r5, [sp, #0]
   25a7e:	462b      	mov	r3, r5
   25a80:	4614      	mov	r4, r2
   25a82:	f000 fb6d 	bl	26160 <cc_mbedtls_ctr_drbg_random_with_add>
   25a86:	2800      	cmp	r0, #0
   25a88:	bf18      	it	ne
   25a8a:	462c      	movne	r4, r5
   25a8c:	6034      	str	r4, [r6, #0]
   25a8e:	b002      	add	sp, #8
   25a90:	bd70      	pop	{r4, r5, r6, pc}
   25a92:	4803      	ldr	r0, [pc, #12]	; (25aa0 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   25a94:	e7fb      	b.n	25a8e <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   25a96:	bf00      	nop
   25a98:	20002c04 	.word	0x20002c04
   25a9c:	5ac9bca5 	.word	0x5ac9bca5
   25aa0:	ffff8fe8 	.word	0xffff8fe8

00025aa4 <mutex_free>:
   25aa4:	b510      	push	{r4, lr}
   25aa6:	4604      	mov	r4, r0
   25aa8:	b130      	cbz	r0, 25ab8 <mutex_free+0x14>
   25aaa:	6863      	ldr	r3, [r4, #4]
   25aac:	06db      	lsls	r3, r3, #27
   25aae:	d502      	bpl.n	25ab6 <mutex_free+0x12>
   25ab0:	2300      	movs	r3, #0
   25ab2:	6023      	str	r3, [r4, #0]
   25ab4:	6063      	str	r3, [r4, #4]
   25ab6:	bd10      	pop	{r4, pc}
   25ab8:	4b02      	ldr	r3, [pc, #8]	; (25ac4 <mutex_free+0x20>)
   25aba:	4803      	ldr	r0, [pc, #12]	; (25ac8 <mutex_free+0x24>)
   25abc:	685b      	ldr	r3, [r3, #4]
   25abe:	4798      	blx	r3
   25ac0:	e7f3      	b.n	25aaa <mutex_free+0x6>
   25ac2:	bf00      	nop
   25ac4:	2000086c 	.word	0x2000086c
   25ac8:	0002d0d0 	.word	0x0002d0d0

00025acc <mutex_lock>:
   25acc:	b1b0      	cbz	r0, 25afc <mutex_lock+0x30>
   25ace:	6843      	ldr	r3, [r0, #4]
   25ad0:	b193      	cbz	r3, 25af8 <mutex_lock+0x2c>
   25ad2:	06db      	lsls	r3, r3, #27
   25ad4:	d50e      	bpl.n	25af4 <mutex_lock+0x28>
   25ad6:	2301      	movs	r3, #1
   25ad8:	e850 2f00 	ldrex	r2, [r0]
   25adc:	4619      	mov	r1, r3
   25ade:	e840 1c00 	strex	ip, r1, [r0]
   25ae2:	f09c 0f00 	teq	ip, #0
   25ae6:	d1f7      	bne.n	25ad8 <mutex_lock+0xc>
   25ae8:	2a01      	cmp	r2, #1
   25aea:	d0f5      	beq.n	25ad8 <mutex_lock+0xc>
   25aec:	f3bf 8f5f 	dmb	sy
   25af0:	2000      	movs	r0, #0
   25af2:	4770      	bx	lr
   25af4:	4803      	ldr	r0, [pc, #12]	; (25b04 <mutex_lock+0x38>)
   25af6:	4770      	bx	lr
   25af8:	4803      	ldr	r0, [pc, #12]	; (25b08 <mutex_lock+0x3c>)
   25afa:	4770      	bx	lr
   25afc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25b00:	4770      	bx	lr
   25b02:	bf00      	nop
   25b04:	ffff8fe9 	.word	0xffff8fe9
   25b08:	ffff8fea 	.word	0xffff8fea

00025b0c <mutex_unlock>:
   25b0c:	b168      	cbz	r0, 25b2a <mutex_unlock+0x1e>
   25b0e:	6843      	ldr	r3, [r0, #4]
   25b10:	b13b      	cbz	r3, 25b22 <mutex_unlock+0x16>
   25b12:	06db      	lsls	r3, r3, #27
   25b14:	d507      	bpl.n	25b26 <mutex_unlock+0x1a>
   25b16:	f3bf 8f5f 	dmb	sy
   25b1a:	2300      	movs	r3, #0
   25b1c:	6003      	str	r3, [r0, #0]
   25b1e:	4618      	mov	r0, r3
   25b20:	4770      	bx	lr
   25b22:	4803      	ldr	r0, [pc, #12]	; (25b30 <mutex_unlock+0x24>)
   25b24:	4770      	bx	lr
   25b26:	4803      	ldr	r0, [pc, #12]	; (25b34 <mutex_unlock+0x28>)
   25b28:	4770      	bx	lr
   25b2a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25b2e:	4770      	bx	lr
   25b30:	ffff8fea 	.word	0xffff8fea
   25b34:	ffff8fe9 	.word	0xffff8fe9

00025b38 <mutex_init>:
   25b38:	b510      	push	{r4, lr}
   25b3a:	4604      	mov	r4, r0
   25b3c:	b120      	cbz	r0, 25b48 <mutex_init+0x10>
   25b3e:	2200      	movs	r2, #0
   25b40:	2311      	movs	r3, #17
   25b42:	6022      	str	r2, [r4, #0]
   25b44:	6063      	str	r3, [r4, #4]
   25b46:	bd10      	pop	{r4, pc}
   25b48:	4801      	ldr	r0, [pc, #4]	; (25b50 <mutex_init+0x18>)
   25b4a:	f7ff ff35 	bl	259b8 <CC_PalAbort>
   25b4e:	e7f6      	b.n	25b3e <mutex_init+0x6>
   25b50:	0002d0f8 	.word	0x0002d0f8

00025b54 <nrf_cc3xx_platform_set_mutexes>:
   25b54:	b570      	push	{r4, r5, r6, lr}
   25b56:	e9d0 2300 	ldrd	r2, r3, [r0]
   25b5a:	4c13      	ldr	r4, [pc, #76]	; (25ba8 <nrf_cc3xx_platform_set_mutexes+0x54>)
   25b5c:	4d13      	ldr	r5, [pc, #76]	; (25bac <nrf_cc3xx_platform_set_mutexes+0x58>)
   25b5e:	6063      	str	r3, [r4, #4]
   25b60:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   25b64:	e9c4 3002 	strd	r3, r0, [r4, #8]
   25b68:	6022      	str	r2, [r4, #0]
   25b6a:	4b11      	ldr	r3, [pc, #68]	; (25bb0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   25b6c:	6808      	ldr	r0, [r1, #0]
   25b6e:	6018      	str	r0, [r3, #0]
   25b70:	6848      	ldr	r0, [r1, #4]
   25b72:	6058      	str	r0, [r3, #4]
   25b74:	6888      	ldr	r0, [r1, #8]
   25b76:	6098      	str	r0, [r3, #8]
   25b78:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   25b7c:	60d8      	str	r0, [r3, #12]
   25b7e:	6119      	str	r1, [r3, #16]
   25b80:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   25b84:	06db      	lsls	r3, r3, #27
   25b86:	d50d      	bpl.n	25ba4 <nrf_cc3xx_platform_set_mutexes+0x50>
   25b88:	2300      	movs	r3, #0
   25b8a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   25b8e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   25b92:	f505 708a 	add.w	r0, r5, #276	; 0x114
   25b96:	4790      	blx	r2
   25b98:	6823      	ldr	r3, [r4, #0]
   25b9a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   25b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25ba2:	4718      	bx	r3
   25ba4:	bd70      	pop	{r4, r5, r6, pc}
   25ba6:	bf00      	nop
   25ba8:	2000087c 	.word	0x2000087c
   25bac:	20002c04 	.word	0x20002c04
   25bb0:	2000088c 	.word	0x2000088c

00025bb4 <mbedtls_zeroize_internal>:
   25bb4:	b138      	cbz	r0, 25bc6 <mbedtls_zeroize_internal+0x12>
   25bb6:	b131      	cbz	r1, 25bc6 <mbedtls_zeroize_internal+0x12>
   25bb8:	4401      	add	r1, r0
   25bba:	2200      	movs	r2, #0
   25bbc:	4603      	mov	r3, r0
   25bbe:	3001      	adds	r0, #1
   25bc0:	4281      	cmp	r1, r0
   25bc2:	701a      	strb	r2, [r3, #0]
   25bc4:	d1fa      	bne.n	25bbc <mbedtls_zeroize_internal+0x8>
   25bc6:	4770      	bx	lr

00025bc8 <mbedtls_platform_zeroize>:
   25bc8:	b138      	cbz	r0, 25bda <mbedtls_platform_zeroize+0x12>
   25bca:	b131      	cbz	r1, 25bda <mbedtls_platform_zeroize+0x12>
   25bcc:	4401      	add	r1, r0
   25bce:	2200      	movs	r2, #0
   25bd0:	4603      	mov	r3, r0
   25bd2:	3001      	adds	r0, #1
   25bd4:	4288      	cmp	r0, r1
   25bd6:	701a      	strb	r2, [r3, #0]
   25bd8:	d1fa      	bne.n	25bd0 <mbedtls_platform_zeroize+0x8>
   25bda:	4770      	bx	lr

00025bdc <block_cipher_df>:
   25bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25be0:	b0b7      	sub	sp, #220	; 0xdc
   25be2:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   25be6:	9005      	str	r0, [sp, #20]
   25be8:	f200 8147 	bhi.w	25e7a <block_cipher_df+0x29e>
   25bec:	4614      	mov	r4, r2
   25bee:	460d      	mov	r5, r1
   25bf0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   25bf4:	2100      	movs	r1, #0
   25bf6:	48a2      	ldr	r0, [pc, #648]	; (25e80 <block_cipher_df+0x2a4>)
   25bf8:	f006 fae4 	bl	2c1c4 <memset>
   25bfc:	a819      	add	r0, sp, #100	; 0x64
   25bfe:	f001 f9cb 	bl	26f98 <cc_mbedtls_aes_init>
   25c02:	489f      	ldr	r0, [pc, #636]	; (25e80 <block_cipher_df+0x2a4>)
   25c04:	2300      	movs	r3, #0
   25c06:	8203      	strh	r3, [r0, #16]
   25c08:	ba63      	rev16	r3, r4
   25c0a:	8243      	strh	r3, [r0, #18]
   25c0c:	2320      	movs	r3, #32
   25c0e:	4629      	mov	r1, r5
   25c10:	75c3      	strb	r3, [r0, #23]
   25c12:	4605      	mov	r5, r0
   25c14:	4622      	mov	r2, r4
   25c16:	3018      	adds	r0, #24
   25c18:	f006 fa99 	bl	2c14e <memcpy>
   25c1c:	462b      	mov	r3, r5
   25c1e:	4423      	add	r3, r4
   25c20:	2280      	movs	r2, #128	; 0x80
   25c22:	761a      	strb	r2, [r3, #24]
   25c24:	4b97      	ldr	r3, [pc, #604]	; (25e84 <block_cipher_df+0x2a8>)
   25c26:	930d      	str	r3, [sp, #52]	; 0x34
   25c28:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   25c2c:	930e      	str	r3, [sp, #56]	; 0x38
   25c2e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   25c32:	930f      	str	r3, [sp, #60]	; 0x3c
   25c34:	a90d      	add	r1, sp, #52	; 0x34
   25c36:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   25c3a:	a819      	add	r0, sp, #100	; 0x64
   25c3c:	9310      	str	r3, [sp, #64]	; 0x40
   25c3e:	f001 f9c1 	bl	26fc4 <cc_mbedtls_aes_setkey_enc>
   25c42:	4605      	mov	r5, r0
   25c44:	2800      	cmp	r0, #0
   25c46:	f040 80f4 	bne.w	25e32 <block_cipher_df+0x256>
   25c4a:	f104 0319 	add.w	r3, r4, #25
   25c4e:	9306      	str	r3, [sp, #24]
   25c50:	f10d 0820 	add.w	r8, sp, #32
   25c54:	ab11      	add	r3, sp, #68	; 0x44
   25c56:	9304      	str	r3, [sp, #16]
   25c58:	9307      	str	r3, [sp, #28]
   25c5a:	46c1      	mov	r9, r8
   25c5c:	2210      	movs	r2, #16
   25c5e:	2100      	movs	r1, #0
   25c60:	4648      	mov	r0, r9
   25c62:	f006 faaf 	bl	2c1c4 <memset>
   25c66:	f8df a220 	ldr.w	sl, [pc, #544]	; 25e88 <block_cipher_df+0x2ac>
   25c6a:	9b06      	ldr	r3, [sp, #24]
   25c6c:	9300      	str	r3, [sp, #0]
   25c6e:	f8cd 900c 	str.w	r9, [sp, #12]
   25c72:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   25c76:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   25c7a:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   25c7e:	f89d 5020 	ldrb.w	r5, [sp, #32]
   25c82:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   25c86:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   25c8a:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   25c8e:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   25c92:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   25c96:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   25c9a:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   25c9e:	406a      	eors	r2, r5
   25ca0:	ea8e 0e00 	eor.w	lr, lr, r0
   25ca4:	9d00      	ldr	r5, [sp, #0]
   25ca6:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   25caa:	9202      	str	r2, [sp, #8]
   25cac:	ea8c 0c03 	eor.w	ip, ip, r3
   25cb0:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   25cb4:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   25cb8:	2d10      	cmp	r5, #16
   25cba:	ea80 0003 	eor.w	r0, r0, r3
   25cbe:	462b      	mov	r3, r5
   25cc0:	bf8c      	ite	hi
   25cc2:	3b10      	subhi	r3, #16
   25cc4:	1b6b      	subls	r3, r5, r5
   25cc6:	9300      	str	r3, [sp, #0]
   25cc8:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   25ccc:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   25cd0:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   25cd4:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   25cd8:	4061      	eors	r1, r4
   25cda:	405f      	eors	r7, r3
   25cdc:	2400      	movs	r4, #0
   25cde:	406a      	eors	r2, r5
   25ce0:	ea8b 0b06 	eor.w	fp, fp, r6
   25ce4:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   25ce8:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   25cec:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   25cf0:	9601      	str	r6, [sp, #4]
   25cf2:	4626      	mov	r6, r4
   25cf4:	406b      	eors	r3, r5
   25cf6:	f36b 0607 	bfi	r6, fp, #0, #8
   25cfa:	4625      	mov	r5, r4
   25cfc:	f367 260f 	bfi	r6, r7, #8, #8
   25d00:	462f      	mov	r7, r5
   25d02:	f361 0707 	bfi	r7, r1, #0, #8
   25d06:	9902      	ldr	r1, [sp, #8]
   25d08:	f361 0507 	bfi	r5, r1, #0, #8
   25d0c:	f362 250f 	bfi	r5, r2, #8, #8
   25d10:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   25d14:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   25d18:	f363 270f 	bfi	r7, r3, #8, #8
   25d1c:	ea82 0909 	eor.w	r9, r2, r9
   25d20:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   25d24:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   25d28:	ea83 0808 	eor.w	r8, r3, r8
   25d2c:	404a      	eors	r2, r1
   25d2e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   25d32:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   25d36:	f36e 0407 	bfi	r4, lr, #0, #8
   25d3a:	404b      	eors	r3, r1
   25d3c:	f368 4717 	bfi	r7, r8, #16, #8
   25d40:	f36c 240f 	bfi	r4, ip, #8, #8
   25d44:	f363 671f 	bfi	r7, r3, #24, #8
   25d48:	9b03      	ldr	r3, [sp, #12]
   25d4a:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   25d4e:	f8dd e004 	ldr.w	lr, [sp, #4]
   25d52:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   25d56:	ea8c 0c0e 	eor.w	ip, ip, lr
   25d5a:	f36c 4617 	bfi	r6, ip, #16, #8
   25d5e:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   25d62:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   25d66:	ea8c 0c08 	eor.w	ip, ip, r8
   25d6a:	f36c 661f 	bfi	r6, ip, #24, #8
   25d6e:	f369 4517 	bfi	r5, r9, #16, #8
   25d72:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   25d76:	960b      	str	r6, [sp, #44]	; 0x2c
   25d78:	f362 651f 	bfi	r5, r2, #24, #8
   25d7c:	f360 4417 	bfi	r4, r0, #16, #8
   25d80:	9508      	str	r5, [sp, #32]
   25d82:	ea8c 050e 	eor.w	r5, ip, lr
   25d86:	f365 641f 	bfi	r4, r5, #24, #8
   25d8a:	461a      	mov	r2, r3
   25d8c:	2101      	movs	r1, #1
   25d8e:	a819      	add	r0, sp, #100	; 0x64
   25d90:	f10a 0a10 	add.w	sl, sl, #16
   25d94:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   25d98:	f001 f92e 	bl	26ff8 <cc_mbedtls_aes_crypt_ecb>
   25d9c:	2800      	cmp	r0, #0
   25d9e:	d168      	bne.n	25e72 <block_cipher_df+0x296>
   25da0:	9b00      	ldr	r3, [sp, #0]
   25da2:	2b00      	cmp	r3, #0
   25da4:	f47f af65 	bne.w	25c72 <block_cipher_df+0x96>
   25da8:	9c07      	ldr	r4, [sp, #28]
   25daa:	f8dd 900c 	ldr.w	r9, [sp, #12]
   25dae:	4620      	mov	r0, r4
   25db0:	2210      	movs	r2, #16
   25db2:	3410      	adds	r4, #16
   25db4:	4649      	mov	r1, r9
   25db6:	9407      	str	r4, [sp, #28]
   25db8:	f006 f9c9 	bl	2c14e <memcpy>
   25dbc:	4a30      	ldr	r2, [pc, #192]	; (25e80 <block_cipher_df+0x2a4>)
   25dbe:	78d3      	ldrb	r3, [r2, #3]
   25dc0:	3301      	adds	r3, #1
   25dc2:	70d3      	strb	r3, [r2, #3]
   25dc4:	ab19      	add	r3, sp, #100	; 0x64
   25dc6:	429c      	cmp	r4, r3
   25dc8:	f47f af48 	bne.w	25c5c <block_cipher_df+0x80>
   25dcc:	9904      	ldr	r1, [sp, #16]
   25dce:	2280      	movs	r2, #128	; 0x80
   25dd0:	4618      	mov	r0, r3
   25dd2:	f001 f8f7 	bl	26fc4 <cc_mbedtls_aes_setkey_enc>
   25dd6:	46c8      	mov	r8, r9
   25dd8:	4605      	mov	r5, r0
   25dda:	bb70      	cbnz	r0, 25e3a <block_cipher_df+0x25e>
   25ddc:	9c05      	ldr	r4, [sp, #20]
   25dde:	f104 0620 	add.w	r6, r4, #32
   25de2:	ab15      	add	r3, sp, #84	; 0x54
   25de4:	461a      	mov	r2, r3
   25de6:	2101      	movs	r1, #1
   25de8:	a819      	add	r0, sp, #100	; 0x64
   25dea:	f001 f905 	bl	26ff8 <cc_mbedtls_aes_crypt_ecb>
   25dee:	2210      	movs	r2, #16
   25df0:	4605      	mov	r5, r0
   25df2:	bb10      	cbnz	r0, 25e3a <block_cipher_df+0x25e>
   25df4:	4620      	mov	r0, r4
   25df6:	a915      	add	r1, sp, #84	; 0x54
   25df8:	3410      	adds	r4, #16
   25dfa:	f006 f9a8 	bl	2c14e <memcpy>
   25dfe:	42b4      	cmp	r4, r6
   25e00:	d1ef      	bne.n	25de2 <block_cipher_df+0x206>
   25e02:	a819      	add	r0, sp, #100	; 0x64
   25e04:	f001 f8d8 	bl	26fb8 <cc_mbedtls_aes_free>
   25e08:	481d      	ldr	r0, [pc, #116]	; (25e80 <block_cipher_df+0x2a4>)
   25e0a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   25e0e:	f7ff fedb 	bl	25bc8 <mbedtls_platform_zeroize>
   25e12:	9804      	ldr	r0, [sp, #16]
   25e14:	2120      	movs	r1, #32
   25e16:	f7ff fed7 	bl	25bc8 <mbedtls_platform_zeroize>
   25e1a:	a80d      	add	r0, sp, #52	; 0x34
   25e1c:	2110      	movs	r1, #16
   25e1e:	f7ff fed3 	bl	25bc8 <mbedtls_platform_zeroize>
   25e22:	4640      	mov	r0, r8
   25e24:	2110      	movs	r1, #16
   25e26:	f7ff fecf 	bl	25bc8 <mbedtls_platform_zeroize>
   25e2a:	4628      	mov	r0, r5
   25e2c:	b037      	add	sp, #220	; 0xdc
   25e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e32:	ab11      	add	r3, sp, #68	; 0x44
   25e34:	9304      	str	r3, [sp, #16]
   25e36:	f10d 0820 	add.w	r8, sp, #32
   25e3a:	a819      	add	r0, sp, #100	; 0x64
   25e3c:	f001 f8bc 	bl	26fb8 <cc_mbedtls_aes_free>
   25e40:	480f      	ldr	r0, [pc, #60]	; (25e80 <block_cipher_df+0x2a4>)
   25e42:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   25e46:	f7ff febf 	bl	25bc8 <mbedtls_platform_zeroize>
   25e4a:	9804      	ldr	r0, [sp, #16]
   25e4c:	2120      	movs	r1, #32
   25e4e:	f7ff febb 	bl	25bc8 <mbedtls_platform_zeroize>
   25e52:	a80d      	add	r0, sp, #52	; 0x34
   25e54:	2110      	movs	r1, #16
   25e56:	f7ff feb7 	bl	25bc8 <mbedtls_platform_zeroize>
   25e5a:	4640      	mov	r0, r8
   25e5c:	2110      	movs	r1, #16
   25e5e:	f7ff feb3 	bl	25bc8 <mbedtls_platform_zeroize>
   25e62:	9805      	ldr	r0, [sp, #20]
   25e64:	2120      	movs	r1, #32
   25e66:	f7ff feaf 	bl	25bc8 <mbedtls_platform_zeroize>
   25e6a:	4628      	mov	r0, r5
   25e6c:	b037      	add	sp, #220	; 0xdc
   25e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e72:	f8dd 800c 	ldr.w	r8, [sp, #12]
   25e76:	4605      	mov	r5, r0
   25e78:	e7df      	b.n	25e3a <block_cipher_df+0x25e>
   25e7a:	f06f 0537 	mvn.w	r5, #55	; 0x37
   25e7e:	e7f4      	b.n	25e6a <block_cipher_df+0x28e>
   25e80:	20002dd4 	.word	0x20002dd4
   25e84:	03020100 	.word	0x03020100
   25e88:	20002de4 	.word	0x20002de4

00025e8c <ctr_drbg_update_internal>:
   25e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e90:	b088      	sub	sp, #32
   25e92:	4604      	mov	r4, r0
   25e94:	460d      	mov	r5, r1
   25e96:	2220      	movs	r2, #32
   25e98:	2100      	movs	r1, #0
   25e9a:	4668      	mov	r0, sp
   25e9c:	f006 f992 	bl	2c1c4 <memset>
   25ea0:	f104 0620 	add.w	r6, r4, #32
   25ea4:	466f      	mov	r7, sp
   25ea6:	7be2      	ldrb	r2, [r4, #15]
   25ea8:	3201      	adds	r2, #1
   25eaa:	b2d2      	uxtb	r2, r2
   25eac:	73e2      	strb	r2, [r4, #15]
   25eae:	2a00      	cmp	r2, #0
   25eb0:	d14d      	bne.n	25f4e <ctr_drbg_update_internal+0xc2>
   25eb2:	7ba2      	ldrb	r2, [r4, #14]
   25eb4:	3201      	adds	r2, #1
   25eb6:	b2d2      	uxtb	r2, r2
   25eb8:	73a2      	strb	r2, [r4, #14]
   25eba:	2a00      	cmp	r2, #0
   25ebc:	d147      	bne.n	25f4e <ctr_drbg_update_internal+0xc2>
   25ebe:	7b63      	ldrb	r3, [r4, #13]
   25ec0:	3301      	adds	r3, #1
   25ec2:	b2db      	uxtb	r3, r3
   25ec4:	7363      	strb	r3, [r4, #13]
   25ec6:	2b00      	cmp	r3, #0
   25ec8:	d141      	bne.n	25f4e <ctr_drbg_update_internal+0xc2>
   25eca:	7b23      	ldrb	r3, [r4, #12]
   25ecc:	3301      	adds	r3, #1
   25ece:	b2db      	uxtb	r3, r3
   25ed0:	7323      	strb	r3, [r4, #12]
   25ed2:	2b00      	cmp	r3, #0
   25ed4:	d13b      	bne.n	25f4e <ctr_drbg_update_internal+0xc2>
   25ed6:	7ae3      	ldrb	r3, [r4, #11]
   25ed8:	3301      	adds	r3, #1
   25eda:	b2db      	uxtb	r3, r3
   25edc:	72e3      	strb	r3, [r4, #11]
   25ede:	2b00      	cmp	r3, #0
   25ee0:	d135      	bne.n	25f4e <ctr_drbg_update_internal+0xc2>
   25ee2:	7aa3      	ldrb	r3, [r4, #10]
   25ee4:	3301      	adds	r3, #1
   25ee6:	b2db      	uxtb	r3, r3
   25ee8:	72a3      	strb	r3, [r4, #10]
   25eea:	2b00      	cmp	r3, #0
   25eec:	d12f      	bne.n	25f4e <ctr_drbg_update_internal+0xc2>
   25eee:	7a63      	ldrb	r3, [r4, #9]
   25ef0:	3301      	adds	r3, #1
   25ef2:	b2db      	uxtb	r3, r3
   25ef4:	7263      	strb	r3, [r4, #9]
   25ef6:	bb53      	cbnz	r3, 25f4e <ctr_drbg_update_internal+0xc2>
   25ef8:	7a23      	ldrb	r3, [r4, #8]
   25efa:	3301      	adds	r3, #1
   25efc:	b2db      	uxtb	r3, r3
   25efe:	7223      	strb	r3, [r4, #8]
   25f00:	bb2b      	cbnz	r3, 25f4e <ctr_drbg_update_internal+0xc2>
   25f02:	79e3      	ldrb	r3, [r4, #7]
   25f04:	3301      	adds	r3, #1
   25f06:	b2db      	uxtb	r3, r3
   25f08:	71e3      	strb	r3, [r4, #7]
   25f0a:	bb03      	cbnz	r3, 25f4e <ctr_drbg_update_internal+0xc2>
   25f0c:	79a3      	ldrb	r3, [r4, #6]
   25f0e:	3301      	adds	r3, #1
   25f10:	b2db      	uxtb	r3, r3
   25f12:	71a3      	strb	r3, [r4, #6]
   25f14:	b9db      	cbnz	r3, 25f4e <ctr_drbg_update_internal+0xc2>
   25f16:	7963      	ldrb	r3, [r4, #5]
   25f18:	3301      	adds	r3, #1
   25f1a:	b2db      	uxtb	r3, r3
   25f1c:	7163      	strb	r3, [r4, #5]
   25f1e:	b9b3      	cbnz	r3, 25f4e <ctr_drbg_update_internal+0xc2>
   25f20:	7923      	ldrb	r3, [r4, #4]
   25f22:	3301      	adds	r3, #1
   25f24:	b2db      	uxtb	r3, r3
   25f26:	7123      	strb	r3, [r4, #4]
   25f28:	b98b      	cbnz	r3, 25f4e <ctr_drbg_update_internal+0xc2>
   25f2a:	78e3      	ldrb	r3, [r4, #3]
   25f2c:	3301      	adds	r3, #1
   25f2e:	b2db      	uxtb	r3, r3
   25f30:	70e3      	strb	r3, [r4, #3]
   25f32:	b963      	cbnz	r3, 25f4e <ctr_drbg_update_internal+0xc2>
   25f34:	78a3      	ldrb	r3, [r4, #2]
   25f36:	3301      	adds	r3, #1
   25f38:	b2db      	uxtb	r3, r3
   25f3a:	70a3      	strb	r3, [r4, #2]
   25f3c:	b93b      	cbnz	r3, 25f4e <ctr_drbg_update_internal+0xc2>
   25f3e:	7863      	ldrb	r3, [r4, #1]
   25f40:	3301      	adds	r3, #1
   25f42:	b2db      	uxtb	r3, r3
   25f44:	7063      	strb	r3, [r4, #1]
   25f46:	b913      	cbnz	r3, 25f4e <ctr_drbg_update_internal+0xc2>
   25f48:	7823      	ldrb	r3, [r4, #0]
   25f4a:	3301      	adds	r3, #1
   25f4c:	7023      	strb	r3, [r4, #0]
   25f4e:	463b      	mov	r3, r7
   25f50:	4622      	mov	r2, r4
   25f52:	2101      	movs	r1, #1
   25f54:	4630      	mov	r0, r6
   25f56:	f001 f84f 	bl	26ff8 <cc_mbedtls_aes_crypt_ecb>
   25f5a:	4680      	mov	r8, r0
   25f5c:	bb50      	cbnz	r0, 25fb4 <ctr_drbg_update_internal+0x128>
   25f5e:	3710      	adds	r7, #16
   25f60:	ab08      	add	r3, sp, #32
   25f62:	429f      	cmp	r7, r3
   25f64:	d19f      	bne.n	25ea6 <ctr_drbg_update_internal+0x1a>
   25f66:	9a00      	ldr	r2, [sp, #0]
   25f68:	682b      	ldr	r3, [r5, #0]
   25f6a:	9906      	ldr	r1, [sp, #24]
   25f6c:	4053      	eors	r3, r2
   25f6e:	9300      	str	r3, [sp, #0]
   25f70:	9a01      	ldr	r2, [sp, #4]
   25f72:	686b      	ldr	r3, [r5, #4]
   25f74:	4053      	eors	r3, r2
   25f76:	9301      	str	r3, [sp, #4]
   25f78:	9a02      	ldr	r2, [sp, #8]
   25f7a:	68ab      	ldr	r3, [r5, #8]
   25f7c:	4053      	eors	r3, r2
   25f7e:	9302      	str	r3, [sp, #8]
   25f80:	9a03      	ldr	r2, [sp, #12]
   25f82:	68eb      	ldr	r3, [r5, #12]
   25f84:	4053      	eors	r3, r2
   25f86:	9303      	str	r3, [sp, #12]
   25f88:	9a04      	ldr	r2, [sp, #16]
   25f8a:	692b      	ldr	r3, [r5, #16]
   25f8c:	4053      	eors	r3, r2
   25f8e:	9304      	str	r3, [sp, #16]
   25f90:	9a05      	ldr	r2, [sp, #20]
   25f92:	696b      	ldr	r3, [r5, #20]
   25f94:	4053      	eors	r3, r2
   25f96:	69aa      	ldr	r2, [r5, #24]
   25f98:	9305      	str	r3, [sp, #20]
   25f9a:	404a      	eors	r2, r1
   25f9c:	69eb      	ldr	r3, [r5, #28]
   25f9e:	9206      	str	r2, [sp, #24]
   25fa0:	9a07      	ldr	r2, [sp, #28]
   25fa2:	4630      	mov	r0, r6
   25fa4:	4053      	eors	r3, r2
   25fa6:	4669      	mov	r1, sp
   25fa8:	2280      	movs	r2, #128	; 0x80
   25faa:	9307      	str	r3, [sp, #28]
   25fac:	f001 f80a 	bl	26fc4 <cc_mbedtls_aes_setkey_enc>
   25fb0:	4680      	mov	r8, r0
   25fb2:	b138      	cbz	r0, 25fc4 <ctr_drbg_update_internal+0x138>
   25fb4:	4668      	mov	r0, sp
   25fb6:	2120      	movs	r1, #32
   25fb8:	f7ff fe06 	bl	25bc8 <mbedtls_platform_zeroize>
   25fbc:	4640      	mov	r0, r8
   25fbe:	b008      	add	sp, #32
   25fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25fc4:	2210      	movs	r2, #16
   25fc6:	eb0d 0102 	add.w	r1, sp, r2
   25fca:	4620      	mov	r0, r4
   25fcc:	f006 f8bf 	bl	2c14e <memcpy>
   25fd0:	e7f0      	b.n	25fb4 <ctr_drbg_update_internal+0x128>
   25fd2:	bf00      	nop

00025fd4 <mbedtls_ctr_drbg_reseed_internal>:
   25fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25fd8:	4604      	mov	r4, r0
   25fda:	6980      	ldr	r0, [r0, #24]
   25fdc:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   25fe0:	d852      	bhi.n	26088 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   25fe2:	461d      	mov	r5, r3
   25fe4:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   25fe8:	42ab      	cmp	r3, r5
   25fea:	d34d      	bcc.n	26088 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   25fec:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   25ff0:	1a18      	subs	r0, r3, r0
   25ff2:	4290      	cmp	r0, r2
   25ff4:	4616      	mov	r6, r2
   25ff6:	d347      	bcc.n	26088 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   25ff8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 26094 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   25ffc:	f44f 72c0 	mov.w	r2, #384	; 0x180
   26000:	460f      	mov	r7, r1
   26002:	4648      	mov	r0, r9
   26004:	2100      	movs	r1, #0
   26006:	f006 f8dd 	bl	2c1c4 <memset>
   2600a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2600e:	69a2      	ldr	r2, [r4, #24]
   26010:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   26014:	4649      	mov	r1, r9
   26016:	4798      	blx	r3
   26018:	2800      	cmp	r0, #0
   2601a:	d138      	bne.n	2608e <mbedtls_ctr_drbg_reseed_internal+0xba>
   2601c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   26020:	b13d      	cbz	r5, 26032 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   26022:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   26026:	462a      	mov	r2, r5
   26028:	eb09 0108 	add.w	r1, r9, r8
   2602c:	4798      	blx	r3
   2602e:	bb70      	cbnz	r0, 2608e <mbedtls_ctr_drbg_reseed_internal+0xba>
   26030:	44a8      	add	r8, r5
   26032:	b107      	cbz	r7, 26036 <mbedtls_ctr_drbg_reseed_internal+0x62>
   26034:	b9c6      	cbnz	r6, 26068 <mbedtls_ctr_drbg_reseed_internal+0x94>
   26036:	4917      	ldr	r1, [pc, #92]	; (26094 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   26038:	4642      	mov	r2, r8
   2603a:	4608      	mov	r0, r1
   2603c:	f7ff fdce 	bl	25bdc <block_cipher_df>
   26040:	4605      	mov	r5, r0
   26042:	b138      	cbz	r0, 26054 <mbedtls_ctr_drbg_reseed_internal+0x80>
   26044:	4813      	ldr	r0, [pc, #76]	; (26094 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   26046:	f44f 71c0 	mov.w	r1, #384	; 0x180
   2604a:	f7ff fdbd 	bl	25bc8 <mbedtls_platform_zeroize>
   2604e:	4628      	mov	r0, r5
   26050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26054:	490f      	ldr	r1, [pc, #60]	; (26094 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   26056:	4620      	mov	r0, r4
   26058:	f7ff ff18 	bl	25e8c <ctr_drbg_update_internal>
   2605c:	4605      	mov	r5, r0
   2605e:	2800      	cmp	r0, #0
   26060:	d1f0      	bne.n	26044 <mbedtls_ctr_drbg_reseed_internal+0x70>
   26062:	2301      	movs	r3, #1
   26064:	6123      	str	r3, [r4, #16]
   26066:	e7ed      	b.n	26044 <mbedtls_ctr_drbg_reseed_internal+0x70>
   26068:	eb09 0008 	add.w	r0, r9, r8
   2606c:	4639      	mov	r1, r7
   2606e:	4632      	mov	r2, r6
   26070:	f006 f86d 	bl	2c14e <memcpy>
   26074:	4907      	ldr	r1, [pc, #28]	; (26094 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   26076:	44b0      	add	r8, r6
   26078:	4642      	mov	r2, r8
   2607a:	4608      	mov	r0, r1
   2607c:	f7ff fdae 	bl	25bdc <block_cipher_df>
   26080:	4605      	mov	r5, r0
   26082:	2800      	cmp	r0, #0
   26084:	d1de      	bne.n	26044 <mbedtls_ctr_drbg_reseed_internal+0x70>
   26086:	e7e5      	b.n	26054 <mbedtls_ctr_drbg_reseed_internal+0x80>
   26088:	f06f 0537 	mvn.w	r5, #55	; 0x37
   2608c:	e7df      	b.n	2604e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   2608e:	f06f 0533 	mvn.w	r5, #51	; 0x33
   26092:	e7dc      	b.n	2604e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   26094:	20002f74 	.word	0x20002f74

00026098 <cc_mbedtls_ctr_drbg_init>:
   26098:	b510      	push	{r4, lr}
   2609a:	22a4      	movs	r2, #164	; 0xa4
   2609c:	4604      	mov	r4, r0
   2609e:	2100      	movs	r1, #0
   260a0:	f006 f890 	bl	2c1c4 <memset>
   260a4:	4b06      	ldr	r3, [pc, #24]	; (260c0 <cc_mbedtls_ctr_drbg_init+0x28>)
   260a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   260aa:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   260ae:	6121      	str	r1, [r4, #16]
   260b0:	61e2      	str	r2, [r4, #28]
   260b2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   260b6:	681b      	ldr	r3, [r3, #0]
   260b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   260bc:	4718      	bx	r3
   260be:	bf00      	nop
   260c0:	200008d0 	.word	0x200008d0

000260c4 <cc_mbedtls_ctr_drbg_seed>:
   260c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   260c8:	b085      	sub	sp, #20
   260ca:	4605      	mov	r5, r0
   260cc:	460f      	mov	r7, r1
   260ce:	4616      	mov	r6, r2
   260d0:	2100      	movs	r1, #0
   260d2:	2210      	movs	r2, #16
   260d4:	4668      	mov	r0, sp
   260d6:	4699      	mov	r9, r3
   260d8:	f006 f874 	bl	2c1c4 <memset>
   260dc:	4b1e      	ldr	r3, [pc, #120]	; (26158 <cc_mbedtls_ctr_drbg_seed+0x94>)
   260de:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   260e2:	681b      	ldr	r3, [r3, #0]
   260e4:	4640      	mov	r0, r8
   260e6:	4798      	blx	r3
   260e8:	b120      	cbz	r0, 260f4 <cc_mbedtls_ctr_drbg_seed+0x30>
   260ea:	4604      	mov	r4, r0
   260ec:	4620      	mov	r0, r4
   260ee:	b005      	add	sp, #20
   260f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   260f4:	f105 0420 	add.w	r4, r5, #32
   260f8:	4620      	mov	r0, r4
   260fa:	f000 ff4d 	bl	26f98 <cc_mbedtls_aes_init>
   260fe:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   26102:	69ae      	ldr	r6, [r5, #24]
   26104:	692b      	ldr	r3, [r5, #16]
   26106:	b9ee      	cbnz	r6, 26144 <cc_mbedtls_ctr_drbg_seed+0x80>
   26108:	2220      	movs	r2, #32
   2610a:	2b00      	cmp	r3, #0
   2610c:	61aa      	str	r2, [r5, #24]
   2610e:	db20      	blt.n	26152 <cc_mbedtls_ctr_drbg_seed+0x8e>
   26110:	461e      	mov	r6, r3
   26112:	4620      	mov	r0, r4
   26114:	4669      	mov	r1, sp
   26116:	2280      	movs	r2, #128	; 0x80
   26118:	f000 ff54 	bl	26fc4 <cc_mbedtls_aes_setkey_enc>
   2611c:	4604      	mov	r4, r0
   2611e:	b930      	cbnz	r0, 2612e <cc_mbedtls_ctr_drbg_seed+0x6a>
   26120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   26122:	4633      	mov	r3, r6
   26124:	4649      	mov	r1, r9
   26126:	4628      	mov	r0, r5
   26128:	f7ff ff54 	bl	25fd4 <mbedtls_ctr_drbg_reseed_internal>
   2612c:	4604      	mov	r4, r0
   2612e:	4b0b      	ldr	r3, [pc, #44]	; (2615c <cc_mbedtls_ctr_drbg_seed+0x98>)
   26130:	4640      	mov	r0, r8
   26132:	681b      	ldr	r3, [r3, #0]
   26134:	4798      	blx	r3
   26136:	2800      	cmp	r0, #0
   26138:	bf18      	it	ne
   2613a:	4604      	movne	r4, r0
   2613c:	4620      	mov	r0, r4
   2613e:	b005      	add	sp, #20
   26140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26144:	2b00      	cmp	r3, #0
   26146:	dae3      	bge.n	26110 <cc_mbedtls_ctr_drbg_seed+0x4c>
   26148:	2e17      	cmp	r6, #23
   2614a:	d802      	bhi.n	26152 <cc_mbedtls_ctr_drbg_seed+0x8e>
   2614c:	3601      	adds	r6, #1
   2614e:	0876      	lsrs	r6, r6, #1
   26150:	e7df      	b.n	26112 <cc_mbedtls_ctr_drbg_seed+0x4e>
   26152:	2600      	movs	r6, #0
   26154:	e7dd      	b.n	26112 <cc_mbedtls_ctr_drbg_seed+0x4e>
   26156:	bf00      	nop
   26158:	200008d4 	.word	0x200008d4
   2615c:	200008d8 	.word	0x200008d8

00026160 <cc_mbedtls_ctr_drbg_random_with_add>:
   26160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26164:	b08d      	sub	sp, #52	; 0x34
   26166:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   2616a:	9f16      	ldr	r7, [sp, #88]	; 0x58
   2616c:	f200 80e3 	bhi.w	26336 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   26170:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   26174:	f200 80dc 	bhi.w	26330 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   26178:	4604      	mov	r4, r0
   2617a:	4615      	mov	r5, r2
   2617c:	460e      	mov	r6, r1
   2617e:	2220      	movs	r2, #32
   26180:	2100      	movs	r1, #0
   26182:	a804      	add	r0, sp, #16
   26184:	4698      	mov	r8, r3
   26186:	f006 f81d 	bl	2c1c4 <memset>
   2618a:	4b6c      	ldr	r3, [pc, #432]	; (2633c <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   2618c:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   26190:	681b      	ldr	r3, [r3, #0]
   26192:	4648      	mov	r0, r9
   26194:	4798      	blx	r3
   26196:	4683      	mov	fp, r0
   26198:	2800      	cmp	r0, #0
   2619a:	f040 8092 	bne.w	262c2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2619e:	6922      	ldr	r2, [r4, #16]
   261a0:	69e3      	ldr	r3, [r4, #28]
   261a2:	429a      	cmp	r2, r3
   261a4:	f300 8091 	bgt.w	262ca <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   261a8:	6963      	ldr	r3, [r4, #20]
   261aa:	2b00      	cmp	r3, #0
   261ac:	f040 808d 	bne.w	262ca <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   261b0:	2f00      	cmp	r7, #0
   261b2:	f040 80a9 	bne.w	26308 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   261b6:	f8df a188 	ldr.w	sl, [pc, #392]	; 26340 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   261ba:	466f      	mov	r7, sp
   261bc:	2d00      	cmp	r5, #0
   261be:	f000 8098 	beq.w	262f2 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   261c2:	f104 0820 	add.w	r8, r4, #32
   261c6:	466f      	mov	r7, sp
   261c8:	e00e      	b.n	261e8 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   261ca:	2d10      	cmp	r5, #16
   261cc:	46ab      	mov	fp, r5
   261ce:	bf28      	it	cs
   261d0:	f04f 0b10 	movcs.w	fp, #16
   261d4:	4630      	mov	r0, r6
   261d6:	465a      	mov	r2, fp
   261d8:	4639      	mov	r1, r7
   261da:	f005 ffb8 	bl	2c14e <memcpy>
   261de:	ebb5 050b 	subs.w	r5, r5, fp
   261e2:	445e      	add	r6, fp
   261e4:	f000 8085 	beq.w	262f2 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   261e8:	7be3      	ldrb	r3, [r4, #15]
   261ea:	3301      	adds	r3, #1
   261ec:	b2db      	uxtb	r3, r3
   261ee:	73e3      	strb	r3, [r4, #15]
   261f0:	2b00      	cmp	r3, #0
   261f2:	d14d      	bne.n	26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   261f4:	7ba3      	ldrb	r3, [r4, #14]
   261f6:	3301      	adds	r3, #1
   261f8:	b2db      	uxtb	r3, r3
   261fa:	73a3      	strb	r3, [r4, #14]
   261fc:	2b00      	cmp	r3, #0
   261fe:	d147      	bne.n	26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26200:	7b63      	ldrb	r3, [r4, #13]
   26202:	3301      	adds	r3, #1
   26204:	b2db      	uxtb	r3, r3
   26206:	7363      	strb	r3, [r4, #13]
   26208:	2b00      	cmp	r3, #0
   2620a:	d141      	bne.n	26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2620c:	7b23      	ldrb	r3, [r4, #12]
   2620e:	3301      	adds	r3, #1
   26210:	b2db      	uxtb	r3, r3
   26212:	7323      	strb	r3, [r4, #12]
   26214:	2b00      	cmp	r3, #0
   26216:	d13b      	bne.n	26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26218:	7ae3      	ldrb	r3, [r4, #11]
   2621a:	3301      	adds	r3, #1
   2621c:	b2db      	uxtb	r3, r3
   2621e:	72e3      	strb	r3, [r4, #11]
   26220:	2b00      	cmp	r3, #0
   26222:	d135      	bne.n	26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26224:	7aa3      	ldrb	r3, [r4, #10]
   26226:	3301      	adds	r3, #1
   26228:	b2db      	uxtb	r3, r3
   2622a:	72a3      	strb	r3, [r4, #10]
   2622c:	2b00      	cmp	r3, #0
   2622e:	d12f      	bne.n	26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26230:	7a63      	ldrb	r3, [r4, #9]
   26232:	3301      	adds	r3, #1
   26234:	b2db      	uxtb	r3, r3
   26236:	7263      	strb	r3, [r4, #9]
   26238:	bb53      	cbnz	r3, 26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2623a:	7a23      	ldrb	r3, [r4, #8]
   2623c:	3301      	adds	r3, #1
   2623e:	b2db      	uxtb	r3, r3
   26240:	7223      	strb	r3, [r4, #8]
   26242:	bb2b      	cbnz	r3, 26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26244:	79e3      	ldrb	r3, [r4, #7]
   26246:	3301      	adds	r3, #1
   26248:	b2db      	uxtb	r3, r3
   2624a:	71e3      	strb	r3, [r4, #7]
   2624c:	bb03      	cbnz	r3, 26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2624e:	79a3      	ldrb	r3, [r4, #6]
   26250:	3301      	adds	r3, #1
   26252:	b2db      	uxtb	r3, r3
   26254:	71a3      	strb	r3, [r4, #6]
   26256:	b9db      	cbnz	r3, 26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26258:	7963      	ldrb	r3, [r4, #5]
   2625a:	3301      	adds	r3, #1
   2625c:	b2db      	uxtb	r3, r3
   2625e:	7163      	strb	r3, [r4, #5]
   26260:	b9b3      	cbnz	r3, 26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26262:	7923      	ldrb	r3, [r4, #4]
   26264:	3301      	adds	r3, #1
   26266:	b2db      	uxtb	r3, r3
   26268:	7123      	strb	r3, [r4, #4]
   2626a:	b98b      	cbnz	r3, 26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2626c:	78e3      	ldrb	r3, [r4, #3]
   2626e:	3301      	adds	r3, #1
   26270:	b2db      	uxtb	r3, r3
   26272:	70e3      	strb	r3, [r4, #3]
   26274:	b963      	cbnz	r3, 26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26276:	78a3      	ldrb	r3, [r4, #2]
   26278:	3301      	adds	r3, #1
   2627a:	b2db      	uxtb	r3, r3
   2627c:	70a3      	strb	r3, [r4, #2]
   2627e:	b93b      	cbnz	r3, 26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   26280:	7863      	ldrb	r3, [r4, #1]
   26282:	3301      	adds	r3, #1
   26284:	b2db      	uxtb	r3, r3
   26286:	7063      	strb	r3, [r4, #1]
   26288:	b913      	cbnz	r3, 26290 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2628a:	7823      	ldrb	r3, [r4, #0]
   2628c:	3301      	adds	r3, #1
   2628e:	7023      	strb	r3, [r4, #0]
   26290:	463b      	mov	r3, r7
   26292:	4622      	mov	r2, r4
   26294:	2101      	movs	r1, #1
   26296:	4640      	mov	r0, r8
   26298:	f000 feae 	bl	26ff8 <cc_mbedtls_aes_crypt_ecb>
   2629c:	4683      	mov	fp, r0
   2629e:	2800      	cmp	r0, #0
   262a0:	d093      	beq.n	261ca <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   262a2:	f8da 3000 	ldr.w	r3, [sl]
   262a6:	4648      	mov	r0, r9
   262a8:	4798      	blx	r3
   262aa:	2120      	movs	r1, #32
   262ac:	4603      	mov	r3, r0
   262ae:	a804      	add	r0, sp, #16
   262b0:	2b00      	cmp	r3, #0
   262b2:	bf18      	it	ne
   262b4:	469b      	movne	fp, r3
   262b6:	f7ff fc87 	bl	25bc8 <mbedtls_platform_zeroize>
   262ba:	2110      	movs	r1, #16
   262bc:	4638      	mov	r0, r7
   262be:	f7ff fc83 	bl	25bc8 <mbedtls_platform_zeroize>
   262c2:	4658      	mov	r0, fp
   262c4:	b00d      	add	sp, #52	; 0x34
   262c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262ca:	463a      	mov	r2, r7
   262cc:	4641      	mov	r1, r8
   262ce:	2300      	movs	r3, #0
   262d0:	4620      	mov	r0, r4
   262d2:	f7ff fe7f 	bl	25fd4 <mbedtls_ctr_drbg_reseed_internal>
   262d6:	f8df a068 	ldr.w	sl, [pc, #104]	; 26340 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   262da:	2800      	cmp	r0, #0
   262dc:	f43f af6d 	beq.w	261ba <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   262e0:	f8da 3000 	ldr.w	r3, [sl]
   262e4:	4648      	mov	r0, r9
   262e6:	4798      	blx	r3
   262e8:	4683      	mov	fp, r0
   262ea:	2800      	cmp	r0, #0
   262ec:	f43f af65 	beq.w	261ba <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   262f0:	e7e7      	b.n	262c2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   262f2:	a904      	add	r1, sp, #16
   262f4:	4620      	mov	r0, r4
   262f6:	f7ff fdc9 	bl	25e8c <ctr_drbg_update_internal>
   262fa:	4683      	mov	fp, r0
   262fc:	2800      	cmp	r0, #0
   262fe:	d1d0      	bne.n	262a2 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   26300:	6923      	ldr	r3, [r4, #16]
   26302:	3301      	adds	r3, #1
   26304:	6123      	str	r3, [r4, #16]
   26306:	e7cc      	b.n	262a2 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   26308:	463a      	mov	r2, r7
   2630a:	4641      	mov	r1, r8
   2630c:	a804      	add	r0, sp, #16
   2630e:	f7ff fc65 	bl	25bdc <block_cipher_df>
   26312:	4683      	mov	fp, r0
   26314:	b118      	cbz	r0, 2631e <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   26316:	f8df a028 	ldr.w	sl, [pc, #40]	; 26340 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2631a:	466f      	mov	r7, sp
   2631c:	e7c1      	b.n	262a2 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   2631e:	a904      	add	r1, sp, #16
   26320:	4620      	mov	r0, r4
   26322:	f7ff fdb3 	bl	25e8c <ctr_drbg_update_internal>
   26326:	4683      	mov	fp, r0
   26328:	2800      	cmp	r0, #0
   2632a:	f43f af44 	beq.w	261b6 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   2632e:	e7f2      	b.n	26316 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   26330:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   26334:	e7c5      	b.n	262c2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   26336:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   2633a:	e7c2      	b.n	262c2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2633c:	200008d4 	.word	0x200008d4
   26340:	200008d8 	.word	0x200008d8

00026344 <entropy_update>:
   26344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26348:	2b20      	cmp	r3, #32
   2634a:	b08b      	sub	sp, #44	; 0x2c
   2634c:	461d      	mov	r5, r3
   2634e:	4606      	mov	r6, r0
   26350:	4688      	mov	r8, r1
   26352:	4691      	mov	r9, r2
   26354:	d826      	bhi.n	263a4 <entropy_update+0x60>
   26356:	b2db      	uxtb	r3, r3
   26358:	af02      	add	r7, sp, #8
   2635a:	f88d 8004 	strb.w	r8, [sp, #4]
   2635e:	46b0      	mov	r8, r6
   26360:	f88d 3005 	strb.w	r3, [sp, #5]
   26364:	f858 1b04 	ldr.w	r1, [r8], #4
   26368:	b921      	cbnz	r1, 26374 <entropy_update+0x30>
   2636a:	4640      	mov	r0, r8
   2636c:	f000 fe88 	bl	27080 <cc_mbedtls_sha256_starts>
   26370:	4604      	mov	r4, r0
   26372:	b940      	cbnz	r0, 26386 <entropy_update+0x42>
   26374:	2301      	movs	r3, #1
   26376:	6033      	str	r3, [r6, #0]
   26378:	2202      	movs	r2, #2
   2637a:	a901      	add	r1, sp, #4
   2637c:	4640      	mov	r0, r8
   2637e:	f000 fe93 	bl	270a8 <cc_mbedtls_sha256_update>
   26382:	4604      	mov	r4, r0
   26384:	b138      	cbz	r0, 26396 <entropy_update+0x52>
   26386:	4638      	mov	r0, r7
   26388:	2120      	movs	r1, #32
   2638a:	f7ff fc1d 	bl	25bc8 <mbedtls_platform_zeroize>
   2638e:	4620      	mov	r0, r4
   26390:	b00b      	add	sp, #44	; 0x2c
   26392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26396:	462a      	mov	r2, r5
   26398:	4649      	mov	r1, r9
   2639a:	4640      	mov	r0, r8
   2639c:	f000 fe84 	bl	270a8 <cc_mbedtls_sha256_update>
   263a0:	4604      	mov	r4, r0
   263a2:	e7f0      	b.n	26386 <entropy_update+0x42>
   263a4:	af02      	add	r7, sp, #8
   263a6:	4619      	mov	r1, r3
   263a8:	4610      	mov	r0, r2
   263aa:	2300      	movs	r3, #0
   263ac:	463a      	mov	r2, r7
   263ae:	f001 f803 	bl	273b8 <cc_mbedtls_sha256>
   263b2:	4604      	mov	r4, r0
   263b4:	2800      	cmp	r0, #0
   263b6:	d1e6      	bne.n	26386 <entropy_update+0x42>
   263b8:	2320      	movs	r3, #32
   263ba:	46b9      	mov	r9, r7
   263bc:	461d      	mov	r5, r3
   263be:	e7cc      	b.n	2635a <entropy_update+0x16>

000263c0 <entropy_gather_internal.part.0>:
   263c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   263c2:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   263c6:	b0a7      	sub	sp, #156	; 0x9c
   263c8:	2b00      	cmp	r3, #0
   263ca:	bfd8      	it	le
   263cc:	ae02      	addle	r6, sp, #8
   263ce:	dd2c      	ble.n	2642a <entropy_gather_internal.part.0+0x6a>
   263d0:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   263d4:	4605      	mov	r5, r0
   263d6:	2300      	movs	r3, #0
   263d8:	ae02      	add	r6, sp, #8
   263da:	9301      	str	r3, [sp, #4]
   263dc:	f1a4 0701 	sub.w	r7, r4, #1
   263e0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   263e4:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   263e8:	ab01      	add	r3, sp, #4
   263ea:	2290      	movs	r2, #144	; 0x90
   263ec:	4631      	mov	r1, r6
   263ee:	47a0      	blx	r4
   263f0:	fab7 f787 	clz	r7, r7
   263f4:	097f      	lsrs	r7, r7, #5
   263f6:	4604      	mov	r4, r0
   263f8:	b910      	cbnz	r0, 26400 <entropy_gather_internal.part.0+0x40>
   263fa:	9b01      	ldr	r3, [sp, #4]
   263fc:	b93b      	cbnz	r3, 2640e <entropy_gather_internal.part.0+0x4e>
   263fe:	b1a7      	cbz	r7, 2642a <entropy_gather_internal.part.0+0x6a>
   26400:	4630      	mov	r0, r6
   26402:	2190      	movs	r1, #144	; 0x90
   26404:	f7ff fbe0 	bl	25bc8 <mbedtls_platform_zeroize>
   26408:	4620      	mov	r0, r4
   2640a:	b027      	add	sp, #156	; 0x9c
   2640c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2640e:	4601      	mov	r1, r0
   26410:	4632      	mov	r2, r6
   26412:	4628      	mov	r0, r5
   26414:	f7ff ff96 	bl	26344 <entropy_update>
   26418:	b950      	cbnz	r0, 26430 <entropy_gather_internal.part.0+0x70>
   2641a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   2641e:	9a01      	ldr	r2, [sp, #4]
   26420:	4413      	add	r3, r2
   26422:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   26426:	2f00      	cmp	r7, #0
   26428:	d1ea      	bne.n	26400 <entropy_gather_internal.part.0+0x40>
   2642a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2642e:	e7e7      	b.n	26400 <entropy_gather_internal.part.0+0x40>
   26430:	4604      	mov	r4, r0
   26432:	4620      	mov	r0, r4
   26434:	b027      	add	sp, #156	; 0x9c
   26436:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026438 <cc_mbedtls_entropy_init>:
   26438:	b570      	push	{r4, r5, r6, lr}
   2643a:	2500      	movs	r5, #0
   2643c:	4604      	mov	r4, r0
   2643e:	2214      	movs	r2, #20
   26440:	4629      	mov	r1, r5
   26442:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   26446:	30fc      	adds	r0, #252	; 0xfc
   26448:	f005 febc 	bl	2c1c4 <memset>
   2644c:	4b16      	ldr	r3, [pc, #88]	; (264a8 <cc_mbedtls_entropy_init+0x70>)
   2644e:	f504 7688 	add.w	r6, r4, #272	; 0x110
   26452:	681b      	ldr	r3, [r3, #0]
   26454:	4630      	mov	r0, r6
   26456:	4798      	blx	r3
   26458:	4620      	mov	r0, r4
   2645a:	f840 5b04 	str.w	r5, [r0], #4
   2645e:	f000 fdf5 	bl	2704c <cc_mbedtls_sha256_init>
   26462:	4b12      	ldr	r3, [pc, #72]	; (264ac <cc_mbedtls_entropy_init+0x74>)
   26464:	4630      	mov	r0, r6
   26466:	681b      	ldr	r3, [r3, #0]
   26468:	4798      	blx	r3
   2646a:	b9d8      	cbnz	r0, 264a4 <cc_mbedtls_entropy_init+0x6c>
   2646c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   26470:	42ab      	cmp	r3, r5
   26472:	dc11      	bgt.n	26498 <cc_mbedtls_entropy_init+0x60>
   26474:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   26478:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   2647c:	2120      	movs	r1, #32
   2647e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   26482:	2101      	movs	r1, #1
   26484:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   26488:	3301      	adds	r3, #1
   2648a:	4909      	ldr	r1, [pc, #36]	; (264b0 <cc_mbedtls_entropy_init+0x78>)
   2648c:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   26490:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   26494:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   26498:	4b06      	ldr	r3, [pc, #24]	; (264b4 <cc_mbedtls_entropy_init+0x7c>)
   2649a:	4630      	mov	r0, r6
   2649c:	681b      	ldr	r3, [r3, #0]
   2649e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   264a2:	4718      	bx	r3
   264a4:	bd70      	pop	{r4, r5, r6, pc}
   264a6:	bf00      	nop
   264a8:	200008d0 	.word	0x200008d0
   264ac:	200008d4 	.word	0x200008d4
   264b0:	00026e9d 	.word	0x00026e9d
   264b4:	200008d8 	.word	0x200008d8

000264b8 <cc_mbedtls_entropy_func>:
   264b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   264bc:	2a20      	cmp	r2, #32
   264be:	b088      	sub	sp, #32
   264c0:	d876      	bhi.n	265b0 <cc_mbedtls_entropy_func+0xf8>
   264c2:	4b3d      	ldr	r3, [pc, #244]	; (265b8 <cc_mbedtls_entropy_func+0x100>)
   264c4:	f500 7988 	add.w	r9, r0, #272	; 0x110
   264c8:	681b      	ldr	r3, [r3, #0]
   264ca:	4604      	mov	r4, r0
   264cc:	4648      	mov	r0, r9
   264ce:	4617      	mov	r7, r2
   264d0:	4688      	mov	r8, r1
   264d2:	4798      	blx	r3
   264d4:	4605      	mov	r5, r0
   264d6:	bba0      	cbnz	r0, 26542 <cc_mbedtls_entropy_func+0x8a>
   264d8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   264dc:	f240 1601 	movw	r6, #257	; 0x101
   264e0:	e001      	b.n	264e6 <cc_mbedtls_entropy_func+0x2e>
   264e2:	3e01      	subs	r6, #1
   264e4:	d060      	beq.n	265a8 <cc_mbedtls_entropy_func+0xf0>
   264e6:	4620      	mov	r0, r4
   264e8:	b37b      	cbz	r3, 2654a <cc_mbedtls_entropy_func+0x92>
   264ea:	f7ff ff69 	bl	263c0 <entropy_gather_internal.part.0>
   264ee:	4605      	mov	r5, r0
   264f0:	bb68      	cbnz	r0, 2654e <cc_mbedtls_entropy_func+0x96>
   264f2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   264f6:	2b00      	cmp	r3, #0
   264f8:	ddf3      	ble.n	264e2 <cc_mbedtls_entropy_func+0x2a>
   264fa:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   264fe:	4290      	cmp	r0, r2
   26500:	d3ef      	bcc.n	264e2 <cc_mbedtls_entropy_func+0x2a>
   26502:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   26506:	2a01      	cmp	r2, #1
   26508:	d1eb      	bne.n	264e2 <cc_mbedtls_entropy_func+0x2a>
   2650a:	281f      	cmp	r0, #31
   2650c:	d9e9      	bls.n	264e2 <cc_mbedtls_entropy_func+0x2a>
   2650e:	466e      	mov	r6, sp
   26510:	4629      	mov	r1, r5
   26512:	2220      	movs	r2, #32
   26514:	4630      	mov	r0, r6
   26516:	f104 0a04 	add.w	sl, r4, #4
   2651a:	f005 fe53 	bl	2c1c4 <memset>
   2651e:	4631      	mov	r1, r6
   26520:	4650      	mov	r0, sl
   26522:	f000 fdeb 	bl	270fc <cc_mbedtls_sha256_finish>
   26526:	4605      	mov	r5, r0
   26528:	b198      	cbz	r0, 26552 <cc_mbedtls_entropy_func+0x9a>
   2652a:	2120      	movs	r1, #32
   2652c:	4630      	mov	r0, r6
   2652e:	f7ff fb4b 	bl	25bc8 <mbedtls_platform_zeroize>
   26532:	4b22      	ldr	r3, [pc, #136]	; (265bc <cc_mbedtls_entropy_func+0x104>)
   26534:	4648      	mov	r0, r9
   26536:	681b      	ldr	r3, [r3, #0]
   26538:	4798      	blx	r3
   2653a:	2800      	cmp	r0, #0
   2653c:	bf18      	it	ne
   2653e:	f06f 051d 	mvnne.w	r5, #29
   26542:	4628      	mov	r0, r5
   26544:	b008      	add	sp, #32
   26546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2654a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   2654e:	466e      	mov	r6, sp
   26550:	e7eb      	b.n	2652a <cc_mbedtls_entropy_func+0x72>
   26552:	4650      	mov	r0, sl
   26554:	f000 fd8e 	bl	27074 <cc_mbedtls_sha256_free>
   26558:	4650      	mov	r0, sl
   2655a:	f000 fd77 	bl	2704c <cc_mbedtls_sha256_init>
   2655e:	4629      	mov	r1, r5
   26560:	4650      	mov	r0, sl
   26562:	f000 fd8d 	bl	27080 <cc_mbedtls_sha256_starts>
   26566:	4605      	mov	r5, r0
   26568:	2800      	cmp	r0, #0
   2656a:	d1de      	bne.n	2652a <cc_mbedtls_entropy_func+0x72>
   2656c:	4650      	mov	r0, sl
   2656e:	2220      	movs	r2, #32
   26570:	4631      	mov	r1, r6
   26572:	f000 fd99 	bl	270a8 <cc_mbedtls_sha256_update>
   26576:	4605      	mov	r5, r0
   26578:	2800      	cmp	r0, #0
   2657a:	d1d6      	bne.n	2652a <cc_mbedtls_entropy_func+0x72>
   2657c:	4603      	mov	r3, r0
   2657e:	4632      	mov	r2, r6
   26580:	2120      	movs	r1, #32
   26582:	4630      	mov	r0, r6
   26584:	f000 ff18 	bl	273b8 <cc_mbedtls_sha256>
   26588:	4605      	mov	r5, r0
   2658a:	2800      	cmp	r0, #0
   2658c:	d1cd      	bne.n	2652a <cc_mbedtls_entropy_func+0x72>
   2658e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   26592:	2b00      	cmp	r3, #0
   26594:	bfc4      	itt	gt
   26596:	2300      	movgt	r3, #0
   26598:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   2659c:	463a      	mov	r2, r7
   2659e:	4640      	mov	r0, r8
   265a0:	4631      	mov	r1, r6
   265a2:	f005 fdd4 	bl	2c14e <memcpy>
   265a6:	e7c0      	b.n	2652a <cc_mbedtls_entropy_func+0x72>
   265a8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   265ac:	466e      	mov	r6, sp
   265ae:	e7bc      	b.n	2652a <cc_mbedtls_entropy_func+0x72>
   265b0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   265b4:	e7c5      	b.n	26542 <cc_mbedtls_entropy_func+0x8a>
   265b6:	bf00      	nop
   265b8:	200008d4 	.word	0x200008d4
   265bc:	200008d8 	.word	0x200008d8

000265c0 <RndStartupTest.constprop.0>:
   265c0:	b530      	push	{r4, r5, lr}
   265c2:	b08d      	sub	sp, #52	; 0x34
   265c4:	2100      	movs	r1, #0
   265c6:	2228      	movs	r2, #40	; 0x28
   265c8:	a802      	add	r0, sp, #8
   265ca:	9101      	str	r1, [sp, #4]
   265cc:	f005 fdfa 	bl	2c1c4 <memset>
   265d0:	a802      	add	r0, sp, #8
   265d2:	f000 ff19 	bl	27408 <RNG_PLAT_SetUserRngParameters>
   265d6:	4604      	mov	r4, r0
   265d8:	b110      	cbz	r0, 265e0 <RndStartupTest.constprop.0+0x20>
   265da:	4620      	mov	r0, r4
   265dc:	b00d      	add	sp, #52	; 0x34
   265de:	bd30      	pop	{r4, r5, pc}
   265e0:	4d18      	ldr	r5, [pc, #96]	; (26644 <RndStartupTest.constprop.0+0x84>)
   265e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   265e6:	6828      	ldr	r0, [r5, #0]
   265e8:	f000 f946 	bl	26878 <CC_PalMutexLock>
   265ec:	4604      	mov	r4, r0
   265ee:	b9c0      	cbnz	r0, 26622 <RndStartupTest.constprop.0+0x62>
   265f0:	2000      	movs	r0, #0
   265f2:	f000 f971 	bl	268d8 <CC_PalPowerSaveModeSelect>
   265f6:	bb00      	cbnz	r0, 2663a <RndStartupTest.constprop.0+0x7a>
   265f8:	4a13      	ldr	r2, [pc, #76]	; (26648 <RndStartupTest.constprop.0+0x88>)
   265fa:	a902      	add	r1, sp, #8
   265fc:	a801      	add	r0, sp, #4
   265fe:	f000 fc3f 	bl	26e80 <LLF_RND_RunTrngStartupTest>
   26602:	4604      	mov	r4, r0
   26604:	2001      	movs	r0, #1
   26606:	f000 f967 	bl	268d8 <CC_PalPowerSaveModeSelect>
   2660a:	b990      	cbnz	r0, 26632 <RndStartupTest.constprop.0+0x72>
   2660c:	6828      	ldr	r0, [r5, #0]
   2660e:	f000 f93b 	bl	26888 <CC_PalMutexUnlock>
   26612:	2800      	cmp	r0, #0
   26614:	d0e1      	beq.n	265da <RndStartupTest.constprop.0+0x1a>
   26616:	480d      	ldr	r0, [pc, #52]	; (2664c <RndStartupTest.constprop.0+0x8c>)
   26618:	f7ff f9ce 	bl	259b8 <CC_PalAbort>
   2661c:	4620      	mov	r0, r4
   2661e:	b00d      	add	sp, #52	; 0x34
   26620:	bd30      	pop	{r4, r5, pc}
   26622:	480b      	ldr	r0, [pc, #44]	; (26650 <RndStartupTest.constprop.0+0x90>)
   26624:	f7ff f9c8 	bl	259b8 <CC_PalAbort>
   26628:	2c01      	cmp	r4, #1
   2662a:	bf08      	it	eq
   2662c:	2405      	moveq	r4, #5
   2662e:	d0ed      	beq.n	2660c <RndStartupTest.constprop.0+0x4c>
   26630:	e7de      	b.n	265f0 <RndStartupTest.constprop.0+0x30>
   26632:	4808      	ldr	r0, [pc, #32]	; (26654 <RndStartupTest.constprop.0+0x94>)
   26634:	f7ff f9c0 	bl	259b8 <CC_PalAbort>
   26638:	e7e8      	b.n	2660c <RndStartupTest.constprop.0+0x4c>
   2663a:	4807      	ldr	r0, [pc, #28]	; (26658 <RndStartupTest.constprop.0+0x98>)
   2663c:	f7ff f9bc 	bl	259b8 <CC_PalAbort>
   26640:	e7da      	b.n	265f8 <RndStartupTest.constprop.0+0x38>
   26642:	bf00      	nop
   26644:	200008cc 	.word	0x200008cc
   26648:	20003160 	.word	0x20003160
   2664c:	0002d174 	.word	0x0002d174
   26650:	0002d11c 	.word	0x0002d11c
   26654:	0002d154 	.word	0x0002d154
   26658:	0002d134 	.word	0x0002d134

0002665c <CC_LibInit>:
   2665c:	b530      	push	{r4, r5, lr}
   2665e:	b083      	sub	sp, #12
   26660:	f000 f85c 	bl	2671c <CC_HalInit>
   26664:	b128      	cbz	r0, 26672 <CC_LibInit+0x16>
   26666:	f000 f8ab 	bl	267c0 <CC_PalTerminate>
   2666a:	2403      	movs	r4, #3
   2666c:	4620      	mov	r0, r4
   2666e:	b003      	add	sp, #12
   26670:	bd30      	pop	{r4, r5, pc}
   26672:	f000 f877 	bl	26764 <CC_PalInit>
   26676:	b9d8      	cbnz	r0, 266b0 <CC_LibInit+0x54>
   26678:	f000 f92e 	bl	268d8 <CC_PalPowerSaveModeSelect>
   2667c:	b9e0      	cbnz	r0, 266b8 <CC_LibInit+0x5c>
   2667e:	4c22      	ldr	r4, [pc, #136]	; (26708 <CC_LibInit+0xac>)
   26680:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   26684:	0e1b      	lsrs	r3, r3, #24
   26686:	2bf0      	cmp	r3, #240	; 0xf0
   26688:	d10a      	bne.n	266a0 <CC_LibInit+0x44>
   2668a:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   2668e:	4b1f      	ldr	r3, [pc, #124]	; (2670c <CC_LibInit+0xb0>)
   26690:	429a      	cmp	r2, r3
   26692:	d031      	beq.n	266f8 <CC_LibInit+0x9c>
   26694:	f000 f844 	bl	26720 <CC_HalTerminate>
   26698:	2407      	movs	r4, #7
   2669a:	f000 f891 	bl	267c0 <CC_PalTerminate>
   2669e:	e7e5      	b.n	2666c <CC_LibInit+0x10>
   266a0:	f000 f83e 	bl	26720 <CC_HalTerminate>
   266a4:	f000 f88c 	bl	267c0 <CC_PalTerminate>
   266a8:	2406      	movs	r4, #6
   266aa:	4620      	mov	r0, r4
   266ac:	b003      	add	sp, #12
   266ae:	bd30      	pop	{r4, r5, pc}
   266b0:	2404      	movs	r4, #4
   266b2:	4620      	mov	r0, r4
   266b4:	b003      	add	sp, #12
   266b6:	bd30      	pop	{r4, r5, pc}
   266b8:	f000 f832 	bl	26720 <CC_HalTerminate>
   266bc:	f000 f880 	bl	267c0 <CC_PalTerminate>
   266c0:	f7ff ff7e 	bl	265c0 <RndStartupTest.constprop.0>
   266c4:	4604      	mov	r4, r0
   266c6:	b998      	cbnz	r0, 266f0 <CC_LibInit+0x94>
   266c8:	4d11      	ldr	r5, [pc, #68]	; (26710 <CC_LibInit+0xb4>)
   266ca:	682b      	ldr	r3, [r5, #0]
   266cc:	2b00      	cmp	r3, #0
   266ce:	d1cd      	bne.n	2666c <CC_LibInit+0x10>
   266d0:	4602      	mov	r2, r0
   266d2:	4601      	mov	r1, r0
   266d4:	f7ff f992 	bl	259fc <nrf_cc3xx_platform_ctr_drbg_init>
   266d8:	b950      	cbnz	r0, 266f0 <CC_LibInit+0x94>
   266da:	490e      	ldr	r1, [pc, #56]	; (26714 <CC_LibInit+0xb8>)
   266dc:	ab01      	add	r3, sp, #4
   266de:	2268      	movs	r2, #104	; 0x68
   266e0:	f7ff f9be 	bl	25a60 <nrf_cc3xx_platform_ctr_drbg_get>
   266e4:	b920      	cbnz	r0, 266f0 <CC_LibInit+0x94>
   266e6:	4b0c      	ldr	r3, [pc, #48]	; (26718 <CC_LibInit+0xbc>)
   266e8:	602b      	str	r3, [r5, #0]
   266ea:	4620      	mov	r0, r4
   266ec:	b003      	add	sp, #12
   266ee:	bd30      	pop	{r4, r5, pc}
   266f0:	2405      	movs	r4, #5
   266f2:	4620      	mov	r0, r4
   266f4:	b003      	add	sp, #12
   266f6:	bd30      	pop	{r4, r5, pc}
   266f8:	2001      	movs	r0, #1
   266fa:	f000 f8ed 	bl	268d8 <CC_PalPowerSaveModeSelect>
   266fe:	2800      	cmp	r0, #0
   26700:	d1da      	bne.n	266b8 <CC_LibInit+0x5c>
   26702:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   26706:	e7db      	b.n	266c0 <CC_LibInit+0x64>
   26708:	5002b000 	.word	0x5002b000
   2670c:	20e00000 	.word	0x20e00000
   26710:	2000315c 	.word	0x2000315c
   26714:	200030f4 	.word	0x200030f4
   26718:	5a5aea5a 	.word	0x5a5aea5a

0002671c <CC_HalInit>:
   2671c:	2000      	movs	r0, #0
   2671e:	4770      	bx	lr

00026720 <CC_HalTerminate>:
   26720:	2000      	movs	r0, #0
   26722:	4770      	bx	lr

00026724 <CC_HalClearInterruptBit>:
   26724:	0543      	lsls	r3, r0, #21
   26726:	d504      	bpl.n	26732 <CC_HalClearInterruptBit+0xe>
   26728:	4b04      	ldr	r3, [pc, #16]	; (2673c <CC_HalClearInterruptBit+0x18>)
   2672a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2672e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   26732:	4b02      	ldr	r3, [pc, #8]	; (2673c <CC_HalClearInterruptBit+0x18>)
   26734:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   26738:	4770      	bx	lr
   2673a:	bf00      	nop
   2673c:	5002b000 	.word	0x5002b000

00026740 <CC_HalMaskInterrupt>:
   26740:	4b01      	ldr	r3, [pc, #4]	; (26748 <CC_HalMaskInterrupt+0x8>)
   26742:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   26746:	4770      	bx	lr
   26748:	5002b000 	.word	0x5002b000

0002674c <CC_HalWaitInterrupt>:
   2674c:	b108      	cbz	r0, 26752 <CC_HalWaitInterrupt+0x6>
   2674e:	f000 b86b 	b.w	26828 <CC_PalWaitInterrupt>
   26752:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   26756:	4770      	bx	lr

00026758 <CC_HalWaitInterruptRND>:
   26758:	b108      	cbz	r0, 2675e <CC_HalWaitInterruptRND+0x6>
   2675a:	f000 b84f 	b.w	267fc <CC_PalWaitInterruptRND>
   2675e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   26762:	4770      	bx	lr

00026764 <CC_PalInit>:
   26764:	b510      	push	{r4, lr}
   26766:	4811      	ldr	r0, [pc, #68]	; (267ac <CC_PalInit+0x48>)
   26768:	f000 f872 	bl	26850 <CC_PalMutexCreate>
   2676c:	b100      	cbz	r0, 26770 <CC_PalInit+0xc>
   2676e:	bd10      	pop	{r4, pc}
   26770:	480f      	ldr	r0, [pc, #60]	; (267b0 <CC_PalInit+0x4c>)
   26772:	f000 f86d 	bl	26850 <CC_PalMutexCreate>
   26776:	2800      	cmp	r0, #0
   26778:	d1f9      	bne.n	2676e <CC_PalInit+0xa>
   2677a:	4c0e      	ldr	r4, [pc, #56]	; (267b4 <CC_PalInit+0x50>)
   2677c:	4620      	mov	r0, r4
   2677e:	f000 f867 	bl	26850 <CC_PalMutexCreate>
   26782:	2800      	cmp	r0, #0
   26784:	d1f3      	bne.n	2676e <CC_PalInit+0xa>
   26786:	4b0c      	ldr	r3, [pc, #48]	; (267b8 <CC_PalInit+0x54>)
   26788:	480c      	ldr	r0, [pc, #48]	; (267bc <CC_PalInit+0x58>)
   2678a:	601c      	str	r4, [r3, #0]
   2678c:	f000 f860 	bl	26850 <CC_PalMutexCreate>
   26790:	4601      	mov	r1, r0
   26792:	2800      	cmp	r0, #0
   26794:	d1eb      	bne.n	2676e <CC_PalInit+0xa>
   26796:	f000 f82d 	bl	267f4 <CC_PalDmaInit>
   2679a:	4604      	mov	r4, r0
   2679c:	b108      	cbz	r0, 267a2 <CC_PalInit+0x3e>
   2679e:	4620      	mov	r0, r4
   267a0:	bd10      	pop	{r4, pc}
   267a2:	f000 f87b 	bl	2689c <CC_PalPowerSaveModeInit>
   267a6:	4620      	mov	r0, r4
   267a8:	e7fa      	b.n	267a0 <CC_PalInit+0x3c>
   267aa:	bf00      	nop
   267ac:	200008c8 	.word	0x200008c8
   267b0:	200008bc 	.word	0x200008bc
   267b4:	200008c4 	.word	0x200008c4
   267b8:	200008cc 	.word	0x200008cc
   267bc:	200008c0 	.word	0x200008c0

000267c0 <CC_PalTerminate>:
   267c0:	b508      	push	{r3, lr}
   267c2:	4808      	ldr	r0, [pc, #32]	; (267e4 <CC_PalTerminate+0x24>)
   267c4:	f000 f84e 	bl	26864 <CC_PalMutexDestroy>
   267c8:	4807      	ldr	r0, [pc, #28]	; (267e8 <CC_PalTerminate+0x28>)
   267ca:	f000 f84b 	bl	26864 <CC_PalMutexDestroy>
   267ce:	4807      	ldr	r0, [pc, #28]	; (267ec <CC_PalTerminate+0x2c>)
   267d0:	f000 f848 	bl	26864 <CC_PalMutexDestroy>
   267d4:	4806      	ldr	r0, [pc, #24]	; (267f0 <CC_PalTerminate+0x30>)
   267d6:	f000 f845 	bl	26864 <CC_PalMutexDestroy>
   267da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   267de:	f000 b80b 	b.w	267f8 <CC_PalDmaTerminate>
   267e2:	bf00      	nop
   267e4:	200008c8 	.word	0x200008c8
   267e8:	200008bc 	.word	0x200008bc
   267ec:	200008c4 	.word	0x200008c4
   267f0:	200008c0 	.word	0x200008c0

000267f4 <CC_PalDmaInit>:
   267f4:	2000      	movs	r0, #0
   267f6:	4770      	bx	lr

000267f8 <CC_PalDmaTerminate>:
   267f8:	4770      	bx	lr
   267fa:	bf00      	nop

000267fc <CC_PalWaitInterruptRND>:
   267fc:	b410      	push	{r4}
   267fe:	4c09      	ldr	r4, [pc, #36]	; (26824 <CC_PalWaitInterruptRND+0x28>)
   26800:	4602      	mov	r2, r0
   26802:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   26806:	4213      	tst	r3, r2
   26808:	d0fb      	beq.n	26802 <CC_PalWaitInterruptRND+0x6>
   2680a:	b121      	cbz	r1, 26816 <CC_PalWaitInterruptRND+0x1a>
   2680c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   26810:	600b      	str	r3, [r1, #0]
   26812:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   26816:	4b03      	ldr	r3, [pc, #12]	; (26824 <CC_PalWaitInterruptRND+0x28>)
   26818:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   2681c:	2000      	movs	r0, #0
   2681e:	bc10      	pop	{r4}
   26820:	4770      	bx	lr
   26822:	bf00      	nop
   26824:	5002b000 	.word	0x5002b000

00026828 <CC_PalWaitInterrupt>:
   26828:	4a04      	ldr	r2, [pc, #16]	; (2683c <CC_PalWaitInterrupt+0x14>)
   2682a:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   2682e:	4218      	tst	r0, r3
   26830:	d0fb      	beq.n	2682a <CC_PalWaitInterrupt+0x2>
   26832:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   26836:	2000      	movs	r0, #0
   26838:	4770      	bx	lr
   2683a:	bf00      	nop
   2683c:	5002b000 	.word	0x5002b000

00026840 <CC_PalMemCopyPlat>:
   26840:	f005 bca6 	b.w	2c190 <memmove>

00026844 <CC_PalMemSetPlat>:
   26844:	f005 bcbe 	b.w	2c1c4 <memset>

00026848 <CC_PalMemSetZeroPlat>:
   26848:	460a      	mov	r2, r1
   2684a:	2100      	movs	r1, #0
   2684c:	f005 bcba 	b.w	2c1c4 <memset>

00026850 <CC_PalMutexCreate>:
   26850:	b508      	push	{r3, lr}
   26852:	4b03      	ldr	r3, [pc, #12]	; (26860 <CC_PalMutexCreate+0x10>)
   26854:	6802      	ldr	r2, [r0, #0]
   26856:	681b      	ldr	r3, [r3, #0]
   26858:	6810      	ldr	r0, [r2, #0]
   2685a:	4798      	blx	r3
   2685c:	2000      	movs	r0, #0
   2685e:	bd08      	pop	{r3, pc}
   26860:	2000087c 	.word	0x2000087c

00026864 <CC_PalMutexDestroy>:
   26864:	b508      	push	{r3, lr}
   26866:	4b03      	ldr	r3, [pc, #12]	; (26874 <CC_PalMutexDestroy+0x10>)
   26868:	6802      	ldr	r2, [r0, #0]
   2686a:	685b      	ldr	r3, [r3, #4]
   2686c:	6810      	ldr	r0, [r2, #0]
   2686e:	4798      	blx	r3
   26870:	2000      	movs	r0, #0
   26872:	bd08      	pop	{r3, pc}
   26874:	2000087c 	.word	0x2000087c

00026878 <CC_PalMutexLock>:
   26878:	4b02      	ldr	r3, [pc, #8]	; (26884 <CC_PalMutexLock+0xc>)
   2687a:	6802      	ldr	r2, [r0, #0]
   2687c:	689b      	ldr	r3, [r3, #8]
   2687e:	6810      	ldr	r0, [r2, #0]
   26880:	4718      	bx	r3
   26882:	bf00      	nop
   26884:	2000087c 	.word	0x2000087c

00026888 <CC_PalMutexUnlock>:
   26888:	b508      	push	{r3, lr}
   2688a:	4b03      	ldr	r3, [pc, #12]	; (26898 <CC_PalMutexUnlock+0x10>)
   2688c:	6802      	ldr	r2, [r0, #0]
   2688e:	68db      	ldr	r3, [r3, #12]
   26890:	6810      	ldr	r0, [r2, #0]
   26892:	4798      	blx	r3
   26894:	2000      	movs	r0, #0
   26896:	bd08      	pop	{r3, pc}
   26898:	2000087c 	.word	0x2000087c

0002689c <CC_PalPowerSaveModeInit>:
   2689c:	b570      	push	{r4, r5, r6, lr}
   2689e:	4c09      	ldr	r4, [pc, #36]	; (268c4 <CC_PalPowerSaveModeInit+0x28>)
   268a0:	4d09      	ldr	r5, [pc, #36]	; (268c8 <CC_PalPowerSaveModeInit+0x2c>)
   268a2:	6920      	ldr	r0, [r4, #16]
   268a4:	68ab      	ldr	r3, [r5, #8]
   268a6:	4798      	blx	r3
   268a8:	b118      	cbz	r0, 268b2 <CC_PalPowerSaveModeInit+0x16>
   268aa:	4b08      	ldr	r3, [pc, #32]	; (268cc <CC_PalPowerSaveModeInit+0x30>)
   268ac:	4808      	ldr	r0, [pc, #32]	; (268d0 <CC_PalPowerSaveModeInit+0x34>)
   268ae:	685b      	ldr	r3, [r3, #4]
   268b0:	4798      	blx	r3
   268b2:	4a08      	ldr	r2, [pc, #32]	; (268d4 <CC_PalPowerSaveModeInit+0x38>)
   268b4:	68eb      	ldr	r3, [r5, #12]
   268b6:	6920      	ldr	r0, [r4, #16]
   268b8:	2100      	movs	r1, #0
   268ba:	6011      	str	r1, [r2, #0]
   268bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   268c0:	4718      	bx	r3
   268c2:	bf00      	nop
   268c4:	2000088c 	.word	0x2000088c
   268c8:	2000087c 	.word	0x2000087c
   268cc:	2000086c 	.word	0x2000086c
   268d0:	0002d18c 	.word	0x0002d18c
   268d4:	20003380 	.word	0x20003380

000268d8 <CC_PalPowerSaveModeSelect>:
   268d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   268da:	4d1a      	ldr	r5, [pc, #104]	; (26944 <CC_PalPowerSaveModeSelect+0x6c>)
   268dc:	4e1a      	ldr	r6, [pc, #104]	; (26948 <CC_PalPowerSaveModeSelect+0x70>)
   268de:	4604      	mov	r4, r0
   268e0:	68b2      	ldr	r2, [r6, #8]
   268e2:	6928      	ldr	r0, [r5, #16]
   268e4:	4790      	blx	r2
   268e6:	b9e8      	cbnz	r0, 26924 <CC_PalPowerSaveModeSelect+0x4c>
   268e8:	4f18      	ldr	r7, [pc, #96]	; (2694c <CC_PalPowerSaveModeSelect+0x74>)
   268ea:	683b      	ldr	r3, [r7, #0]
   268ec:	b14c      	cbz	r4, 26902 <CC_PalPowerSaveModeSelect+0x2a>
   268ee:	b1a3      	cbz	r3, 2691a <CC_PalPowerSaveModeSelect+0x42>
   268f0:	2b01      	cmp	r3, #1
   268f2:	d019      	beq.n	26928 <CC_PalPowerSaveModeSelect+0x50>
   268f4:	3b01      	subs	r3, #1
   268f6:	603b      	str	r3, [r7, #0]
   268f8:	6928      	ldr	r0, [r5, #16]
   268fa:	68f3      	ldr	r3, [r6, #12]
   268fc:	4798      	blx	r3
   268fe:	2000      	movs	r0, #0
   26900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26902:	b943      	cbnz	r3, 26916 <CC_PalPowerSaveModeSelect+0x3e>
   26904:	4a12      	ldr	r2, [pc, #72]	; (26950 <CC_PalPowerSaveModeSelect+0x78>)
   26906:	2101      	movs	r1, #1
   26908:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   2690c:	4911      	ldr	r1, [pc, #68]	; (26954 <CC_PalPowerSaveModeSelect+0x7c>)
   2690e:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   26912:	2a00      	cmp	r2, #0
   26914:	d1fb      	bne.n	2690e <CC_PalPowerSaveModeSelect+0x36>
   26916:	3301      	adds	r3, #1
   26918:	603b      	str	r3, [r7, #0]
   2691a:	68f3      	ldr	r3, [r6, #12]
   2691c:	6928      	ldr	r0, [r5, #16]
   2691e:	4798      	blx	r3
   26920:	2000      	movs	r0, #0
   26922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26924:	480c      	ldr	r0, [pc, #48]	; (26958 <CC_PalPowerSaveModeSelect+0x80>)
   26926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26928:	4a0a      	ldr	r2, [pc, #40]	; (26954 <CC_PalPowerSaveModeSelect+0x7c>)
   2692a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2692e:	2b00      	cmp	r3, #0
   26930:	d1fb      	bne.n	2692a <CC_PalPowerSaveModeSelect+0x52>
   26932:	4a07      	ldr	r2, [pc, #28]	; (26950 <CC_PalPowerSaveModeSelect+0x78>)
   26934:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   26938:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   2693c:	f7ff ff00 	bl	26740 <CC_HalMaskInterrupt>
   26940:	683b      	ldr	r3, [r7, #0]
   26942:	e7d7      	b.n	268f4 <CC_PalPowerSaveModeSelect+0x1c>
   26944:	2000088c 	.word	0x2000088c
   26948:	2000087c 	.word	0x2000087c
   2694c:	20003380 	.word	0x20003380
   26950:	5002a000 	.word	0x5002a000
   26954:	5002b000 	.word	0x5002b000
   26958:	ffff8fe9 	.word	0xffff8fe9

0002695c <mutex_init>:
   2695c:	4b01      	ldr	r3, [pc, #4]	; (26964 <mutex_init+0x8>)
   2695e:	681b      	ldr	r3, [r3, #0]
   26960:	4718      	bx	r3
   26962:	bf00      	nop
   26964:	2000087c 	.word	0x2000087c

00026968 <mutex_lock>:
   26968:	4b01      	ldr	r3, [pc, #4]	; (26970 <mutex_lock+0x8>)
   2696a:	689b      	ldr	r3, [r3, #8]
   2696c:	4718      	bx	r3
   2696e:	bf00      	nop
   26970:	2000087c 	.word	0x2000087c

00026974 <mutex_unlock>:
   26974:	4b01      	ldr	r3, [pc, #4]	; (2697c <mutex_unlock+0x8>)
   26976:	68db      	ldr	r3, [r3, #12]
   26978:	4718      	bx	r3
   2697a:	bf00      	nop
   2697c:	2000087c 	.word	0x2000087c

00026980 <startTrngHW>:
   26980:	2800      	cmp	r0, #0
   26982:	f000 8084 	beq.w	26a8e <startTrngHW+0x10e>
   26986:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2698a:	460c      	mov	r4, r1
   2698c:	b083      	sub	sp, #12
   2698e:	2900      	cmp	r1, #0
   26990:	d078      	beq.n	26a84 <startTrngHW+0x104>
   26992:	461d      	mov	r5, r3
   26994:	2b00      	cmp	r3, #0
   26996:	d075      	beq.n	26a84 <startTrngHW+0x104>
   26998:	4607      	mov	r7, r0
   2699a:	b11a      	cbz	r2, 269a4 <startTrngHW+0x24>
   2699c:	2201      	movs	r2, #1
   2699e:	2300      	movs	r3, #0
   269a0:	602a      	str	r2, [r5, #0]
   269a2:	6003      	str	r3, [r0, #0]
   269a4:	682b      	ldr	r3, [r5, #0]
   269a6:	2b00      	cmp	r3, #0
   269a8:	d067      	beq.n	26a7a <startTrngHW+0xfa>
   269aa:	4629      	mov	r1, r5
   269ac:	4620      	mov	r0, r4
   269ae:	f000 fde9 	bl	27584 <LLF_RND_GetFastestRosc>
   269b2:	4603      	mov	r3, r0
   269b4:	2800      	cmp	r0, #0
   269b6:	d161      	bne.n	26a7c <startTrngHW+0xfc>
   269b8:	6828      	ldr	r0, [r5, #0]
   269ba:	4621      	mov	r1, r4
   269bc:	f000 fdc4 	bl	27548 <LLF_RND_GetRoscSampleCnt>
   269c0:	4603      	mov	r3, r0
   269c2:	2800      	cmp	r0, #0
   269c4:	d15a      	bne.n	26a7c <startTrngHW+0xfc>
   269c6:	682a      	ldr	r2, [r5, #0]
   269c8:	2a08      	cmp	r2, #8
   269ca:	d072      	beq.n	26ab2 <startTrngHW+0x132>
   269cc:	2a04      	cmp	r2, #4
   269ce:	d073      	beq.n	26ab8 <startTrngHW+0x138>
   269d0:	f1a2 0802 	sub.w	r8, r2, #2
   269d4:	fab8 f888 	clz	r8, r8
   269d8:	ea4f 1858 	mov.w	r8, r8, lsr #5
   269dc:	4e38      	ldr	r6, [pc, #224]	; (26ac0 <startTrngHW+0x140>)
   269de:	2001      	movs	r0, #1
   269e0:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   269e4:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   269e8:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   269ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
   269ee:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   269f2:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   269f6:	428a      	cmp	r2, r1
   269f8:	d1f6      	bne.n	269e8 <startTrngHW+0x68>
   269fa:	f04f 0900 	mov.w	r9, #0
   269fe:	9301      	str	r3, [sp, #4]
   26a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26a04:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   26a08:	f7ff fe8c 	bl	26724 <CC_HalClearInterruptBit>
   26a0c:	f06f 021b 	mvn.w	r2, #27
   26a10:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   26a14:	4648      	mov	r0, r9
   26a16:	f7ff fe93 	bl	26740 <CC_HalMaskInterrupt>
   26a1a:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   26a1e:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   26a22:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   26a26:	f7ff fe8b 	bl	26740 <CC_HalMaskInterrupt>
   26a2a:	220a      	movs	r2, #10
   26a2c:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   26a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26a32:	2b01      	cmp	r3, #1
   26a34:	9b01      	ldr	r3, [sp, #4]
   26a36:	d02d      	beq.n	26a94 <startTrngHW+0x114>
   26a38:	6922      	ldr	r2, [r4, #16]
   26a3a:	4922      	ldr	r1, [pc, #136]	; (26ac4 <startTrngHW+0x144>)
   26a3c:	fba1 1202 	umull	r1, r2, r1, r2
   26a40:	0912      	lsrs	r2, r2, #4
   26a42:	6a61      	ldr	r1, [r4, #36]	; 0x24
   26a44:	fb01 f202 	mul.w	r2, r1, r2
   26a48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   26a4c:	491c      	ldr	r1, [pc, #112]	; (26ac0 <startTrngHW+0x140>)
   26a4e:	03d2      	lsls	r2, r2, #15
   26a50:	0992      	lsrs	r2, r2, #6
   26a52:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   26a56:	2201      	movs	r2, #1
   26a58:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   26a5c:	683a      	ldr	r2, [r7, #0]
   26a5e:	6829      	ldr	r1, [r5, #0]
   26a60:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26a64:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   26a68:	603a      	str	r2, [r7, #0]
   26a6a:	6829      	ldr	r1, [r5, #0]
   26a6c:	4618      	mov	r0, r3
   26a6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26a72:	603a      	str	r2, [r7, #0]
   26a74:	b003      	add	sp, #12
   26a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26a7a:	4b13      	ldr	r3, [pc, #76]	; (26ac8 <startTrngHW+0x148>)
   26a7c:	4618      	mov	r0, r3
   26a7e:	b003      	add	sp, #12
   26a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26a84:	4b11      	ldr	r3, [pc, #68]	; (26acc <startTrngHW+0x14c>)
   26a86:	4618      	mov	r0, r3
   26a88:	b003      	add	sp, #12
   26a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26a8e:	4b0f      	ldr	r3, [pc, #60]	; (26acc <startTrngHW+0x14c>)
   26a90:	4618      	mov	r0, r3
   26a92:	4770      	bx	lr
   26a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   26a98:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   26a9c:	3101      	adds	r1, #1
   26a9e:	d006      	beq.n	26aae <startTrngHW+0x12e>
   26aa0:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   26aa4:	4907      	ldr	r1, [pc, #28]	; (26ac4 <startTrngHW+0x144>)
   26aa6:	fba1 1202 	umull	r1, r2, r1, r2
   26aaa:	0912      	lsrs	r2, r2, #4
   26aac:	e7c9      	b.n	26a42 <startTrngHW+0xc2>
   26aae:	2216      	movs	r2, #22
   26ab0:	e7c7      	b.n	26a42 <startTrngHW+0xc2>
   26ab2:	f04f 0803 	mov.w	r8, #3
   26ab6:	e791      	b.n	269dc <startTrngHW+0x5c>
   26ab8:	f04f 0802 	mov.w	r8, #2
   26abc:	e78e      	b.n	269dc <startTrngHW+0x5c>
   26abe:	bf00      	nop
   26ac0:	5002b000 	.word	0x5002b000
   26ac4:	aaaaaaab 	.word	0xaaaaaaab
   26ac8:	00f10c31 	.word	0x00f10c31
   26acc:	00f10c35 	.word	0x00f10c35

00026ad0 <LLF_RND_RepetitionCounterTest.part.0>:
   26ad0:	b570      	push	{r4, r5, r6, lr}
   26ad2:	00c9      	lsls	r1, r1, #3
   26ad4:	2400      	movs	r4, #0
   26ad6:	1e4e      	subs	r6, r1, #1
   26ad8:	f04f 0c01 	mov.w	ip, #1
   26adc:	4625      	mov	r5, r4
   26ade:	46a6      	mov	lr, r4
   26ae0:	e008      	b.n	26af4 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   26ae2:	459e      	cmp	lr, r3
   26ae4:	d015      	beq.n	26b12 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   26ae6:	2501      	movs	r5, #1
   26ae8:	45b4      	cmp	ip, r6
   26aea:	d817      	bhi.n	26b1c <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   26aec:	3401      	adds	r4, #1
   26aee:	f10c 0c01 	add.w	ip, ip, #1
   26af2:	469e      	mov	lr, r3
   26af4:	0963      	lsrs	r3, r4, #5
   26af6:	f004 011f 	and.w	r1, r4, #31
   26afa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   26afe:	291f      	cmp	r1, #31
   26b00:	fa23 f301 	lsr.w	r3, r3, r1
   26b04:	bf18      	it	ne
   26b06:	f003 0301 	andne.w	r3, r3, #1
   26b0a:	2c00      	cmp	r4, #0
   26b0c:	d1e9      	bne.n	26ae2 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   26b0e:	2501      	movs	r5, #1
   26b10:	e7ec      	b.n	26aec <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   26b12:	3501      	adds	r5, #1
   26b14:	4295      	cmp	r5, r2
   26b16:	d1e7      	bne.n	26ae8 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   26b18:	4801      	ldr	r0, [pc, #4]	; (26b20 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   26b1a:	bd70      	pop	{r4, r5, r6, pc}
   26b1c:	2000      	movs	r0, #0
   26b1e:	bd70      	pop	{r4, r5, r6, pc}
   26b20:	00f10c36 	.word	0x00f10c36

00026b24 <LLF_RND_AdaptiveProportionTest>:
   26b24:	2800      	cmp	r0, #0
   26b26:	d03f      	beq.n	26ba8 <LLF_RND_AdaptiveProportionTest+0x84>
   26b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26b2c:	1e4c      	subs	r4, r1, #1
   26b2e:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   26b32:	d228      	bcs.n	26b86 <LLF_RND_AdaptiveProportionTest+0x62>
   26b34:	b33b      	cbz	r3, 26b86 <LLF_RND_AdaptiveProportionTest+0x62>
   26b36:	b332      	cbz	r2, 26b86 <LLF_RND_AdaptiveProportionTest+0x62>
   26b38:	f04f 0e00 	mov.w	lr, #0
   26b3c:	00cf      	lsls	r7, r1, #3
   26b3e:	4676      	mov	r6, lr
   26b40:	4675      	mov	r5, lr
   26b42:	4674      	mov	r4, lr
   26b44:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   26b48:	0961      	lsrs	r1, r4, #5
   26b4a:	f004 0c1f 	and.w	ip, r4, #31
   26b4e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   26b52:	f1bc 0f1f 	cmp.w	ip, #31
   26b56:	fa21 f10c 	lsr.w	r1, r1, ip
   26b5a:	bf18      	it	ne
   26b5c:	f001 0101 	andne.w	r1, r1, #1
   26b60:	b1a4      	cbz	r4, 26b8c <LLF_RND_AdaptiveProportionTest+0x68>
   26b62:	42ab      	cmp	r3, r5
   26b64:	d018      	beq.n	26b98 <LLF_RND_AdaptiveProportionTest+0x74>
   26b66:	428e      	cmp	r6, r1
   26b68:	bf08      	it	eq
   26b6a:	f10e 0e01 	addeq.w	lr, lr, #1
   26b6e:	45a8      	cmp	r8, r5
   26b70:	d015      	beq.n	26b9e <LLF_RND_AdaptiveProportionTest+0x7a>
   26b72:	3501      	adds	r5, #1
   26b74:	4631      	mov	r1, r6
   26b76:	3401      	adds	r4, #1
   26b78:	42bc      	cmp	r4, r7
   26b7a:	d001      	beq.n	26b80 <LLF_RND_AdaptiveProportionTest+0x5c>
   26b7c:	460e      	mov	r6, r1
   26b7e:	e7e3      	b.n	26b48 <LLF_RND_AdaptiveProportionTest+0x24>
   26b80:	2000      	movs	r0, #0
   26b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26b86:	4809      	ldr	r0, [pc, #36]	; (26bac <LLF_RND_AdaptiveProportionTest+0x88>)
   26b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26b8c:	f04f 0e01 	mov.w	lr, #1
   26b90:	4674      	mov	r4, lr
   26b92:	4675      	mov	r5, lr
   26b94:	460e      	mov	r6, r1
   26b96:	e7d7      	b.n	26b48 <LLF_RND_AdaptiveProportionTest+0x24>
   26b98:	2501      	movs	r5, #1
   26b9a:	46ae      	mov	lr, r5
   26b9c:	e7eb      	b.n	26b76 <LLF_RND_AdaptiveProportionTest+0x52>
   26b9e:	4572      	cmp	r2, lr
   26ba0:	d3f1      	bcc.n	26b86 <LLF_RND_AdaptiveProportionTest+0x62>
   26ba2:	4631      	mov	r1, r6
   26ba4:	461d      	mov	r5, r3
   26ba6:	e7e6      	b.n	26b76 <LLF_RND_AdaptiveProportionTest+0x52>
   26ba8:	4800      	ldr	r0, [pc, #0]	; (26bac <LLF_RND_AdaptiveProportionTest+0x88>)
   26baa:	4770      	bx	lr
   26bac:	00f10c37 	.word	0x00f10c37

00026bb0 <getTrngSource>:
   26bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26bb4:	b091      	sub	sp, #68	; 0x44
   26bb6:	460d      	mov	r5, r1
   26bb8:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   26bbc:	4681      	mov	r9, r0
   26bbe:	2900      	cmp	r1, #0
   26bc0:	d14c      	bne.n	26c5c <getTrngSource+0xac>
   26bc2:	6928      	ldr	r0, [r5, #16]
   26bc4:	9006      	str	r0, [sp, #24]
   26bc6:	981a      	ldr	r0, [sp, #104]	; 0x68
   26bc8:	601c      	str	r4, [r3, #0]
   26bca:	2300      	movs	r3, #0
   26bcc:	6003      	str	r3, [r0, #0]
   26bce:	2a00      	cmp	r2, #0
   26bd0:	f000 8124 	beq.w	26e1c <getTrngSource+0x26c>
   26bd4:	4b9d      	ldr	r3, [pc, #628]	; (26e4c <getTrngSource+0x29c>)
   26bd6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   26bd8:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   26bdc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   26be0:	429a      	cmp	r2, r3
   26be2:	d147      	bne.n	26c74 <getTrngSource+0xc4>
   26be4:	290a      	cmp	r1, #10
   26be6:	d145      	bne.n	26c74 <getTrngSource+0xc4>
   26be8:	f899 3003 	ldrb.w	r3, [r9, #3]
   26bec:	9308      	str	r3, [sp, #32]
   26bee:	f104 0308 	add.w	r3, r4, #8
   26bf2:	9a06      	ldr	r2, [sp, #24]
   26bf4:	9307      	str	r3, [sp, #28]
   26bf6:	4b96      	ldr	r3, [pc, #600]	; (26e50 <getTrngSource+0x2a0>)
   26bf8:	4c94      	ldr	r4, [pc, #592]	; (26e4c <getTrngSource+0x29c>)
   26bfa:	fba3 1302 	umull	r1, r3, r3, r2
   26bfe:	089b      	lsrs	r3, r3, #2
   26c00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26c04:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   26c08:	9303      	str	r3, [sp, #12]
   26c0a:	2304      	movs	r3, #4
   26c0c:	9305      	str	r3, [sp, #20]
   26c0e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   26c10:	9e06      	ldr	r6, [sp, #24]
   26c12:	601e      	str	r6, [r3, #0]
   26c14:	2e00      	cmp	r6, #0
   26c16:	d033      	beq.n	26c80 <getTrngSource+0xd0>
   26c18:	f8dd 801c 	ldr.w	r8, [sp, #28]
   26c1c:	2700      	movs	r7, #0
   26c1e:	f04f 0a01 	mov.w	sl, #1
   26c22:	f000 fcbf 	bl	275a4 <LLF_RND_TurnOffTrng>
   26c26:	2300      	movs	r3, #0
   26c28:	9309      	str	r3, [sp, #36]	; 0x24
   26c2a:	f1b9 0f00 	cmp.w	r9, #0
   26c2e:	f000 80df 	beq.w	26df0 <getTrngSource+0x240>
   26c32:	2d00      	cmp	r5, #0
   26c34:	f000 80dc 	beq.w	26df0 <getTrngSource+0x240>
   26c38:	9b08      	ldr	r3, [sp, #32]
   26c3a:	b1eb      	cbz	r3, 26c78 <getTrngSource+0xc8>
   26c3c:	a908      	add	r1, sp, #32
   26c3e:	4628      	mov	r0, r5
   26c40:	f000 fca0 	bl	27584 <LLF_RND_GetFastestRosc>
   26c44:	2800      	cmp	r0, #0
   26c46:	d03e      	beq.n	26cc6 <getTrngSource+0x116>
   26c48:	4b82      	ldr	r3, [pc, #520]	; (26e54 <getTrngSource+0x2a4>)
   26c4a:	4298      	cmp	r0, r3
   26c4c:	d118      	bne.n	26c80 <getTrngSource+0xd0>
   26c4e:	9003      	str	r0, [sp, #12]
   26c50:	f000 fca8 	bl	275a4 <LLF_RND_TurnOffTrng>
   26c54:	9803      	ldr	r0, [sp, #12]
   26c56:	b011      	add	sp, #68	; 0x44
   26c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c5c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   26c60:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   26c64:	3601      	adds	r6, #1
   26c66:	bf14      	ite	ne
   26c68:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   26c6c:	f44f 7004 	moveq.w	r0, #528	; 0x210
   26c70:	9006      	str	r0, [sp, #24]
   26c72:	e7a8      	b.n	26bc6 <getTrngSource+0x16>
   26c74:	4878      	ldr	r0, [pc, #480]	; (26e58 <getTrngSource+0x2a8>)
   26c76:	e7ea      	b.n	26c4e <getTrngSource+0x9e>
   26c78:	4878      	ldr	r0, [pc, #480]	; (26e5c <getTrngSource+0x2ac>)
   26c7a:	4b76      	ldr	r3, [pc, #472]	; (26e54 <getTrngSource+0x2a4>)
   26c7c:	4298      	cmp	r0, r3
   26c7e:	d0e6      	beq.n	26c4e <getTrngSource+0x9e>
   26c80:	9b08      	ldr	r3, [sp, #32]
   26c82:	2b08      	cmp	r3, #8
   26c84:	f000 80c8 	beq.w	26e18 <getTrngSource+0x268>
   26c88:	005b      	lsls	r3, r3, #1
   26c8a:	2200      	movs	r2, #0
   26c8c:	9308      	str	r3, [sp, #32]
   26c8e:	9200      	str	r2, [sp, #0]
   26c90:	ab08      	add	r3, sp, #32
   26c92:	4629      	mov	r1, r5
   26c94:	4648      	mov	r0, r9
   26c96:	f7ff fe73 	bl	26980 <startTrngHW>
   26c9a:	4b70      	ldr	r3, [pc, #448]	; (26e5c <getTrngSource+0x2ac>)
   26c9c:	4298      	cmp	r0, r3
   26c9e:	f000 80b7 	beq.w	26e10 <getTrngSource+0x260>
   26ca2:	2800      	cmp	r0, #0
   26ca4:	d1d3      	bne.n	26c4e <getTrngSource+0x9e>
   26ca6:	f8d9 2000 	ldr.w	r2, [r9]
   26caa:	0a13      	lsrs	r3, r2, #8
   26cac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   26cb0:	4313      	orrs	r3, r2
   26cb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   26cb6:	f8c9 3000 	str.w	r3, [r9]
   26cba:	9b05      	ldr	r3, [sp, #20]
   26cbc:	3b01      	subs	r3, #1
   26cbe:	9305      	str	r3, [sp, #20]
   26cc0:	d1a5      	bne.n	26c0e <getTrngSource+0x5e>
   26cc2:	2000      	movs	r0, #0
   26cc4:	e7c3      	b.n	26c4e <getTrngSource+0x9e>
   26cc6:	9808      	ldr	r0, [sp, #32]
   26cc8:	4629      	mov	r1, r5
   26cca:	f000 fc3d 	bl	27548 <LLF_RND_GetRoscSampleCnt>
   26cce:	2800      	cmp	r0, #0
   26cd0:	d1ba      	bne.n	26c48 <getTrngSource+0x98>
   26cd2:	9b08      	ldr	r3, [sp, #32]
   26cd4:	2b08      	cmp	r3, #8
   26cd6:	f000 8095 	beq.w	26e04 <getTrngSource+0x254>
   26cda:	2b04      	cmp	r3, #4
   26cdc:	f000 8095 	beq.w	26e0a <getTrngSource+0x25a>
   26ce0:	f1a3 0302 	sub.w	r3, r3, #2
   26ce4:	fab3 f383 	clz	r3, r3
   26ce8:	095b      	lsrs	r3, r3, #5
   26cea:	9304      	str	r3, [sp, #16]
   26cec:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   26cf0:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   26cf4:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   26cf8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   26cfa:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   26cfe:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   26d02:	4293      	cmp	r3, r2
   26d04:	d1f6      	bne.n	26cf4 <getTrngSource+0x144>
   26d06:	f04f 0b00 	mov.w	fp, #0
   26d0a:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   26d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26d12:	f7ff fd07 	bl	26724 <CC_HalClearInterruptBit>
   26d16:	f06f 031b 	mvn.w	r3, #27
   26d1a:	4658      	mov	r0, fp
   26d1c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   26d20:	f7ff fd0e 	bl	26740 <CC_HalMaskInterrupt>
   26d24:	9b04      	ldr	r3, [sp, #16]
   26d26:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   26d2a:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   26d2e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   26d32:	f7ff fd05 	bl	26740 <CC_HalMaskInterrupt>
   26d36:	230a      	movs	r3, #10
   26d38:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   26d3c:	692b      	ldr	r3, [r5, #16]
   26d3e:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   26d42:	fbab 2303 	umull	r2, r3, fp, r3
   26d46:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   26d48:	091b      	lsrs	r3, r3, #4
   26d4a:	fb02 f303 	mul.w	r3, r2, r3
   26d4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26d52:	03db      	lsls	r3, r3, #15
   26d54:	099b      	lsrs	r3, r3, #6
   26d56:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   26d5a:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   26d5e:	9908      	ldr	r1, [sp, #32]
   26d60:	f8d9 2000 	ldr.w	r2, [r9]
   26d64:	020b      	lsls	r3, r1, #8
   26d66:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26d6a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   26d6e:	4313      	orrs	r3, r2
   26d70:	f8c9 3000 	str.w	r3, [r9]
   26d74:	a809      	add	r0, sp, #36	; 0x24
   26d76:	f000 fbd7 	bl	27528 <LLF_RND_WaitRngInterrupt>
   26d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26d7c:	f003 031a 	and.w	r3, r3, #26
   26d80:	4303      	orrs	r3, r0
   26d82:	f47f af7d 	bne.w	26c80 <getTrngSource+0xd0>
   26d86:	fbab 3b06 	umull	r3, fp, fp, r6
   26d8a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   26d8e:	930a      	str	r3, [sp, #40]	; 0x28
   26d90:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   26d94:	930b      	str	r3, [sp, #44]	; 0x2c
   26d96:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   26d9a:	930c      	str	r3, [sp, #48]	; 0x30
   26d9c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   26da0:	930d      	str	r3, [sp, #52]	; 0x34
   26da2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   26da6:	930e      	str	r3, [sp, #56]	; 0x38
   26da8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   26dac:	930f      	str	r3, [sp, #60]	; 0x3c
   26dae:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   26db2:	d101      	bne.n	26db8 <getTrngSource+0x208>
   26db4:	9b03      	ldr	r3, [sp, #12]
   26db6:	b9eb      	cbnz	r3, 26df4 <getTrngSource+0x244>
   26db8:	4640      	mov	r0, r8
   26dba:	2218      	movs	r2, #24
   26dbc:	a90a      	add	r1, sp, #40	; 0x28
   26dbe:	3e18      	subs	r6, #24
   26dc0:	f108 0818 	add.w	r8, r8, #24
   26dc4:	f7ff fd3c 	bl	26840 <CC_PalMemCopyPlat>
   26dc8:	3701      	adds	r7, #1
   26dca:	2e00      	cmp	r6, #0
   26dcc:	f47f af29 	bne.w	26c22 <getTrngSource+0x72>
   26dd0:	9b06      	ldr	r3, [sp, #24]
   26dd2:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   26dd6:	d836      	bhi.n	26e46 <getTrngSource+0x296>
   26dd8:	9e07      	ldr	r6, [sp, #28]
   26dda:	696a      	ldr	r2, [r5, #20]
   26ddc:	4619      	mov	r1, r3
   26dde:	4630      	mov	r0, r6
   26de0:	461f      	mov	r7, r3
   26de2:	f7ff fe75 	bl	26ad0 <LLF_RND_RepetitionCounterTest.part.0>
   26de6:	b320      	cbz	r0, 26e32 <getTrngSource+0x282>
   26de8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   26dea:	2300      	movs	r3, #0
   26dec:	6013      	str	r3, [r2, #0]
   26dee:	e72b      	b.n	26c48 <getTrngSource+0x98>
   26df0:	481b      	ldr	r0, [pc, #108]	; (26e60 <getTrngSource+0x2b0>)
   26df2:	e729      	b.n	26c48 <getTrngSource+0x98>
   26df4:	4640      	mov	r0, r8
   26df6:	461a      	mov	r2, r3
   26df8:	a90a      	add	r1, sp, #40	; 0x28
   26dfa:	1af6      	subs	r6, r6, r3
   26dfc:	4498      	add	r8, r3
   26dfe:	f7ff fd1f 	bl	26840 <CC_PalMemCopyPlat>
   26e02:	e7e1      	b.n	26dc8 <getTrngSource+0x218>
   26e04:	2303      	movs	r3, #3
   26e06:	9304      	str	r3, [sp, #16]
   26e08:	e770      	b.n	26cec <getTrngSource+0x13c>
   26e0a:	2302      	movs	r3, #2
   26e0c:	9304      	str	r3, [sp, #16]
   26e0e:	e76d      	b.n	26cec <getTrngSource+0x13c>
   26e10:	6a2b      	ldr	r3, [r5, #32]
   26e12:	2b00      	cmp	r3, #0
   26e14:	f43f af1b 	beq.w	26c4e <getTrngSource+0x9e>
   26e18:	4812      	ldr	r0, [pc, #72]	; (26e64 <getTrngSource+0x2b4>)
   26e1a:	e718      	b.n	26c4e <getTrngSource+0x9e>
   26e1c:	9100      	str	r1, [sp, #0]
   26e1e:	ab08      	add	r3, sp, #32
   26e20:	2201      	movs	r2, #1
   26e22:	4629      	mov	r1, r5
   26e24:	4648      	mov	r0, r9
   26e26:	f7ff fdab 	bl	26980 <startTrngHW>
   26e2a:	2800      	cmp	r0, #0
   26e2c:	f43f aedf 	beq.w	26bee <getTrngSource+0x3e>
   26e30:	e70d      	b.n	26c4e <getTrngSource+0x9e>
   26e32:	69aa      	ldr	r2, [r5, #24]
   26e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
   26e38:	4639      	mov	r1, r7
   26e3a:	4630      	mov	r0, r6
   26e3c:	f7ff fe72 	bl	26b24 <LLF_RND_AdaptiveProportionTest>
   26e40:	2800      	cmp	r0, #0
   26e42:	d1d1      	bne.n	26de8 <getTrngSource+0x238>
   26e44:	e73d      	b.n	26cc2 <getTrngSource+0x112>
   26e46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   26e48:	601e      	str	r6, [r3, #0]
   26e4a:	e719      	b.n	26c80 <getTrngSource+0xd0>
   26e4c:	5002b000 	.word	0x5002b000
   26e50:	aaaaaaab 	.word	0xaaaaaaab
   26e54:	00f10c02 	.word	0x00f10c02
   26e58:	00f10c30 	.word	0x00f10c30
   26e5c:	00f10c31 	.word	0x00f10c31
   26e60:	00f10c35 	.word	0x00f10c35
   26e64:	00f10c32 	.word	0x00f10c32

00026e68 <LLF_RND_GetTrngSource>:
   26e68:	b410      	push	{r4}
   26e6a:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   26e6e:	9401      	str	r4, [sp, #4]
   26e70:	9c03      	ldr	r4, [sp, #12]
   26e72:	9402      	str	r4, [sp, #8]
   26e74:	2400      	movs	r4, #0
   26e76:	9403      	str	r4, [sp, #12]
   26e78:	bc10      	pop	{r4}
   26e7a:	f7ff be99 	b.w	26bb0 <getTrngSource>
   26e7e:	bf00      	nop

00026e80 <LLF_RND_RunTrngStartupTest>:
   26e80:	b510      	push	{r4, lr}
   26e82:	b086      	sub	sp, #24
   26e84:	ab05      	add	r3, sp, #20
   26e86:	2401      	movs	r4, #1
   26e88:	e9cd 2401 	strd	r2, r4, [sp, #4]
   26e8c:	9300      	str	r3, [sp, #0]
   26e8e:	2200      	movs	r2, #0
   26e90:	ab04      	add	r3, sp, #16
   26e92:	f7ff fe8d 	bl	26bb0 <getTrngSource>
   26e96:	b006      	add	sp, #24
   26e98:	bd10      	pop	{r4, pc}
   26e9a:	bf00      	nop

00026e9c <mbedtls_hardware_poll>:
   26e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   26e9e:	b089      	sub	sp, #36	; 0x24
   26ea0:	9205      	str	r2, [sp, #20]
   26ea2:	2900      	cmp	r1, #0
   26ea4:	d064      	beq.n	26f70 <mbedtls_hardware_poll+0xd4>
   26ea6:	461c      	mov	r4, r3
   26ea8:	2b00      	cmp	r3, #0
   26eaa:	d061      	beq.n	26f70 <mbedtls_hardware_poll+0xd4>
   26eac:	4615      	mov	r5, r2
   26eae:	2a00      	cmp	r2, #0
   26eb0:	d05e      	beq.n	26f70 <mbedtls_hardware_poll+0xd4>
   26eb2:	4f31      	ldr	r7, [pc, #196]	; (26f78 <mbedtls_hardware_poll+0xdc>)
   26eb4:	460e      	mov	r6, r1
   26eb6:	6838      	ldr	r0, [r7, #0]
   26eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26ebc:	f7ff fcdc 	bl	26878 <CC_PalMutexLock>
   26ec0:	2800      	cmp	r0, #0
   26ec2:	d14b      	bne.n	26f5c <mbedtls_hardware_poll+0xc0>
   26ec4:	2000      	movs	r0, #0
   26ec6:	f7ff fd07 	bl	268d8 <CC_PalPowerSaveModeSelect>
   26eca:	2800      	cmp	r0, #0
   26ecc:	d142      	bne.n	26f54 <mbedtls_hardware_poll+0xb8>
   26ece:	482b      	ldr	r0, [pc, #172]	; (26f7c <mbedtls_hardware_poll+0xe0>)
   26ed0:	f000 fa9a 	bl	27408 <RNG_PLAT_SetUserRngParameters>
   26ed4:	b1d8      	cbz	r0, 26f0e <mbedtls_hardware_poll+0x72>
   26ed6:	2001      	movs	r0, #1
   26ed8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   26edc:	f7ff fcfc 	bl	268d8 <CC_PalPowerSaveModeSelect>
   26ee0:	2800      	cmp	r0, #0
   26ee2:	d133      	bne.n	26f4c <mbedtls_hardware_poll+0xb0>
   26ee4:	4826      	ldr	r0, [pc, #152]	; (26f80 <mbedtls_hardware_poll+0xe4>)
   26ee6:	f44f 7108 	mov.w	r1, #544	; 0x220
   26eea:	f7fe fe63 	bl	25bb4 <mbedtls_zeroize_internal>
   26eee:	4825      	ldr	r0, [pc, #148]	; (26f84 <mbedtls_hardware_poll+0xe8>)
   26ef0:	2104      	movs	r1, #4
   26ef2:	f7fe fe5f 	bl	25bb4 <mbedtls_zeroize_internal>
   26ef6:	4821      	ldr	r0, [pc, #132]	; (26f7c <mbedtls_hardware_poll+0xe0>)
   26ef8:	2128      	movs	r1, #40	; 0x28
   26efa:	f7fe fe5b 	bl	25bb4 <mbedtls_zeroize_internal>
   26efe:	6838      	ldr	r0, [r7, #0]
   26f00:	f7ff fcc2 	bl	26888 <CC_PalMutexUnlock>
   26f04:	2800      	cmp	r0, #0
   26f06:	d12d      	bne.n	26f64 <mbedtls_hardware_poll+0xc8>
   26f08:	4630      	mov	r0, r6
   26f0a:	b009      	add	sp, #36	; 0x24
   26f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26f0e:	4b1c      	ldr	r3, [pc, #112]	; (26f80 <mbedtls_hardware_poll+0xe4>)
   26f10:	9302      	str	r3, [sp, #8]
   26f12:	ab07      	add	r3, sp, #28
   26f14:	9003      	str	r0, [sp, #12]
   26f16:	4602      	mov	r2, r0
   26f18:	9300      	str	r3, [sp, #0]
   26f1a:	4918      	ldr	r1, [pc, #96]	; (26f7c <mbedtls_hardware_poll+0xe0>)
   26f1c:	4819      	ldr	r0, [pc, #100]	; (26f84 <mbedtls_hardware_poll+0xe8>)
   26f1e:	9401      	str	r4, [sp, #4]
   26f20:	ab05      	add	r3, sp, #20
   26f22:	f7ff ffa1 	bl	26e68 <LLF_RND_GetTrngSource>
   26f26:	4603      	mov	r3, r0
   26f28:	2800      	cmp	r0, #0
   26f2a:	d1d4      	bne.n	26ed6 <mbedtls_hardware_poll+0x3a>
   26f2c:	6822      	ldr	r2, [r4, #0]
   26f2e:	42aa      	cmp	r2, r5
   26f30:	d3d1      	bcc.n	26ed6 <mbedtls_hardware_poll+0x3a>
   26f32:	9907      	ldr	r1, [sp, #28]
   26f34:	4630      	mov	r0, r6
   26f36:	3108      	adds	r1, #8
   26f38:	462a      	mov	r2, r5
   26f3a:	461e      	mov	r6, r3
   26f3c:	f7ff fc80 	bl	26840 <CC_PalMemCopyPlat>
   26f40:	6025      	str	r5, [r4, #0]
   26f42:	2001      	movs	r0, #1
   26f44:	f7ff fcc8 	bl	268d8 <CC_PalPowerSaveModeSelect>
   26f48:	2800      	cmp	r0, #0
   26f4a:	d0cb      	beq.n	26ee4 <mbedtls_hardware_poll+0x48>
   26f4c:	480e      	ldr	r0, [pc, #56]	; (26f88 <mbedtls_hardware_poll+0xec>)
   26f4e:	f7fe fd33 	bl	259b8 <CC_PalAbort>
   26f52:	e7c7      	b.n	26ee4 <mbedtls_hardware_poll+0x48>
   26f54:	480d      	ldr	r0, [pc, #52]	; (26f8c <mbedtls_hardware_poll+0xf0>)
   26f56:	f7fe fd2f 	bl	259b8 <CC_PalAbort>
   26f5a:	e7b8      	b.n	26ece <mbedtls_hardware_poll+0x32>
   26f5c:	480c      	ldr	r0, [pc, #48]	; (26f90 <mbedtls_hardware_poll+0xf4>)
   26f5e:	f7fe fd2b 	bl	259b8 <CC_PalAbort>
   26f62:	e7af      	b.n	26ec4 <mbedtls_hardware_poll+0x28>
   26f64:	480b      	ldr	r0, [pc, #44]	; (26f94 <mbedtls_hardware_poll+0xf8>)
   26f66:	f7fe fd27 	bl	259b8 <CC_PalAbort>
   26f6a:	4630      	mov	r0, r6
   26f6c:	b009      	add	sp, #36	; 0x24
   26f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26f70:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   26f74:	e7c8      	b.n	26f08 <mbedtls_hardware_poll+0x6c>
   26f76:	bf00      	nop
   26f78:	200008cc 	.word	0x200008cc
   26f7c:	200035a8 	.word	0x200035a8
   26f80:	20003388 	.word	0x20003388
   26f84:	20003384 	.word	0x20003384
   26f88:	0002d154 	.word	0x0002d154
   26f8c:	0002d134 	.word	0x0002d134
   26f90:	0002d11c 	.word	0x0002d11c
   26f94:	0002d1ac 	.word	0x0002d1ac

00026f98 <cc_mbedtls_aes_init>:
   26f98:	b510      	push	{r4, lr}
   26f9a:	4604      	mov	r4, r0
   26f9c:	b130      	cbz	r0, 26fac <cc_mbedtls_aes_init+0x14>
   26f9e:	2200      	movs	r2, #0
   26fa0:	2301      	movs	r3, #1
   26fa2:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   26fa6:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   26faa:	bd10      	pop	{r4, pc}
   26fac:	4801      	ldr	r0, [pc, #4]	; (26fb4 <cc_mbedtls_aes_init+0x1c>)
   26fae:	f7fe fd03 	bl	259b8 <CC_PalAbort>
   26fb2:	e7f4      	b.n	26f9e <cc_mbedtls_aes_init+0x6>
   26fb4:	0002d1c4 	.word	0x0002d1c4

00026fb8 <cc_mbedtls_aes_free>:
   26fb8:	b118      	cbz	r0, 26fc2 <cc_mbedtls_aes_free+0xa>
   26fba:	2274      	movs	r2, #116	; 0x74
   26fbc:	2100      	movs	r1, #0
   26fbe:	f7ff bc41 	b.w	26844 <CC_PalMemSetPlat>
   26fc2:	4770      	bx	lr

00026fc4 <cc_mbedtls_aes_setkey_enc>:
   26fc4:	b190      	cbz	r0, 26fec <cc_mbedtls_aes_setkey_enc+0x28>
   26fc6:	b1a1      	cbz	r1, 26ff2 <cc_mbedtls_aes_setkey_enc+0x2e>
   26fc8:	b510      	push	{r4, lr}
   26fca:	2a80      	cmp	r2, #128	; 0x80
   26fcc:	f04f 0400 	mov.w	r4, #0
   26fd0:	6384      	str	r4, [r0, #56]	; 0x38
   26fd2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   26fd6:	d106      	bne.n	26fe6 <cc_mbedtls_aes_setkey_enc+0x22>
   26fd8:	2210      	movs	r2, #16
   26fda:	6304      	str	r4, [r0, #48]	; 0x30
   26fdc:	4410      	add	r0, r2
   26fde:	f7ff fc2f 	bl	26840 <CC_PalMemCopyPlat>
   26fe2:	4620      	mov	r0, r4
   26fe4:	bd10      	pop	{r4, pc}
   26fe6:	f06f 001f 	mvn.w	r0, #31
   26fea:	bd10      	pop	{r4, pc}
   26fec:	f06f 0021 	mvn.w	r0, #33	; 0x21
   26ff0:	4770      	bx	lr
   26ff2:	f06f 001f 	mvn.w	r0, #31
   26ff6:	4770      	bx	lr

00026ff8 <cc_mbedtls_aes_crypt_ecb>:
   26ff8:	b328      	cbz	r0, 27046 <cc_mbedtls_aes_crypt_ecb+0x4e>
   26ffa:	b322      	cbz	r2, 27046 <cc_mbedtls_aes_crypt_ecb+0x4e>
   26ffc:	b31b      	cbz	r3, 27046 <cc_mbedtls_aes_crypt_ecb+0x4e>
   26ffe:	2901      	cmp	r1, #1
   27000:	d821      	bhi.n	27046 <cc_mbedtls_aes_crypt_ecb+0x4e>
   27002:	b570      	push	{r4, r5, r6, lr}
   27004:	4604      	mov	r4, r0
   27006:	6b81      	ldr	r1, [r0, #56]	; 0x38
   27008:	b086      	sub	sp, #24
   2700a:	d017      	beq.n	2703c <cc_mbedtls_aes_crypt_ecb+0x44>
   2700c:	2901      	cmp	r1, #1
   2700e:	d117      	bne.n	27040 <cc_mbedtls_aes_crypt_ecb+0x48>
   27010:	2510      	movs	r5, #16
   27012:	2100      	movs	r1, #0
   27014:	eb0d 0605 	add.w	r6, sp, r5
   27018:	6361      	str	r1, [r4, #52]	; 0x34
   2701a:	4610      	mov	r0, r2
   2701c:	9500      	str	r5, [sp, #0]
   2701e:	9601      	str	r6, [sp, #4]
   27020:	aa02      	add	r2, sp, #8
   27022:	4629      	mov	r1, r5
   27024:	f000 faca 	bl	275bc <SetDataBuffersInfo>
   27028:	b950      	cbnz	r0, 27040 <cc_mbedtls_aes_crypt_ecb+0x48>
   2702a:	462b      	mov	r3, r5
   2702c:	4632      	mov	r2, r6
   2702e:	a902      	add	r1, sp, #8
   27030:	4620      	mov	r0, r4
   27032:	f000 fd4b 	bl	27acc <ProcessAesDrv>
   27036:	b918      	cbnz	r0, 27040 <cc_mbedtls_aes_crypt_ecb+0x48>
   27038:	b006      	add	sp, #24
   2703a:	bd70      	pop	{r4, r5, r6, pc}
   2703c:	2900      	cmp	r1, #0
   2703e:	d0e7      	beq.n	27010 <cc_mbedtls_aes_crypt_ecb+0x18>
   27040:	f06f 0021 	mvn.w	r0, #33	; 0x21
   27044:	e7f8      	b.n	27038 <cc_mbedtls_aes_crypt_ecb+0x40>
   27046:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2704a:	4770      	bx	lr

0002704c <cc_mbedtls_sha256_init>:
   2704c:	b510      	push	{r4, lr}
   2704e:	4604      	mov	r4, r0
   27050:	b128      	cbz	r0, 2705e <cc_mbedtls_sha256_init+0x12>
   27052:	4620      	mov	r0, r4
   27054:	21f4      	movs	r1, #244	; 0xf4
   27056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2705a:	f7ff bbf5 	b.w	26848 <CC_PalMemSetZeroPlat>
   2705e:	4804      	ldr	r0, [pc, #16]	; (27070 <cc_mbedtls_sha256_init+0x24>)
   27060:	f7fe fcaa 	bl	259b8 <CC_PalAbort>
   27064:	4620      	mov	r0, r4
   27066:	21f4      	movs	r1, #244	; 0xf4
   27068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2706c:	f7ff bbec 	b.w	26848 <CC_PalMemSetZeroPlat>
   27070:	0002d1d8 	.word	0x0002d1d8

00027074 <cc_mbedtls_sha256_free>:
   27074:	b110      	cbz	r0, 2707c <cc_mbedtls_sha256_free+0x8>
   27076:	21f4      	movs	r1, #244	; 0xf4
   27078:	f7fe bd9c 	b.w	25bb4 <mbedtls_zeroize_internal>
   2707c:	4770      	bx	lr
   2707e:	bf00      	nop

00027080 <cc_mbedtls_sha256_starts>:
   27080:	b508      	push	{r3, lr}
   27082:	b161      	cbz	r1, 2709e <cc_mbedtls_sha256_starts+0x1e>
   27084:	2901      	cmp	r1, #1
   27086:	d107      	bne.n	27098 <cc_mbedtls_sha256_starts+0x18>
   27088:	2102      	movs	r1, #2
   2708a:	f000 f85b 	bl	27144 <mbedtls_sha_starts_internal>
   2708e:	2800      	cmp	r0, #0
   27090:	bf18      	it	ne
   27092:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   27096:	bd08      	pop	{r3, pc}
   27098:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2709c:	bd08      	pop	{r3, pc}
   2709e:	2101      	movs	r1, #1
   270a0:	f000 f850 	bl	27144 <mbedtls_sha_starts_internal>
   270a4:	e7f3      	b.n	2708e <cc_mbedtls_sha256_starts+0xe>
   270a6:	bf00      	nop

000270a8 <cc_mbedtls_sha256_update>:
   270a8:	b530      	push	{r4, r5, lr}
   270aa:	4605      	mov	r5, r0
   270ac:	1888      	adds	r0, r1, r2
   270ae:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   270b2:	b0a1      	sub	sp, #132	; 0x84
   270b4:	460b      	mov	r3, r1
   270b6:	4614      	mov	r4, r2
   270b8:	d801      	bhi.n	270be <cc_mbedtls_sha256_update+0x16>
   270ba:	2a80      	cmp	r2, #128	; 0x80
   270bc:	d90c      	bls.n	270d8 <cc_mbedtls_sha256_update+0x30>
   270be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   270c2:	d917      	bls.n	270f4 <cc_mbedtls_sha256_update+0x4c>
   270c4:	4622      	mov	r2, r4
   270c6:	4619      	mov	r1, r3
   270c8:	4628      	mov	r0, r5
   270ca:	f000 f87d 	bl	271c8 <mbedtls_sha_update_internal>
   270ce:	4604      	mov	r4, r0
   270d0:	b984      	cbnz	r4, 270f4 <cc_mbedtls_sha256_update+0x4c>
   270d2:	4620      	mov	r0, r4
   270d4:	b021      	add	sp, #132	; 0x84
   270d6:	bd30      	pop	{r4, r5, pc}
   270d8:	4668      	mov	r0, sp
   270da:	f7ff fbb1 	bl	26840 <CC_PalMemCopyPlat>
   270de:	4622      	mov	r2, r4
   270e0:	4669      	mov	r1, sp
   270e2:	4628      	mov	r0, r5
   270e4:	f000 f870 	bl	271c8 <mbedtls_sha_update_internal>
   270e8:	2180      	movs	r1, #128	; 0x80
   270ea:	4604      	mov	r4, r0
   270ec:	4668      	mov	r0, sp
   270ee:	f7ff fbab 	bl	26848 <CC_PalMemSetZeroPlat>
   270f2:	e7ed      	b.n	270d0 <cc_mbedtls_sha256_update+0x28>
   270f4:	f06f 0436 	mvn.w	r4, #54	; 0x36
   270f8:	e7eb      	b.n	270d2 <cc_mbedtls_sha256_update+0x2a>
   270fa:	bf00      	nop

000270fc <cc_mbedtls_sha256_finish>:
   270fc:	b570      	push	{r4, r5, r6, lr}
   270fe:	b1e8      	cbz	r0, 2713c <cc_mbedtls_sha256_finish+0x40>
   27100:	460e      	mov	r6, r1
   27102:	b1d9      	cbz	r1, 2713c <cc_mbedtls_sha256_finish+0x40>
   27104:	4604      	mov	r4, r0
   27106:	f000 f831 	bl	2716c <mbedtls_sha_finish_internal>
   2710a:	4605      	mov	r5, r0
   2710c:	b9b0      	cbnz	r0, 2713c <cc_mbedtls_sha256_finish+0x40>
   2710e:	6823      	ldr	r3, [r4, #0]
   27110:	2b01      	cmp	r3, #1
   27112:	d00b      	beq.n	2712c <cc_mbedtls_sha256_finish+0x30>
   27114:	2b02      	cmp	r3, #2
   27116:	d001      	beq.n	2711c <cc_mbedtls_sha256_finish+0x20>
   27118:	4628      	mov	r0, r5
   2711a:	bd70      	pop	{r4, r5, r6, pc}
   2711c:	221c      	movs	r2, #28
   2711e:	f104 0108 	add.w	r1, r4, #8
   27122:	4630      	mov	r0, r6
   27124:	f7ff fb8c 	bl	26840 <CC_PalMemCopyPlat>
   27128:	4628      	mov	r0, r5
   2712a:	bd70      	pop	{r4, r5, r6, pc}
   2712c:	2220      	movs	r2, #32
   2712e:	f104 0108 	add.w	r1, r4, #8
   27132:	4630      	mov	r0, r6
   27134:	f7ff fb84 	bl	26840 <CC_PalMemCopyPlat>
   27138:	4628      	mov	r0, r5
   2713a:	bd70      	pop	{r4, r5, r6, pc}
   2713c:	f06f 0536 	mvn.w	r5, #54	; 0x36
   27140:	e7ea      	b.n	27118 <cc_mbedtls_sha256_finish+0x1c>
   27142:	bf00      	nop

00027144 <mbedtls_sha_starts_internal>:
   27144:	b178      	cbz	r0, 27166 <mbedtls_sha_starts_internal+0x22>
   27146:	b538      	push	{r3, r4, r5, lr}
   27148:	4604      	mov	r4, r0
   2714a:	460d      	mov	r5, r1
   2714c:	21f0      	movs	r1, #240	; 0xf0
   2714e:	f7ff fb7b 	bl	26848 <CC_PalMemSetZeroPlat>
   27152:	2340      	movs	r3, #64	; 0x40
   27154:	6025      	str	r5, [r4, #0]
   27156:	65e3      	str	r3, [r4, #92]	; 0x5c
   27158:	4620      	mov	r0, r4
   2715a:	f000 fa63 	bl	27624 <InitHashDrv>
   2715e:	3800      	subs	r0, #0
   27160:	bf18      	it	ne
   27162:	2001      	movne	r0, #1
   27164:	bd38      	pop	{r3, r4, r5, pc}
   27166:	2001      	movs	r0, #1
   27168:	4770      	bx	lr
   2716a:	bf00      	nop

0002716c <mbedtls_sha_finish_internal>:
   2716c:	b570      	push	{r4, r5, r6, lr}
   2716e:	6e05      	ldr	r5, [r0, #96]	; 0x60
   27170:	b0a4      	sub	sp, #144	; 0x90
   27172:	4604      	mov	r4, r0
   27174:	ae04      	add	r6, sp, #16
   27176:	b9e5      	cbnz	r5, 271b2 <mbedtls_sha_finish_internal+0x46>
   27178:	2201      	movs	r2, #1
   2717a:	2300      	movs	r3, #0
   2717c:	6062      	str	r2, [r4, #4]
   2717e:	4630      	mov	r0, r6
   27180:	e9cd 3300 	strd	r3, r3, [sp]
   27184:	aa02      	add	r2, sp, #8
   27186:	4629      	mov	r1, r5
   27188:	f000 fa18 	bl	275bc <SetDataBuffersInfo>
   2718c:	b110      	cbz	r0, 27194 <mbedtls_sha_finish_internal+0x28>
   2718e:	2001      	movs	r0, #1
   27190:	b024      	add	sp, #144	; 0x90
   27192:	bd70      	pop	{r4, r5, r6, pc}
   27194:	462a      	mov	r2, r5
   27196:	a902      	add	r1, sp, #8
   27198:	4620      	mov	r0, r4
   2719a:	f000 fa6d 	bl	27678 <ProcessHashDrv>
   2719e:	2800      	cmp	r0, #0
   271a0:	d1f5      	bne.n	2718e <mbedtls_sha_finish_internal+0x22>
   271a2:	4620      	mov	r0, r4
   271a4:	f000 fb7e 	bl	278a4 <FinishHashDrv>
   271a8:	2800      	cmp	r0, #0
   271aa:	d1f0      	bne.n	2718e <mbedtls_sha_finish_internal+0x22>
   271ac:	6620      	str	r0, [r4, #96]	; 0x60
   271ae:	b024      	add	sp, #144	; 0x90
   271b0:	bd70      	pop	{r4, r5, r6, pc}
   271b2:	2d80      	cmp	r5, #128	; 0x80
   271b4:	462a      	mov	r2, r5
   271b6:	f100 0164 	add.w	r1, r0, #100	; 0x64
   271ba:	bf28      	it	cs
   271bc:	2280      	movcs	r2, #128	; 0x80
   271be:	4630      	mov	r0, r6
   271c0:	f7ff fb3e 	bl	26840 <CC_PalMemCopyPlat>
   271c4:	6e25      	ldr	r5, [r4, #96]	; 0x60
   271c6:	e7d7      	b.n	27178 <mbedtls_sha_finish_internal+0xc>

000271c8 <mbedtls_sha_update_internal>:
   271c8:	2800      	cmp	r0, #0
   271ca:	f000 80cd 	beq.w	27368 <mbedtls_sha_update_internal+0x1a0>
   271ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   271d2:	4615      	mov	r5, r2
   271d4:	b0a5      	sub	sp, #148	; 0x94
   271d6:	2a00      	cmp	r2, #0
   271d8:	f000 80b4 	beq.w	27344 <mbedtls_sha_update_internal+0x17c>
   271dc:	460f      	mov	r7, r1
   271de:	2900      	cmp	r1, #0
   271e0:	f000 80ac 	beq.w	2733c <mbedtls_sha_update_internal+0x174>
   271e4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   271e8:	4606      	mov	r6, r0
   271ea:	6e00      	ldr	r0, [r0, #96]	; 0x60
   271ec:	d37d      	bcc.n	272ea <mbedtls_sha_update_internal+0x122>
   271ee:	f64f 78ff 	movw	r8, #65535	; 0xffff
   271f2:	f106 0964 	add.w	r9, r6, #100	; 0x64
   271f6:	e014      	b.n	27222 <mbedtls_sha_update_internal+0x5a>
   271f8:	4283      	cmp	r3, r0
   271fa:	46ba      	mov	sl, r7
   271fc:	f64f 74ff 	movw	r4, #65535	; 0xffff
   27200:	d029      	beq.n	27256 <mbedtls_sha_update_internal+0x8e>
   27202:	fbb4 fbf3 	udiv	fp, r4, r3
   27206:	fb03 fb0b 	mul.w	fp, r3, fp
   2720a:	f1bb 0f00 	cmp.w	fp, #0
   2720e:	d144      	bne.n	2729a <mbedtls_sha_update_internal+0xd2>
   27210:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   27214:	4447      	add	r7, r8
   27216:	3dff      	subs	r5, #255	; 0xff
   27218:	2c00      	cmp	r4, #0
   2721a:	d159      	bne.n	272d0 <mbedtls_sha_update_internal+0x108>
   2721c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   27220:	d363      	bcc.n	272ea <mbedtls_sha_update_internal+0x122>
   27222:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   27224:	1a1c      	subs	r4, r3, r0
   27226:	fbb4 f2f3 	udiv	r2, r4, r3
   2722a:	fb03 4412 	mls	r4, r3, r2, r4
   2722e:	2c00      	cmp	r4, #0
   27230:	d0e2      	beq.n	271f8 <mbedtls_sha_update_internal+0x30>
   27232:	4544      	cmp	r4, r8
   27234:	bf28      	it	cs
   27236:	4644      	movcs	r4, r8
   27238:	4622      	mov	r2, r4
   2723a:	4448      	add	r0, r9
   2723c:	4639      	mov	r1, r7
   2723e:	f7ff faff 	bl	26840 <CC_PalMemCopyPlat>
   27242:	6e30      	ldr	r0, [r6, #96]	; 0x60
   27244:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   27246:	4420      	add	r0, r4
   27248:	4283      	cmp	r3, r0
   2724a:	eb07 0a04 	add.w	sl, r7, r4
   2724e:	6630      	str	r0, [r6, #96]	; 0x60
   27250:	eba8 0404 	sub.w	r4, r8, r4
   27254:	d1d5      	bne.n	27202 <mbedtls_sha_update_internal+0x3a>
   27256:	2b80      	cmp	r3, #128	; 0x80
   27258:	bf28      	it	cs
   2725a:	2380      	movcs	r3, #128	; 0x80
   2725c:	461a      	mov	r2, r3
   2725e:	4649      	mov	r1, r9
   27260:	a804      	add	r0, sp, #16
   27262:	f7ff faed 	bl	26840 <CC_PalMemCopyPlat>
   27266:	2300      	movs	r3, #0
   27268:	e9cd 3300 	strd	r3, r3, [sp]
   2726c:	aa02      	add	r2, sp, #8
   2726e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   27270:	a804      	add	r0, sp, #16
   27272:	f000 f9a3 	bl	275bc <SetDataBuffersInfo>
   27276:	2800      	cmp	r0, #0
   27278:	d160      	bne.n	2733c <mbedtls_sha_update_internal+0x174>
   2727a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2727c:	a902      	add	r1, sp, #8
   2727e:	4630      	mov	r0, r6
   27280:	f000 f9fa 	bl	27678 <ProcessHashDrv>
   27284:	2800      	cmp	r0, #0
   27286:	d159      	bne.n	2733c <mbedtls_sha_update_internal+0x174>
   27288:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   2728a:	fbb4 fbf3 	udiv	fp, r4, r3
   2728e:	fb03 fb0b 	mul.w	fp, r3, fp
   27292:	6630      	str	r0, [r6, #96]	; 0x60
   27294:	f1bb 0f00 	cmp.w	fp, #0
   27298:	d0ba      	beq.n	27210 <mbedtls_sha_update_internal+0x48>
   2729a:	2300      	movs	r3, #0
   2729c:	e9cd 3300 	strd	r3, r3, [sp]
   272a0:	aa02      	add	r2, sp, #8
   272a2:	4659      	mov	r1, fp
   272a4:	4650      	mov	r0, sl
   272a6:	f000 f989 	bl	275bc <SetDataBuffersInfo>
   272aa:	2800      	cmp	r0, #0
   272ac:	d146      	bne.n	2733c <mbedtls_sha_update_internal+0x174>
   272ae:	a902      	add	r1, sp, #8
   272b0:	465a      	mov	r2, fp
   272b2:	4630      	mov	r0, r6
   272b4:	f000 f9e0 	bl	27678 <ProcessHashDrv>
   272b8:	2800      	cmp	r0, #0
   272ba:	d13f      	bne.n	2733c <mbedtls_sha_update_internal+0x174>
   272bc:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   272c0:	eba4 040b 	sub.w	r4, r4, fp
   272c4:	6e30      	ldr	r0, [r6, #96]	; 0x60
   272c6:	44da      	add	sl, fp
   272c8:	4447      	add	r7, r8
   272ca:	3dff      	subs	r5, #255	; 0xff
   272cc:	2c00      	cmp	r4, #0
   272ce:	d0a5      	beq.n	2721c <mbedtls_sha_update_internal+0x54>
   272d0:	3019      	adds	r0, #25
   272d2:	4651      	mov	r1, sl
   272d4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   272d8:	4622      	mov	r2, r4
   272da:	f7ff fab1 	bl	26840 <CC_PalMemCopyPlat>
   272de:	6e30      	ldr	r0, [r6, #96]	; 0x60
   272e0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   272e4:	4420      	add	r0, r4
   272e6:	6630      	str	r0, [r6, #96]	; 0x60
   272e8:	d29b      	bcs.n	27222 <mbedtls_sha_update_internal+0x5a>
   272ea:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   272ec:	1a14      	subs	r4, r2, r0
   272ee:	fbb4 f3f2 	udiv	r3, r4, r2
   272f2:	fb02 4413 	mls	r4, r2, r3, r4
   272f6:	42ac      	cmp	r4, r5
   272f8:	bf28      	it	cs
   272fa:	462c      	movcs	r4, r5
   272fc:	bb34      	cbnz	r4, 2734c <mbedtls_sha_update_internal+0x184>
   272fe:	4290      	cmp	r0, r2
   27300:	d034      	beq.n	2736c <mbedtls_sha_update_internal+0x1a4>
   27302:	fbb5 f4f2 	udiv	r4, r5, r2
   27306:	fb02 f404 	mul.w	r4, r2, r4
   2730a:	b96c      	cbnz	r4, 27328 <mbedtls_sha_update_internal+0x160>
   2730c:	b1d5      	cbz	r5, 27344 <mbedtls_sha_update_internal+0x17c>
   2730e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   27310:	3319      	adds	r3, #25
   27312:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   27316:	462a      	mov	r2, r5
   27318:	4639      	mov	r1, r7
   2731a:	f7ff fa91 	bl	26840 <CC_PalMemCopyPlat>
   2731e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   27320:	442b      	add	r3, r5
   27322:	2000      	movs	r0, #0
   27324:	6633      	str	r3, [r6, #96]	; 0x60
   27326:	e00a      	b.n	2733e <mbedtls_sha_update_internal+0x176>
   27328:	2300      	movs	r3, #0
   2732a:	e9cd 3300 	strd	r3, r3, [sp]
   2732e:	aa02      	add	r2, sp, #8
   27330:	4621      	mov	r1, r4
   27332:	4638      	mov	r0, r7
   27334:	f000 f942 	bl	275bc <SetDataBuffersInfo>
   27338:	2800      	cmp	r0, #0
   2733a:	d033      	beq.n	273a4 <mbedtls_sha_update_internal+0x1dc>
   2733c:	2001      	movs	r0, #1
   2733e:	b025      	add	sp, #148	; 0x94
   27340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27344:	4628      	mov	r0, r5
   27346:	b025      	add	sp, #148	; 0x94
   27348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2734c:	f106 0364 	add.w	r3, r6, #100	; 0x64
   27350:	4639      	mov	r1, r7
   27352:	4622      	mov	r2, r4
   27354:	4418      	add	r0, r3
   27356:	f7ff fa73 	bl	26840 <CC_PalMemCopyPlat>
   2735a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   2735c:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2735e:	4420      	add	r0, r4
   27360:	1b2d      	subs	r5, r5, r4
   27362:	4427      	add	r7, r4
   27364:	6630      	str	r0, [r6, #96]	; 0x60
   27366:	e7ca      	b.n	272fe <mbedtls_sha_update_internal+0x136>
   27368:	2001      	movs	r0, #1
   2736a:	4770      	bx	lr
   2736c:	2a80      	cmp	r2, #128	; 0x80
   2736e:	bf28      	it	cs
   27370:	2280      	movcs	r2, #128	; 0x80
   27372:	f106 0164 	add.w	r1, r6, #100	; 0x64
   27376:	a804      	add	r0, sp, #16
   27378:	f7ff fa62 	bl	26840 <CC_PalMemCopyPlat>
   2737c:	2300      	movs	r3, #0
   2737e:	e9cd 3300 	strd	r3, r3, [sp]
   27382:	a804      	add	r0, sp, #16
   27384:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   27386:	aa02      	add	r2, sp, #8
   27388:	f000 f918 	bl	275bc <SetDataBuffersInfo>
   2738c:	2800      	cmp	r0, #0
   2738e:	d1d5      	bne.n	2733c <mbedtls_sha_update_internal+0x174>
   27390:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   27392:	a902      	add	r1, sp, #8
   27394:	4630      	mov	r0, r6
   27396:	f000 f96f 	bl	27678 <ProcessHashDrv>
   2739a:	2800      	cmp	r0, #0
   2739c:	d1ce      	bne.n	2733c <mbedtls_sha_update_internal+0x174>
   2739e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   273a0:	6630      	str	r0, [r6, #96]	; 0x60
   273a2:	e7ae      	b.n	27302 <mbedtls_sha_update_internal+0x13a>
   273a4:	a902      	add	r1, sp, #8
   273a6:	4622      	mov	r2, r4
   273a8:	4630      	mov	r0, r6
   273aa:	f000 f965 	bl	27678 <ProcessHashDrv>
   273ae:	2800      	cmp	r0, #0
   273b0:	d1c4      	bne.n	2733c <mbedtls_sha_update_internal+0x174>
   273b2:	4427      	add	r7, r4
   273b4:	1b2d      	subs	r5, r5, r4
   273b6:	e7a9      	b.n	2730c <mbedtls_sha_update_internal+0x144>

000273b8 <cc_mbedtls_sha256>:
   273b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   273ba:	461c      	mov	r4, r3
   273bc:	4605      	mov	r5, r0
   273be:	4811      	ldr	r0, [pc, #68]	; (27404 <cc_mbedtls_sha256+0x4c>)
   273c0:	460e      	mov	r6, r1
   273c2:	4617      	mov	r7, r2
   273c4:	f7ff fe42 	bl	2704c <cc_mbedtls_sha256_init>
   273c8:	4621      	mov	r1, r4
   273ca:	480e      	ldr	r0, [pc, #56]	; (27404 <cc_mbedtls_sha256+0x4c>)
   273cc:	f7ff fe58 	bl	27080 <cc_mbedtls_sha256_starts>
   273d0:	4604      	mov	r4, r0
   273d2:	b120      	cbz	r0, 273de <cc_mbedtls_sha256+0x26>
   273d4:	480b      	ldr	r0, [pc, #44]	; (27404 <cc_mbedtls_sha256+0x4c>)
   273d6:	f7ff fe4d 	bl	27074 <cc_mbedtls_sha256_free>
   273da:	4620      	mov	r0, r4
   273dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   273de:	4809      	ldr	r0, [pc, #36]	; (27404 <cc_mbedtls_sha256+0x4c>)
   273e0:	4632      	mov	r2, r6
   273e2:	4629      	mov	r1, r5
   273e4:	f7ff fe60 	bl	270a8 <cc_mbedtls_sha256_update>
   273e8:	4604      	mov	r4, r0
   273ea:	2800      	cmp	r0, #0
   273ec:	d1f2      	bne.n	273d4 <cc_mbedtls_sha256+0x1c>
   273ee:	4639      	mov	r1, r7
   273f0:	4804      	ldr	r0, [pc, #16]	; (27404 <cc_mbedtls_sha256+0x4c>)
   273f2:	f7ff fe83 	bl	270fc <cc_mbedtls_sha256_finish>
   273f6:	4604      	mov	r4, r0
   273f8:	4802      	ldr	r0, [pc, #8]	; (27404 <cc_mbedtls_sha256+0x4c>)
   273fa:	f7ff fe3b 	bl	27074 <cc_mbedtls_sha256_free>
   273fe:	4620      	mov	r0, r4
   27400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27402:	bf00      	nop
   27404:	200035d0 	.word	0x200035d0

00027408 <RNG_PLAT_SetUserRngParameters>:
   27408:	b530      	push	{r4, r5, lr}
   2740a:	b083      	sub	sp, #12
   2740c:	231c      	movs	r3, #28
   2740e:	a901      	add	r1, sp, #4
   27410:	4604      	mov	r4, r0
   27412:	9301      	str	r3, [sp, #4]
   27414:	f000 f834 	bl	27480 <CC_PalTrngParamGet>
   27418:	4605      	mov	r5, r0
   2741a:	b938      	cbnz	r0, 2742c <RNG_PLAT_SetUserRngParameters+0x24>
   2741c:	9b01      	ldr	r3, [sp, #4]
   2741e:	2b1c      	cmp	r3, #28
   27420:	d007      	beq.n	27432 <RNG_PLAT_SetUserRngParameters+0x2a>
   27422:	4d15      	ldr	r5, [pc, #84]	; (27478 <RNG_PLAT_SetUserRngParameters+0x70>)
   27424:	211c      	movs	r1, #28
   27426:	4620      	mov	r0, r4
   27428:	f7ff fa0e 	bl	26848 <CC_PalMemSetZeroPlat>
   2742c:	4628      	mov	r0, r5
   2742e:	b003      	add	sp, #12
   27430:	bd30      	pop	{r4, r5, pc}
   27432:	e9d4 3200 	ldrd	r3, r2, [r4]
   27436:	2101      	movs	r1, #1
   27438:	3b00      	subs	r3, #0
   2743a:	61e1      	str	r1, [r4, #28]
   2743c:	bf18      	it	ne
   2743e:	2301      	movne	r3, #1
   27440:	b10a      	cbz	r2, 27446 <RNG_PLAT_SetUserRngParameters+0x3e>
   27442:	f043 0302 	orr.w	r3, r3, #2
   27446:	68a2      	ldr	r2, [r4, #8]
   27448:	b932      	cbnz	r2, 27458 <RNG_PLAT_SetUserRngParameters+0x50>
   2744a:	68e2      	ldr	r2, [r4, #12]
   2744c:	b942      	cbnz	r2, 27460 <RNG_PLAT_SetUserRngParameters+0x58>
   2744e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   27452:	b97b      	cbnz	r3, 27474 <RNG_PLAT_SetUserRngParameters+0x6c>
   27454:	4d09      	ldr	r5, [pc, #36]	; (2747c <RNG_PLAT_SetUserRngParameters+0x74>)
   27456:	e7e5      	b.n	27424 <RNG_PLAT_SetUserRngParameters+0x1c>
   27458:	68e2      	ldr	r2, [r4, #12]
   2745a:	f043 0304 	orr.w	r3, r3, #4
   2745e:	b13a      	cbz	r2, 27470 <RNG_PLAT_SetUserRngParameters+0x68>
   27460:	f043 0308 	orr.w	r3, r3, #8
   27464:	2200      	movs	r2, #0
   27466:	4628      	mov	r0, r5
   27468:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2746c:	b003      	add	sp, #12
   2746e:	bd30      	pop	{r4, r5, pc}
   27470:	e9c4 3208 	strd	r3, r2, [r4, #32]
   27474:	4615      	mov	r5, r2
   27476:	e7d9      	b.n	2742c <RNG_PLAT_SetUserRngParameters+0x24>
   27478:	00f00c37 	.word	0x00f00c37
   2747c:	00f00c0e 	.word	0x00f00c0e

00027480 <CC_PalTrngParamGet>:
   27480:	b118      	cbz	r0, 2748a <CC_PalTrngParamGet+0xa>
   27482:	b111      	cbz	r1, 2748a <CC_PalTrngParamGet+0xa>
   27484:	680b      	ldr	r3, [r1, #0]
   27486:	2b1c      	cmp	r3, #28
   27488:	d001      	beq.n	2748e <CC_PalTrngParamGet+0xe>
   2748a:	2001      	movs	r0, #1
   2748c:	4770      	bx	lr
   2748e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27492:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   27496:	3201      	adds	r2, #1
   27498:	bf14      	ite	ne
   2749a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   2749e:	f241 225c 	movweq	r2, #4700	; 0x125c
   274a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   274a6:	6002      	str	r2, [r0, #0]
   274a8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   274ac:	3201      	adds	r2, #1
   274ae:	bf14      	ite	ne
   274b0:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   274b4:	f641 1264 	movweq	r2, #6500	; 0x1964
   274b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   274bc:	6042      	str	r2, [r0, #4]
   274be:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   274c2:	3201      	adds	r2, #1
   274c4:	bf14      	ite	ne
   274c6:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   274ca:	f640 62d8 	movweq	r2, #3800	; 0xed8
   274ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   274d2:	6082      	str	r2, [r0, #8]
   274d4:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   274d8:	3201      	adds	r2, #1
   274da:	bf14      	ite	ne
   274dc:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   274e0:	f241 3288 	movweq	r2, #5000	; 0x1388
   274e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   274e8:	60c2      	str	r2, [r0, #12]
   274ea:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   274ee:	3201      	adds	r2, #1
   274f0:	bf14      	ite	ne
   274f2:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   274f6:	2290      	moveq	r2, #144	; 0x90
   274f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   274fc:	6102      	str	r2, [r0, #16]
   274fe:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   27502:	3201      	adds	r2, #1
   27504:	bf14      	ite	ne
   27506:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   2750a:	2251      	moveq	r2, #81	; 0x51
   2750c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27510:	6142      	str	r2, [r0, #20]
   27512:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   27516:	3201      	adds	r2, #1
   27518:	bf14      	ite	ne
   2751a:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   2751e:	f240 3337 	movweq	r3, #823	; 0x337
   27522:	6183      	str	r3, [r0, #24]
   27524:	2000      	movs	r0, #0
   27526:	4770      	bx	lr

00027528 <LLF_RND_WaitRngInterrupt>:
   27528:	b508      	push	{r3, lr}
   2752a:	4601      	mov	r1, r0
   2752c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   27530:	f7ff f912 	bl	26758 <CC_HalWaitInterruptRND>
   27534:	4b03      	ldr	r3, [pc, #12]	; (27544 <LLF_RND_WaitRngInterrupt+0x1c>)
   27536:	2200      	movs	r2, #0
   27538:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   2753c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   27540:	bd08      	pop	{r3, pc}
   27542:	bf00      	nop
   27544:	5002b000 	.word	0x5002b000

00027548 <LLF_RND_GetRoscSampleCnt>:
   27548:	3801      	subs	r0, #1
   2754a:	2807      	cmp	r0, #7
   2754c:	d805      	bhi.n	2755a <LLF_RND_GetRoscSampleCnt+0x12>
   2754e:	e8df f000 	tbb	[pc, r0]
   27552:	0e12      	.short	0x0e12
   27554:	04040a04 	.word	0x04040a04
   27558:	0604      	.short	0x0604
   2755a:	4809      	ldr	r0, [pc, #36]	; (27580 <LLF_RND_GetRoscSampleCnt+0x38>)
   2755c:	4770      	bx	lr
   2755e:	68cb      	ldr	r3, [r1, #12]
   27560:	624b      	str	r3, [r1, #36]	; 0x24
   27562:	2000      	movs	r0, #0
   27564:	4770      	bx	lr
   27566:	688b      	ldr	r3, [r1, #8]
   27568:	624b      	str	r3, [r1, #36]	; 0x24
   2756a:	2000      	movs	r0, #0
   2756c:	4770      	bx	lr
   2756e:	684b      	ldr	r3, [r1, #4]
   27570:	624b      	str	r3, [r1, #36]	; 0x24
   27572:	2000      	movs	r0, #0
   27574:	4770      	bx	lr
   27576:	680b      	ldr	r3, [r1, #0]
   27578:	624b      	str	r3, [r1, #36]	; 0x24
   2757a:	2000      	movs	r0, #0
   2757c:	4770      	bx	lr
   2757e:	bf00      	nop
   27580:	00f10c31 	.word	0x00f10c31

00027584 <LLF_RND_GetFastestRosc>:
   27584:	680b      	ldr	r3, [r1, #0]
   27586:	e002      	b.n	2758e <LLF_RND_GetFastestRosc+0xa>
   27588:	2b08      	cmp	r3, #8
   2758a:	600b      	str	r3, [r1, #0]
   2758c:	d806      	bhi.n	2759c <LLF_RND_GetFastestRosc+0x18>
   2758e:	6a02      	ldr	r2, [r0, #32]
   27590:	4213      	tst	r3, r2
   27592:	ea4f 0343 	mov.w	r3, r3, lsl #1
   27596:	d0f7      	beq.n	27588 <LLF_RND_GetFastestRosc+0x4>
   27598:	2000      	movs	r0, #0
   2759a:	4770      	bx	lr
   2759c:	4800      	ldr	r0, [pc, #0]	; (275a0 <LLF_RND_GetFastestRosc+0x1c>)
   2759e:	4770      	bx	lr
   275a0:	00f10c31 	.word	0x00f10c31

000275a4 <LLF_RND_TurnOffTrng>:
   275a4:	4b04      	ldr	r3, [pc, #16]	; (275b8 <LLF_RND_TurnOffTrng+0x14>)
   275a6:	2200      	movs	r2, #0
   275a8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   275ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
   275b0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   275b4:	f7ff b8b6 	b.w	26724 <CC_HalClearInterruptBit>
   275b8:	5002b000 	.word	0x5002b000

000275bc <SetDataBuffersInfo>:
   275bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   275be:	b083      	sub	sp, #12
   275c0:	461d      	mov	r5, r3
   275c2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   275c6:	f04f 0300 	mov.w	r3, #0
   275ca:	f88d 3007 	strb.w	r3, [sp, #7]
   275ce:	d324      	bcc.n	2761a <SetDataBuffersInfo+0x5e>
   275d0:	468c      	mov	ip, r1
   275d2:	4484      	add	ip, r0
   275d4:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   275d8:	4604      	mov	r4, r0
   275da:	d81e      	bhi.n	2761a <SetDataBuffersInfo+0x5e>
   275dc:	4617      	mov	r7, r2
   275de:	f10d 0307 	add.w	r3, sp, #7
   275e2:	2201      	movs	r2, #1
   275e4:	f000 fe68 	bl	282b8 <CC_PalDataBufferAttrGet>
   275e8:	4606      	mov	r6, r0
   275ea:	b9b0      	cbnz	r0, 2761a <SetDataBuffersInfo+0x5e>
   275ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   275ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   275f2:	603c      	str	r4, [r7, #0]
   275f4:	713b      	strb	r3, [r7, #4]
   275f6:	b192      	cbz	r2, 2761e <SetDataBuffersInfo+0x62>
   275f8:	b14d      	cbz	r5, 2760e <SetDataBuffersInfo+0x52>
   275fa:	4602      	mov	r2, r0
   275fc:	9908      	ldr	r1, [sp, #32]
   275fe:	f10d 0307 	add.w	r3, sp, #7
   27602:	4628      	mov	r0, r5
   27604:	f000 fe58 	bl	282b8 <CC_PalDataBufferAttrGet>
   27608:	b938      	cbnz	r0, 2761a <SetDataBuffersInfo+0x5e>
   2760a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2760e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27610:	4630      	mov	r0, r6
   27612:	6015      	str	r5, [r2, #0]
   27614:	7113      	strb	r3, [r2, #4]
   27616:	b003      	add	sp, #12
   27618:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2761a:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   2761e:	4630      	mov	r0, r6
   27620:	b003      	add	sp, #12
   27622:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027624 <InitHashDrv>:
   27624:	b1e8      	cbz	r0, 27662 <InitHashDrv+0x3e>
   27626:	b510      	push	{r4, lr}
   27628:	6804      	ldr	r4, [r0, #0]
   2762a:	2c01      	cmp	r4, #1
   2762c:	d004      	beq.n	27638 <InitHashDrv+0x14>
   2762e:	2c02      	cmp	r4, #2
   27630:	d010      	beq.n	27654 <InitHashDrv+0x30>
   27632:	b144      	cbz	r4, 27646 <InitHashDrv+0x22>
   27634:	480c      	ldr	r0, [pc, #48]	; (27668 <InitHashDrv+0x44>)
   27636:	bd10      	pop	{r4, pc}
   27638:	490c      	ldr	r1, [pc, #48]	; (2766c <InitHashDrv+0x48>)
   2763a:	2220      	movs	r2, #32
   2763c:	3008      	adds	r0, #8
   2763e:	f7ff f8ff 	bl	26840 <CC_PalMemCopyPlat>
   27642:	2000      	movs	r0, #0
   27644:	bd10      	pop	{r4, pc}
   27646:	490a      	ldr	r1, [pc, #40]	; (27670 <InitHashDrv+0x4c>)
   27648:	2214      	movs	r2, #20
   2764a:	3008      	adds	r0, #8
   2764c:	f7ff f8f8 	bl	26840 <CC_PalMemCopyPlat>
   27650:	4620      	mov	r0, r4
   27652:	bd10      	pop	{r4, pc}
   27654:	4907      	ldr	r1, [pc, #28]	; (27674 <InitHashDrv+0x50>)
   27656:	2220      	movs	r2, #32
   27658:	3008      	adds	r0, #8
   2765a:	f7ff f8f1 	bl	26840 <CC_PalMemCopyPlat>
   2765e:	2000      	movs	r0, #0
   27660:	bd10      	pop	{r4, pc}
   27662:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   27666:	4770      	bx	lr
   27668:	00f30001 	.word	0x00f30001
   2766c:	0002d21c 	.word	0x0002d21c
   27670:	0002d1e8 	.word	0x0002d1e8
   27674:	0002d1fc 	.word	0x0002d1fc

00027678 <ProcessHashDrv>:
   27678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2767c:	2900      	cmp	r1, #0
   2767e:	f000 80f9 	beq.w	27874 <ProcessHashDrv+0x1fc>
   27682:	4604      	mov	r4, r0
   27684:	2800      	cmp	r0, #0
   27686:	f000 80f9 	beq.w	2787c <ProcessHashDrv+0x204>
   2768a:	6803      	ldr	r3, [r0, #0]
   2768c:	4690      	mov	r8, r2
   2768e:	460f      	mov	r7, r1
   27690:	2b00      	cmp	r3, #0
   27692:	f000 80c3 	beq.w	2781c <ProcessHashDrv+0x1a4>
   27696:	3b01      	subs	r3, #1
   27698:	2b01      	cmp	r3, #1
   2769a:	f200 80d7 	bhi.w	2784c <ProcessHashDrv+0x1d4>
   2769e:	4879      	ldr	r0, [pc, #484]	; (27884 <ProcessHashDrv+0x20c>)
   276a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   276a4:	f04f 0902 	mov.w	r9, #2
   276a8:	f7ff f8e6 	bl	26878 <CC_PalMutexLock>
   276ac:	2800      	cmp	r0, #0
   276ae:	f040 80bf 	bne.w	27830 <ProcessHashDrv+0x1b8>
   276b2:	2000      	movs	r0, #0
   276b4:	f7ff f910 	bl	268d8 <CC_PalPowerSaveModeSelect>
   276b8:	4606      	mov	r6, r0
   276ba:	2800      	cmp	r0, #0
   276bc:	f040 80c2 	bne.w	27844 <ProcessHashDrv+0x1cc>
   276c0:	4a71      	ldr	r2, [pc, #452]	; (27888 <ProcessHashDrv+0x210>)
   276c2:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   276c6:	2b00      	cmp	r3, #0
   276c8:	d1fb      	bne.n	276c2 <ProcessHashDrv+0x4a>
   276ca:	4d6f      	ldr	r5, [pc, #444]	; (27888 <ProcessHashDrv+0x210>)
   276cc:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   276d0:	2b00      	cmp	r3, #0
   276d2:	d1fb      	bne.n	276cc <ProcessHashDrv+0x54>
   276d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   276d8:	f7ff f824 	bl	26724 <CC_HalClearInterruptBit>
   276dc:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   276e0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   276e4:	f7ff f82c 	bl	26740 <CC_HalMaskInterrupt>
   276e8:	2301      	movs	r3, #1
   276ea:	2207      	movs	r2, #7
   276ec:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   276f0:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   276f4:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   276f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   276fa:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   276fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   27700:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   27704:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   27708:	6823      	ldr	r3, [r4, #0]
   2770a:	b15b      	cbz	r3, 27724 <ProcessHashDrv+0xac>
   2770c:	3b01      	subs	r3, #1
   2770e:	2b01      	cmp	r3, #1
   27710:	d818      	bhi.n	27744 <ProcessHashDrv+0xcc>
   27712:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27714:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   27718:	6a23      	ldr	r3, [r4, #32]
   2771a:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   2771e:	69e3      	ldr	r3, [r4, #28]
   27720:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   27724:	4b58      	ldr	r3, [pc, #352]	; (27888 <ProcessHashDrv+0x210>)
   27726:	69a2      	ldr	r2, [r4, #24]
   27728:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   2772c:	6962      	ldr	r2, [r4, #20]
   2772e:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   27732:	6922      	ldr	r2, [r4, #16]
   27734:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   27738:	68e2      	ldr	r2, [r4, #12]
   2773a:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   2773e:	68a2      	ldr	r2, [r4, #8]
   27740:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   27744:	4a50      	ldr	r2, [pc, #320]	; (27888 <ProcessHashDrv+0x210>)
   27746:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2774a:	2b00      	cmp	r3, #0
   2774c:	d1fb      	bne.n	27746 <ProcessHashDrv+0xce>
   2774e:	f1b8 0f00 	cmp.w	r8, #0
   27752:	d05f      	beq.n	27814 <ProcessHashDrv+0x19c>
   27754:	6863      	ldr	r3, [r4, #4]
   27756:	2b01      	cmp	r3, #1
   27758:	bf08      	it	eq
   2775a:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   2775e:	4b4a      	ldr	r3, [pc, #296]	; (27888 <ProcessHashDrv+0x210>)
   27760:	683a      	ldr	r2, [r7, #0]
   27762:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   27766:	2040      	movs	r0, #64	; 0x40
   27768:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   2776c:	f7fe ffee 	bl	2674c <CC_HalWaitInterrupt>
   27770:	4606      	mov	r6, r0
   27772:	4a45      	ldr	r2, [pc, #276]	; (27888 <ProcessHashDrv+0x210>)
   27774:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27778:	2b00      	cmp	r3, #0
   2777a:	d1fb      	bne.n	27774 <ProcessHashDrv+0xfc>
   2777c:	4a42      	ldr	r2, [pc, #264]	; (27888 <ProcessHashDrv+0x210>)
   2777e:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   27782:	2b00      	cmp	r3, #0
   27784:	d1fb      	bne.n	2777e <ProcessHashDrv+0x106>
   27786:	6823      	ldr	r3, [r4, #0]
   27788:	b15b      	cbz	r3, 277a2 <ProcessHashDrv+0x12a>
   2778a:	3b01      	subs	r3, #1
   2778c:	2b01      	cmp	r3, #1
   2778e:	d818      	bhi.n	277c2 <ProcessHashDrv+0x14a>
   27790:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   27794:	6263      	str	r3, [r4, #36]	; 0x24
   27796:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   2779a:	6223      	str	r3, [r4, #32]
   2779c:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   277a0:	61e3      	str	r3, [r4, #28]
   277a2:	4b39      	ldr	r3, [pc, #228]	; (27888 <ProcessHashDrv+0x210>)
   277a4:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   277a8:	61a2      	str	r2, [r4, #24]
   277aa:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   277ae:	6162      	str	r2, [r4, #20]
   277b0:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   277b4:	6122      	str	r2, [r4, #16]
   277b6:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   277ba:	60e2      	str	r2, [r4, #12]
   277bc:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   277c0:	60a3      	str	r3, [r4, #8]
   277c2:	4a31      	ldr	r2, [pc, #196]	; (27888 <ProcessHashDrv+0x210>)
   277c4:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   277c8:	64a1      	str	r1, [r4, #72]	; 0x48
   277ca:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   277ce:	64e1      	str	r1, [r4, #76]	; 0x4c
   277d0:	2300      	movs	r3, #0
   277d2:	2101      	movs	r1, #1
   277d4:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   277d8:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   277dc:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   277e0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   277e4:	2b00      	cmp	r3, #0
   277e6:	d1fb      	bne.n	277e0 <ProcessHashDrv+0x168>
   277e8:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   277ec:	2e00      	cmp	r6, #0
   277ee:	d13b      	bne.n	27868 <ProcessHashDrv+0x1f0>
   277f0:	4b25      	ldr	r3, [pc, #148]	; (27888 <ProcessHashDrv+0x210>)
   277f2:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   277f6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   277fa:	f7fe ffa1 	bl	26740 <CC_HalMaskInterrupt>
   277fe:	2001      	movs	r0, #1
   27800:	f7ff f86a 	bl	268d8 <CC_PalPowerSaveModeSelect>
   27804:	bb60      	cbnz	r0, 27860 <ProcessHashDrv+0x1e8>
   27806:	481f      	ldr	r0, [pc, #124]	; (27884 <ProcessHashDrv+0x20c>)
   27808:	f7ff f83e 	bl	26888 <CC_PalMutexUnlock>
   2780c:	bb10      	cbnz	r0, 27854 <ProcessHashDrv+0x1dc>
   2780e:	4630      	mov	r0, r6
   27810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27814:	2304      	movs	r3, #4
   27816:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   2781a:	e7aa      	b.n	27772 <ProcessHashDrv+0xfa>
   2781c:	4819      	ldr	r0, [pc, #100]	; (27884 <ProcessHashDrv+0x20c>)
   2781e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27822:	f04f 0901 	mov.w	r9, #1
   27826:	f7ff f827 	bl	26878 <CC_PalMutexLock>
   2782a:	2800      	cmp	r0, #0
   2782c:	f43f af41 	beq.w	276b2 <ProcessHashDrv+0x3a>
   27830:	4816      	ldr	r0, [pc, #88]	; (2788c <ProcessHashDrv+0x214>)
   27832:	f7fe f8c1 	bl	259b8 <CC_PalAbort>
   27836:	2000      	movs	r0, #0
   27838:	f7ff f84e 	bl	268d8 <CC_PalPowerSaveModeSelect>
   2783c:	4606      	mov	r6, r0
   2783e:	2800      	cmp	r0, #0
   27840:	f43f af3e 	beq.w	276c0 <ProcessHashDrv+0x48>
   27844:	4812      	ldr	r0, [pc, #72]	; (27890 <ProcessHashDrv+0x218>)
   27846:	f7fe f8b7 	bl	259b8 <CC_PalAbort>
   2784a:	e739      	b.n	276c0 <ProcessHashDrv+0x48>
   2784c:	4e11      	ldr	r6, [pc, #68]	; (27894 <ProcessHashDrv+0x21c>)
   2784e:	4630      	mov	r0, r6
   27850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27854:	4810      	ldr	r0, [pc, #64]	; (27898 <ProcessHashDrv+0x220>)
   27856:	f7fe f8af 	bl	259b8 <CC_PalAbort>
   2785a:	4630      	mov	r0, r6
   2785c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27860:	480e      	ldr	r0, [pc, #56]	; (2789c <ProcessHashDrv+0x224>)
   27862:	f7fe f8a9 	bl	259b8 <CC_PalAbort>
   27866:	e7ce      	b.n	27806 <ProcessHashDrv+0x18e>
   27868:	2110      	movs	r1, #16
   2786a:	f104 0008 	add.w	r0, r4, #8
   2786e:	f7fe ffeb 	bl	26848 <CC_PalMemSetZeroPlat>
   27872:	e7bd      	b.n	277f0 <ProcessHashDrv+0x178>
   27874:	4e0a      	ldr	r6, [pc, #40]	; (278a0 <ProcessHashDrv+0x228>)
   27876:	4630      	mov	r0, r6
   27878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2787c:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   27880:	e7c5      	b.n	2780e <ProcessHashDrv+0x196>
   27882:	bf00      	nop
   27884:	200008c8 	.word	0x200008c8
   27888:	5002b000 	.word	0x5002b000
   2788c:	0002d11c 	.word	0x0002d11c
   27890:	0002d134 	.word	0x0002d134
   27894:	00f30001 	.word	0x00f30001
   27898:	0002d174 	.word	0x0002d174
   2789c:	0002d154 	.word	0x0002d154
   278a0:	00f30003 	.word	0x00f30003

000278a4 <FinishHashDrv>:
   278a4:	b398      	cbz	r0, 2790e <FinishHashDrv+0x6a>
   278a6:	b470      	push	{r4, r5, r6}
   278a8:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   278ac:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   278b0:	ba26      	rev	r6, r4
   278b2:	ba0d      	rev	r5, r1
   278b4:	ba14      	rev	r4, r2
   278b6:	ba19      	rev	r1, r3
   278b8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   278bc:	ba12      	rev	r2, r2
   278be:	e9c0 4104 	strd	r4, r1, [r0, #16]
   278c2:	6182      	str	r2, [r0, #24]
   278c4:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   278c8:	e9c0 6502 	strd	r6, r5, [r0, #8]
   278cc:	ba1b      	rev	r3, r3
   278ce:	ba25      	rev	r5, r4
   278d0:	e9c0 3507 	strd	r3, r5, [r0, #28]
   278d4:	ba14      	rev	r4, r2
   278d6:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   278da:	6a81      	ldr	r1, [r0, #40]	; 0x28
   278dc:	ba12      	rev	r2, r2
   278de:	ba09      	rev	r1, r1
   278e0:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   278e4:	62c2      	str	r2, [r0, #44]	; 0x2c
   278e6:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   278ea:	ba1b      	rev	r3, r3
   278ec:	ba25      	rev	r5, r4
   278ee:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   278f2:	ba14      	rev	r4, r2
   278f4:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   278f8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   278fa:	ba12      	rev	r2, r2
   278fc:	ba09      	rev	r1, r1
   278fe:	ba1b      	rev	r3, r3
   27900:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   27904:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   27908:	2000      	movs	r0, #0
   2790a:	bc70      	pop	{r4, r5, r6}
   2790c:	4770      	bx	lr
   2790e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   27912:	4770      	bx	lr

00027914 <LoadAesKey>:
   27914:	2800      	cmp	r0, #0
   27916:	d046      	beq.n	279a6 <LoadAesKey+0x92>
   27918:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   2791c:	2b00      	cmp	r3, #0
   2791e:	d033      	beq.n	27988 <LoadAesKey+0x74>
   27920:	2b03      	cmp	r3, #3
   27922:	b510      	push	{r4, lr}
   27924:	d013      	beq.n	2794e <LoadAesKey+0x3a>
   27926:	4821      	ldr	r0, [pc, #132]	; (279ac <LoadAesKey+0x98>)
   27928:	4c21      	ldr	r4, [pc, #132]	; (279b0 <LoadAesKey+0x9c>)
   2792a:	6822      	ldr	r2, [r4, #0]
   2792c:	4b21      	ldr	r3, [pc, #132]	; (279b4 <LoadAesKey+0xa0>)
   2792e:	6812      	ldr	r2, [r2, #0]
   27930:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   27934:	6822      	ldr	r2, [r4, #0]
   27936:	6852      	ldr	r2, [r2, #4]
   27938:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   2793c:	6822      	ldr	r2, [r4, #0]
   2793e:	6892      	ldr	r2, [r2, #8]
   27940:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   27944:	6822      	ldr	r2, [r4, #0]
   27946:	68d2      	ldr	r2, [r2, #12]
   27948:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2794c:	bd10      	pop	{r4, pc}
   2794e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   27950:	6c00      	ldr	r0, [r0, #64]	; 0x40
   27952:	4c17      	ldr	r4, [pc, #92]	; (279b0 <LoadAesKey+0x9c>)
   27954:	f000 fbac 	bl	280b0 <kmu_validate_kdr_slot_and_size>
   27958:	2800      	cmp	r0, #0
   2795a:	d1e6      	bne.n	2792a <LoadAesKey+0x16>
   2795c:	6822      	ldr	r2, [r4, #0]
   2795e:	4b15      	ldr	r3, [pc, #84]	; (279b4 <LoadAesKey+0xa0>)
   27960:	6812      	ldr	r2, [r2, #0]
   27962:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   27966:	6822      	ldr	r2, [r4, #0]
   27968:	6852      	ldr	r2, [r2, #4]
   2796a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   2796e:	6822      	ldr	r2, [r4, #0]
   27970:	6892      	ldr	r2, [r2, #8]
   27972:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   27976:	6822      	ldr	r2, [r4, #0]
   27978:	68d2      	ldr	r2, [r2, #12]
   2797a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2797e:	f000 fba3 	bl	280c8 <kmu_use_kdr_key>
   27982:	2800      	cmp	r0, #0
   27984:	d1d1      	bne.n	2792a <LoadAesKey+0x16>
   27986:	bd10      	pop	{r4, pc}
   27988:	4a0a      	ldr	r2, [pc, #40]	; (279b4 <LoadAesKey+0xa0>)
   2798a:	6901      	ldr	r1, [r0, #16]
   2798c:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   27990:	6941      	ldr	r1, [r0, #20]
   27992:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   27996:	6981      	ldr	r1, [r0, #24]
   27998:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   2799c:	69c1      	ldr	r1, [r0, #28]
   2799e:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   279a2:	4618      	mov	r0, r3
   279a4:	4770      	bx	lr
   279a6:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   279aa:	4770      	bx	lr
   279ac:	00f10009 	.word	0x00f10009
   279b0:	200008b8 	.word	0x200008b8
   279b4:	5002b000 	.word	0x5002b000

000279b8 <InitAes.part.0>:
   279b8:	4a37      	ldr	r2, [pc, #220]	; (27a98 <InitAes.part.0+0xe0>)
   279ba:	b538      	push	{r3, r4, r5, lr}
   279bc:	4604      	mov	r4, r0
   279be:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   279c2:	2b00      	cmp	r3, #0
   279c4:	d1fb      	bne.n	279be <InitAes.part.0+0x6>
   279c6:	4a34      	ldr	r2, [pc, #208]	; (27a98 <InitAes.part.0+0xe0>)
   279c8:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   279cc:	2b00      	cmp	r3, #0
   279ce:	d1fb      	bne.n	279c8 <InitAes.part.0+0x10>
   279d0:	4a31      	ldr	r2, [pc, #196]	; (27a98 <InitAes.part.0+0xe0>)
   279d2:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   279d6:	2b00      	cmp	r3, #0
   279d8:	d1fb      	bne.n	279d2 <InitAes.part.0+0x1a>
   279da:	4a2f      	ldr	r2, [pc, #188]	; (27a98 <InitAes.part.0+0xe0>)
   279dc:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   279e0:	2b00      	cmp	r3, #0
   279e2:	d1fb      	bne.n	279dc <InitAes.part.0+0x24>
   279e4:	4a2c      	ldr	r2, [pc, #176]	; (27a98 <InitAes.part.0+0xe0>)
   279e6:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   279ea:	2b00      	cmp	r3, #0
   279ec:	d1fb      	bne.n	279e6 <InitAes.part.0+0x2e>
   279ee:	4d2a      	ldr	r5, [pc, #168]	; (27a98 <InitAes.part.0+0xe0>)
   279f0:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   279f4:	2b00      	cmp	r3, #0
   279f6:	d1fb      	bne.n	279f0 <InitAes.part.0+0x38>
   279f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   279fc:	f7fe fe92 	bl	26724 <CC_HalClearInterruptBit>
   27a00:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27a02:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   27a06:	f023 0304 	bic.w	r3, r3, #4
   27a0a:	2b03      	cmp	r3, #3
   27a0c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27a0e:	d039      	beq.n	27a84 <InitAes.part.0+0xcc>
   27a10:	2b01      	cmp	r3, #1
   27a12:	bf0c      	ite	eq
   27a14:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   27a18:	f020 0020 	bicne.w	r0, r0, #32
   27a1c:	f7fe fe90 	bl	26740 <CC_HalMaskInterrupt>
   27a20:	4a1d      	ldr	r2, [pc, #116]	; (27a98 <InitAes.part.0+0xe0>)
   27a22:	2301      	movs	r3, #1
   27a24:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   27a28:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27a2c:	2b00      	cmp	r3, #0
   27a2e:	d1fb      	bne.n	27a28 <InitAes.part.0+0x70>
   27a30:	4a19      	ldr	r2, [pc, #100]	; (27a98 <InitAes.part.0+0xe0>)
   27a32:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   27a36:	2b00      	cmp	r3, #0
   27a38:	d1fb      	bne.n	27a32 <InitAes.part.0+0x7a>
   27a3a:	4917      	ldr	r1, [pc, #92]	; (27a98 <InitAes.part.0+0xe0>)
   27a3c:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   27a40:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   27a44:	2b00      	cmp	r3, #0
   27a46:	d1fb      	bne.n	27a40 <InitAes.part.0+0x88>
   27a48:	4a13      	ldr	r2, [pc, #76]	; (27a98 <InitAes.part.0+0xe0>)
   27a4a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   27a4e:	2b00      	cmp	r3, #0
   27a50:	d1fb      	bne.n	27a4a <InitAes.part.0+0x92>
   27a52:	6b62      	ldr	r2, [r4, #52]	; 0x34
   27a54:	f022 0104 	bic.w	r1, r2, #4
   27a58:	2903      	cmp	r1, #3
   27a5a:	bf18      	it	ne
   27a5c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   27a5e:	490e      	ldr	r1, [pc, #56]	; (27a98 <InitAes.part.0+0xe0>)
   27a60:	ea4f 0282 	mov.w	r2, r2, lsl #2
   27a64:	bf18      	it	ne
   27a66:	f003 0301 	andne.w	r3, r3, #1
   27a6a:	f002 021c 	and.w	r2, r2, #28
   27a6e:	4313      	orrs	r3, r2
   27a70:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   27a74:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27a76:	2b07      	cmp	r3, #7
   27a78:	bf04      	itt	eq
   27a7a:	2301      	moveq	r3, #1
   27a7c:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   27a80:	2000      	movs	r0, #0
   27a82:	bd38      	pop	{r3, r4, r5, pc}
   27a84:	2b01      	cmp	r3, #1
   27a86:	bf0c      	ite	eq
   27a88:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   27a8c:	f020 0010 	bicne.w	r0, r0, #16
   27a90:	f7fe fe56 	bl	26740 <CC_HalMaskInterrupt>
   27a94:	e7c4      	b.n	27a20 <InitAes.part.0+0x68>
   27a96:	bf00      	nop
   27a98:	5002b000 	.word	0x5002b000

00027a9c <write_invalid_key>:
   27a9c:	4a09      	ldr	r2, [pc, #36]	; (27ac4 <write_invalid_key+0x28>)
   27a9e:	4b0a      	ldr	r3, [pc, #40]	; (27ac8 <write_invalid_key+0x2c>)
   27aa0:	6811      	ldr	r1, [r2, #0]
   27aa2:	6809      	ldr	r1, [r1, #0]
   27aa4:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   27aa8:	6811      	ldr	r1, [r2, #0]
   27aaa:	6849      	ldr	r1, [r1, #4]
   27aac:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   27ab0:	6811      	ldr	r1, [r2, #0]
   27ab2:	6889      	ldr	r1, [r1, #8]
   27ab4:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   27ab8:	6812      	ldr	r2, [r2, #0]
   27aba:	68d2      	ldr	r2, [r2, #12]
   27abc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   27ac0:	4770      	bx	lr
   27ac2:	bf00      	nop
   27ac4:	200008b8 	.word	0x200008b8
   27ac8:	5002b000 	.word	0x5002b000

00027acc <ProcessAesDrv>:
   27acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ad0:	b085      	sub	sp, #20
   27ad2:	2900      	cmp	r1, #0
   27ad4:	f000 80a3 	beq.w	27c1e <ProcessAesDrv+0x152>
   27ad8:	4690      	mov	r8, r2
   27ada:	2a00      	cmp	r2, #0
   27adc:	f000 809f 	beq.w	27c1e <ProcessAesDrv+0x152>
   27ae0:	4605      	mov	r5, r0
   27ae2:	2800      	cmp	r0, #0
   27ae4:	f000 813c 	beq.w	27d60 <ProcessAesDrv+0x294>
   27ae8:	4699      	mov	r9, r3
   27aea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   27aec:	460e      	mov	r6, r1
   27aee:	2b00      	cmp	r3, #0
   27af0:	d151      	bne.n	27b96 <ProcessAesDrv+0xca>
   27af2:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   27af6:	d253      	bcs.n	27ba0 <ProcessAesDrv+0xd4>
   27af8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   27afc:	2b04      	cmp	r3, #4
   27afe:	f000 8112 	beq.w	27d26 <ProcessAesDrv+0x25a>
   27b02:	2700      	movs	r7, #0
   27b04:	48a6      	ldr	r0, [pc, #664]	; (27da0 <ProcessAesDrv+0x2d4>)
   27b06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27b0a:	f7fe feb5 	bl	26878 <CC_PalMutexLock>
   27b0e:	2800      	cmp	r0, #0
   27b10:	f040 80e8 	bne.w	27ce4 <ProcessAesDrv+0x218>
   27b14:	2000      	movs	r0, #0
   27b16:	f7fe fedf 	bl	268d8 <CC_PalPowerSaveModeSelect>
   27b1a:	2800      	cmp	r0, #0
   27b1c:	f040 80eb 	bne.w	27cf6 <ProcessAesDrv+0x22a>
   27b20:	48a0      	ldr	r0, [pc, #640]	; (27da4 <ProcessAesDrv+0x2d8>)
   27b22:	2301      	movs	r3, #1
   27b24:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   27b28:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   27b2c:	2c00      	cmp	r4, #0
   27b2e:	d1fb      	bne.n	27b28 <ProcessAesDrv+0x5c>
   27b30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27b32:	2b03      	cmp	r3, #3
   27b34:	dc39      	bgt.n	27baa <ProcessAesDrv+0xde>
   27b36:	2b00      	cmp	r3, #0
   27b38:	da3a      	bge.n	27bb0 <ProcessAesDrv+0xe4>
   27b3a:	4c9b      	ldr	r4, [pc, #620]	; (27da8 <ProcessAesDrv+0x2dc>)
   27b3c:	4a99      	ldr	r2, [pc, #612]	; (27da4 <ProcessAesDrv+0x2d8>)
   27b3e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27b42:	2b00      	cmp	r3, #0
   27b44:	d1fb      	bne.n	27b3e <ProcessAesDrv+0x72>
   27b46:	2f00      	cmp	r7, #0
   27b48:	f040 80e4 	bne.w	27d14 <ProcessAesDrv+0x248>
   27b4c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27b4e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   27b50:	f023 0304 	bic.w	r3, r3, #4
   27b54:	2b03      	cmp	r3, #3
   27b56:	4b93      	ldr	r3, [pc, #588]	; (27da4 <ProcessAesDrv+0x2d8>)
   27b58:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   27b5c:	d056      	beq.n	27c0c <ProcessAesDrv+0x140>
   27b5e:	2a01      	cmp	r2, #1
   27b60:	bf0c      	ite	eq
   27b62:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   27b66:	f040 0020 	orrne.w	r0, r0, #32
   27b6a:	f7fe fde9 	bl	26740 <CC_HalMaskInterrupt>
   27b6e:	4b8d      	ldr	r3, [pc, #564]	; (27da4 <ProcessAesDrv+0x2d8>)
   27b70:	2200      	movs	r2, #0
   27b72:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   27b76:	2001      	movs	r0, #1
   27b78:	f7fe feae 	bl	268d8 <CC_PalPowerSaveModeSelect>
   27b7c:	2800      	cmp	r0, #0
   27b7e:	f040 80c5 	bne.w	27d0c <ProcessAesDrv+0x240>
   27b82:	4887      	ldr	r0, [pc, #540]	; (27da0 <ProcessAesDrv+0x2d4>)
   27b84:	f7fe fe80 	bl	26888 <CC_PalMutexUnlock>
   27b88:	2800      	cmp	r0, #0
   27b8a:	f040 80b8 	bne.w	27cfe <ProcessAesDrv+0x232>
   27b8e:	4620      	mov	r0, r4
   27b90:	b005      	add	sp, #20
   27b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b96:	2b01      	cmp	r3, #1
   27b98:	d1ae      	bne.n	27af8 <ProcessAesDrv+0x2c>
   27b9a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   27b9e:	d3ab      	bcc.n	27af8 <ProcessAesDrv+0x2c>
   27ba0:	4c82      	ldr	r4, [pc, #520]	; (27dac <ProcessAesDrv+0x2e0>)
   27ba2:	4620      	mov	r0, r4
   27ba4:	b005      	add	sp, #20
   27ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27baa:	3b06      	subs	r3, #6
   27bac:	2b01      	cmp	r3, #1
   27bae:	d8c4      	bhi.n	27b3a <ProcessAesDrv+0x6e>
   27bb0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   27bb2:	2b01      	cmp	r3, #1
   27bb4:	f200 80d2 	bhi.w	27d5c <ProcessAesDrv+0x290>
   27bb8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   27bba:	2b01      	cmp	r3, #1
   27bbc:	d834      	bhi.n	27c28 <ProcessAesDrv+0x15c>
   27bbe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   27bc0:	2b01      	cmp	r3, #1
   27bc2:	f200 8122 	bhi.w	27e0a <ProcessAesDrv+0x33e>
   27bc6:	4628      	mov	r0, r5
   27bc8:	f7ff fef6 	bl	279b8 <InitAes.part.0>
   27bcc:	4604      	mov	r4, r0
   27bce:	2800      	cmp	r0, #0
   27bd0:	d1b4      	bne.n	27b3c <ProcessAesDrv+0x70>
   27bd2:	4628      	mov	r0, r5
   27bd4:	f7ff fe9e 	bl	27914 <LoadAesKey>
   27bd8:	4604      	mov	r4, r0
   27bda:	2800      	cmp	r0, #0
   27bdc:	d1ae      	bne.n	27b3c <ProcessAesDrv+0x70>
   27bde:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27be0:	2b07      	cmp	r3, #7
   27be2:	d8aa      	bhi.n	27b3a <ProcessAesDrv+0x6e>
   27be4:	a201      	add	r2, pc, #4	; (adr r2, 27bec <ProcessAesDrv+0x120>)
   27be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27bea:	bf00      	nop
   27bec:	00027c49 	.word	0x00027c49
   27bf0:	00027c2d 	.word	0x00027c2d
   27bf4:	00027dd1 	.word	0x00027dd1
   27bf8:	00027c2d 	.word	0x00027c2d
   27bfc:	00027b3b 	.word	0x00027b3b
   27c00:	00027b3b 	.word	0x00027b3b
   27c04:	00027dd1 	.word	0x00027dd1
   27c08:	00027c2d 	.word	0x00027c2d
   27c0c:	2a01      	cmp	r2, #1
   27c0e:	bf0c      	ite	eq
   27c10:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   27c14:	f040 0010 	orrne.w	r0, r0, #16
   27c18:	f7fe fd92 	bl	26740 <CC_HalMaskInterrupt>
   27c1c:	e7a7      	b.n	27b6e <ProcessAesDrv+0xa2>
   27c1e:	4c64      	ldr	r4, [pc, #400]	; (27db0 <ProcessAesDrv+0x2e4>)
   27c20:	4620      	mov	r0, r4
   27c22:	b005      	add	sp, #20
   27c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c28:	4c62      	ldr	r4, [pc, #392]	; (27db4 <ProcessAesDrv+0x2e8>)
   27c2a:	e787      	b.n	27b3c <ProcessAesDrv+0x70>
   27c2c:	4b5d      	ldr	r3, [pc, #372]	; (27da4 <ProcessAesDrv+0x2d8>)
   27c2e:	682a      	ldr	r2, [r5, #0]
   27c30:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   27c34:	686a      	ldr	r2, [r5, #4]
   27c36:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   27c3a:	68aa      	ldr	r2, [r5, #8]
   27c3c:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   27c40:	68ea      	ldr	r2, [r5, #12]
   27c42:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   27c46:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27c48:	6832      	ldr	r2, [r6, #0]
   27c4a:	f023 0304 	bic.w	r3, r3, #4
   27c4e:	2b03      	cmp	r3, #3
   27c50:	d00d      	beq.n	27c6e <ProcessAesDrv+0x1a2>
   27c52:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   27c54:	f8d8 1000 	ldr.w	r1, [r8]
   27c58:	2b01      	cmp	r3, #1
   27c5a:	4b52      	ldr	r3, [pc, #328]	; (27da4 <ProcessAesDrv+0x2d8>)
   27c5c:	bf0b      	itete	eq
   27c5e:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   27c62:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   27c66:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   27c6a:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   27c6e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   27c70:	2b01      	cmp	r3, #1
   27c72:	4b4c      	ldr	r3, [pc, #304]	; (27da4 <ProcessAesDrv+0x2d8>)
   27c74:	bf0b      	itete	eq
   27c76:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   27c7a:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   27c7e:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   27c82:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   27c86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27c88:	f023 0304 	bic.w	r3, r3, #4
   27c8c:	2b03      	cmp	r3, #3
   27c8e:	d06a      	beq.n	27d66 <ProcessAesDrv+0x29a>
   27c90:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   27c92:	2b01      	cmp	r3, #1
   27c94:	bf0c      	ite	eq
   27c96:	2080      	moveq	r0, #128	; 0x80
   27c98:	2020      	movne	r0, #32
   27c9a:	f7fe fd57 	bl	2674c <CC_HalWaitInterrupt>
   27c9e:	4604      	mov	r4, r0
   27ca0:	2800      	cmp	r0, #0
   27ca2:	f47f af4b 	bne.w	27b3c <ProcessAesDrv+0x70>
   27ca6:	4b3f      	ldr	r3, [pc, #252]	; (27da4 <ProcessAesDrv+0x2d8>)
   27ca8:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   27cac:	2c00      	cmp	r4, #0
   27cae:	d1fb      	bne.n	27ca8 <ProcessAesDrv+0x1dc>
   27cb0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27cb2:	3b01      	subs	r3, #1
   27cb4:	2b06      	cmp	r3, #6
   27cb6:	d812      	bhi.n	27cde <ProcessAesDrv+0x212>
   27cb8:	e8df f003 	tbb	[pc, r3]
   27cbc:	11049904 	.word	0x11049904
   27cc0:	9911      	.short	0x9911
   27cc2:	04          	.byte	0x04
   27cc3:	00          	.byte	0x00
   27cc4:	4b37      	ldr	r3, [pc, #220]	; (27da4 <ProcessAesDrv+0x2d8>)
   27cc6:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   27cca:	602a      	str	r2, [r5, #0]
   27ccc:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   27cd0:	606a      	str	r2, [r5, #4]
   27cd2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   27cd6:	60aa      	str	r2, [r5, #8]
   27cd8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   27cdc:	60eb      	str	r3, [r5, #12]
   27cde:	2301      	movs	r3, #1
   27ce0:	65ab      	str	r3, [r5, #88]	; 0x58
   27ce2:	e72b      	b.n	27b3c <ProcessAesDrv+0x70>
   27ce4:	4834      	ldr	r0, [pc, #208]	; (27db8 <ProcessAesDrv+0x2ec>)
   27ce6:	f7fd fe67 	bl	259b8 <CC_PalAbort>
   27cea:	2000      	movs	r0, #0
   27cec:	f7fe fdf4 	bl	268d8 <CC_PalPowerSaveModeSelect>
   27cf0:	2800      	cmp	r0, #0
   27cf2:	f43f af15 	beq.w	27b20 <ProcessAesDrv+0x54>
   27cf6:	4831      	ldr	r0, [pc, #196]	; (27dbc <ProcessAesDrv+0x2f0>)
   27cf8:	f7fd fe5e 	bl	259b8 <CC_PalAbort>
   27cfc:	e710      	b.n	27b20 <ProcessAesDrv+0x54>
   27cfe:	4830      	ldr	r0, [pc, #192]	; (27dc0 <ProcessAesDrv+0x2f4>)
   27d00:	f7fd fe5a 	bl	259b8 <CC_PalAbort>
   27d04:	4620      	mov	r0, r4
   27d06:	b005      	add	sp, #20
   27d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d0c:	482d      	ldr	r0, [pc, #180]	; (27dc4 <ProcessAesDrv+0x2f8>)
   27d0e:	f7fd fe53 	bl	259b8 <CC_PalAbort>
   27d12:	e736      	b.n	27b82 <ProcessAesDrv+0xb6>
   27d14:	2304      	movs	r3, #4
   27d16:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   27d1a:	2120      	movs	r1, #32
   27d1c:	f105 0010 	add.w	r0, r5, #16
   27d20:	f7fe fd92 	bl	26848 <CC_PalMemSetZeroPlat>
   27d24:	e712      	b.n	27b4c <ProcessAesDrv+0x80>
   27d26:	6b29      	ldr	r1, [r5, #48]	; 0x30
   27d28:	6c28      	ldr	r0, [r5, #64]	; 0x40
   27d2a:	f000 f9b5 	bl	28098 <kmu_validate_slot_and_size>
   27d2e:	b998      	cbnz	r0, 27d58 <ProcessAesDrv+0x28c>
   27d30:	4f25      	ldr	r7, [pc, #148]	; (27dc8 <ProcessAesDrv+0x2fc>)
   27d32:	4c1c      	ldr	r4, [pc, #112]	; (27da4 <ProcessAesDrv+0x2d8>)
   27d34:	683b      	ldr	r3, [r7, #0]
   27d36:	681b      	ldr	r3, [r3, #0]
   27d38:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   27d3c:	683b      	ldr	r3, [r7, #0]
   27d3e:	685b      	ldr	r3, [r3, #4]
   27d40:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   27d44:	683b      	ldr	r3, [r7, #0]
   27d46:	689b      	ldr	r3, [r3, #8]
   27d48:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   27d4c:	683b      	ldr	r3, [r7, #0]
   27d4e:	68db      	ldr	r3, [r3, #12]
   27d50:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   27d54:	6b29      	ldr	r1, [r5, #48]	; 0x30
   27d56:	b161      	cbz	r1, 27d72 <ProcessAesDrv+0x2a6>
   27d58:	2701      	movs	r7, #1
   27d5a:	e6d3      	b.n	27b04 <ProcessAesDrv+0x38>
   27d5c:	4c1b      	ldr	r4, [pc, #108]	; (27dcc <ProcessAesDrv+0x300>)
   27d5e:	e6ed      	b.n	27b3c <ProcessAesDrv+0x70>
   27d60:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   27d64:	e713      	b.n	27b8e <ProcessAesDrv+0xc2>
   27d66:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   27d68:	2b01      	cmp	r3, #1
   27d6a:	bf0c      	ite	eq
   27d6c:	2040      	moveq	r0, #64	; 0x40
   27d6e:	2010      	movne	r0, #16
   27d70:	e793      	b.n	27c9a <ProcessAesDrv+0x1ce>
   27d72:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   27d74:	9301      	str	r3, [sp, #4]
   27d76:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   27d78:	9300      	str	r3, [sp, #0]
   27d7a:	f105 0a10 	add.w	sl, r5, #16
   27d7e:	f04f 0b10 	mov.w	fp, #16
   27d82:	f8cd a008 	str.w	sl, [sp, #8]
   27d86:	f8cd b00c 	str.w	fp, [sp, #12]
   27d8a:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   27d8e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   27d90:	f000 f9a4 	bl	280dc <kmu_derive_cmac>
   27d94:	2800      	cmp	r0, #0
   27d96:	d13a      	bne.n	27e0e <ProcessAesDrv+0x342>
   27d98:	2300      	movs	r3, #0
   27d9a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   27d9e:	e7db      	b.n	27d58 <ProcessAesDrv+0x28c>
   27da0:	200008c8 	.word	0x200008c8
   27da4:	5002b000 	.word	0x5002b000
   27da8:	00f10001 	.word	0x00f10001
   27dac:	00f10005 	.word	0x00f10005
   27db0:	00f1000b 	.word	0x00f1000b
   27db4:	00f10003 	.word	0x00f10003
   27db8:	0002d11c 	.word	0x0002d11c
   27dbc:	0002d134 	.word	0x0002d134
   27dc0:	0002d174 	.word	0x0002d174
   27dc4:	0002d154 	.word	0x0002d154
   27dc8:	200008b8 	.word	0x200008b8
   27dcc:	00f10002 	.word	0x00f10002
   27dd0:	4b19      	ldr	r3, [pc, #100]	; (27e38 <ProcessAesDrv+0x36c>)
   27dd2:	682a      	ldr	r2, [r5, #0]
   27dd4:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   27dd8:	686a      	ldr	r2, [r5, #4]
   27dda:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   27dde:	68aa      	ldr	r2, [r5, #8]
   27de0:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   27de4:	68ea      	ldr	r2, [r5, #12]
   27de6:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   27dea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27dec:	e72c      	b.n	27c48 <ProcessAesDrv+0x17c>
   27dee:	4b12      	ldr	r3, [pc, #72]	; (27e38 <ProcessAesDrv+0x36c>)
   27df0:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   27df4:	602a      	str	r2, [r5, #0]
   27df6:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   27dfa:	606a      	str	r2, [r5, #4]
   27dfc:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   27e00:	60aa      	str	r2, [r5, #8]
   27e02:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   27e06:	60eb      	str	r3, [r5, #12]
   27e08:	e769      	b.n	27cde <ProcessAesDrv+0x212>
   27e0a:	4c0c      	ldr	r4, [pc, #48]	; (27e3c <ProcessAesDrv+0x370>)
   27e0c:	e696      	b.n	27b3c <ProcessAesDrv+0x70>
   27e0e:	683b      	ldr	r3, [r7, #0]
   27e10:	681b      	ldr	r3, [r3, #0]
   27e12:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   27e16:	683b      	ldr	r3, [r7, #0]
   27e18:	685b      	ldr	r3, [r3, #4]
   27e1a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   27e1e:	683b      	ldr	r3, [r7, #0]
   27e20:	689b      	ldr	r3, [r3, #8]
   27e22:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   27e26:	683b      	ldr	r3, [r7, #0]
   27e28:	68db      	ldr	r3, [r3, #12]
   27e2a:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   27e2e:	4659      	mov	r1, fp
   27e30:	4650      	mov	r0, sl
   27e32:	f7fe fd09 	bl	26848 <CC_PalMemSetZeroPlat>
   27e36:	e7af      	b.n	27d98 <ProcessAesDrv+0x2cc>
   27e38:	5002b000 	.word	0x5002b000
   27e3c:	00f10004 	.word	0x00f10004

00027e40 <FinishAesDrv>:
   27e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27e44:	b301      	cbz	r1, 27e88 <FinishAesDrv+0x48>
   27e46:	b1fa      	cbz	r2, 27e88 <FinishAesDrv+0x48>
   27e48:	4604      	mov	r4, r0
   27e4a:	2800      	cmp	r0, #0
   27e4c:	d07c      	beq.n	27f48 <FinishAesDrv+0x108>
   27e4e:	461d      	mov	r5, r3
   27e50:	6b43      	ldr	r3, [r0, #52]	; 0x34
   27e52:	2b07      	cmp	r3, #7
   27e54:	460e      	mov	r6, r1
   27e56:	d01b      	beq.n	27e90 <FinishAesDrv+0x50>
   27e58:	b95d      	cbnz	r5, 27e72 <FinishAesDrv+0x32>
   27e5a:	2b03      	cmp	r3, #3
   27e5c:	d110      	bne.n	27e80 <FinishAesDrv+0x40>
   27e5e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   27e60:	b973      	cbnz	r3, 27e80 <FinishAesDrv+0x40>
   27e62:	f100 0364 	add.w	r3, r0, #100	; 0x64
   27e66:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   27e6a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   27e6e:	600b      	str	r3, [r1, #0]
   27e70:	2510      	movs	r5, #16
   27e72:	462b      	mov	r3, r5
   27e74:	4631      	mov	r1, r6
   27e76:	4620      	mov	r0, r4
   27e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27e7c:	f7ff be26 	b.w	27acc <ProcessAesDrv>
   27e80:	462f      	mov	r7, r5
   27e82:	4638      	mov	r0, r7
   27e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27e88:	4f77      	ldr	r7, [pc, #476]	; (28068 <FinishAesDrv+0x228>)
   27e8a:	4638      	mov	r0, r7
   27e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27e90:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   27e92:	2b00      	cmp	r3, #0
   27e94:	d15b      	bne.n	27f4e <FinishAesDrv+0x10e>
   27e96:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   27e9a:	d25d      	bcs.n	27f58 <FinishAesDrv+0x118>
   27e9c:	b915      	cbnz	r5, 27ea4 <FinishAesDrv+0x64>
   27e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   27ea0:	2b00      	cmp	r3, #0
   27ea2:	d159      	bne.n	27f58 <FinishAesDrv+0x118>
   27ea4:	4871      	ldr	r0, [pc, #452]	; (2806c <FinishAesDrv+0x22c>)
   27ea6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27eaa:	f7fe fce5 	bl	26878 <CC_PalMutexLock>
   27eae:	2800      	cmp	r0, #0
   27eb0:	f040 80b8 	bne.w	28024 <FinishAesDrv+0x1e4>
   27eb4:	2000      	movs	r0, #0
   27eb6:	f7fe fd0f 	bl	268d8 <CC_PalPowerSaveModeSelect>
   27eba:	2800      	cmp	r0, #0
   27ebc:	f040 80ae 	bne.w	2801c <FinishAesDrv+0x1dc>
   27ec0:	4a6b      	ldr	r2, [pc, #428]	; (28070 <FinishAesDrv+0x230>)
   27ec2:	2301      	movs	r3, #1
   27ec4:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   27ec8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27ecc:	2b00      	cmp	r3, #0
   27ece:	d1fb      	bne.n	27ec8 <FinishAesDrv+0x88>
   27ed0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27ed2:	2b03      	cmp	r3, #3
   27ed4:	dd20      	ble.n	27f18 <FinishAesDrv+0xd8>
   27ed6:	3b06      	subs	r3, #6
   27ed8:	2b01      	cmp	r3, #1
   27eda:	d81f      	bhi.n	27f1c <FinishAesDrv+0xdc>
   27edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   27ede:	2b01      	cmp	r3, #1
   27ee0:	d83c      	bhi.n	27f5c <FinishAesDrv+0x11c>
   27ee2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27ee4:	2b01      	cmp	r3, #1
   27ee6:	f200 80a5 	bhi.w	28034 <FinishAesDrv+0x1f4>
   27eea:	6e23      	ldr	r3, [r4, #96]	; 0x60
   27eec:	2b01      	cmp	r3, #1
   27eee:	f200 80a3 	bhi.w	28038 <FinishAesDrv+0x1f8>
   27ef2:	4620      	mov	r0, r4
   27ef4:	f7ff fd60 	bl	279b8 <InitAes.part.0>
   27ef8:	4607      	mov	r7, r0
   27efa:	b980      	cbnz	r0, 27f1e <FinishAesDrv+0xde>
   27efc:	4620      	mov	r0, r4
   27efe:	f7ff fd09 	bl	27914 <LoadAesKey>
   27f02:	4607      	mov	r7, r0
   27f04:	b958      	cbnz	r0, 27f1e <FinishAesDrv+0xde>
   27f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27f08:	2b07      	cmp	r3, #7
   27f0a:	d807      	bhi.n	27f1c <FinishAesDrv+0xdc>
   27f0c:	e8df f003 	tbb	[pc, r3]
   27f10:	285c2835 	.word	0x285c2835
   27f14:	285c0606 	.word	0x285c0606
   27f18:	2b00      	cmp	r3, #0
   27f1a:	dadf      	bge.n	27edc <FinishAesDrv+0x9c>
   27f1c:	4f55      	ldr	r7, [pc, #340]	; (28074 <FinishAesDrv+0x234>)
   27f1e:	4a54      	ldr	r2, [pc, #336]	; (28070 <FinishAesDrv+0x230>)
   27f20:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   27f24:	2b00      	cmp	r3, #0
   27f26:	d1fb      	bne.n	27f20 <FinishAesDrv+0xe0>
   27f28:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   27f2c:	2001      	movs	r0, #1
   27f2e:	f7fe fcd3 	bl	268d8 <CC_PalPowerSaveModeSelect>
   27f32:	2800      	cmp	r0, #0
   27f34:	d17a      	bne.n	2802c <FinishAesDrv+0x1ec>
   27f36:	484d      	ldr	r0, [pc, #308]	; (2806c <FinishAesDrv+0x22c>)
   27f38:	f7fe fca6 	bl	26888 <CC_PalMutexUnlock>
   27f3c:	2800      	cmp	r0, #0
   27f3e:	d0a0      	beq.n	27e82 <FinishAesDrv+0x42>
   27f40:	484d      	ldr	r0, [pc, #308]	; (28078 <FinishAesDrv+0x238>)
   27f42:	f7fd fd39 	bl	259b8 <CC_PalAbort>
   27f46:	e79c      	b.n	27e82 <FinishAesDrv+0x42>
   27f48:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   27f4c:	e799      	b.n	27e82 <FinishAesDrv+0x42>
   27f4e:	2b01      	cmp	r3, #1
   27f50:	d1a4      	bne.n	27e9c <FinishAesDrv+0x5c>
   27f52:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   27f56:	d3a1      	bcc.n	27e9c <FinishAesDrv+0x5c>
   27f58:	4f48      	ldr	r7, [pc, #288]	; (2807c <FinishAesDrv+0x23c>)
   27f5a:	e792      	b.n	27e82 <FinishAesDrv+0x42>
   27f5c:	4f48      	ldr	r7, [pc, #288]	; (28080 <FinishAesDrv+0x240>)
   27f5e:	e7de      	b.n	27f1e <FinishAesDrv+0xde>
   27f60:	4b43      	ldr	r3, [pc, #268]	; (28070 <FinishAesDrv+0x230>)
   27f62:	6822      	ldr	r2, [r4, #0]
   27f64:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   27f68:	6862      	ldr	r2, [r4, #4]
   27f6a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   27f6e:	68a2      	ldr	r2, [r4, #8]
   27f70:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   27f74:	68e2      	ldr	r2, [r4, #12]
   27f76:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   27f7a:	4b3d      	ldr	r3, [pc, #244]	; (28070 <FinishAesDrv+0x230>)
   27f7c:	2201      	movs	r2, #1
   27f7e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   27f82:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   27f86:	2d00      	cmp	r5, #0
   27f88:	d158      	bne.n	2803c <FinishAesDrv+0x1fc>
   27f8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
   27f8c:	b909      	cbnz	r1, 27f92 <FinishAesDrv+0x152>
   27f8e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   27f92:	4b37      	ldr	r3, [pc, #220]	; (28070 <FinishAesDrv+0x230>)
   27f94:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   27f98:	2f00      	cmp	r7, #0
   27f9a:	d1fb      	bne.n	27f94 <FinishAesDrv+0x154>
   27f9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27f9e:	3b01      	subs	r3, #1
   27fa0:	2b06      	cmp	r3, #6
   27fa2:	d8bc      	bhi.n	27f1e <FinishAesDrv+0xde>
   27fa4:	a201      	add	r2, pc, #4	; (adr r2, 27fac <FinishAesDrv+0x16c>)
   27fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27faa:	bf00      	nop
   27fac:	00027fe5 	.word	0x00027fe5
   27fb0:	00028001 	.word	0x00028001
   27fb4:	00027fe5 	.word	0x00027fe5
   27fb8:	00027f1f 	.word	0x00027f1f
   27fbc:	00027f1f 	.word	0x00027f1f
   27fc0:	00028001 	.word	0x00028001
   27fc4:	00027fe5 	.word	0x00027fe5
   27fc8:	4b29      	ldr	r3, [pc, #164]	; (28070 <FinishAesDrv+0x230>)
   27fca:	6822      	ldr	r2, [r4, #0]
   27fcc:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   27fd0:	6862      	ldr	r2, [r4, #4]
   27fd2:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   27fd6:	68a2      	ldr	r2, [r4, #8]
   27fd8:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   27fdc:	68e2      	ldr	r2, [r4, #12]
   27fde:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   27fe2:	e7ca      	b.n	27f7a <FinishAesDrv+0x13a>
   27fe4:	4b22      	ldr	r3, [pc, #136]	; (28070 <FinishAesDrv+0x230>)
   27fe6:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   27fea:	6022      	str	r2, [r4, #0]
   27fec:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   27ff0:	6062      	str	r2, [r4, #4]
   27ff2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   27ff6:	60a2      	str	r2, [r4, #8]
   27ff8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   27ffc:	60e3      	str	r3, [r4, #12]
   27ffe:	e78e      	b.n	27f1e <FinishAesDrv+0xde>
   28000:	4b1b      	ldr	r3, [pc, #108]	; (28070 <FinishAesDrv+0x230>)
   28002:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   28006:	6022      	str	r2, [r4, #0]
   28008:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   2800c:	6062      	str	r2, [r4, #4]
   2800e:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   28012:	60a2      	str	r2, [r4, #8]
   28014:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   28018:	60e3      	str	r3, [r4, #12]
   2801a:	e780      	b.n	27f1e <FinishAesDrv+0xde>
   2801c:	4819      	ldr	r0, [pc, #100]	; (28084 <FinishAesDrv+0x244>)
   2801e:	f7fd fccb 	bl	259b8 <CC_PalAbort>
   28022:	e74d      	b.n	27ec0 <FinishAesDrv+0x80>
   28024:	4818      	ldr	r0, [pc, #96]	; (28088 <FinishAesDrv+0x248>)
   28026:	f7fd fcc7 	bl	259b8 <CC_PalAbort>
   2802a:	e743      	b.n	27eb4 <FinishAesDrv+0x74>
   2802c:	4817      	ldr	r0, [pc, #92]	; (2808c <FinishAesDrv+0x24c>)
   2802e:	f7fd fcc3 	bl	259b8 <CC_PalAbort>
   28032:	e780      	b.n	27f36 <FinishAesDrv+0xf6>
   28034:	4f16      	ldr	r7, [pc, #88]	; (28090 <FinishAesDrv+0x250>)
   28036:	e772      	b.n	27f1e <FinishAesDrv+0xde>
   28038:	4f16      	ldr	r7, [pc, #88]	; (28094 <FinishAesDrv+0x254>)
   2803a:	e770      	b.n	27f1e <FinishAesDrv+0xde>
   2803c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   2803e:	6832      	ldr	r2, [r6, #0]
   28040:	2901      	cmp	r1, #1
   28042:	d00a      	beq.n	2805a <FinishAesDrv+0x21a>
   28044:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   28048:	2010      	movs	r0, #16
   2804a:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   2804e:	f7fe fb7d 	bl	2674c <CC_HalWaitInterrupt>
   28052:	4607      	mov	r7, r0
   28054:	2800      	cmp	r0, #0
   28056:	d09c      	beq.n	27f92 <FinishAesDrv+0x152>
   28058:	e761      	b.n	27f1e <FinishAesDrv+0xde>
   2805a:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   2805e:	2040      	movs	r0, #64	; 0x40
   28060:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   28064:	e7f3      	b.n	2804e <FinishAesDrv+0x20e>
   28066:	bf00      	nop
   28068:	00f1000b 	.word	0x00f1000b
   2806c:	200008c8 	.word	0x200008c8
   28070:	5002b000 	.word	0x5002b000
   28074:	00f10001 	.word	0x00f10001
   28078:	0002d174 	.word	0x0002d174
   2807c:	00f10005 	.word	0x00f10005
   28080:	00f10002 	.word	0x00f10002
   28084:	0002d134 	.word	0x0002d134
   28088:	0002d11c 	.word	0x0002d11c
   2808c:	0002d154 	.word	0x0002d154
   28090:	00f10003 	.word	0x00f10003
   28094:	00f10004 	.word	0x00f10004

00028098 <kmu_validate_slot_and_size>:
   28098:	b921      	cbnz	r1, 280a4 <kmu_validate_slot_and_size+0xc>
   2809a:	4b03      	ldr	r3, [pc, #12]	; (280a8 <kmu_validate_slot_and_size+0x10>)
   2809c:	2800      	cmp	r0, #0
   2809e:	bf18      	it	ne
   280a0:	4618      	movne	r0, r3
   280a2:	4770      	bx	lr
   280a4:	4801      	ldr	r0, [pc, #4]	; (280ac <kmu_validate_slot_and_size+0x14>)
   280a6:	4770      	bx	lr
   280a8:	00f70001 	.word	0x00f70001
   280ac:	00f70003 	.word	0x00f70003

000280b0 <kmu_validate_kdr_slot_and_size>:
   280b0:	b921      	cbnz	r1, 280bc <kmu_validate_kdr_slot_and_size+0xc>
   280b2:	4b03      	ldr	r3, [pc, #12]	; (280c0 <kmu_validate_kdr_slot_and_size+0x10>)
   280b4:	2800      	cmp	r0, #0
   280b6:	bf18      	it	ne
   280b8:	4618      	movne	r0, r3
   280ba:	4770      	bx	lr
   280bc:	4801      	ldr	r0, [pc, #4]	; (280c4 <kmu_validate_kdr_slot_and_size+0x14>)
   280be:	4770      	bx	lr
   280c0:	00f70001 	.word	0x00f70001
   280c4:	00f70003 	.word	0x00f70003

000280c8 <kmu_use_kdr_key>:
   280c8:	4b03      	ldr	r3, [pc, #12]	; (280d8 <kmu_use_kdr_key+0x10>)
   280ca:	2000      	movs	r0, #0
   280cc:	2201      	movs	r2, #1
   280ce:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   280d2:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   280d6:	4770      	bx	lr
   280d8:	5002b000 	.word	0x5002b000

000280dc <kmu_derive_cmac>:
   280dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   280e0:	b0cc      	sub	sp, #304	; 0x130
   280e2:	2400      	movs	r4, #0
   280e4:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   280e6:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   280ea:	4682      	mov	sl, r0
   280ec:	4689      	mov	r9, r1
   280ee:	4616      	mov	r6, r2
   280f0:	4621      	mov	r1, r4
   280f2:	2274      	movs	r2, #116	; 0x74
   280f4:	a80e      	add	r0, sp, #56	; 0x38
   280f6:	461f      	mov	r7, r3
   280f8:	f004 f864 	bl	2c1c4 <memset>
   280fc:	2280      	movs	r2, #128	; 0x80
   280fe:	4621      	mov	r1, r4
   28100:	a82c      	add	r0, sp, #176	; 0xb0
   28102:	942b      	str	r4, [sp, #172]	; 0xac
   28104:	f004 f85e 	bl	2c1c4 <memset>
   28108:	2384      	movs	r3, #132	; 0x84
   2810a:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2810e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   28112:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   28116:	9305      	str	r3, [sp, #20]
   28118:	d863      	bhi.n	281e2 <kmu_derive_cmac+0x106>
   2811a:	f7ff fcbf 	bl	27a9c <write_invalid_key>
   2811e:	ab05      	add	r3, sp, #20
   28120:	4630      	mov	r0, r6
   28122:	ae2b      	add	r6, sp, #172	; 0xac
   28124:	9301      	str	r3, [sp, #4]
   28126:	9502      	str	r5, [sp, #8]
   28128:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   2812c:	4639      	mov	r1, r7
   2812e:	9600      	str	r6, [sp, #0]
   28130:	f000 f862 	bl	281f8 <UtilCmacBuildDataForDerivation>
   28134:	2800      	cmp	r0, #0
   28136:	d14f      	bne.n	281d8 <kmu_derive_cmac+0xfc>
   28138:	2303      	movs	r3, #3
   2813a:	f88d 3013 	strb.w	r3, [sp, #19]
   2813e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   28142:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   28146:	2307      	movs	r3, #7
   28148:	2200      	movs	r2, #0
   2814a:	901c      	str	r0, [sp, #112]	; 0x70
   2814c:	2110      	movs	r1, #16
   2814e:	a80e      	add	r0, sp, #56	; 0x38
   28150:	931b      	str	r3, [sp, #108]	; 0x6c
   28152:	2401      	movs	r4, #1
   28154:	2301      	movs	r3, #1
   28156:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2815a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   2815e:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   28162:	9426      	str	r4, [sp, #152]	; 0x98
   28164:	f10d 0920 	add.w	r9, sp, #32
   28168:	f7fe fb6e 	bl	26848 <CC_PalMemSetZeroPlat>
   2816c:	2210      	movs	r2, #16
   2816e:	9200      	str	r2, [sp, #0]
   28170:	9905      	ldr	r1, [sp, #20]
   28172:	f8cd 9004 	str.w	r9, [sp, #4]
   28176:	ab0a      	add	r3, sp, #40	; 0x28
   28178:	4630      	mov	r0, r6
   2817a:	aa06      	add	r2, sp, #24
   2817c:	f7ff fa1e 	bl	275bc <SetDataBuffersInfo>
   28180:	4607      	mov	r7, r0
   28182:	b170      	cbz	r0, 281a2 <kmu_derive_cmac+0xc6>
   28184:	e01d      	b.n	281c2 <kmu_derive_cmac+0xe6>
   28186:	a90e      	add	r1, sp, #56	; 0x38
   28188:	eb08 0007 	add.w	r0, r8, r7
   2818c:	f7fe fb58 	bl	26840 <CC_PalMemCopyPlat>
   28190:	2110      	movs	r1, #16
   28192:	a80e      	add	r0, sp, #56	; 0x38
   28194:	f7fe fb58 	bl	26848 <CC_PalMemSetZeroPlat>
   28198:	3401      	adds	r4, #1
   2819a:	1bad      	subs	r5, r5, r6
   2819c:	4437      	add	r7, r6
   2819e:	b2e4      	uxtb	r4, r4
   281a0:	d024      	beq.n	281ec <kmu_derive_cmac+0x110>
   281a2:	2d10      	cmp	r5, #16
   281a4:	464a      	mov	r2, r9
   281a6:	9b05      	ldr	r3, [sp, #20]
   281a8:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   281ac:	a906      	add	r1, sp, #24
   281ae:	a80e      	add	r0, sp, #56	; 0x38
   281b0:	462e      	mov	r6, r5
   281b2:	bf28      	it	cs
   281b4:	2610      	movcs	r6, #16
   281b6:	f7ff fe43 	bl	27e40 <FinishAesDrv>
   281ba:	4632      	mov	r2, r6
   281bc:	2800      	cmp	r0, #0
   281be:	d0e2      	beq.n	28186 <kmu_derive_cmac+0xaa>
   281c0:	4607      	mov	r7, r0
   281c2:	a80e      	add	r0, sp, #56	; 0x38
   281c4:	2274      	movs	r2, #116	; 0x74
   281c6:	2100      	movs	r1, #0
   281c8:	f7fe fb3c 	bl	26844 <CC_PalMemSetPlat>
   281cc:	f7ff fc66 	bl	27a9c <write_invalid_key>
   281d0:	4638      	mov	r0, r7
   281d2:	b04c      	add	sp, #304	; 0x130
   281d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   281d8:	4f05      	ldr	r7, [pc, #20]	; (281f0 <kmu_derive_cmac+0x114>)
   281da:	4638      	mov	r0, r7
   281dc:	b04c      	add	sp, #304	; 0x130
   281de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   281e2:	4f04      	ldr	r7, [pc, #16]	; (281f4 <kmu_derive_cmac+0x118>)
   281e4:	4638      	mov	r0, r7
   281e6:	b04c      	add	sp, #304	; 0x130
   281e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   281ec:	462f      	mov	r7, r5
   281ee:	e7e8      	b.n	281c2 <kmu_derive_cmac+0xe6>
   281f0:	00f1000e 	.word	0x00f1000e
   281f4:	00f1000f 	.word	0x00f1000f

000281f8 <UtilCmacBuildDataForDerivation>:
   281f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   281fc:	b082      	sub	sp, #8
   281fe:	461e      	mov	r6, r3
   28200:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   28202:	2300      	movs	r3, #0
   28204:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   28208:	9301      	str	r3, [sp, #4]
   2820a:	d83e      	bhi.n	2828a <UtilCmacBuildDataForDerivation+0x92>
   2820c:	00e4      	lsls	r4, r4, #3
   2820e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   28212:	4617      	mov	r7, r2
   28214:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   28218:	bf34      	ite	cc
   2821a:	2303      	movcc	r3, #3
   2821c:	2304      	movcs	r3, #4
   2821e:	2a3f      	cmp	r2, #63	; 0x3f
   28220:	460d      	mov	r5, r1
   28222:	9300      	str	r3, [sp, #0]
   28224:	d831      	bhi.n	2828a <UtilCmacBuildDataForDerivation+0x92>
   28226:	b380      	cbz	r0, 2828a <UtilCmacBuildDataForDerivation+0x92>
   28228:	b116      	cbz	r6, 28230 <UtilCmacBuildDataForDerivation+0x38>
   2822a:	b377      	cbz	r7, 2828a <UtilCmacBuildDataForDerivation+0x92>
   2822c:	2e40      	cmp	r6, #64	; 0x40
   2822e:	d82c      	bhi.n	2828a <UtilCmacBuildDataForDerivation+0x92>
   28230:	9a08      	ldr	r2, [sp, #32]
   28232:	b352      	cbz	r2, 2828a <UtilCmacBuildDataForDerivation+0x92>
   28234:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28236:	6811      	ldr	r1, [r2, #0]
   28238:	b339      	cbz	r1, 2828a <UtilCmacBuildDataForDerivation+0x92>
   2823a:	19aa      	adds	r2, r5, r6
   2823c:	4413      	add	r3, r2
   2823e:	4299      	cmp	r1, r3
   28240:	d323      	bcc.n	2828a <UtilCmacBuildDataForDerivation+0x92>
   28242:	9b08      	ldr	r3, [sp, #32]
   28244:	4601      	mov	r1, r0
   28246:	462a      	mov	r2, r5
   28248:	1c58      	adds	r0, r3, #1
   2824a:	f7fe faf9 	bl	26840 <CC_PalMemCopyPlat>
   2824e:	9b08      	ldr	r3, [sp, #32]
   28250:	f105 0802 	add.w	r8, r5, #2
   28254:	441d      	add	r5, r3
   28256:	2300      	movs	r3, #0
   28258:	706b      	strb	r3, [r5, #1]
   2825a:	bb0e      	cbnz	r6, 282a0 <UtilCmacBuildDataForDerivation+0xa8>
   2825c:	9b08      	ldr	r3, [sp, #32]
   2825e:	9400      	str	r4, [sp, #0]
   28260:	2cff      	cmp	r4, #255	; 0xff
   28262:	eb03 0008 	add.w	r0, r3, r8
   28266:	d914      	bls.n	28292 <UtilCmacBuildDataForDerivation+0x9a>
   28268:	0223      	lsls	r3, r4, #8
   2826a:	b29b      	uxth	r3, r3
   2826c:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   28270:	2202      	movs	r2, #2
   28272:	a901      	add	r1, sp, #4
   28274:	9401      	str	r4, [sp, #4]
   28276:	f7fe fae3 	bl	26840 <CC_PalMemCopyPlat>
   2827a:	f108 0302 	add.w	r3, r8, #2
   2827e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28280:	2000      	movs	r0, #0
   28282:	6013      	str	r3, [r2, #0]
   28284:	b002      	add	sp, #8
   28286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2828a:	480a      	ldr	r0, [pc, #40]	; (282b4 <UtilCmacBuildDataForDerivation+0xbc>)
   2828c:	b002      	add	sp, #8
   2828e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28292:	2201      	movs	r2, #1
   28294:	4669      	mov	r1, sp
   28296:	f7fe fad3 	bl	26840 <CC_PalMemCopyPlat>
   2829a:	f108 0301 	add.w	r3, r8, #1
   2829e:	e7ee      	b.n	2827e <UtilCmacBuildDataForDerivation+0x86>
   282a0:	9b08      	ldr	r3, [sp, #32]
   282a2:	4632      	mov	r2, r6
   282a4:	eb03 0008 	add.w	r0, r3, r8
   282a8:	4639      	mov	r1, r7
   282aa:	f7fe fac9 	bl	26840 <CC_PalMemCopyPlat>
   282ae:	44b0      	add	r8, r6
   282b0:	e7d4      	b.n	2825c <UtilCmacBuildDataForDerivation+0x64>
   282b2:	bf00      	nop
   282b4:	80000006 	.word	0x80000006

000282b8 <CC_PalDataBufferAttrGet>:
   282b8:	2000      	movs	r0, #0
   282ba:	7018      	strb	r0, [r3, #0]
   282bc:	4770      	bx	lr
   282be:	bf00      	nop

000282c0 <bt_melty_init>:
}
   282c0:	2000      	movs	r0, #0
   282c2:	4770      	bx	lr

000282c4 <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   282c4:	f7fb be7c 	b.w	23fc0 <z_impl_k_sleep>

000282c8 <adc_multi_sample>:
float adc_multi_sample(int samples, int adc_channel) {
   282c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   282ca:	4605      	mov	r5, r0
   282cc:	460f      	mov	r7, r1
    for (int loop = 0; loop < samples; loop ++) {
   282ce:	2600      	movs	r6, #0
	float multi_sample = 0;
   282d0:	2400      	movs	r4, #0
    for (int loop = 0; loop < samples; loop ++) {
   282d2:	42ae      	cmp	r6, r5
   282d4:	db07      	blt.n	282e6 <adc_multi_sample+0x1e>
    return multi_sample / samples;
   282d6:	4628      	mov	r0, r5
   282d8:	f7d8 fbea 	bl	ab0 <__aeabi_i2f>
   282dc:	4601      	mov	r1, r0
   282de:	4620      	mov	r0, r4
   282e0:	f7d8 fcee 	bl	cc0 <__aeabi_fdiv>
}
   282e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		multi_sample += AnalogRead(adc_channel);
   282e6:	4638      	mov	r0, r7
   282e8:	f7e9 f9ca 	bl	11680 <AnalogRead>
   282ec:	4601      	mov	r1, r0
   282ee:	4620      	mov	r0, r4
   282f0:	f7d8 fb2a 	bl	948 <__addsf3>
    for (int loop = 0; loop < samples; loop ++) {
   282f4:	3601      	adds	r6, #1
		multi_sample += AnalogRead(adc_channel);
   282f6:	4604      	mov	r4, r0
    for (int loop = 0; loop < samples; loop ++) {
   282f8:	e7eb      	b.n	282d2 <adc_multi_sample+0xa>

000282fa <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   282fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   282fc:	2364      	movs	r3, #100	; 0x64
{
   282fe:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   28300:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   28302:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   28304:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   28308:	b111      	cbz	r1, 28310 <u8_to_dec+0x16>
   2830a:	3d01      	subs	r5, #1
   2830c:	d101      	bne.n	28312 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   2830e:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   28310:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   28312:	429a      	cmp	r2, r3
		digit = value / divisor;
   28314:	fbb2 f7f3 	udiv	r7, r2, r3
   28318:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2831a:	d202      	bcs.n	28322 <u8_to_dec+0x28>
   2831c:	2b01      	cmp	r3, #1
   2831e:	d000      	beq.n	28322 <u8_to_dec+0x28>
   28320:	b130      	cbz	r0, 28330 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   28322:	3630      	adds	r6, #48	; 0x30
			buflen--;
   28324:	3901      	subs	r1, #1
			num_digits++;
   28326:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   28328:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   2832c:	b2c9      	uxtb	r1, r1
			num_digits++;
   2832e:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   28330:	fb03 2217 	mls	r2, r3, r7, r2
   28334:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   28336:	fbb3 f3fc 	udiv	r3, r3, ip
   2833a:	e7e5      	b.n	28308 <u8_to_dec+0xe>

0002833c <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2833c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   28340:	b2db      	uxtb	r3, r3
   28342:	2b09      	cmp	r3, #9
   28344:	d802      	bhi.n	2834c <char2hex+0x10>
		*x = c - '0';
   28346:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   28348:	2000      	movs	r0, #0
   2834a:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2834c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   28350:	2b05      	cmp	r3, #5
   28352:	d802      	bhi.n	2835a <char2hex+0x1e>
		*x = c - 'a' + 10;
   28354:	3857      	subs	r0, #87	; 0x57
   28356:	7008      	strb	r0, [r1, #0]
   28358:	e7f6      	b.n	28348 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   2835a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2835e:	2b05      	cmp	r3, #5
   28360:	d801      	bhi.n	28366 <char2hex+0x2a>
		*x = c - 'A' + 10;
   28362:	3837      	subs	r0, #55	; 0x37
   28364:	e7f7      	b.n	28356 <char2hex+0x1a>
		return -EINVAL;
   28366:	f06f 0015 	mvn.w	r0, #21
}
   2836a:	4770      	bx	lr

0002836c <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2836c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2836e:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   28370:	f001 0001 	and.w	r0, r1, #1
   28374:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   28378:	429d      	cmp	r5, r3
   2837a:	ea4f 0651 	mov.w	r6, r1, lsr #1
   2837e:	d903      	bls.n	28388 <hex2bin+0x1c>
		return 0;
   28380:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   28382:	4628      	mov	r0, r5
   28384:	b003      	add	sp, #12
   28386:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   28388:	b158      	cbz	r0, 283a2 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2838a:	7820      	ldrb	r0, [r4, #0]
   2838c:	f10d 0107 	add.w	r1, sp, #7
   28390:	f7ff ffd4 	bl	2833c <char2hex>
   28394:	2800      	cmp	r0, #0
   28396:	dbf3      	blt.n	28380 <hex2bin+0x14>
		buf[0] = dec;
   28398:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2839c:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   283a0:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   283a2:	3401      	adds	r4, #1
   283a4:	4416      	add	r6, r2
   283a6:	42b2      	cmp	r2, r6
   283a8:	d0eb      	beq.n	28382 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   283aa:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   283ae:	f10d 0107 	add.w	r1, sp, #7
   283b2:	f7ff ffc3 	bl	2833c <char2hex>
   283b6:	2800      	cmp	r0, #0
   283b8:	dbe2      	blt.n	28380 <hex2bin+0x14>
		buf[i] = dec << 4;
   283ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   283be:	011b      	lsls	r3, r3, #4
   283c0:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   283c2:	f814 0b02 	ldrb.w	r0, [r4], #2
   283c6:	f7ff ffb9 	bl	2833c <char2hex>
   283ca:	2800      	cmp	r0, #0
   283cc:	dbd8      	blt.n	28380 <hex2bin+0x14>
		buf[i] += dec;
   283ce:	7813      	ldrb	r3, [r2, #0]
   283d0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   283d4:	440b      	add	r3, r1
   283d6:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   283da:	e7e4      	b.n	283a6 <hex2bin+0x3a>

000283dc <sys_notify_validate>:
	if (notify == NULL) {
   283dc:	4603      	mov	r3, r0
   283de:	b140      	cbz	r0, 283f2 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   283e0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   283e2:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   283e6:	2a02      	cmp	r2, #2
   283e8:	d006      	beq.n	283f8 <sys_notify_validate+0x1c>
   283ea:	2a03      	cmp	r2, #3
   283ec:	d004      	beq.n	283f8 <sys_notify_validate+0x1c>
   283ee:	2a01      	cmp	r2, #1
   283f0:	d005      	beq.n	283fe <sys_notify_validate+0x22>
		return -EINVAL;
   283f2:	f06f 0015 	mvn.w	r0, #21
}
   283f6:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   283f8:	681a      	ldr	r2, [r3, #0]
   283fa:	2a00      	cmp	r2, #0
   283fc:	d0f9      	beq.n	283f2 <sys_notify_validate+0x16>
		notify->result = 0;
   283fe:	2000      	movs	r0, #0
   28400:	6098      	str	r0, [r3, #8]
   28402:	4770      	bx	lr

00028404 <arch_printk_char_out>:
}
   28404:	2000      	movs	r0, #0
   28406:	4770      	bx	lr

00028408 <str_out>:
{
   28408:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2840a:	688a      	ldr	r2, [r1, #8]
   2840c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2840e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   28410:	b114      	cbz	r4, 28418 <str_out+0x10>
   28412:	684b      	ldr	r3, [r1, #4]
   28414:	4293      	cmp	r3, r2
   28416:	dc01      	bgt.n	2841c <str_out+0x14>
		ctx->count++;
   28418:	608d      	str	r5, [r1, #8]
}
   2841a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2841c:	3b01      	subs	r3, #1
   2841e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   28420:	bf08      	it	eq
   28422:	2200      	moveq	r2, #0
   28424:	608d      	str	r5, [r1, #8]
   28426:	bf0c      	ite	eq
   28428:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2842a:	54a0      	strbne	r0, [r4, r2]
   2842c:	e7f5      	b.n	2841a <str_out+0x12>

0002842e <printk>:
{
   2842e:	b40f      	push	{r0, r1, r2, r3}
   28430:	b507      	push	{r0, r1, r2, lr}
   28432:	a904      	add	r1, sp, #16
   28434:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   28438:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2843a:	f7ea f891 	bl	12560 <vprintk>
}
   2843e:	b003      	add	sp, #12
   28440:	f85d eb04 	ldr.w	lr, [sp], #4
   28444:	b004      	add	sp, #16
   28446:	4770      	bx	lr

00028448 <snprintk>:
{
   28448:	b40c      	push	{r2, r3}
   2844a:	b507      	push	{r0, r1, r2, lr}
   2844c:	ab04      	add	r3, sp, #16
   2844e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   28452:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   28454:	f7ea f892 	bl	1257c <vsnprintk>
}
   28458:	b003      	add	sp, #12
   2845a:	f85d eb04 	ldr.w	lr, [sp], #4
   2845e:	b002      	add	sp, #8
   28460:	4770      	bx	lr

00028462 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   28462:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   28464:	f013 0307 	ands.w	r3, r3, #7
   28468:	d105      	bne.n	28476 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2846a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2846c:	2b00      	cmp	r3, #0
   2846e:	bf0c      	ite	eq
   28470:	2000      	moveq	r0, #0
   28472:	2003      	movne	r0, #3
   28474:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   28476:	2b02      	cmp	r3, #2
   28478:	d105      	bne.n	28486 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2847a:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   2847c:	2b00      	cmp	r3, #0
   2847e:	bf14      	ite	ne
   28480:	2000      	movne	r0, #0
   28482:	2004      	moveq	r0, #4
   28484:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   28486:	2b01      	cmp	r3, #1
   28488:	d105      	bne.n	28496 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2848a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2848c:	2b00      	cmp	r3, #0
   2848e:	bf0c      	ite	eq
   28490:	2000      	moveq	r0, #0
   28492:	2005      	movne	r0, #5
   28494:	4770      	bx	lr
	int evt = EVT_NOP;
   28496:	2000      	movs	r0, #0
}
   28498:	4770      	bx	lr

0002849a <notify_one>:
{
   2849a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2849e:	460d      	mov	r5, r1
   284a0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   284a2:	4619      	mov	r1, r3
   284a4:	1d28      	adds	r0, r5, #4
{
   284a6:	4690      	mov	r8, r2
   284a8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   284aa:	f7ea f821 	bl	124f0 <sys_notify_finalize>
	if (cb) {
   284ae:	4604      	mov	r4, r0
   284b0:	b138      	cbz	r0, 284c2 <notify_one+0x28>
		cb(mgr, cli, state, res);
   284b2:	4633      	mov	r3, r6
   284b4:	4642      	mov	r2, r8
   284b6:	4629      	mov	r1, r5
   284b8:	4638      	mov	r0, r7
   284ba:	46a4      	mov	ip, r4
}
   284bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   284c0:	4760      	bx	ip
}
   284c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000284c6 <validate_args>:
{
   284c6:	b510      	push	{r4, lr}
   284c8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   284ca:	b140      	cbz	r0, 284de <validate_args+0x18>
   284cc:	b139      	cbz	r1, 284de <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   284ce:	1d08      	adds	r0, r1, #4
   284d0:	f7ff ff84 	bl	283dc <sys_notify_validate>
	if ((rv == 0)
   284d4:	b928      	cbnz	r0, 284e2 <validate_args+0x1c>
	    && ((cli->notify.flags
   284d6:	68a3      	ldr	r3, [r4, #8]
   284d8:	f033 0303 	bics.w	r3, r3, #3
   284dc:	d001      	beq.n	284e2 <validate_args+0x1c>
		rv = -EINVAL;
   284de:	f06f 0015 	mvn.w	r0, #21
}
   284e2:	bd10      	pop	{r4, pc}

000284e4 <onoff_manager_init>:
{
   284e4:	b538      	push	{r3, r4, r5, lr}
   284e6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   284e8:	4605      	mov	r5, r0
   284ea:	b158      	cbz	r0, 28504 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   284ec:	b151      	cbz	r1, 28504 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   284ee:	680b      	ldr	r3, [r1, #0]
   284f0:	b143      	cbz	r3, 28504 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   284f2:	684b      	ldr	r3, [r1, #4]
   284f4:	b133      	cbz	r3, 28504 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   284f6:	2220      	movs	r2, #32
   284f8:	2100      	movs	r1, #0
   284fa:	f003 fe63 	bl	2c1c4 <memset>
   284fe:	612c      	str	r4, [r5, #16]
	return 0;
   28500:	2000      	movs	r0, #0
}
   28502:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   28504:	f06f 0015 	mvn.w	r0, #21
   28508:	e7fb      	b.n	28502 <onoff_manager_init+0x1e>

0002850a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2850a:	4604      	mov	r4, r0
   2850c:	b508      	push	{r3, lr}
   2850e:	4608      	mov	r0, r1
   28510:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   28512:	461a      	mov	r2, r3
   28514:	47a0      	blx	r4
	return z_impl_z_current_get();
   28516:	f7fb fd83 	bl	24020 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2851a:	f7ec fcb1 	bl	14e80 <z_impl_k_thread_abort>

0002851e <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2851e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   28522:	8840      	ldrh	r0, [r0, #2]
}
   28524:	0840      	lsrs	r0, r0, #1
   28526:	4770      	bx	lr

00028528 <free_list_add>:
{
   28528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2852a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2852c:	f7ff fff7 	bl	2851e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   28530:	fab0 f080 	clz	r0, r0
   28534:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   28538:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2853c:	00ca      	lsls	r2, r1, #3
   2853e:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   28542:	1d17      	adds	r7, r2, #4
{
   28544:	460c      	mov	r4, r1
   28546:	3206      	adds	r2, #6
   28548:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2854a:	b956      	cbnz	r6, 28562 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2854c:	2101      	movs	r1, #1
   2854e:	fa01 f000 	lsl.w	r0, r1, r0
   28552:	68d9      	ldr	r1, [r3, #12]
   28554:	4301      	orrs	r1, r0
   28556:	60d9      	str	r1, [r3, #12]
		b->next = c;
   28558:	f8cc 4010 	str.w	r4, [ip, #16]
   2855c:	53dd      	strh	r5, [r3, r7]
   2855e:	529d      	strh	r5, [r3, r2]
}
   28560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   28562:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   28564:	3104      	adds	r1, #4
   28566:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   28568:	53d8      	strh	r0, [r3, r7]
   2856a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2856e:	529e      	strh	r6, [r3, r2]
   28570:	80c5      	strh	r5, [r0, #6]
   28572:	525d      	strh	r5, [r3, r1]
   28574:	e7f4      	b.n	28560 <free_list_add+0x38>

00028576 <free_list_remove_bidx>:
{
   28576:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   28578:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2857c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2857e:	4299      	cmp	r1, r3
   28580:	f102 0104 	add.w	r1, r2, #4
   28584:	d10a      	bne.n	2859c <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   28586:	2301      	movs	r3, #1
   28588:	fa03 f202 	lsl.w	r2, r3, r2
   2858c:	68c3      	ldr	r3, [r0, #12]
   2858e:	ea23 0302 	bic.w	r3, r3, r2
   28592:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   28594:	2300      	movs	r3, #0
   28596:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2859a:	bd10      	pop	{r4, pc}
   2859c:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2859e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   285a2:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   285a6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   285aa:	80cb      	strh	r3, [r1, #6]
   285ac:	8082      	strh	r2, [r0, #4]
}
   285ae:	e7f4      	b.n	2859a <free_list_remove_bidx+0x24>

000285b0 <free_list_remove>:
{
   285b0:	b508      	push	{r3, lr}
   285b2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   285b4:	f7ff ffb3 	bl	2851e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   285b8:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   285bc:	f1c2 021f 	rsb	r2, r2, #31
   285c0:	4618      	mov	r0, r3
}
   285c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   285c6:	f7ff bfd6 	b.w	28576 <free_list_remove_bidx>

000285ca <alloc_chunk>:
{
   285ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   285ce:	fab1 f581 	clz	r5, r1
   285d2:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   285d6:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   285da:	4603      	mov	r3, r0
	if (b->next) {
   285dc:	693a      	ldr	r2, [r7, #16]
{
   285de:	460e      	mov	r6, r1
	if (b->next) {
   285e0:	b1c2      	cbz	r2, 28614 <alloc_chunk+0x4a>
   285e2:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   285e6:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   285e8:	4618      	mov	r0, r3
   285ea:	4621      	mov	r1, r4
   285ec:	f7ff ff97 	bl	2851e <chunk_size>
   285f0:	42b0      	cmp	r0, r6
   285f2:	d306      	bcc.n	28602 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   285f4:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   285f6:	4618      	mov	r0, r3
   285f8:	f7ff ffbd 	bl	28576 <free_list_remove_bidx>
}
   285fc:	4620      	mov	r0, r4
   285fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   28602:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   28606:	f1b8 0801 	subs.w	r8, r8, #1
   2860a:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   2860c:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   2860e:	d001      	beq.n	28614 <alloc_chunk+0x4a>
   28610:	4282      	cmp	r2, r0
   28612:	d1e8      	bne.n	285e6 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   28614:	f1c5 0220 	rsb	r2, r5, #32
   28618:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2861c:	4094      	lsls	r4, r2
   2861e:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   28620:	4014      	ands	r4, r2
   28622:	d0eb      	beq.n	285fc <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   28624:	fa94 f2a4 	rbit	r2, r4
   28628:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2862c:	1d11      	adds	r1, r2, #4
   2862e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   28632:	4621      	mov	r1, r4
   28634:	e7df      	b.n	285f6 <alloc_chunk+0x2c>

00028636 <merge_chunks>:
{
   28636:	b538      	push	{r3, r4, r5, lr}
   28638:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2863a:	f7ff ff70 	bl	2851e <chunk_size>
{
   2863e:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   28640:	4604      	mov	r4, r0
   28642:	4611      	mov	r1, r2
   28644:	4618      	mov	r0, r3
   28646:	f7ff ff6a 	bl	2851e <chunk_size>
		((uint16_t *)cmem)[f] = val;
   2864a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2864e:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28650:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   28652:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   28654:	4618      	mov	r0, r3
   28656:	f7ff ff62 	bl	2851e <chunk_size>
	void *cmem = &buf[c];
   2865a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2865c:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   28660:	bd38      	pop	{r3, r4, r5, pc}

00028662 <split_chunks>:
{
   28662:	b538      	push	{r3, r4, r5, lr}
   28664:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   28666:	f7ff ff5a 	bl	2851e <chunk_size>
{
   2866a:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   2866c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2866e:	1a51      	subs	r1, r2, r1
   28670:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   28674:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28676:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   28678:	8060      	strh	r0, [r4, #2]
   2867a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2867e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   28680:	8044      	strh	r4, [r0, #2]
   28682:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   28686:	4618      	mov	r0, r3
   28688:	4611      	mov	r1, r2
   2868a:	f7ff ff48 	bl	2851e <chunk_size>
	void *cmem = &buf[c];
   2868e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   28690:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   28694:	bd38      	pop	{r3, r4, r5, pc}

00028696 <free_chunk>:
{
   28696:	b538      	push	{r3, r4, r5, lr}
   28698:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2869a:	f7ff ff40 	bl	2851e <chunk_size>
   2869e:	460c      	mov	r4, r1
   286a0:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   286a2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   286a6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   286a8:	07da      	lsls	r2, r3, #31
   286aa:	d40a      	bmi.n	286c2 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   286ac:	4628      	mov	r0, r5
   286ae:	f7ff ff7f 	bl	285b0 <free_list_remove>
	return c + chunk_size(h, c);
   286b2:	4621      	mov	r1, r4
   286b4:	4628      	mov	r0, r5
   286b6:	f7ff ff32 	bl	2851e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   286ba:	1822      	adds	r2, r4, r0
   286bc:	4628      	mov	r0, r5
   286be:	f7ff ffba 	bl	28636 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   286c2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   286c6:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   286c8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   286cc:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   286ce:	07db      	lsls	r3, r3, #31
   286d0:	d40c      	bmi.n	286ec <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   286d2:	4628      	mov	r0, r5
   286d4:	f7ff ff6c 	bl	285b0 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   286d8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   286dc:	4622      	mov	r2, r4
   286de:	1a61      	subs	r1, r4, r1
   286e0:	4628      	mov	r0, r5
   286e2:	f7ff ffa8 	bl	28636 <merge_chunks>
   286e6:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   286ea:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   286ec:	4621      	mov	r1, r4
   286ee:	4628      	mov	r0, r5
}
   286f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   286f4:	f7ff bf18 	b.w	28528 <free_list_add>

000286f8 <sys_heap_alloc>:
{
   286f8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   286fa:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   286fc:	b909      	cbnz	r1, 28702 <sys_heap_alloc+0xa>
		return NULL;
   286fe:	2000      	movs	r0, #0
}
   28700:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   28702:	68ab      	ldr	r3, [r5, #8]
   28704:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   28708:	d9f9      	bls.n	286fe <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2870a:	310b      	adds	r1, #11
   2870c:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2870e:	4621      	mov	r1, r4
   28710:	4628      	mov	r0, r5
   28712:	f7ff ff5a 	bl	285ca <alloc_chunk>
	if (c == 0U) {
   28716:	4606      	mov	r6, r0
   28718:	2800      	cmp	r0, #0
   2871a:	d0f0      	beq.n	286fe <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2871c:	4601      	mov	r1, r0
   2871e:	4628      	mov	r0, r5
   28720:	f7ff fefd 	bl	2851e <chunk_size>
   28724:	42a0      	cmp	r0, r4
   28726:	d907      	bls.n	28738 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   28728:	1932      	adds	r2, r6, r4
   2872a:	4628      	mov	r0, r5
   2872c:	f7ff ff99 	bl	28662 <split_chunks>
		free_list_add(h, c + chunk_sz);
   28730:	4611      	mov	r1, r2
   28732:	4628      	mov	r0, r5
   28734:	f7ff fef8 	bl	28528 <free_list_add>
	void *cmem = &buf[c];
   28738:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2873c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2873e:	8853      	ldrh	r3, [r2, #2]
   28740:	f043 0301 	orr.w	r3, r3, #1
   28744:	8053      	strh	r3, [r2, #2]
   28746:	3004      	adds	r0, #4
	return mem;
   28748:	e7da      	b.n	28700 <sys_heap_alloc+0x8>

0002874a <outs>:
{
   2874a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2874e:	4607      	mov	r7, r0
   28750:	4688      	mov	r8, r1
   28752:	4615      	mov	r5, r2
   28754:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28756:	4614      	mov	r4, r2
   28758:	42b4      	cmp	r4, r6
   2875a:	eba4 0005 	sub.w	r0, r4, r5
   2875e:	d302      	bcc.n	28766 <outs+0x1c>
   28760:	b93e      	cbnz	r6, 28772 <outs+0x28>
   28762:	7823      	ldrb	r3, [r4, #0]
   28764:	b12b      	cbz	r3, 28772 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   28766:	f814 0b01 	ldrb.w	r0, [r4], #1
   2876a:	4641      	mov	r1, r8
   2876c:	47b8      	blx	r7
		if (rc < 0) {
   2876e:	2800      	cmp	r0, #0
   28770:	daf2      	bge.n	28758 <outs+0xe>
}
   28772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028776 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   28776:	4040      	eors	r0, r0
   28778:	f380 8811 	msr	BASEPRI, r0
   2877c:	f04f 0004 	mov.w	r0, #4
   28780:	df02      	svc	2
}
   28782:	4770      	bx	lr

00028784 <assert_print>:

void assert_print(const char *fmt, ...)
{
   28784:	b40f      	push	{r0, r1, r2, r3}
   28786:	b507      	push	{r0, r1, r2, lr}
   28788:	a904      	add	r1, sp, #16
   2878a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2878e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   28790:	f7e9 fee6 	bl	12560 <vprintk>

	va_end(ap);
}
   28794:	b003      	add	sp, #12
   28796:	f85d eb04 	ldr.w	lr, [sp], #4
   2879a:	b004      	add	sp, #16
   2879c:	4770      	bx	lr

0002879e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_LBS_SECURITY_ENABLED, 1);

GEN_ABS_SYM_END
   2879e:	4770      	bx	lr

000287a0 <z_log_minimal_printk>:
{
   287a0:	b40f      	push	{r0, r1, r2, r3}
   287a2:	b507      	push	{r0, r1, r2, lr}
   287a4:	a904      	add	r1, sp, #16
   287a6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   287aa:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   287ac:	f7e9 fed8 	bl	12560 <vprintk>
}
   287b0:	b003      	add	sp, #12
   287b2:	f85d eb04 	ldr.w	lr, [sp], #4
   287b6:	b004      	add	sp, #16
   287b8:	4770      	bx	lr

000287ba <nvs_flash_rd>:
{
   287ba:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   287bc:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   287be:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   287c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   287c2:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   287c4:	fa16 f181 	uxtah	r1, r6, r1
   287c8:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   287cc:	6884      	ldr	r4, [r0, #8]
   287ce:	6824      	ldr	r4, [r4, #0]
   287d0:	46a4      	mov	ip, r4
}
   287d2:	bc70      	pop	{r4, r5, r6}
   287d4:	4760      	bx	ip

000287d6 <nvs_flash_block_cmp>:
{
   287d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   287da:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   287dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   287de:	681d      	ldr	r5, [r3, #0]
   287e0:	426d      	negs	r5, r5
{
   287e2:	b089      	sub	sp, #36	; 0x24
   287e4:	4681      	mov	r9, r0
   287e6:	460e      	mov	r6, r1
   287e8:	4617      	mov	r7, r2
	block_size =
   287ea:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   287ee:	b91c      	cbnz	r4, 287f8 <nvs_flash_block_cmp+0x22>
	return 0;
   287f0:	4620      	mov	r0, r4
}
   287f2:	b009      	add	sp, #36	; 0x24
   287f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   287f8:	42ac      	cmp	r4, r5
   287fa:	46a0      	mov	r8, r4
   287fc:	bf28      	it	cs
   287fe:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   28800:	4643      	mov	r3, r8
   28802:	466a      	mov	r2, sp
   28804:	4631      	mov	r1, r6
   28806:	4648      	mov	r0, r9
   28808:	f7ff ffd7 	bl	287ba <nvs_flash_rd>
		if (rc) {
   2880c:	2800      	cmp	r0, #0
   2880e:	d1f0      	bne.n	287f2 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   28810:	4642      	mov	r2, r8
   28812:	4669      	mov	r1, sp
   28814:	4638      	mov	r0, r7
   28816:	f003 fc8a 	bl	2c12e <memcmp>
		if (rc) {
   2881a:	b920      	cbnz	r0, 28826 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2881c:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   28820:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   28822:	4447      	add	r7, r8
   28824:	e7e3      	b.n	287ee <nvs_flash_block_cmp+0x18>
			return 1;
   28826:	2001      	movs	r0, #1
   28828:	e7e3      	b.n	287f2 <nvs_flash_block_cmp+0x1c>

0002882a <nvs_flash_cmp_const>:
{
   2882a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2882e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28830:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   28832:	681d      	ldr	r5, [r3, #0]
   28834:	426d      	negs	r5, r5
{
   28836:	b088      	sub	sp, #32
	block_size =
   28838:	f005 0520 	and.w	r5, r5, #32
{
   2883c:	4607      	mov	r7, r0
   2883e:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   28840:	2320      	movs	r3, #32
{
   28842:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   28844:	4668      	mov	r0, sp
   28846:	462a      	mov	r2, r5
   28848:	f003 fcc4 	bl	2c1d4 <__memset_chk>
	while (len) {
   2884c:	b91c      	cbnz	r4, 28856 <nvs_flash_cmp_const+0x2c>
	return 0;
   2884e:	4620      	mov	r0, r4
}
   28850:	b008      	add	sp, #32
   28852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   28856:	42ac      	cmp	r4, r5
   28858:	46a0      	mov	r8, r4
   2885a:	bf28      	it	cs
   2885c:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2885e:	4643      	mov	r3, r8
   28860:	466a      	mov	r2, sp
   28862:	4631      	mov	r1, r6
   28864:	4638      	mov	r0, r7
   28866:	f7ff ffb6 	bl	287d6 <nvs_flash_block_cmp>
		if (rc) {
   2886a:	2800      	cmp	r0, #0
   2886c:	d1f0      	bne.n	28850 <nvs_flash_cmp_const+0x26>
		len -= bytes_to_cmp;
   2886e:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   28872:	4446      	add	r6, r8
   28874:	e7ea      	b.n	2884c <nvs_flash_cmp_const+0x22>

00028876 <nvs_flash_erase_sector>:
{
   28876:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28878:	8982      	ldrh	r2, [r0, #12]
   2887a:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   2887c:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2887e:	0c09      	lsrs	r1, r1, #16
{
   28880:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   28882:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   28884:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   28886:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   2888a:	6883      	ldr	r3, [r0, #8]
   2888c:	689b      	ldr	r3, [r3, #8]
   2888e:	4798      	blx	r3
	if (rc) {
   28890:	b950      	cbnz	r0, 288a8 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   28892:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   28894:	89a3      	ldrh	r3, [r4, #12]
   28896:	7912      	ldrb	r2, [r2, #4]
   28898:	4629      	mov	r1, r5
   2889a:	4620      	mov	r0, r4
   2889c:	f7ff ffc5 	bl	2882a <nvs_flash_cmp_const>
		rc = -ENXIO;
   288a0:	2800      	cmp	r0, #0
   288a2:	bf18      	it	ne
   288a4:	f06f 0005 	mvnne.w	r0, #5
}
   288a8:	bd38      	pop	{r3, r4, r5, pc}

000288aa <nvs_ate_crc8_update>:
{
   288aa:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   288ac:	4601      	mov	r1, r0
{
   288ae:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   288b0:	2207      	movs	r2, #7
   288b2:	20ff      	movs	r0, #255	; 0xff
   288b4:	f7e9 fe04 	bl	124c0 <crc8_ccitt>
	entry->crc8 = crc8;
   288b8:	71e0      	strb	r0, [r4, #7]
}
   288ba:	bd10      	pop	{r4, pc}

000288bc <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   288bc:	680b      	ldr	r3, [r1, #0]
   288be:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   288c2:	0c1a      	lsrs	r2, r3, #16
   288c4:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   288c8:	bf08      	it	eq
   288ca:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   288ce:	600b      	str	r3, [r1, #0]
}
   288d0:	4770      	bx	lr

000288d2 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   288d2:	7803      	ldrb	r3, [r0, #0]
   288d4:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   288d6:	bf81      	itttt	hi
   288d8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   288dc:	18c9      	addhi	r1, r1, r3
   288de:	425b      	neghi	r3, r3
   288e0:	4019      	andhi	r1, r3
}
   288e2:	4608      	mov	r0, r1
   288e4:	4770      	bx	lr

000288e6 <nvs_ate_valid>:
{
   288e6:	b570      	push	{r4, r5, r6, lr}
   288e8:	460c      	mov	r4, r1
   288ea:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   288ec:	2108      	movs	r1, #8
   288ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   288f0:	f7ff ffef 	bl	288d2 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   288f4:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   288f6:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   288f8:	4621      	mov	r1, r4
   288fa:	20ff      	movs	r0, #255	; 0xff
   288fc:	f7e9 fde0 	bl	124c0 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   28900:	79e3      	ldrb	r3, [r4, #7]
   28902:	4283      	cmp	r3, r0
   28904:	d107      	bne.n	28916 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   28906:	89a8      	ldrh	r0, [r5, #12]
   28908:	8863      	ldrh	r3, [r4, #2]
   2890a:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2890c:	4283      	cmp	r3, r0
   2890e:	bf2c      	ite	cs
   28910:	2000      	movcs	r0, #0
   28912:	2001      	movcc	r0, #1
}
   28914:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   28916:	2000      	movs	r0, #0
   28918:	e7fc      	b.n	28914 <nvs_ate_valid+0x2e>

0002891a <nvs_close_ate_valid>:
{
   2891a:	b538      	push	{r3, r4, r5, lr}
   2891c:	4605      	mov	r5, r0
   2891e:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   28920:	f7ff ffe1 	bl	288e6 <nvs_ate_valid>
   28924:	b1a0      	cbz	r0, 28950 <nvs_close_ate_valid+0x36>
   28926:	88a0      	ldrh	r0, [r4, #4]
   28928:	b998      	cbnz	r0, 28952 <nvs_close_ate_valid+0x38>
   2892a:	8822      	ldrh	r2, [r4, #0]
   2892c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28930:	429a      	cmp	r2, r3
   28932:	d10d      	bne.n	28950 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28934:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   28936:	2108      	movs	r1, #8
   28938:	f7ff ffcb 	bl	288d2 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2893c:	8862      	ldrh	r2, [r4, #2]
   2893e:	89ab      	ldrh	r3, [r5, #12]
   28940:	1a9b      	subs	r3, r3, r2
   28942:	fbb3 f2f0 	udiv	r2, r3, r0
   28946:	fb02 3010 	mls	r0, r2, r0, r3
   2894a:	fab0 f080 	clz	r0, r0
   2894e:	0940      	lsrs	r0, r0, #5
}
   28950:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   28952:	2000      	movs	r0, #0
   28954:	e7fc      	b.n	28950 <nvs_close_ate_valid+0x36>

00028956 <nvs_prev_ate>:
{
   28956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28958:	4605      	mov	r5, r0
   2895a:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2895c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2895e:	2108      	movs	r1, #8
   28960:	f7ff ffb7 	bl	288d2 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28964:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28966:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28968:	2308      	movs	r3, #8
   2896a:	4628      	mov	r0, r5
   2896c:	f7ff ff25 	bl	287ba <nvs_flash_rd>
	if (rc) {
   28970:	4604      	mov	r4, r0
   28972:	2800      	cmp	r0, #0
   28974:	d138      	bne.n	289e8 <nvs_prev_ate+0x92>
	*addr += ate_size;
   28976:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   28978:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   2897a:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2897c:	b29a      	uxth	r2, r3
   2897e:	1bc7      	subs	r7, r0, r7
   28980:	42ba      	cmp	r2, r7
	*addr += ate_size;
   28982:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   28984:	d130      	bne.n	289e8 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   28986:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   28988:	bf03      	ittte	eq
   2898a:	89e9      	ldrheq	r1, [r5, #14]
   2898c:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
   28990:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   28994:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   28998:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2899a:	2308      	movs	r3, #8
   2899c:	466a      	mov	r2, sp
   2899e:	4628      	mov	r0, r5
   289a0:	f7ff ff0b 	bl	287ba <nvs_flash_rd>
	if (rc) {
   289a4:	4604      	mov	r4, r0
   289a6:	b9f8      	cbnz	r0, 289e8 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   289a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   289aa:	466a      	mov	r2, sp
   289ac:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   289ae:	4603      	mov	r3, r0
		if (data8[i] != value) {
   289b0:	f812 0b01 	ldrb.w	r0, [r2], #1
   289b4:	4281      	cmp	r1, r0
   289b6:	d10c      	bne.n	289d2 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   289b8:	3301      	adds	r3, #1
   289ba:	2b08      	cmp	r3, #8
   289bc:	d1f8      	bne.n	289b0 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   289be:	686b      	ldr	r3, [r5, #4]
   289c0:	e005      	b.n	289ce <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   289c2:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   289c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   289c8:	0c1b      	lsrs	r3, r3, #16
   289ca:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   289cc:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   289ce:	6033      	str	r3, [r6, #0]
		return 0;
   289d0:	e00a      	b.n	289e8 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   289d2:	4669      	mov	r1, sp
   289d4:	4628      	mov	r0, r5
   289d6:	f7ff ffa0 	bl	2891a <nvs_close_ate_valid>
   289da:	2800      	cmp	r0, #0
   289dc:	d1f1      	bne.n	289c2 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   289de:	4631      	mov	r1, r6
   289e0:	4628      	mov	r0, r5
   289e2:	f7ea fded 	bl	135c0 <nvs_recover_last_ate>
   289e6:	4604      	mov	r4, r0
}
   289e8:	4620      	mov	r0, r4
   289ea:	b003      	add	sp, #12
   289ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000289ee <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   289ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   289f2:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   289f4:	4607      	mov	r7, r0
	offset += addr & ADDR_OFFS_MASK;
   289f6:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   289f8:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   289fa:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   289fc:	fa10 f181 	uxtah	r1, r0, r1
   28a00:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   28a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28a06:	681e      	ldr	r6, [r3, #0]
   28a08:	4276      	negs	r6, r6
	if (blen > 0) {
   28a0a:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   28a0c:	b089      	sub	sp, #36	; 0x24
   28a0e:	4690      	mov	r8, r2
	if (blen > 0) {
   28a10:	d00a      	beq.n	28a28 <nvs_flash_al_wrt.part.0+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   28a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   28a14:	6883      	ldr	r3, [r0, #8]
   28a16:	4629      	mov	r1, r5
   28a18:	f8d3 9004 	ldr.w	r9, [r3, #4]
   28a1c:	4633      	mov	r3, r6
   28a1e:	47c8      	blx	r9
		if (rc) {
   28a20:	b9c0      	cbnz	r0, 28a54 <nvs_flash_al_wrt.part.0+0x66>
		len -= blen;
   28a22:	1ba4      	subs	r4, r4, r6
		offset += blen;
   28a24:	4435      	add	r5, r6
		data8 += blen;
   28a26:	44b0      	add	r8, r6
	if (len) {
   28a28:	b1bc      	cbz	r4, 28a5a <nvs_flash_al_wrt.part.0+0x6c>
		memcpy(buf, data8, len);
   28a2a:	2320      	movs	r3, #32
   28a2c:	4622      	mov	r2, r4
   28a2e:	4641      	mov	r1, r8
   28a30:	4668      	mov	r0, sp
   28a32:	f003 fb9a 	bl	2c16a <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   28a36:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   28a38:	6832      	ldr	r2, [r6, #0]
   28a3a:	7931      	ldrb	r1, [r6, #4]
   28a3c:	1b12      	subs	r2, r2, r4
   28a3e:	eb0d 0004 	add.w	r0, sp, r4
   28a42:	f003 fbbf 	bl	2c1c4 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   28a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   28a48:	6833      	ldr	r3, [r6, #0]
   28a4a:	6882      	ldr	r2, [r0, #8]
   28a4c:	4629      	mov	r1, r5
   28a4e:	6854      	ldr	r4, [r2, #4]
   28a50:	466a      	mov	r2, sp
   28a52:	47a0      	blx	r4
}
   28a54:	b009      	add	sp, #36	; 0x24
   28a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
end:
   28a5a:	4620      	mov	r0, r4
   28a5c:	e7fa      	b.n	28a54 <nvs_flash_al_wrt.part.0+0x66>

00028a5e <nvs_flash_data_wrt>:
{
   28a5e:	b538      	push	{r3, r4, r5, lr}
   28a60:	4604      	mov	r4, r0
	if (!len) {
   28a62:	4615      	mov	r5, r2
   28a64:	b12a      	cbz	r2, 28a72 <nvs_flash_data_wrt+0x14>
   28a66:	4613      	mov	r3, r2
   28a68:	460a      	mov	r2, r1
   28a6a:	6881      	ldr	r1, [r0, #8]
   28a6c:	f7ff ffbf 	bl	289ee <nvs_flash_al_wrt.part.0>
   28a70:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   28a72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28a74:	4629      	mov	r1, r5
   28a76:	f7ff ff2c 	bl	288d2 <nvs_al_size.isra.0>
   28a7a:	68a3      	ldr	r3, [r4, #8]
   28a7c:	4403      	add	r3, r0
   28a7e:	60a3      	str	r3, [r4, #8]
}
   28a80:	4610      	mov	r0, r2
   28a82:	bd38      	pop	{r3, r4, r5, pc}

00028a84 <nvs_flash_ate_wrt>:
{
   28a84:	b510      	push	{r4, lr}
   28a86:	460a      	mov	r2, r1
	if (!len) {
   28a88:	2308      	movs	r3, #8
   28a8a:	6841      	ldr	r1, [r0, #4]
{
   28a8c:	4604      	mov	r4, r0
   28a8e:	f7ff ffae 	bl	289ee <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   28a92:	2108      	movs	r1, #8
   28a94:	4602      	mov	r2, r0
   28a96:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28a98:	f7ff ff1b 	bl	288d2 <nvs_al_size.isra.0>
   28a9c:	6863      	ldr	r3, [r4, #4]
   28a9e:	1a1b      	subs	r3, r3, r0
   28aa0:	6063      	str	r3, [r4, #4]
}
   28aa2:	4610      	mov	r0, r2
   28aa4:	bd10      	pop	{r4, pc}

00028aa6 <nvs_add_gc_done_ate>:
{
   28aa6:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   28aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28aac:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   28ab0:	2300      	movs	r3, #0
{
   28ab2:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   28ab4:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   28ab8:	6883      	ldr	r3, [r0, #8]
   28aba:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   28abe:	4668      	mov	r0, sp
   28ac0:	f7ff fef3 	bl	288aa <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   28ac4:	4669      	mov	r1, sp
   28ac6:	4620      	mov	r0, r4
   28ac8:	f7ff ffdc 	bl	28a84 <nvs_flash_ate_wrt>
}
   28acc:	b002      	add	sp, #8
   28ace:	bd10      	pop	{r4, pc}

00028ad0 <nvs_gc>:
{
   28ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ad4:	4604      	mov	r4, r0
   28ad6:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28ad8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   28ada:	2108      	movs	r1, #8
   28adc:	f7ff fef9 	bl	288d2 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   28ae0:	6863      	ldr	r3, [r4, #4]
   28ae2:	0c1b      	lsrs	r3, r3, #16
   28ae4:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28ae6:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   28ae8:	a901      	add	r1, sp, #4
   28aea:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   28aec:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   28aee:	f7ff fee5 	bl	288bc <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   28af2:	9b01      	ldr	r3, [sp, #4]
   28af4:	89a1      	ldrh	r1, [r4, #12]
   28af6:	4419      	add	r1, r3
   28af8:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28afa:	2308      	movs	r3, #8
   28afc:	aa04      	add	r2, sp, #16
   28afe:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   28b00:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28b02:	f7ff fe5a 	bl	287ba <nvs_flash_rd>
	if (rc < 0) {
   28b06:	2800      	cmp	r0, #0
   28b08:	f2c0 8094 	blt.w	28c34 <nvs_gc+0x164>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   28b0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28b0e:	aa04      	add	r2, sp, #16
   28b10:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   28b12:	2300      	movs	r3, #0
		if (data8[i] != value) {
   28b14:	f812 0b01 	ldrb.w	r0, [r2], #1
   28b18:	4281      	cmp	r1, r0
   28b1a:	d17c      	bne.n	28c16 <nvs_gc+0x146>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   28b1c:	3301      	adds	r3, #1
   28b1e:	2b08      	cmp	r3, #8
   28b20:	d1f8      	bne.n	28b14 <nvs_gc+0x44>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   28b22:	68a0      	ldr	r0, [r4, #8]
   28b24:	6863      	ldr	r3, [r4, #4]
   28b26:	4428      	add	r0, r5
   28b28:	4283      	cmp	r3, r0
   28b2a:	d26e      	bcs.n	28c0a <nvs_gc+0x13a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   28b2c:	9901      	ldr	r1, [sp, #4]
   28b2e:	4620      	mov	r0, r4
   28b30:	f7ff fea1 	bl	28876 <nvs_flash_erase_sector>
	if (rc) {
   28b34:	e07e      	b.n	28c34 <nvs_gc+0x164>
		gc_addr &= ADDR_SECT_MASK;
   28b36:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   28b38:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   28b3c:	0c1b      	lsrs	r3, r3, #16
   28b3e:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   28b40:	4413      	add	r3, r2
   28b42:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   28b44:	aa06      	add	r2, sp, #24
   28b46:	a902      	add	r1, sp, #8
   28b48:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   28b4a:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   28b4e:	f7ff ff02 	bl	28956 <nvs_prev_ate>
		if (rc) {
   28b52:	2800      	cmp	r0, #0
   28b54:	d16e      	bne.n	28c34 <nvs_gc+0x164>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   28b56:	a906      	add	r1, sp, #24
   28b58:	4620      	mov	r0, r4
   28b5a:	f7ff fec4 	bl	288e6 <nvs_ate_valid>
   28b5e:	2800      	cmp	r0, #0
   28b60:	d034      	beq.n	28bcc <nvs_gc+0xfc>
		wlk_addr = fs->ate_wra;
   28b62:	6863      	ldr	r3, [r4, #4]
   28b64:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   28b66:	aa08      	add	r2, sp, #32
   28b68:	a903      	add	r1, sp, #12
   28b6a:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   28b6c:	9e03      	ldr	r6, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   28b6e:	f7ff fef2 	bl	28956 <nvs_prev_ate>
			if (rc) {
   28b72:	2800      	cmp	r0, #0
   28b74:	d15e      	bne.n	28c34 <nvs_gc+0x164>
			if ((wlk_ate.id == gc_ate.id) &&
   28b76:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   28b7a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   28b7e:	429a      	cmp	r2, r3
   28b80:	d027      	beq.n	28bd2 <nvs_gc+0x102>
		} while (wlk_addr != fs->ate_wra);
   28b82:	6862      	ldr	r2, [r4, #4]
   28b84:	9b03      	ldr	r3, [sp, #12]
   28b86:	429a      	cmp	r2, r3
   28b88:	d1ed      	bne.n	28b66 <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   28b8a:	4556      	cmp	r6, sl
   28b8c:	d11e      	bne.n	28bcc <nvs_gc+0xfc>
   28b8e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   28b92:	b1db      	cbz	r3, 28bcc <nvs_gc+0xfc>
			data_addr += gc_ate.offset;
   28b94:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   28b98:	ea4f 471a 	mov.w	r7, sl, lsr #16
   28b9c:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   28b9e:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   28ba0:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   28ba2:	68a3      	ldr	r3, [r4, #8]
   28ba4:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   28ba8:	f7ff fe7f 	bl	288aa <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28bac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   28bae:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   28bb2:	681e      	ldr	r6, [r3, #0]
   28bb4:	4276      	negs	r6, r6
	block_size =
   28bb6:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   28bba:	f1b8 0f00 	cmp.w	r8, #0
   28bbe:	d10f      	bne.n	28be0 <nvs_gc+0x110>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   28bc0:	a906      	add	r1, sp, #24
   28bc2:	4620      	mov	r0, r4
   28bc4:	f7ff ff5e 	bl	28a84 <nvs_flash_ate_wrt>
			if (rc) {
   28bc8:	2800      	cmp	r0, #0
   28bca:	d133      	bne.n	28c34 <nvs_gc+0x164>
	} while (gc_prev_addr != stop_addr);
   28bcc:	45ca      	cmp	sl, r9
   28bce:	d1b9      	bne.n	28b44 <nvs_gc+0x74>
gc_done:
   28bd0:	e7a7      	b.n	28b22 <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   28bd2:	a908      	add	r1, sp, #32
   28bd4:	4620      	mov	r0, r4
   28bd6:	f7ff fe86 	bl	288e6 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   28bda:	2800      	cmp	r0, #0
   28bdc:	d0d1      	beq.n	28b82 <nvs_gc+0xb2>
   28bde:	e7d4      	b.n	28b8a <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   28be0:	4546      	cmp	r6, r8
   28be2:	46b3      	mov	fp, r6
   28be4:	bf28      	it	cs
   28be6:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   28be8:	465b      	mov	r3, fp
   28bea:	aa0a      	add	r2, sp, #40	; 0x28
   28bec:	4639      	mov	r1, r7
   28bee:	4620      	mov	r0, r4
   28bf0:	f7ff fde3 	bl	287ba <nvs_flash_rd>
		if (rc) {
   28bf4:	b9f0      	cbnz	r0, 28c34 <nvs_gc+0x164>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   28bf6:	465a      	mov	r2, fp
   28bf8:	a90a      	add	r1, sp, #40	; 0x28
   28bfa:	4620      	mov	r0, r4
   28bfc:	f7ff ff2f 	bl	28a5e <nvs_flash_data_wrt>
		if (rc) {
   28c00:	b9c0      	cbnz	r0, 28c34 <nvs_gc+0x164>
		len -= bytes_to_copy;
   28c02:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   28c06:	445f      	add	r7, fp
   28c08:	e7d7      	b.n	28bba <nvs_gc+0xea>
		rc = nvs_add_gc_done_ate(fs);
   28c0a:	4620      	mov	r0, r4
   28c0c:	f7ff ff4b 	bl	28aa6 <nvs_add_gc_done_ate>
		if (rc) {
   28c10:	2800      	cmp	r0, #0
   28c12:	d08b      	beq.n	28b2c <nvs_gc+0x5c>
   28c14:	e00e      	b.n	28c34 <nvs_gc+0x164>
	stop_addr = gc_addr - ate_size;
   28c16:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   28c18:	a904      	add	r1, sp, #16
   28c1a:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   28c1c:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   28c20:	f7ff fe7b 	bl	2891a <nvs_close_ate_valid>
   28c24:	2800      	cmp	r0, #0
   28c26:	d186      	bne.n	28b36 <nvs_gc+0x66>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   28c28:	a902      	add	r1, sp, #8
   28c2a:	4620      	mov	r0, r4
   28c2c:	f7ea fcc8 	bl	135c0 <nvs_recover_last_ate>
		if (rc) {
   28c30:	2800      	cmp	r0, #0
   28c32:	d087      	beq.n	28b44 <nvs_gc+0x74>
}
   28c34:	b013      	add	sp, #76	; 0x4c
   28c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028c3a <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   28c3a:	2300      	movs	r3, #0
   28c3c:	461a      	mov	r2, r3
   28c3e:	f7ea be83 	b.w	13948 <nvs_write>

00028c42 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   28c42:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   28c44:	2400      	movs	r4, #0
   28c46:	9400      	str	r4, [sp, #0]
   28c48:	f7ea ff48 	bl	13adc <nvs_read_hist>
	return rc;
}
   28c4c:	b002      	add	sp, #8
   28c4e:	bd10      	pop	{r4, pc}

00028c50 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   28c50:	4770      	bx	lr

00028c52 <get_sectors_cb>:
{
   28c52:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   28c54:	6802      	ldr	r2, [r0, #0]
   28c56:	684c      	ldr	r4, [r1, #4]
   28c58:	42a2      	cmp	r2, r4
   28c5a:	d316      	bcc.n	28c8a <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   28c5c:	688b      	ldr	r3, [r1, #8]
   28c5e:	4423      	add	r3, r4
   28c60:	429a      	cmp	r2, r3
   28c62:	d206      	bcs.n	28c72 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   28c64:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   28c68:	42ab      	cmp	r3, r5
   28c6a:	d304      	bcc.n	28c76 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   28c6c:	f06f 030b 	mvn.w	r3, #11
   28c70:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   28c72:	2000      	movs	r0, #0
   28c74:	e00a      	b.n	28c8c <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   28c76:	68cd      	ldr	r5, [r1, #12]
   28c78:	1b12      	subs	r2, r2, r4
   28c7a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   28c7e:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   28c82:	6842      	ldr	r2, [r0, #4]
   28c84:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   28c86:	3301      	adds	r3, #1
   28c88:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   28c8a:	2001      	movs	r0, #1
}
   28c8c:	bd70      	pop	{r4, r5, r6, pc}

00028c8e <settings_load>:
	return settings_load_subtree(NULL);
   28c8e:	2000      	movs	r0, #0
   28c90:	f7eb b814 	b.w	13cbc <settings_load_subtree>

00028c94 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   28c94:	2200      	movs	r2, #0
   28c96:	4611      	mov	r1, r2
   28c98:	f7ea bfd6 	b.w	13c48 <settings_save_one>

00028c9c <settings_name_steq>:
{
   28c9c:	4603      	mov	r3, r0
   28c9e:	b530      	push	{r4, r5, lr}
   28ca0:	4608      	mov	r0, r1
	if (next) {
   28ca2:	b10a      	cbz	r2, 28ca8 <settings_name_steq+0xc>
		*next = NULL;
   28ca4:	2100      	movs	r1, #0
   28ca6:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   28ca8:	b163      	cbz	r3, 28cc4 <settings_name_steq+0x28>
   28caa:	b190      	cbz	r0, 28cd2 <settings_name_steq+0x36>
   28cac:	1e41      	subs	r1, r0, #1
   28cae:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   28cb0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   28cb4:	4604      	mov	r4, r0
   28cb6:	f810 3b01 	ldrb.w	r3, [r0], #1
   28cba:	b15d      	cbz	r5, 28cd4 <settings_name_steq+0x38>
   28cbc:	429d      	cmp	r5, r3
   28cbe:	d101      	bne.n	28cc4 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   28cc0:	2d3d      	cmp	r5, #61	; 0x3d
   28cc2:	d1f5      	bne.n	28cb0 <settings_name_steq+0x14>
	return 0;
   28cc4:	2000      	movs	r0, #0
   28cc6:	e004      	b.n	28cd2 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   28cc8:	2b3d      	cmp	r3, #61	; 0x3d
   28cca:	d008      	beq.n	28cde <settings_name_steq+0x42>
   28ccc:	fab3 f083 	clz	r0, r3
   28cd0:	0940      	lsrs	r0, r0, #5
}
   28cd2:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   28cd4:	2b2f      	cmp	r3, #47	; 0x2f
   28cd6:	d1f7      	bne.n	28cc8 <settings_name_steq+0x2c>
		if (next) {
   28cd8:	b10a      	cbz	r2, 28cde <settings_name_steq+0x42>
			*next = name + 1;
   28cda:	3401      	adds	r4, #1
   28cdc:	6014      	str	r4, [r2, #0]
		return 1;
   28cde:	2001      	movs	r0, #1
   28ce0:	e7f7      	b.n	28cd2 <settings_name_steq+0x36>

00028ce2 <settings_name_next>:
{
   28ce2:	b530      	push	{r4, r5, lr}
   28ce4:	4603      	mov	r3, r0
	if (next) {
   28ce6:	b109      	cbz	r1, 28cec <settings_name_next+0xa>
		*next = NULL;
   28ce8:	2200      	movs	r2, #0
   28cea:	600a      	str	r2, [r1, #0]
	if (!name) {
   28cec:	b16b      	cbz	r3, 28d0a <settings_name_next+0x28>
   28cee:	461a      	mov	r2, r3
   28cf0:	4614      	mov	r4, r2
   28cf2:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   28cf4:	f812 5b01 	ldrb.w	r5, [r2], #1
   28cf8:	b135      	cbz	r5, 28d08 <settings_name_next+0x26>
   28cfa:	2d3d      	cmp	r5, #61	; 0x3d
   28cfc:	d004      	beq.n	28d08 <settings_name_next+0x26>
   28cfe:	2d2f      	cmp	r5, #47	; 0x2f
   28d00:	d1f6      	bne.n	28cf0 <settings_name_next+0xe>
		if (next) {
   28d02:	b109      	cbz	r1, 28d08 <settings_name_next+0x26>
			*next = name + 1;
   28d04:	3401      	adds	r4, #1
   28d06:	600c      	str	r4, [r1, #0]
}
   28d08:	bd30      	pop	{r4, r5, pc}
		return 0;
   28d0a:	4618      	mov	r0, r3
   28d0c:	e7fc      	b.n	28d08 <settings_name_next+0x26>

00028d0e <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = (struct settings_nvs *)cs;

	return &cf->cf_nvs;
}
   28d0e:	3008      	adds	r0, #8
   28d10:	4770      	bx	lr

00028d12 <settings_nvs_read_fn>:
{
   28d12:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   28d14:	4613      	mov	r3, r2
{
   28d16:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   28d18:	460a      	mov	r2, r1
   28d1a:	8881      	ldrh	r1, [r0, #4]
   28d1c:	6800      	ldr	r0, [r0, #0]
   28d1e:	f7ff ff90 	bl	28c42 <nvs_read>
}
   28d22:	42a0      	cmp	r0, r4
   28d24:	bfa8      	it	ge
   28d26:	4620      	movge	r0, r4
   28d28:	bd10      	pop	{r4, pc}

00028d2a <settings_nvs_save>:
{
   28d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d2e:	b097      	sub	sp, #92	; 0x5c
   28d30:	4604      	mov	r4, r0
   28d32:	9201      	str	r2, [sp, #4]
   28d34:	469b      	mov	fp, r3
	if (!name) {
   28d36:	4689      	mov	r9, r1
   28d38:	2900      	cmp	r1, #0
   28d3a:	d069      	beq.n	28e10 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   28d3c:	b1da      	cbz	r2, 28d76 <settings_nvs_save+0x4c>
   28d3e:	fabb f78b 	clz	r7, fp
   28d42:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   28d44:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   28d46:	3501      	adds	r5, #1
   28d48:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   28d4a:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   28d4c:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   28d50:	1e6e      	subs	r6, r5, #1
   28d52:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   28d54:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   28d58:	d02e      	beq.n	28db8 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   28d5a:	234a      	movs	r3, #74	; 0x4a
   28d5c:	aa03      	add	r2, sp, #12
   28d5e:	4631      	mov	r1, r6
   28d60:	4650      	mov	r0, sl
   28d62:	f7ff ff6e 	bl	28c42 <nvs_read>
		if (rc < 0) {
   28d66:	2800      	cmp	r0, #0
   28d68:	da07      	bge.n	28d7a <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   28d6a:	f110 0f02 	cmn.w	r0, #2
   28d6e:	bf08      	it	eq
   28d70:	46b0      	moveq	r8, r6
   28d72:	4635      	mov	r5, r6
   28d74:	e7ec      	b.n	28d50 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   28d76:	2701      	movs	r7, #1
   28d78:	e7e4      	b.n	28d44 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   28d7a:	ab16      	add	r3, sp, #88	; 0x58
   28d7c:	4418      	add	r0, r3
   28d7e:	2300      	movs	r3, #0
   28d80:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   28d84:	a903      	add	r1, sp, #12
   28d86:	4648      	mov	r0, r9
   28d88:	f7e4 f949 	bl	d01e <strcmp>
   28d8c:	2800      	cmp	r0, #0
   28d8e:	d1f0      	bne.n	28d72 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   28d90:	2f00      	cmp	r7, #0
   28d92:	d03b      	beq.n	28e0c <settings_nvs_save+0xe2>
   28d94:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   28d96:	42b3      	cmp	r3, r6
   28d98:	d142      	bne.n	28e20 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   28d9a:	4622      	mov	r2, r4
   28d9c:	1e73      	subs	r3, r6, #1
   28d9e:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   28da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   28da6:	2302      	movs	r3, #2
   28da8:	4650      	mov	r0, sl
   28daa:	f7ea fdcd 	bl	13948 <nvs_write>
			if (rc < 0) {
   28dae:	2800      	cmp	r0, #0
   28db0:	da36      	bge.n	28e20 <settings_nvs_save+0xf6>
}
   28db2:	b017      	add	sp, #92	; 0x5c
   28db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   28db8:	bb6f      	cbnz	r7, 28e16 <settings_nvs_save+0xec>
	write_name = true;
   28dba:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   28dbc:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   28dc0:	d02b      	beq.n	28e1a <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   28dc2:	f104 0508 	add.w	r5, r4, #8
   28dc6:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   28dca:	9a01      	ldr	r2, [sp, #4]
   28dcc:	465b      	mov	r3, fp
   28dce:	b289      	uxth	r1, r1
   28dd0:	4628      	mov	r0, r5
   28dd2:	f7ea fdb9 	bl	13948 <nvs_write>
	if (rc < 0) {
   28dd6:	2800      	cmp	r0, #0
   28dd8:	dbeb      	blt.n	28db2 <settings_nvs_save+0x88>
	if (write_name) {
   28dda:	b157      	cbz	r7, 28df2 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   28ddc:	4648      	mov	r0, r9
   28dde:	f7e4 f928 	bl	d032 <strlen>
   28de2:	464a      	mov	r2, r9
   28de4:	4603      	mov	r3, r0
   28de6:	4641      	mov	r1, r8
   28de8:	4628      	mov	r0, r5
   28dea:	f7ea fdad 	bl	13948 <nvs_write>
		if (rc < 0) {
   28dee:	2800      	cmp	r0, #0
   28df0:	dbdf      	blt.n	28db2 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   28df2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   28df4:	4543      	cmp	r3, r8
   28df6:	d220      	bcs.n	28e3a <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   28df8:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   28dfa:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   28dfc:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   28e00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   28e04:	4628      	mov	r0, r5
   28e06:	f7ea fd9f 	bl	13948 <nvs_write>
   28e0a:	e016      	b.n	28e3a <settings_nvs_save+0x110>
   28e0c:	46b0      	mov	r8, r6
   28e0e:	e7d5      	b.n	28dbc <settings_nvs_save+0x92>
		return -EINVAL;
   28e10:	f06f 0015 	mvn.w	r0, #21
   28e14:	e7cd      	b.n	28db2 <settings_nvs_save+0x88>
		return 0;
   28e16:	2000      	movs	r0, #0
   28e18:	e7cb      	b.n	28db2 <settings_nvs_save+0x88>
		return -ENOMEM;
   28e1a:	f06f 000b 	mvn.w	r0, #11
   28e1e:	e7c8      	b.n	28db2 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   28e20:	4631      	mov	r1, r6
   28e22:	4650      	mov	r0, sl
   28e24:	f7ff ff09 	bl	28c3a <nvs_delete>
			if (rc >= 0) {
   28e28:	2800      	cmp	r0, #0
   28e2a:	dbc2      	blt.n	28db2 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   28e2c:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   28e30:	313f      	adds	r1, #63	; 0x3f
   28e32:	b289      	uxth	r1, r1
   28e34:	4650      	mov	r0, sl
   28e36:	f7ff ff00 	bl	28c3a <nvs_delete>
	if (rc < 0) {
   28e3a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   28e3e:	e7b8      	b.n	28db2 <settings_nvs_save+0x88>

00028e40 <settings_nvs_backend_init>:
	cf->cf_nvs.flash_device = cf->flash_dev;
   28e40:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   28e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28e44:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = cf->flash_dev;
   28e46:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   28e48:	b1c3      	cbz	r3, 28e7c <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   28e4a:	f100 0608 	add.w	r6, r0, #8
   28e4e:	4630      	mov	r0, r6
   28e50:	f7ea fbe8 	bl	13624 <nvs_mount>
	if (rc) {
   28e54:	4605      	mov	r5, r0
   28e56:	b970      	cbnz	r0, 28e76 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   28e58:	2302      	movs	r3, #2
   28e5a:	f10d 0206 	add.w	r2, sp, #6
   28e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   28e62:	4630      	mov	r0, r6
   28e64:	f7ff feed 	bl	28c42 <nvs_read>
	if (rc < 0) {
   28e68:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   28e6a:	bfac      	ite	ge
   28e6c:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   28e70:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   28e74:	8723      	strh	r3, [r4, #56]	; 0x38
}
   28e76:	4628      	mov	r0, r5
   28e78:	b002      	add	sp, #8
   28e7a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   28e7c:	f06f 0512 	mvn.w	r5, #18
   28e80:	e7f9      	b.n	28e76 <settings_nvs_backend_init+0x36>

00028e82 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   28e82:	b538      	push	{r3, r4, r5, lr}
   28e84:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   28e86:	42ab      	cmp	r3, r5
{
   28e88:	4611      	mov	r1, r2
   28e8a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   28e8c:	d804      	bhi.n	28e98 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28e8e:	461a      	mov	r2, r3
   28e90:	f003 f95d 	bl	2c14e <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   28e94:	4620      	mov	r0, r4
   28e96:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   28e98:	2400      	movs	r4, #0
   28e9a:	e7fb      	b.n	28e94 <_copy+0x12>

00028e9c <_set>:
__ssp_bos_icheck3(memset, void *, int)
   28e9c:	f003 b992 	b.w	2c1c4 <memset>

00028ea0 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   28ea0:	09c3      	lsrs	r3, r0, #7
   28ea2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28ea6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   28eaa:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   28eae:	b2c0      	uxtb	r0, r0
   28eb0:	4770      	bx	lr

00028eb2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   28eb2:	78cb      	ldrb	r3, [r1, #3]
   28eb4:	7802      	ldrb	r2, [r0, #0]
   28eb6:	4053      	eors	r3, r2
   28eb8:	7003      	strb	r3, [r0, #0]
   28eba:	884b      	ldrh	r3, [r1, #2]
   28ebc:	7842      	ldrb	r2, [r0, #1]
   28ebe:	4053      	eors	r3, r2
   28ec0:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   28ec2:	680a      	ldr	r2, [r1, #0]
   28ec4:	7883      	ldrb	r3, [r0, #2]
   28ec6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28eca:	7083      	strb	r3, [r0, #2]
   28ecc:	680a      	ldr	r2, [r1, #0]
   28ece:	78c3      	ldrb	r3, [r0, #3]
   28ed0:	4053      	eors	r3, r2
   28ed2:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   28ed4:	79cb      	ldrb	r3, [r1, #7]
   28ed6:	7902      	ldrb	r2, [r0, #4]
   28ed8:	4053      	eors	r3, r2
   28eda:	7103      	strb	r3, [r0, #4]
   28edc:	88cb      	ldrh	r3, [r1, #6]
   28ede:	7942      	ldrb	r2, [r0, #5]
   28ee0:	4053      	eors	r3, r2
   28ee2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   28ee4:	684a      	ldr	r2, [r1, #4]
   28ee6:	7983      	ldrb	r3, [r0, #6]
   28ee8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28eec:	7183      	strb	r3, [r0, #6]
   28eee:	684a      	ldr	r2, [r1, #4]
   28ef0:	79c3      	ldrb	r3, [r0, #7]
   28ef2:	4053      	eors	r3, r2
   28ef4:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   28ef6:	7acb      	ldrb	r3, [r1, #11]
   28ef8:	7a02      	ldrb	r2, [r0, #8]
   28efa:	4053      	eors	r3, r2
   28efc:	7203      	strb	r3, [r0, #8]
   28efe:	7a42      	ldrb	r2, [r0, #9]
   28f00:	894b      	ldrh	r3, [r1, #10]
   28f02:	4053      	eors	r3, r2
   28f04:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   28f06:	688a      	ldr	r2, [r1, #8]
   28f08:	7a83      	ldrb	r3, [r0, #10]
   28f0a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28f0e:	7283      	strb	r3, [r0, #10]
   28f10:	688a      	ldr	r2, [r1, #8]
   28f12:	7ac3      	ldrb	r3, [r0, #11]
   28f14:	4053      	eors	r3, r2
   28f16:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   28f18:	7bcb      	ldrb	r3, [r1, #15]
   28f1a:	7b02      	ldrb	r2, [r0, #12]
   28f1c:	4053      	eors	r3, r2
   28f1e:	7303      	strb	r3, [r0, #12]
   28f20:	89cb      	ldrh	r3, [r1, #14]
   28f22:	7b42      	ldrb	r2, [r0, #13]
   28f24:	4053      	eors	r3, r2
   28f26:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   28f28:	68ca      	ldr	r2, [r1, #12]
   28f2a:	7b83      	ldrb	r3, [r0, #14]
   28f2c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   28f30:	7383      	strb	r3, [r0, #14]
   28f32:	68ca      	ldr	r2, [r1, #12]
   28f34:	7bc3      	ldrb	r3, [r0, #15]
   28f36:	4053      	eors	r3, r2
   28f38:	73c3      	strb	r3, [r0, #15]
}
   28f3a:	4770      	bx	lr

00028f3c <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   28f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   28f3e:	7802      	ldrb	r2, [r0, #0]
   28f40:	f88d 2000 	strb.w	r2, [sp]
   28f44:	7942      	ldrb	r2, [r0, #5]
   28f46:	f88d 2001 	strb.w	r2, [sp, #1]
   28f4a:	7a82      	ldrb	r2, [r0, #10]
   28f4c:	f88d 2002 	strb.w	r2, [sp, #2]
   28f50:	7bc2      	ldrb	r2, [r0, #15]
   28f52:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   28f56:	7902      	ldrb	r2, [r0, #4]
   28f58:	f88d 2004 	strb.w	r2, [sp, #4]
   28f5c:	7a42      	ldrb	r2, [r0, #9]
   28f5e:	f88d 2005 	strb.w	r2, [sp, #5]
   28f62:	7b82      	ldrb	r2, [r0, #14]
   28f64:	f88d 2006 	strb.w	r2, [sp, #6]
   28f68:	78c2      	ldrb	r2, [r0, #3]
   28f6a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   28f6e:	7a02      	ldrb	r2, [r0, #8]
   28f70:	f88d 2008 	strb.w	r2, [sp, #8]
   28f74:	7b42      	ldrb	r2, [r0, #13]
   28f76:	f88d 2009 	strb.w	r2, [sp, #9]
   28f7a:	7882      	ldrb	r2, [r0, #2]
   28f7c:	f88d 200a 	strb.w	r2, [sp, #10]
   28f80:	79c2      	ldrb	r2, [r0, #7]
   28f82:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   28f86:	7b02      	ldrb	r2, [r0, #12]
   28f88:	f88d 200c 	strb.w	r2, [sp, #12]
   28f8c:	7842      	ldrb	r2, [r0, #1]
   28f8e:	7ac3      	ldrb	r3, [r0, #11]
   28f90:	f88d 200d 	strb.w	r2, [sp, #13]
   28f94:	7982      	ldrb	r2, [r0, #6]
   28f96:	f88d 200e 	strb.w	r2, [sp, #14]
   28f9a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   28f9e:	2310      	movs	r3, #16
   28fa0:	466a      	mov	r2, sp
   28fa2:	4619      	mov	r1, r3
   28fa4:	f7ff ff6d 	bl	28e82 <_copy>
}
   28fa8:	b005      	add	sp, #20
   28faa:	f85d fb04 	ldr.w	pc, [sp], #4

00028fae <mult_row_column>:
{
   28fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28fb0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   28fb2:	7808      	ldrb	r0, [r1, #0]
{
   28fb4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   28fb6:	f7ff ff73 	bl	28ea0 <_double_byte>
   28fba:	4605      	mov	r5, r0
   28fbc:	7860      	ldrb	r0, [r4, #1]
   28fbe:	f7ff ff6f 	bl	28ea0 <_double_byte>
   28fc2:	78a2      	ldrb	r2, [r4, #2]
   28fc4:	7863      	ldrb	r3, [r4, #1]
   28fc6:	4053      	eors	r3, r2
   28fc8:	78e2      	ldrb	r2, [r4, #3]
   28fca:	4053      	eors	r3, r2
   28fcc:	405d      	eors	r5, r3
   28fce:	4045      	eors	r5, r0
   28fd0:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   28fd2:	7860      	ldrb	r0, [r4, #1]
   28fd4:	7827      	ldrb	r7, [r4, #0]
   28fd6:	f7ff ff63 	bl	28ea0 <_double_byte>
   28fda:	4605      	mov	r5, r0
   28fdc:	78a0      	ldrb	r0, [r4, #2]
   28fde:	f7ff ff5f 	bl	28ea0 <_double_byte>
   28fe2:	78a3      	ldrb	r3, [r4, #2]
   28fe4:	405f      	eors	r7, r3
   28fe6:	78e3      	ldrb	r3, [r4, #3]
   28fe8:	405f      	eors	r7, r3
   28fea:	407d      	eors	r5, r7
   28fec:	4045      	eors	r5, r0
   28fee:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   28ff0:	78a0      	ldrb	r0, [r4, #2]
   28ff2:	7865      	ldrb	r5, [r4, #1]
   28ff4:	7827      	ldrb	r7, [r4, #0]
   28ff6:	f7ff ff53 	bl	28ea0 <_double_byte>
   28ffa:	406f      	eors	r7, r5
   28ffc:	4605      	mov	r5, r0
   28ffe:	78e0      	ldrb	r0, [r4, #3]
   29000:	f7ff ff4e 	bl	28ea0 <_double_byte>
   29004:	78e3      	ldrb	r3, [r4, #3]
   29006:	405f      	eors	r7, r3
   29008:	407d      	eors	r5, r7
   2900a:	4045      	eors	r5, r0
   2900c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2900e:	7820      	ldrb	r0, [r4, #0]
   29010:	f7ff ff46 	bl	28ea0 <_double_byte>
   29014:	7863      	ldrb	r3, [r4, #1]
   29016:	7825      	ldrb	r5, [r4, #0]
   29018:	405d      	eors	r5, r3
   2901a:	78a3      	ldrb	r3, [r4, #2]
   2901c:	405d      	eors	r5, r3
   2901e:	4045      	eors	r5, r0
   29020:	78e0      	ldrb	r0, [r4, #3]
   29022:	f7ff ff3d 	bl	28ea0 <_double_byte>
   29026:	b2ed      	uxtb	r5, r5
   29028:	4045      	eors	r5, r0
   2902a:	70f5      	strb	r5, [r6, #3]
}
   2902c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002902e <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2902e:	b570      	push	{r4, r5, r6, lr}
   29030:	4614      	mov	r4, r2
   29032:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   29034:	4605      	mov	r5, r0
   29036:	2800      	cmp	r0, #0
   29038:	d049      	beq.n	290ce <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2903a:	2900      	cmp	r1, #0
   2903c:	d049      	beq.n	290d2 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2903e:	2a00      	cmp	r2, #0
   29040:	d049      	beq.n	290d6 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   29042:	2310      	movs	r3, #16
   29044:	460a      	mov	r2, r1
   29046:	4668      	mov	r0, sp
   29048:	4619      	mov	r1, r3
   2904a:	f7ff ff1a 	bl	28e82 <_copy>
	add_round_key(state, s->words);
   2904e:	4621      	mov	r1, r4
   29050:	4668      	mov	r0, sp
   29052:	f7ff ff2e 	bl	28eb2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   29056:	3410      	adds	r4, #16
   29058:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2905c:	4668      	mov	r0, sp
   2905e:	f7eb f997 	bl	14390 <sub_bytes>
		shift_rows(state);
   29062:	4668      	mov	r0, sp
   29064:	f7ff ff6a 	bl	28f3c <shift_rows>
	mult_row_column(t, s);
   29068:	4669      	mov	r1, sp
   2906a:	a804      	add	r0, sp, #16
   2906c:	f7ff ff9f 	bl	28fae <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   29070:	a901      	add	r1, sp, #4
   29072:	a805      	add	r0, sp, #20
   29074:	f7ff ff9b 	bl	28fae <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   29078:	a902      	add	r1, sp, #8
   2907a:	a806      	add	r0, sp, #24
   2907c:	f7ff ff97 	bl	28fae <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   29080:	a903      	add	r1, sp, #12
   29082:	a807      	add	r0, sp, #28
   29084:	f7ff ff93 	bl	28fae <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   29088:	2310      	movs	r3, #16
   2908a:	4619      	mov	r1, r3
   2908c:	eb0d 0203 	add.w	r2, sp, r3
   29090:	4668      	mov	r0, sp
   29092:	f7ff fef6 	bl	28e82 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   29096:	4621      	mov	r1, r4
   29098:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2909a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2909c:	f7ff ff09 	bl	28eb2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   290a0:	42a6      	cmp	r6, r4
   290a2:	d1db      	bne.n	2905c <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   290a4:	f7eb f974 	bl	14390 <sub_bytes>
	shift_rows(state);
   290a8:	4668      	mov	r0, sp
   290aa:	f7ff ff47 	bl	28f3c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   290ae:	4631      	mov	r1, r6
   290b0:	4668      	mov	r0, sp
   290b2:	f7ff fefe 	bl	28eb2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   290b6:	2310      	movs	r3, #16
   290b8:	4619      	mov	r1, r3
   290ba:	466a      	mov	r2, sp
   290bc:	4628      	mov	r0, r5
   290be:	f7ff fee0 	bl	28e82 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   290c2:	4668      	mov	r0, sp
   290c4:	2210      	movs	r2, #16
   290c6:	2100      	movs	r1, #0
   290c8:	f7ff fee8 	bl	28e9c <_set>

	return TC_CRYPTO_SUCCESS;
   290cc:	2001      	movs	r0, #1
}
   290ce:	b008      	add	sp, #32
   290d0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   290d2:	4608      	mov	r0, r1
   290d4:	e7fb      	b.n	290ce <tc_aes_encrypt+0xa0>
   290d6:	4610      	mov	r0, r2
   290d8:	e7f9      	b.n	290ce <tc_aes_encrypt+0xa0>

000290da <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   290da:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   290dc:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   290de:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   290e0:	f912 3b10 	ldrsb.w	r3, [r2], #16
   290e4:	2b00      	cmp	r3, #0
   290e6:	bfb4      	ite	lt
   290e8:	2387      	movlt	r3, #135	; 0x87
   290ea:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   290ec:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   290f0:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   290f4:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   290f6:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   290fa:	d002      	beq.n	29102 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   290fc:	7813      	ldrb	r3, [r2, #0]
   290fe:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   29100:	e7f4      	b.n	290ec <gf_double+0x12>
	}
}
   29102:	bd10      	pop	{r4, pc}

00029104 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   29104:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   29106:	b120      	cbz	r0, 29112 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   29108:	2258      	movs	r2, #88	; 0x58
   2910a:	2100      	movs	r1, #0
   2910c:	f7ff fec6 	bl	28e9c <_set>
   29110:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   29112:	bd08      	pop	{r3, pc}

00029114 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   29114:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29116:	4604      	mov	r4, r0
   29118:	b188      	cbz	r0, 2913e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2911a:	2210      	movs	r2, #16
   2911c:	2100      	movs	r1, #0
   2911e:	f7ff febd 	bl	28e9c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   29122:	2210      	movs	r2, #16
   29124:	f104 0030 	add.w	r0, r4, #48	; 0x30
   29128:	2100      	movs	r1, #0
   2912a:	f7ff feb7 	bl	28e9c <_set>
	s->leftover_offset = 0;
   2912e:	2300      	movs	r3, #0
   29130:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   29132:	2200      	movs	r2, #0
   29134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   29138:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2913c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2913e:	bd10      	pop	{r4, pc}

00029140 <tc_cmac_setup>:
{
   29140:	b570      	push	{r4, r5, r6, lr}
   29142:	460d      	mov	r5, r1
   29144:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   29146:	4604      	mov	r4, r0
   29148:	b310      	cbz	r0, 29190 <tc_cmac_setup+0x50>
   2914a:	b311      	cbz	r1, 29192 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2914c:	2258      	movs	r2, #88	; 0x58
   2914e:	2100      	movs	r1, #0
   29150:	f7ff fea4 	bl	28e9c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   29154:	4629      	mov	r1, r5
	s->sched = sched;
   29156:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   29158:	4630      	mov	r0, r6
   2915a:	f7eb f925 	bl	143a8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2915e:	2210      	movs	r2, #16
   29160:	2100      	movs	r1, #0
   29162:	4620      	mov	r0, r4
   29164:	f7ff fe9a 	bl	28e9c <_set>
	gf_double (s->K1, s->iv);
   29168:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2916c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2916e:	4621      	mov	r1, r4
   29170:	4620      	mov	r0, r4
   29172:	f7ff ff5c 	bl	2902e <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   29176:	4621      	mov	r1, r4
   29178:	4628      	mov	r0, r5
   2917a:	f7ff ffae 	bl	290da <gf_double>
	gf_double (s->K2, s->K1);
   2917e:	4629      	mov	r1, r5
   29180:	f104 0020 	add.w	r0, r4, #32
   29184:	f7ff ffa9 	bl	290da <gf_double>
	tc_cmac_init(s);
   29188:	4620      	mov	r0, r4
   2918a:	f7ff ffc3 	bl	29114 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2918e:	2001      	movs	r0, #1
}
   29190:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   29192:	4608      	mov	r0, r1
   29194:	e7fc      	b.n	29190 <tc_cmac_setup+0x50>

00029196 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   29196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2919a:	460d      	mov	r5, r1
   2919c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2919e:	4604      	mov	r4, r0
   291a0:	2800      	cmp	r0, #0
   291a2:	d061      	beq.n	29268 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   291a4:	b912      	cbnz	r2, 291ac <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   291a6:	2001      	movs	r0, #1
}
   291a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   291ac:	2900      	cmp	r1, #0
   291ae:	d05b      	beq.n	29268 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   291b0:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   291b4:	ea53 0102 	orrs.w	r1, r3, r2
   291b8:	d056      	beq.n	29268 <tc_cmac_update+0xd2>
	s->countdown--;
   291ba:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   291bc:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   291c0:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   291c4:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   291c8:	f1b8 0f00 	cmp.w	r8, #0
   291cc:	d02a      	beq.n	29224 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   291ce:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   291d2:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   291d6:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   291d8:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   291da:	d208      	bcs.n	291ee <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   291dc:	462a      	mov	r2, r5
   291de:	4633      	mov	r3, r6
   291e0:	4631      	mov	r1, r6
   291e2:	f7ff fe4e 	bl	28e82 <_copy>
			s->leftover_offset += data_length;
   291e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
   291e8:	4432      	add	r2, r6
   291ea:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   291ec:	e7db      	b.n	291a6 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   291ee:	463b      	mov	r3, r7
   291f0:	462a      	mov	r2, r5
   291f2:	4639      	mov	r1, r7
   291f4:	f7ff fe45 	bl	28e82 <_copy>
		data_length -= remaining_space;
   291f8:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   291fa:	2300      	movs	r3, #0
   291fc:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   291fe:	4446      	add	r6, r8
		data += remaining_space;
   29200:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29202:	1e63      	subs	r3, r4, #1
   29204:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   29208:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2920c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29210:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   29212:	ea82 0200 	eor.w	r2, r2, r0
   29216:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29218:	d1f6      	bne.n	29208 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2921a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2921c:	4621      	mov	r1, r4
   2921e:	4620      	mov	r0, r4
   29220:	f7ff ff05 	bl	2902e <tc_aes_encrypt>
   29224:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   29228:	2e10      	cmp	r6, #16
   2922a:	d80a      	bhi.n	29242 <tc_cmac_update+0xac>
	if (data_length > 0) {
   2922c:	2e00      	cmp	r6, #0
   2922e:	d0ba      	beq.n	291a6 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   29230:	4633      	mov	r3, r6
   29232:	462a      	mov	r2, r5
   29234:	4631      	mov	r1, r6
   29236:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2923a:	f7ff fe22 	bl	28e82 <_copy>
		s->leftover_offset = data_length;
   2923e:	6466      	str	r6, [r4, #68]	; 0x44
   29240:	e7b1      	b.n	291a6 <tc_cmac_update+0x10>
   29242:	1e63      	subs	r3, r4, #1
   29244:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   29246:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2924a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2924e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   29250:	ea82 0200 	eor.w	r2, r2, r0
   29254:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29256:	d1f6      	bne.n	29246 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   29258:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2925a:	4621      	mov	r1, r4
   2925c:	4620      	mov	r0, r4
   2925e:	f7ff fee6 	bl	2902e <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   29262:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   29264:	3e10      	subs	r6, #16
   29266:	e7df      	b.n	29228 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   29268:	2000      	movs	r0, #0
   2926a:	e79d      	b.n	291a8 <tc_cmac_update+0x12>

0002926c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2926c:	b570      	push	{r4, r5, r6, lr}
   2926e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   29270:	4605      	mov	r5, r0
   29272:	b1e8      	cbz	r0, 292b0 <tc_cmac_final+0x44>
   29274:	b369      	cbz	r1, 292d2 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   29276:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   29278:	2a10      	cmp	r2, #16
   2927a:	d11a      	bne.n	292b2 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2927c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2927e:	1e63      	subs	r3, r4, #1
   29280:	3901      	subs	r1, #1
   29282:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   29286:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2928a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2928e:	4072      	eors	r2, r6
   29290:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29294:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   29296:	ea82 0206 	eor.w	r2, r2, r6
   2929a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2929c:	d1f3      	bne.n	29286 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2929e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   292a0:	4621      	mov	r1, r4
   292a2:	4628      	mov	r0, r5
   292a4:	f7ff fec3 	bl	2902e <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   292a8:	4620      	mov	r0, r4
   292aa:	f7ff ff2b 	bl	29104 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   292ae:	2001      	movs	r0, #1
}
   292b0:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   292b2:	f102 0030 	add.w	r0, r2, #48	; 0x30
   292b6:	2100      	movs	r1, #0
   292b8:	f1c2 0210 	rsb	r2, r2, #16
   292bc:	4420      	add	r0, r4
   292be:	f7ff fded 	bl	28e9c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   292c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   292c4:	4423      	add	r3, r4
   292c6:	2280      	movs	r2, #128	; 0x80
   292c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   292cc:	f104 0120 	add.w	r1, r4, #32
   292d0:	e7d5      	b.n	2927e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   292d2:	4608      	mov	r0, r1
   292d4:	e7ec      	b.n	292b0 <tc_cmac_final+0x44>

000292d6 <abort_function>:
{
   292d6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   292d8:	2000      	movs	r0, #0
   292da:	f7ea f8f5 	bl	134c8 <sys_reboot>

000292de <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   292de:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   292e0:	6800      	ldr	r0, [r0, #0]
   292e2:	f7eb b99b 	b.w	1461c <z_arm_fatal_error>

000292e6 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   292e6:	2100      	movs	r1, #0
   292e8:	2001      	movs	r0, #1
   292ea:	f7eb b997 	b.w	1461c <z_arm_fatal_error>

000292ee <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   292ee:	b508      	push	{r3, lr}
	handler();
   292f0:	f7eb fa2e 	bl	14750 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   292f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   292f8:	f7eb bb06 	b.w	14908 <z_arm_exc_exit>

000292fc <_stdout_hook_default>:
}
   292fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29300:	4770      	bx	lr

00029302 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   29302:	f7f8 bacf 	b.w	218a4 <z_impl_z_errno>

00029306 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   29306:	2806      	cmp	r0, #6
   29308:	d108      	bne.n	2931c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2930a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2930e:	2201      	movs	r2, #1
   29310:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   29314:	f3bf 8f4f 	dsb	sy
        __WFE();
   29318:	bf20      	wfe
    while (true)
   2931a:	e7fd      	b.n	29318 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2931c:	4770      	bx	lr

0002931e <pm_state_exit_post_ops>:
   2931e:	2300      	movs	r3, #0
   29320:	f383 8811 	msr	BASEPRI, r3
   29324:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   29328:	4770      	bx	lr

0002932a <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2932a:	b530      	push	{r4, r5, lr}
   2932c:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   2932e:	f8b1 2003 	ldrh.w	r2, [r1, #3]
   29332:	794b      	ldrb	r3, [r1, #5]
   29334:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   29338:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   2933a:	220d      	movs	r2, #13
{
   2933c:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   2933e:	f10d 000b 	add.w	r0, sp, #11
   29342:	2100      	movs	r1, #0
	memcpy(res, r, 3);
   29344:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   29348:	f002 ff3c 	bl	2c1c4 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2934c:	aa02      	add	r2, sp, #8
   2934e:	4611      	mov	r1, r2
   29350:	4628      	mov	r0, r5
   29352:	f002 fb94 	bl	2ba7e <bt_encrypt_le>
	if (err) {
   29356:	b978      	cbnz	r0, 29378 <bt_rpa_irk_matches+0x4e>
	memcpy(out, res, 3);
   29358:	9b02      	ldr	r3, [sp, #8]
   2935a:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2935e:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   29360:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   29362:	a901      	add	r1, sp, #4
   29364:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   29366:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   2936a:	f002 fee0 	bl	2c12e <memcmp>
   2936e:	fab0 f080 	clz	r0, r0
   29372:	0940      	lsrs	r0, r0, #5
}
   29374:	b007      	add	sp, #28
   29376:	bd30      	pop	{r4, r5, pc}
		return false;
   29378:	2000      	movs	r0, #0
   2937a:	e7fb      	b.n	29374 <bt_rpa_irk_matches+0x4a>

0002937c <bt_settings_decode_key>:
{
   2937c:	b570      	push	{r4, r5, r6, lr}
   2937e:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   29380:	2100      	movs	r1, #0
{
   29382:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   29384:	f7ff fcad 	bl	28ce2 <settings_name_next>
   29388:	280d      	cmp	r0, #13
   2938a:	d118      	bne.n	293be <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2938c:	7b23      	ldrb	r3, [r4, #12]
   2938e:	2b30      	cmp	r3, #48	; 0x30
   29390:	d111      	bne.n	293b6 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   29392:	2300      	movs	r3, #0
   29394:	702b      	strb	r3, [r5, #0]
   29396:	f104 060c 	add.w	r6, r4, #12
   2939a:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2939c:	462a      	mov	r2, r5
   2939e:	4620      	mov	r0, r4
   293a0:	2301      	movs	r3, #1
   293a2:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   293a4:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   293a6:	f7fe ffe1 	bl	2836c <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   293aa:	42b4      	cmp	r4, r6
   293ac:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   293b0:	d1f4      	bne.n	2939c <bt_settings_decode_key+0x20>
	return 0;
   293b2:	2000      	movs	r0, #0
}
   293b4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   293b6:	2b31      	cmp	r3, #49	; 0x31
   293b8:	d101      	bne.n	293be <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   293ba:	2301      	movs	r3, #1
   293bc:	e7ea      	b.n	29394 <bt_settings_decode_key+0x18>
		return -EINVAL;
   293be:	f06f 0015 	mvn.w	r0, #21
   293c2:	e7f7      	b.n	293b4 <bt_settings_decode_key+0x38>

000293c4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   293c4:	b510      	push	{r4, lr}
   293c6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   293c8:	7801      	ldrb	r1, [r0, #0]
   293ca:	7822      	ldrb	r2, [r4, #0]
   293cc:	428a      	cmp	r2, r1
{
   293ce:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   293d0:	d00f      	beq.n	293f2 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   293d2:	4669      	mov	r1, sp
   293d4:	f7ec f898 	bl	15508 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   293d8:	a905      	add	r1, sp, #20
   293da:	4620      	mov	r0, r4
   293dc:	f7ec f894 	bl	15508 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   293e0:	2210      	movs	r2, #16
   293e2:	f10d 0115 	add.w	r1, sp, #21
   293e6:	f10d 0001 	add.w	r0, sp, #1
   293ea:	f002 fea0 	bl	2c12e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   293ee:	b00a      	add	sp, #40	; 0x28
   293f0:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   293f2:	2a01      	cmp	r2, #1
   293f4:	d006      	beq.n	29404 <bt_uuid_cmp+0x40>
   293f6:	2a02      	cmp	r2, #2
   293f8:	d007      	beq.n	2940a <bt_uuid_cmp+0x46>
   293fa:	b972      	cbnz	r2, 2941a <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   293fc:	8840      	ldrh	r0, [r0, #2]
   293fe:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   29400:	1ac0      	subs	r0, r0, r3
   29402:	e7f4      	b.n	293ee <bt_uuid_cmp+0x2a>
   29404:	6840      	ldr	r0, [r0, #4]
   29406:	6863      	ldr	r3, [r4, #4]
   29408:	e7fa      	b.n	29400 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2940a:	2210      	movs	r2, #16
   2940c:	1c61      	adds	r1, r4, #1
   2940e:	3001      	adds	r0, #1
}
   29410:	b00a      	add	sp, #40	; 0x28
   29412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   29416:	f002 be8a 	b.w	2c12e <memcmp>
	switch (u1->type) {
   2941a:	f06f 0015 	mvn.w	r0, #21
   2941e:	e7e6      	b.n	293ee <bt_uuid_cmp+0x2a>

00029420 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   29420:	2a04      	cmp	r2, #4
   29422:	d00a      	beq.n	2943a <bt_uuid_create+0x1a>
   29424:	2a10      	cmp	r2, #16
   29426:	d00d      	beq.n	29444 <bt_uuid_create+0x24>
   29428:	2a02      	cmp	r2, #2
   2942a:	f04f 0300 	mov.w	r3, #0
   2942e:	d115      	bne.n	2945c <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   29430:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   29432:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   29434:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   29436:	2001      	movs	r0, #1
		break;
   29438:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2943a:	2301      	movs	r3, #1
   2943c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2943e:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   29440:	6042      	str	r2, [r0, #4]
		break;
   29442:	e7f8      	b.n	29436 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   29444:	2302      	movs	r3, #2
   29446:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2944a:	f101 0310 	add.w	r3, r1, #16
   2944e:	f851 2b04 	ldr.w	r2, [r1], #4
   29452:	f840 2b04 	str.w	r2, [r0], #4
   29456:	4299      	cmp	r1, r3
   29458:	d1f9      	bne.n	2944e <bt_uuid_create+0x2e>
   2945a:	e7ec      	b.n	29436 <bt_uuid_create+0x16>
	switch (data_len) {
   2945c:	4618      	mov	r0, r3
}
   2945e:	4770      	bx	lr

00029460 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   29460:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   29462:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   29464:	2106      	movs	r1, #6
{
   29466:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   29468:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2946c:	f7f6 fc86 	bl	1fd7c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   29470:	b918      	cbnz	r0, 2947a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   29472:	79a3      	ldrb	r3, [r4, #6]
   29474:	f063 033f 	orn	r3, r3, #63	; 0x3f
   29478:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2947a:	bd10      	pop	{r4, pc}

0002947c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2947c:	280f      	cmp	r0, #15
   2947e:	d806      	bhi.n	2948e <bt_hci_evt_get_flags+0x12>
   29480:	280d      	cmp	r0, #13
   29482:	d80b      	bhi.n	2949c <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   29484:	2805      	cmp	r0, #5
   29486:	bf14      	ite	ne
   29488:	2002      	movne	r0, #2
   2948a:	2003      	moveq	r0, #3
   2948c:	4770      	bx	lr
	switch (evt) {
   2948e:	2813      	cmp	r0, #19
   29490:	d004      	beq.n	2949c <bt_hci_evt_get_flags+0x20>
   29492:	281a      	cmp	r0, #26
   29494:	bf14      	ite	ne
   29496:	2002      	movne	r0, #2
   29498:	2001      	moveq	r0, #1
   2949a:	4770      	bx	lr
   2949c:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2949e:	4770      	bx	lr

000294a0 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   294a0:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   294a4:	b193      	cbz	r3, 294cc <update_sec_level+0x2c>
   294a6:	7b5a      	ldrb	r2, [r3, #13]
   294a8:	07d1      	lsls	r1, r2, #31
   294aa:	d50f      	bpl.n	294cc <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   294ac:	06d2      	lsls	r2, r2, #27
   294ae:	d50b      	bpl.n	294c8 <update_sec_level+0x28>
   294b0:	7b1b      	ldrb	r3, [r3, #12]
   294b2:	2b10      	cmp	r3, #16
   294b4:	d108      	bne.n	294c8 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   294b6:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   294b8:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   294ba:	7a82      	ldrb	r2, [r0, #10]
   294bc:	7a40      	ldrb	r0, [r0, #9]
}
   294be:	4282      	cmp	r2, r0
   294c0:	bf8c      	ite	hi
   294c2:	2000      	movhi	r0, #0
   294c4:	2001      	movls	r0, #1
   294c6:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   294c8:	2303      	movs	r3, #3
   294ca:	e7f5      	b.n	294b8 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   294cc:	2302      	movs	r3, #2
   294ce:	e7f3      	b.n	294b8 <update_sec_level+0x18>

000294d0 <hci_vendor_event>:
}
   294d0:	4770      	bx	lr

000294d2 <atomic_or>:
{
   294d2:	4603      	mov	r3, r0
}
   294d4:	f3bf 8f5b 	dmb	ish
   294d8:	e853 0f00 	ldrex	r0, [r3]
   294dc:	ea40 0201 	orr.w	r2, r0, r1
   294e0:	e843 2c00 	strex	ip, r2, [r3]
   294e4:	f1bc 0f00 	cmp.w	ip, #0
   294e8:	d1f6      	bne.n	294d8 <atomic_or+0x6>
   294ea:	f3bf 8f5b 	dmb	ish
   294ee:	4770      	bx	lr

000294f0 <bt_addr_copy>:
   294f0:	680b      	ldr	r3, [r1, #0]
   294f2:	6003      	str	r3, [r0, #0]
   294f4:	888b      	ldrh	r3, [r1, #4]
   294f6:	8083      	strh	r3, [r0, #4]
}
   294f8:	4770      	bx	lr

000294fa <bt_addr_le_copy>:
   294fa:	680b      	ldr	r3, [r1, #0]
   294fc:	6003      	str	r3, [r0, #0]
   294fe:	888b      	ldrh	r3, [r1, #4]
   29500:	8083      	strh	r3, [r0, #4]
   29502:	798b      	ldrb	r3, [r1, #6]
   29504:	7183      	strb	r3, [r0, #6]
}
   29506:	4770      	bx	lr

00029508 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29508:	f3bf 8f5b 	dmb	ish
   2950c:	e850 3f00 	ldrex	r3, [r0]
   29510:	400b      	ands	r3, r1
   29512:	e840 3200 	strex	r2, r3, [r0]
   29516:	2a00      	cmp	r2, #0
   29518:	d1f8      	bne.n	2950c <atomic_and.isra.0+0x4>
   2951a:	f3bf 8f5b 	dmb	ish
}
   2951e:	4770      	bx	lr

00029520 <sys_put_le64>:
	dst[1] = val >> 8;
   29520:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   29524:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   29526:	0e00      	lsrs	r0, r0, #24
   29528:	7053      	strb	r3, [r2, #1]
   2952a:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2952c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2952e:	f3c1 2007 	ubfx	r0, r1, #8, #8
   29532:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   29534:	7093      	strb	r3, [r2, #2]
   29536:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   29538:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2953a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2953c:	71d1      	strb	r1, [r2, #7]
}
   2953e:	4770      	bx	lr

00029540 <bt_hci_disconnect>:
{
   29540:	b570      	push	{r4, r5, r6, lr}
   29542:	4606      	mov	r6, r0
   29544:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   29546:	f240 4006 	movw	r0, #1030	; 0x406
   2954a:	2103      	movs	r1, #3
   2954c:	f7ec fbc2 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   29550:	4604      	mov	r4, r0
   29552:	b168      	cbz	r0, 29570 <bt_hci_disconnect+0x30>
   29554:	2103      	movs	r1, #3
   29556:	3008      	adds	r0, #8
   29558:	f7f3 fdc4 	bl	1d0e4 <net_buf_simple_add>
	disconn->reason = reason;
   2955c:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2955e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29560:	4621      	mov	r1, r4
   29562:	2200      	movs	r2, #0
}
   29564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   29568:	f240 4006 	movw	r0, #1030	; 0x406
   2956c:	f7ec bbfa 	b.w	15d64 <bt_hci_cmd_send_sync>
}
   29570:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29574:	bd70      	pop	{r4, r5, r6, pc}

00029576 <bt_le_set_data_len>:
{
   29576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29578:	4607      	mov	r7, r0
   2957a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2957c:	f242 0022 	movw	r0, #8226	; 0x2022
   29580:	2106      	movs	r1, #6
{
   29582:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   29584:	f7ec fba6 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   29588:	4604      	mov	r4, r0
   2958a:	b178      	cbz	r0, 295ac <bt_le_set_data_len+0x36>
   2958c:	2106      	movs	r1, #6
   2958e:	3008      	adds	r0, #8
   29590:	f7f3 fda8 	bl	1d0e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   29594:	883b      	ldrh	r3, [r7, #0]
   29596:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   29598:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2959a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2959c:	4621      	mov	r1, r4
   2959e:	2200      	movs	r2, #0
}
   295a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   295a4:	f242 0022 	movw	r0, #8226	; 0x2022
   295a8:	f7ec bbdc 	b.w	15d64 <bt_hci_cmd_send_sync>
}
   295ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   295b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000295b2 <bt_le_set_phy>:
{
   295b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   295b6:	4680      	mov	r8, r0
   295b8:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   295ba:	f242 0032 	movw	r0, #8242	; 0x2032
   295be:	2107      	movs	r1, #7
{
   295c0:	f89d 9020 	ldrb.w	r9, [sp, #32]
   295c4:	4616      	mov	r6, r2
   295c6:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   295c8:	f7ec fb84 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   295cc:	4604      	mov	r4, r0
   295ce:	b198      	cbz	r0, 295f8 <bt_le_set_phy+0x46>
   295d0:	2107      	movs	r1, #7
   295d2:	3008      	adds	r0, #8
   295d4:	f7f3 fd86 	bl	1d0e4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   295d8:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   295dc:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   295de:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   295e0:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   295e2:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   295e4:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   295e8:	4621      	mov	r1, r4
   295ea:	2200      	movs	r2, #0
}
   295ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   295f0:	f242 0032 	movw	r0, #8242	; 0x2032
   295f4:	f7ec bbb6 	b.w	15d64 <bt_hci_cmd_send_sync>
}
   295f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   295fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029600 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   29600:	6880      	ldr	r0, [r0, #8]
   29602:	f7ec bc5d 	b.w	15ec0 <bt_hci_le_enh_conn_complete>

00029606 <le_legacy_conn_complete>:
{
   29606:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   29608:	6881      	ldr	r1, [r0, #8]
{
   2960a:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   2960c:	780b      	ldrb	r3, [r1, #0]
   2960e:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   29612:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   29616:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   2961a:	78cb      	ldrb	r3, [r1, #3]
   2961c:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   29620:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   29624:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   29628:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2962c:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   29630:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   29634:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   29638:	7c4b      	ldrb	r3, [r1, #17]
   2963a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   2963e:	a803      	add	r0, sp, #12
   29640:	3104      	adds	r1, #4
   29642:	f7ff ff5a 	bl	294fa <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   29646:	4669      	mov	r1, sp
   29648:	2200      	movs	r2, #0
   2964a:	f10d 0013 	add.w	r0, sp, #19
   2964e:	9200      	str	r2, [sp, #0]
   29650:	f8ad 2004 	strh.w	r2, [sp, #4]
   29654:	f7ff ff4c 	bl	294f0 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   29658:	9200      	str	r2, [sp, #0]
   2965a:	f10d 0019 	add.w	r0, sp, #25
   2965e:	808a      	strh	r2, [r1, #4]
   29660:	f7ff ff46 	bl	294f0 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   29664:	a802      	add	r0, sp, #8
   29666:	f7ec fc2b 	bl	15ec0 <bt_hci_le_enh_conn_complete>
}
   2966a:	b00b      	add	sp, #44	; 0x2c
   2966c:	f85d fb04 	ldr.w	pc, [sp], #4

00029670 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   29670:	8803      	ldrh	r3, [r0, #0]
   29672:	8842      	ldrh	r2, [r0, #2]
   29674:	4293      	cmp	r3, r2
{
   29676:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   29678:	d819      	bhi.n	296ae <bt_le_conn_params_valid+0x3e>
   2967a:	2b05      	cmp	r3, #5
   2967c:	d917      	bls.n	296ae <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2967e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   29682:	d814      	bhi.n	296ae <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   29684:	8883      	ldrh	r3, [r0, #4]
   29686:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2968a:	d210      	bcs.n	296ae <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2968c:	88c0      	ldrh	r0, [r0, #6]
   2968e:	f1a0 010a 	sub.w	r1, r0, #10
   29692:	b289      	uxth	r1, r1
   29694:	f640 4476 	movw	r4, #3190	; 0xc76
   29698:	42a1      	cmp	r1, r4
   2969a:	d808      	bhi.n	296ae <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2969c:	3301      	adds	r3, #1
   2969e:	b29b      	uxth	r3, r3
   296a0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   296a2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   296a6:	bf34      	ite	cc
   296a8:	2001      	movcc	r0, #1
   296aa:	2000      	movcs	r0, #0
}
   296ac:	bd10      	pop	{r4, pc}
		return false;
   296ae:	2000      	movs	r0, #0
   296b0:	e7fc      	b.n	296ac <bt_le_conn_params_valid+0x3c>

000296b2 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   296b2:	2000      	movs	r0, #0
   296b4:	4770      	bx	lr

000296b6 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   296b6:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   296b8:	f7f3 f890 	bl	1c7dc <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   296bc:	b118      	cbz	r0, 296c6 <bt_addr_le_is_bonded+0x10>
   296be:	89c0      	ldrh	r0, [r0, #14]
   296c0:	3800      	subs	r0, #0
   296c2:	bf18      	it	ne
   296c4:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   296c6:	bd08      	pop	{r3, pc}

000296c8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   296c8:	f3bf 8f5b 	dmb	ish
   296cc:	6800      	ldr	r0, [r0, #0]
   296ce:	f3bf 8f5b 	dmb	ish
}
   296d2:	4770      	bx	lr

000296d4 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   296d4:	f100 0310 	add.w	r3, r0, #16
   296d8:	f3bf 8f5b 	dmb	ish
   296dc:	e853 2f00 	ldrex	r2, [r3]
   296e0:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   296e4:	e843 1c00 	strex	ip, r1, [r3]
   296e8:	f1bc 0f00 	cmp.w	ip, #0
   296ec:	d1f6      	bne.n	296dc <adv_unpause_enabled+0x8>
   296ee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   296f2:	0453      	lsls	r3, r2, #17
   296f4:	d502      	bpl.n	296fc <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   296f6:	2101      	movs	r1, #1
   296f8:	f000 b999 	b.w	29a2e <bt_le_adv_set_enable>
}
   296fc:	4770      	bx	lr

000296fe <bt_addr_copy>:
   296fe:	680b      	ldr	r3, [r1, #0]
   29700:	6003      	str	r3, [r0, #0]
   29702:	888b      	ldrh	r3, [r1, #4]
   29704:	8083      	strh	r3, [r0, #4]
}
   29706:	4770      	bx	lr

00029708 <bt_addr_le_copy>:
   29708:	680b      	ldr	r3, [r1, #0]
   2970a:	6003      	str	r3, [r0, #0]
   2970c:	888b      	ldrh	r3, [r1, #4]
   2970e:	8083      	strh	r3, [r0, #4]
   29710:	798b      	ldrb	r3, [r1, #6]
   29712:	7183      	strb	r3, [r0, #6]
}
   29714:	4770      	bx	lr

00029716 <hci_id_add>:
{
   29716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29718:	460f      	mov	r7, r1
   2971a:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   2971c:	bb30      	cbnz	r0, 2976c <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2971e:	2127      	movs	r1, #39	; 0x27
   29720:	f242 0027 	movw	r0, #8231	; 0x2027
   29724:	f7ec fad6 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   29728:	4605      	mov	r5, r0
   2972a:	b310      	cbz	r0, 29772 <hci_id_add+0x5c>
   2972c:	2127      	movs	r1, #39	; 0x27
   2972e:	3008      	adds	r0, #8
   29730:	f7f3 fcd8 	bl	1d0e4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   29734:	4639      	mov	r1, r7
   29736:	f7ff ffe7 	bl	29708 <bt_addr_le_copy>
   2973a:	4606      	mov	r6, r0
   2973c:	4622      	mov	r2, r4
   2973e:	1dc3      	adds	r3, r0, #7
   29740:	f104 0110 	add.w	r1, r4, #16
   29744:	f852 0b04 	ldr.w	r0, [r2], #4
   29748:	f843 0b04 	str.w	r0, [r3], #4
   2974c:	428a      	cmp	r2, r1
   2974e:	d1f9      	bne.n	29744 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   29750:	2210      	movs	r2, #16
   29752:	2100      	movs	r1, #0
   29754:	f106 0017 	add.w	r0, r6, #23
   29758:	f002 fd34 	bl	2c1c4 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2975c:	4629      	mov	r1, r5
   2975e:	2200      	movs	r2, #0
}
   29760:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   29764:	f242 0027 	movw	r0, #8231	; 0x2027
   29768:	f7ec bafc 	b.w	15d64 <bt_hci_cmd_send_sync>
		return -EINVAL;
   2976c:	f06f 0015 	mvn.w	r0, #21
}
   29770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   29772:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29776:	e7fb      	b.n	29770 <hci_id_add+0x5a>

00029778 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   29778:	7a03      	ldrb	r3, [r0, #8]
   2977a:	075b      	lsls	r3, r3, #29
{
   2977c:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2977e:	d505      	bpl.n	2978c <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   29780:	4601      	mov	r1, r0
   29782:	322a      	adds	r2, #42	; 0x2a
   29784:	f811 0b01 	ldrb.w	r0, [r1], #1
   29788:	f7ff bfc5 	b.w	29716 <hci_id_add>
}
   2978c:	4770      	bx	lr

0002978e <addr_res_enable>:
{
   2978e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   29790:	2101      	movs	r1, #1
{
   29792:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   29794:	f242 002d 	movw	r0, #8237	; 0x202d
   29798:	f7ec fa9c 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   2979c:	4604      	mov	r4, r0
   2979e:	b158      	cbz	r0, 297b8 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   297a0:	4629      	mov	r1, r5
   297a2:	3008      	adds	r0, #8
   297a4:	f001 fe15 	bl	2b3d2 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   297a8:	4621      	mov	r1, r4
   297aa:	2200      	movs	r2, #0
}
   297ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   297b0:	f242 002d 	movw	r0, #8237	; 0x202d
   297b4:	f7ec bad6 	b.w	15d64 <bt_hci_cmd_send_sync>
}
   297b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   297bc:	bd38      	pop	{r3, r4, r5, pc}

000297be <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   297be:	f100 0210 	add.w	r2, r0, #16
{
   297c2:	b508      	push	{r3, lr}
   297c4:	4603      	mov	r3, r0
   297c6:	4610      	mov	r0, r2
   297c8:	f7ff ff7e 	bl	296c8 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   297cc:	0641      	lsls	r1, r0, #25
   297ce:	d511      	bpl.n	297f4 <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   297d0:	f3bf 8f5b 	dmb	ish
   297d4:	e852 1f00 	ldrex	r1, [r2]
   297d8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   297dc:	e842 1000 	strex	r0, r1, [r2]
   297e0:	2800      	cmp	r0, #0
   297e2:	d1f7      	bne.n	297d4 <adv_pause_enabled+0x16>
   297e4:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   297e8:	4618      	mov	r0, r3
   297ea:	2100      	movs	r1, #0
}
   297ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   297f0:	f000 b91d 	b.w	29a2e <bt_le_adv_set_enable>
}
   297f4:	bd08      	pop	{r3, pc}

000297f6 <bt_lookup_id_addr>:
{
   297f6:	b510      	push	{r4, lr}
   297f8:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   297fa:	f7f2 ffb5 	bl	1c768 <bt_keys_find_irk>
		if (keys) {
   297fe:	b100      	cbz	r0, 29802 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   29800:	1c44      	adds	r4, r0, #1
}
   29802:	4620      	mov	r0, r4
   29804:	bd10      	pop	{r4, pc}

00029806 <bt_id_set_adv_private_addr>:
{
   29806:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   29808:	2106      	movs	r1, #6
   2980a:	4668      	mov	r0, sp
   2980c:	f7f6 fab6 	bl	1fd7c <bt_rand>
	if (err) {
   29810:	b940      	cbnz	r0, 29824 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   29812:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   29816:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   29818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2981c:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   29820:	f7ed f80c 	bl	1683c <set_random_address>
}
   29824:	b003      	add	sp, #12
   29826:	f85d fb04 	ldr.w	pc, [sp], #4

0002982a <bt_id_adv_random_addr_check>:
}
   2982a:	2001      	movs	r0, #1
   2982c:	4770      	bx	lr

0002982e <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2982e:	7a03      	ldrb	r3, [r0, #8]
   29830:	07d9      	lsls	r1, r3, #31
   29832:	d504      	bpl.n	2983e <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   29834:	f023 0301 	bic.w	r3, r3, #1
   29838:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2983a:	f7ed b881 	b.w	16940 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2983e:	0799      	lsls	r1, r3, #30
   29840:	d504      	bpl.n	2984c <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   29842:	f023 0302 	bic.w	r3, r3, #2
   29846:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   29848:	f7ed b92e 	b.w	16aa8 <bt_id_del>
}
   2984c:	4770      	bx	lr

0002984e <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2984e:	2000      	movs	r0, #0
   29850:	4770      	bx	lr

00029852 <get_adv_channel_map>:
{
   29852:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   29854:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   29858:	bf0c      	ite	eq
   2985a:	2007      	moveq	r0, #7
   2985c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2985e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   29860:	bf48      	it	mi
   29862:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   29866:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   29868:	bf48      	it	mi
   2986a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2986e:	4770      	bx	lr

00029870 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29870:	f3bf 8f5b 	dmb	ish
   29874:	6800      	ldr	r0, [r0, #0]
   29876:	f3bf 8f5b 	dmb	ish
}
   2987a:	4770      	bx	lr

0002987c <atomic_and>:
{
   2987c:	4603      	mov	r3, r0
}
   2987e:	f3bf 8f5b 	dmb	ish
   29882:	e853 0f00 	ldrex	r0, [r3]
   29886:	ea00 0201 	and.w	r2, r0, r1
   2988a:	e843 2c00 	strex	ip, r2, [r3]
   2988e:	f1bc 0f00 	cmp.w	ip, #0
   29892:	d1f6      	bne.n	29882 <atomic_and+0x6>
   29894:	f3bf 8f5b 	dmb	ish
   29898:	4770      	bx	lr

0002989a <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2989a:	680b      	ldr	r3, [r1, #0]
   2989c:	6003      	str	r3, [r0, #0]
   2989e:	888b      	ldrh	r3, [r1, #4]
   298a0:	8083      	strh	r3, [r0, #4]
   298a2:	798b      	ldrb	r3, [r1, #6]
   298a4:	7183      	strb	r3, [r0, #6]
   298a6:	4770      	bx	lr

000298a8 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   298a8:	2301      	movs	r3, #1
{
   298aa:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   298ac:	fa03 f101 	lsl.w	r1, r3, r1
{
   298b0:	4604      	mov	r4, r0
	if (val) {
   298b2:	b162      	cbz	r2, 298ce <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   298b4:	f3bf 8f5b 	dmb	ish
   298b8:	e854 3f00 	ldrex	r3, [r4]
   298bc:	430b      	orrs	r3, r1
   298be:	e844 3200 	strex	r2, r3, [r4]
   298c2:	2a00      	cmp	r2, #0
   298c4:	d1f8      	bne.n	298b8 <atomic_set_bit_to+0x10>
   298c6:	f3bf 8f5b 	dmb	ish
	}
}
   298ca:	bc10      	pop	{r4}
   298cc:	4770      	bx	lr
   298ce:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   298d0:	43c9      	mvns	r1, r1
   298d2:	f7ff bfd3 	b.w	2987c <atomic_and>

000298d6 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   298d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   298da:	b087      	sub	sp, #28
   298dc:	4605      	mov	r5, r0
   298de:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   298e2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   298e6:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   298ea:	460c      	mov	r4, r1
   298ec:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   298ee:	2100      	movs	r1, #0
   298f0:	2210      	movs	r2, #16
   298f2:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   298f4:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   298f6:	f002 fc65 	bl	2c1c4 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   298fa:	b186      	cbz	r6, 2991e <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   298fc:	f7ec ff80 	bl	16800 <bt_get_name>
   29900:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   29902:	2c00      	cmp	r4, #0
   29904:	d139      	bne.n	2997a <le_adv_update.constprop.0+0xa4>
   29906:	2f00      	cmp	r7, #0
   29908:	d142      	bne.n	29990 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   2990a:	4658      	mov	r0, fp
   2990c:	f7e3 fb91 	bl	d032 <strlen>
   29910:	2309      	movs	r3, #9
   29912:	f88d 3000 	strb.w	r3, [sp]
   29916:	f88d 0001 	strb.w	r0, [sp, #1]
   2991a:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   2991e:	2e01      	cmp	r6, #1
			d_len = 2;
   29920:	bf0c      	ite	eq
   29922:	2202      	moveq	r2, #2
		d_len = 1;
   29924:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   29926:	a902      	add	r1, sp, #8
   29928:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   2992c:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   29930:	bf04      	itt	eq
   29932:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   29936:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   29938:	f7ed faee 	bl	16f18 <hci_set_ad>
		if (err) {
   2993c:	4604      	mov	r4, r0
   2993e:	b978      	cbnz	r0, 29960 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   29940:	f1ba 0f00 	cmp.w	sl, #0
   29944:	d126      	bne.n	29994 <le_adv_update.constprop.0+0xbe>
   29946:	3510      	adds	r5, #16
   29948:	f3bf 8f5b 	dmb	ish
   2994c:	e855 3f00 	ldrex	r3, [r5]
   29950:	f043 0304 	orr.w	r3, r3, #4
   29954:	e845 3200 	strex	r2, r3, [r5]
   29958:	2a00      	cmp	r2, #0
   2995a:	d1f7      	bne.n	2994c <le_adv_update.constprop.0+0x76>
   2995c:	f3bf 8f5b 	dmb	ish
}
   29960:	4620      	mov	r0, r4
   29962:	b007      	add	sp, #28
   29964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   29968:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2996c:	3a08      	subs	r2, #8
   2996e:	2a01      	cmp	r2, #1
   29970:	d925      	bls.n	299be <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   29972:	3301      	adds	r3, #1
   29974:	4598      	cmp	r8, r3
   29976:	d1f7      	bne.n	29968 <le_adv_update.constprop.0+0x92>
   29978:	e7c5      	b.n	29906 <le_adv_update.constprop.0+0x30>
   2997a:	2300      	movs	r3, #0
   2997c:	e7fa      	b.n	29974 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2997e:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   29982:	3a08      	subs	r2, #8
   29984:	2a01      	cmp	r2, #1
   29986:	d91a      	bls.n	299be <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   29988:	3301      	adds	r3, #1
   2998a:	4599      	cmp	r9, r3
   2998c:	d1f7      	bne.n	2997e <le_adv_update.constprop.0+0xa8>
   2998e:	e7bc      	b.n	2990a <le_adv_update.constprop.0+0x34>
   29990:	2300      	movs	r3, #0
   29992:	e7fa      	b.n	2998a <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   29994:	2e02      	cmp	r6, #2
   29996:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   2999a:	bf08      	it	eq
   2999c:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2999e:	a902      	add	r1, sp, #8
			d_len = 2;
   299a0:	bf08      	it	eq
   299a2:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   299a4:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   299a8:	bf08      	it	eq
   299aa:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   299ae:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   299b2:	f7ed fab1 	bl	16f18 <hci_set_ad>
		if (err) {
   299b6:	2800      	cmp	r0, #0
   299b8:	d0c5      	beq.n	29946 <le_adv_update.constprop.0+0x70>
   299ba:	4604      	mov	r4, r0
   299bc:	e7d0      	b.n	29960 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   299be:	f06f 0415 	mvn.w	r4, #21
   299c2:	e7cd      	b.n	29960 <le_adv_update.constprop.0+0x8a>

000299c4 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   299c4:	6843      	ldr	r3, [r0, #4]
   299c6:	f013 0008 	ands.w	r0, r3, #8
   299ca:	d00a      	beq.n	299e2 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   299cc:	035a      	lsls	r2, r3, #13
   299ce:	d407      	bmi.n	299e0 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   299d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   299d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   299d8:	bf0c      	ite	eq
   299da:	2001      	moveq	r0, #1
   299dc:	2002      	movne	r0, #2
   299de:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   299e0:	2001      	movs	r0, #1
}
   299e2:	4770      	bx	lr

000299e4 <bt_le_adv_set_enable_legacy>:
{
   299e4:	b570      	push	{r4, r5, r6, lr}
   299e6:	4606      	mov	r6, r0
   299e8:	b086      	sub	sp, #24
   299ea:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   299ec:	f242 000a 	movw	r0, #8202	; 0x200a
   299f0:	2101      	movs	r1, #1
   299f2:	f7ec f96f 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   299f6:	4604      	mov	r4, r0
   299f8:	b1b0      	cbz	r0, 29a28 <bt_le_adv_set_enable_legacy+0x44>
   299fa:	3008      	adds	r0, #8
	if (enable) {
   299fc:	b195      	cbz	r5, 29a24 <bt_le_adv_set_enable_legacy+0x40>
   299fe:	2101      	movs	r1, #1
   29a00:	f001 fce7 	bl	2b3d2 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   29a04:	f106 0210 	add.w	r2, r6, #16
   29a08:	a903      	add	r1, sp, #12
   29a0a:	4620      	mov	r0, r4
   29a0c:	9500      	str	r5, [sp, #0]
   29a0e:	2306      	movs	r3, #6
   29a10:	f7ec f94e 	bl	15cb0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   29a14:	2200      	movs	r2, #0
   29a16:	4621      	mov	r1, r4
   29a18:	f242 000a 	movw	r0, #8202	; 0x200a
   29a1c:	f7ec f9a2 	bl	15d64 <bt_hci_cmd_send_sync>
}
   29a20:	b006      	add	sp, #24
   29a22:	bd70      	pop	{r4, r5, r6, pc}
   29a24:	4629      	mov	r1, r5
   29a26:	e7eb      	b.n	29a00 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   29a28:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29a2c:	e7f8      	b.n	29a20 <bt_le_adv_set_enable_legacy+0x3c>

00029a2e <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   29a2e:	f7ff bfd9 	b.w	299e4 <bt_le_adv_set_enable_legacy>

00029a32 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   29a32:	3018      	adds	r0, #24
   29a34:	f7f9 bae2 	b.w	22ffc <k_work_cancel_delayable>

00029a38 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29a38:	b510      	push	{r4, lr}
   29a3a:	4603      	mov	r3, r0
	return list->head;
   29a3c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29a3e:	2200      	movs	r2, #0
   29a40:	b158      	cbz	r0, 29a5a <sys_slist_find_and_remove+0x22>
   29a42:	4288      	cmp	r0, r1
   29a44:	d10f      	bne.n	29a66 <sys_slist_find_and_remove+0x2e>
	return node->next;
   29a46:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   29a48:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   29a4a:	b93a      	cbnz	r2, 29a5c <sys_slist_find_and_remove+0x24>
   29a4c:	42a1      	cmp	r1, r4
	list->head = node;
   29a4e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   29a50:	d100      	bne.n	29a54 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   29a52:	6058      	str	r0, [r3, #4]
	parent->next = child;
   29a54:	2300      	movs	r3, #0
   29a56:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29a58:	2001      	movs	r0, #1
   29a5a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   29a5c:	42a1      	cmp	r1, r4
	parent->next = child;
   29a5e:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29a60:	bf08      	it	eq
   29a62:	605a      	streq	r2, [r3, #4]
}
   29a64:	e7f6      	b.n	29a54 <sys_slist_find_and_remove+0x1c>
	return node->next;
   29a66:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29a68:	6800      	ldr	r0, [r0, #0]
   29a6a:	e7e9      	b.n	29a40 <sys_slist_find_and_remove+0x8>

00029a6c <atomic_and>:
{
   29a6c:	4603      	mov	r3, r0
}
   29a6e:	f3bf 8f5b 	dmb	ish
   29a72:	e853 0f00 	ldrex	r0, [r3]
   29a76:	ea00 0201 	and.w	r2, r0, r1
   29a7a:	e843 2c00 	strex	ip, r2, [r3]
   29a7e:	f1bc 0f00 	cmp.w	ip, #0
   29a82:	d1f6      	bne.n	29a72 <atomic_and+0x6>
   29a84:	f3bf 8f5b 	dmb	ish
   29a88:	4770      	bx	lr

00029a8a <tx_complete_work>:
	tx_notify(conn);
   29a8a:	3828      	subs	r0, #40	; 0x28
   29a8c:	f7ed be56 	b.w	1773c <tx_notify>

00029a90 <bt_conn_reset_rx_state>:
{
   29a90:	b510      	push	{r4, lr}
   29a92:	4604      	mov	r4, r0
	if (!conn->rx) {
   29a94:	6900      	ldr	r0, [r0, #16]
   29a96:	b118      	cbz	r0, 29aa0 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   29a98:	f7f3 fa0e 	bl	1ceb8 <net_buf_unref>
	conn->rx = NULL;
   29a9c:	2300      	movs	r3, #0
   29a9e:	6123      	str	r3, [r4, #16]
}
   29aa0:	bd10      	pop	{r4, pc}

00029aa2 <bt_conn_ref>:
{
   29aa2:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   29aa4:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29aa8:	f3bf 8f5b 	dmb	ish
   29aac:	6813      	ldr	r3, [r2, #0]
   29aae:	f3bf 8f5b 	dmb	ish
		if (!old) {
   29ab2:	b17b      	cbz	r3, 29ad4 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   29ab4:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   29ab8:	1c59      	adds	r1, r3, #1
   29aba:	e852 4f00 	ldrex	r4, [r2]
   29abe:	429c      	cmp	r4, r3
   29ac0:	d104      	bne.n	29acc <bt_conn_ref+0x2a>
   29ac2:	e842 1c00 	strex	ip, r1, [r2]
   29ac6:	f1bc 0f00 	cmp.w	ip, #0
   29aca:	d1f6      	bne.n	29aba <bt_conn_ref+0x18>
   29acc:	f3bf 8f5b 	dmb	ish
   29ad0:	d1ea      	bne.n	29aa8 <bt_conn_ref+0x6>
}
   29ad2:	bd10      	pop	{r4, pc}
			return NULL;
   29ad4:	4618      	mov	r0, r3
   29ad6:	e7fc      	b.n	29ad2 <bt_conn_ref+0x30>

00029ad8 <conn_lookup_handle>:
{
   29ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29adc:	4607      	mov	r7, r0
   29ade:	460e      	mov	r6, r1
   29ae0:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   29ae2:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   29ae4:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   29ae8:	42b4      	cmp	r4, r6
   29aea:	d103      	bne.n	29af4 <conn_lookup_handle+0x1c>
	return NULL;
   29aec:	2300      	movs	r3, #0
}
   29aee:	4618      	mov	r0, r3
   29af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   29af4:	fb09 7004 	mla	r0, r9, r4, r7
   29af8:	f7ff ffd3 	bl	29aa2 <bt_conn_ref>
   29afc:	4603      	mov	r3, r0
		if (!conn) {
   29afe:	b158      	cbz	r0, 29b18 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   29b00:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   29b02:	2d01      	cmp	r5, #1
   29b04:	d002      	beq.n	29b0c <conn_lookup_handle+0x34>
   29b06:	3d07      	subs	r5, #7
   29b08:	2d01      	cmp	r5, #1
   29b0a:	d803      	bhi.n	29b14 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   29b0c:	881a      	ldrh	r2, [r3, #0]
   29b0e:	4542      	cmp	r2, r8
   29b10:	d0ed      	beq.n	29aee <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   29b12:	4618      	mov	r0, r3
   29b14:	f7ee f86a 	bl	17bec <bt_conn_unref>
	for (i = 0; i < size; i++) {
   29b18:	3401      	adds	r4, #1
   29b1a:	e7e5      	b.n	29ae8 <conn_lookup_handle+0x10>

00029b1c <bt_conn_connected>:
{
   29b1c:	b510      	push	{r4, lr}
   29b1e:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   29b20:	f7ee fd34 	bl	1858c <bt_l2cap_connected>
	notify_connected(conn);
   29b24:	4620      	mov	r0, r4
}
   29b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   29b2a:	f7ed bdd7 	b.w	176dc <notify_connected>

00029b2e <bt_conn_disconnect>:
{
   29b2e:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   29b30:	7b43      	ldrb	r3, [r0, #13]
   29b32:	3b02      	subs	r3, #2
{
   29b34:	4604      	mov	r4, r0
	switch (conn->state) {
   29b36:	2b06      	cmp	r3, #6
   29b38:	d805      	bhi.n	29b46 <bt_conn_disconnect+0x18>
   29b3a:	e8df f003 	tbb	[pc, r3]
   29b3e:	0408      	.short	0x0408
   29b40:	0e0c0404 	.word	0x0e0c0404
   29b44:	0c          	.byte	0x0c
   29b45:	00          	.byte	0x00
   29b46:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   29b4a:	4628      	mov	r0, r5
   29b4c:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   29b4e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   29b50:	2100      	movs	r1, #0
   29b52:	f7ee f883 	bl	17c5c <bt_conn_set_state>
		return 0;
   29b56:	2500      	movs	r5, #0
   29b58:	e7f7      	b.n	29b4a <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   29b5a:	8800      	ldrh	r0, [r0, #0]
   29b5c:	f7ff fcf0 	bl	29540 <bt_hci_disconnect>
	if (err) {
   29b60:	4605      	mov	r5, r0
   29b62:	2800      	cmp	r0, #0
   29b64:	d1f1      	bne.n	29b4a <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   29b66:	7b63      	ldrb	r3, [r4, #13]
   29b68:	2b07      	cmp	r3, #7
   29b6a:	d1ee      	bne.n	29b4a <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   29b6c:	2108      	movs	r1, #8
   29b6e:	4620      	mov	r0, r4
   29b70:	f7ee f874 	bl	17c5c <bt_conn_set_state>
   29b74:	e7e9      	b.n	29b4a <bt_conn_disconnect+0x1c>

00029b76 <bt_conn_set_security>:
{
   29b76:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   29b78:	7b43      	ldrb	r3, [r0, #13]
   29b7a:	2b07      	cmp	r3, #7
{
   29b7c:	4604      	mov	r4, r0
   29b7e:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   29b80:	d124      	bne.n	29bcc <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   29b82:	7a43      	ldrb	r3, [r0, #9]
   29b84:	428b      	cmp	r3, r1
   29b86:	d224      	bcs.n	29bd2 <bt_conn_set_security+0x5c>
   29b88:	7a83      	ldrb	r3, [r0, #10]
   29b8a:	428b      	cmp	r3, r1
   29b8c:	d221      	bcs.n	29bd2 <bt_conn_set_security+0x5c>
	if (val) {
   29b8e:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   29b90:	f100 0004 	add.w	r0, r0, #4
   29b94:	d515      	bpl.n	29bc2 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29b96:	f3bf 8f5b 	dmb	ish
   29b9a:	e850 3f00 	ldrex	r3, [r0]
   29b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   29ba2:	e840 3200 	strex	r2, r3, [r0]
   29ba6:	2a00      	cmp	r2, #0
   29ba8:	d1f7      	bne.n	29b9a <bt_conn_set_security+0x24>
   29baa:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   29bae:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   29bb2:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   29bb4:	4620      	mov	r0, r4
   29bb6:	f7f2 f8cf 	bl	1bd58 <bt_smp_start_security>
	if (err) {
   29bba:	b108      	cbz	r0, 29bc0 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   29bbc:	7a63      	ldrb	r3, [r4, #9]
   29bbe:	72a3      	strb	r3, [r4, #10]
}
   29bc0:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29bc2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   29bc6:	f7ff ff51 	bl	29a6c <atomic_and>
   29bca:	e7f0      	b.n	29bae <bt_conn_set_security+0x38>
		return -ENOTCONN;
   29bcc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29bd0:	e7f6      	b.n	29bc0 <bt_conn_set_security+0x4a>
		return 0;
   29bd2:	2000      	movs	r0, #0
   29bd4:	e7f4      	b.n	29bc0 <bt_conn_set_security+0x4a>

00029bd6 <bt_conn_get_security>:
}
   29bd6:	7a40      	ldrb	r0, [r0, #9]
   29bd8:	4770      	bx	lr

00029bda <bt_conn_is_peer_addr_le>:
{
   29bda:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   29bdc:	7a03      	ldrb	r3, [r0, #8]
   29bde:	428b      	cmp	r3, r1
{
   29be0:	4604      	mov	r4, r0
   29be2:	4615      	mov	r5, r2
	if (id != conn->id) {
   29be4:	d115      	bne.n	29c12 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   29be6:	f100 0190 	add.w	r1, r0, #144	; 0x90
   29bea:	2207      	movs	r2, #7
   29bec:	4628      	mov	r0, r5
   29bee:	f002 fa9e 	bl	2c12e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   29bf2:	b180      	cbz	r0, 29c16 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   29bf4:	78e3      	ldrb	r3, [r4, #3]
   29bf6:	2207      	movs	r2, #7
   29bf8:	b943      	cbnz	r3, 29c0c <bt_conn_is_peer_addr_le+0x32>
   29bfa:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   29bfe:	4628      	mov	r0, r5
   29c00:	f002 fa95 	bl	2c12e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   29c04:	fab0 f080 	clz	r0, r0
   29c08:	0940      	lsrs	r0, r0, #5
}
   29c0a:	bd38      	pop	{r3, r4, r5, pc}
   29c0c:	f104 0197 	add.w	r1, r4, #151	; 0x97
   29c10:	e7f5      	b.n	29bfe <bt_conn_is_peer_addr_le+0x24>
		return false;
   29c12:	2000      	movs	r0, #0
   29c14:	e7f9      	b.n	29c0a <bt_conn_is_peer_addr_le+0x30>
		return true;
   29c16:	2001      	movs	r0, #1
   29c18:	e7f7      	b.n	29c0a <bt_conn_is_peer_addr_le+0x30>

00029c1a <bt_conn_get_dst>:
}
   29c1a:	3090      	adds	r0, #144	; 0x90
   29c1c:	4770      	bx	lr

00029c1e <bt_conn_le_conn_update>:
{
   29c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29c20:	4607      	mov	r7, r0
   29c22:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   29c24:	f242 0013 	movw	r0, #8211	; 0x2013
   29c28:	210e      	movs	r1, #14
   29c2a:	f7ec f853 	bl	15cd4 <bt_hci_cmd_create>
	if (!buf) {
   29c2e:	4606      	mov	r6, r0
   29c30:	b1d0      	cbz	r0, 29c68 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   29c32:	210e      	movs	r1, #14
   29c34:	3008      	adds	r0, #8
   29c36:	f7f3 fa55 	bl	1d0e4 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   29c3a:	220e      	movs	r2, #14
   29c3c:	4604      	mov	r4, r0
   29c3e:	2100      	movs	r1, #0
   29c40:	f002 fac0 	bl	2c1c4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   29c44:	883b      	ldrh	r3, [r7, #0]
   29c46:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   29c48:	882b      	ldrh	r3, [r5, #0]
   29c4a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   29c4c:	886b      	ldrh	r3, [r5, #2]
   29c4e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   29c50:	88ab      	ldrh	r3, [r5, #4]
   29c52:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   29c54:	88eb      	ldrh	r3, [r5, #6]
   29c56:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   29c58:	4631      	mov	r1, r6
   29c5a:	2200      	movs	r2, #0
}
   29c5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   29c60:	f242 0013 	movw	r0, #8211	; 0x2013
   29c64:	f7ec b87e 	b.w	15d64 <bt_hci_cmd_send_sync>
}
   29c68:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029c6e <l2cap_connected>:
}
   29c6e:	4770      	bx	lr

00029c70 <l2cap_disconnected>:
   29c70:	4770      	bx	lr

00029c72 <bt_l2cap_chan_del>:
{
   29c72:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   29c74:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   29c78:	4604      	mov	r4, r0
	if (!chan->conn) {
   29c7a:	b123      	cbz	r3, 29c86 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   29c7c:	686b      	ldr	r3, [r5, #4]
   29c7e:	b103      	cbz	r3, 29c82 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   29c80:	4798      	blx	r3
	chan->conn = NULL;
   29c82:	2300      	movs	r3, #0
   29c84:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   29c86:	68e3      	ldr	r3, [r4, #12]
   29c88:	b10b      	cbz	r3, 29c8e <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   29c8a:	4620      	mov	r0, r4
   29c8c:	4798      	blx	r3
	if (ops->released) {
   29c8e:	69eb      	ldr	r3, [r5, #28]
   29c90:	b11b      	cbz	r3, 29c9a <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   29c92:	4620      	mov	r0, r4
}
   29c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   29c98:	4718      	bx	r3
}
   29c9a:	bd70      	pop	{r4, r5, r6, pc}

00029c9c <bt_l2cap_disconnected>:
	return list->head;
   29c9c:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
   29c9e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29ca0:	b160      	cbz	r0, 29cbc <bt_l2cap_disconnected+0x20>
	return node->next;
   29ca2:	f850 4908 	ldr.w	r4, [r0], #-8
   29ca6:	b104      	cbz	r4, 29caa <bt_l2cap_disconnected+0xe>
   29ca8:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   29caa:	f7ff ffe2 	bl	29c72 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29cae:	b12c      	cbz	r4, 29cbc <bt_l2cap_disconnected+0x20>
   29cb0:	68a3      	ldr	r3, [r4, #8]
   29cb2:	b103      	cbz	r3, 29cb6 <bt_l2cap_disconnected+0x1a>
   29cb4:	3b08      	subs	r3, #8
{
   29cb6:	4620      	mov	r0, r4
   29cb8:	461c      	mov	r4, r3
   29cba:	e7f6      	b.n	29caa <bt_l2cap_disconnected+0xe>
}
   29cbc:	bd10      	pop	{r4, pc}

00029cbe <bt_l2cap_security_changed>:
	return list->head;
   29cbe:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
   29cc0:	b538      	push	{r3, r4, r5, lr}
   29cc2:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29cc4:	b178      	cbz	r0, 29ce6 <bt_l2cap_security_changed+0x28>
	return node->next;
   29cc6:	f850 4908 	ldr.w	r4, [r0], #-8
   29cca:	b104      	cbz	r4, 29cce <bt_l2cap_security_changed+0x10>
   29ccc:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   29cce:	6843      	ldr	r3, [r0, #4]
   29cd0:	689b      	ldr	r3, [r3, #8]
   29cd2:	b10b      	cbz	r3, 29cd8 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   29cd4:	4629      	mov	r1, r5
   29cd6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   29cd8:	b12c      	cbz	r4, 29ce6 <bt_l2cap_security_changed+0x28>
   29cda:	68a3      	ldr	r3, [r4, #8]
   29cdc:	b103      	cbz	r3, 29ce0 <bt_l2cap_security_changed+0x22>
   29cde:	3b08      	subs	r3, #8
{
   29ce0:	4620      	mov	r0, r4
   29ce2:	461c      	mov	r4, r3
   29ce4:	e7f3      	b.n	29cce <bt_l2cap_security_changed+0x10>
}
   29ce6:	bd38      	pop	{r3, r4, r5, pc}

00029ce8 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   29ce8:	3104      	adds	r1, #4
   29cea:	f7ee b8ad 	b.w	17e48 <bt_conn_create_pdu_timeout>

00029cee <bt_l2cap_send_cb>:
{
   29cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29cf2:	4614      	mov	r4, r2
   29cf4:	4605      	mov	r5, r0
   29cf6:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   29cf8:	f102 0008 	add.w	r0, r2, #8
   29cfc:	2104      	movs	r1, #4
   29cfe:	461e      	mov	r6, r3
   29d00:	f8dd 8018 	ldr.w	r8, [sp, #24]
   29d04:	f7f3 f996 	bl	1d034 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   29d08:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   29d0a:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   29d0c:	3a04      	subs	r2, #4
   29d0e:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   29d10:	4643      	mov	r3, r8
   29d12:	4632      	mov	r2, r6
   29d14:	4621      	mov	r1, r4
   29d16:	4628      	mov	r0, r5
}
   29d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   29d1c:	f7ed beda 	b.w	17ad4 <bt_conn_send_cb>

00029d20 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   29d20:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29d22:	b130      	cbz	r0, 29d32 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   29d24:	8b83      	ldrh	r3, [r0, #28]
   29d26:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29d28:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   29d2c:	d001      	beq.n	29d32 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   29d2e:	6880      	ldr	r0, [r0, #8]
   29d30:	e7f7      	b.n	29d22 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   29d32:	4770      	bx	lr

00029d34 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   29d34:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29d36:	b130      	cbz	r0, 29d46 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   29d38:	8983      	ldrh	r3, [r0, #12]
   29d3a:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29d3c:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   29d40:	d001      	beq.n	29d46 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   29d42:	6880      	ldr	r0, [r0, #8]
   29d44:	e7f7      	b.n	29d36 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   29d46:	4770      	bx	lr

00029d48 <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   29d48:	4770      	bx	lr

00029d4a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   29d4a:	4603      	mov	r3, r0
	return list->head;
   29d4c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   29d4e:	b128      	cbz	r0, 29d5c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29d50:	6859      	ldr	r1, [r3, #4]
	return node->next;
   29d52:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29d54:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29d56:	4288      	cmp	r0, r1
	list->tail = node;
   29d58:	bf08      	it	eq
   29d5a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   29d5c:	4770      	bx	lr

00029d5e <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   29d5e:	4603      	mov	r3, r0
	size_t bytes = 0;
   29d60:	2000      	movs	r0, #0

	while (buf) {
   29d62:	b903      	cbnz	r3, 29d66 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   29d64:	4770      	bx	lr
		bytes += buf->len;
   29d66:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   29d68:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   29d6a:	4410      	add	r0, r2
		buf = buf->frags;
   29d6c:	e7f9      	b.n	29d62 <net_buf_frags_len+0x4>

00029d6e <attr_read_type_cb>:
{
   29d6e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   29d70:	68d4      	ldr	r4, [r2, #12]
   29d72:	7823      	ldrb	r3, [r4, #0]
   29d74:	3102      	adds	r1, #2
   29d76:	b913      	cbnz	r3, 29d7e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   29d78:	7021      	strb	r1, [r4, #0]
	return true;
   29d7a:	2001      	movs	r0, #1
   29d7c:	e006      	b.n	29d8c <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   29d7e:	428b      	cmp	r3, r1
   29d80:	d0fb      	beq.n	29d7a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   29d82:	8983      	ldrh	r3, [r0, #12]
   29d84:	3b02      	subs	r3, #2
   29d86:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   29d88:	2000      	movs	r0, #0
   29d8a:	6110      	str	r0, [r2, #16]
}
   29d8c:	bd10      	pop	{r4, pc}

00029d8e <att_prepare_write_req>:
}
   29d8e:	2006      	movs	r0, #6
   29d90:	4770      	bx	lr

00029d92 <att_op_get_type>:
	switch (op) {
   29d92:	2852      	cmp	r0, #82	; 0x52
   29d94:	d830      	bhi.n	29df8 <att_op_get_type+0x66>
   29d96:	b388      	cbz	r0, 29dfc <att_op_get_type+0x6a>
   29d98:	1e43      	subs	r3, r0, #1
   29d9a:	2b51      	cmp	r3, #81	; 0x51
   29d9c:	d82e      	bhi.n	29dfc <att_op_get_type+0x6a>
   29d9e:	e8df f003 	tbb	[pc, r3]
   29da2:	3933      	.short	0x3933
   29da4:	39333933 	.word	0x39333933
   29da8:	39333933 	.word	0x39333933
   29dac:	39333933 	.word	0x39333933
   29db0:	39333933 	.word	0x39333933
   29db4:	392d2d33 	.word	0x392d2d33
   29db8:	2d333933 	.word	0x2d333933
   29dbc:	29372d35 	.word	0x29372d35
   29dc0:	2d33392d 	.word	0x2d33392d
   29dc4:	2d2d2d35 	.word	0x2d2d2d35
   29dc8:	2d2d2d2d 	.word	0x2d2d2d2d
   29dcc:	2d2d2d2d 	.word	0x2d2d2d2d
   29dd0:	2d2d2d2d 	.word	0x2d2d2d2d
   29dd4:	2d2d2d2d 	.word	0x2d2d2d2d
   29dd8:	2d2d2d2d 	.word	0x2d2d2d2d
   29ddc:	2d2d2d2d 	.word	0x2d2d2d2d
   29de0:	2d2d2d2d 	.word	0x2d2d2d2d
   29de4:	2d2d2d2d 	.word	0x2d2d2d2d
   29de8:	2d2d2d2d 	.word	0x2d2d2d2d
   29dec:	2d2d2d2d 	.word	0x2d2d2d2d
   29df0:	3b2d2d2d 	.word	0x3b2d2d2d
   29df4:	2004      	movs	r0, #4
   29df6:	4770      	bx	lr
   29df8:	28d2      	cmp	r0, #210	; 0xd2
   29dfa:	d00d      	beq.n	29e18 <att_op_get_type+0x86>
		return ATT_COMMAND;
   29dfc:	f010 0f40 	tst.w	r0, #64	; 0x40
   29e00:	bf0c      	ite	eq
   29e02:	2006      	moveq	r0, #6
   29e04:	2000      	movne	r0, #0
   29e06:	4770      	bx	lr
		return ATT_RESPONSE;
   29e08:	2002      	movs	r0, #2
   29e0a:	4770      	bx	lr
		return ATT_NOTIFICATION;
   29e0c:	2003      	movs	r0, #3
   29e0e:	4770      	bx	lr
		return ATT_INDICATION;
   29e10:	2005      	movs	r0, #5
   29e12:	4770      	bx	lr
		return ATT_REQUEST;
   29e14:	2001      	movs	r0, #1
   29e16:	4770      	bx	lr
		return ATT_COMMAND;
   29e18:	2000      	movs	r0, #0
}
   29e1a:	4770      	bx	lr

00029e1c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29e1c:	f3bf 8f5b 	dmb	ish
   29e20:	6800      	ldr	r0, [r0, #0]
   29e22:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29e26:	4108      	asrs	r0, r1
}
   29e28:	f000 0001 	and.w	r0, r0, #1
   29e2c:	4770      	bx	lr

00029e2e <bt_gatt_foreach_attr>:
{
   29e2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   29e30:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29e34:	2300      	movs	r3, #0
   29e36:	9300      	str	r3, [sp, #0]
   29e38:	461a      	mov	r2, r3
   29e3a:	f7f0 f9c3 	bl	1a1c4 <bt_gatt_foreach_attr_type>
}
   29e3e:	b005      	add	sp, #20
   29e40:	f85d fb04 	ldr.w	pc, [sp], #4

00029e44 <att_chan_mtu_updated>:
{
   29e44:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   29e46:	6806      	ldr	r6, [r0, #0]
	return list->head;
   29e48:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29e4a:	b1c3      	cbz	r3, 29e7e <att_chan_mtu_updated+0x3a>
   29e4c:	461a      	mov	r2, r3
	return node->next;
   29e4e:	f852 49f0 	ldr.w	r4, [r2], #-240
   29e52:	b104      	cbz	r4, 29e56 <att_chan_mtu_updated+0x12>
   29e54:	3cf0      	subs	r4, #240	; 0xf0
{
   29e56:	2300      	movs	r3, #0
   29e58:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   29e5a:	4290      	cmp	r0, r2
   29e5c:	d007      	beq.n	29e6e <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   29e5e:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   29e60:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   29e62:	42a9      	cmp	r1, r5
   29e64:	bf38      	it	cc
   29e66:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   29e68:	4293      	cmp	r3, r2
   29e6a:	bf38      	it	cc
   29e6c:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29e6e:	b13c      	cbz	r4, 29e80 <att_chan_mtu_updated+0x3c>
   29e70:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   29e74:	b105      	cbz	r5, 29e78 <att_chan_mtu_updated+0x34>
   29e76:	3df0      	subs	r5, #240	; 0xf0
{
   29e78:	4622      	mov	r2, r4
   29e7a:	462c      	mov	r4, r5
   29e7c:	e7ed      	b.n	29e5a <att_chan_mtu_updated+0x16>
   29e7e:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   29e80:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   29e82:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   29e84:	428c      	cmp	r4, r1
   29e86:	d801      	bhi.n	29e8c <att_chan_mtu_updated+0x48>
   29e88:	429a      	cmp	r2, r3
   29e8a:	d909      	bls.n	29ea0 <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   29e8c:	429a      	cmp	r2, r3
   29e8e:	bf38      	it	cc
   29e90:	461a      	movcc	r2, r3
   29e92:	42a1      	cmp	r1, r4
   29e94:	6830      	ldr	r0, [r6, #0]
   29e96:	bf38      	it	cc
   29e98:	4621      	movcc	r1, r4
}
   29e9a:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   29e9c:	f7f0 bf88 	b.w	1adb0 <bt_gatt_att_max_mtu_changed>
}
   29ea0:	bc70      	pop	{r4, r5, r6}
   29ea2:	4770      	bx	lr

00029ea4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   29ea4:	68d0      	ldr	r0, [r2, #12]
   29ea6:	7803      	ldrb	r3, [r0, #0]
   29ea8:	3104      	adds	r1, #4
   29eaa:	b913      	cbnz	r3, 29eb2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   29eac:	7001      	strb	r1, [r0, #0]
	return true;
   29eae:	2001      	movs	r0, #1
}
   29eb0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   29eb2:	428b      	cmp	r3, r1
   29eb4:	d0fb      	beq.n	29eae <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   29eb6:	6891      	ldr	r1, [r2, #8]
   29eb8:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   29eba:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   29ebc:	3b04      	subs	r3, #4
   29ebe:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   29ec0:	6110      	str	r0, [r2, #16]
		return false;
   29ec2:	4770      	bx	lr

00029ec4 <write_cb>:
{
   29ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29ec6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   29ec8:	4601      	mov	r1, r0
{
   29eca:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   29ecc:	f44f 7295 	mov.w	r2, #298	; 0x12a
   29ed0:	6820      	ldr	r0, [r4, #0]
   29ed2:	f000 fdf9 	bl	2aac8 <bt_gatt_check_perm>
   29ed6:	4605      	mov	r5, r0
   29ed8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   29eda:	bb20      	cbnz	r0, 29f26 <write_cb+0x62>
	if (!data->req) {
   29edc:	7a23      	ldrb	r3, [r4, #8]
   29ede:	b1ab      	cbz	r3, 29f0c <write_cb+0x48>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   29ee0:	2b18      	cmp	r3, #24
   29ee2:	bf14      	ite	ne
   29ee4:	2300      	movne	r3, #0
   29ee6:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   29ee8:	9301      	str	r3, [sp, #4]
   29eea:	8a63      	ldrh	r3, [r4, #18]
   29eec:	9300      	str	r3, [sp, #0]
   29eee:	68b7      	ldr	r7, [r6, #8]
   29ef0:	8a23      	ldrh	r3, [r4, #16]
   29ef2:	68e2      	ldr	r2, [r4, #12]
   29ef4:	6820      	ldr	r0, [r4, #0]
   29ef6:	4631      	mov	r1, r6
   29ef8:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   29efa:	1e03      	subs	r3, r0, #0
   29efc:	db08      	blt.n	29f10 <write_cb+0x4c>
   29efe:	8a22      	ldrh	r2, [r4, #16]
   29f00:	4293      	cmp	r3, r2
   29f02:	d10e      	bne.n	29f22 <write_cb+0x5e>
	data->err = 0U;
   29f04:	2300      	movs	r3, #0
   29f06:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   29f08:	2501      	movs	r5, #1
   29f0a:	e007      	b.n	29f1c <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   29f0c:	2302      	movs	r3, #2
   29f0e:	e7eb      	b.n	29ee8 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   29f10:	f113 0fff 	cmn.w	r3, #255	; 0xff
   29f14:	d305      	bcc.n	29f22 <write_cb+0x5e>
		return -err;
   29f16:	425b      	negs	r3, r3
   29f18:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   29f1a:	7523      	strb	r3, [r4, #20]
}
   29f1c:	4628      	mov	r0, r5
   29f1e:	b003      	add	sp, #12
   29f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   29f22:	230e      	movs	r3, #14
   29f24:	e7f9      	b.n	29f1a <write_cb+0x56>
		return BT_GATT_ITER_STOP;
   29f26:	2500      	movs	r5, #0
   29f28:	e7f8      	b.n	29f1c <write_cb+0x58>

00029f2a <find_info_cb>:
{
   29f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   29f2c:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   29f2e:	6816      	ldr	r6, [r2, #0]
{
   29f30:	4605      	mov	r5, r0
   29f32:	460f      	mov	r7, r1
   29f34:	4614      	mov	r4, r2
	if (!data->rsp) {
   29f36:	b963      	cbnz	r3, 29f52 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   29f38:	6850      	ldr	r0, [r2, #4]
   29f3a:	2101      	movs	r1, #1
   29f3c:	3008      	adds	r0, #8
   29f3e:	f7f3 f8d1 	bl	1d0e4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   29f42:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   29f44:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   29f46:	781b      	ldrb	r3, [r3, #0]
   29f48:	2b00      	cmp	r3, #0
   29f4a:	bf0c      	ite	eq
   29f4c:	2301      	moveq	r3, #1
   29f4e:	2302      	movne	r3, #2
   29f50:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   29f52:	68a3      	ldr	r3, [r4, #8]
   29f54:	781b      	ldrb	r3, [r3, #0]
   29f56:	2b01      	cmp	r3, #1
   29f58:	d003      	beq.n	29f62 <find_info_cb+0x38>
   29f5a:	2b02      	cmp	r3, #2
   29f5c:	d018      	beq.n	29f90 <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   29f5e:	2000      	movs	r0, #0
   29f60:	e015      	b.n	29f8e <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   29f62:	682b      	ldr	r3, [r5, #0]
   29f64:	781b      	ldrb	r3, [r3, #0]
   29f66:	2b00      	cmp	r3, #0
   29f68:	d1f9      	bne.n	29f5e <find_info_cb+0x34>
   29f6a:	6860      	ldr	r0, [r4, #4]
   29f6c:	2104      	movs	r1, #4
   29f6e:	3008      	adds	r0, #8
   29f70:	f7f3 f8b8 	bl	1d0e4 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   29f74:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   29f76:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   29f78:	885b      	ldrh	r3, [r3, #2]
   29f7a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   29f7c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   29f7e:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   29f80:	899b      	ldrh	r3, [r3, #12]
   29f82:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   29f84:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   29f86:	2804      	cmp	r0, #4
   29f88:	bf94      	ite	ls
   29f8a:	2000      	movls	r0, #0
   29f8c:	2001      	movhi	r0, #1
}
   29f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   29f90:	682b      	ldr	r3, [r5, #0]
   29f92:	781b      	ldrb	r3, [r3, #0]
   29f94:	2b02      	cmp	r3, #2
   29f96:	d1e2      	bne.n	29f5e <find_info_cb+0x34>
   29f98:	6860      	ldr	r0, [r4, #4]
   29f9a:	2112      	movs	r1, #18
   29f9c:	3008      	adds	r0, #8
   29f9e:	f7f3 f8a1 	bl	1d0e4 <net_buf_simple_add>
   29fa2:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29fa4:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   29fa6:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   29fa8:	f823 7b02 	strh.w	r7, [r3], #2
   29fac:	1c51      	adds	r1, r2, #1
   29fae:	3211      	adds	r2, #17
   29fb0:	f851 0b04 	ldr.w	r0, [r1], #4
   29fb4:	f843 0b04 	str.w	r0, [r3], #4
   29fb8:	4291      	cmp	r1, r2
   29fba:	d1f9      	bne.n	29fb0 <find_info_cb+0x86>
		if (chan->chan.tx.mtu - data->buf->len >
   29fbc:	6863      	ldr	r3, [r4, #4]
   29fbe:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   29fc0:	899b      	ldrh	r3, [r3, #12]
   29fc2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   29fc4:	2812      	cmp	r0, #18
   29fc6:	e7df      	b.n	29f88 <find_info_cb+0x5e>

00029fc8 <att_chan_read>:
{
   29fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fcc:	4680      	mov	r8, r0
   29fce:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29fd0:	4610      	mov	r0, r2
{
   29fd2:	4699      	mov	r9, r3
   29fd4:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29fd6:	f7ff fec2 	bl	29d5e <net_buf_frags_len>
   29fda:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   29fde:	4283      	cmp	r3, r0
{
   29fe0:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29fe2:	d97a      	bls.n	2a0da <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   29fe4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   29fe8:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   29fea:	4630      	mov	r0, r6
   29fec:	f7f2 ffc0 	bl	1cf70 <net_buf_frag_last>
	size_t len, total = 0;
   29ff0:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   29ff4:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   29ff6:	4630      	mov	r0, r6
   29ff8:	f7ff feb1 	bl	29d5e <net_buf_frags_len>
   29ffc:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2a000:	f105 0708 	add.w	r7, r5, #8
   2a004:	1a24      	subs	r4, r4, r0
   2a006:	4638      	mov	r0, r7
   2a008:	f001 f9cf 	bl	2b3aa <net_buf_simple_tailroom>
   2a00c:	4284      	cmp	r4, r0
   2a00e:	d211      	bcs.n	2a034 <att_chan_read+0x6c>
   2a010:	4630      	mov	r0, r6
   2a012:	f7ff fea4 	bl	29d5e <net_buf_frags_len>
   2a016:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2a01a:	1a24      	subs	r4, r4, r0
		if (!len) {
   2a01c:	bb34      	cbnz	r4, 2a06c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2a01e:	79b0      	ldrb	r0, [r6, #6]
   2a020:	f7f2 fcb8 	bl	1c994 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2a024:	2200      	movs	r2, #0
   2a026:	2300      	movs	r3, #0
   2a028:	f001 f9ae 	bl	2b388 <net_buf_alloc_fixed>
			if (!frag) {
   2a02c:	4605      	mov	r5, r0
   2a02e:	b930      	cbnz	r0, 2a03e <att_chan_read+0x76>
	return total;
   2a030:	4657      	mov	r7, sl
   2a032:	e02c      	b.n	2a08e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2a034:	4638      	mov	r0, r7
   2a036:	f001 f9b8 	bl	2b3aa <net_buf_simple_tailroom>
   2a03a:	4604      	mov	r4, r0
   2a03c:	e7ee      	b.n	2a01c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2a03e:	4601      	mov	r1, r0
   2a040:	4630      	mov	r0, r6
   2a042:	f7f2 ffd5 	bl	1cff0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2a046:	4630      	mov	r0, r6
   2a048:	f7ff fe89 	bl	29d5e <net_buf_frags_len>
   2a04c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2a050:	f105 0708 	add.w	r7, r5, #8
   2a054:	1a24      	subs	r4, r4, r0
   2a056:	4638      	mov	r0, r7
   2a058:	f001 f9a7 	bl	2b3aa <net_buf_simple_tailroom>
   2a05c:	4284      	cmp	r4, r0
   2a05e:	d21a      	bcs.n	2a096 <att_chan_read+0xce>
   2a060:	4630      	mov	r0, r6
   2a062:	f7ff fe7c 	bl	29d5e <net_buf_frags_len>
   2a066:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2a06a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2a06c:	68a9      	ldr	r1, [r5, #8]
   2a06e:	89aa      	ldrh	r2, [r5, #12]
   2a070:	f8db 7004 	ldr.w	r7, [fp, #4]
   2a074:	9803      	ldr	r0, [sp, #12]
   2a076:	f8cd 9000 	str.w	r9, [sp]
   2a07a:	440a      	add	r2, r1
   2a07c:	b2a3      	uxth	r3, r4
   2a07e:	4659      	mov	r1, fp
   2a080:	47b8      	blx	r7
		if (read < 0) {
   2a082:	1e07      	subs	r7, r0, #0
   2a084:	da0c      	bge.n	2a0a0 <att_chan_read+0xd8>
				return total;
   2a086:	f1ba 0f00 	cmp.w	sl, #0
   2a08a:	bf18      	it	ne
   2a08c:	4657      	movne	r7, sl
}
   2a08e:	4638      	mov	r0, r7
   2a090:	b005      	add	sp, #20
   2a092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a096:	4638      	mov	r0, r7
   2a098:	f001 f987 	bl	2b3aa <net_buf_simple_tailroom>
   2a09c:	4604      	mov	r4, r0
   2a09e:	e7e5      	b.n	2a06c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2a0a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a0a2:	b993      	cbnz	r3, 2a0ca <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2a0a4:	4639      	mov	r1, r7
   2a0a6:	f105 0008 	add.w	r0, r5, #8
   2a0aa:	f7f3 f81b 	bl	1d0e4 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2a0ae:	4630      	mov	r0, r6
   2a0b0:	f7ff fe55 	bl	29d5e <net_buf_frags_len>
   2a0b4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2a0b8:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2a0ba:	4283      	cmp	r3, r0
		total += read;
   2a0bc:	44ba      	add	sl, r7
		offset += read;
   2a0be:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2a0c2:	d9b5      	bls.n	2a030 <att_chan_read+0x68>
   2a0c4:	42a7      	cmp	r7, r4
   2a0c6:	d096      	beq.n	29ff6 <att_chan_read+0x2e>
   2a0c8:	e7b2      	b.n	2a030 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2a0ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2a0cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a0ce:	4639      	mov	r1, r7
   2a0d0:	4628      	mov	r0, r5
   2a0d2:	4798      	blx	r3
   2a0d4:	2800      	cmp	r0, #0
   2a0d6:	d1e5      	bne.n	2a0a4 <att_chan_read+0xdc>
   2a0d8:	e7aa      	b.n	2a030 <att_chan_read+0x68>
		return 0;
   2a0da:	2700      	movs	r7, #0
   2a0dc:	e7d7      	b.n	2a08e <att_chan_read+0xc6>

0002a0de <process_queue>:
{
   2a0de:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2a0e0:	2200      	movs	r2, #0
{
   2a0e2:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2a0e4:	2300      	movs	r3, #0
   2a0e6:	4608      	mov	r0, r1
{
   2a0e8:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2a0ea:	f7f2 fd95 	bl	1cc18 <net_buf_get>
	if (buf) {
   2a0ee:	4605      	mov	r5, r0
   2a0f0:	b158      	cbz	r0, 2a10a <process_queue+0x2c>
	return chan_send(chan, buf);
   2a0f2:	4601      	mov	r1, r0
   2a0f4:	4620      	mov	r0, r4
   2a0f6:	f7ee fccf 	bl	18a98 <chan_send>
		if (err) {
   2a0fa:	4604      	mov	r4, r0
   2a0fc:	b118      	cbz	r0, 2a106 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2a0fe:	4629      	mov	r1, r5
   2a100:	4630      	mov	r0, r6
   2a102:	f001 fe68 	bl	2bdd6 <k_queue_prepend>
}
   2a106:	4620      	mov	r0, r4
   2a108:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2a10a:	f06f 0401 	mvn.w	r4, #1
   2a10e:	e7fa      	b.n	2a106 <process_queue+0x28>

0002a110 <bt_att_chan_send_rsp>:
{
   2a110:	b538      	push	{r3, r4, r5, lr}
   2a112:	4604      	mov	r4, r0
   2a114:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2a116:	f7ee fcbf 	bl	18a98 <chan_send>
	if (err) {
   2a11a:	b130      	cbz	r0, 2a12a <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2a11c:	4629      	mov	r1, r5
   2a11e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   2a122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2a126:	f7f2 be99 	b.w	1ce5c <net_buf_put>
}
   2a12a:	bd38      	pop	{r3, r4, r5, pc}

0002a12c <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a12c:	b510      	push	{r4, lr}
	return list->head;
   2a12e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a130:	2200      	movs	r2, #0
   2a132:	b153      	cbz	r3, 2a14a <sys_slist_find_and_remove.isra.0+0x1e>
   2a134:	428b      	cmp	r3, r1
   2a136:	d10e      	bne.n	2a156 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   2a138:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   2a13a:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a13c:	b932      	cbnz	r2, 2a14c <sys_slist_find_and_remove.isra.0+0x20>
   2a13e:	42a1      	cmp	r1, r4
	list->head = node;
   2a140:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2a142:	d100      	bne.n	2a146 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2a144:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2a146:	2300      	movs	r3, #0
   2a148:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a14a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2a14c:	42a1      	cmp	r1, r4
	parent->next = child;
   2a14e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2a150:	bf08      	it	eq
   2a152:	6042      	streq	r2, [r0, #4]
}
   2a154:	e7f7      	b.n	2a146 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2a156:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a158:	681b      	ldr	r3, [r3, #0]
   2a15a:	e7ea      	b.n	2a132 <sys_slist_find_and_remove.isra.0+0x6>

0002a15c <att_exec_write_req>:
   2a15c:	2006      	movs	r0, #6
   2a15e:	4770      	bx	lr

0002a160 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a160:	2301      	movs	r3, #1
   2a162:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a166:	f3bf 8f5b 	dmb	ish
   2a16a:	e850 3f00 	ldrex	r3, [r0]
   2a16e:	ea43 0201 	orr.w	r2, r3, r1
   2a172:	e840 2c00 	strex	ip, r2, [r0]
   2a176:	f1bc 0f00 	cmp.w	ip, #0
   2a17a:	d1f6      	bne.n	2a16a <atomic_test_and_set_bit+0xa>
   2a17c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2a180:	4219      	tst	r1, r3
}
   2a182:	bf14      	ite	ne
   2a184:	2001      	movne	r0, #1
   2a186:	2000      	moveq	r0, #0
   2a188:	4770      	bx	lr

0002a18a <read_cb>:
{
   2a18a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2a18e:	f8d2 8000 	ldr.w	r8, [r2]
{
   2a192:	4606      	mov	r6, r0
	data->err = 0x00;
   2a194:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2a196:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2a19a:	7317      	strb	r7, [r2, #12]
{
   2a19c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2a19e:	4631      	mov	r1, r6
   2a1a0:	2295      	movs	r2, #149	; 0x95
   2a1a2:	f000 fc91 	bl	2aac8 <bt_gatt_check_perm>
   2a1a6:	4604      	mov	r4, r0
   2a1a8:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2a1aa:	b9a0      	cbnz	r0, 2a1d6 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2a1ac:	e9cd 0000 	strd	r0, r0, [sp]
   2a1b0:	88ab      	ldrh	r3, [r5, #4]
   2a1b2:	68aa      	ldr	r2, [r5, #8]
   2a1b4:	4631      	mov	r1, r6
   2a1b6:	4640      	mov	r0, r8
   2a1b8:	f7ff ff06 	bl	29fc8 <att_chan_read>
	if (ret < 0) {
   2a1bc:	1e03      	subs	r3, r0, #0
   2a1be:	da0c      	bge.n	2a1da <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2a1c0:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2a1c4:	bf26      	itte	cs
   2a1c6:	425b      	negcs	r3, r3
   2a1c8:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2a1ca:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2a1cc:	732b      	strb	r3, [r5, #12]
}
   2a1ce:	4620      	mov	r0, r4
   2a1d0:	b002      	add	sp, #8
   2a1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2a1d6:	463c      	mov	r4, r7
   2a1d8:	e7f9      	b.n	2a1ce <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2a1da:	2401      	movs	r4, #1
   2a1dc:	e7f7      	b.n	2a1ce <read_cb+0x44>

0002a1de <read_vl_cb>:
{
   2a1de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2a1e2:	f8d2 8000 	ldr.w	r8, [r2]
{
   2a1e6:	4606      	mov	r6, r0
	data->err = 0x00;
   2a1e8:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2a1ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2a1ee:	7317      	strb	r7, [r2, #12]
{
   2a1f0:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2a1f2:	4631      	mov	r1, r6
   2a1f4:	2295      	movs	r2, #149	; 0x95
   2a1f6:	f000 fc67 	bl	2aac8 <bt_gatt_check_perm>
   2a1fa:	4604      	mov	r4, r0
   2a1fc:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2a1fe:	bb18      	cbnz	r0, 2a248 <read_vl_cb+0x6a>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2a200:	68a8      	ldr	r0, [r5, #8]
   2a202:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2a206:	8982      	ldrh	r2, [r0, #12]
   2a208:	1a9b      	subs	r3, r3, r2
   2a20a:	2b01      	cmp	r3, #1
   2a20c:	dd15      	ble.n	2a23a <read_vl_cb+0x5c>
   2a20e:	2102      	movs	r1, #2
   2a210:	3008      	adds	r0, #8
   2a212:	f7f2 ff67 	bl	1d0e4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2a216:	88ab      	ldrh	r3, [r5, #4]
   2a218:	68aa      	ldr	r2, [r5, #8]
   2a21a:	e9cd 4400 	strd	r4, r4, [sp]
   2a21e:	4607      	mov	r7, r0
   2a220:	4631      	mov	r1, r6
   2a222:	4640      	mov	r0, r8
   2a224:	f7ff fed0 	bl	29fc8 <att_chan_read>
	if (read < 0) {
   2a228:	1e03      	subs	r3, r0, #0
   2a22a:	da0a      	bge.n	2a242 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2a22c:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2a230:	bf26      	itte	cs
   2a232:	425b      	negcs	r3, r3
   2a234:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2a236:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   2a238:	732b      	strb	r3, [r5, #12]
}
   2a23a:	4620      	mov	r0, r4
   2a23c:	b002      	add	sp, #8
   2a23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   2a242:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2a244:	2401      	movs	r4, #1
   2a246:	e7f8      	b.n	2a23a <read_vl_cb+0x5c>
		return BT_GATT_ITER_STOP;
   2a248:	463c      	mov	r4, r7
   2a24a:	e7f6      	b.n	2a23a <read_vl_cb+0x5c>

0002a24c <bt_att_sent>:
{
   2a24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a250:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2a252:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a254:	f100 0394 	add.w	r3, r0, #148	; 0x94
	struct bt_att *att = chan->att;
   2a258:	f850 6c04 	ldr.w	r6, [r0, #-4]
   2a25c:	f3bf 8f5b 	dmb	ish
   2a260:	e853 2f00 	ldrex	r2, [r3]
   2a264:	f022 0210 	bic.w	r2, r2, #16
   2a268:	e843 2100 	strex	r1, r2, [r3]
   2a26c:	2900      	cmp	r1, #0
   2a26e:	d1f7      	bne.n	2a260 <bt_att_sent+0x14>
   2a270:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2a274:	b3a6      	cbz	r6, 2a2e0 <bt_att_sent+0x94>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2a276:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
   2a27a:	f1b8 0f00 	cmp.w	r8, #0
   2a27e:	d113      	bne.n	2a2a8 <bt_att_sent+0x5c>
   2a280:	6873      	ldr	r3, [r6, #4]
   2a282:	b18b      	cbz	r3, 2a2a8 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2a284:	1d30      	adds	r0, r6, #4
   2a286:	f7ff fd60 	bl	29d4a <sys_slist_get>
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2a28a:	f8d0 9008 	ldr.w	r9, [r0, #8]
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2a28e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2a290:	4648      	mov	r0, r9
   2a292:	f7ff fd64 	bl	29d5e <net_buf_frags_len>
   2a296:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2a298:	4283      	cmp	r3, r0
   2a29a:	d212      	bcs.n	2a2c2 <bt_att_sent+0x76>
	parent->next = child;
   2a29c:	6873      	ldr	r3, [r6, #4]
   2a29e:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2a2a0:	68b3      	ldr	r3, [r6, #8]
	list->head = node;
   2a2a2:	6075      	str	r5, [r6, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a2a4:	b903      	cbnz	r3, 2a2a8 <bt_att_sent+0x5c>
	list->tail = node;
   2a2a6:	60b5      	str	r5, [r6, #8]
	err = process_queue(chan, &chan->tx_queue);
   2a2a8:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   2a2ac:	4638      	mov	r0, r7
   2a2ae:	f7ff ff16 	bl	2a0de <process_queue>
	if (!err) {
   2a2b2:	b1a8      	cbz	r0, 2a2e0 <bt_att_sent+0x94>
	(void)process_queue(chan, &att->tx_queue);
   2a2b4:	f106 010c 	add.w	r1, r6, #12
   2a2b8:	4638      	mov	r0, r7
}
   2a2ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	(void)process_queue(chan, &att->tx_queue);
   2a2be:	f7ff bf0e 	b.w	2a0de <process_queue>
	chan->req = req;
   2a2c2:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	return chan_send(chan, buf);
   2a2c6:	4649      	mov	r1, r9
	req->buf = NULL;
   2a2c8:	f8c5 8008 	str.w	r8, [r5, #8]
	return chan_send(chan, buf);
   2a2cc:	4638      	mov	r0, r7
   2a2ce:	f7ee fbe3 	bl	18a98 <chan_send>
	if (err) {
   2a2d2:	2800      	cmp	r0, #0
   2a2d4:	d004      	beq.n	2a2e0 <bt_att_sent+0x94>
		req->buf = buf;
   2a2d6:	f8c5 9008 	str.w	r9, [r5, #8]
		chan->req = NULL;
   2a2da:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a2de:	dbdd      	blt.n	2a29c <bt_att_sent+0x50>
}
   2a2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a2e4 <att_req_send_process>:
{
   2a2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2a2e8:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2a2ea:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a2ec:	2c00      	cmp	r4, #0
   2a2ee:	d03b      	beq.n	2a368 <att_req_send_process+0x84>
	return node->next;
   2a2f0:	f854 59f0 	ldr.w	r5, [r4], #-240
   2a2f4:	b105      	cbz	r5, 2a2f8 <att_req_send_process+0x14>
   2a2f6:	3df0      	subs	r5, #240	; 0xf0
{
   2a2f8:	2300      	movs	r3, #0
   2a2fa:	461e      	mov	r6, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   2a2fc:	f108 0704 	add.w	r7, r8, #4
		if (chan->req) {
   2a300:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   2a304:	b9e2      	cbnz	r2, 2a340 <att_req_send_process+0x5c>
		if (!req && prev &&
   2a306:	b16e      	cbz	r6, 2a324 <att_req_send_process+0x40>
	sys_snode_t *node = sys_slist_get(reqs);
   2a308:	4638      	mov	r0, r7
   2a30a:	f7ff fd1e 	bl	29d4a <sys_slist_get>
	if (node) {
   2a30e:	4606      	mov	r6, r0
   2a310:	b9c0      	cbnz	r0, 2a344 <att_req_send_process+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a312:	b34d      	cbz	r5, 2a368 <att_req_send_process+0x84>
   2a314:	f8d5 20f0 	ldr.w	r2, [r5, #240]	; 0xf0
   2a318:	b102      	cbz	r2, 2a31c <att_req_send_process+0x38>
   2a31a:	3af0      	subs	r2, #240	; 0xf0
{
   2a31c:	4623      	mov	r3, r4
   2a31e:	462c      	mov	r4, r5
   2a320:	4615      	mov	r5, r2
   2a322:	e7ed      	b.n	2a300 <att_req_send_process+0x1c>
		if (!req && prev &&
   2a324:	2b00      	cmp	r3, #0
   2a326:	d0ef      	beq.n	2a308 <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2a328:	2103      	movs	r1, #3
   2a32a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2a32e:	f7ff fd75 	bl	29e1c <atomic_test_bit>
   2a332:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2a334:	f103 0098 	add.w	r0, r3, #152	; 0x98
   2a338:	f7ff fd70 	bl	29e1c <atomic_test_bit>
		if (!req && prev &&
   2a33c:	4282      	cmp	r2, r0
   2a33e:	d1e3      	bne.n	2a308 <att_req_send_process+0x24>
   2a340:	461c      	mov	r4, r3
   2a342:	e7e6      	b.n	2a312 <att_req_send_process+0x2e>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2a344:	4601      	mov	r1, r0
   2a346:	4620      	mov	r0, r4
   2a348:	f7ee fc0a 	bl	18b60 <bt_att_chan_req_send>
   2a34c:	2800      	cmp	r0, #0
   2a34e:	da0b      	bge.n	2a368 <att_req_send_process+0x84>
	parent->next = child;
   2a350:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2a354:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2a356:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2a35a:	f8c8 6004 	str.w	r6, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a35e:	2b00      	cmp	r3, #0
   2a360:	d1d7      	bne.n	2a312 <att_req_send_process+0x2e>
	list->tail = node;
   2a362:	f8c8 6008 	str.w	r6, [r8, #8]
}
   2a366:	e7d4      	b.n	2a312 <att_req_send_process+0x2e>
}
   2a368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a36c <bt_att_status>:
{
   2a36c:	b538      	push	{r3, r4, r5, lr}
   2a36e:	4605      	mov	r5, r0
   2a370:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2a372:	2100      	movs	r1, #0
   2a374:	f7ff fd52 	bl	29e1c <atomic_test_bit>
   2a378:	b1c0      	cbz	r0, 2a3ac <bt_att_status+0x40>
	if (!chan->att) {
   2a37a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2a37e:	b1a8      	cbz	r0, 2a3ac <bt_att_status+0x40>
	if (chan->req) {
   2a380:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2a384:	b993      	cbnz	r3, 2a3ac <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2a386:	3004      	adds	r0, #4
   2a388:	f7ff fcdf 	bl	29d4a <sys_slist_get>
	if (!node) {
   2a38c:	4604      	mov	r4, r0
   2a38e:	b168      	cbz	r0, 2a3ac <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2a390:	4601      	mov	r1, r0
   2a392:	1f28      	subs	r0, r5, #4
   2a394:	f7ee fbe4 	bl	18b60 <bt_att_chan_req_send>
   2a398:	2800      	cmp	r0, #0
   2a39a:	da07      	bge.n	2a3ac <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2a39c:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   2a3a0:	685a      	ldr	r2, [r3, #4]
   2a3a2:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2a3a4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2a3a6:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a3a8:	b902      	cbnz	r2, 2a3ac <bt_att_status+0x40>
	list->tail = node;
   2a3aa:	609c      	str	r4, [r3, #8]
}
   2a3ac:	bd38      	pop	{r3, r4, r5, pc}

0002a3ae <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2a3ae:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2a3b0:	6883      	ldr	r3, [r0, #8]
   2a3b2:	695b      	ldr	r3, [r3, #20]
   2a3b4:	b10b      	cbz	r3, 2a3ba <att_sent+0xc>
		chan->ops->sent(chan);
   2a3b6:	3004      	adds	r0, #4
   2a3b8:	4718      	bx	r3
}
   2a3ba:	4770      	bx	lr

0002a3bc <att_unknown>:
{
   2a3bc:	b510      	push	{r4, lr}
   2a3be:	460c      	mov	r4, r1
	if (!err) {
   2a3c0:	b90a      	cbnz	r2, 2a3c6 <att_unknown+0xa>
		att_sent(conn, user_data);
   2a3c2:	f7ff fff4 	bl	2a3ae <att_sent>
	tx_meta_data_free(user_data);
   2a3c6:	4620      	mov	r0, r4
}
   2a3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2a3cc:	f7ee ba2a 	b.w	18824 <tx_meta_data_free>

0002a3d0 <att_tx_complete>:
{
   2a3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a3d4:	4606      	mov	r6, r0
   2a3d6:	460d      	mov	r5, r1
	if (!err) {
   2a3d8:	4614      	mov	r4, r2
   2a3da:	b90a      	cbnz	r2, 2a3e0 <att_tx_complete+0x10>
		att_sent(conn, user_data);
   2a3dc:	f7ff ffe7 	bl	2a3ae <att_sent>
	tx_meta_data_free(data);
   2a3e0:	4628      	mov	r0, r5
	bt_gatt_complete_func_t func = data->func;
   2a3e2:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   2a3e4:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2a3e8:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2a3ec:	f7ee fa1a 	bl	18824 <tx_meta_data_free>
	if (!err && func) {
   2a3f0:	b904      	cbnz	r4, 2a3f4 <att_tx_complete+0x24>
   2a3f2:	b92f      	cbnz	r7, 2a400 <att_tx_complete+0x30>
}
   2a3f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2a3f8:	4649      	mov	r1, r9
   2a3fa:	4630      	mov	r0, r6
   2a3fc:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2a3fe:	3401      	adds	r4, #1
   2a400:	b2a3      	uxth	r3, r4
   2a402:	4598      	cmp	r8, r3
   2a404:	d8f8      	bhi.n	2a3f8 <att_tx_complete+0x28>
   2a406:	e7f5      	b.n	2a3f4 <att_tx_complete+0x24>

0002a408 <att_req_sent>:
{
   2a408:	b510      	push	{r4, lr}
   2a40a:	460c      	mov	r4, r1
	if (!err) {
   2a40c:	b90a      	cbnz	r2, 2a412 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2a40e:	f7ff ffce 	bl	2a3ae <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2a412:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2a414:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2a418:	b12b      	cbz	r3, 2a426 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2a41a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2a41e:	2300      	movs	r3, #0
   2a420:	30c0      	adds	r0, #192	; 0xc0
   2a422:	f7f8 fde5 	bl	22ff0 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2a426:	4620      	mov	r0, r4
}
   2a428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2a42c:	f7ee b9fa 	b.w	18824 <tx_meta_data_free>

0002a430 <att_cfm_sent>:
{
   2a430:	b510      	push	{r4, lr}
   2a432:	460c      	mov	r4, r1
	if (!err) {
   2a434:	b90a      	cbnz	r2, 2a43a <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2a436:	f7ff ffba 	bl	2a3ae <att_sent>
   2a43a:	6823      	ldr	r3, [r4, #0]
   2a43c:	f3bf 8f5b 	dmb	ish
   2a440:	3398      	adds	r3, #152	; 0x98
   2a442:	e853 2f00 	ldrex	r2, [r3]
   2a446:	f022 0202 	bic.w	r2, r2, #2
   2a44a:	e843 2100 	strex	r1, r2, [r3]
   2a44e:	2900      	cmp	r1, #0
   2a450:	d1f7      	bne.n	2a442 <att_cfm_sent+0x12>
   2a452:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2a456:	4620      	mov	r0, r4
}
   2a458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2a45c:	f7ee b9e2 	b.w	18824 <tx_meta_data_free>

0002a460 <att_rsp_sent>:
{
   2a460:	b510      	push	{r4, lr}
   2a462:	460c      	mov	r4, r1
	if (!err) {
   2a464:	b90a      	cbnz	r2, 2a46a <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2a466:	f7ff ffa2 	bl	2a3ae <att_sent>
   2a46a:	6823      	ldr	r3, [r4, #0]
   2a46c:	f3bf 8f5b 	dmb	ish
   2a470:	3398      	adds	r3, #152	; 0x98
   2a472:	e853 2f00 	ldrex	r2, [r3]
   2a476:	f022 0201 	bic.w	r2, r2, #1
   2a47a:	e843 2100 	strex	r1, r2, [r3]
   2a47e:	2900      	cmp	r1, #0
   2a480:	d1f7      	bne.n	2a472 <att_rsp_sent+0x12>
   2a482:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2a486:	4620      	mov	r0, r4
}
   2a488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2a48c:	f7ee b9ca 	b.w	18824 <tx_meta_data_free>

0002a490 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2a490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a494:	4688      	mov	r8, r1
   2a496:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2a498:	2101      	movs	r1, #1
   2a49a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2a49c:	4605      	mov	r5, r0
   2a49e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2a4a0:	f7ee fc70 	bl	18d84 <bt_att_chan_create_pdu>
	if (!buf) {
   2a4a4:	4604      	mov	r4, r0
   2a4a6:	b170      	cbz	r0, 2a4c6 <send_err_rsp.part.0+0x36>
   2a4a8:	2104      	movs	r1, #4
   2a4aa:	3008      	adds	r0, #8
   2a4ac:	f7f2 fe1a 	bl	1d0e4 <net_buf_simple_add>
	rsp->request = req;
   2a4b0:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2a4b4:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2a4b6:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf);
   2a4ba:	4621      	mov	r1, r4
   2a4bc:	4628      	mov	r0, r5
}
   2a4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2a4c2:	f7ff be25 	b.w	2a110 <bt_att_chan_send_rsp>
}
   2a4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a4ca <att_write_req>:
{
   2a4ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a4cc:	460c      	mov	r4, r1
   2a4ce:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2a4d0:	f101 0008 	add.w	r0, r1, #8
   2a4d4:	f000 ff5d 	bl	2b392 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2a4d8:	89a2      	ldrh	r2, [r4, #12]
   2a4da:	9201      	str	r2, [sp, #4]
   2a4dc:	68a2      	ldr	r2, [r4, #8]
   2a4de:	9200      	str	r2, [sp, #0]
   2a4e0:	4603      	mov	r3, r0
   2a4e2:	2213      	movs	r2, #19
   2a4e4:	2112      	movs	r1, #18
   2a4e6:	4628      	mov	r0, r5
   2a4e8:	f7ee fd12 	bl	18f10 <att_write_rsp.constprop.0>
}
   2a4ec:	b003      	add	sp, #12
   2a4ee:	bd30      	pop	{r4, r5, pc}

0002a4f0 <att_write_cmd>:
{
   2a4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a4f2:	460c      	mov	r4, r1
   2a4f4:	4605      	mov	r5, r0
   2a4f6:	f101 0008 	add.w	r0, r1, #8
   2a4fa:	f000 ff4a 	bl	2b392 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2a4fe:	89a2      	ldrh	r2, [r4, #12]
   2a500:	9201      	str	r2, [sp, #4]
   2a502:	68a2      	ldr	r2, [r4, #8]
   2a504:	9200      	str	r2, [sp, #0]
   2a506:	2200      	movs	r2, #0
   2a508:	4603      	mov	r3, r0
   2a50a:	4611      	mov	r1, r2
   2a50c:	4628      	mov	r0, r5
   2a50e:	f7ee fcff 	bl	18f10 <att_write_rsp.constprop.0>
}
   2a512:	b003      	add	sp, #12
   2a514:	bd30      	pop	{r4, r5, pc}

0002a516 <att_read_blob_req>:
{
   2a516:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2a518:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2a51a:	8813      	ldrh	r3, [r2, #0]
   2a51c:	8852      	ldrh	r2, [r2, #2]
   2a51e:	9200      	str	r2, [sp, #0]
   2a520:	210c      	movs	r1, #12
   2a522:	220d      	movs	r2, #13
   2a524:	f7ee feb8 	bl	19298 <att_read_rsp>
}
   2a528:	b003      	add	sp, #12
   2a52a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a52e <att_read_req>:
{
   2a52e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2a530:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2a532:	2200      	movs	r2, #0
   2a534:	881b      	ldrh	r3, [r3, #0]
   2a536:	9200      	str	r2, [sp, #0]
   2a538:	210a      	movs	r1, #10
   2a53a:	220b      	movs	r2, #11
   2a53c:	f7ee feac 	bl	19298 <att_read_rsp>
}
   2a540:	b003      	add	sp, #12
   2a542:	f85d fb04 	ldr.w	pc, [sp], #4

0002a546 <att_mtu_req>:
{
   2a546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a548:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2a54a:	f850 2b98 	ldr.w	r2, [r0], #152
{
   2a54e:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2a550:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2a552:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2a554:	f7ff fc62 	bl	29e1c <atomic_test_bit>
   2a558:	4604      	mov	r4, r0
   2a55a:	b9f0      	cbnz	r0, 2a59a <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2a55c:	689b      	ldr	r3, [r3, #8]
   2a55e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2a560:	2e16      	cmp	r6, #22
   2a562:	d91c      	bls.n	2a59e <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2a564:	4638      	mov	r0, r7
   2a566:	2202      	movs	r2, #2
   2a568:	f7ee fd3e 	bl	18fe8 <bt_att_create_pdu>
	if (!pdu) {
   2a56c:	4607      	mov	r7, r0
   2a56e:	b1c0      	cbz	r0, 2a5a2 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2a570:	2102      	movs	r1, #2
   2a572:	3008      	adds	r0, #8
   2a574:	f7f2 fdb6 	bl	1d0e4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2a578:	2341      	movs	r3, #65	; 0x41
   2a57a:	7003      	strb	r3, [r0, #0]
   2a57c:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2a57e:	4639      	mov	r1, r7
   2a580:	4628      	mov	r0, r5
   2a582:	f7ff fdc5 	bl	2a110 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2a586:	2e41      	cmp	r6, #65	; 0x41
   2a588:	bf28      	it	cs
   2a58a:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2a58c:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2a58e:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2a590:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2a592:	f7ff fc57 	bl	29e44 <att_chan_mtu_updated>
	return 0;
   2a596:	4620      	mov	r0, r4
}
   2a598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2a59a:	2006      	movs	r0, #6
   2a59c:	e7fc      	b.n	2a598 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2a59e:	2004      	movs	r0, #4
   2a5a0:	e7fa      	b.n	2a598 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2a5a2:	200e      	movs	r0, #14
   2a5a4:	e7f8      	b.n	2a598 <att_mtu_req+0x52>

0002a5a6 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2a5a6:	898a      	ldrh	r2, [r1, #12]
   2a5a8:	6889      	ldr	r1, [r1, #8]
   2a5aa:	2300      	movs	r3, #0
   2a5ac:	f7ef b82a 	b.w	19604 <att_handle_rsp>

0002a5b0 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   2a5b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   2a5b4:	b570      	push	{r4, r5, r6, lr}
   2a5b6:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2a5b8:	1f06      	subs	r6, r0, #4
	if (!att_chan->att) {
   2a5ba:	2b00      	cmp	r3, #0
   2a5bc:	d039      	beq.n	2a632 <bt_att_encrypt_change+0x82>
	if (hci_status) {
   2a5be:	b171      	cbz	r1, 2a5de <bt_att_encrypt_change+0x2e>
		if (att_chan->req && att_chan->req->retrying) {
   2a5c0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2a5c4:	2b00      	cmp	r3, #0
   2a5c6:	d034      	beq.n	2a632 <bt_att_encrypt_change+0x82>
   2a5c8:	7c1b      	ldrb	r3, [r3, #16]
   2a5ca:	07da      	lsls	r2, r3, #31
   2a5cc:	d531      	bpl.n	2a632 <bt_att_encrypt_change+0x82>
		return BT_ATT_ERR_AUTHENTICATION;
   2a5ce:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   2a5d0:	2200      	movs	r2, #0
   2a5d2:	4630      	mov	r0, r6
   2a5d4:	4611      	mov	r1, r2
}
   2a5d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2a5da:	f7ef b813 	b.w	19604 <att_handle_rsp>
	struct bt_conn *conn = le_chan->chan.conn;
   2a5de:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   2a5e0:	4628      	mov	r0, r5
   2a5e2:	f7f0 fbf9 	bl	1add8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2a5e6:	7a6b      	ldrb	r3, [r5, #9]
   2a5e8:	2b01      	cmp	r3, #1
   2a5ea:	d022      	beq.n	2a632 <bt_att_encrypt_change+0x82>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2a5ec:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   2a5f0:	b1fd      	cbz	r5, 2a632 <bt_att_encrypt_change+0x82>
   2a5f2:	7c2b      	ldrb	r3, [r5, #16]
   2a5f4:	07db      	lsls	r3, r3, #31
   2a5f6:	d51c      	bpl.n	2a632 <bt_att_encrypt_change+0x82>
	if (!req->encode) {
   2a5f8:	68eb      	ldr	r3, [r5, #12]
   2a5fa:	2b00      	cmp	r3, #0
   2a5fc:	d0e7      	beq.n	2a5ce <bt_att_encrypt_change+0x1e>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2a5fe:	696a      	ldr	r2, [r5, #20]
   2a600:	7c69      	ldrb	r1, [r5, #17]
   2a602:	4630      	mov	r0, r6
   2a604:	f7ee fbbe 	bl	18d84 <bt_att_chan_create_pdu>
	if (!buf) {
   2a608:	4604      	mov	r4, r0
   2a60a:	b150      	cbz	r0, 2a622 <bt_att_encrypt_change+0x72>
	if (req->encode(buf, req->len, req->user_data)) {
   2a60c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2a610:	68eb      	ldr	r3, [r5, #12]
   2a612:	4798      	blx	r3
   2a614:	b138      	cbz	r0, 2a626 <bt_att_encrypt_change+0x76>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2a616:	6960      	ldr	r0, [r4, #20]
   2a618:	f7ee f904 	bl	18824 <tx_meta_data_free>
		net_buf_unref(buf);
   2a61c:	4620      	mov	r0, r4
   2a61e:	f7f2 fc4b 	bl	1ceb8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2a622:	230e      	movs	r3, #14
   2a624:	e7d4      	b.n	2a5d0 <bt_att_encrypt_change+0x20>
	if (chan_send(att_chan, buf)) {
   2a626:	4621      	mov	r1, r4
   2a628:	4630      	mov	r0, r6
   2a62a:	f7ee fa35 	bl	18a98 <chan_send>
   2a62e:	2800      	cmp	r0, #0
   2a630:	d1f1      	bne.n	2a616 <bt_att_encrypt_change+0x66>
}
   2a632:	bd70      	pop	{r4, r5, r6, pc}

0002a634 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2a634:	2001      	movs	r0, #1
   2a636:	4770      	bx	lr

0002a638 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2a638:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2a63a:	f7ee f8b7 	bl	187ac <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2a63e:	b198      	cbz	r0, 2a668 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   2a640:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2a642:	b18b      	cbz	r3, 2a668 <bt_att_clear_out_of_sync_sent+0x30>
   2a644:	f3bf 8f5b 	dmb	ish
   2a648:	3bf0      	subs	r3, #240	; 0xf0
   2a64a:	f103 0298 	add.w	r2, r3, #152	; 0x98
   2a64e:	e852 1f00 	ldrex	r1, [r2]
   2a652:	f021 0120 	bic.w	r1, r1, #32
   2a656:	e842 1000 	strex	r0, r1, [r2]
   2a65a:	2800      	cmp	r0, #0
   2a65c:	d1f7      	bne.n	2a64e <bt_att_clear_out_of_sync_sent+0x16>
   2a65e:	f3bf 8f5b 	dmb	ish
	return node->next;
   2a662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2a666:	e7ec      	b.n	2a642 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2a668:	bd08      	pop	{r3, pc}

0002a66a <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2a66a:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2a66c:	2104      	movs	r1, #4
   2a66e:	f7ff fb61 	bl	29d34 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2a672:	b128      	cbz	r0, 2a680 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2a674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2a678:	2105      	movs	r1, #5
   2a67a:	3094      	adds	r0, #148	; 0x94
   2a67c:	f7ff bbce 	b.w	29e1c <atomic_test_bit>
}
   2a680:	bd08      	pop	{r3, pc}

0002a682 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2a682:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   2a684:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2a688:	2201      	movs	r2, #1
   2a68a:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2a68c:	7403      	strb	r3, [r0, #16]
}
   2a68e:	4770      	bx	lr

0002a690 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2a690:	6010      	str	r0, [r2, #0]
}
   2a692:	2000      	movs	r0, #0
   2a694:	4770      	bx	lr

0002a696 <gatt_ccc_changed>:
{
   2a696:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2a698:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2a69a:	895a      	ldrh	r2, [r3, #10]
   2a69c:	428a      	cmp	r2, r1
   2a69e:	d003      	beq.n	2a6a8 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2a6a0:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2a6a2:	68db      	ldr	r3, [r3, #12]
   2a6a4:	b103      	cbz	r3, 2a6a8 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2a6a6:	4718      	bx	r3
}
   2a6a8:	4770      	bx	lr

0002a6aa <gatt_indicate_rsp>:
{
   2a6aa:	b510      	push	{r4, lr}
   2a6ac:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2a6ae:	68a3      	ldr	r3, [r4, #8]
{
   2a6b0:	460a      	mov	r2, r1
	if (params->func) {
   2a6b2:	b10b      	cbz	r3, 2a6b8 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2a6b4:	4621      	mov	r1, r4
   2a6b6:	4798      	blx	r3
	params->_ref--;
   2a6b8:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2a6ba:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2a6bc:	3b01      	subs	r3, #1
   2a6be:	b2db      	uxtb	r3, r3
   2a6c0:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2a6c2:	b122      	cbz	r2, 2a6ce <gatt_indicate_rsp+0x24>
   2a6c4:	b91b      	cbnz	r3, 2a6ce <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2a6c6:	4620      	mov	r0, r4
}
   2a6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2a6cc:	4710      	bx	r2
}
   2a6ce:	bd10      	pop	{r4, pc}

0002a6d0 <match_uuid>:
	data->attr = attr;
   2a6d0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2a6d2:	8091      	strh	r1, [r2, #4]
}
   2a6d4:	2000      	movs	r0, #0
   2a6d6:	4770      	bx	lr

0002a6d8 <ccc_set_cb>:
}
   2a6d8:	2000      	movs	r0, #0
   2a6da:	4770      	bx	lr

0002a6dc <gen_hash_m>:
{
   2a6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2a6de:	6807      	ldr	r7, [r0, #0]
   2a6e0:	783d      	ldrb	r5, [r7, #0]
{
   2a6e2:	b089      	sub	sp, #36	; 0x24
   2a6e4:	4606      	mov	r6, r0
   2a6e6:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2a6e8:	b10d      	cbz	r5, 2a6ee <gen_hash_m+0x12>
	switch (u16->val) {
   2a6ea:	2501      	movs	r5, #1
   2a6ec:	e014      	b.n	2a718 <gen_hash_m+0x3c>
   2a6ee:	887b      	ldrh	r3, [r7, #2]
   2a6f0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2a6f4:	d004      	beq.n	2a700 <gen_hash_m+0x24>
   2a6f6:	d812      	bhi.n	2a71e <gen_hash_m+0x42>
   2a6f8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2a6fc:	2b03      	cmp	r3, #3
   2a6fe:	d8f4      	bhi.n	2a6ea <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2a700:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a704:	2202      	movs	r2, #2
   2a706:	f10d 010a 	add.w	r1, sp, #10
   2a70a:	4620      	mov	r0, r4
   2a70c:	f7fe fd43 	bl	29196 <tc_cmac_update>
   2a710:	b9e0      	cbnz	r0, 2a74c <gen_hash_m+0x70>
			state->err = -EINVAL;
   2a712:	f06f 0315 	mvn.w	r3, #21
   2a716:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2a718:	4628      	mov	r0, r5
   2a71a:	b009      	add	sp, #36	; 0x24
   2a71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2a71e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2a722:	33ff      	adds	r3, #255	; 0xff
   2a724:	b29b      	uxth	r3, r3
   2a726:	2b04      	cmp	r3, #4
   2a728:	d8df      	bhi.n	2a6ea <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2a72a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a72e:	2202      	movs	r2, #2
   2a730:	f10d 010a 	add.w	r1, sp, #10
   2a734:	4620      	mov	r0, r4
   2a736:	f7fe fd2e 	bl	29196 <tc_cmac_update>
   2a73a:	2800      	cmp	r0, #0
   2a73c:	d0e9      	beq.n	2a712 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2a73e:	887b      	ldrh	r3, [r7, #2]
   2a740:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a744:	2202      	movs	r2, #2
   2a746:	f10d 010a 	add.w	r1, sp, #10
   2a74a:	e016      	b.n	2a77a <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   2a74c:	887b      	ldrh	r3, [r7, #2]
   2a74e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a752:	2202      	movs	r2, #2
   2a754:	f10d 010a 	add.w	r1, sp, #10
   2a758:	4620      	mov	r0, r4
   2a75a:	f7fe fd1c 	bl	29196 <tc_cmac_update>
   2a75e:	2800      	cmp	r0, #0
   2a760:	d0d7      	beq.n	2a712 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2a762:	2000      	movs	r0, #0
   2a764:	aa03      	add	r2, sp, #12
   2a766:	6877      	ldr	r7, [r6, #4]
   2a768:	9000      	str	r0, [sp, #0]
   2a76a:	2313      	movs	r3, #19
   2a76c:	4631      	mov	r1, r6
   2a76e:	47b8      	blx	r7
		if (len < 0) {
   2a770:	1e02      	subs	r2, r0, #0
   2a772:	da01      	bge.n	2a778 <gen_hash_m+0x9c>
			state->err = len;
   2a774:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2a776:	e7cf      	b.n	2a718 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2a778:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2a77a:	4620      	mov	r0, r4
   2a77c:	f7fe fd0b 	bl	29196 <tc_cmac_update>
   2a780:	2800      	cmp	r0, #0
   2a782:	d1b2      	bne.n	2a6ea <gen_hash_m+0xe>
   2a784:	e7c5      	b.n	2a712 <gen_hash_m+0x36>

0002a786 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a786:	f3bf 8f5b 	dmb	ish
   2a78a:	6800      	ldr	r0, [r0, #0]
   2a78c:	f3bf 8f5b 	dmb	ish
}
   2a790:	4770      	bx	lr

0002a792 <atomic_or>:
{
   2a792:	4603      	mov	r3, r0
}
   2a794:	f3bf 8f5b 	dmb	ish
   2a798:	e853 0f00 	ldrex	r0, [r3]
   2a79c:	ea40 0201 	orr.w	r2, r0, r1
   2a7a0:	e843 2c00 	strex	ip, r2, [r3]
   2a7a4:	f1bc 0f00 	cmp.w	ip, #0
   2a7a8:	d1f6      	bne.n	2a798 <atomic_or+0x6>
   2a7aa:	f3bf 8f5b 	dmb	ish
   2a7ae:	4770      	bx	lr

0002a7b0 <atomic_and>:
{
   2a7b0:	4603      	mov	r3, r0
}
   2a7b2:	f3bf 8f5b 	dmb	ish
   2a7b6:	e853 0f00 	ldrex	r0, [r3]
   2a7ba:	ea00 0201 	and.w	r2, r0, r1
   2a7be:	e843 2c00 	strex	ip, r2, [r3]
   2a7c2:	f1bc 0f00 	cmp.w	ip, #0
   2a7c6:	d1f6      	bne.n	2a7b6 <atomic_and+0x6>
   2a7c8:	f3bf 8f5b 	dmb	ish
   2a7cc:	4770      	bx	lr

0002a7ce <bt_addr_le_copy>:
   2a7ce:	680b      	ldr	r3, [r1, #0]
   2a7d0:	6003      	str	r3, [r0, #0]
   2a7d2:	888b      	ldrh	r3, [r1, #4]
   2a7d4:	8083      	strh	r3, [r0, #4]
   2a7d6:	798b      	ldrb	r3, [r1, #6]
   2a7d8:	7183      	strb	r3, [r0, #6]
}
   2a7da:	4770      	bx	lr

0002a7dc <clear_ccc_cfg>:
{
   2a7dc:	b513      	push	{r0, r1, r4, lr}
   2a7de:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2a7e0:	2400      	movs	r4, #0
   2a7e2:	4669      	mov	r1, sp
   2a7e4:	3001      	adds	r0, #1
   2a7e6:	9400      	str	r4, [sp, #0]
   2a7e8:	f8cd 4003 	str.w	r4, [sp, #3]
   2a7ec:	f7ff ffef 	bl	2a7ce <bt_addr_le_copy>
	cfg->id = 0U;
   2a7f0:	7014      	strb	r4, [r2, #0]
	cfg->value = 0U;
   2a7f2:	8114      	strh	r4, [r2, #8]
}
   2a7f4:	b002      	add	sp, #8
   2a7f6:	bd10      	pop	{r4, pc}

0002a7f8 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2a7f8:	2300      	movs	r3, #0
   2a7fa:	6003      	str	r3, [r0, #0]
   2a7fc:	6043      	str	r3, [r0, #4]
   2a7fe:	6083      	str	r3, [r0, #8]
}
   2a800:	4770      	bx	lr

0002a802 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2a802:	b538      	push	{r3, r4, r5, lr}
   2a804:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   2a808:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2a80a:	460c      	mov	r4, r1
   2a80c:	4611      	mov	r1, r2
	if (offset > value_len) {
   2a80e:	d30a      	bcc.n	2a826 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   2a810:	1aad      	subs	r5, r5, r2
   2a812:	42a5      	cmp	r5, r4
   2a814:	bfa8      	it	ge
   2a816:	4625      	movge	r5, r4
   2a818:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a81a:	462a      	mov	r2, r5
   2a81c:	4419      	add	r1, r3
   2a81e:	f001 fc96 	bl	2c14e <memcpy>
}
   2a822:	4628      	mov	r0, r5
   2a824:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a826:	f06f 0506 	mvn.w	r5, #6
   2a82a:	e7fa      	b.n	2a822 <bt_gatt_attr_read.constprop.0+0x20>

0002a82c <bt_gatt_attr_read_service>:
{
   2a82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2a82e:	460c      	mov	r4, r1
   2a830:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2a832:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2a834:	781c      	ldrb	r4, [r3, #0]
{
   2a836:	4610      	mov	r0, r2
   2a838:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2a83c:	b13c      	cbz	r4, 2a84e <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2a83e:	2410      	movs	r4, #16
   2a840:	3301      	adds	r3, #1
   2a842:	9406      	str	r4, [sp, #24]
}
   2a844:	b004      	add	sp, #16
   2a846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2a84a:	f7ff bfda 	b.w	2a802 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2a84e:	885b      	ldrh	r3, [r3, #2]
   2a850:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2a854:	2302      	movs	r3, #2
   2a856:	9300      	str	r3, [sp, #0]
   2a858:	f10d 030e 	add.w	r3, sp, #14
   2a85c:	f7ff ffd1 	bl	2a802 <bt_gatt_attr_read.constprop.0>
}
   2a860:	b004      	add	sp, #16
   2a862:	bd10      	pop	{r4, pc}

0002a864 <cf_read>:
{
   2a864:	b530      	push	{r4, r5, lr}
   2a866:	b085      	sub	sp, #20
   2a868:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2a86a:	2300      	movs	r3, #0
{
   2a86c:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2a86e:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2a872:	f7ef f833 	bl	198dc <find_cf_cfg>
	if (cfg) {
   2a876:	b110      	cbz	r0, 2a87e <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2a878:	7a03      	ldrb	r3, [r0, #8]
   2a87a:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2a87e:	2301      	movs	r3, #1
   2a880:	9300      	str	r3, [sp, #0]
   2a882:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2a886:	ab03      	add	r3, sp, #12
   2a888:	4629      	mov	r1, r5
   2a88a:	4620      	mov	r0, r4
   2a88c:	f7ff ffb9 	bl	2a802 <bt_gatt_attr_read.constprop.0>
}
   2a890:	b005      	add	sp, #20
   2a892:	bd30      	pop	{r4, r5, pc}

0002a894 <read_name>:
{
   2a894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a898:	4614      	mov	r4, r2
   2a89a:	461d      	mov	r5, r3
   2a89c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2a8a0:	f7eb ffae 	bl	16800 <bt_get_name>
   2a8a4:	4606      	mov	r6, r0
				 strlen(name));
   2a8a6:	f7e2 fbc4 	bl	d032 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2a8aa:	b280      	uxth	r0, r0
   2a8ac:	9006      	str	r0, [sp, #24]
   2a8ae:	4633      	mov	r3, r6
   2a8b0:	463a      	mov	r2, r7
   2a8b2:	4629      	mov	r1, r5
   2a8b4:	4620      	mov	r0, r4
}
   2a8b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2a8ba:	f7ff bfa2 	b.w	2a802 <bt_gatt_attr_read.constprop.0>

0002a8be <read_appearance>:
{
   2a8be:	b530      	push	{r4, r5, lr}
   2a8c0:	b085      	sub	sp, #20
   2a8c2:	4614      	mov	r4, r2
   2a8c4:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2a8c6:	f7fe fef4 	bl	296b2 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2a8ca:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2a8cc:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2a8d0:	9300      	str	r3, [sp, #0]
   2a8d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2a8d6:	f10d 030e 	add.w	r3, sp, #14
   2a8da:	4629      	mov	r1, r5
   2a8dc:	4620      	mov	r0, r4
   2a8de:	f7ff ff90 	bl	2a802 <bt_gatt_attr_read.constprop.0>
}
   2a8e2:	b005      	add	sp, #20
   2a8e4:	bd30      	pop	{r4, r5, pc}

0002a8e6 <read_ppcp>:
{
   2a8e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2a8e8:	4619      	mov	r1, r3
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2a8ea:	2318      	movs	r3, #24
   2a8ec:	f8ad 3008 	strh.w	r3, [sp, #8]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2a8f0:	2328      	movs	r3, #40	; 0x28
   2a8f2:	f8ad 300a 	strh.w	r3, [sp, #10]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2a8f6:	2300      	movs	r3, #0
   2a8f8:	f8ad 300c 	strh.w	r3, [sp, #12]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2a8fc:	232a      	movs	r3, #42	; 0x2a
   2a8fe:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2a902:	2308      	movs	r3, #8
   2a904:	9300      	str	r3, [sp, #0]
{
   2a906:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2a908:	446b      	add	r3, sp
   2a90a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2a90e:	f7ff ff78 	bl	2a802 <bt_gatt_attr_read.constprop.0>
}
   2a912:	b005      	add	sp, #20
   2a914:	f85d fb04 	ldr.w	pc, [sp], #4

0002a918 <clear_cf_cfg>:
{
   2a918:	b513      	push	{r0, r1, r4, lr}
   2a91a:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2a91c:	2400      	movs	r4, #0
   2a91e:	4669      	mov	r1, sp
   2a920:	3001      	adds	r0, #1
   2a922:	9400      	str	r4, [sp, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a924:	320c      	adds	r2, #12
   2a926:	f8cd 4003 	str.w	r4, [sp, #3]
   2a92a:	f7ff ff50 	bl	2a7ce <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   2a92e:	f802 4c04 	strb.w	r4, [r2, #-4]
   2a932:	f3bf 8f5b 	dmb	ish
   2a936:	e852 3f00 	ldrex	r3, [r2]
   2a93a:	e842 4100 	strex	r1, r4, [r2]
   2a93e:	2900      	cmp	r1, #0
   2a940:	d1f9      	bne.n	2a936 <clear_cf_cfg+0x1e>
   2a942:	f3bf 8f5b 	dmb	ish
}
   2a946:	b002      	add	sp, #8
   2a948:	bd10      	pop	{r4, pc}

0002a94a <ccc_find_cfg>:
{
   2a94a:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2a94c:	7803      	ldrb	r3, [r0, #0]
   2a94e:	4293      	cmp	r3, r2
{
   2a950:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2a952:	d001      	beq.n	2a958 <ccc_find_cfg+0xe>
	return NULL;
   2a954:	2000      	movs	r0, #0
}
   2a956:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   2a958:	2207      	movs	r2, #7
   2a95a:	3001      	adds	r0, #1
   2a95c:	f001 fbe7 	bl	2c12e <memcmp>
		if (id == ccc->cfg[i].id &&
   2a960:	2800      	cmp	r0, #0
   2a962:	d1f7      	bne.n	2a954 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   2a964:	4620      	mov	r0, r4
   2a966:	e7f6      	b.n	2a956 <ccc_find_cfg+0xc>

0002a968 <find_ccc_cfg>:
{
   2a968:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a96a:	460c      	mov	r4, r1
						    &cfg->peer)) {
   2a96c:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2a96e:	b148      	cbz	r0, 2a984 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2a970:	7809      	ldrb	r1, [r1, #0]
   2a972:	462a      	mov	r2, r5
   2a974:	f7ff f931 	bl	29bda <bt_conn_is_peer_addr_le>
	return NULL;
   2a978:	2800      	cmp	r0, #0
   2a97a:	bf08      	it	eq
   2a97c:	2400      	moveq	r4, #0
}
   2a97e:	4620      	mov	r0, r4
   2a980:	b003      	add	sp, #12
   2a982:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2a984:	9000      	str	r0, [sp, #0]
   2a986:	2207      	movs	r2, #7
   2a988:	f8cd 0003 	str.w	r0, [sp, #3]
   2a98c:	4669      	mov	r1, sp
   2a98e:	4628      	mov	r0, r5
   2a990:	f001 fbcd 	bl	2c12e <memcmp>
	return NULL;
   2a994:	2800      	cmp	r0, #0
   2a996:	bf18      	it	ne
   2a998:	2400      	movne	r4, #0
   2a99a:	e7f0      	b.n	2a97e <find_ccc_cfg+0x16>

0002a99c <bt_gatt_attr_read_ccc>:
{
   2a99c:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2a99e:	68c9      	ldr	r1, [r1, #12]
{
   2a9a0:	b085      	sub	sp, #20
   2a9a2:	4614      	mov	r4, r2
   2a9a4:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2a9a6:	f7ff ffdf 	bl	2a968 <find_ccc_cfg>
	if (cfg) {
   2a9aa:	b100      	cbz	r0, 2a9ae <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2a9ac:	8900      	ldrh	r0, [r0, #8]
   2a9ae:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2a9b2:	2302      	movs	r3, #2
   2a9b4:	9300      	str	r3, [sp, #0]
   2a9b6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2a9ba:	f10d 030e 	add.w	r3, sp, #14
   2a9be:	4629      	mov	r1, r5
   2a9c0:	4620      	mov	r0, r4
   2a9c2:	f7ff ff1e 	bl	2a802 <bt_gatt_attr_read.constprop.0>
}
   2a9c6:	b005      	add	sp, #20
   2a9c8:	bd30      	pop	{r4, r5, pc}

0002a9ca <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2a9ca:	2a02      	cmp	r2, #2
{
   2a9cc:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2a9ce:	d108      	bne.n	2a9e2 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2a9d0:	2300      	movs	r3, #0
   2a9d2:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2a9d6:	461a      	mov	r2, r3
   2a9d8:	7a00      	ldrb	r0, [r0, #8]
   2a9da:	f7ef f9dd 	bl	19d98 <sc_save>
}
   2a9de:	2002      	movs	r0, #2
   2a9e0:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2a9e2:	f7ef fa41 	bl	19e68 <sc_clear>
   2a9e6:	e7fa      	b.n	2a9de <sc_ccc_cfg_write+0x14>

0002a9e8 <sc_restore_rsp>:
{
   2a9e8:	b538      	push	{r3, r4, r5, lr}
   2a9ea:	4604      	mov	r4, r0
   2a9ec:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2a9ee:	f7ff fe21 	bl	2a634 <bt_att_fixed_chan_only>
   2a9f2:	b150      	cbz	r0, 2aa0a <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2a9f4:	4620      	mov	r0, r4
   2a9f6:	f7ee ff71 	bl	198dc <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2a9fa:	b130      	cbz	r0, 2aa0a <sc_restore_rsp+0x22>
   2a9fc:	7a03      	ldrb	r3, [r0, #8]
   2a9fe:	07db      	lsls	r3, r3, #31
   2aa00:	d503      	bpl.n	2aa0a <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2aa02:	2101      	movs	r1, #1
   2aa04:	300c      	adds	r0, #12
   2aa06:	f7ff fec4 	bl	2a792 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2aa0a:	b955      	cbnz	r5, 2aa22 <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2aa0c:	7a20      	ldrb	r0, [r4, #8]
   2aa0e:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2aa12:	f7ef f99f 	bl	19d54 <find_sc_cfg>
		if (sc_cfg) {
   2aa16:	b120      	cbz	r0, 2aa22 <sc_restore_rsp+0x3a>
   2aa18:	6085      	str	r5, [r0, #8]
}
   2aa1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2aa1e:	f7ee bf7f 	b.w	19920 <sc_store>
}
   2aa22:	bd38      	pop	{r3, r4, r5, pc}

0002aa24 <bt_gatt_attr_value_handle>:
{
   2aa24:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2aa26:	4604      	mov	r4, r0
   2aa28:	b910      	cbnz	r0, 2aa30 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2aa2a:	2000      	movs	r0, #0
}
   2aa2c:	b002      	add	sp, #8
   2aa2e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2aa30:	2300      	movs	r3, #0
   2aa32:	f88d 3004 	strb.w	r3, [sp, #4]
   2aa36:	6800      	ldr	r0, [r0, #0]
   2aa38:	f642 0303 	movw	r3, #10243	; 0x2803
   2aa3c:	a901      	add	r1, sp, #4
   2aa3e:	f8ad 3006 	strh.w	r3, [sp, #6]
   2aa42:	f7fe fcbf 	bl	293c4 <bt_uuid_cmp>
   2aa46:	2800      	cmp	r0, #0
   2aa48:	d1ef      	bne.n	2aa2a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2aa4a:	68e3      	ldr	r3, [r4, #12]
   2aa4c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2aa4e:	2800      	cmp	r0, #0
   2aa50:	d1ec      	bne.n	2aa2c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2aa52:	4620      	mov	r0, r4
   2aa54:	f7ef fb72 	bl	1a13c <bt_gatt_attr_get_handle>
   2aa58:	3001      	adds	r0, #1
   2aa5a:	b280      	uxth	r0, r0
	return handle;
   2aa5c:	e7e6      	b.n	2aa2c <bt_gatt_attr_value_handle+0x8>

0002aa5e <bt_gatt_attr_read_chrc>:
{
   2aa5e:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2aa60:	68cc      	ldr	r4, [r1, #12]
{
   2aa62:	b088      	sub	sp, #32
   2aa64:	4608      	mov	r0, r1
   2aa66:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2aa68:	79a3      	ldrb	r3, [r4, #6]
   2aa6a:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2aa6e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2aa70:	f7ff ffd8 	bl	2aa24 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2aa74:	6824      	ldr	r4, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2aa76:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2aa7a:	7823      	ldrb	r3, [r4, #0]
   2aa7c:	b96b      	cbnz	r3, 2aa9a <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2aa7e:	8863      	ldrh	r3, [r4, #2]
   2aa80:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2aa84:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2aa86:	9300      	str	r3, [sp, #0]
   2aa88:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2aa8c:	ab03      	add	r3, sp, #12
   2aa8e:	4631      	mov	r1, r6
   2aa90:	4628      	mov	r0, r5
   2aa92:	f7ff feb6 	bl	2a802 <bt_gatt_attr_read.constprop.0>
}
   2aa96:	b008      	add	sp, #32
   2aa98:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2aa9a:	1c63      	adds	r3, r4, #1
   2aa9c:	f10d 020f 	add.w	r2, sp, #15
   2aaa0:	3411      	adds	r4, #17
   2aaa2:	f853 1b04 	ldr.w	r1, [r3], #4
   2aaa6:	f842 1b04 	str.w	r1, [r2], #4
   2aaaa:	42a3      	cmp	r3, r4
   2aaac:	d1f9      	bne.n	2aaa2 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2aaae:	2313      	movs	r3, #19
   2aab0:	e7e9      	b.n	2aa86 <bt_gatt_attr_read_chrc+0x28>

0002aab2 <bt_gatt_foreach_attr>:
{
   2aab2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2aab4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2aab8:	2300      	movs	r3, #0
   2aaba:	9300      	str	r3, [sp, #0]
   2aabc:	461a      	mov	r2, r3
   2aabe:	f7ef fb81 	bl	1a1c4 <bt_gatt_foreach_attr_type>
}
   2aac2:	b005      	add	sp, #20
   2aac4:	f85d fb04 	ldr.w	pc, [sp], #4

0002aac8 <bt_gatt_check_perm>:
{
   2aac8:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2aaca:	07d3      	lsls	r3, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2aacc:	8a4c      	ldrh	r4, [r1, #18]
{
   2aace:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   2aad0:	d504      	bpl.n	2aadc <bt_gatt_check_perm+0x14>
   2aad2:	f014 0f95 	tst.w	r4, #149	; 0x95
   2aad6:	d026      	beq.n	2ab26 <bt_gatt_check_perm+0x5e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2aad8:	684b      	ldr	r3, [r1, #4]
   2aada:	b323      	cbz	r3, 2ab26 <bt_gatt_check_perm+0x5e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2aadc:	0790      	lsls	r0, r2, #30
   2aade:	d504      	bpl.n	2aaea <bt_gatt_check_perm+0x22>
   2aae0:	f414 7f95 	tst.w	r4, #298	; 0x12a
   2aae4:	d021      	beq.n	2ab2a <bt_gatt_check_perm+0x62>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2aae6:	688b      	ldr	r3, [r1, #8]
   2aae8:	b1fb      	cbz	r3, 2ab2a <bt_gatt_check_perm+0x62>
	mask &= attr->perm;
   2aaea:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2aaec:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2aaf0:	d007      	beq.n	2ab02 <bt_gatt_check_perm+0x3a>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2aaf2:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2aaf6:	b90b      	cbnz	r3, 2aafc <bt_gatt_check_perm+0x34>
			return BT_ATT_ERR_AUTHENTICATION;
   2aaf8:	2005      	movs	r0, #5
}
   2aafa:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2aafc:	7b5b      	ldrb	r3, [r3, #13]
   2aafe:	06db      	lsls	r3, r3, #27
   2ab00:	d5fa      	bpl.n	2aaf8 <bt_gatt_check_perm+0x30>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2ab02:	f014 0f30 	tst.w	r4, #48	; 0x30
   2ab06:	d108      	bne.n	2ab1a <bt_gatt_check_perm+0x52>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2ab08:	f014 000c 	ands.w	r0, r4, #12
   2ab0c:	d0f5      	beq.n	2aafa <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2ab0e:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2ab10:	2b00      	cmp	r3, #0
   2ab12:	bf14      	ite	ne
   2ab14:	2000      	movne	r0, #0
   2ab16:	200f      	moveq	r0, #15
   2ab18:	e7ef      	b.n	2aafa <bt_gatt_check_perm+0x32>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2ab1a:	4628      	mov	r0, r5
   2ab1c:	f7ff f85b 	bl	29bd6 <bt_conn_get_security>
   2ab20:	2802      	cmp	r0, #2
   2ab22:	d8f1      	bhi.n	2ab08 <bt_gatt_check_perm+0x40>
   2ab24:	e7e8      	b.n	2aaf8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2ab26:	2002      	movs	r0, #2
   2ab28:	e7e7      	b.n	2aafa <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2ab2a:	2003      	movs	r0, #3
   2ab2c:	e7e5      	b.n	2aafa <bt_gatt_check_perm+0x32>

0002ab2e <bt_gatt_change_aware>:
{
   2ab2e:	b570      	push	{r4, r5, r6, lr}
   2ab30:	4606      	mov	r6, r0
   2ab32:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2ab34:	f7ee fed2 	bl	198dc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2ab38:	b910      	cbnz	r0, 2ab40 <bt_gatt_change_aware+0x12>
		return true;
   2ab3a:	2401      	movs	r4, #1
}
   2ab3c:	4620      	mov	r0, r4
   2ab3e:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2ab40:	7a03      	ldrb	r3, [r0, #8]
   2ab42:	07da      	lsls	r2, r3, #31
   2ab44:	d5f9      	bpl.n	2ab3a <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2ab46:	f100 050c 	add.w	r5, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ab4a:	4628      	mov	r0, r5
   2ab4c:	f7ff fe1b 	bl	2a786 <atomic_get>
   2ab50:	07c3      	lsls	r3, r0, #31
   2ab52:	d4f2      	bmi.n	2ab3a <bt_gatt_change_aware+0xc>
	if (!req) {
   2ab54:	b90c      	cbnz	r4, 2ab5a <bt_gatt_change_aware+0x2c>
		return false;
   2ab56:	2400      	movs	r4, #0
   2ab58:	e7f0      	b.n	2ab3c <bt_gatt_change_aware+0xe>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ab5a:	f06f 0102 	mvn.w	r1, #2
   2ab5e:	4628      	mov	r0, r5
   2ab60:	f7ff fe26 	bl	2a7b0 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2ab64:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2ab68:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2ab6a:	d006      	beq.n	2ab7a <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   2ab6c:	f7ff fd64 	bl	2a638 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2ab70:	2101      	movs	r1, #1
   2ab72:	4628      	mov	r0, r5
   2ab74:	f7ff fe0d 	bl	2a792 <atomic_or>
}
   2ab78:	e7e0      	b.n	2ab3c <bt_gatt_change_aware+0xe>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2ab7a:	f7ff fd5b 	bl	2a634 <bt_att_fixed_chan_only>
   2ab7e:	2800      	cmp	r0, #0
   2ab80:	d0e9      	beq.n	2ab56 <bt_gatt_change_aware+0x28>
   2ab82:	4630      	mov	r0, r6
   2ab84:	f7ff fd71 	bl	2a66a <bt_att_out_of_sync_sent_on_fixed>
   2ab88:	4604      	mov	r4, r0
   2ab8a:	2800      	cmp	r0, #0
   2ab8c:	d0e3      	beq.n	2ab56 <bt_gatt_change_aware+0x28>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ab8e:	f06f 0102 	mvn.w	r1, #2
   2ab92:	4628      	mov	r0, r5
   2ab94:	f7ff fe0c 	bl	2a7b0 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2ab98:	4630      	mov	r0, r6
   2ab9a:	e7e7      	b.n	2ab6c <bt_gatt_change_aware+0x3e>

0002ab9c <ccc_delayed_store>:
{
   2ab9c:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2ab9e:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2aba2:	4605      	mov	r5, r0
		if (!conn) {
   2aba4:	b194      	cbz	r4, 2abcc <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2aba6:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2abaa:	7a20      	ldrb	r0, [r4, #8]
   2abac:	4631      	mov	r1, r6
   2abae:	f7fe fd82 	bl	296b6 <bt_addr_le_is_bonded>
   2abb2:	b158      	cbz	r0, 2abcc <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   2abb4:	2300      	movs	r3, #0
   2abb6:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2abba:	7a20      	ldrb	r0, [r4, #8]
   2abbc:	4631      	mov	r1, r6
   2abbe:	f7f0 f91b 	bl	1adf8 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2abc2:	4620      	mov	r0, r4
}
   2abc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2abc8:	f7ed b810 	b.w	17bec <bt_conn_unref>
}
   2abcc:	bd70      	pop	{r4, r5, r6, pc}

0002abce <smp_pairing_rsp>:
}
   2abce:	2007      	movs	r0, #7
   2abd0:	4770      	bx	lr

0002abd2 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2abd2:	f3bf 8f5b 	dmb	ish
   2abd6:	6800      	ldr	r0, [r0, #0]
   2abd8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2abdc:	4108      	asrs	r0, r1
}
   2abde:	f000 0001 	and.w	r0, r0, #1
   2abe2:	4770      	bx	lr

0002abe4 <update_keys_check>:
{
   2abe4:	b510      	push	{r4, lr}
   2abe6:	4603      	mov	r3, r0
	if (!keys ||
   2abe8:	b1d9      	cbz	r1, 2ac22 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2abea:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2abec:	f010 0f24 	tst.w	r0, #36	; 0x24
   2abf0:	d017      	beq.n	2ac22 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2abf2:	7d1a      	ldrb	r2, [r3, #20]
   2abf4:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2abf6:	7b09      	ldrb	r1, [r1, #12]
   2abf8:	42a2      	cmp	r2, r4
   2abfa:	bf28      	it	cs
   2abfc:	4622      	movcs	r2, r4
   2abfe:	4291      	cmp	r1, r2
   2ac00:	d901      	bls.n	2ac06 <update_keys_check+0x22>
		return false;
   2ac02:	2000      	movs	r0, #0
}
   2ac04:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ac06:	0682      	lsls	r2, r0, #26
   2ac08:	d404      	bmi.n	2ac14 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2ac0a:	7a18      	ldrb	r0, [r3, #8]
   2ac0c:	3800      	subs	r0, #0
   2ac0e:	bf18      	it	ne
   2ac10:	2001      	movne	r0, #1
   2ac12:	e7f7      	b.n	2ac04 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2ac14:	2105      	movs	r1, #5
   2ac16:	1d18      	adds	r0, r3, #4
   2ac18:	f7ff ffdb 	bl	2abd2 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ac1c:	2800      	cmp	r0, #0
   2ac1e:	d1f4      	bne.n	2ac0a <update_keys_check+0x26>
   2ac20:	e7ef      	b.n	2ac02 <update_keys_check+0x1e>
		return true;
   2ac22:	2001      	movs	r0, #1
   2ac24:	e7ee      	b.n	2ac04 <update_keys_check+0x20>

0002ac26 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ac26:	2301      	movs	r3, #1
   2ac28:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ac2a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ac2c:	f3bf 8f5b 	dmb	ish
   2ac30:	e850 2f00 	ldrex	r2, [r0]
   2ac34:	401a      	ands	r2, r3
   2ac36:	e840 2100 	strex	r1, r2, [r0]
   2ac3a:	2900      	cmp	r1, #0
   2ac3c:	d1f8      	bne.n	2ac30 <atomic_clear_bit+0xa>
   2ac3e:	f3bf 8f5b 	dmb	ish
}
   2ac42:	4770      	bx	lr

0002ac44 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ac44:	680b      	ldr	r3, [r1, #0]
   2ac46:	6003      	str	r3, [r0, #0]
   2ac48:	888b      	ldrh	r3, [r1, #4]
   2ac4a:	8083      	strh	r3, [r0, #4]
   2ac4c:	798b      	ldrb	r3, [r1, #6]
   2ac4e:	7183      	strb	r3, [r0, #6]
}
   2ac50:	4770      	bx	lr

0002ac52 <bt_smp_aes_cmac>:
{
   2ac52:	b570      	push	{r4, r5, r6, lr}
   2ac54:	b0c2      	sub	sp, #264	; 0x108
   2ac56:	460d      	mov	r5, r1
   2ac58:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2ac5a:	4601      	mov	r1, r0
   2ac5c:	aa16      	add	r2, sp, #88	; 0x58
   2ac5e:	4668      	mov	r0, sp
{
   2ac60:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2ac62:	f7fe fa6d 	bl	29140 <tc_cmac_setup>
   2ac66:	b150      	cbz	r0, 2ac7e <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2ac68:	4632      	mov	r2, r6
   2ac6a:	4629      	mov	r1, r5
   2ac6c:	4668      	mov	r0, sp
   2ac6e:	f7fe fa92 	bl	29196 <tc_cmac_update>
   2ac72:	b120      	cbz	r0, 2ac7e <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2ac74:	4669      	mov	r1, sp
   2ac76:	4620      	mov	r0, r4
   2ac78:	f7fe faf8 	bl	2926c <tc_cmac_final>
   2ac7c:	b918      	cbnz	r0, 2ac86 <bt_smp_aes_cmac+0x34>
		return -EIO;
   2ac7e:	f06f 0004 	mvn.w	r0, #4
}
   2ac82:	b042      	add	sp, #264	; 0x108
   2ac84:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2ac86:	2000      	movs	r0, #0
   2ac88:	e7fb      	b.n	2ac82 <bt_smp_aes_cmac+0x30>

0002ac8a <smp_security_request>:
   2ac8a:	2007      	movs	r0, #7
   2ac8c:	4770      	bx	lr

0002ac8e <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2ac8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ac90:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2ac92:	2200      	movs	r2, #0
   2ac94:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2ac96:	4604      	mov	r4, r0
   2ac98:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2ac9a:	460a      	mov	r2, r1
   2ac9c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2aca0:	2106      	movs	r1, #6
   2aca2:	f7ff f824 	bl	29cee <bt_l2cap_send_cb>
   2aca6:	b128      	cbz	r0, 2acb4 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2aca8:	4628      	mov	r0, r5
}
   2acaa:	b003      	add	sp, #12
   2acac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2acb0:	f7f2 b902 	b.w	1ceb8 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2acb4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2acb8:	2300      	movs	r3, #0
   2acba:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   2acbe:	b003      	add	sp, #12
   2acc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2acc4:	f7f8 b994 	b.w	22ff0 <k_work_reschedule>

0002acc8 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2acc8:	b510      	push	{r4, lr}
   2acca:	1e43      	subs	r3, r0, #1
   2accc:	f100 0210 	add.w	r2, r0, #16
   2acd0:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2acd2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2acd6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2acda:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2acdc:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2acde:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2ace0:	d1f7      	bne.n	2acd2 <sys_mem_swap.constprop.0+0xa>
	}
}
   2ace2:	bd10      	pop	{r4, pc}

0002ace4 <smp_f6>:
{
   2ace4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ace8:	b097      	sub	sp, #92	; 0x5c
   2acea:	4604      	mov	r4, r0
   2acec:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2acee:	a805      	add	r0, sp, #20
   2acf0:	2210      	movs	r2, #16
{
   2acf2:	461d      	mov	r5, r3
   2acf4:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
   2acf8:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2acfa:	f7f0 f9af 	bl	1b05c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2acfe:	2210      	movs	r2, #16
   2ad00:	4631      	mov	r1, r6
   2ad02:	a809      	add	r0, sp, #36	; 0x24
   2ad04:	f7f0 f9aa 	bl	1b05c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2ad08:	2210      	movs	r2, #16
   2ad0a:	4629      	mov	r1, r5
   2ad0c:	a80d      	add	r0, sp, #52	; 0x34
   2ad0e:	f7f0 f9a5 	bl	1b05c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2ad12:	991e      	ldr	r1, [sp, #120]	; 0x78
   2ad14:	2203      	movs	r2, #3
   2ad16:	a811      	add	r0, sp, #68	; 0x44
   2ad18:	f7f0 f9a0 	bl	1b05c <sys_memcpy_swap>
	m[51] = a1->type;
   2ad1c:	4649      	mov	r1, r9
	memcpy(m + 52, a1->a.val, 6);
   2ad1e:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2ad22:	f811 3b01 	ldrb.w	r3, [r1], #1
   2ad26:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2ad2a:	9012      	str	r0, [sp, #72]	; 0x48
   2ad2c:	888b      	ldrh	r3, [r1, #4]
   2ad2e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2ad32:	2206      	movs	r2, #6
   2ad34:	a812      	add	r0, sp, #72	; 0x48
   2ad36:	f7f0 f991 	bl	1b05c <sys_memcpy_swap>
	m[58] = a2->type;
   2ad3a:	4641      	mov	r1, r8
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2ad3c:	2206      	movs	r2, #6
	m[58] = a2->type;
   2ad3e:	f811 3b01 	ldrb.w	r3, [r1], #1
   2ad42:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2ad46:	f8d8 3001 	ldr.w	r3, [r8, #1]
   2ad4a:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2ad4e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2ad52:	888b      	ldrh	r3, [r1, #4]
   2ad54:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2ad58:	f7f0 f980 	bl	1b05c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2ad5c:	4621      	mov	r1, r4
   2ad5e:	2210      	movs	r2, #16
   2ad60:	a801      	add	r0, sp, #4
   2ad62:	f7f0 f97b 	bl	1b05c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2ad66:	463b      	mov	r3, r7
   2ad68:	2241      	movs	r2, #65	; 0x41
   2ad6a:	a905      	add	r1, sp, #20
   2ad6c:	a801      	add	r0, sp, #4
   2ad6e:	f7ff ff70 	bl	2ac52 <bt_smp_aes_cmac>
	if (err) {
   2ad72:	4604      	mov	r4, r0
   2ad74:	b910      	cbnz	r0, 2ad7c <smp_f6+0x98>
	sys_mem_swap(check, 16);
   2ad76:	4638      	mov	r0, r7
   2ad78:	f7ff ffa6 	bl	2acc8 <sys_mem_swap.constprop.0>
}
   2ad7c:	4620      	mov	r0, r4
   2ad7e:	b017      	add	sp, #92	; 0x5c
   2ad80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002ad84 <smp_f4>:
{
   2ad84:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ad86:	b097      	sub	sp, #92	; 0x5c
   2ad88:	4614      	mov	r4, r2
   2ad8a:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2ad8c:	2220      	movs	r2, #32
   2ad8e:	4601      	mov	r1, r0
   2ad90:	a805      	add	r0, sp, #20
{
   2ad92:	461d      	mov	r5, r3
   2ad94:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2ad96:	f7f0 f961 	bl	1b05c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2ad9a:	2220      	movs	r2, #32
   2ad9c:	4631      	mov	r1, r6
   2ad9e:	a80d      	add	r0, sp, #52	; 0x34
   2ada0:	f7f0 f95c 	bl	1b05c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2ada4:	4621      	mov	r1, r4
   2ada6:	2210      	movs	r2, #16
   2ada8:	a801      	add	r0, sp, #4
	m[64] = z;
   2adaa:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2adae:	f7f0 f955 	bl	1b05c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2adb2:	463b      	mov	r3, r7
   2adb4:	2241      	movs	r2, #65	; 0x41
   2adb6:	a905      	add	r1, sp, #20
   2adb8:	a801      	add	r0, sp, #4
   2adba:	f7ff ff4a 	bl	2ac52 <bt_smp_aes_cmac>
	if (err) {
   2adbe:	4604      	mov	r4, r0
   2adc0:	b910      	cbnz	r0, 2adc8 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   2adc2:	4638      	mov	r0, r7
   2adc4:	f7ff ff80 	bl	2acc8 <sys_mem_swap.constprop.0>
}
   2adc8:	4620      	mov	r0, r4
   2adca:	b017      	add	sp, #92	; 0x5c
   2adcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002adce <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2adce:	2301      	movs	r3, #1
   2add0:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2add2:	f3bf 8f5b 	dmb	ish
   2add6:	e850 2f00 	ldrex	r2, [r0]
   2adda:	431a      	orrs	r2, r3
   2addc:	e840 2100 	strex	r1, r2, [r0]
   2ade0:	2900      	cmp	r1, #0
   2ade2:	d1f8      	bne.n	2add6 <atomic_set_bit+0x8>
   2ade4:	f3bf 8f5b 	dmb	ish
}
   2ade8:	4770      	bx	lr

0002adea <smp_keypress_notif>:
{
   2adea:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2adec:	210e      	movs	r1, #14
   2adee:	f7ff ffee 	bl	2adce <atomic_set_bit>
}
   2adf2:	2000      	movs	r0, #0
   2adf4:	bd08      	pop	{r3, pc}

0002adf6 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2adf6:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2adf8:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2adfa:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2adfc:	4628      	mov	r0, r5
   2adfe:	2104      	movs	r1, #4
   2ae00:	f7ff fee7 	bl	2abd2 <atomic_test_bit>
   2ae04:	b970      	cbnz	r0, 2ae24 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   2ae06:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2ae0a:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   2ae0c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2ae0e:	4608      	mov	r0, r1
   2ae10:	f7fe ff6a 	bl	29ce8 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2ae14:	4604      	mov	r4, r0
   2ae16:	b938      	cbnz	r0, 2ae28 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2ae18:	2104      	movs	r1, #4
   2ae1a:	4628      	mov	r0, r5
   2ae1c:	f7ff ffd7 	bl	2adce <atomic_set_bit>
}
   2ae20:	4620      	mov	r0, r4
   2ae22:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   2ae24:	2200      	movs	r2, #0
   2ae26:	e7f0      	b.n	2ae0a <smp_create_pdu.constprop.0+0x14>
   2ae28:	2101      	movs	r1, #1
   2ae2a:	3008      	adds	r0, #8
   2ae2c:	f7f2 f95a 	bl	1d0e4 <net_buf_simple_add>
	hdr->code = op;
   2ae30:	7006      	strb	r6, [r0, #0]
	return buf;
   2ae32:	e7f5      	b.n	2ae20 <smp_create_pdu.constprop.0+0x2a>

0002ae34 <send_pairing_rsp>:
{
   2ae34:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2ae36:	2102      	movs	r1, #2
{
   2ae38:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2ae3a:	f7ff ffdc 	bl	2adf6 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2ae3e:	4605      	mov	r5, r0
   2ae40:	b180      	cbz	r0, 2ae64 <send_pairing_rsp+0x30>
   2ae42:	2106      	movs	r1, #6
   2ae44:	3008      	adds	r0, #8
   2ae46:	f7f2 f94d 	bl	1d0e4 <net_buf_simple_add>
   2ae4a:	f8d4 3011 	ldr.w	r3, [r4, #17]
   2ae4e:	6003      	str	r3, [r0, #0]
   2ae50:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   2ae54:	8083      	strh	r3, [r0, #4]
	smp_send(smp, rsp_buf, NULL, NULL);
   2ae56:	2200      	movs	r2, #0
   2ae58:	4620      	mov	r0, r4
   2ae5a:	4629      	mov	r1, r5
   2ae5c:	f7ff ff17 	bl	2ac8e <smp_send.constprop.0>
	return 0;
   2ae60:	2000      	movs	r0, #0
}
   2ae62:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ae64:	2008      	movs	r0, #8
   2ae66:	e7fc      	b.n	2ae62 <send_pairing_rsp+0x2e>

0002ae68 <smp_send_pairing_random>:
{
   2ae68:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2ae6a:	2104      	movs	r1, #4
{
   2ae6c:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2ae6e:	f7ff ffc2 	bl	2adf6 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2ae72:	4605      	mov	r5, r0
   2ae74:	b1a0      	cbz	r0, 2aea0 <smp_send_pairing_random+0x38>
   2ae76:	2110      	movs	r1, #16
   2ae78:	3008      	adds	r0, #8
   2ae7a:	f7f2 f933 	bl	1d0e4 <net_buf_simple_add>
   2ae7e:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2ae82:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2ae86:	f853 1b04 	ldr.w	r1, [r3], #4
   2ae8a:	f840 1b04 	str.w	r1, [r0], #4
   2ae8e:	4293      	cmp	r3, r2
   2ae90:	d1f9      	bne.n	2ae86 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2ae92:	4620      	mov	r0, r4
   2ae94:	2200      	movs	r2, #0
   2ae96:	4629      	mov	r1, r5
   2ae98:	f7ff fef9 	bl	2ac8e <smp_send.constprop.0>
	return 0;
   2ae9c:	2000      	movs	r0, #0
}
   2ae9e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2aea0:	2008      	movs	r0, #8
   2aea2:	e7fc      	b.n	2ae9e <smp_send_pairing_random+0x36>

0002aea4 <smp_dhkey_check>:
{
   2aea4:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2aea6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2aeaa:	78db      	ldrb	r3, [r3, #3]
   2aeac:	2b01      	cmp	r3, #1
{
   2aeae:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2aeb0:	d119      	bne.n	2aee6 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2aeb2:	688d      	ldr	r5, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2aeb4:	1d06      	adds	r6, r0, #4
   2aeb6:	2110      	movs	r1, #16
   2aeb8:	4630      	mov	r0, r6
   2aeba:	f7ff feb4 	bl	2ac26 <atomic_clear_bit>
   2aebe:	462b      	mov	r3, r5
   2aec0:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2aec4:	f105 0110 	add.w	r1, r5, #16
   2aec8:	f853 0b04 	ldr.w	r0, [r3], #4
   2aecc:	f842 0b04 	str.w	r0, [r2], #4
   2aed0:	428b      	cmp	r3, r1
   2aed2:	d1f9      	bne.n	2aec8 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2aed4:	2107      	movs	r1, #7
   2aed6:	4630      	mov	r0, r6
   2aed8:	f7ff fe7b 	bl	2abd2 <atomic_test_bit>
   2aedc:	b128      	cbz	r0, 2aeea <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2aede:	2109      	movs	r1, #9
   2aee0:	4630      	mov	r0, r6
   2aee2:	f7ff ff74 	bl	2adce <atomic_set_bit>
}
   2aee6:	2000      	movs	r0, #0
   2aee8:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2aeea:	210a      	movs	r1, #10
   2aeec:	4630      	mov	r0, r6
   2aeee:	f7ff fe70 	bl	2abd2 <atomic_test_bit>
   2aef2:	2800      	cmp	r0, #0
   2aef4:	d1f3      	bne.n	2aede <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2aef6:	4620      	mov	r0, r4
}
   2aef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2aefc:	f7f0 bc8c 	b.w	1b818 <compute_and_check_and_send_periph_dhcheck>

0002af00 <smp_signing_info>:
   2af00:	2007      	movs	r0, #7
   2af02:	4770      	bx	lr

0002af04 <atomic_test_and_clear_bit>:
{
   2af04:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2af06:	2301      	movs	r3, #1
   2af08:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2af0c:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2af0e:	f3bf 8f5b 	dmb	ish
   2af12:	e850 3f00 	ldrex	r3, [r0]
   2af16:	ea03 0c02 	and.w	ip, r3, r2
   2af1a:	e840 ce00 	strex	lr, ip, [r0]
   2af1e:	f1be 0f00 	cmp.w	lr, #0
   2af22:	d1f6      	bne.n	2af12 <atomic_test_and_clear_bit+0xe>
   2af24:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2af28:	420b      	tst	r3, r1
}
   2af2a:	bf14      	ite	ne
   2af2c:	2001      	movne	r0, #1
   2af2e:	2000      	moveq	r0, #0
   2af30:	f85d fb04 	ldr.w	pc, [sp], #4

0002af34 <smp_reset>:
{
   2af34:	b538      	push	{r3, r4, r5, lr}
   2af36:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2af38:	1d03      	adds	r3, r0, #4
   2af3a:	2500      	movs	r5, #0
   2af3c:	f3bf 8f5b 	dmb	ish
   2af40:	e853 2f00 	ldrex	r2, [r3]
   2af44:	e843 5100 	strex	r1, r5, [r3]
   2af48:	2900      	cmp	r1, #0
   2af4a:	d1f9      	bne.n	2af40 <smp_reset+0xc>
   2af4c:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2af50:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2af54:	f7f8 f852 	bl	22ffc <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2af58:	7225      	strb	r5, [r4, #8]
   2af5a:	f3bf 8f5b 	dmb	ish
   2af5e:	e854 3f00 	ldrex	r3, [r4]
   2af62:	e844 5200 	strex	r2, r5, [r4]
   2af66:	2a00      	cmp	r2, #0
   2af68:	d1f9      	bne.n	2af5e <smp_reset+0x2a>
   2af6a:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2af6e:	4620      	mov	r0, r4
   2af70:	2101      	movs	r1, #1
}
   2af72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2af76:	f7ff bf2a 	b.w	2adce <atomic_set_bit>

0002af7a <smp_c1>:
{
   2af7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2af7c:	b089      	sub	sp, #36	; 0x24
   2af7e:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   2af82:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2af84:	7830      	ldrb	r0, [r6, #0]
   2af86:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2af8a:	7838      	ldrb	r0, [r7, #0]
   2af8c:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2af90:	6810      	ldr	r0, [r2, #0]
   2af92:	f8cd 0002 	str.w	r0, [sp, #2]
   2af96:	8890      	ldrh	r0, [r2, #4]
   2af98:	7992      	ldrb	r2, [r2, #6]
{
   2af9a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	memcpy(p1 + 2, preq, 7);
   2af9c:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2afa0:	681a      	ldr	r2, [r3, #0]
   2afa2:	f8cd 2009 	str.w	r2, [sp, #9]
   2afa6:	889a      	ldrh	r2, [r3, #4]
   2afa8:	799b      	ldrb	r3, [r3, #6]
	memcpy(p1 + 2, preq, 7);
   2afaa:	f8ad 0006 	strh.w	r0, [sp, #6]
	memcpy(p1 + 9, pres, 7);
   2afae:	f8ad 200d 	strh.w	r2, [sp, #13]
   2afb2:	f88d 300f 	strb.w	r3, [sp, #15]
	while (len--) {
   2afb6:	f101 0c10 	add.w	ip, r1, #16
   2afba:	4620      	mov	r0, r4
   2afbc:	466a      	mov	r2, sp
   2afbe:	458c      	cmp	ip, r1
   2afc0:	d124      	bne.n	2b00c <smp_c1+0x92>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2afc2:	4622      	mov	r2, r4
   2afc4:	4621      	mov	r1, r4
   2afc6:	4628      	mov	r0, r5
   2afc8:	f000 fd59 	bl	2ba7e <bt_encrypt_le>
	if (err) {
   2afcc:	4603      	mov	r3, r0
   2afce:	bb70      	cbnz	r0, 2b02e <smp_c1+0xb4>
	memcpy(p2, ra->a.val, 6);
   2afd0:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2afd4:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2afd8:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2afdc:	f8d7 0001 	ldr.w	r0, [r7, #1]
	memcpy(p2 + 6, ia->a.val, 6);
   2afe0:	f8cd 2016 	str.w	r2, [sp, #22]
   2afe4:	f8b6 2005 	ldrh.w	r2, [r6, #5]
	memcpy(p2, ra->a.val, 6);
   2afe8:	9004      	str	r0, [sp, #16]
	(void)memset(p2 + 12, 0, 4);
   2afea:	9307      	str	r3, [sp, #28]
	memcpy(p2 + 6, ia->a.val, 6);
   2afec:	f8ad 201a 	strh.w	r2, [sp, #26]
	while (len--) {
   2aff0:	f104 0010 	add.w	r0, r4, #16
   2aff4:	4623      	mov	r3, r4
   2aff6:	a904      	add	r1, sp, #16
   2aff8:	4283      	cmp	r3, r0
   2affa:	d110      	bne.n	2b01e <smp_c1+0xa4>
	return bt_encrypt_le(k, enc_data, enc_data);
   2affc:	4622      	mov	r2, r4
   2affe:	4621      	mov	r1, r4
   2b000:	4628      	mov	r0, r5
}
   2b002:	b009      	add	sp, #36	; 0x24
   2b004:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2b008:	f000 bd39 	b.w	2ba7e <bt_encrypt_le>
		*r++ = *p++ ^ *q++;
   2b00c:	f811 3b01 	ldrb.w	r3, [r1], #1
   2b010:	f812 eb01 	ldrb.w	lr, [r2], #1
   2b014:	ea83 030e 	eor.w	r3, r3, lr
   2b018:	f800 3b01 	strb.w	r3, [r0], #1
   2b01c:	e7cf      	b.n	2afbe <smp_c1+0x44>
   2b01e:	f813 2b01 	ldrb.w	r2, [r3], #1
   2b022:	f811 6b01 	ldrb.w	r6, [r1], #1
   2b026:	4072      	eors	r2, r6
   2b028:	f803 2c01 	strb.w	r2, [r3, #-1]
   2b02c:	e7e4      	b.n	2aff8 <smp_c1+0x7e>
}
   2b02e:	b009      	add	sp, #36	; 0x24
   2b030:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b032 <legacy_pairing_confirm>:
{
   2b032:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2b034:	1d07      	adds	r7, r0, #4
{
   2b036:	b085      	sub	sp, #20
   2b038:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2b03a:	210a      	movs	r1, #10
   2b03c:	4638      	mov	r0, r7
   2b03e:	f7ff fdc8 	bl	2abd2 <atomic_test_bit>
   2b042:	bb88      	cbnz	r0, 2b0a8 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2b044:	2104      	movs	r1, #4
   2b046:	4628      	mov	r0, r5
   2b048:	f7ff fec1 	bl	2adce <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2b04c:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2b04e:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2b052:	f7ff fed0 	bl	2adf6 <smp_create_pdu.constprop.0>
	if (!buf) {
   2b056:	4606      	mov	r6, r0
   2b058:	b1c0      	cbz	r0, 2b08c <legacy_pairing_confirm+0x5a>
   2b05a:	2110      	movs	r1, #16
   2b05c:	3008      	adds	r0, #8
   2b05e:	f7f2 f841 	bl	1d0e4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2b062:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   2b066:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2b068:	9002      	str	r0, [sp, #8]
   2b06a:	9301      	str	r3, [sp, #4]
   2b06c:	9400      	str	r4, [sp, #0]
   2b06e:	f105 0310 	add.w	r3, r5, #16
   2b072:	f105 0209 	add.w	r2, r5, #9
   2b076:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2b07a:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2b07e:	f7ff ff7c 	bl	2af7a <smp_c1>
   2b082:	4604      	mov	r4, r0
   2b084:	b120      	cbz	r0, 2b090 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   2b086:	4630      	mov	r0, r6
   2b088:	f7f1 ff16 	bl	1ceb8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2b08c:	2008      	movs	r0, #8
   2b08e:	e009      	b.n	2b0a4 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   2b090:	4602      	mov	r2, r0
   2b092:	4631      	mov	r1, r6
   2b094:	4628      	mov	r0, r5
   2b096:	f7ff fdfa 	bl	2ac8e <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2b09a:	4621      	mov	r1, r4
   2b09c:	4638      	mov	r0, r7
   2b09e:	f7ff fdc2 	bl	2ac26 <atomic_clear_bit>
	return 0;
   2b0a2:	2000      	movs	r0, #0
}
   2b0a4:	b005      	add	sp, #20
   2b0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2b0a8:	2100      	movs	r1, #0
   2b0aa:	4638      	mov	r0, r7
   2b0ac:	f7ff fe8f 	bl	2adce <atomic_set_bit>
   2b0b0:	e7f7      	b.n	2b0a2 <legacy_pairing_confirm+0x70>

0002b0b2 <bt_smp_request_ltk>:
{
   2b0b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b0b6:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2b0ba:	e9cd 2300 	strd	r2, r3, [sp]
   2b0be:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2b0c0:	f7ef fff2 	bl	1b0a8 <smp_chan_get>
	if (!smp) {
   2b0c4:	4605      	mov	r5, r0
   2b0c6:	2800      	cmp	r0, #0
   2b0c8:	f000 8090 	beq.w	2b1ec <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   2b0cc:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2b0d0:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   2b0d2:	f1b9 0f00 	cmp.w	r9, #0
   2b0d6:	d12a      	bne.n	2b12e <bt_smp_request_ltk+0x7c>
   2b0d8:	e9dd 2300 	ldrd	r2, r3, [sp]
   2b0dc:	4313      	orrs	r3, r2
   2b0de:	d126      	bne.n	2b12e <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2b0e0:	2103      	movs	r1, #3
   2b0e2:	4638      	mov	r0, r7
   2b0e4:	f7ff fd75 	bl	2abd2 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2b0e8:	b308      	cbz	r0, 2b12e <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2b0ea:	2101      	movs	r1, #1
   2b0ec:	4638      	mov	r0, r7
   2b0ee:	f7ff fd70 	bl	2abd2 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2b0f2:	4606      	mov	r6, r0
   2b0f4:	b1d8      	cbz	r0, 2b12e <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2b0f6:	7d2c      	ldrb	r4, [r5, #20]
   2b0f8:	7b6b      	ldrb	r3, [r5, #13]
   2b0fa:	429c      	cmp	r4, r3
   2b0fc:	bf28      	it	cs
   2b0fe:	461c      	movcs	r4, r3
   2b100:	4622      	mov	r2, r4
   2b102:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2b106:	4640      	mov	r0, r8
   2b108:	f001 f821 	bl	2c14e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2b10c:	2c0f      	cmp	r4, #15
   2b10e:	d806      	bhi.n	2b11e <bt_smp_request_ltk+0x6c>
__ssp_bos_icheck3(memset, void *, int)
   2b110:	f1c4 0210 	rsb	r2, r4, #16
   2b114:	4649      	mov	r1, r9
   2b116:	eb08 0004 	add.w	r0, r8, r4
   2b11a:	f001 f853 	bl	2c1c4 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2b11e:	2101      	movs	r1, #1
   2b120:	4638      	mov	r0, r7
   2b122:	f7ff fe54 	bl	2adce <atomic_set_bit>
}
   2b126:	4630      	mov	r0, r6
   2b128:	b003      	add	sp, #12
   2b12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2b12e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2b132:	b983      	cbnz	r3, 2b156 <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   2b134:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2b138:	7a21      	ldrb	r1, [r4, #8]
   2b13a:	4632      	mov	r2, r6
   2b13c:	2020      	movs	r0, #32
   2b13e:	f7f1 fafd 	bl	1c73c <bt_keys_find>
   2b142:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2b146:	b930      	cbnz	r0, 2b156 <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2b148:	7a21      	ldrb	r1, [r4, #8]
   2b14a:	4632      	mov	r2, r6
   2b14c:	2001      	movs	r0, #1
   2b14e:	f7f1 faf5 	bl	1c73c <bt_keys_find>
   2b152:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2b156:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2b15a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2b15e:	b9ee      	cbnz	r6, 2b19c <bt_smp_request_ltk+0xea>
   2b160:	e9dd 2300 	ldrd	r2, r3, [sp]
   2b164:	4313      	orrs	r3, r2
   2b166:	d119      	bne.n	2b19c <bt_smp_request_ltk+0xea>
   2b168:	b388      	cbz	r0, 2b1ce <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2b16a:	89c3      	ldrh	r3, [r0, #14]
   2b16c:	069a      	lsls	r2, r3, #26
   2b16e:	d516      	bpl.n	2b19e <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2b170:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b172:	f100 011a 	add.w	r1, r0, #26
   2b176:	4622      	mov	r2, r4
   2b178:	4640      	mov	r0, r8
   2b17a:	f000 ffe8 	bl	2c14e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2b17e:	2c0f      	cmp	r4, #15
   2b180:	d806      	bhi.n	2b190 <bt_smp_request_ltk+0xde>
__ssp_bos_icheck3(memset, void *, int)
   2b182:	f1c4 0210 	rsb	r2, r4, #16
   2b186:	4631      	mov	r1, r6
   2b188:	eb08 0004 	add.w	r0, r8, r4
   2b18c:	f001 f81a 	bl	2c1c4 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2b190:	2101      	movs	r1, #1
   2b192:	4638      	mov	r0, r7
   2b194:	f7ff fe1b 	bl	2adce <atomic_set_bit>
		return true;
   2b198:	2601      	movs	r6, #1
   2b19a:	e7c4      	b.n	2b126 <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2b19c:	b1b8      	cbz	r0, 2b1ce <bt_smp_request_ltk+0x11c>
   2b19e:	89c3      	ldrh	r3, [r0, #14]
   2b1a0:	07db      	lsls	r3, r3, #31
   2b1a2:	d514      	bpl.n	2b1ce <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2b1a4:	2208      	movs	r2, #8
   2b1a6:	4669      	mov	r1, sp
   2b1a8:	3040      	adds	r0, #64	; 0x40
   2b1aa:	f000 ffc0 	bl	2c12e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2b1ae:	b970      	cbnz	r0, 2b1ce <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2b1b0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2b1b4:	2202      	movs	r2, #2
   2b1b6:	a90a      	add	r1, sp, #40	; 0x28
   2b1b8:	3048      	adds	r0, #72	; 0x48
   2b1ba:	f000 ffb8 	bl	2c12e <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2b1be:	4606      	mov	r6, r0
   2b1c0:	b928      	cbnz	r0, 2b1ce <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   2b1c2:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2b1c6:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b1c8:	314a      	adds	r1, #74	; 0x4a
   2b1ca:	4622      	mov	r2, r4
   2b1cc:	e7d4      	b.n	2b178 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2b1ce:	210f      	movs	r1, #15
   2b1d0:	4638      	mov	r0, r7
   2b1d2:	f7ff fcfe 	bl	2abd2 <atomic_test_bit>
   2b1d6:	b120      	cbz	r0, 2b1e2 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2b1d8:	2202      	movs	r2, #2
   2b1da:	2106      	movs	r1, #6
   2b1dc:	4620      	mov	r0, r4
   2b1de:	f7ec ff49 	bl	18074 <bt_conn_security_changed>
	smp_reset(smp);
   2b1e2:	4628      	mov	r0, r5
   2b1e4:	f7ff fea6 	bl	2af34 <smp_reset>
	return false;
   2b1e8:	2600      	movs	r6, #0
   2b1ea:	e79c      	b.n	2b126 <bt_smp_request_ltk+0x74>
		return false;
   2b1ec:	4606      	mov	r6, r0
   2b1ee:	e79a      	b.n	2b126 <bt_smp_request_ltk+0x74>

0002b1f0 <bt_smp_sign>:
   2b1f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b1f4:	4770      	bx	lr

0002b1f6 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b1f6:	1d03      	adds	r3, r0, #4
{
   2b1f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b1fa:	4605      	mov	r5, r0
   2b1fc:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b1fe:	4618      	mov	r0, r3
   2b200:	2103      	movs	r1, #3
   2b202:	f7ff fce6 	bl	2abd2 <atomic_test_bit>
   2b206:	b1f0      	cbz	r0, 2b246 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   2b208:	4631      	mov	r1, r6
   2b20a:	4628      	mov	r0, r5
   2b20c:	f7f0 fe72 	bl	1bef4 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2b210:	2105      	movs	r1, #5
   2b212:	4628      	mov	r0, r5
   2b214:	f7ff fdef 	bl	2adf6 <smp_create_pdu.constprop.0>
	if (!buf) {
   2b218:	4604      	mov	r4, r0
   2b21a:	b308      	cbz	r0, 2b260 <smp_error+0x6a>
   2b21c:	2101      	movs	r1, #1
   2b21e:	3008      	adds	r0, #8
   2b220:	f7f1 ff60 	bl	1d0e4 <net_buf_simple_add>
	rsp->reason = reason;
   2b224:	7006      	strb	r6, [r0, #0]
   2b226:	2600      	movs	r6, #0
   2b228:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   2b22c:	9600      	str	r6, [sp, #0]
   2b22e:	4633      	mov	r3, r6
   2b230:	4622      	mov	r2, r4
   2b232:	2106      	movs	r1, #6
   2b234:	f7fe fd5b 	bl	29cee <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2b238:	b118      	cbz	r0, 2b242 <smp_error+0x4c>
		net_buf_unref(buf);
   2b23a:	4620      	mov	r0, r4
   2b23c:	f7f1 fe3c 	bl	1ceb8 <net_buf_unref>
	return 0;
   2b240:	4630      	mov	r0, r6
}
   2b242:	b002      	add	sp, #8
   2b244:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2b246:	2101      	movs	r1, #1
   2b248:	4618      	mov	r0, r3
   2b24a:	f7ff fcc2 	bl	2abd2 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b24e:	2800      	cmp	r0, #0
   2b250:	d1da      	bne.n	2b208 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2b252:	210f      	movs	r1, #15
   2b254:	4618      	mov	r0, r3
   2b256:	f7ff fcbc 	bl	2abd2 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2b25a:	2800      	cmp	r0, #0
   2b25c:	d1d4      	bne.n	2b208 <smp_error+0x12>
   2b25e:	e7d7      	b.n	2b210 <smp_error+0x1a>
		return -ENOBUFS;
   2b260:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b264:	e7ed      	b.n	2b242 <smp_error+0x4c>

0002b266 <bt_smp_dhkey_ready>:
{
   2b266:	b570      	push	{r4, r5, r6, lr}
   2b268:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2b26a:	2008      	movs	r0, #8
   2b26c:	f7ef fe88 	bl	1af80 <smp_find>
	if (smp) {
   2b270:	4605      	mov	r5, r0
   2b272:	b1e0      	cbz	r0, 2b2ae <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2b274:	1d06      	adds	r6, r0, #4
   2b276:	2108      	movs	r1, #8
   2b278:	4630      	mov	r0, r6
   2b27a:	f7ff fcd4 	bl	2ac26 <atomic_clear_bit>
	if (!dhkey) {
   2b27e:	b3bc      	cbz	r4, 2b2f0 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2b280:	2107      	movs	r1, #7
   2b282:	f7ff fcd0 	bl	2ac26 <atomic_clear_bit>
   2b286:	4623      	mov	r3, r4
   2b288:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2b28c:	f104 0120 	add.w	r1, r4, #32
   2b290:	f853 0b04 	ldr.w	r0, [r3], #4
   2b294:	f842 0b04 	str.w	r0, [r2], #4
   2b298:	428b      	cmp	r3, r1
   2b29a:	d1f9      	bne.n	2b290 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2b29c:	210a      	movs	r1, #10
   2b29e:	4630      	mov	r0, r6
   2b2a0:	f7ff fc97 	bl	2abd2 <atomic_test_bit>
   2b2a4:	b170      	cbz	r0, 2b2c4 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b2a6:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b2a8:	4630      	mov	r0, r6
   2b2aa:	f7ff fd90 	bl	2adce <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2b2ae:	2007      	movs	r0, #7
   2b2b0:	f7ef fe66 	bl	1af80 <smp_find>
		if (smp) {
   2b2b4:	4604      	mov	r4, r0
   2b2b6:	b1e8      	cbz	r0, 2b2f4 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   2b2b8:	f7ef ff3e 	bl	1b138 <smp_dhkey_generate>
			if (err) {
   2b2bc:	4601      	mov	r1, r0
   2b2be:	b1c8      	cbz	r0, 2b2f4 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   2b2c0:	4620      	mov	r0, r4
   2b2c2:	e012      	b.n	2b2ea <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2b2c4:	2110      	movs	r1, #16
   2b2c6:	4630      	mov	r0, r6
   2b2c8:	f7ff fc83 	bl	2abd2 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2b2cc:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2b2ce:	2800      	cmp	r0, #0
   2b2d0:	d1ea      	bne.n	2b2a8 <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2b2d2:	4630      	mov	r0, r6
   2b2d4:	f7ff fc7d 	bl	2abd2 <atomic_test_bit>
   2b2d8:	2800      	cmp	r0, #0
   2b2da:	d0e8      	beq.n	2b2ae <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2b2dc:	4628      	mov	r0, r5
   2b2de:	f7f0 fa9b 	bl	1b818 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2b2e2:	4601      	mov	r1, r0
   2b2e4:	2800      	cmp	r0, #0
   2b2e6:	d0e2      	beq.n	2b2ae <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   2b2e8:	4628      	mov	r0, r5
   2b2ea:	f7ff ff84 	bl	2b1f6 <smp_error>
   2b2ee:	e7de      	b.n	2b2ae <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2b2f0:	210b      	movs	r1, #11
   2b2f2:	e7f9      	b.n	2b2e8 <bt_smp_dhkey_ready+0x82>
}
   2b2f4:	bd70      	pop	{r4, r5, r6, pc}

0002b2f6 <bt_smp_disconnected>:
{
   2b2f6:	b570      	push	{r4, r5, r6, lr}
   2b2f8:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2b2fa:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2b2fe:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b302:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2b304:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   2b308:	f7f7 fe78 	bl	22ffc <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b30c:	2103      	movs	r1, #3
   2b30e:	4620      	mov	r0, r4
   2b310:	f7ff fc5f 	bl	2abd2 <atomic_test_bit>
   2b314:	b1a0      	cbz	r0, 2b340 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2b316:	2108      	movs	r1, #8
   2b318:	4630      	mov	r0, r6
   2b31a:	f7f0 fdeb 	bl	1bef4 <smp_pairing_complete>
	if (keys) {
   2b31e:	b13d      	cbz	r5, 2b330 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2b320:	89eb      	ldrh	r3, [r5, #14]
   2b322:	b113      	cbz	r3, 2b32a <bt_smp_disconnected+0x34>
   2b324:	7b6b      	ldrb	r3, [r5, #13]
   2b326:	079b      	lsls	r3, r3, #30
   2b328:	d502      	bpl.n	2b330 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2b32a:	4628      	mov	r0, r5
   2b32c:	f7f1 fa66 	bl	1c7fc <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2b330:	4630      	mov	r0, r6
   2b332:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
}
   2b336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b33a:	2100      	movs	r1, #0
   2b33c:	f000 bf42 	b.w	2c1c4 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2b340:	2101      	movs	r1, #1
   2b342:	4620      	mov	r0, r4
   2b344:	f7ff fc45 	bl	2abd2 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2b348:	2800      	cmp	r0, #0
   2b34a:	d1e4      	bne.n	2b316 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2b34c:	210f      	movs	r1, #15
   2b34e:	4620      	mov	r0, r4
   2b350:	f7ff fc3f 	bl	2abd2 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2b354:	2800      	cmp	r0, #0
   2b356:	d1de      	bne.n	2b316 <bt_smp_disconnected+0x20>
   2b358:	e7e1      	b.n	2b31e <bt_smp_disconnected+0x28>

0002b35a <id_add>:
	bt_id_add(keys);
   2b35a:	f7eb baf1 	b.w	16940 <bt_id_add>

0002b35e <bt_keys_get_type>:
{
   2b35e:	b570      	push	{r4, r5, r6, lr}
   2b360:	4604      	mov	r4, r0
   2b362:	460d      	mov	r5, r1
   2b364:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2b366:	f7f1 f9e9 	bl	1c73c <bt_keys_find>
	if (keys) {
   2b36a:	b938      	cbnz	r0, 2b37c <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2b36c:	4631      	mov	r1, r6
   2b36e:	4628      	mov	r0, r5
   2b370:	f7f1 f99c 	bl	1c6ac <bt_keys_get_addr>
	if (!keys) {
   2b374:	b110      	cbz	r0, 2b37c <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2b376:	89c3      	ldrh	r3, [r0, #14]
   2b378:	431c      	orrs	r4, r3
   2b37a:	81c4      	strh	r4, [r0, #14]
}
   2b37c:	bd70      	pop	{r4, r5, r6, pc}

0002b37e <bt_keys_add_type>:
	keys->keys |= type;
   2b37e:	89c3      	ldrh	r3, [r0, #14]
   2b380:	4319      	orrs	r1, r3
   2b382:	81c1      	strh	r1, [r0, #14]
}
   2b384:	4770      	bx	lr

0002b386 <fixed_data_unref>:
}
   2b386:	4770      	bx	lr

0002b388 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2b388:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2b38a:	6849      	ldr	r1, [r1, #4]
   2b38c:	6809      	ldr	r1, [r1, #0]
   2b38e:	f7f1 bb55 	b.w	1ca3c <net_buf_alloc_len>

0002b392 <net_buf_simple_pull_le16>:
{
   2b392:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2b394:	6803      	ldr	r3, [r0, #0]
   2b396:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2b398:	2102      	movs	r1, #2
   2b39a:	f7f1 fe69 	bl	1d070 <net_buf_simple_pull>
}
   2b39e:	4620      	mov	r0, r4
   2b3a0:	bd10      	pop	{r4, pc}

0002b3a2 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2b3a2:	6802      	ldr	r2, [r0, #0]
   2b3a4:	6880      	ldr	r0, [r0, #8]
}
   2b3a6:	1a10      	subs	r0, r2, r0
   2b3a8:	4770      	bx	lr

0002b3aa <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2b3aa:	8883      	ldrh	r3, [r0, #4]
   2b3ac:	88c2      	ldrh	r2, [r0, #6]
   2b3ae:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2b3b0:	6803      	ldr	r3, [r0, #0]
   2b3b2:	6880      	ldr	r0, [r0, #8]
   2b3b4:	1a18      	subs	r0, r3, r0
}
   2b3b6:	1a10      	subs	r0, r2, r0
   2b3b8:	4770      	bx	lr

0002b3ba <net_buf_simple_add_mem>:
{
   2b3ba:	b538      	push	{r3, r4, r5, lr}
   2b3bc:	460d      	mov	r5, r1
   2b3be:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2b3c0:	4611      	mov	r1, r2
   2b3c2:	f7f1 fe8f 	bl	1d0e4 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b3c6:	4622      	mov	r2, r4
   2b3c8:	4629      	mov	r1, r5
}
   2b3ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b3ce:	f000 bebe 	b.w	2c14e <memcpy>

0002b3d2 <net_buf_simple_add_u8>:
{
   2b3d2:	b510      	push	{r4, lr}
   2b3d4:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2b3d6:	2101      	movs	r1, #1
   2b3d8:	f7f1 fe84 	bl	1d0e4 <net_buf_simple_add>
	*u8 = val;
   2b3dc:	7004      	strb	r4, [r0, #0]
}
   2b3de:	bd10      	pop	{r4, pc}

0002b3e0 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2b3e0:	f1a0 0308 	sub.w	r3, r0, #8
   2b3e4:	f3bf 8f5b 	dmb	ish
   2b3e8:	e853 2f00 	ldrex	r2, [r3]
   2b3ec:	1c51      	adds	r1, r2, #1
   2b3ee:	e843 1c00 	strex	ip, r1, [r3]
   2b3f2:	f1bc 0f00 	cmp.w	ip, #0
   2b3f6:	d1f7      	bne.n	2b3e8 <adc_context_on_timer_expired+0x8>
   2b3f8:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2b3fc:	b91a      	cbnz	r2, 2b406 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   2b3fe:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   2b402:	f7f1 bf19 	b.w	1d238 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   2b406:	f06f 030f 	mvn.w	r3, #15
   2b40a:	6683      	str	r3, [r0, #104]	; 0x68
}
   2b40c:	4770      	bx	lr

0002b40e <set_on_state>:
	__asm__ volatile(
   2b40e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b412:	f3ef 8211 	mrs	r2, BASEPRI
   2b416:	f383 8812 	msr	BASEPRI_MAX, r3
   2b41a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2b41e:	6803      	ldr	r3, [r0, #0]
   2b420:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2b424:	f043 0302 	orr.w	r3, r3, #2
   2b428:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2b42a:	f382 8811 	msr	BASEPRI, r2
   2b42e:	f3bf 8f6f 	isb	sy
}
   2b432:	4770      	bx	lr

0002b434 <async_start>:
{
   2b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b436:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2b438:	6904      	ldr	r4, [r0, #16]
{
   2b43a:	4605      	mov	r5, r0
   2b43c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2b43e:	f04f 0040 	mov.w	r0, #64	; 0x40
   2b442:	f3ef 8c11 	mrs	ip, BASEPRI
   2b446:	f380 8812 	msr	BASEPRI_MAX, r0
   2b44a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2b44e:	260c      	movs	r6, #12
   2b450:	fb06 4601 	mla	r6, r6, r1, r4
   2b454:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2b456:	f000 0e07 	and.w	lr, r0, #7
   2b45a:	f1be 0f01 	cmp.w	lr, #1
   2b45e:	d110      	bne.n	2b482 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2b460:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
   2b462:	2600      	movs	r6, #0
	__asm__ volatile(
   2b464:	f38c 8811 	msr	BASEPRI, ip
   2b468:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2b46c:	b93e      	cbnz	r6, 2b47e <async_start+0x4a>
	subdata->cb = cb;
   2b46e:	200c      	movs	r0, #12
   2b470:	4341      	muls	r1, r0
   2b472:	440c      	add	r4, r1
	subdata->user_data = user_data;
   2b474:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2b478:	686b      	ldr	r3, [r5, #4]
   2b47a:	585b      	ldr	r3, [r3, r1]
   2b47c:	4798      	blx	r3
}
   2b47e:	4630      	mov	r0, r6
   2b480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2b482:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2b486:	4287      	cmp	r7, r0
   2b488:	bf14      	ite	ne
   2b48a:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   2b48e:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   2b492:	e7e7      	b.n	2b464 <async_start+0x30>

0002b494 <api_start>:
{
   2b494:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2b496:	2480      	movs	r4, #128	; 0x80
   2b498:	9400      	str	r4, [sp, #0]
   2b49a:	f7ff ffcb 	bl	2b434 <async_start>
}
   2b49e:	b002      	add	sp, #8
   2b4a0:	bd10      	pop	{r4, pc}

0002b4a2 <onoff_started_callback>:
	return &data->mgr[type];
   2b4a2:	6900      	ldr	r0, [r0, #16]
   2b4a4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2b4a6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2b4aa:	2100      	movs	r1, #0
   2b4ac:	4710      	bx	r2

0002b4ae <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2b4ae:	2000      	movs	r0, #0
   2b4b0:	f7f4 be98 	b.w	201e4 <nrfx_clock_start>

0002b4b4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2b4b4:	2000      	movs	r0, #0
   2b4b6:	f7f4 beb7 	b.w	20228 <nrfx_clock_stop>

0002b4ba <api_stop>:
	return stop(dev, subsys, CTX_API);
   2b4ba:	2280      	movs	r2, #128	; 0x80
   2b4bc:	f7f2 b8b4 	b.w	1d628 <stop>

0002b4c0 <blocking_start_callback>:
{
   2b4c0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2b4c2:	f7f7 b8d5 	b.w	22670 <z_impl_k_sem_give>

0002b4c6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b4c6:	6843      	ldr	r3, [r0, #4]
   2b4c8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2b4ca:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2b4ce:	600b      	str	r3, [r1, #0]
}
   2b4d0:	2000      	movs	r0, #0
   2b4d2:	4770      	bx	lr

0002b4d4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b4d4:	6843      	ldr	r3, [r0, #4]
   2b4d6:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2b4d8:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2b4dc:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2b4e0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2b4e4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2b4e8:	2000      	movs	r0, #0
   2b4ea:	4770      	bx	lr

0002b4ec <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b4ec:	6843      	ldr	r3, [r0, #4]
   2b4ee:	685b      	ldr	r3, [r3, #4]
}
   2b4f0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2b4f2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2b4f6:	4770      	bx	lr

0002b4f8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b4f8:	6843      	ldr	r3, [r0, #4]
   2b4fa:	685b      	ldr	r3, [r3, #4]
}
   2b4fc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2b4fe:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2b502:	4770      	bx	lr

0002b504 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b504:	6843      	ldr	r3, [r0, #4]
   2b506:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2b508:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2b50c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2b510:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2b512:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2b516:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2b51a:	2000      	movs	r0, #0
   2b51c:	4770      	bx	lr

0002b51e <k_sem_give>:
   2b51e:	f7f7 b8a7 	b.w	22670 <z_impl_k_sem_give>

0002b522 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2b522:	b918      	cbnz	r0, 2b52c <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2b524:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2b528:	f7ff bff9 	b.w	2b51e <k_sem_give>
}
   2b52c:	4770      	bx	lr

0002b52e <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2b52e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b536:	3018      	adds	r0, #24
   2b538:	f7f7 b8d4 	b.w	226e4 <z_impl_k_sem_take>

0002b53c <qspi_trans_lock.isra.0>:
   2b53c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b544:	f7f7 b8ce 	b.w	226e4 <z_impl_k_sem_take>

0002b548 <qspi_nor_write_protection_set>:
{
   2b548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2b54a:	2200      	movs	r2, #0
   2b54c:	4291      	cmp	r1, r2
   2b54e:	bf14      	ite	ne
   2b550:	2304      	movne	r3, #4
   2b552:	2306      	moveq	r3, #6
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2b554:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2b556:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2b55a:	9203      	str	r2, [sp, #12]
   2b55c:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2b560:	f7f2 fc8c 	bl	1de7c <qspi_send_cmd>
		ret = -EIO;
   2b564:	2800      	cmp	r0, #0
}
   2b566:	bf18      	it	ne
   2b568:	f06f 0004 	mvnne.w	r0, #4
   2b56c:	b005      	add	sp, #20
   2b56e:	f85d fb04 	ldr.w	pc, [sp], #4

0002b572 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2b572:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2b574:	23ff      	movs	r3, #255	; 0xff
   2b576:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2b57a:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2b57e:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2b580:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2b582:	2301      	movs	r3, #1
   2b584:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2b588:	2305      	movs	r3, #5
   2b58a:	f88d 300c 	strb.w	r3, [sp, #12]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2b58e:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2b590:	ab01      	add	r3, sp, #4
   2b592:	9204      	str	r2, [sp, #16]
   2b594:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2b596:	f7f2 fc71 	bl	1de7c <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2b59a:	2800      	cmp	r0, #0
   2b59c:	bfa8      	it	ge
   2b59e:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2b5a2:	b007      	add	sp, #28
   2b5a4:	f85d fb04 	ldr.w	pc, [sp], #4

0002b5a8 <is_regular_addr_valid>:
{
   2b5a8:	b538      	push	{r3, r4, r5, lr}
   2b5aa:	4605      	mov	r5, r0
   2b5ac:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2b5ae:	f000 fb6b 	bl	2bc88 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2b5b2:	2d00      	cmp	r5, #0
   2b5b4:	db07      	blt.n	2b5c6 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2b5b6:	42a8      	cmp	r0, r5
   2b5b8:	d905      	bls.n	2b5c6 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2b5ba:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2b5bc:	4284      	cmp	r4, r0
   2b5be:	bf8c      	ite	hi
   2b5c0:	2000      	movhi	r0, #0
   2b5c2:	2001      	movls	r0, #1
}
   2b5c4:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2b5c6:	2000      	movs	r0, #0
   2b5c8:	e7fc      	b.n	2b5c4 <is_regular_addr_valid+0x1c>

0002b5ca <nrf_power_pofcon_set.constprop.0>:
    uint32_t pofcon = p_reg->POFCON;
   2b5ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2b5ce:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2b5d2:	f023 031f 	bic.w	r3, r3, #31
   2b5d6:	4303      	orrs	r3, r0
    pofcon |=
   2b5d8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    p_reg->POFCON = pofcon;
   2b5dc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   2b5e0:	4770      	bx	lr

0002b5e2 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2b5e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b5e6:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   2b5e8:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2b5ea:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   2b5ee:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   2b5f0:	f8c4 8000 	str.w	r8, [r4]
{
   2b5f4:	460d      	mov	r5, r1
   2b5f6:	4616      	mov	r6, r2
	info->index = 0U;
   2b5f8:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   2b5fc:	aa01      	add	r2, sp, #4
   2b5fe:	4669      	mov	r1, sp
   2b600:	4798      	blx	r3

	while (layout_size--) {
   2b602:	e9dd 7c00 	ldrd	r7, ip, [sp]
   2b606:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   2b608:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   2b60c:	4560      	cmp	r0, ip
   2b60e:	d104      	bne.n	2b61a <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2b610:	f06f 0015 	mvn.w	r0, #21
}
   2b614:	b003      	add	sp, #12
   2b616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   2b61a:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   2b61e:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   2b620:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   2b622:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   2b626:	b985      	cbnz	r5, 2b64a <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   2b628:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   2b62a:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   2b62e:	4543      	cmp	r3, r8
   2b630:	bf28      	it	cs
   2b632:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   2b634:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   2b638:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   2b63a:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   2b63c:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   2b63e:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2b640:	f100 0001 	add.w	r0, r0, #1
   2b644:	d9e2      	bls.n	2b60c <flash_get_page_info+0x2a>
			return 0;
   2b646:	2000      	movs	r0, #0
   2b648:	e7e4      	b.n	2b614 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   2b64a:	1aab      	subs	r3, r5, r2
   2b64c:	fbb3 f3f9 	udiv	r3, r3, r9
   2b650:	e7eb      	b.n	2b62a <flash_get_page_info+0x48>

0002b652 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2b652:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2b654:	2200      	movs	r2, #0
   2b656:	f7ff bfc4 	b.w	2b5e2 <flash_get_page_info>

0002b65a <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2b65a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2b65e:	6883      	ldr	r3, [r0, #8]
{
   2b660:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2b662:	691b      	ldr	r3, [r3, #16]
{
   2b664:	4688      	mov	r8, r1
   2b666:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2b668:	a901      	add	r1, sp, #4
   2b66a:	aa02      	add	r2, sp, #8
   2b66c:	4798      	blx	r3
	off_t off = 0;
   2b66e:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2b670:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2b672:	4625      	mov	r5, r4
   2b674:	9b02      	ldr	r3, [sp, #8]
   2b676:	42ab      	cmp	r3, r5
   2b678:	d802      	bhi.n	2b680 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2b67a:	b006      	add	sp, #24
   2b67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2b680:	9f01      	ldr	r7, [sp, #4]
   2b682:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2b686:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2b688:	687b      	ldr	r3, [r7, #4]
   2b68a:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2b68c:	683a      	ldr	r2, [r7, #0]
   2b68e:	42b2      	cmp	r2, r6
   2b690:	eb0a 0306 	add.w	r3, sl, r6
   2b694:	d802      	bhi.n	2b69c <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2b696:	3501      	adds	r5, #1
   2b698:	469a      	mov	sl, r3
   2b69a:	e7eb      	b.n	2b674 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2b69c:	4649      	mov	r1, r9
   2b69e:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   2b6a0:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2b6a2:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2b6a4:	47c0      	blx	r8
   2b6a6:	2800      	cmp	r0, #0
   2b6a8:	d0e7      	beq.n	2b67a <flash_page_foreach+0x20>
			off += page_info.size;
   2b6aa:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2b6ac:	3601      	adds	r6, #1
			off += page_info.size;
   2b6ae:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2b6b0:	e7ec      	b.n	2b68c <flash_page_foreach+0x32>

0002b6b2 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   2b6b2:	6902      	ldr	r2, [r0, #16]
{
   2b6b4:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2b6b6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2b6ba:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2b6be:	2000      	movs	r0, #0
   2b6c0:	4770      	bx	lr

0002b6c2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2b6c2:	6843      	ldr	r3, [r0, #4]
   2b6c4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2b6c6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2b6ca:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2b6ce:	4770      	bx	lr

0002b6d0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2b6d0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2b6d2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2b6d4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b6d6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2b6da:	b150      	cbz	r0, 2b6f2 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   2b6dc:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b6de:	2000      	movs	r0, #0
   2b6e0:	7812      	ldrb	r2, [r2, #0]
   2b6e2:	700a      	strb	r2, [r1, #0]
   2b6e4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2b6e8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b6ec:	2201      	movs	r2, #1
   2b6ee:	601a      	str	r2, [r3, #0]
	return 0;
   2b6f0:	4770      	bx	lr
		return -1;
   2b6f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2b6f6:	4770      	bx	lr

0002b6f8 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2b6f8:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2b6fa:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b6fc:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2b700:	b940      	cbnz	r0, 2b714 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2b702:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2b704:	079b      	lsls	r3, r3, #30
   2b706:	d406      	bmi.n	2b716 <is_tx_ready.isra.0+0x1e>
   2b708:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2b70c:	3800      	subs	r0, #0
   2b70e:	bf18      	it	ne
   2b710:	2001      	movne	r0, #1
   2b712:	4770      	bx	lr
   2b714:	2001      	movs	r0, #1
}
   2b716:	4770      	bx	lr

0002b718 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2b718:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2b71a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2b71c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2b720:	05c9      	lsls	r1, r1, #23
   2b722:	d518      	bpl.n	2b756 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b724:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2b728:	b1a9      	cbz	r1, 2b756 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2b72a:	f04f 0040 	mov.w	r0, #64	; 0x40
   2b72e:	f3ef 8111 	mrs	r1, BASEPRI
   2b732:	f380 8812 	msr	BASEPRI_MAX, r0
   2b736:	f3bf 8f6f 	isb	sy
   2b73a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2b73e:	b130      	cbz	r0, 2b74e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b740:	2000      	movs	r0, #0
   2b742:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   2b746:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b74a:	2001      	movs	r0, #1
   2b74c:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2b74e:	f381 8811 	msr	BASEPRI, r1
   2b752:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2b756:	6852      	ldr	r2, [r2, #4]
   2b758:	06d2      	lsls	r2, r2, #27
   2b75a:	d515      	bpl.n	2b788 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2b75c:	f04f 0140 	mov.w	r1, #64	; 0x40
   2b760:	f3ef 8211 	mrs	r2, BASEPRI
   2b764:	f381 8812 	msr	BASEPRI_MAX, r1
   2b768:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b76c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2b770:	b111      	cbz	r1, 2b778 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2b772:	2100      	movs	r1, #0
   2b774:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2b778:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2b77c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   2b780:	f382 8811 	msr	BASEPRI, r2
   2b784:	f3bf 8f6f 	isb	sy
}
   2b788:	4770      	bx	lr

0002b78a <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2b78a:	b510      	push	{r4, lr}
   2b78c:	2200      	movs	r2, #0
   2b78e:	4604      	mov	r4, r0
   2b790:	2101      	movs	r1, #1
   2b792:	2028      	movs	r0, #40	; 0x28
   2b794:	f7e8 ffa2 	bl	146dc <z_arm_irq_priority_set>
   2b798:	2028      	movs	r0, #40	; 0x28
   2b79a:	f7e8 ff6d 	bl	14678 <arch_irq_enable>
   2b79e:	4620      	mov	r0, r4
   2b7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b7a4:	f7f3 b8b2 	b.w	1e90c <uarte_instance_init.constprop.0>

0002b7a8 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2b7a8:	b510      	push	{r4, lr}
   2b7aa:	2200      	movs	r2, #0
   2b7ac:	4604      	mov	r4, r0
   2b7ae:	2101      	movs	r1, #1
   2b7b0:	2002      	movs	r0, #2
   2b7b2:	f7e8 ff93 	bl	146dc <z_arm_irq_priority_set>
   2b7b6:	2002      	movs	r0, #2
   2b7b8:	f7e8 ff5e 	bl	14678 <arch_irq_enable>
   2b7bc:	4620      	mov	r0, r4
   2b7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b7c2:	f7f3 b8a3 	b.w	1e90c <uarte_instance_init.constprop.0>

0002b7c6 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2b7c6:	2000      	movs	r0, #0
   2b7c8:	4770      	bx	lr

0002b7ca <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2b7ca:	b538      	push	{r3, r4, r5, lr}
   2b7cc:	460c      	mov	r4, r1
   2b7ce:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2b7d0:	f7eb f80a 	bl	167e8 <bt_is_ready>
   2b7d4:	b128      	cbz	r0, 2b7e2 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2b7d6:	4629      	mov	r1, r5
   2b7d8:	4620      	mov	r0, r4
}
   2b7da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2b7de:	f7ea bb43 	b.w	15e68 <bt_hci_le_rand>
}
   2b7e2:	f06f 000a 	mvn.w	r0, #10
   2b7e6:	bd38      	pop	{r3, r4, r5, pc}

0002b7e8 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2b7e8:	2200      	movs	r2, #0
{
   2b7ea:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2b7ec:	4611      	mov	r1, r2
   2b7ee:	4610      	mov	r0, r2
   2b7f0:	f7fa f904 	bl	259fc <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   2b7f4:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   2b7f6:	bf18      	it	ne
   2b7f8:	f06f 0015 	mvnne.w	r0, #21
   2b7fc:	bd08      	pop	{r3, pc}

0002b7fe <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2b7fe:	4770      	bx	lr

0002b800 <sys_clock_cycle_get_32>:
{
   2b800:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2b802:	f7f3 fbbf 	bl	1ef84 <z_nrf_rtc_timer_read>
}
   2b806:	bd08      	pop	{r3, pc}

0002b808 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2b808:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2b80a:	6843      	ldr	r3, [r0, #4]
   2b80c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   2b80e:	7a03      	ldrb	r3, [r0, #8]
   2b810:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   2b814:	3b01      	subs	r3, #1
   2b816:	00db      	lsls	r3, r3, #3
   2b818:	6845      	ldr	r5, [r0, #4]
   2b81a:	6814      	ldr	r4, [r2, #0]
   2b81c:	441d      	add	r5, r3
   2b81e:	42ac      	cmp	r4, r5
   2b820:	d902      	bls.n	2b828 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   2b822:	f06f 0001 	mvn.w	r0, #1
}
   2b826:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2b828:	7965      	ldrb	r5, [r4, #5]
   2b82a:	428d      	cmp	r5, r1
   2b82c:	d002      	beq.n	2b834 <pinctrl_lookup_state+0x2c>
		(*state)++;
   2b82e:	3408      	adds	r4, #8
   2b830:	6014      	str	r4, [r2, #0]
   2b832:	e7f1      	b.n	2b818 <pinctrl_lookup_state+0x10>
			return 0;
   2b834:	2000      	movs	r0, #0
   2b836:	e7f6      	b.n	2b826 <pinctrl_lookup_state+0x1e>

0002b838 <nrf_gpio_pin_clear>:
{
   2b838:	b507      	push	{r0, r1, r2, lr}
   2b83a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b83c:	a801      	add	r0, sp, #4
   2b83e:	f7f3 fd47 	bl	1f2d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2b842:	9a01      	ldr	r2, [sp, #4]
   2b844:	2301      	movs	r3, #1
   2b846:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2b848:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   2b84c:	b003      	add	sp, #12
   2b84e:	f85d fb04 	ldr.w	pc, [sp], #4

0002b852 <nrf_gpio_pin_set>:
{
   2b852:	b507      	push	{r0, r1, r2, lr}
   2b854:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b856:	a801      	add	r0, sp, #4
   2b858:	f7f3 fd3a 	bl	1f2d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2b85c:	9a01      	ldr	r2, [sp, #4]
   2b85e:	2301      	movs	r3, #1
   2b860:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2b862:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   2b866:	b003      	add	sp, #12
   2b868:	f85d fb04 	ldr.w	pc, [sp], #4

0002b86c <nrf_gpio_pin_write>:
    if (value == 0)
   2b86c:	b909      	cbnz	r1, 2b872 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   2b86e:	f7ff bfe3 	b.w	2b838 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2b872:	f7ff bfee 	b.w	2b852 <nrf_gpio_pin_set>

0002b876 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   2b876:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b878:	461c      	mov	r4, r3
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   2b87a:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2b87e:	2b00      	cmp	r3, #0
{
   2b880:	4605      	mov	r5, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   2b882:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b886:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2b888:	bf0b      	itete	eq
   2b88a:	4616      	moveq	r6, r2
   2b88c:	2601      	movne	r6, #1
   2b88e:	460f      	moveq	r7, r1
   2b890:	2700      	movne	r7, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   2b892:	9301      	str	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2b894:	0224      	lsls	r4, r4, #8
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b896:	f7f3 fd1b 	bl	1f2d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2b89a:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2b89c:	f3c5 1281 	ubfx	r2, r5, #6, #2
   2b8a0:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
   2b8a4:	433a      	orrs	r2, r7
    reg->PIN_CNF[pin_number] = cnf;
   2b8a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2b8aa:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2b8ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   2b8b2:	b003      	add	sp, #12
   2b8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b8b6 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2b8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b8ba:	4616      	mov	r6, r2
   2b8bc:	4605      	mov	r5, r0
   2b8be:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2b8c2:	42af      	cmp	r7, r5
   2b8c4:	d102      	bne.n	2b8cc <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   2b8c6:	2000      	movs	r0, #0
}
   2b8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2b8cc:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
   2b8ce:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2b8d0:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   2b8d4:	2b22      	cmp	r3, #34	; 0x22
   2b8d6:	f200 8097 	bhi.w	2ba08 <pinctrl_configure_pins+0x152>
   2b8da:	e8df f003 	tbb	[pc, r3]
   2b8de:	1e12      	.short	0x1e12
   2b8e0:	41302b26 	.word	0x41302b26
   2b8e4:	9595952b 	.word	0x9595952b
   2b8e8:	95554b95 	.word	0x95554b95
   2b8ec:	95959595 	.word	0x95959595
   2b8f0:	95959595 	.word	0x95959595
   2b8f4:	706b665a 	.word	0x706b665a
   2b8f8:	75959595 	.word	0x75959595
   2b8fc:	8b86817c 	.word	0x8b86817c
   2b900:	90          	.byte	0x90
   2b901:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   2b902:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b906:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   2b90a:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_set(pin_number);
   2b90c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2b910:	f7ff ff9f 	bl	2b852 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2b914:	4643      	mov	r3, r8
   2b916:	2201      	movs	r2, #1
   2b918:	e01c      	b.n	2b954 <pinctrl_configure_pins+0x9e>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   2b91a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b91e:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2b922:	4643      	mov	r3, r8
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2b924:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2b926:	2100      	movs	r1, #0
   2b928:	e015      	b.n	2b956 <pinctrl_configure_pins+0xa0>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   2b92a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b92e:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
   2b932:	e7ea      	b.n	2b90a <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
   2b934:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b938:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
   2b93c:	e7f1      	b.n	2b922 <pinctrl_configure_pins+0x6c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   2b93e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b942:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2b946:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
   2b948:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2b94c:	f7ff ff74 	bl	2b838 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2b950:	4643      	mov	r3, r8
   2b952:	2200      	movs	r2, #0
   2b954:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2b956:	6828      	ldr	r0, [r5, #0]
   2b958:	f7ff ff8d 	bl	2b876 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2b95c:	3504      	adds	r5, #4
   2b95e:	e7b0      	b.n	2b8c2 <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   2b960:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b964:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   2b968:	6828      	ldr	r0, [r5, #0]
   2b96a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2b96e:	f7ff ff63 	bl	2b838 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2b972:	e7cf      	b.n	2b914 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   2b974:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b978:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
   2b97c:	f1b8 0f00 	cmp.w	r8, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2b980:	bf14      	ite	ne
   2b982:	4643      	movne	r3, r8
   2b984:	2306      	moveq	r3, #6
   2b986:	e7cd      	b.n	2b924 <pinctrl_configure_pins+0x6e>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   2b988:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b98c:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
   2b990:	e7f4      	b.n	2b97c <pinctrl_configure_pins+0xc6>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   2b992:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b996:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2b99a:	6828      	ldr	r0, [r5, #0]
   2b99c:	f3c0 3140 	ubfx	r1, r0, #13, #1
   2b9a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2b9a4:	f7ff ff62 	bl	2b86c <nrf_gpio_pin_write>
   2b9a8:	e7b4      	b.n	2b914 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   2b9aa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b9ae:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2b9b2:	e7f2      	b.n	2b99a <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   2b9b4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b9b8:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   2b9bc:	e7ed      	b.n	2b99a <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   2b9be:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b9c2:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
   2b9c6:	e7e8      	b.n	2b99a <pinctrl_configure_pins+0xe4>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   2b9c8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b9cc:	f8c6 4524 	str.w	r4, [r6, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2b9d0:	4643      	mov	r3, r8
   2b9d2:	2201      	movs	r2, #1
   2b9d4:	e7a7      	b.n	2b926 <pinctrl_configure_pins+0x70>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   2b9d6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b9da:	f8c6 4528 	str.w	r4, [r6, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2b9de:	e7f7      	b.n	2b9d0 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   2b9e0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b9e4:	f8c6 4530 	str.w	r4, [r6, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2b9e8:	e7f2      	b.n	2b9d0 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   2b9ea:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b9ee:	f8c6 4534 	str.w	r4, [r6, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2b9f2:	e7ed      	b.n	2b9d0 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   2b9f4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2b9f8:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   2b9fc:	e7e8      	b.n	2b9d0 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   2b9fe:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2ba02:	f8c6 453c 	str.w	r4, [r6, #1340]	; 0x53c
   2ba06:	e7e3      	b.n	2b9d0 <pinctrl_configure_pins+0x11a>
		switch (NRF_GET_FUN(pins[i])) {
   2ba08:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ba0c:	e75c      	b.n	2b8c8 <pinctrl_configure_pins+0x12>

0002ba0e <hci_driver_send>:
{
   2ba0e:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2ba10:	8983      	ldrh	r3, [r0, #12]
{
   2ba12:	4605      	mov	r5, r0
	if (!buf->len) {
   2ba14:	b373      	cbz	r3, 2ba74 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2ba16:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2ba18:	b1a3      	cbz	r3, 2ba44 <hci_driver_send+0x36>
   2ba1a:	2b02      	cmp	r3, #2
   2ba1c:	d12a      	bne.n	2ba74 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ba1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ba22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ba26:	f7f3 fc8f 	bl	1f348 <multithreading_lock_acquire>
	if (!errcode) {
   2ba2a:	4604      	mov	r4, r0
   2ba2c:	b940      	cbnz	r0, 2ba40 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2ba2e:	68a8      	ldr	r0, [r5, #8]
   2ba30:	f7e2 faca 	bl	dfc8 <sdc_hci_data_put>
   2ba34:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2ba36:	f7f3 fc8f 	bl	1f358 <multithreading_lock_release>
		if (errcode) {
   2ba3a:	b1b4      	cbz	r4, 2ba6a <hci_driver_send+0x5c>
			receive_signal_raise();
   2ba3c:	f7f3 fdfa 	bl	1f634 <receive_signal_raise>
}
   2ba40:	4620      	mov	r0, r4
   2ba42:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ba44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ba48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ba4c:	f7f3 fc7c 	bl	1f348 <multithreading_lock_acquire>
	if (!errcode) {
   2ba50:	4604      	mov	r4, r0
   2ba52:	2800      	cmp	r0, #0
   2ba54:	d1f4      	bne.n	2ba40 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2ba56:	68a8      	ldr	r0, [r5, #8]
   2ba58:	f7f3 fe9e 	bl	1f798 <hci_internal_cmd_put>
   2ba5c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2ba5e:	f7f3 fc7b 	bl	1f358 <multithreading_lock_release>
	if (errcode) {
   2ba62:	2c00      	cmp	r4, #0
   2ba64:	d1ec      	bne.n	2ba40 <hci_driver_send+0x32>
	receive_signal_raise();
   2ba66:	f7f3 fde5 	bl	1f634 <receive_signal_raise>
		net_buf_unref(buf);
   2ba6a:	4628      	mov	r0, r5
   2ba6c:	f7f1 fa24 	bl	1ceb8 <net_buf_unref>
   2ba70:	2400      	movs	r4, #0
   2ba72:	e7e5      	b.n	2ba40 <hci_driver_send+0x32>
	switch (type) {
   2ba74:	f06f 0415 	mvn.w	r4, #21
   2ba78:	e7e2      	b.n	2ba40 <hci_driver_send+0x32>

0002ba7a <receive_work_handler>:
	hci_driver_receive_process();
   2ba7a:	f7f3 be03 	b.w	1f684 <hci_driver_receive_process>

0002ba7e <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2ba7e:	b530      	push	{r4, r5, lr}
   2ba80:	b08d      	sub	sp, #52	; 0x34
   2ba82:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	BT_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2ba84:	4601      	mov	r1, r0
   2ba86:	4668      	mov	r0, sp
{
   2ba88:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2ba8a:	f7f4 f951 	bl	1fd30 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   2ba8e:	4621      	mov	r1, r4
   2ba90:	a804      	add	r0, sp, #16
   2ba92:	f7f4 f94d 	bl	1fd30 <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ba96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ba9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ba9e:	f7f3 fc53 	bl	1f348 <multithreading_lock_acquire>

	if (!errcode) {
   2baa2:	4604      	mov	r4, r0
   2baa4:	b960      	cbnz	r0, 2bac0 <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2baa6:	aa08      	add	r2, sp, #32
   2baa8:	a904      	add	r1, sp, #16
   2baaa:	4668      	mov	r0, sp
   2baac:	f7e2 f800 	bl	dab0 <sdc_soc_ecb_block_encrypt>
   2bab0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2bab2:	f7f3 fc51 	bl	1f358 <multithreading_lock_release>
	}

	if (!errcode) {
   2bab6:	b91c      	cbnz	r4, 2bac0 <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   2bab8:	a908      	add	r1, sp, #32
   2baba:	4628      	mov	r0, r5
   2babc:	f7f4 f938 	bl	1fd30 <sys_memcpy_swap.constprop.0>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2bac0:	4620      	mov	r0, r4
   2bac2:	b00d      	add	sp, #52	; 0x34
   2bac4:	bd30      	pop	{r4, r5, pc}

0002bac6 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2bac6:	2100      	movs	r1, #0
   2bac8:	f7f4 bace 	b.w	20068 <cmd_le_generate_dhkey>

0002bacc <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2bacc:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2bad0:	2901      	cmp	r1, #1
   2bad2:	d801      	bhi.n	2bad8 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2bad4:	f7f4 bac8 	b.w	20068 <cmd_le_generate_dhkey>
}
   2bad8:	2012      	movs	r0, #18
   2bada:	4770      	bx	lr

0002badc <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2badc:	4668      	mov	r0, sp
   2bade:	f020 0107 	bic.w	r1, r0, #7
   2bae2:	468d      	mov	sp, r1
   2bae4:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2bae6:	f7d8 fa5b 	bl	3fa0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2baea:	f7e8 fe23 	bl	14734 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2baee:	f7e8 ff0b 	bl	14908 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2baf2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2baf6:	4685      	mov	sp, r0
   2baf8:	4770      	bx	lr

0002bafa <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2bafa:	4668      	mov	r0, sp
   2bafc:	f020 0107 	bic.w	r1, r0, #7
   2bb00:	468d      	mov	sp, r1
   2bb02:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2bb04:	f7d8 f9c2 	bl	3e8c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2bb08:	f7e8 fe14 	bl	14734 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2bb0c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2bb10:	4685      	mov	sp, r0
   2bb12:	4770      	bx	lr

0002bb14 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2bb14:	4668      	mov	r0, sp
   2bb16:	f020 0107 	bic.w	r1, r0, #7
   2bb1a:	468d      	mov	sp, r1
   2bb1c:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2bb1e:	f7d5 ff25 	bl	196c <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2bb22:	f7e8 fe07 	bl	14734 <_arch_isr_direct_pm>
   2bb26:	f7e8 feef 	bl	14908 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2bb2a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2bb2e:	4685      	mov	sp, r0
   2bb30:	4770      	bx	lr

0002bb32 <nrfx_clock_enable>:
}
   2bb32:	4770      	bx	lr

0002bb34 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2bb34:	f7d8 bea4 	b.w	4880 <MPSL_IRQ_CLOCK_Handler>

0002bb38 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2bb38:	f7d9 ba5e 	b.w	4ff8 <mpsl_is_initialized>

0002bb3c <nrf_flash_sync_get_timestamp_begin>:
}
   2bb3c:	4770      	bx	lr

0002bb3e <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2bb3e:	f7f9 bf07 	b.w	25950 <nrf_cc3xx_platform_init>

0002bb42 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   2bb42:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2bb44:	f7e8 fc82 	bl	1444c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2bb48:	f7e8 fd34 	bl	145b4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   2bb4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2bb50:	f7f9 befe 	b.w	25950 <nrf_cc3xx_platform_init>

0002bb54 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2bb54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2bb58:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2bb5c:	f1a0 0308 	sub.w	r3, r0, #8
   2bb60:	4258      	negs	r0, r3
   2bb62:	4158      	adcs	r0, r3
   2bb64:	4770      	bx	lr

0002bb66 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2bb66:	4700      	bx	r0

0002bb68 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2bb68:	f000 b9ee 	b.w	2bf48 <z_impl_k_busy_wait>

0002bb6c <nrf_gpio_pin_present_check>:
    switch (port)
   2bb6c:	0943      	lsrs	r3, r0, #5
   2bb6e:	d00b      	beq.n	2bb88 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   2bb70:	2b01      	cmp	r3, #1
   2bb72:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2bb76:	bf18      	it	ne
   2bb78:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2bb7a:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2bb7e:	fa23 f000 	lsr.w	r0, r3, r0
}
   2bb82:	f000 0001 	and.w	r0, r0, #1
   2bb86:	4770      	bx	lr
    switch (port)
   2bb88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bb8c:	e7f5      	b.n	2bb7a <nrf_gpio_pin_present_check+0xe>

0002bb8e <pin_is_task_output>:
{
   2bb8e:	b508      	push	{r3, lr}
   2bb90:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2bb92:	f7f4 fe15 	bl	207c0 <pin_is_output>
   2bb96:	b110      	cbz	r0, 2bb9e <pin_is_task_output+0x10>
   2bb98:	4610      	mov	r0, r2
   2bb9a:	f7f4 fdfb 	bl	20794 <pin_in_use_by_te>
}
   2bb9e:	f000 0001 	and.w	r0, r0, #1
   2bba2:	bd08      	pop	{r3, pc}

0002bba4 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2bba4:	0080      	lsls	r0, r0, #2
}
   2bba6:	f500 7080 	add.w	r0, r0, #256	; 0x100
   2bbaa:	4770      	bx	lr

0002bbac <nrf_gpio_reconfigure>:
{
   2bbac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2bbb0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bbb2:	a801      	add	r0, sp, #4
{
   2bbb4:	460e      	mov	r6, r1
   2bbb6:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2bbba:	4690      	mov	r8, r2
   2bbbc:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bbbe:	f7f4 fe81 	bl	208c4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2bbc2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2bbc4:	f1b8 0f00 	cmp.w	r8, #0
   2bbc8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2bbcc:	bf14      	ite	ne
   2bbce:	2302      	movne	r3, #2
   2bbd0:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2bbd2:	2e00      	cmp	r6, #0
   2bbd4:	bf18      	it	ne
   2bbd6:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2bbda:	2d00      	cmp	r5, #0
   2bbdc:	bf14      	ite	ne
   2bbde:	210c      	movne	r1, #12
   2bbe0:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2bbe2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2bbe4:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2bbe8:	bf14      	ite	ne
   2bbea:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   2bbee:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2bbf0:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2bbf2:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2bbf6:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2bbfa:	bf14      	ite	ne
   2bbfc:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2bc00:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2bc02:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2bc04:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2bc08:	b106      	cbz	r6, 2bc0c <nrf_gpio_reconfigure+0x60>
   2bc0a:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2bc0c:	f1b8 0f00 	cmp.w	r8, #0
   2bc10:	d003      	beq.n	2bc1a <nrf_gpio_reconfigure+0x6e>
   2bc12:	f898 8000 	ldrb.w	r8, [r8]
   2bc16:	ea4f 0848 	mov.w	r8, r8, lsl #1
   2bc1a:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2bc1c:	b10d      	cbz	r5, 2bc22 <nrf_gpio_reconfigure+0x76>
   2bc1e:	782d      	ldrb	r5, [r5, #0]
   2bc20:	00ad      	lsls	r5, r5, #2
   2bc22:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2bc26:	b10c      	cbz	r4, 2bc2c <nrf_gpio_reconfigure+0x80>
   2bc28:	7822      	ldrb	r2, [r4, #0]
   2bc2a:	0214      	lsls	r4, r2, #8
   2bc2c:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2bc2e:	b10f      	cbz	r7, 2bc34 <nrf_gpio_reconfigure+0x88>
   2bc30:	783f      	ldrb	r7, [r7, #0]
   2bc32:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2bc34:	432c      	orrs	r4, r5
   2bc36:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2bc38:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2bc3c:	b002      	add	sp, #8
   2bc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bc42 <nrf_gpio_cfg_sense_set>:
{
   2bc42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2bc44:	f10d 030f 	add.w	r3, sp, #15
   2bc48:	9301      	str	r3, [sp, #4]
   2bc4a:	2300      	movs	r3, #0
{
   2bc4c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2bc50:	9300      	str	r3, [sp, #0]
   2bc52:	461a      	mov	r2, r3
   2bc54:	4619      	mov	r1, r3
   2bc56:	f7ff ffa9 	bl	2bbac <nrf_gpio_reconfigure>
}
   2bc5a:	b005      	add	sp, #20
   2bc5c:	f85d fb04 	ldr.w	pc, [sp], #4

0002bc60 <is_valid_address>:
{
   2bc60:	4603      	mov	r3, r0
   2bc62:	4608      	mov	r0, r1
   2bc64:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   2bc68:	690a      	ldr	r2, [r1, #16]
    return p_reg->CODESIZE;
   2bc6a:	6949      	ldr	r1, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   2bc6c:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2bc6e:	4293      	cmp	r3, r2
   2bc70:	d308      	bcc.n	2bc84 <is_valid_address+0x24>
    if (uicr_allowed &&
   2bc72:	b140      	cbz	r0, 2bc86 <is_valid_address+0x26>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   2bc74:	f1a3 2010 	sub.w	r0, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   2bc78:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
   2bc7c:	bf2c      	ite	cs
   2bc7e:	2000      	movcs	r0, #0
   2bc80:	2001      	movcc	r0, #1
   2bc82:	4770      	bx	lr
        return true;
   2bc84:	2001      	movs	r0, #1
}
   2bc86:	4770      	bx	lr

0002bc88 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   2bc88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2bc8c:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   2bc8e:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2bc90:	4350      	muls	r0, r2
   2bc92:	4770      	bx	lr

0002bc94 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2bc94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2bc98:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2bc9a:	4770      	bx	lr

0002bc9c <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2bc9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2bca0:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2bca2:	4770      	bx	lr

0002bca4 <nrf_gpio_cfg_default>:
{
   2bca4:	b507      	push	{r0, r1, r2, lr}
   2bca6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bca8:	a801      	add	r0, sp, #4
   2bcaa:	f7f5 f9d9 	bl	21060 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2bcae:	9b01      	ldr	r3, [sp, #4]
   2bcb0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2bcb4:	2202      	movs	r2, #2
   2bcb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2bcba:	b003      	add	sp, #12
   2bcbc:	f85d fb04 	ldr.w	pc, [sp], #4

0002bcc0 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2bcc0:	2302      	movs	r3, #2
   2bcc2:	f7f5 ba09 	b.w	210d8 <qspi_xfer>

0002bcc6 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2bcc6:	2303      	movs	r3, #3
   2bcc8:	f7f5 ba06 	b.w	210d8 <qspi_xfer>

0002bccc <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2bccc:	2100      	movs	r1, #0
   2bcce:	2002      	movs	r0, #2
   2bcd0:	f7f5 bcee 	b.w	216b0 <nrfx_qspi_erase>

0002bcd4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2bcd4:	f7f5 bd66 	b.w	217a4 <_DoInit>

0002bcd8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2bcd8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2bcda:	f7ff fffb 	bl	2bcd4 <SEGGER_RTT_Init>

	return 0;
}
   2bcde:	2000      	movs	r0, #0
   2bce0:	bd08      	pop	{r3, pc}

0002bce2 <z_device_state_init>:
}
   2bce2:	4770      	bx	lr

0002bce4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2bce4:	b138      	cbz	r0, 2bcf6 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2bce6:	68c3      	ldr	r3, [r0, #12]
   2bce8:	8818      	ldrh	r0, [r3, #0]
   2bcea:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2bcee:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2bcf2:	4258      	negs	r0, r3
   2bcf4:	4158      	adcs	r0, r3
}
   2bcf6:	4770      	bx	lr

0002bcf8 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   2bcf8:	f000 ba64 	b.w	2c1c4 <memset>

0002bcfc <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2bcfc:	f000 ba27 	b.w	2c14e <memcpy>

0002bd00 <k_heap_init>:
{
   2bd00:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2bd02:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2bd06:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2bd0a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2bd0c:	f7e6 bf64 	b.w	12bd8 <sys_heap_init>

0002bd10 <k_mem_slab_init>:
{
   2bd10:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2bd12:	2400      	movs	r4, #0
   2bd14:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   2bd16:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2bd18:	ea41 0402 	orr.w	r4, r1, r2
   2bd1c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2bd20:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   2bd24:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2bd26:	d10c      	bne.n	2bd42 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   2bd28:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2bd2a:	42a3      	cmp	r3, r4
   2bd2c:	d103      	bne.n	2bd36 <k_mem_slab_init+0x26>
   2bd2e:	e9c0 0000 	strd	r0, r0, [r0]
}
   2bd32:	2000      	movs	r0, #0
}
   2bd34:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2bd36:	6985      	ldr	r5, [r0, #24]
   2bd38:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2bd3a:	3401      	adds	r4, #1
		slab->free_list = p;
   2bd3c:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   2bd3e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2bd40:	e7f3      	b.n	2bd2a <k_mem_slab_init+0x1a>
		return -EINVAL;
   2bd42:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2bd46:	e7f5      	b.n	2bd34 <k_mem_slab_init+0x24>

0002bd48 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2bd48:	f3ef 8005 	mrs	r0, IPSR
}
   2bd4c:	3800      	subs	r0, #0
   2bd4e:	bf18      	it	ne
   2bd50:	2001      	movne	r0, #1
   2bd52:	4770      	bx	lr

0002bd54 <z_impl_k_thread_name_set>:
}
   2bd54:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2bd58:	4770      	bx	lr

0002bd5a <k_thread_name_get>:
}
   2bd5a:	2000      	movs	r0, #0
   2bd5c:	4770      	bx	lr

0002bd5e <z_impl_k_thread_start>:
	z_sched_start(thread);
   2bd5e:	f7f7 bd13 	b.w	23788 <z_sched_start>

0002bd62 <z_pm_save_idle_exit>:
{
   2bd62:	b508      	push	{r3, lr}
	pm_system_resume();
   2bd64:	f7e8 f9ea 	bl	1413c <pm_system_resume>
}
   2bd68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2bd6c:	f7ff bd47 	b.w	2b7fe <sys_clock_idle_exit>

0002bd70 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2bd70:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2bd74:	428b      	cmp	r3, r1
   2bd76:	d001      	beq.n	2bd7c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2bd78:	f7f7 be5a 	b.w	23a30 <z_set_prio>
}
   2bd7c:	2000      	movs	r0, #0
   2bd7e:	4770      	bx	lr

0002bd80 <z_impl_k_mutex_init>:
{
   2bd80:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2bd82:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2bd84:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2bd88:	e9c3 3300 	strd	r3, r3, [r3]
}
   2bd8c:	4770      	bx	lr

0002bd8e <z_queue_node_peek>:
{
   2bd8e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2bd90:	4604      	mov	r4, r0
   2bd92:	b130      	cbz	r0, 2bda2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2bd94:	6802      	ldr	r2, [r0, #0]
   2bd96:	0793      	lsls	r3, r2, #30
   2bd98:	d003      	beq.n	2bda2 <z_queue_node_peek+0x14>
		ret = anode->data;
   2bd9a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2bd9c:	b109      	cbz	r1, 2bda2 <z_queue_node_peek+0x14>
			k_free(anode);
   2bd9e:	f000 f9be 	bl	2c11e <k_free>
}
   2bda2:	4620      	mov	r0, r4
   2bda4:	bd10      	pop	{r4, pc}

0002bda6 <z_impl_k_queue_init>:
	list->head = NULL;
   2bda6:	2300      	movs	r3, #0
	list->tail = NULL;
   2bda8:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2bdac:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   2bdae:	f100 030c 	add.w	r3, r0, #12
   2bdb2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2bdb6:	f100 0314 	add.w	r3, r0, #20
   2bdba:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2bdbe:	4770      	bx	lr

0002bdc0 <k_queue_append>:
{
   2bdc0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2bdc2:	2301      	movs	r3, #1
   2bdc4:	9300      	str	r3, [sp, #0]
   2bdc6:	2300      	movs	r3, #0
{
   2bdc8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2bdca:	4619      	mov	r1, r3
   2bdcc:	f7f6 fb1a 	bl	22404 <queue_insert>
}
   2bdd0:	b003      	add	sp, #12
   2bdd2:	f85d fb04 	ldr.w	pc, [sp], #4

0002bdd6 <k_queue_prepend>:
{
   2bdd6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2bdd8:	2300      	movs	r3, #0
{
   2bdda:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2bddc:	9300      	str	r3, [sp, #0]
   2bdde:	4619      	mov	r1, r3
   2bde0:	f7f6 fb10 	bl	22404 <queue_insert>
}
   2bde4:	b003      	add	sp, #12
   2bde6:	f85d fb04 	ldr.w	pc, [sp], #4

0002bdea <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2bdea:	b15a      	cbz	r2, 2be04 <z_impl_k_sem_init+0x1a>
   2bdec:	428a      	cmp	r2, r1
   2bdee:	d309      	bcc.n	2be04 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2bdf0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2bdf4:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2bdf8:	e9c0 0000 	strd	r0, r0, [r0]
   2bdfc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2be00:	2000      	movs	r0, #0
   2be02:	4770      	bx	lr
		return -EINVAL;
   2be04:	f06f 0015 	mvn.w	r0, #21
}
   2be08:	4770      	bx	lr

0002be0a <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2be0a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2be0c:	2301      	movs	r3, #1
   2be0e:	408b      	lsls	r3, r1
   2be10:	ea22 0303 	bic.w	r3, r2, r3
   2be14:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2be16:	fa22 f001 	lsr.w	r0, r2, r1
}
   2be1a:	f000 0001 	and.w	r0, r0, #1
   2be1e:	4770      	bx	lr

0002be20 <unschedule_locked>:
{
   2be20:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2be22:	2103      	movs	r1, #3
{
   2be24:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2be26:	300c      	adds	r0, #12
   2be28:	f7ff ffef 	bl	2be0a <flag_test_and_clear>
   2be2c:	4604      	mov	r4, r0
   2be2e:	b118      	cbz	r0, 2be38 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2be30:	f105 0010 	add.w	r0, r5, #16
   2be34:	f7f8 fb1e 	bl	24474 <z_abort_timeout>
}
   2be38:	4620      	mov	r0, r4
   2be3a:	bd38      	pop	{r3, r4, r5, pc}

0002be3c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2be3c:	b120      	cbz	r0, 2be48 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2be3e:	2200      	movs	r2, #0
   2be40:	4611      	mov	r1, r2
   2be42:	3088      	adds	r0, #136	; 0x88
   2be44:	f7f8 b9ac 	b.w	241a0 <z_sched_wake>
}
   2be48:	4770      	bx	lr

0002be4a <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2be4a:	68c3      	ldr	r3, [r0, #12]
{
   2be4c:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2be4e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2be52:	079b      	lsls	r3, r3, #30
{
   2be54:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2be56:	d416      	bmi.n	2be86 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2be58:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2be5a:	2102      	movs	r1, #2
   2be5c:	300c      	adds	r0, #12
   2be5e:	f7ff ffd4 	bl	2be0a <flag_test_and_clear>
   2be62:	b180      	cbz	r0, 2be86 <cancel_async_locked+0x3c>
	return list->head;
   2be64:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2be68:	b16a      	cbz	r2, 2be86 <cancel_async_locked+0x3c>
   2be6a:	4294      	cmp	r4, r2
   2be6c:	d11b      	bne.n	2bea6 <cancel_async_locked+0x5c>
	return node->next;
   2be6e:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2be70:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   2be74:	b98d      	cbnz	r5, 2be9a <cancel_async_locked+0x50>
   2be76:	428c      	cmp	r4, r1
	list->head = node;
   2be78:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2be7c:	d101      	bne.n	2be82 <cancel_async_locked+0x38>
	list->tail = node;
   2be7e:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   2be82:	2300      	movs	r3, #0
   2be84:	6023      	str	r3, [r4, #0]
	return *flagp;
   2be86:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2be88:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2be8c:	bf1e      	ittt	ne
   2be8e:	f043 0302 	orrne.w	r3, r3, #2
   2be92:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2be94:	f003 000f 	andne.w	r0, r3, #15
}
   2be98:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2be9a:	428c      	cmp	r4, r1
	parent->next = child;
   2be9c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2be9e:	bf08      	it	eq
   2bea0:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   2bea4:	e7ed      	b.n	2be82 <cancel_async_locked+0x38>
	return node->next;
   2bea6:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bea8:	6812      	ldr	r2, [r2, #0]
   2beaa:	e7dd      	b.n	2be68 <cancel_async_locked+0x1e>

0002beac <k_work_submit_to_queue>:
{
   2beac:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2beae:	f7f6 fed9 	bl	22c64 <z_work_submit_to_queue>
	if (ret > 0) {
   2beb2:	1e04      	subs	r4, r0, #0
   2beb4:	dd09      	ble.n	2beca <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2beb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2beba:	f3ef 8011 	mrs	r0, BASEPRI
   2bebe:	f383 8812 	msr	BASEPRI_MAX, r3
   2bec2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2bec6:	f000 f80d 	bl	2bee4 <z_reschedule_irqlock>
}
   2beca:	4620      	mov	r0, r4
   2becc:	bd10      	pop	{r4, pc}

0002bece <k_work_delayable_busy_get>:
   2bece:	f7f6 be93 	b.w	22bf8 <k_work_busy_get>

0002bed2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2bed2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2bed6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2beda:	4283      	cmp	r3, r0
		return b2 - b1;
   2bedc:	bf14      	ite	ne
   2bede:	1ac0      	subne	r0, r0, r3
	return 0;
   2bee0:	2000      	moveq	r0, #0
}
   2bee2:	4770      	bx	lr

0002bee4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2bee4:	4603      	mov	r3, r0
   2bee6:	b920      	cbnz	r0, 2bef2 <z_reschedule_irqlock+0xe>
   2bee8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2beec:	b90a      	cbnz	r2, 2bef2 <z_reschedule_irqlock+0xe>
   2beee:	f7e8 bc4f 	b.w	14790 <arch_swap>
	__asm__ volatile(
   2bef2:	f383 8811 	msr	BASEPRI, r3
   2bef6:	f3bf 8f6f 	isb	sy
}
   2befa:	4770      	bx	lr

0002befc <z_reschedule_unlocked>:
	__asm__ volatile(
   2befc:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bf00:	f3ef 8011 	mrs	r0, BASEPRI
   2bf04:	f383 8812 	msr	BASEPRI_MAX, r3
   2bf08:	f3bf 8f6f 	isb	sy
   2bf0c:	f7ff bfea 	b.w	2bee4 <z_reschedule_irqlock>

0002bf10 <z_priq_dumb_best>:
{
   2bf10:	4603      	mov	r3, r0
	return list->head == list;
   2bf12:	6800      	ldr	r0, [r0, #0]
}
   2bf14:	4283      	cmp	r3, r0
   2bf16:	bf08      	it	eq
   2bf18:	2000      	moveq	r0, #0
   2bf1a:	4770      	bx	lr

0002bf1c <z_unpend_all>:
{
   2bf1c:	b538      	push	{r3, r4, r5, lr}
   2bf1e:	4605      	mov	r5, r0
	int need_sched = 0;
   2bf20:	2000      	movs	r0, #0
   2bf22:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bf24:	42a5      	cmp	r5, r4
   2bf26:	d000      	beq.n	2bf2a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2bf28:	b904      	cbnz	r4, 2bf2c <z_unpend_all+0x10>
}
   2bf2a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2bf2c:	4620      	mov	r0, r4
   2bf2e:	f7f7 fa8b 	bl	23448 <z_unpend_thread>
		z_ready_thread(thread);
   2bf32:	4620      	mov	r0, r4
   2bf34:	f7f7 fbf2 	bl	2371c <z_ready_thread>
		need_sched = 1;
   2bf38:	2001      	movs	r0, #1
   2bf3a:	e7f2      	b.n	2bf22 <z_unpend_all+0x6>

0002bf3c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2bf3c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2bf3e:	f7f8 fbed 	bl	2471c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2bf42:	bd08      	pop	{r3, pc}

0002bf44 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2bf44:	f7f8 bbea 	b.w	2471c <sys_clock_tick_get>

0002bf48 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2bf48:	b108      	cbz	r0, 2bf4e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2bf4a:	f7e9 b955 	b.w	151f8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2bf4e:	4770      	bx	lr

0002bf50 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2bf50:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2bf54:	bf08      	it	eq
   2bf56:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2bf5a:	b538      	push	{r3, r4, r5, lr}
   2bf5c:	4605      	mov	r5, r0
   2bf5e:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2bf60:	d01d      	beq.n	2bf9e <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2bf62:	ea51 0300 	orrs.w	r3, r1, r0
   2bf66:	d103      	bne.n	2bf70 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2bf68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2bf6c:	f7f8 bbd6 	b.w	2471c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2bf70:	f06f 0301 	mvn.w	r3, #1
   2bf74:	1a18      	subs	r0, r3, r0
   2bf76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bf7a:	eb63 0101 	sbc.w	r1, r3, r1
   2bf7e:	2900      	cmp	r1, #0
   2bf80:	da0c      	bge.n	2bf9c <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2bf82:	f7f8 fbcb 	bl	2471c <sys_clock_tick_get>
   2bf86:	2d01      	cmp	r5, #1
   2bf88:	4622      	mov	r2, r4
   2bf8a:	f174 0400 	sbcs.w	r4, r4, #0
   2bf8e:	462b      	mov	r3, r5
   2bf90:	bfbc      	itt	lt
   2bf92:	2301      	movlt	r3, #1
   2bf94:	2200      	movlt	r2, #0
   2bf96:	1818      	adds	r0, r3, r0
   2bf98:	eb41 0102 	adc.w	r1, r1, r2
}
   2bf9c:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2bf9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bfa2:	4601      	mov	r1, r0
   2bfa4:	e7fa      	b.n	2bf9c <sys_clock_timeout_end_calc+0x4c>

0002bfa6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2bfa6:	b510      	push	{r4, lr}
   2bfa8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2bfaa:	f7f8 fa63 	bl	24474 <z_abort_timeout>

	if (inactive) {
   2bfae:	b9b0      	cbnz	r0, 2bfde <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2bfb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2bfb2:	b10b      	cbz	r3, 2bfb8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2bfb4:	4620      	mov	r0, r4
   2bfb6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2bfb8:	f104 0018 	add.w	r0, r4, #24
   2bfbc:	f7f7 fe6e 	bl	23c9c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2bfc0:	b168      	cbz	r0, 2bfde <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2bfc2:	f7f7 fbab 	bl	2371c <z_ready_thread>
   2bfc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bfca:	f3ef 8011 	mrs	r0, BASEPRI
   2bfce:	f383 8812 	msr	BASEPRI_MAX, r3
   2bfd2:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2bfd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bfda:	f7ff bf83 	b.w	2bee4 <z_reschedule_irqlock>
   2bfde:	bd10      	pop	{r4, pc}

0002bfe0 <add_event>:
{
   2bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bfe2:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2bfe4:	e9d0 1300 	ldrd	r1, r3, [r0]
   2bfe8:	4288      	cmp	r0, r1
   2bfea:	4604      	mov	r4, r0
   2bfec:	d00d      	beq.n	2c00a <add_event+0x2a>
	if ((pending == NULL) ||
   2bfee:	b163      	cbz	r3, 2c00a <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bff0:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bff2:	b100      	cbz	r0, 2bff6 <add_event+0x16>
   2bff4:	3860      	subs	r0, #96	; 0x60
   2bff6:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bffa:	4639      	mov	r1, r7
   2bffc:	f7ff ff69 	bl	2bed2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2c000:	2800      	cmp	r0, #0
   2c002:	dc02      	bgt.n	2c00a <add_event+0x2a>
	return list->head == list;
   2c004:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c006:	42b4      	cmp	r4, r6
   2c008:	d109      	bne.n	2c01e <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2c00a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2c00c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2c010:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2c012:	6065      	str	r5, [r4, #4]
}
   2c014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2c016:	6863      	ldr	r3, [r4, #4]
   2c018:	42b3      	cmp	r3, r6
   2c01a:	d0f6      	beq.n	2c00a <add_event+0x2a>
   2c01c:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2c01e:	2e00      	cmp	r6, #0
   2c020:	d0f3      	beq.n	2c00a <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2c022:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2c024:	b101      	cbz	r1, 2c028 <add_event+0x48>
   2c026:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2c028:	4638      	mov	r0, r7
   2c02a:	f7ff ff52 	bl	2bed2 <z_sched_prio_cmp>
   2c02e:	2800      	cmp	r0, #0
   2c030:	ddf1      	ble.n	2c016 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2c032:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2c034:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2c038:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2c03a:	6075      	str	r5, [r6, #4]
			return;
   2c03c:	e7ea      	b.n	2c014 <add_event+0x34>

0002c03e <signal_poll_event>:
{
   2c03e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2c042:	6884      	ldr	r4, [r0, #8]
{
   2c044:	4605      	mov	r5, r0
   2c046:	460e      	mov	r6, r1
	if (poller != NULL) {
   2c048:	b144      	cbz	r4, 2c05c <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2c04a:	7863      	ldrb	r3, [r4, #1]
   2c04c:	2b01      	cmp	r3, #1
   2c04e:	d136      	bne.n	2c0be <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2c050:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2c054:	f013 0302 	ands.w	r3, r3, #2
   2c058:	d10a      	bne.n	2c070 <signal_poll_event+0x32>
		poller->is_polling = false;
   2c05a:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2c05c:	68eb      	ldr	r3, [r5, #12]
   2c05e:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2c062:	430e      	orrs	r6, r1
	event->poller = NULL;
   2c064:	2000      	movs	r0, #0
	event->state |= state;
   2c066:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2c06a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2c06c:	60eb      	str	r3, [r5, #12]
	return retcode;
   2c06e:	e00b      	b.n	2c088 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2c070:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2c074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2c078:	bf08      	it	eq
   2c07a:	f112 0f02 	cmneq.w	r2, #2
   2c07e:	d105      	bne.n	2c08c <signal_poll_event+0x4e>
		poller->is_polling = false;
   2c080:	2300      	movs	r3, #0
   2c082:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2c084:	f06f 000a 	mvn.w	r0, #10
}
   2c088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2c08c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2c090:	4640      	mov	r0, r8
   2c092:	f7f7 f9d9 	bl	23448 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2c096:	2e08      	cmp	r6, #8
   2c098:	bf0c      	ite	eq
   2c09a:	f06f 0303 	mvneq.w	r3, #3
   2c09e:	2300      	movne	r3, #0
   2c0a0:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2c0a2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2c0a6:	06db      	lsls	r3, r3, #27
   2c0a8:	d102      	bne.n	2c0b0 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2c0aa:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2c0ae:	b10f      	cbz	r7, 2c0b4 <signal_poll_event+0x76>
		poller->is_polling = false;
   2c0b0:	2300      	movs	r3, #0
   2c0b2:	e7d2      	b.n	2c05a <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2c0b4:	4640      	mov	r0, r8
   2c0b6:	f7f7 fb31 	bl	2371c <z_ready_thread>
		poller->is_polling = false;
   2c0ba:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2c0bc:	e7ce      	b.n	2c05c <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2c0be:	2b02      	cmp	r3, #2
   2c0c0:	d1f6      	bne.n	2c0b0 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2c0c2:	7823      	ldrb	r3, [r4, #0]
   2c0c4:	2b00      	cmp	r3, #0
   2c0c6:	d0c9      	beq.n	2c05c <signal_poll_event+0x1e>
   2c0c8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2c0cc:	2f00      	cmp	r7, #0
   2c0ce:	d0f4      	beq.n	2c0ba <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2c0d0:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2c0d4:	f1a4 0914 	sub.w	r9, r4, #20
   2c0d8:	f104 0014 	add.w	r0, r4, #20
   2c0dc:	f7f8 f9ca 	bl	24474 <z_abort_timeout>
		twork->poll_result = 0;
   2c0e0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2c0e4:	4649      	mov	r1, r9
   2c0e6:	4638      	mov	r0, r7
   2c0e8:	f7f6 fdbc 	bl	22c64 <z_work_submit_to_queue>
		poller->is_polling = false;
   2c0ec:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2c0f0:	e7b4      	b.n	2c05c <signal_poll_event+0x1e>

0002c0f2 <z_handle_obj_poll_events>:
{
   2c0f2:	4603      	mov	r3, r0
	return list->head == list;
   2c0f4:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2c0f6:	4283      	cmp	r3, r0
   2c0f8:	d008      	beq.n	2c10c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2c0fa:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2c0fe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c100:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c102:	2300      	movs	r3, #0
	node->prev = NULL;
   2c104:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2c108:	f7ff bf99 	b.w	2c03e <signal_poll_event>
}
   2c10c:	4770      	bx	lr

0002c10e <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2c10e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2c110:	e9c0 0000 	strd	r0, r0, [r0]
   2c114:	6083      	str	r3, [r0, #8]
}
   2c116:	4770      	bx	lr

0002c118 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2c118:	2300      	movs	r3, #0
   2c11a:	6083      	str	r3, [r0, #8]
}
   2c11c:	4770      	bx	lr

0002c11e <k_free>:
	if (ptr != NULL) {
   2c11e:	b120      	cbz	r0, 2c12a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2c120:	1f01      	subs	r1, r0, #4
   2c122:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2c126:	f7f5 bd93 	b.w	21c50 <k_heap_free>
}
   2c12a:	4770      	bx	lr

0002c12c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2c12c:	4770      	bx	lr

0002c12e <memcmp>:
   2c12e:	b510      	push	{r4, lr}
   2c130:	3901      	subs	r1, #1
   2c132:	4402      	add	r2, r0
   2c134:	4290      	cmp	r0, r2
   2c136:	d101      	bne.n	2c13c <memcmp+0xe>
   2c138:	2000      	movs	r0, #0
   2c13a:	e005      	b.n	2c148 <memcmp+0x1a>
   2c13c:	7803      	ldrb	r3, [r0, #0]
   2c13e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2c142:	42a3      	cmp	r3, r4
   2c144:	d001      	beq.n	2c14a <memcmp+0x1c>
   2c146:	1b18      	subs	r0, r3, r4
   2c148:	bd10      	pop	{r4, pc}
   2c14a:	3001      	adds	r0, #1
   2c14c:	e7f2      	b.n	2c134 <memcmp+0x6>

0002c14e <memcpy>:
   2c14e:	440a      	add	r2, r1
   2c150:	4291      	cmp	r1, r2
   2c152:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2c156:	d100      	bne.n	2c15a <memcpy+0xc>
   2c158:	4770      	bx	lr
   2c15a:	b510      	push	{r4, lr}
   2c15c:	f811 4b01 	ldrb.w	r4, [r1], #1
   2c160:	f803 4f01 	strb.w	r4, [r3, #1]!
   2c164:	4291      	cmp	r1, r2
   2c166:	d1f9      	bne.n	2c15c <memcpy+0xe>
   2c168:	bd10      	pop	{r4, pc}

0002c16a <__memcpy_chk>:
   2c16a:	429a      	cmp	r2, r3
   2c16c:	b508      	push	{r3, lr}
   2c16e:	d901      	bls.n	2c174 <__memcpy_chk+0xa>
   2c170:	f7e8 ffee 	bl	15150 <__chk_fail>
   2c174:	4281      	cmp	r1, r0
   2c176:	d804      	bhi.n	2c182 <__memcpy_chk+0x18>
   2c178:	188b      	adds	r3, r1, r2
   2c17a:	4298      	cmp	r0, r3
   2c17c:	d3f8      	bcc.n	2c170 <__memcpy_chk+0x6>
   2c17e:	4281      	cmp	r1, r0
   2c180:	d102      	bne.n	2c188 <__memcpy_chk+0x1e>
   2c182:	1883      	adds	r3, r0, r2
   2c184:	4299      	cmp	r1, r3
   2c186:	d3f3      	bcc.n	2c170 <__memcpy_chk+0x6>
   2c188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2c18c:	f7ff bfdf 	b.w	2c14e <memcpy>

0002c190 <memmove>:
   2c190:	4288      	cmp	r0, r1
   2c192:	b510      	push	{r4, lr}
   2c194:	eb01 0402 	add.w	r4, r1, r2
   2c198:	d902      	bls.n	2c1a0 <memmove+0x10>
   2c19a:	4284      	cmp	r4, r0
   2c19c:	4623      	mov	r3, r4
   2c19e:	d807      	bhi.n	2c1b0 <memmove+0x20>
   2c1a0:	1e43      	subs	r3, r0, #1
   2c1a2:	42a1      	cmp	r1, r4
   2c1a4:	d008      	beq.n	2c1b8 <memmove+0x28>
   2c1a6:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c1aa:	f803 2f01 	strb.w	r2, [r3, #1]!
   2c1ae:	e7f8      	b.n	2c1a2 <memmove+0x12>
   2c1b0:	4402      	add	r2, r0
   2c1b2:	4601      	mov	r1, r0
   2c1b4:	428a      	cmp	r2, r1
   2c1b6:	d100      	bne.n	2c1ba <memmove+0x2a>
   2c1b8:	bd10      	pop	{r4, pc}
   2c1ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2c1be:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2c1c2:	e7f7      	b.n	2c1b4 <memmove+0x24>

0002c1c4 <memset>:
   2c1c4:	4402      	add	r2, r0
   2c1c6:	4603      	mov	r3, r0
   2c1c8:	4293      	cmp	r3, r2
   2c1ca:	d100      	bne.n	2c1ce <memset+0xa>
   2c1cc:	4770      	bx	lr
   2c1ce:	f803 1b01 	strb.w	r1, [r3], #1
   2c1d2:	e7f9      	b.n	2c1c8 <memset+0x4>

0002c1d4 <__memset_chk>:
   2c1d4:	429a      	cmp	r2, r3
   2c1d6:	b508      	push	{r3, lr}
   2c1d8:	d901      	bls.n	2c1de <__memset_chk+0xa>
   2c1da:	f7e8 ffb9 	bl	15150 <__chk_fail>
   2c1de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2c1e2:	f7ff bfef 	b.w	2c1c4 <memset>

0002c1e6 <strcpy>:
   2c1e6:	4603      	mov	r3, r0
   2c1e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c1ec:	f803 2b01 	strb.w	r2, [r3], #1
   2c1f0:	2a00      	cmp	r2, #0
   2c1f2:	d1f9      	bne.n	2c1e8 <strcpy+0x2>
   2c1f4:	4770      	bx	lr

0002c1f6 <strncmp>:
   2c1f6:	b510      	push	{r4, lr}
   2c1f8:	4603      	mov	r3, r0
   2c1fa:	b172      	cbz	r2, 2c21a <strncmp+0x24>
   2c1fc:	3901      	subs	r1, #1
   2c1fe:	1884      	adds	r4, r0, r2
   2c200:	f813 0b01 	ldrb.w	r0, [r3], #1
   2c204:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2c208:	4290      	cmp	r0, r2
   2c20a:	d101      	bne.n	2c210 <strncmp+0x1a>
   2c20c:	42a3      	cmp	r3, r4
   2c20e:	d101      	bne.n	2c214 <strncmp+0x1e>
   2c210:	1a80      	subs	r0, r0, r2
   2c212:	bd10      	pop	{r4, pc}
   2c214:	2800      	cmp	r0, #0
   2c216:	d1f3      	bne.n	2c200 <strncmp+0xa>
   2c218:	e7fa      	b.n	2c210 <strncmp+0x1a>
   2c21a:	4610      	mov	r0, r2
   2c21c:	e7f9      	b.n	2c212 <strncmp+0x1c>

0002c21e <strnlen>:
   2c21e:	b510      	push	{r4, lr}
   2c220:	4602      	mov	r2, r0
   2c222:	4401      	add	r1, r0
   2c224:	428a      	cmp	r2, r1
   2c226:	4613      	mov	r3, r2
   2c228:	d003      	beq.n	2c232 <strnlen+0x14>
   2c22a:	781c      	ldrb	r4, [r3, #0]
   2c22c:	3201      	adds	r2, #1
   2c22e:	2c00      	cmp	r4, #0
   2c230:	d1f8      	bne.n	2c224 <strnlen+0x6>
   2c232:	1a18      	subs	r0, r3, r0
   2c234:	bd10      	pop	{r4, pc}
